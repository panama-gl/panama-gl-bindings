// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class wgl_h_21 extends wgl_h_22 {

    wgl_h_21() {
        // Should not be called directly
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_GENERIC_PARMS {
     *     DWORD_PTR dwCallback;
     * } *LPMCI_GENERIC_PARMS
     * }
     */
    public static final AddressLayout LPMCI_GENERIC_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OPEN_PARMSA {
     *     DWORD_PTR dwCallback;
     *     MCIDEVICEID wDeviceID;
     *     LPCSTR lpstrDeviceType;
     *     LPCSTR lpstrElementName;
     *     LPCSTR lpstrAlias;
     * } *PMCI_OPEN_PARMSA
     * }
     */
    public static final AddressLayout PMCI_OPEN_PARMSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OPEN_PARMSA {
     *     DWORD_PTR dwCallback;
     *     MCIDEVICEID wDeviceID;
     *     LPCSTR lpstrDeviceType;
     *     LPCSTR lpstrElementName;
     *     LPCSTR lpstrAlias;
     * } *LPMCI_OPEN_PARMSA
     * }
     */
    public static final AddressLayout LPMCI_OPEN_PARMSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OPEN_PARMSW {
     *     DWORD_PTR dwCallback;
     *     MCIDEVICEID wDeviceID;
     *     LPCWSTR lpstrDeviceType;
     *     LPCWSTR lpstrElementName;
     *     LPCWSTR lpstrAlias;
     * } *PMCI_OPEN_PARMSW
     * }
     */
    public static final AddressLayout PMCI_OPEN_PARMSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OPEN_PARMSW {
     *     DWORD_PTR dwCallback;
     *     MCIDEVICEID wDeviceID;
     *     LPCWSTR lpstrDeviceType;
     *     LPCWSTR lpstrElementName;
     *     LPCWSTR lpstrAlias;
     * } *LPMCI_OPEN_PARMSW
     * }
     */
    public static final AddressLayout LPMCI_OPEN_PARMSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMCI_OPEN_PARMSA PMCI_OPEN_PARMS
     * }
     */
    public static final AddressLayout PMCI_OPEN_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMCI_OPEN_PARMSA LPMCI_OPEN_PARMS
     * }
     */
    public static final AddressLayout LPMCI_OPEN_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_PLAY_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwFrom;
     *     DWORD dwTo;
     * } *PMCI_PLAY_PARMS
     * }
     */
    public static final AddressLayout PMCI_PLAY_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_PLAY_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwFrom;
     *     DWORD dwTo;
     * } *LPMCI_PLAY_PARMS
     * }
     */
    public static final AddressLayout LPMCI_PLAY_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_SEEK_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwTo;
     * } *PMCI_SEEK_PARMS
     * }
     */
    public static final AddressLayout PMCI_SEEK_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_SEEK_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwTo;
     * } *LPMCI_SEEK_PARMS
     * }
     */
    public static final AddressLayout LPMCI_SEEK_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_STATUS_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD_PTR dwReturn;
     *     DWORD dwItem;
     *     DWORD dwTrack;
     * } *PMCI_STATUS_PARMS
     * }
     */
    public static final AddressLayout PMCI_STATUS_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_STATUS_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD_PTR dwReturn;
     *     DWORD dwItem;
     *     DWORD dwTrack;
     * } *LPMCI_STATUS_PARMS
     * }
     */
    public static final AddressLayout LPMCI_STATUS_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_INFO_PARMSA {
     *     DWORD_PTR dwCallback;
     *     LPSTR lpstrReturn;
     *     DWORD dwRetSize;
     * } *LPMCI_INFO_PARMSA
     * }
     */
    public static final AddressLayout LPMCI_INFO_PARMSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_INFO_PARMSW {
     *     DWORD_PTR dwCallback;
     *     LPWSTR lpstrReturn;
     *     DWORD dwRetSize;
     * } *LPMCI_INFO_PARMSW
     * }
     */
    public static final AddressLayout LPMCI_INFO_PARMSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMCI_INFO_PARMSA LPMCI_INFO_PARMS
     * }
     */
    public static final AddressLayout LPMCI_INFO_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_GETDEVCAPS_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwReturn;
     *     DWORD dwItem;
     * } *PMCI_GETDEVCAPS_PARMS
     * }
     */
    public static final AddressLayout PMCI_GETDEVCAPS_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_GETDEVCAPS_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwReturn;
     *     DWORD dwItem;
     * } *LPMCI_GETDEVCAPS_PARMS
     * }
     */
    public static final AddressLayout LPMCI_GETDEVCAPS_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_SYSINFO_PARMSA {
     *     DWORD_PTR dwCallback;
     *     LPSTR lpstrReturn;
     *     DWORD dwRetSize;
     *     DWORD dwNumber;
     *     UINT wDeviceType;
     * } *PMCI_SYSINFO_PARMSA
     * }
     */
    public static final AddressLayout PMCI_SYSINFO_PARMSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_SYSINFO_PARMSA {
     *     DWORD_PTR dwCallback;
     *     LPSTR lpstrReturn;
     *     DWORD dwRetSize;
     *     DWORD dwNumber;
     *     UINT wDeviceType;
     * } *LPMCI_SYSINFO_PARMSA
     * }
     */
    public static final AddressLayout LPMCI_SYSINFO_PARMSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_SYSINFO_PARMSW {
     *     DWORD_PTR dwCallback;
     *     LPWSTR lpstrReturn;
     *     DWORD dwRetSize;
     *     DWORD dwNumber;
     *     UINT wDeviceType;
     * } *PMCI_SYSINFO_PARMSW
     * }
     */
    public static final AddressLayout PMCI_SYSINFO_PARMSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_SYSINFO_PARMSW {
     *     DWORD_PTR dwCallback;
     *     LPWSTR lpstrReturn;
     *     DWORD dwRetSize;
     *     DWORD dwNumber;
     *     UINT wDeviceType;
     * } *LPMCI_SYSINFO_PARMSW
     * }
     */
    public static final AddressLayout LPMCI_SYSINFO_PARMSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMCI_SYSINFO_PARMSA PMCI_SYSINFO_PARMS
     * }
     */
    public static final AddressLayout PMCI_SYSINFO_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMCI_SYSINFO_PARMSA LPMCI_SYSINFO_PARMS
     * }
     */
    public static final AddressLayout LPMCI_SYSINFO_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_SET_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwTimeFormat;
     *     DWORD dwAudio;
     * } *PMCI_SET_PARMS
     * }
     */
    public static final AddressLayout PMCI_SET_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_SET_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwTimeFormat;
     *     DWORD dwAudio;
     * } *LPMCI_SET_PARMS
     * }
     */
    public static final AddressLayout LPMCI_SET_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_BREAK_PARMS {
     *     DWORD_PTR dwCallback;
     *     int nVirtKey;
     *     HWND hwndBreak;
     * } *PMCI_BREAK_PARMS
     * }
     */
    public static final AddressLayout PMCI_BREAK_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_BREAK_PARMS {
     *     DWORD_PTR dwCallback;
     *     int nVirtKey;
     *     HWND hwndBreak;
     * } *LPMCI_BREAK_PARMS
     * }
     */
    public static final AddressLayout LPMCI_BREAK_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_SAVE_PARMSA {
     *     DWORD_PTR dwCallback;
     *     LPCSTR lpfilename;
     * } *PMCI_SAVE_PARMSA
     * }
     */
    public static final AddressLayout PMCI_SAVE_PARMSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_SAVE_PARMSA {
     *     DWORD_PTR dwCallback;
     *     LPCSTR lpfilename;
     * } *LPMCI_SAVE_PARMSA
     * }
     */
    public static final AddressLayout LPMCI_SAVE_PARMSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_SAVE_PARMSW {
     *     DWORD_PTR dwCallback;
     *     LPCWSTR lpfilename;
     * } *PMCI_SAVE_PARMSW
     * }
     */
    public static final AddressLayout PMCI_SAVE_PARMSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_SAVE_PARMSW {
     *     DWORD_PTR dwCallback;
     *     LPCWSTR lpfilename;
     * } *LPMCI_SAVE_PARMSW
     * }
     */
    public static final AddressLayout LPMCI_SAVE_PARMSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMCI_SAVE_PARMSA PMCI_SAVE_PARMS
     * }
     */
    public static final AddressLayout PMCI_SAVE_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMCI_SAVE_PARMSA LPMCI_SAVE_PARMS
     * }
     */
    public static final AddressLayout LPMCI_SAVE_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_LOAD_PARMSA {
     *     DWORD_PTR dwCallback;
     *     LPCSTR lpfilename;
     * } *PMCI_LOAD_PARMSA
     * }
     */
    public static final AddressLayout PMCI_LOAD_PARMSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_LOAD_PARMSA {
     *     DWORD_PTR dwCallback;
     *     LPCSTR lpfilename;
     * } *LPMCI_LOAD_PARMSA
     * }
     */
    public static final AddressLayout LPMCI_LOAD_PARMSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_LOAD_PARMSW {
     *     DWORD_PTR dwCallback;
     *     LPCWSTR lpfilename;
     * } *PMCI_LOAD_PARMSW
     * }
     */
    public static final AddressLayout PMCI_LOAD_PARMSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_LOAD_PARMSW {
     *     DWORD_PTR dwCallback;
     *     LPCWSTR lpfilename;
     * } *LPMCI_LOAD_PARMSW
     * }
     */
    public static final AddressLayout LPMCI_LOAD_PARMSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMCI_LOAD_PARMSA PMCI_LOAD_PARMS
     * }
     */
    public static final AddressLayout PMCI_LOAD_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMCI_LOAD_PARMSA LPMCI_LOAD_PARMS
     * }
     */
    public static final AddressLayout LPMCI_LOAD_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_RECORD_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwFrom;
     *     DWORD dwTo;
     * } *LPMCI_RECORD_PARMS
     * }
     */
    public static final AddressLayout LPMCI_RECORD_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_VD_PLAY_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwFrom;
     *     DWORD dwTo;
     *     DWORD dwSpeed;
     * } *PMCI_VD_PLAY_PARMS
     * }
     */
    public static final AddressLayout PMCI_VD_PLAY_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_VD_PLAY_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwFrom;
     *     DWORD dwTo;
     *     DWORD dwSpeed;
     * } *LPMCI_VD_PLAY_PARMS
     * }
     */
    public static final AddressLayout LPMCI_VD_PLAY_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_VD_STEP_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwFrames;
     * } *PMCI_VD_STEP_PARMS
     * }
     */
    public static final AddressLayout PMCI_VD_STEP_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_VD_STEP_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwFrames;
     * } *LPMCI_VD_STEP_PARMS
     * }
     */
    public static final AddressLayout LPMCI_VD_STEP_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_VD_ESCAPE_PARMSA {
     *     DWORD_PTR dwCallback;
     *     LPCSTR lpstrCommand;
     * } *PMCI_VD_ESCAPE_PARMSA
     * }
     */
    public static final AddressLayout PMCI_VD_ESCAPE_PARMSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_VD_ESCAPE_PARMSA {
     *     DWORD_PTR dwCallback;
     *     LPCSTR lpstrCommand;
     * } *LPMCI_VD_ESCAPE_PARMSA
     * }
     */
    public static final AddressLayout LPMCI_VD_ESCAPE_PARMSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_VD_ESCAPE_PARMSW {
     *     DWORD_PTR dwCallback;
     *     LPCWSTR lpstrCommand;
     * } *PMCI_VD_ESCAPE_PARMSW
     * }
     */
    public static final AddressLayout PMCI_VD_ESCAPE_PARMSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_VD_ESCAPE_PARMSW {
     *     DWORD_PTR dwCallback;
     *     LPCWSTR lpstrCommand;
     * } *LPMCI_VD_ESCAPE_PARMSW
     * }
     */
    public static final AddressLayout LPMCI_VD_ESCAPE_PARMSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMCI_VD_ESCAPE_PARMSA PMCI_VD_ESCAPE_PARMS
     * }
     */
    public static final AddressLayout PMCI_VD_ESCAPE_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMCI_VD_ESCAPE_PARMSA LPMCI_VD_ESCAPE_PARMS
     * }
     */
    public static final AddressLayout LPMCI_VD_ESCAPE_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_WAVE_OPEN_PARMSA {
     *     DWORD_PTR dwCallback;
     *     MCIDEVICEID wDeviceID;
     *     LPCSTR lpstrDeviceType;
     *     LPCSTR lpstrElementName;
     *     LPCSTR lpstrAlias;
     *     DWORD dwBufferSeconds;
     * } *PMCI_WAVE_OPEN_PARMSA
     * }
     */
    public static final AddressLayout PMCI_WAVE_OPEN_PARMSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_WAVE_OPEN_PARMSA {
     *     DWORD_PTR dwCallback;
     *     MCIDEVICEID wDeviceID;
     *     LPCSTR lpstrDeviceType;
     *     LPCSTR lpstrElementName;
     *     LPCSTR lpstrAlias;
     *     DWORD dwBufferSeconds;
     * } *LPMCI_WAVE_OPEN_PARMSA
     * }
     */
    public static final AddressLayout LPMCI_WAVE_OPEN_PARMSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_WAVE_OPEN_PARMSW {
     *     DWORD_PTR dwCallback;
     *     MCIDEVICEID wDeviceID;
     *     LPCWSTR lpstrDeviceType;
     *     LPCWSTR lpstrElementName;
     *     LPCWSTR lpstrAlias;
     *     DWORD dwBufferSeconds;
     * } *PMCI_WAVE_OPEN_PARMSW
     * }
     */
    public static final AddressLayout PMCI_WAVE_OPEN_PARMSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_WAVE_OPEN_PARMSW {
     *     DWORD_PTR dwCallback;
     *     MCIDEVICEID wDeviceID;
     *     LPCWSTR lpstrDeviceType;
     *     LPCWSTR lpstrElementName;
     *     LPCWSTR lpstrAlias;
     *     DWORD dwBufferSeconds;
     * } *LPMCI_WAVE_OPEN_PARMSW
     * }
     */
    public static final AddressLayout LPMCI_WAVE_OPEN_PARMSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMCI_WAVE_OPEN_PARMSA PMCI_WAVE_OPEN_PARMS
     * }
     */
    public static final AddressLayout PMCI_WAVE_OPEN_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMCI_WAVE_OPEN_PARMSA LPMCI_WAVE_OPEN_PARMS
     * }
     */
    public static final AddressLayout LPMCI_WAVE_OPEN_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_WAVE_DELETE_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwFrom;
     *     DWORD dwTo;
     * } *PMCI_WAVE_DELETE_PARMS
     * }
     */
    public static final AddressLayout PMCI_WAVE_DELETE_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_WAVE_DELETE_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwFrom;
     *     DWORD dwTo;
     * } *LPMCI_WAVE_DELETE_PARMS
     * }
     */
    public static final AddressLayout LPMCI_WAVE_DELETE_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_WAVE_SET_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwTimeFormat;
     *     DWORD dwAudio;
     *     UINT wInput;
     *     UINT wOutput;
     *     WORD wFormatTag;
     *     WORD wReserved2;
     *     WORD nChannels;
     *     WORD wReserved3;
     *     DWORD nSamplesPerSec;
     *     DWORD nAvgBytesPerSec;
     *     WORD nBlockAlign;
     *     WORD wReserved4;
     *     WORD wBitsPerSample;
     *     WORD wReserved5;
     * } *PMCI_WAVE_SET_PARMS
     * }
     */
    public static final AddressLayout PMCI_WAVE_SET_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_WAVE_SET_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwTimeFormat;
     *     DWORD dwAudio;
     *     UINT wInput;
     *     UINT wOutput;
     *     WORD wFormatTag;
     *     WORD wReserved2;
     *     WORD nChannels;
     *     WORD wReserved3;
     *     DWORD nSamplesPerSec;
     *     DWORD nAvgBytesPerSec;
     *     WORD nBlockAlign;
     *     WORD wReserved4;
     *     WORD wBitsPerSample;
     *     WORD wReserved5;
     * } *LPMCI_WAVE_SET_PARMS
     * }
     */
    public static final AddressLayout LPMCI_WAVE_SET_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_SEQ_SET_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwTimeFormat;
     *     DWORD dwAudio;
     *     DWORD dwTempo;
     *     DWORD dwPort;
     *     DWORD dwSlave;
     *     DWORD dwMaster;
     *     DWORD dwOffset;
     * } *PMCI_SEQ_SET_PARMS
     * }
     */
    public static final AddressLayout PMCI_SEQ_SET_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_SEQ_SET_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwTimeFormat;
     *     DWORD dwAudio;
     *     DWORD dwTempo;
     *     DWORD dwPort;
     *     DWORD dwSlave;
     *     DWORD dwMaster;
     *     DWORD dwOffset;
     * } *LPMCI_SEQ_SET_PARMS
     * }
     */
    public static final AddressLayout LPMCI_SEQ_SET_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_ANIM_OPEN_PARMSA {
     *     DWORD_PTR dwCallback;
     *     MCIDEVICEID wDeviceID;
     *     LPCSTR lpstrDeviceType;
     *     LPCSTR lpstrElementName;
     *     LPCSTR lpstrAlias;
     *     DWORD dwStyle;
     *     HWND hWndParent;
     * } *PMCI_ANIM_OPEN_PARMSA
     * }
     */
    public static final AddressLayout PMCI_ANIM_OPEN_PARMSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_ANIM_OPEN_PARMSA {
     *     DWORD_PTR dwCallback;
     *     MCIDEVICEID wDeviceID;
     *     LPCSTR lpstrDeviceType;
     *     LPCSTR lpstrElementName;
     *     LPCSTR lpstrAlias;
     *     DWORD dwStyle;
     *     HWND hWndParent;
     * } *LPMCI_ANIM_OPEN_PARMSA
     * }
     */
    public static final AddressLayout LPMCI_ANIM_OPEN_PARMSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_ANIM_OPEN_PARMSW {
     *     DWORD_PTR dwCallback;
     *     MCIDEVICEID wDeviceID;
     *     LPCWSTR lpstrDeviceType;
     *     LPCWSTR lpstrElementName;
     *     LPCWSTR lpstrAlias;
     *     DWORD dwStyle;
     *     HWND hWndParent;
     * } *PMCI_ANIM_OPEN_PARMSW
     * }
     */
    public static final AddressLayout PMCI_ANIM_OPEN_PARMSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_ANIM_OPEN_PARMSW {
     *     DWORD_PTR dwCallback;
     *     MCIDEVICEID wDeviceID;
     *     LPCWSTR lpstrDeviceType;
     *     LPCWSTR lpstrElementName;
     *     LPCWSTR lpstrAlias;
     *     DWORD dwStyle;
     *     HWND hWndParent;
     * } *LPMCI_ANIM_OPEN_PARMSW
     * }
     */
    public static final AddressLayout LPMCI_ANIM_OPEN_PARMSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMCI_ANIM_OPEN_PARMSA PMCI_ANIM_OPEN_PARMS
     * }
     */
    public static final AddressLayout PMCI_ANIM_OPEN_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMCI_ANIM_OPEN_PARMSA LPMCI_ANIM_OPEN_PARMS
     * }
     */
    public static final AddressLayout LPMCI_ANIM_OPEN_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_ANIM_PLAY_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwFrom;
     *     DWORD dwTo;
     *     DWORD dwSpeed;
     * } *PMCI_ANIM_PLAY_PARMS
     * }
     */
    public static final AddressLayout PMCI_ANIM_PLAY_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_ANIM_PLAY_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwFrom;
     *     DWORD dwTo;
     *     DWORD dwSpeed;
     * } *LPMCI_ANIM_PLAY_PARMS
     * }
     */
    public static final AddressLayout LPMCI_ANIM_PLAY_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_ANIM_STEP_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwFrames;
     * } *PMCI_ANIM_STEP_PARMS
     * }
     */
    public static final AddressLayout PMCI_ANIM_STEP_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_ANIM_STEP_PARMS {
     *     DWORD_PTR dwCallback;
     *     DWORD dwFrames;
     * } *LPMCI_ANIM_STEP_PARMS
     * }
     */
    public static final AddressLayout LPMCI_ANIM_STEP_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_ANIM_WINDOW_PARMSA {
     *     DWORD_PTR dwCallback;
     *     HWND hWnd;
     *     UINT nCmdShow;
     *     LPCSTR lpstrText;
     * } *PMCI_ANIM_WINDOW_PARMSA
     * }
     */
    public static final AddressLayout PMCI_ANIM_WINDOW_PARMSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_ANIM_WINDOW_PARMSA {
     *     DWORD_PTR dwCallback;
     *     HWND hWnd;
     *     UINT nCmdShow;
     *     LPCSTR lpstrText;
     * } *LPMCI_ANIM_WINDOW_PARMSA
     * }
     */
    public static final AddressLayout LPMCI_ANIM_WINDOW_PARMSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_ANIM_WINDOW_PARMSW {
     *     DWORD_PTR dwCallback;
     *     HWND hWnd;
     *     UINT nCmdShow;
     *     LPCWSTR lpstrText;
     * } *PMCI_ANIM_WINDOW_PARMSW
     * }
     */
    public static final AddressLayout PMCI_ANIM_WINDOW_PARMSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_ANIM_WINDOW_PARMSW {
     *     DWORD_PTR dwCallback;
     *     HWND hWnd;
     *     UINT nCmdShow;
     *     LPCWSTR lpstrText;
     * } *LPMCI_ANIM_WINDOW_PARMSW
     * }
     */
    public static final AddressLayout LPMCI_ANIM_WINDOW_PARMSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMCI_ANIM_WINDOW_PARMSA PMCI_ANIM_WINDOW_PARMS
     * }
     */
    public static final AddressLayout PMCI_ANIM_WINDOW_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMCI_ANIM_WINDOW_PARMSA LPMCI_ANIM_WINDOW_PARMS
     * }
     */
    public static final AddressLayout LPMCI_ANIM_WINDOW_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef MCI_ANIM_RECT_PARMS *PMCI_ANIM_RECT_PARMS
     * }
     */
    public static final AddressLayout PMCI_ANIM_RECT_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef MCI_ANIM_RECT_PARMS *LPMCI_ANIM_RECT_PARMS
     * }
     */
    public static final AddressLayout LPMCI_ANIM_RECT_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_ANIM_UPDATE_PARMS {
     *     DWORD_PTR dwCallback;
     *     RECT rc;
     *     HDC hDC;
     * } *PMCI_ANIM_UPDATE_PARMS
     * }
     */
    public static final AddressLayout PMCI_ANIM_UPDATE_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_ANIM_UPDATE_PARMS {
     *     DWORD_PTR dwCallback;
     *     RECT rc;
     *     HDC hDC;
     * } *LPMCI_ANIM_UPDATE_PARMS
     * }
     */
    public static final AddressLayout LPMCI_ANIM_UPDATE_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OVLY_OPEN_PARMSA {
     *     DWORD_PTR dwCallback;
     *     MCIDEVICEID wDeviceID;
     *     LPCSTR lpstrDeviceType;
     *     LPCSTR lpstrElementName;
     *     LPCSTR lpstrAlias;
     *     DWORD dwStyle;
     *     HWND hWndParent;
     * } *PMCI_OVLY_OPEN_PARMSA
     * }
     */
    public static final AddressLayout PMCI_OVLY_OPEN_PARMSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OVLY_OPEN_PARMSA {
     *     DWORD_PTR dwCallback;
     *     MCIDEVICEID wDeviceID;
     *     LPCSTR lpstrDeviceType;
     *     LPCSTR lpstrElementName;
     *     LPCSTR lpstrAlias;
     *     DWORD dwStyle;
     *     HWND hWndParent;
     * } *LPMCI_OVLY_OPEN_PARMSA
     * }
     */
    public static final AddressLayout LPMCI_OVLY_OPEN_PARMSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OVLY_OPEN_PARMSW {
     *     DWORD_PTR dwCallback;
     *     MCIDEVICEID wDeviceID;
     *     LPCWSTR lpstrDeviceType;
     *     LPCWSTR lpstrElementName;
     *     LPCWSTR lpstrAlias;
     *     DWORD dwStyle;
     *     HWND hWndParent;
     * } *PMCI_OVLY_OPEN_PARMSW
     * }
     */
    public static final AddressLayout PMCI_OVLY_OPEN_PARMSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OVLY_OPEN_PARMSW {
     *     DWORD_PTR dwCallback;
     *     MCIDEVICEID wDeviceID;
     *     LPCWSTR lpstrDeviceType;
     *     LPCWSTR lpstrElementName;
     *     LPCWSTR lpstrAlias;
     *     DWORD dwStyle;
     *     HWND hWndParent;
     * } *LPMCI_OVLY_OPEN_PARMSW
     * }
     */
    public static final AddressLayout LPMCI_OVLY_OPEN_PARMSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMCI_OVLY_OPEN_PARMSA PMCI_OVLY_OPEN_PARMS
     * }
     */
    public static final AddressLayout PMCI_OVLY_OPEN_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMCI_OVLY_OPEN_PARMSA LPMCI_OVLY_OPEN_PARMS
     * }
     */
    public static final AddressLayout LPMCI_OVLY_OPEN_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OVLY_WINDOW_PARMSA {
     *     DWORD_PTR dwCallback;
     *     HWND hWnd;
     *     UINT nCmdShow;
     *     LPCSTR lpstrText;
     * } *PMCI_OVLY_WINDOW_PARMSA
     * }
     */
    public static final AddressLayout PMCI_OVLY_WINDOW_PARMSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OVLY_WINDOW_PARMSA {
     *     DWORD_PTR dwCallback;
     *     HWND hWnd;
     *     UINT nCmdShow;
     *     LPCSTR lpstrText;
     * } *LPMCI_OVLY_WINDOW_PARMSA
     * }
     */
    public static final AddressLayout LPMCI_OVLY_WINDOW_PARMSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OVLY_WINDOW_PARMSW {
     *     DWORD_PTR dwCallback;
     *     HWND hWnd;
     *     UINT nCmdShow;
     *     LPCWSTR lpstrText;
     * } *PMCI_OVLY_WINDOW_PARMSW
     * }
     */
    public static final AddressLayout PMCI_OVLY_WINDOW_PARMSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OVLY_WINDOW_PARMSW {
     *     DWORD_PTR dwCallback;
     *     HWND hWnd;
     *     UINT nCmdShow;
     *     LPCWSTR lpstrText;
     * } *LPMCI_OVLY_WINDOW_PARMSW
     * }
     */
    public static final AddressLayout LPMCI_OVLY_WINDOW_PARMSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMCI_OVLY_WINDOW_PARMSA PMCI_OVLY_WINDOW_PARMS
     * }
     */
    public static final AddressLayout PMCI_OVLY_WINDOW_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMCI_OVLY_WINDOW_PARMSA LPMCI_OVLY_WINDOW_PARMS
     * }
     */
    public static final AddressLayout LPMCI_OVLY_WINDOW_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OVLY_RECT_PARMS {
     *     DWORD_PTR dwCallback;
     *     RECT rc;
     * } *PMCI_OVLY_RECT_PARMS
     * }
     */
    public static final AddressLayout PMCI_OVLY_RECT_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OVLY_RECT_PARMS {
     *     DWORD_PTR dwCallback;
     *     RECT rc;
     * } *LPMCI_OVLY_RECT_PARMS
     * }
     */
    public static final AddressLayout LPMCI_OVLY_RECT_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OVLY_SAVE_PARMSA {
     *     DWORD_PTR dwCallback;
     *     LPCSTR lpfilename;
     *     RECT rc;
     * } *PMCI_OVLY_SAVE_PARMSA
     * }
     */
    public static final AddressLayout PMCI_OVLY_SAVE_PARMSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OVLY_SAVE_PARMSA {
     *     DWORD_PTR dwCallback;
     *     LPCSTR lpfilename;
     *     RECT rc;
     * } *LPMCI_OVLY_SAVE_PARMSA
     * }
     */
    public static final AddressLayout LPMCI_OVLY_SAVE_PARMSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OVLY_SAVE_PARMSW {
     *     DWORD_PTR dwCallback;
     *     LPCWSTR lpfilename;
     *     RECT rc;
     * } *PMCI_OVLY_SAVE_PARMSW
     * }
     */
    public static final AddressLayout PMCI_OVLY_SAVE_PARMSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OVLY_SAVE_PARMSW {
     *     DWORD_PTR dwCallback;
     *     LPCWSTR lpfilename;
     *     RECT rc;
     * } *LPMCI_OVLY_SAVE_PARMSW
     * }
     */
    public static final AddressLayout LPMCI_OVLY_SAVE_PARMSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMCI_OVLY_SAVE_PARMSA PMCI_OVLY_SAVE_PARMS
     * }
     */
    public static final AddressLayout PMCI_OVLY_SAVE_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMCI_OVLY_SAVE_PARMSA LPMCI_OVLY_SAVE_PARMS
     * }
     */
    public static final AddressLayout LPMCI_OVLY_SAVE_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OVLY_LOAD_PARMSA {
     *     DWORD_PTR dwCallback;
     *     LPCSTR lpfilename;
     *     RECT rc;
     * } *PMCI_OVLY_LOAD_PARMSA
     * }
     */
    public static final AddressLayout PMCI_OVLY_LOAD_PARMSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OVLY_LOAD_PARMSA {
     *     DWORD_PTR dwCallback;
     *     LPCSTR lpfilename;
     *     RECT rc;
     * } *LPMCI_OVLY_LOAD_PARMSA
     * }
     */
    public static final AddressLayout LPMCI_OVLY_LOAD_PARMSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OVLY_LOAD_PARMSW {
     *     DWORD_PTR dwCallback;
     *     LPCWSTR lpfilename;
     *     RECT rc;
     * } *PMCI_OVLY_LOAD_PARMSW
     * }
     */
    public static final AddressLayout PMCI_OVLY_LOAD_PARMSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMCI_OVLY_LOAD_PARMSW {
     *     DWORD_PTR dwCallback;
     *     LPCWSTR lpfilename;
     *     RECT rc;
     * } *LPMCI_OVLY_LOAD_PARMSW
     * }
     */
    public static final AddressLayout LPMCI_OVLY_LOAD_PARMSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMCI_OVLY_LOAD_PARMSA PMCI_OVLY_LOAD_PARMS
     * }
     */
    public static final AddressLayout PMCI_OVLY_LOAD_PARMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMCI_OVLY_LOAD_PARMSA LPMCI_OVLY_LOAD_PARMS
     * }
     */
    public static final AddressLayout LPMCI_OVLY_LOAD_PARMS = wgl_h.C_POINTER;

    private static class mciGetDriverData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mciGetDriverData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD_PTR mciGetDriverData(MCIDEVICEID wDeviceID)
     * }
     */
    public static FunctionDescriptor mciGetDriverData$descriptor() {
        return mciGetDriverData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD_PTR mciGetDriverData(MCIDEVICEID wDeviceID)
     * }
     */
    public static MethodHandle mciGetDriverData$handle() {
        return mciGetDriverData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD_PTR mciGetDriverData(MCIDEVICEID wDeviceID)
     * }
     */
    public static MemorySegment mciGetDriverData$address() {
        return mciGetDriverData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD_PTR mciGetDriverData(MCIDEVICEID wDeviceID)
     * }
     */
    public static long mciGetDriverData(int wDeviceID) {
        var mh$ = mciGetDriverData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mciGetDriverData", wDeviceID);
            }
            return (long)mh$.invokeExact(wDeviceID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mciLoadCommandResource {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mciLoadCommandResource");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT mciLoadCommandResource(HANDLE hInstance, LPCWSTR lpResName, UINT wType)
     * }
     */
    public static FunctionDescriptor mciLoadCommandResource$descriptor() {
        return mciLoadCommandResource.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT mciLoadCommandResource(HANDLE hInstance, LPCWSTR lpResName, UINT wType)
     * }
     */
    public static MethodHandle mciLoadCommandResource$handle() {
        return mciLoadCommandResource.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * UINT mciLoadCommandResource(HANDLE hInstance, LPCWSTR lpResName, UINT wType)
     * }
     */
    public static MemorySegment mciLoadCommandResource$address() {
        return mciLoadCommandResource.ADDR;
    }

    /**
     * {@snippet lang=c :
     * UINT mciLoadCommandResource(HANDLE hInstance, LPCWSTR lpResName, UINT wType)
     * }
     */
    public static int mciLoadCommandResource(MemorySegment hInstance, MemorySegment lpResName, int wType) {
        var mh$ = mciLoadCommandResource.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mciLoadCommandResource", hInstance, lpResName, wType);
            }
            return (int)mh$.invokeExact(hInstance, lpResName, wType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mciSetDriverData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mciSetDriverData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL mciSetDriverData(MCIDEVICEID wDeviceID, DWORD_PTR dwData)
     * }
     */
    public static FunctionDescriptor mciSetDriverData$descriptor() {
        return mciSetDriverData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL mciSetDriverData(MCIDEVICEID wDeviceID, DWORD_PTR dwData)
     * }
     */
    public static MethodHandle mciSetDriverData$handle() {
        return mciSetDriverData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL mciSetDriverData(MCIDEVICEID wDeviceID, DWORD_PTR dwData)
     * }
     */
    public static MemorySegment mciSetDriverData$address() {
        return mciSetDriverData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL mciSetDriverData(MCIDEVICEID wDeviceID, DWORD_PTR dwData)
     * }
     */
    public static int mciSetDriverData(int wDeviceID, long dwData) {
        var mh$ = mciSetDriverData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mciSetDriverData", wDeviceID, dwData);
            }
            return (int)mh$.invokeExact(wDeviceID, dwData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mciDriverYield {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mciDriverYield");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT mciDriverYield(MCIDEVICEID wDeviceID)
     * }
     */
    public static FunctionDescriptor mciDriverYield$descriptor() {
        return mciDriverYield.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT mciDriverYield(MCIDEVICEID wDeviceID)
     * }
     */
    public static MethodHandle mciDriverYield$handle() {
        return mciDriverYield.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * UINT mciDriverYield(MCIDEVICEID wDeviceID)
     * }
     */
    public static MemorySegment mciDriverYield$address() {
        return mciDriverYield.ADDR;
    }

    /**
     * {@snippet lang=c :
     * UINT mciDriverYield(MCIDEVICEID wDeviceID)
     * }
     */
    public static int mciDriverYield(int wDeviceID) {
        var mh$ = mciDriverYield.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mciDriverYield", wDeviceID);
            }
            return (int)mh$.invokeExact(wDeviceID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mciDriverNotify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mciDriverNotify");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL mciDriverNotify(HANDLE hwndCallback, MCIDEVICEID wDeviceID, UINT uStatus)
     * }
     */
    public static FunctionDescriptor mciDriverNotify$descriptor() {
        return mciDriverNotify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL mciDriverNotify(HANDLE hwndCallback, MCIDEVICEID wDeviceID, UINT uStatus)
     * }
     */
    public static MethodHandle mciDriverNotify$handle() {
        return mciDriverNotify.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL mciDriverNotify(HANDLE hwndCallback, MCIDEVICEID wDeviceID, UINT uStatus)
     * }
     */
    public static MemorySegment mciDriverNotify$address() {
        return mciDriverNotify.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL mciDriverNotify(HANDLE hwndCallback, MCIDEVICEID wDeviceID, UINT uStatus)
     * }
     */
    public static int mciDriverNotify(MemorySegment hwndCallback, int wDeviceID, int uStatus) {
        var mh$ = mciDriverNotify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mciDriverNotify", hwndCallback, wDeviceID, uStatus);
            }
            return (int)mh$.invokeExact(hwndCallback, wDeviceID, uStatus);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mciFreeCommandResource {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mciFreeCommandResource");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL mciFreeCommandResource(UINT wTable)
     * }
     */
    public static FunctionDescriptor mciFreeCommandResource$descriptor() {
        return mciFreeCommandResource.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL mciFreeCommandResource(UINT wTable)
     * }
     */
    public static MethodHandle mciFreeCommandResource$handle() {
        return mciFreeCommandResource.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL mciFreeCommandResource(UINT wTable)
     * }
     */
    public static MemorySegment mciFreeCommandResource$address() {
        return mciFreeCommandResource.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL mciFreeCommandResource(UINT wTable)
     * }
     */
    public static int mciFreeCommandResource(int wTable) {
        var mh$ = mciFreeCommandResource.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mciFreeCommandResource", wTable);
            }
            return (int)mh$.invokeExact(wTable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct DRVCONFIGINFOEX {
     *     DWORD dwDCISize;
     *     LPCWSTR lpszDCISectionName;
     *     LPCWSTR lpszDCIAliasName;
     *     DWORD dnDevNode;
     * } *PDRVCONFIGINFOEX
     * }
     */
    public static final AddressLayout PDRVCONFIGINFOEX = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct DRVCONFIGINFOEX {
     *     DWORD dwDCISize;
     *     LPCWSTR lpszDCISectionName;
     *     LPCWSTR lpszDCIAliasName;
     *     DWORD dnDevNode;
     * } *NPDRVCONFIGINFOEX
     * }
     */
    public static final AddressLayout NPDRVCONFIGINFOEX = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct DRVCONFIGINFOEX {
     *     DWORD dwDCISize;
     *     LPCWSTR lpszDCISectionName;
     *     LPCWSTR lpszDCIAliasName;
     *     DWORD dnDevNode;
     * } *LPDRVCONFIGINFOEX
     * }
     */
    public static final AddressLayout LPDRVCONFIGINFOEX = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagDRVCONFIGINFO {
     *     DWORD dwDCISize;
     *     LPCWSTR lpszDCISectionName;
     *     LPCWSTR lpszDCIAliasName;
     * } *PDRVCONFIGINFO
     * }
     */
    public static final AddressLayout PDRVCONFIGINFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagDRVCONFIGINFO {
     *     DWORD dwDCISize;
     *     LPCWSTR lpszDCISectionName;
     *     LPCWSTR lpszDCIAliasName;
     * } *NPDRVCONFIGINFO
     * }
     */
    public static final AddressLayout NPDRVCONFIGINFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagDRVCONFIGINFO {
     *     DWORD dwDCISize;
     *     LPCWSTR lpszDCISectionName;
     *     LPCWSTR lpszDCIAliasName;
     * } *LPDRVCONFIGINFO
     * }
     */
    public static final AddressLayout LPDRVCONFIGINFO = wgl_h.C_POINTER;

    private static class CloseDriver {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CloseDriver");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LRESULT CloseDriver(HDRVR hDriver, LPARAM lParam1, LPARAM lParam2)
     * }
     */
    public static FunctionDescriptor CloseDriver$descriptor() {
        return CloseDriver.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LRESULT CloseDriver(HDRVR hDriver, LPARAM lParam1, LPARAM lParam2)
     * }
     */
    public static MethodHandle CloseDriver$handle() {
        return CloseDriver.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * LRESULT CloseDriver(HDRVR hDriver, LPARAM lParam1, LPARAM lParam2)
     * }
     */
    public static MemorySegment CloseDriver$address() {
        return CloseDriver.ADDR;
    }

    /**
     * {@snippet lang=c :
     * LRESULT CloseDriver(HDRVR hDriver, LPARAM lParam1, LPARAM lParam2)
     * }
     */
    public static long CloseDriver(MemorySegment hDriver, long lParam1, long lParam2) {
        var mh$ = CloseDriver.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CloseDriver", hDriver, lParam1, lParam2);
            }
            return (long)mh$.invokeExact(hDriver, lParam1, lParam2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OpenDriver {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("OpenDriver");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HDRVR OpenDriver(LPCWSTR szDriverName, LPCWSTR szSectionName, LPARAM lParam2)
     * }
     */
    public static FunctionDescriptor OpenDriver$descriptor() {
        return OpenDriver.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HDRVR OpenDriver(LPCWSTR szDriverName, LPCWSTR szSectionName, LPARAM lParam2)
     * }
     */
    public static MethodHandle OpenDriver$handle() {
        return OpenDriver.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HDRVR OpenDriver(LPCWSTR szDriverName, LPCWSTR szSectionName, LPARAM lParam2)
     * }
     */
    public static MemorySegment OpenDriver$address() {
        return OpenDriver.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HDRVR OpenDriver(LPCWSTR szDriverName, LPCWSTR szSectionName, LPARAM lParam2)
     * }
     */
    public static MemorySegment OpenDriver(MemorySegment szDriverName, MemorySegment szSectionName, long lParam2) {
        var mh$ = OpenDriver.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OpenDriver", szDriverName, szSectionName, lParam2);
            }
            return (MemorySegment)mh$.invokeExact(szDriverName, szSectionName, lParam2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SendDriverMessage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SendDriverMessage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LRESULT SendDriverMessage(HDRVR hDriver, UINT message, LPARAM lParam1, LPARAM lParam2)
     * }
     */
    public static FunctionDescriptor SendDriverMessage$descriptor() {
        return SendDriverMessage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LRESULT SendDriverMessage(HDRVR hDriver, UINT message, LPARAM lParam1, LPARAM lParam2)
     * }
     */
    public static MethodHandle SendDriverMessage$handle() {
        return SendDriverMessage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * LRESULT SendDriverMessage(HDRVR hDriver, UINT message, LPARAM lParam1, LPARAM lParam2)
     * }
     */
    public static MemorySegment SendDriverMessage$address() {
        return SendDriverMessage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * LRESULT SendDriverMessage(HDRVR hDriver, UINT message, LPARAM lParam1, LPARAM lParam2)
     * }
     */
    public static long SendDriverMessage(MemorySegment hDriver, int message, long lParam1, long lParam2) {
        var mh$ = SendDriverMessage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SendDriverMessage", hDriver, message, lParam1, lParam2);
            }
            return (long)mh$.invokeExact(hDriver, message, lParam1, lParam2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DrvGetModuleHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DrvGetModuleHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HMODULE DrvGetModuleHandle(HDRVR hDriver)
     * }
     */
    public static FunctionDescriptor DrvGetModuleHandle$descriptor() {
        return DrvGetModuleHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HMODULE DrvGetModuleHandle(HDRVR hDriver)
     * }
     */
    public static MethodHandle DrvGetModuleHandle$handle() {
        return DrvGetModuleHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HMODULE DrvGetModuleHandle(HDRVR hDriver)
     * }
     */
    public static MemorySegment DrvGetModuleHandle$address() {
        return DrvGetModuleHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HMODULE DrvGetModuleHandle(HDRVR hDriver)
     * }
     */
    public static MemorySegment DrvGetModuleHandle(MemorySegment hDriver) {
        var mh$ = DrvGetModuleHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DrvGetModuleHandle", hDriver);
            }
            return (MemorySegment)mh$.invokeExact(hDriver);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetDriverModuleHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetDriverModuleHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HMODULE GetDriverModuleHandle(HDRVR hDriver)
     * }
     */
    public static FunctionDescriptor GetDriverModuleHandle$descriptor() {
        return GetDriverModuleHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HMODULE GetDriverModuleHandle(HDRVR hDriver)
     * }
     */
    public static MethodHandle GetDriverModuleHandle$handle() {
        return GetDriverModuleHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HMODULE GetDriverModuleHandle(HDRVR hDriver)
     * }
     */
    public static MemorySegment GetDriverModuleHandle$address() {
        return GetDriverModuleHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HMODULE GetDriverModuleHandle(HDRVR hDriver)
     * }
     */
    public static MemorySegment GetDriverModuleHandle(MemorySegment hDriver) {
        var mh$ = GetDriverModuleHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetDriverModuleHandle", hDriver);
            }
            return (MemorySegment)mh$.invokeExact(hDriver);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DefDriverProc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DefDriverProc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LRESULT DefDriverProc(DWORD_PTR dwDriverIdentifier, HDRVR hdrvr, UINT uMsg, LPARAM lParam1, LPARAM lParam2)
     * }
     */
    public static FunctionDescriptor DefDriverProc$descriptor() {
        return DefDriverProc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LRESULT DefDriverProc(DWORD_PTR dwDriverIdentifier, HDRVR hdrvr, UINT uMsg, LPARAM lParam1, LPARAM lParam2)
     * }
     */
    public static MethodHandle DefDriverProc$handle() {
        return DefDriverProc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * LRESULT DefDriverProc(DWORD_PTR dwDriverIdentifier, HDRVR hdrvr, UINT uMsg, LPARAM lParam1, LPARAM lParam2)
     * }
     */
    public static MemorySegment DefDriverProc$address() {
        return DefDriverProc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * LRESULT DefDriverProc(DWORD_PTR dwDriverIdentifier, HDRVR hdrvr, UINT uMsg, LPARAM lParam1, LPARAM lParam2)
     * }
     */
    public static long DefDriverProc(long dwDriverIdentifier, MemorySegment hdrvr, int uMsg, long lParam1, long lParam2) {
        var mh$ = DefDriverProc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DefDriverProc", dwDriverIdentifier, hdrvr, uMsg, lParam1, lParam2);
            }
            return (long)mh$.invokeExact(dwDriverIdentifier, hdrvr, uMsg, lParam1, lParam2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DriverCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DriverCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DriverCallback(DWORD_PTR dwCallback, DWORD dwFlags, HDRVR hDevice, DWORD dwMsg, DWORD_PTR dwUser, DWORD_PTR dwParam1, DWORD_PTR dwParam2)
     * }
     */
    public static FunctionDescriptor DriverCallback$descriptor() {
        return DriverCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DriverCallback(DWORD_PTR dwCallback, DWORD dwFlags, HDRVR hDevice, DWORD dwMsg, DWORD_PTR dwUser, DWORD_PTR dwParam1, DWORD_PTR dwParam2)
     * }
     */
    public static MethodHandle DriverCallback$handle() {
        return DriverCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DriverCallback(DWORD_PTR dwCallback, DWORD dwFlags, HDRVR hDevice, DWORD dwMsg, DWORD_PTR dwUser, DWORD_PTR dwParam1, DWORD_PTR dwParam2)
     * }
     */
    public static MemorySegment DriverCallback$address() {
        return DriverCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DriverCallback(DWORD_PTR dwCallback, DWORD dwFlags, HDRVR hDevice, DWORD dwMsg, DWORD_PTR dwUser, DWORD_PTR dwParam1, DWORD_PTR dwParam2)
     * }
     */
    public static int DriverCallback(long dwCallback, int dwFlags, MemorySegment hDevice, int dwMsg, long dwUser, long dwParam1, long dwParam2) {
        var mh$ = DriverCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DriverCallback", dwCallback, dwFlags, hDevice, dwMsg, dwUser, dwParam1, dwParam2);
            }
            return (int)mh$.invokeExact(dwCallback, dwFlags, hDevice, dwMsg, dwUser, dwParam1, dwParam2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sndOpenSound {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("sndOpenSound");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LONG sndOpenSound(LPCWSTR EventName, LPCWSTR AppName, INT32 Flags, PHANDLE FileHandle)
     * }
     */
    public static FunctionDescriptor sndOpenSound$descriptor() {
        return sndOpenSound.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LONG sndOpenSound(LPCWSTR EventName, LPCWSTR AppName, INT32 Flags, PHANDLE FileHandle)
     * }
     */
    public static MethodHandle sndOpenSound$handle() {
        return sndOpenSound.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * LONG sndOpenSound(LPCWSTR EventName, LPCWSTR AppName, INT32 Flags, PHANDLE FileHandle)
     * }
     */
    public static MemorySegment sndOpenSound$address() {
        return sndOpenSound.ADDR;
    }

    /**
     * {@snippet lang=c :
     * LONG sndOpenSound(LPCWSTR EventName, LPCWSTR AppName, INT32 Flags, PHANDLE FileHandle)
     * }
     */
    public static int sndOpenSound(MemorySegment EventName, MemorySegment AppName, int Flags, MemorySegment FileHandle) {
        var mh$ = sndOpenSound.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sndOpenSound", EventName, AppName, Flags, FileHandle);
            }
            return (int)mh$.invokeExact(EventName, AppName, Flags, FileHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmDrvInstall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mmDrvInstall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT mmDrvInstall(HDRVR hDriver, LPCWSTR wszDrvEntry, DRIVERMSGPROC drvMessage, UINT wFlags)
     * }
     */
    public static FunctionDescriptor mmDrvInstall$descriptor() {
        return mmDrvInstall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT mmDrvInstall(HDRVR hDriver, LPCWSTR wszDrvEntry, DRIVERMSGPROC drvMessage, UINT wFlags)
     * }
     */
    public static MethodHandle mmDrvInstall$handle() {
        return mmDrvInstall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * UINT mmDrvInstall(HDRVR hDriver, LPCWSTR wszDrvEntry, DRIVERMSGPROC drvMessage, UINT wFlags)
     * }
     */
    public static MemorySegment mmDrvInstall$address() {
        return mmDrvInstall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * UINT mmDrvInstall(HDRVR hDriver, LPCWSTR wszDrvEntry, DRIVERMSGPROC drvMessage, UINT wFlags)
     * }
     */
    public static int mmDrvInstall(MemorySegment hDriver, MemorySegment wszDrvEntry, MemorySegment drvMessage, int wFlags) {
        var mh$ = mmDrvInstall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmDrvInstall", hDriver, wszDrvEntry, drvMessage, wFlags);
            }
            return (int)mh$.invokeExact(hDriver, wszDrvEntry, drvMessage, wFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef DWORD FOURCC
     * }
     */
    public static final OfInt FOURCC = wgl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef char *HPSTR
     * }
     */
    public static final AddressLayout HPSTR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HMMIO__ {
     *     int unused;
     * } *HMMIO
     * }
     */
    public static final AddressLayout HMMIO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MMIOINFO {
     *     DWORD dwFlags;
     *     FOURCC fccIOProc;
     *     LPMMIOPROC pIOProc;
     *     UINT wErrorRet;
     *     HTASK htask;
     *     LONG cchBuffer;
     *     HPSTR pchBuffer;
     *     HPSTR pchNext;
     *     HPSTR pchEndRead;
     *     HPSTR pchEndWrite;
     *     LONG lBufOffset;
     *     LONG lDiskOffset;
     *     DWORD adwInfo[3];
     *     DWORD dwReserved1;
     *     DWORD dwReserved2;
     *     HMMIO hmmio;
     * } *PMMIOINFO
     * }
     */
    public static final AddressLayout PMMIOINFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MMIOINFO {
     *     DWORD dwFlags;
     *     FOURCC fccIOProc;
     *     LPMMIOPROC pIOProc;
     *     UINT wErrorRet;
     *     HTASK htask;
     *     LONG cchBuffer;
     *     HPSTR pchBuffer;
     *     HPSTR pchNext;
     *     HPSTR pchEndRead;
     *     HPSTR pchEndWrite;
     *     LONG lBufOffset;
     *     LONG lDiskOffset;
     *     DWORD adwInfo[3];
     *     DWORD dwReserved1;
     *     DWORD dwReserved2;
     *     HMMIO hmmio;
     * } *NPMMIOINFO
     * }
     */
    public static final AddressLayout NPMMIOINFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MMIOINFO {
     *     DWORD dwFlags;
     *     FOURCC fccIOProc;
     *     LPMMIOPROC pIOProc;
     *     UINT wErrorRet;
     *     HTASK htask;
     *     LONG cchBuffer;
     *     HPSTR pchBuffer;
     *     HPSTR pchNext;
     *     HPSTR pchEndRead;
     *     HPSTR pchEndWrite;
     *     LONG lBufOffset;
     *     LONG lDiskOffset;
     *     DWORD adwInfo[3];
     *     DWORD dwReserved1;
     *     DWORD dwReserved2;
     *     HMMIO hmmio;
     * } *LPMMIOINFO
     * }
     */
    public static final AddressLayout LPMMIOINFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const MMIOINFO *LPCMMIOINFO
     * }
     */
    public static final AddressLayout LPCMMIOINFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MMCKINFO {
     *     FOURCC ckid;
     *     DWORD cksize;
     *     FOURCC fccType;
     *     DWORD dwDataOffset;
     *     DWORD dwFlags;
     * } *PMMCKINFO
     * }
     */
    public static final AddressLayout PMMCKINFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MMCKINFO {
     *     FOURCC ckid;
     *     DWORD cksize;
     *     FOURCC fccType;
     *     DWORD dwDataOffset;
     *     DWORD dwFlags;
     * } *NPMMCKINFO
     * }
     */
    public static final AddressLayout NPMMCKINFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MMCKINFO {
     *     FOURCC ckid;
     *     DWORD cksize;
     *     FOURCC fccType;
     *     DWORD dwDataOffset;
     *     DWORD dwFlags;
     * } *LPMMCKINFO
     * }
     */
    public static final AddressLayout LPMMCKINFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const MMCKINFO *LPCMMCKINFO
     * }
     */
    public static final AddressLayout LPCMMCKINFO = wgl_h.C_POINTER;

    private static class mmioStringToFOURCCA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mmioStringToFOURCCA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FOURCC mmioStringToFOURCCA(LPCSTR sz, UINT uFlags)
     * }
     */
    public static FunctionDescriptor mmioStringToFOURCCA$descriptor() {
        return mmioStringToFOURCCA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FOURCC mmioStringToFOURCCA(LPCSTR sz, UINT uFlags)
     * }
     */
    public static MethodHandle mmioStringToFOURCCA$handle() {
        return mmioStringToFOURCCA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FOURCC mmioStringToFOURCCA(LPCSTR sz, UINT uFlags)
     * }
     */
    public static MemorySegment mmioStringToFOURCCA$address() {
        return mmioStringToFOURCCA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FOURCC mmioStringToFOURCCA(LPCSTR sz, UINT uFlags)
     * }
     */
    public static int mmioStringToFOURCCA(MemorySegment sz, int uFlags) {
        var mh$ = mmioStringToFOURCCA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioStringToFOURCCA", sz, uFlags);
            }
            return (int)mh$.invokeExact(sz, uFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioStringToFOURCCW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mmioStringToFOURCCW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FOURCC mmioStringToFOURCCW(LPCWSTR sz, UINT uFlags)
     * }
     */
    public static FunctionDescriptor mmioStringToFOURCCW$descriptor() {
        return mmioStringToFOURCCW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FOURCC mmioStringToFOURCCW(LPCWSTR sz, UINT uFlags)
     * }
     */
    public static MethodHandle mmioStringToFOURCCW$handle() {
        return mmioStringToFOURCCW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FOURCC mmioStringToFOURCCW(LPCWSTR sz, UINT uFlags)
     * }
     */
    public static MemorySegment mmioStringToFOURCCW$address() {
        return mmioStringToFOURCCW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FOURCC mmioStringToFOURCCW(LPCWSTR sz, UINT uFlags)
     * }
     */
    public static int mmioStringToFOURCCW(MemorySegment sz, int uFlags) {
        var mh$ = mmioStringToFOURCCW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioStringToFOURCCW", sz, uFlags);
            }
            return (int)mh$.invokeExact(sz, uFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioInstallIOProcA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mmioInstallIOProcA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LPMMIOPROC mmioInstallIOProcA(FOURCC fccIOProc, LPMMIOPROC pIOProc, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor mmioInstallIOProcA$descriptor() {
        return mmioInstallIOProcA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LPMMIOPROC mmioInstallIOProcA(FOURCC fccIOProc, LPMMIOPROC pIOProc, DWORD dwFlags)
     * }
     */
    public static MethodHandle mmioInstallIOProcA$handle() {
        return mmioInstallIOProcA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * LPMMIOPROC mmioInstallIOProcA(FOURCC fccIOProc, LPMMIOPROC pIOProc, DWORD dwFlags)
     * }
     */
    public static MemorySegment mmioInstallIOProcA$address() {
        return mmioInstallIOProcA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * LPMMIOPROC mmioInstallIOProcA(FOURCC fccIOProc, LPMMIOPROC pIOProc, DWORD dwFlags)
     * }
     */
    public static MemorySegment mmioInstallIOProcA(int fccIOProc, MemorySegment pIOProc, int dwFlags) {
        var mh$ = mmioInstallIOProcA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioInstallIOProcA", fccIOProc, pIOProc, dwFlags);
            }
            return (MemorySegment)mh$.invokeExact(fccIOProc, pIOProc, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioInstallIOProcW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mmioInstallIOProcW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LPMMIOPROC mmioInstallIOProcW(FOURCC fccIOProc, LPMMIOPROC pIOProc, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor mmioInstallIOProcW$descriptor() {
        return mmioInstallIOProcW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LPMMIOPROC mmioInstallIOProcW(FOURCC fccIOProc, LPMMIOPROC pIOProc, DWORD dwFlags)
     * }
     */
    public static MethodHandle mmioInstallIOProcW$handle() {
        return mmioInstallIOProcW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * LPMMIOPROC mmioInstallIOProcW(FOURCC fccIOProc, LPMMIOPROC pIOProc, DWORD dwFlags)
     * }
     */
    public static MemorySegment mmioInstallIOProcW$address() {
        return mmioInstallIOProcW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * LPMMIOPROC mmioInstallIOProcW(FOURCC fccIOProc, LPMMIOPROC pIOProc, DWORD dwFlags)
     * }
     */
    public static MemorySegment mmioInstallIOProcW(int fccIOProc, MemorySegment pIOProc, int dwFlags) {
        var mh$ = mmioInstallIOProcW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioInstallIOProcW", fccIOProc, pIOProc, dwFlags);
            }
            return (MemorySegment)mh$.invokeExact(fccIOProc, pIOProc, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioOpenA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mmioOpenA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HMMIO mmioOpenA(LPSTR pszFileName, LPMMIOINFO pmmioinfo, DWORD fdwOpen)
     * }
     */
    public static FunctionDescriptor mmioOpenA$descriptor() {
        return mmioOpenA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HMMIO mmioOpenA(LPSTR pszFileName, LPMMIOINFO pmmioinfo, DWORD fdwOpen)
     * }
     */
    public static MethodHandle mmioOpenA$handle() {
        return mmioOpenA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HMMIO mmioOpenA(LPSTR pszFileName, LPMMIOINFO pmmioinfo, DWORD fdwOpen)
     * }
     */
    public static MemorySegment mmioOpenA$address() {
        return mmioOpenA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HMMIO mmioOpenA(LPSTR pszFileName, LPMMIOINFO pmmioinfo, DWORD fdwOpen)
     * }
     */
    public static MemorySegment mmioOpenA(MemorySegment pszFileName, MemorySegment pmmioinfo, int fdwOpen) {
        var mh$ = mmioOpenA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioOpenA", pszFileName, pmmioinfo, fdwOpen);
            }
            return (MemorySegment)mh$.invokeExact(pszFileName, pmmioinfo, fdwOpen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioOpenW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mmioOpenW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HMMIO mmioOpenW(LPWSTR pszFileName, LPMMIOINFO pmmioinfo, DWORD fdwOpen)
     * }
     */
    public static FunctionDescriptor mmioOpenW$descriptor() {
        return mmioOpenW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HMMIO mmioOpenW(LPWSTR pszFileName, LPMMIOINFO pmmioinfo, DWORD fdwOpen)
     * }
     */
    public static MethodHandle mmioOpenW$handle() {
        return mmioOpenW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HMMIO mmioOpenW(LPWSTR pszFileName, LPMMIOINFO pmmioinfo, DWORD fdwOpen)
     * }
     */
    public static MemorySegment mmioOpenW$address() {
        return mmioOpenW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HMMIO mmioOpenW(LPWSTR pszFileName, LPMMIOINFO pmmioinfo, DWORD fdwOpen)
     * }
     */
    public static MemorySegment mmioOpenW(MemorySegment pszFileName, MemorySegment pmmioinfo, int fdwOpen) {
        var mh$ = mmioOpenW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioOpenW", pszFileName, pmmioinfo, fdwOpen);
            }
            return (MemorySegment)mh$.invokeExact(pszFileName, pmmioinfo, fdwOpen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioRenameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mmioRenameA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mmioRenameA(LPCSTR pszFileName, LPCSTR pszNewFileName, LPCMMIOINFO pmmioinfo, DWORD fdwRename)
     * }
     */
    public static FunctionDescriptor mmioRenameA$descriptor() {
        return mmioRenameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mmioRenameA(LPCSTR pszFileName, LPCSTR pszNewFileName, LPCMMIOINFO pmmioinfo, DWORD fdwRename)
     * }
     */
    public static MethodHandle mmioRenameA$handle() {
        return mmioRenameA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT mmioRenameA(LPCSTR pszFileName, LPCSTR pszNewFileName, LPCMMIOINFO pmmioinfo, DWORD fdwRename)
     * }
     */
    public static MemorySegment mmioRenameA$address() {
        return mmioRenameA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT mmioRenameA(LPCSTR pszFileName, LPCSTR pszNewFileName, LPCMMIOINFO pmmioinfo, DWORD fdwRename)
     * }
     */
    public static int mmioRenameA(MemorySegment pszFileName, MemorySegment pszNewFileName, MemorySegment pmmioinfo, int fdwRename) {
        var mh$ = mmioRenameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioRenameA", pszFileName, pszNewFileName, pmmioinfo, fdwRename);
            }
            return (int)mh$.invokeExact(pszFileName, pszNewFileName, pmmioinfo, fdwRename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioRenameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mmioRenameW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mmioRenameW(LPCWSTR pszFileName, LPCWSTR pszNewFileName, LPCMMIOINFO pmmioinfo, DWORD fdwRename)
     * }
     */
    public static FunctionDescriptor mmioRenameW$descriptor() {
        return mmioRenameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mmioRenameW(LPCWSTR pszFileName, LPCWSTR pszNewFileName, LPCMMIOINFO pmmioinfo, DWORD fdwRename)
     * }
     */
    public static MethodHandle mmioRenameW$handle() {
        return mmioRenameW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT mmioRenameW(LPCWSTR pszFileName, LPCWSTR pszNewFileName, LPCMMIOINFO pmmioinfo, DWORD fdwRename)
     * }
     */
    public static MemorySegment mmioRenameW$address() {
        return mmioRenameW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT mmioRenameW(LPCWSTR pszFileName, LPCWSTR pszNewFileName, LPCMMIOINFO pmmioinfo, DWORD fdwRename)
     * }
     */
    public static int mmioRenameW(MemorySegment pszFileName, MemorySegment pszNewFileName, MemorySegment pmmioinfo, int fdwRename) {
        var mh$ = mmioRenameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioRenameW", pszFileName, pszNewFileName, pmmioinfo, fdwRename);
            }
            return (int)mh$.invokeExact(pszFileName, pszNewFileName, pmmioinfo, fdwRename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioClose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mmioClose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mmioClose(HMMIO hmmio, UINT fuClose)
     * }
     */
    public static FunctionDescriptor mmioClose$descriptor() {
        return mmioClose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mmioClose(HMMIO hmmio, UINT fuClose)
     * }
     */
    public static MethodHandle mmioClose$handle() {
        return mmioClose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT mmioClose(HMMIO hmmio, UINT fuClose)
     * }
     */
    public static MemorySegment mmioClose$address() {
        return mmioClose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT mmioClose(HMMIO hmmio, UINT fuClose)
     * }
     */
    public static int mmioClose(MemorySegment hmmio, int fuClose) {
        var mh$ = mmioClose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioClose", hmmio, fuClose);
            }
            return (int)mh$.invokeExact(hmmio, fuClose);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioRead {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mmioRead");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LONG mmioRead(HMMIO hmmio, HPSTR pch, LONG cch)
     * }
     */
    public static FunctionDescriptor mmioRead$descriptor() {
        return mmioRead.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LONG mmioRead(HMMIO hmmio, HPSTR pch, LONG cch)
     * }
     */
    public static MethodHandle mmioRead$handle() {
        return mmioRead.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * LONG mmioRead(HMMIO hmmio, HPSTR pch, LONG cch)
     * }
     */
    public static MemorySegment mmioRead$address() {
        return mmioRead.ADDR;
    }

    /**
     * {@snippet lang=c :
     * LONG mmioRead(HMMIO hmmio, HPSTR pch, LONG cch)
     * }
     */
    public static int mmioRead(MemorySegment hmmio, MemorySegment pch, int cch) {
        var mh$ = mmioRead.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioRead", hmmio, pch, cch);
            }
            return (int)mh$.invokeExact(hmmio, pch, cch);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioWrite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mmioWrite");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LONG mmioWrite(HMMIO hmmio, const char *pch, LONG cch)
     * }
     */
    public static FunctionDescriptor mmioWrite$descriptor() {
        return mmioWrite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LONG mmioWrite(HMMIO hmmio, const char *pch, LONG cch)
     * }
     */
    public static MethodHandle mmioWrite$handle() {
        return mmioWrite.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * LONG mmioWrite(HMMIO hmmio, const char *pch, LONG cch)
     * }
     */
    public static MemorySegment mmioWrite$address() {
        return mmioWrite.ADDR;
    }

    /**
     * {@snippet lang=c :
     * LONG mmioWrite(HMMIO hmmio, const char *pch, LONG cch)
     * }
     */
    public static int mmioWrite(MemorySegment hmmio, MemorySegment pch, int cch) {
        var mh$ = mmioWrite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioWrite", hmmio, pch, cch);
            }
            return (int)mh$.invokeExact(hmmio, pch, cch);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioSeek {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mmioSeek");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LONG mmioSeek(HMMIO hmmio, LONG lOffset, int iOrigin)
     * }
     */
    public static FunctionDescriptor mmioSeek$descriptor() {
        return mmioSeek.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LONG mmioSeek(HMMIO hmmio, LONG lOffset, int iOrigin)
     * }
     */
    public static MethodHandle mmioSeek$handle() {
        return mmioSeek.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * LONG mmioSeek(HMMIO hmmio, LONG lOffset, int iOrigin)
     * }
     */
    public static MemorySegment mmioSeek$address() {
        return mmioSeek.ADDR;
    }

    /**
     * {@snippet lang=c :
     * LONG mmioSeek(HMMIO hmmio, LONG lOffset, int iOrigin)
     * }
     */
    public static int mmioSeek(MemorySegment hmmio, int lOffset, int iOrigin) {
        var mh$ = mmioSeek.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioSeek", hmmio, lOffset, iOrigin);
            }
            return (int)mh$.invokeExact(hmmio, lOffset, iOrigin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioGetInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mmioGetInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mmioGetInfo(HMMIO hmmio, LPMMIOINFO pmmioinfo, UINT fuInfo)
     * }
     */
    public static FunctionDescriptor mmioGetInfo$descriptor() {
        return mmioGetInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mmioGetInfo(HMMIO hmmio, LPMMIOINFO pmmioinfo, UINT fuInfo)
     * }
     */
    public static MethodHandle mmioGetInfo$handle() {
        return mmioGetInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT mmioGetInfo(HMMIO hmmio, LPMMIOINFO pmmioinfo, UINT fuInfo)
     * }
     */
    public static MemorySegment mmioGetInfo$address() {
        return mmioGetInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT mmioGetInfo(HMMIO hmmio, LPMMIOINFO pmmioinfo, UINT fuInfo)
     * }
     */
    public static int mmioGetInfo(MemorySegment hmmio, MemorySegment pmmioinfo, int fuInfo) {
        var mh$ = mmioGetInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioGetInfo", hmmio, pmmioinfo, fuInfo);
            }
            return (int)mh$.invokeExact(hmmio, pmmioinfo, fuInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioSetInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mmioSetInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mmioSetInfo(HMMIO hmmio, LPCMMIOINFO pmmioinfo, UINT fuInfo)
     * }
     */
    public static FunctionDescriptor mmioSetInfo$descriptor() {
        return mmioSetInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mmioSetInfo(HMMIO hmmio, LPCMMIOINFO pmmioinfo, UINT fuInfo)
     * }
     */
    public static MethodHandle mmioSetInfo$handle() {
        return mmioSetInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT mmioSetInfo(HMMIO hmmio, LPCMMIOINFO pmmioinfo, UINT fuInfo)
     * }
     */
    public static MemorySegment mmioSetInfo$address() {
        return mmioSetInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT mmioSetInfo(HMMIO hmmio, LPCMMIOINFO pmmioinfo, UINT fuInfo)
     * }
     */
    public static int mmioSetInfo(MemorySegment hmmio, MemorySegment pmmioinfo, int fuInfo) {
        var mh$ = mmioSetInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioSetInfo", hmmio, pmmioinfo, fuInfo);
            }
            return (int)mh$.invokeExact(hmmio, pmmioinfo, fuInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioSetBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mmioSetBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mmioSetBuffer(HMMIO hmmio, LPSTR pchBuffer, LONG cchBuffer, UINT fuBuffer)
     * }
     */
    public static FunctionDescriptor mmioSetBuffer$descriptor() {
        return mmioSetBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mmioSetBuffer(HMMIO hmmio, LPSTR pchBuffer, LONG cchBuffer, UINT fuBuffer)
     * }
     */
    public static MethodHandle mmioSetBuffer$handle() {
        return mmioSetBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT mmioSetBuffer(HMMIO hmmio, LPSTR pchBuffer, LONG cchBuffer, UINT fuBuffer)
     * }
     */
    public static MemorySegment mmioSetBuffer$address() {
        return mmioSetBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT mmioSetBuffer(HMMIO hmmio, LPSTR pchBuffer, LONG cchBuffer, UINT fuBuffer)
     * }
     */
    public static int mmioSetBuffer(MemorySegment hmmio, MemorySegment pchBuffer, int cchBuffer, int fuBuffer) {
        var mh$ = mmioSetBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioSetBuffer", hmmio, pchBuffer, cchBuffer, fuBuffer);
            }
            return (int)mh$.invokeExact(hmmio, pchBuffer, cchBuffer, fuBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioFlush {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mmioFlush");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mmioFlush(HMMIO hmmio, UINT fuFlush)
     * }
     */
    public static FunctionDescriptor mmioFlush$descriptor() {
        return mmioFlush.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mmioFlush(HMMIO hmmio, UINT fuFlush)
     * }
     */
    public static MethodHandle mmioFlush$handle() {
        return mmioFlush.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT mmioFlush(HMMIO hmmio, UINT fuFlush)
     * }
     */
    public static MemorySegment mmioFlush$address() {
        return mmioFlush.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT mmioFlush(HMMIO hmmio, UINT fuFlush)
     * }
     */
    public static int mmioFlush(MemorySegment hmmio, int fuFlush) {
        var mh$ = mmioFlush.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioFlush", hmmio, fuFlush);
            }
            return (int)mh$.invokeExact(hmmio, fuFlush);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioAdvance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mmioAdvance");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mmioAdvance(HMMIO hmmio, LPMMIOINFO pmmioinfo, UINT fuAdvance)
     * }
     */
    public static FunctionDescriptor mmioAdvance$descriptor() {
        return mmioAdvance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mmioAdvance(HMMIO hmmio, LPMMIOINFO pmmioinfo, UINT fuAdvance)
     * }
     */
    public static MethodHandle mmioAdvance$handle() {
        return mmioAdvance.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT mmioAdvance(HMMIO hmmio, LPMMIOINFO pmmioinfo, UINT fuAdvance)
     * }
     */
    public static MemorySegment mmioAdvance$address() {
        return mmioAdvance.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT mmioAdvance(HMMIO hmmio, LPMMIOINFO pmmioinfo, UINT fuAdvance)
     * }
     */
    public static int mmioAdvance(MemorySegment hmmio, MemorySegment pmmioinfo, int fuAdvance) {
        var mh$ = mmioAdvance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioAdvance", hmmio, pmmioinfo, fuAdvance);
            }
            return (int)mh$.invokeExact(hmmio, pmmioinfo, fuAdvance);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioSendMessage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mmioSendMessage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LRESULT mmioSendMessage(HMMIO hmmio, UINT uMsg, LPARAM lParam1, LPARAM lParam2)
     * }
     */
    public static FunctionDescriptor mmioSendMessage$descriptor() {
        return mmioSendMessage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LRESULT mmioSendMessage(HMMIO hmmio, UINT uMsg, LPARAM lParam1, LPARAM lParam2)
     * }
     */
    public static MethodHandle mmioSendMessage$handle() {
        return mmioSendMessage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * LRESULT mmioSendMessage(HMMIO hmmio, UINT uMsg, LPARAM lParam1, LPARAM lParam2)
     * }
     */
    public static MemorySegment mmioSendMessage$address() {
        return mmioSendMessage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * LRESULT mmioSendMessage(HMMIO hmmio, UINT uMsg, LPARAM lParam1, LPARAM lParam2)
     * }
     */
    public static long mmioSendMessage(MemorySegment hmmio, int uMsg, long lParam1, long lParam2) {
        var mh$ = mmioSendMessage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioSendMessage", hmmio, uMsg, lParam1, lParam2);
            }
            return (long)mh$.invokeExact(hmmio, uMsg, lParam1, lParam2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioDescend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mmioDescend");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mmioDescend(HMMIO hmmio, LPMMCKINFO pmmcki, const MMCKINFO *pmmckiParent, UINT fuDescend)
     * }
     */
    public static FunctionDescriptor mmioDescend$descriptor() {
        return mmioDescend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mmioDescend(HMMIO hmmio, LPMMCKINFO pmmcki, const MMCKINFO *pmmckiParent, UINT fuDescend)
     * }
     */
    public static MethodHandle mmioDescend$handle() {
        return mmioDescend.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT mmioDescend(HMMIO hmmio, LPMMCKINFO pmmcki, const MMCKINFO *pmmckiParent, UINT fuDescend)
     * }
     */
    public static MemorySegment mmioDescend$address() {
        return mmioDescend.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT mmioDescend(HMMIO hmmio, LPMMCKINFO pmmcki, const MMCKINFO *pmmckiParent, UINT fuDescend)
     * }
     */
    public static int mmioDescend(MemorySegment hmmio, MemorySegment pmmcki, MemorySegment pmmckiParent, int fuDescend) {
        var mh$ = mmioDescend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioDescend", hmmio, pmmcki, pmmckiParent, fuDescend);
            }
            return (int)mh$.invokeExact(hmmio, pmmcki, pmmckiParent, fuDescend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioAscend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mmioAscend");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mmioAscend(HMMIO hmmio, LPMMCKINFO pmmcki, UINT fuAscend)
     * }
     */
    public static FunctionDescriptor mmioAscend$descriptor() {
        return mmioAscend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mmioAscend(HMMIO hmmio, LPMMCKINFO pmmcki, UINT fuAscend)
     * }
     */
    public static MethodHandle mmioAscend$handle() {
        return mmioAscend.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT mmioAscend(HMMIO hmmio, LPMMCKINFO pmmcki, UINT fuAscend)
     * }
     */
    public static MemorySegment mmioAscend$address() {
        return mmioAscend.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT mmioAscend(HMMIO hmmio, LPMMCKINFO pmmcki, UINT fuAscend)
     * }
     */
    public static int mmioAscend(MemorySegment hmmio, MemorySegment pmmcki, int fuAscend) {
        var mh$ = mmioAscend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioAscend", hmmio, pmmcki, fuAscend);
            }
            return (int)mh$.invokeExact(hmmio, pmmcki, fuAscend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mmioCreateChunk {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mmioCreateChunk");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mmioCreateChunk(HMMIO hmmio, LPMMCKINFO pmmcki, UINT fuCreate)
     * }
     */
    public static FunctionDescriptor mmioCreateChunk$descriptor() {
        return mmioCreateChunk.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mmioCreateChunk(HMMIO hmmio, LPMMCKINFO pmmcki, UINT fuCreate)
     * }
     */
    public static MethodHandle mmioCreateChunk$handle() {
        return mmioCreateChunk.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT mmioCreateChunk(HMMIO hmmio, LPMMCKINFO pmmcki, UINT fuCreate)
     * }
     */
    public static MemorySegment mmioCreateChunk$address() {
        return mmioCreateChunk.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT mmioCreateChunk(HMMIO hmmio, LPMMCKINFO pmmcki, UINT fuCreate)
     * }
     */
    public static int mmioCreateChunk(MemorySegment hmmio, MemorySegment pmmcki, int fuCreate) {
        var mh$ = mmioCreateChunk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mmioCreateChunk", hmmio, pmmcki, fuCreate);
            }
            return (int)mh$.invokeExact(hmmio, pmmcki, fuCreate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class timeSetEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("timeSetEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT timeSetEvent(UINT uDelay, UINT uResolution, LPTIMECALLBACK fptc, DWORD_PTR dwUser, UINT fuEvent)
     * }
     */
    public static FunctionDescriptor timeSetEvent$descriptor() {
        return timeSetEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT timeSetEvent(UINT uDelay, UINT uResolution, LPTIMECALLBACK fptc, DWORD_PTR dwUser, UINT fuEvent)
     * }
     */
    public static MethodHandle timeSetEvent$handle() {
        return timeSetEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT timeSetEvent(UINT uDelay, UINT uResolution, LPTIMECALLBACK fptc, DWORD_PTR dwUser, UINT fuEvent)
     * }
     */
    public static MemorySegment timeSetEvent$address() {
        return timeSetEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT timeSetEvent(UINT uDelay, UINT uResolution, LPTIMECALLBACK fptc, DWORD_PTR dwUser, UINT fuEvent)
     * }
     */
    public static int timeSetEvent(int uDelay, int uResolution, MemorySegment fptc, long dwUser, int fuEvent) {
        var mh$ = timeSetEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("timeSetEvent", uDelay, uResolution, fptc, dwUser, fuEvent);
            }
            return (int)mh$.invokeExact(uDelay, uResolution, fptc, dwUser, fuEvent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class timeKillEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("timeKillEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT timeKillEvent(UINT uTimerID)
     * }
     */
    public static FunctionDescriptor timeKillEvent$descriptor() {
        return timeKillEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT timeKillEvent(UINT uTimerID)
     * }
     */
    public static MethodHandle timeKillEvent$handle() {
        return timeKillEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT timeKillEvent(UINT uTimerID)
     * }
     */
    public static MemorySegment timeKillEvent$address() {
        return timeKillEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT timeKillEvent(UINT uTimerID)
     * }
     */
    public static int timeKillEvent(int uTimerID) {
        var mh$ = timeKillEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("timeKillEvent", uTimerID);
            }
            return (int)mh$.invokeExact(uTimerID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sndPlaySoundA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("sndPlaySoundA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL sndPlaySoundA(LPCSTR pszSound, UINT fuSound)
     * }
     */
    public static FunctionDescriptor sndPlaySoundA$descriptor() {
        return sndPlaySoundA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL sndPlaySoundA(LPCSTR pszSound, UINT fuSound)
     * }
     */
    public static MethodHandle sndPlaySoundA$handle() {
        return sndPlaySoundA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL sndPlaySoundA(LPCSTR pszSound, UINT fuSound)
     * }
     */
    public static MemorySegment sndPlaySoundA$address() {
        return sndPlaySoundA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL sndPlaySoundA(LPCSTR pszSound, UINT fuSound)
     * }
     */
    public static int sndPlaySoundA(MemorySegment pszSound, int fuSound) {
        var mh$ = sndPlaySoundA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sndPlaySoundA", pszSound, fuSound);
            }
            return (int)mh$.invokeExact(pszSound, fuSound);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sndPlaySoundW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("sndPlaySoundW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL sndPlaySoundW(LPCWSTR pszSound, UINT fuSound)
     * }
     */
    public static FunctionDescriptor sndPlaySoundW$descriptor() {
        return sndPlaySoundW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL sndPlaySoundW(LPCWSTR pszSound, UINT fuSound)
     * }
     */
    public static MethodHandle sndPlaySoundW$handle() {
        return sndPlaySoundW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL sndPlaySoundW(LPCWSTR pszSound, UINT fuSound)
     * }
     */
    public static MemorySegment sndPlaySoundW$address() {
        return sndPlaySoundW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL sndPlaySoundW(LPCWSTR pszSound, UINT fuSound)
     * }
     */
    public static int sndPlaySoundW(MemorySegment pszSound, int fuSound) {
        var mh$ = sndPlaySoundW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sndPlaySoundW", pszSound, fuSound);
            }
            return (int)mh$.invokeExact(pszSound, fuSound);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PlaySoundA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("PlaySoundA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL PlaySoundA(LPCSTR pszSound, HMODULE hmod, DWORD fdwSound)
     * }
     */
    public static FunctionDescriptor PlaySoundA$descriptor() {
        return PlaySoundA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL PlaySoundA(LPCSTR pszSound, HMODULE hmod, DWORD fdwSound)
     * }
     */
    public static MethodHandle PlaySoundA$handle() {
        return PlaySoundA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL PlaySoundA(LPCSTR pszSound, HMODULE hmod, DWORD fdwSound)
     * }
     */
    public static MemorySegment PlaySoundA$address() {
        return PlaySoundA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL PlaySoundA(LPCSTR pszSound, HMODULE hmod, DWORD fdwSound)
     * }
     */
    public static int PlaySoundA(MemorySegment pszSound, MemorySegment hmod, int fdwSound) {
        var mh$ = PlaySoundA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PlaySoundA", pszSound, hmod, fdwSound);
            }
            return (int)mh$.invokeExact(pszSound, hmod, fdwSound);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PlaySoundW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("PlaySoundW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL PlaySoundW(LPCWSTR pszSound, HMODULE hmod, DWORD fdwSound)
     * }
     */
    public static FunctionDescriptor PlaySoundW$descriptor() {
        return PlaySoundW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL PlaySoundW(LPCWSTR pszSound, HMODULE hmod, DWORD fdwSound)
     * }
     */
    public static MethodHandle PlaySoundW$handle() {
        return PlaySoundW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL PlaySoundW(LPCWSTR pszSound, HMODULE hmod, DWORD fdwSound)
     * }
     */
    public static MemorySegment PlaySoundW$address() {
        return PlaySoundW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL PlaySoundW(LPCWSTR pszSound, HMODULE hmod, DWORD fdwSound)
     * }
     */
    public static int PlaySoundW(MemorySegment pszSound, MemorySegment hmod, int fdwSound) {
        var mh$ = PlaySoundW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PlaySoundW", pszSound, hmod, fdwSound);
            }
            return (int)mh$.invokeExact(pszSound, hmod, fdwSound);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct HWAVE__ {
     *     int unused;
     * } *HWAVE
     * }
     */
    public static final AddressLayout HWAVE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HWAVEIN__ {
     *     int unused;
     * } *HWAVEIN
     * }
     */
    public static final AddressLayout HWAVEIN = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HWAVEOUT__ {
     *     int unused;
     * } *HWAVEOUT
     * }
     */
    public static final AddressLayout HWAVEOUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef HWAVEIN *LPHWAVEIN
     * }
     */
    public static final AddressLayout LPHWAVEIN = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef HWAVEOUT *LPHWAVEOUT
     * }
     */
    public static final AddressLayout LPHWAVEOUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct wavehdr_tag {
     *     LPSTR lpData;
     *     DWORD dwBufferLength;
     *     DWORD dwBytesRecorded;
     *     DWORD_PTR dwUser;
     *     DWORD dwFlags;
     *     DWORD dwLoops;
     *     struct wavehdr_tag *lpNext;
     *     DWORD_PTR reserved;
     * } *PWAVEHDR
     * }
     */
    public static final AddressLayout PWAVEHDR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct wavehdr_tag {
     *     LPSTR lpData;
     *     DWORD dwBufferLength;
     *     DWORD dwBytesRecorded;
     *     DWORD_PTR dwUser;
     *     DWORD dwFlags;
     *     DWORD dwLoops;
     *     struct wavehdr_tag *lpNext;
     *     DWORD_PTR reserved;
     * } *NPWAVEHDR
     * }
     */
    public static final AddressLayout NPWAVEHDR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct wavehdr_tag {
     *     LPSTR lpData;
     *     DWORD dwBufferLength;
     *     DWORD dwBytesRecorded;
     *     DWORD_PTR dwUser;
     *     DWORD dwFlags;
     *     DWORD dwLoops;
     *     struct wavehdr_tag *lpNext;
     *     DWORD_PTR reserved;
     * } *LPWAVEHDR
     * }
     */
    public static final AddressLayout LPWAVEHDR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEOUTCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     * } *PWAVEOUTCAPSA
     * }
     */
    public static final AddressLayout PWAVEOUTCAPSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEOUTCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     * } *NPWAVEOUTCAPSA
     * }
     */
    public static final AddressLayout NPWAVEOUTCAPSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEOUTCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     * } *LPWAVEOUTCAPSA
     * }
     */
    public static final AddressLayout LPWAVEOUTCAPSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEOUTCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     * } *PWAVEOUTCAPSW
     * }
     */
    public static final AddressLayout PWAVEOUTCAPSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEOUTCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     * } *NPWAVEOUTCAPSW
     * }
     */
    public static final AddressLayout NPWAVEOUTCAPSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEOUTCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     * } *LPWAVEOUTCAPSW
     * }
     */
    public static final AddressLayout LPWAVEOUTCAPSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PWAVEOUTCAPSA PWAVEOUTCAPS
     * }
     */
    public static final AddressLayout PWAVEOUTCAPS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef NPWAVEOUTCAPSA NPWAVEOUTCAPS
     * }
     */
    public static final AddressLayout NPWAVEOUTCAPS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPWAVEOUTCAPSA LPWAVEOUTCAPS
     * }
     */
    public static final AddressLayout LPWAVEOUTCAPS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEOUTCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *PWAVEOUTCAPS2A
     * }
     */
    public static final AddressLayout PWAVEOUTCAPS2A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEOUTCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *NPWAVEOUTCAPS2A
     * }
     */
    public static final AddressLayout NPWAVEOUTCAPS2A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEOUTCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *LPWAVEOUTCAPS2A
     * }
     */
    public static final AddressLayout LPWAVEOUTCAPS2A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEOUTCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *PWAVEOUTCAPS2W
     * }
     */
    public static final AddressLayout PWAVEOUTCAPS2W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEOUTCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *NPWAVEOUTCAPS2W
     * }
     */
    public static final AddressLayout NPWAVEOUTCAPS2W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEOUTCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *LPWAVEOUTCAPS2W
     * }
     */
    public static final AddressLayout LPWAVEOUTCAPS2W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PWAVEOUTCAPS2A PWAVEOUTCAPS2
     * }
     */
    public static final AddressLayout PWAVEOUTCAPS2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef NPWAVEOUTCAPS2A NPWAVEOUTCAPS2
     * }
     */
    public static final AddressLayout NPWAVEOUTCAPS2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPWAVEOUTCAPS2A LPWAVEOUTCAPS2
     * }
     */
    public static final AddressLayout LPWAVEOUTCAPS2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEINCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     * } *PWAVEINCAPSA
     * }
     */
    public static final AddressLayout PWAVEINCAPSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEINCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     * } *NPWAVEINCAPSA
     * }
     */
    public static final AddressLayout NPWAVEINCAPSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEINCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     * } *LPWAVEINCAPSA
     * }
     */
    public static final AddressLayout LPWAVEINCAPSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEINCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     * } *PWAVEINCAPSW
     * }
     */
    public static final AddressLayout PWAVEINCAPSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEINCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     * } *NPWAVEINCAPSW
     * }
     */
    public static final AddressLayout NPWAVEINCAPSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEINCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     * } *LPWAVEINCAPSW
     * }
     */
    public static final AddressLayout LPWAVEINCAPSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PWAVEINCAPSA PWAVEINCAPS
     * }
     */
    public static final AddressLayout PWAVEINCAPS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef NPWAVEINCAPSA NPWAVEINCAPS
     * }
     */
    public static final AddressLayout NPWAVEINCAPS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPWAVEINCAPSA LPWAVEINCAPS
     * }
     */
    public static final AddressLayout LPWAVEINCAPS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEINCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *PWAVEINCAPS2A
     * }
     */
    public static final AddressLayout PWAVEINCAPS2A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEINCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *NPWAVEINCAPS2A
     * }
     */
    public static final AddressLayout NPWAVEINCAPS2A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEINCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *LPWAVEINCAPS2A
     * }
     */
    public static final AddressLayout LPWAVEINCAPS2A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEINCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *PWAVEINCAPS2W
     * }
     */
    public static final AddressLayout PWAVEINCAPS2W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEINCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *NPWAVEINCAPS2W
     * }
     */
    public static final AddressLayout NPWAVEINCAPS2W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagWAVEINCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD dwFormats;
     *     WORD wChannels;
     *     WORD wReserved1;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *LPWAVEINCAPS2W
     * }
     */
    public static final AddressLayout LPWAVEINCAPS2W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PWAVEINCAPS2A PWAVEINCAPS2
     * }
     */
    public static final AddressLayout PWAVEINCAPS2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef NPWAVEINCAPS2A NPWAVEINCAPS2
     * }
     */
    public static final AddressLayout NPWAVEINCAPS2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPWAVEINCAPS2A LPWAVEINCAPS2
     * }
     */
    public static final AddressLayout LPWAVEINCAPS2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct waveformat_tag {
     *     WORD wFormatTag;
     *     WORD nChannels;
     *     DWORD nSamplesPerSec;
     *     DWORD nAvgBytesPerSec;
     *     WORD nBlockAlign;
     * } *PWAVEFORMAT
     * }
     */
    public static final AddressLayout PWAVEFORMAT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct waveformat_tag {
     *     WORD wFormatTag;
     *     WORD nChannels;
     *     DWORD nSamplesPerSec;
     *     DWORD nAvgBytesPerSec;
     *     WORD nBlockAlign;
     * } *NPWAVEFORMAT
     * }
     */
    public static final AddressLayout NPWAVEFORMAT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct waveformat_tag {
     *     WORD wFormatTag;
     *     WORD nChannels;
     *     DWORD nSamplesPerSec;
     *     DWORD nAvgBytesPerSec;
     *     WORD nBlockAlign;
     * } *LPWAVEFORMAT
     * }
     */
    public static final AddressLayout LPWAVEFORMAT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct pcmwaveformat_tag {
     *     WAVEFORMAT wf;
     *     WORD wBitsPerSample;
     * } *PPCMWAVEFORMAT
     * }
     */
    public static final AddressLayout PPCMWAVEFORMAT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct pcmwaveformat_tag {
     *     WAVEFORMAT wf;
     *     WORD wBitsPerSample;
     * } *NPPCMWAVEFORMAT
     * }
     */
    public static final AddressLayout NPPCMWAVEFORMAT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct pcmwaveformat_tag {
     *     WAVEFORMAT wf;
     *     WORD wBitsPerSample;
     * } *LPPCMWAVEFORMAT
     * }
     */
    public static final AddressLayout LPPCMWAVEFORMAT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tWAVEFORMATEX {
     *     WORD wFormatTag;
     *     WORD nChannels;
     *     DWORD nSamplesPerSec;
     *     DWORD nAvgBytesPerSec;
     *     WORD nBlockAlign;
     *     WORD wBitsPerSample;
     *     WORD cbSize;
     * } *PWAVEFORMATEX
     * }
     */
    public static final AddressLayout PWAVEFORMATEX = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tWAVEFORMATEX {
     *     WORD wFormatTag;
     *     WORD nChannels;
     *     DWORD nSamplesPerSec;
     *     DWORD nAvgBytesPerSec;
     *     WORD nBlockAlign;
     *     WORD wBitsPerSample;
     *     WORD cbSize;
     * } *NPWAVEFORMATEX
     * }
     */
    public static final AddressLayout NPWAVEFORMATEX = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tWAVEFORMATEX {
     *     WORD wFormatTag;
     *     WORD nChannels;
     *     DWORD nSamplesPerSec;
     *     DWORD nAvgBytesPerSec;
     *     WORD nBlockAlign;
     *     WORD wBitsPerSample;
     *     WORD cbSize;
     * } *LPWAVEFORMATEX
     * }
     */
    public static final AddressLayout LPWAVEFORMATEX = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const WAVEFORMATEX *LPCWAVEFORMATEX
     * }
     */
    public static final AddressLayout LPCWAVEFORMATEX = wgl_h.C_POINTER;

    private static class waveOutGetNumDevs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveOutGetNumDevs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT waveOutGetNumDevs()
     * }
     */
    public static FunctionDescriptor waveOutGetNumDevs$descriptor() {
        return waveOutGetNumDevs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT waveOutGetNumDevs()
     * }
     */
    public static MethodHandle waveOutGetNumDevs$handle() {
        return waveOutGetNumDevs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * UINT waveOutGetNumDevs()
     * }
     */
    public static MemorySegment waveOutGetNumDevs$address() {
        return waveOutGetNumDevs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * UINT waveOutGetNumDevs()
     * }
     */
    public static int waveOutGetNumDevs() {
        var mh$ = waveOutGetNumDevs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutGetNumDevs");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutGetDevCapsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveOutGetDevCapsA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetDevCapsA(UINT_PTR uDeviceID, LPWAVEOUTCAPSA pwoc, UINT cbwoc)
     * }
     */
    public static FunctionDescriptor waveOutGetDevCapsA$descriptor() {
        return waveOutGetDevCapsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetDevCapsA(UINT_PTR uDeviceID, LPWAVEOUTCAPSA pwoc, UINT cbwoc)
     * }
     */
    public static MethodHandle waveOutGetDevCapsA$handle() {
        return waveOutGetDevCapsA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetDevCapsA(UINT_PTR uDeviceID, LPWAVEOUTCAPSA pwoc, UINT cbwoc)
     * }
     */
    public static MemorySegment waveOutGetDevCapsA$address() {
        return waveOutGetDevCapsA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT waveOutGetDevCapsA(UINT_PTR uDeviceID, LPWAVEOUTCAPSA pwoc, UINT cbwoc)
     * }
     */
    public static int waveOutGetDevCapsA(long uDeviceID, MemorySegment pwoc, int cbwoc) {
        var mh$ = waveOutGetDevCapsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutGetDevCapsA", uDeviceID, pwoc, cbwoc);
            }
            return (int)mh$.invokeExact(uDeviceID, pwoc, cbwoc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutGetDevCapsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveOutGetDevCapsW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetDevCapsW(UINT_PTR uDeviceID, LPWAVEOUTCAPSW pwoc, UINT cbwoc)
     * }
     */
    public static FunctionDescriptor waveOutGetDevCapsW$descriptor() {
        return waveOutGetDevCapsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetDevCapsW(UINT_PTR uDeviceID, LPWAVEOUTCAPSW pwoc, UINT cbwoc)
     * }
     */
    public static MethodHandle waveOutGetDevCapsW$handle() {
        return waveOutGetDevCapsW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetDevCapsW(UINT_PTR uDeviceID, LPWAVEOUTCAPSW pwoc, UINT cbwoc)
     * }
     */
    public static MemorySegment waveOutGetDevCapsW$address() {
        return waveOutGetDevCapsW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT waveOutGetDevCapsW(UINT_PTR uDeviceID, LPWAVEOUTCAPSW pwoc, UINT cbwoc)
     * }
     */
    public static int waveOutGetDevCapsW(long uDeviceID, MemorySegment pwoc, int cbwoc) {
        var mh$ = waveOutGetDevCapsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutGetDevCapsW", uDeviceID, pwoc, cbwoc);
            }
            return (int)mh$.invokeExact(uDeviceID, pwoc, cbwoc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutGetVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveOutGetVolume");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetVolume(HWAVEOUT hwo, LPDWORD pdwVolume)
     * }
     */
    public static FunctionDescriptor waveOutGetVolume$descriptor() {
        return waveOutGetVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetVolume(HWAVEOUT hwo, LPDWORD pdwVolume)
     * }
     */
    public static MethodHandle waveOutGetVolume$handle() {
        return waveOutGetVolume.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetVolume(HWAVEOUT hwo, LPDWORD pdwVolume)
     * }
     */
    public static MemorySegment waveOutGetVolume$address() {
        return waveOutGetVolume.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT waveOutGetVolume(HWAVEOUT hwo, LPDWORD pdwVolume)
     * }
     */
    public static int waveOutGetVolume(MemorySegment hwo, MemorySegment pdwVolume) {
        var mh$ = waveOutGetVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutGetVolume", hwo, pdwVolume);
            }
            return (int)mh$.invokeExact(hwo, pdwVolume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutSetVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveOutSetVolume");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutSetVolume(HWAVEOUT hwo, DWORD dwVolume)
     * }
     */
    public static FunctionDescriptor waveOutSetVolume$descriptor() {
        return waveOutSetVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutSetVolume(HWAVEOUT hwo, DWORD dwVolume)
     * }
     */
    public static MethodHandle waveOutSetVolume$handle() {
        return waveOutSetVolume.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT waveOutSetVolume(HWAVEOUT hwo, DWORD dwVolume)
     * }
     */
    public static MemorySegment waveOutSetVolume$address() {
        return waveOutSetVolume.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT waveOutSetVolume(HWAVEOUT hwo, DWORD dwVolume)
     * }
     */
    public static int waveOutSetVolume(MemorySegment hwo, int dwVolume) {
        var mh$ = waveOutSetVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutSetVolume", hwo, dwVolume);
            }
            return (int)mh$.invokeExact(hwo, dwVolume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutGetErrorTextA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveOutGetErrorTextA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetErrorTextA(MMRESULT mmrError, LPSTR pszText, UINT cchText)
     * }
     */
    public static FunctionDescriptor waveOutGetErrorTextA$descriptor() {
        return waveOutGetErrorTextA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetErrorTextA(MMRESULT mmrError, LPSTR pszText, UINT cchText)
     * }
     */
    public static MethodHandle waveOutGetErrorTextA$handle() {
        return waveOutGetErrorTextA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetErrorTextA(MMRESULT mmrError, LPSTR pszText, UINT cchText)
     * }
     */
    public static MemorySegment waveOutGetErrorTextA$address() {
        return waveOutGetErrorTextA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT waveOutGetErrorTextA(MMRESULT mmrError, LPSTR pszText, UINT cchText)
     * }
     */
    public static int waveOutGetErrorTextA(int mmrError, MemorySegment pszText, int cchText) {
        var mh$ = waveOutGetErrorTextA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutGetErrorTextA", mmrError, pszText, cchText);
            }
            return (int)mh$.invokeExact(mmrError, pszText, cchText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutGetErrorTextW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveOutGetErrorTextW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetErrorTextW(MMRESULT mmrError, LPWSTR pszText, UINT cchText)
     * }
     */
    public static FunctionDescriptor waveOutGetErrorTextW$descriptor() {
        return waveOutGetErrorTextW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetErrorTextW(MMRESULT mmrError, LPWSTR pszText, UINT cchText)
     * }
     */
    public static MethodHandle waveOutGetErrorTextW$handle() {
        return waveOutGetErrorTextW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetErrorTextW(MMRESULT mmrError, LPWSTR pszText, UINT cchText)
     * }
     */
    public static MemorySegment waveOutGetErrorTextW$address() {
        return waveOutGetErrorTextW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT waveOutGetErrorTextW(MMRESULT mmrError, LPWSTR pszText, UINT cchText)
     * }
     */
    public static int waveOutGetErrorTextW(int mmrError, MemorySegment pszText, int cchText) {
        var mh$ = waveOutGetErrorTextW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutGetErrorTextW", mmrError, pszText, cchText);
            }
            return (int)mh$.invokeExact(mmrError, pszText, cchText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutOpen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveOutOpen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutOpen(LPHWAVEOUT phwo, UINT uDeviceID, LPCWAVEFORMATEX pwfx, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static FunctionDescriptor waveOutOpen$descriptor() {
        return waveOutOpen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutOpen(LPHWAVEOUT phwo, UINT uDeviceID, LPCWAVEFORMATEX pwfx, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static MethodHandle waveOutOpen$handle() {
        return waveOutOpen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT waveOutOpen(LPHWAVEOUT phwo, UINT uDeviceID, LPCWAVEFORMATEX pwfx, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static MemorySegment waveOutOpen$address() {
        return waveOutOpen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT waveOutOpen(LPHWAVEOUT phwo, UINT uDeviceID, LPCWAVEFORMATEX pwfx, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static int waveOutOpen(MemorySegment phwo, int uDeviceID, MemorySegment pwfx, long dwCallback, long dwInstance, int fdwOpen) {
        var mh$ = waveOutOpen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutOpen", phwo, uDeviceID, pwfx, dwCallback, dwInstance, fdwOpen);
            }
            return (int)mh$.invokeExact(phwo, uDeviceID, pwfx, dwCallback, dwInstance, fdwOpen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutClose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveOutClose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutClose(HWAVEOUT hwo)
     * }
     */
    public static FunctionDescriptor waveOutClose$descriptor() {
        return waveOutClose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutClose(HWAVEOUT hwo)
     * }
     */
    public static MethodHandle waveOutClose$handle() {
        return waveOutClose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT waveOutClose(HWAVEOUT hwo)
     * }
     */
    public static MemorySegment waveOutClose$address() {
        return waveOutClose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT waveOutClose(HWAVEOUT hwo)
     * }
     */
    public static int waveOutClose(MemorySegment hwo) {
        var mh$ = waveOutClose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutClose", hwo);
            }
            return (int)mh$.invokeExact(hwo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutPrepareHeader {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveOutPrepareHeader");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutPrepareHeader(HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static FunctionDescriptor waveOutPrepareHeader$descriptor() {
        return waveOutPrepareHeader.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutPrepareHeader(HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static MethodHandle waveOutPrepareHeader$handle() {
        return waveOutPrepareHeader.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT waveOutPrepareHeader(HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static MemorySegment waveOutPrepareHeader$address() {
        return waveOutPrepareHeader.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT waveOutPrepareHeader(HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static int waveOutPrepareHeader(MemorySegment hwo, MemorySegment pwh, int cbwh) {
        var mh$ = waveOutPrepareHeader.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutPrepareHeader", hwo, pwh, cbwh);
            }
            return (int)mh$.invokeExact(hwo, pwh, cbwh);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutUnprepareHeader {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveOutUnprepareHeader");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutUnprepareHeader(HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static FunctionDescriptor waveOutUnprepareHeader$descriptor() {
        return waveOutUnprepareHeader.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutUnprepareHeader(HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static MethodHandle waveOutUnprepareHeader$handle() {
        return waveOutUnprepareHeader.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT waveOutUnprepareHeader(HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static MemorySegment waveOutUnprepareHeader$address() {
        return waveOutUnprepareHeader.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT waveOutUnprepareHeader(HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static int waveOutUnprepareHeader(MemorySegment hwo, MemorySegment pwh, int cbwh) {
        var mh$ = waveOutUnprepareHeader.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutUnprepareHeader", hwo, pwh, cbwh);
            }
            return (int)mh$.invokeExact(hwo, pwh, cbwh);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutWrite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveOutWrite");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutWrite(HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static FunctionDescriptor waveOutWrite$descriptor() {
        return waveOutWrite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutWrite(HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static MethodHandle waveOutWrite$handle() {
        return waveOutWrite.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT waveOutWrite(HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static MemorySegment waveOutWrite$address() {
        return waveOutWrite.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT waveOutWrite(HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static int waveOutWrite(MemorySegment hwo, MemorySegment pwh, int cbwh) {
        var mh$ = waveOutWrite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutWrite", hwo, pwh, cbwh);
            }
            return (int)mh$.invokeExact(hwo, pwh, cbwh);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutPause {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveOutPause");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutPause(HWAVEOUT hwo)
     * }
     */
    public static FunctionDescriptor waveOutPause$descriptor() {
        return waveOutPause.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutPause(HWAVEOUT hwo)
     * }
     */
    public static MethodHandle waveOutPause$handle() {
        return waveOutPause.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT waveOutPause(HWAVEOUT hwo)
     * }
     */
    public static MemorySegment waveOutPause$address() {
        return waveOutPause.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT waveOutPause(HWAVEOUT hwo)
     * }
     */
    public static int waveOutPause(MemorySegment hwo) {
        var mh$ = waveOutPause.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutPause", hwo);
            }
            return (int)mh$.invokeExact(hwo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutRestart {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveOutRestart");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutRestart(HWAVEOUT hwo)
     * }
     */
    public static FunctionDescriptor waveOutRestart$descriptor() {
        return waveOutRestart.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutRestart(HWAVEOUT hwo)
     * }
     */
    public static MethodHandle waveOutRestart$handle() {
        return waveOutRestart.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT waveOutRestart(HWAVEOUT hwo)
     * }
     */
    public static MemorySegment waveOutRestart$address() {
        return waveOutRestart.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT waveOutRestart(HWAVEOUT hwo)
     * }
     */
    public static int waveOutRestart(MemorySegment hwo) {
        var mh$ = waveOutRestart.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutRestart", hwo);
            }
            return (int)mh$.invokeExact(hwo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutReset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveOutReset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutReset(HWAVEOUT hwo)
     * }
     */
    public static FunctionDescriptor waveOutReset$descriptor() {
        return waveOutReset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutReset(HWAVEOUT hwo)
     * }
     */
    public static MethodHandle waveOutReset$handle() {
        return waveOutReset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT waveOutReset(HWAVEOUT hwo)
     * }
     */
    public static MemorySegment waveOutReset$address() {
        return waveOutReset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT waveOutReset(HWAVEOUT hwo)
     * }
     */
    public static int waveOutReset(MemorySegment hwo) {
        var mh$ = waveOutReset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutReset", hwo);
            }
            return (int)mh$.invokeExact(hwo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutBreakLoop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveOutBreakLoop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutBreakLoop(HWAVEOUT hwo)
     * }
     */
    public static FunctionDescriptor waveOutBreakLoop$descriptor() {
        return waveOutBreakLoop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutBreakLoop(HWAVEOUT hwo)
     * }
     */
    public static MethodHandle waveOutBreakLoop$handle() {
        return waveOutBreakLoop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT waveOutBreakLoop(HWAVEOUT hwo)
     * }
     */
    public static MemorySegment waveOutBreakLoop$address() {
        return waveOutBreakLoop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT waveOutBreakLoop(HWAVEOUT hwo)
     * }
     */
    public static int waveOutBreakLoop(MemorySegment hwo) {
        var mh$ = waveOutBreakLoop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutBreakLoop", hwo);
            }
            return (int)mh$.invokeExact(hwo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutGetPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveOutGetPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetPosition(HWAVEOUT hwo, LPMMTIME pmmt, UINT cbmmt)
     * }
     */
    public static FunctionDescriptor waveOutGetPosition$descriptor() {
        return waveOutGetPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetPosition(HWAVEOUT hwo, LPMMTIME pmmt, UINT cbmmt)
     * }
     */
    public static MethodHandle waveOutGetPosition$handle() {
        return waveOutGetPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetPosition(HWAVEOUT hwo, LPMMTIME pmmt, UINT cbmmt)
     * }
     */
    public static MemorySegment waveOutGetPosition$address() {
        return waveOutGetPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT waveOutGetPosition(HWAVEOUT hwo, LPMMTIME pmmt, UINT cbmmt)
     * }
     */
    public static int waveOutGetPosition(MemorySegment hwo, MemorySegment pmmt, int cbmmt) {
        var mh$ = waveOutGetPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutGetPosition", hwo, pmmt, cbmmt);
            }
            return (int)mh$.invokeExact(hwo, pmmt, cbmmt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutGetPitch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveOutGetPitch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetPitch(HWAVEOUT hwo, LPDWORD pdwPitch)
     * }
     */
    public static FunctionDescriptor waveOutGetPitch$descriptor() {
        return waveOutGetPitch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetPitch(HWAVEOUT hwo, LPDWORD pdwPitch)
     * }
     */
    public static MethodHandle waveOutGetPitch$handle() {
        return waveOutGetPitch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetPitch(HWAVEOUT hwo, LPDWORD pdwPitch)
     * }
     */
    public static MemorySegment waveOutGetPitch$address() {
        return waveOutGetPitch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT waveOutGetPitch(HWAVEOUT hwo, LPDWORD pdwPitch)
     * }
     */
    public static int waveOutGetPitch(MemorySegment hwo, MemorySegment pdwPitch) {
        var mh$ = waveOutGetPitch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutGetPitch", hwo, pdwPitch);
            }
            return (int)mh$.invokeExact(hwo, pdwPitch);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutSetPitch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveOutSetPitch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutSetPitch(HWAVEOUT hwo, DWORD dwPitch)
     * }
     */
    public static FunctionDescriptor waveOutSetPitch$descriptor() {
        return waveOutSetPitch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutSetPitch(HWAVEOUT hwo, DWORD dwPitch)
     * }
     */
    public static MethodHandle waveOutSetPitch$handle() {
        return waveOutSetPitch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT waveOutSetPitch(HWAVEOUT hwo, DWORD dwPitch)
     * }
     */
    public static MemorySegment waveOutSetPitch$address() {
        return waveOutSetPitch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT waveOutSetPitch(HWAVEOUT hwo, DWORD dwPitch)
     * }
     */
    public static int waveOutSetPitch(MemorySegment hwo, int dwPitch) {
        var mh$ = waveOutSetPitch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutSetPitch", hwo, dwPitch);
            }
            return (int)mh$.invokeExact(hwo, dwPitch);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutGetPlaybackRate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveOutGetPlaybackRate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetPlaybackRate(HWAVEOUT hwo, LPDWORD pdwRate)
     * }
     */
    public static FunctionDescriptor waveOutGetPlaybackRate$descriptor() {
        return waveOutGetPlaybackRate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetPlaybackRate(HWAVEOUT hwo, LPDWORD pdwRate)
     * }
     */
    public static MethodHandle waveOutGetPlaybackRate$handle() {
        return waveOutGetPlaybackRate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetPlaybackRate(HWAVEOUT hwo, LPDWORD pdwRate)
     * }
     */
    public static MemorySegment waveOutGetPlaybackRate$address() {
        return waveOutGetPlaybackRate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT waveOutGetPlaybackRate(HWAVEOUT hwo, LPDWORD pdwRate)
     * }
     */
    public static int waveOutGetPlaybackRate(MemorySegment hwo, MemorySegment pdwRate) {
        var mh$ = waveOutGetPlaybackRate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutGetPlaybackRate", hwo, pdwRate);
            }
            return (int)mh$.invokeExact(hwo, pdwRate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutSetPlaybackRate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveOutSetPlaybackRate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutSetPlaybackRate(HWAVEOUT hwo, DWORD dwRate)
     * }
     */
    public static FunctionDescriptor waveOutSetPlaybackRate$descriptor() {
        return waveOutSetPlaybackRate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutSetPlaybackRate(HWAVEOUT hwo, DWORD dwRate)
     * }
     */
    public static MethodHandle waveOutSetPlaybackRate$handle() {
        return waveOutSetPlaybackRate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT waveOutSetPlaybackRate(HWAVEOUT hwo, DWORD dwRate)
     * }
     */
    public static MemorySegment waveOutSetPlaybackRate$address() {
        return waveOutSetPlaybackRate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT waveOutSetPlaybackRate(HWAVEOUT hwo, DWORD dwRate)
     * }
     */
    public static int waveOutSetPlaybackRate(MemorySegment hwo, int dwRate) {
        var mh$ = waveOutSetPlaybackRate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutSetPlaybackRate", hwo, dwRate);
            }
            return (int)mh$.invokeExact(hwo, dwRate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutGetID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveOutGetID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetID(HWAVEOUT hwo, LPUINT puDeviceID)
     * }
     */
    public static FunctionDescriptor waveOutGetID$descriptor() {
        return waveOutGetID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetID(HWAVEOUT hwo, LPUINT puDeviceID)
     * }
     */
    public static MethodHandle waveOutGetID$handle() {
        return waveOutGetID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT waveOutGetID(HWAVEOUT hwo, LPUINT puDeviceID)
     * }
     */
    public static MemorySegment waveOutGetID$address() {
        return waveOutGetID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT waveOutGetID(HWAVEOUT hwo, LPUINT puDeviceID)
     * }
     */
    public static int waveOutGetID(MemorySegment hwo, MemorySegment puDeviceID) {
        var mh$ = waveOutGetID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutGetID", hwo, puDeviceID);
            }
            return (int)mh$.invokeExact(hwo, puDeviceID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveOutMessage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveOutMessage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveOutMessage(HWAVEOUT hwo, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2)
     * }
     */
    public static FunctionDescriptor waveOutMessage$descriptor() {
        return waveOutMessage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveOutMessage(HWAVEOUT hwo, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2)
     * }
     */
    public static MethodHandle waveOutMessage$handle() {
        return waveOutMessage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT waveOutMessage(HWAVEOUT hwo, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2)
     * }
     */
    public static MemorySegment waveOutMessage$address() {
        return waveOutMessage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT waveOutMessage(HWAVEOUT hwo, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2)
     * }
     */
    public static int waveOutMessage(MemorySegment hwo, int uMsg, long dw1, long dw2) {
        var mh$ = waveOutMessage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveOutMessage", hwo, uMsg, dw1, dw2);
            }
            return (int)mh$.invokeExact(hwo, uMsg, dw1, dw2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveInGetNumDevs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveInGetNumDevs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT waveInGetNumDevs()
     * }
     */
    public static FunctionDescriptor waveInGetNumDevs$descriptor() {
        return waveInGetNumDevs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT waveInGetNumDevs()
     * }
     */
    public static MethodHandle waveInGetNumDevs$handle() {
        return waveInGetNumDevs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * UINT waveInGetNumDevs()
     * }
     */
    public static MemorySegment waveInGetNumDevs$address() {
        return waveInGetNumDevs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * UINT waveInGetNumDevs()
     * }
     */
    public static int waveInGetNumDevs() {
        var mh$ = waveInGetNumDevs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveInGetNumDevs");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveInGetDevCapsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveInGetDevCapsA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveInGetDevCapsA(UINT_PTR uDeviceID, LPWAVEINCAPSA pwic, UINT cbwic)
     * }
     */
    public static FunctionDescriptor waveInGetDevCapsA$descriptor() {
        return waveInGetDevCapsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveInGetDevCapsA(UINT_PTR uDeviceID, LPWAVEINCAPSA pwic, UINT cbwic)
     * }
     */
    public static MethodHandle waveInGetDevCapsA$handle() {
        return waveInGetDevCapsA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT waveInGetDevCapsA(UINT_PTR uDeviceID, LPWAVEINCAPSA pwic, UINT cbwic)
     * }
     */
    public static MemorySegment waveInGetDevCapsA$address() {
        return waveInGetDevCapsA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT waveInGetDevCapsA(UINT_PTR uDeviceID, LPWAVEINCAPSA pwic, UINT cbwic)
     * }
     */
    public static int waveInGetDevCapsA(long uDeviceID, MemorySegment pwic, int cbwic) {
        var mh$ = waveInGetDevCapsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveInGetDevCapsA", uDeviceID, pwic, cbwic);
            }
            return (int)mh$.invokeExact(uDeviceID, pwic, cbwic);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveInGetDevCapsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveInGetDevCapsW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveInGetDevCapsW(UINT_PTR uDeviceID, LPWAVEINCAPSW pwic, UINT cbwic)
     * }
     */
    public static FunctionDescriptor waveInGetDevCapsW$descriptor() {
        return waveInGetDevCapsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveInGetDevCapsW(UINT_PTR uDeviceID, LPWAVEINCAPSW pwic, UINT cbwic)
     * }
     */
    public static MethodHandle waveInGetDevCapsW$handle() {
        return waveInGetDevCapsW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT waveInGetDevCapsW(UINT_PTR uDeviceID, LPWAVEINCAPSW pwic, UINT cbwic)
     * }
     */
    public static MemorySegment waveInGetDevCapsW$address() {
        return waveInGetDevCapsW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT waveInGetDevCapsW(UINT_PTR uDeviceID, LPWAVEINCAPSW pwic, UINT cbwic)
     * }
     */
    public static int waveInGetDevCapsW(long uDeviceID, MemorySegment pwic, int cbwic) {
        var mh$ = waveInGetDevCapsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveInGetDevCapsW", uDeviceID, pwic, cbwic);
            }
            return (int)mh$.invokeExact(uDeviceID, pwic, cbwic);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveInGetErrorTextA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveInGetErrorTextA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveInGetErrorTextA(MMRESULT mmrError, LPSTR pszText, UINT cchText)
     * }
     */
    public static FunctionDescriptor waveInGetErrorTextA$descriptor() {
        return waveInGetErrorTextA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveInGetErrorTextA(MMRESULT mmrError, LPSTR pszText, UINT cchText)
     * }
     */
    public static MethodHandle waveInGetErrorTextA$handle() {
        return waveInGetErrorTextA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT waveInGetErrorTextA(MMRESULT mmrError, LPSTR pszText, UINT cchText)
     * }
     */
    public static MemorySegment waveInGetErrorTextA$address() {
        return waveInGetErrorTextA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT waveInGetErrorTextA(MMRESULT mmrError, LPSTR pszText, UINT cchText)
     * }
     */
    public static int waveInGetErrorTextA(int mmrError, MemorySegment pszText, int cchText) {
        var mh$ = waveInGetErrorTextA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveInGetErrorTextA", mmrError, pszText, cchText);
            }
            return (int)mh$.invokeExact(mmrError, pszText, cchText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveInGetErrorTextW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveInGetErrorTextW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveInGetErrorTextW(MMRESULT mmrError, LPWSTR pszText, UINT cchText)
     * }
     */
    public static FunctionDescriptor waveInGetErrorTextW$descriptor() {
        return waveInGetErrorTextW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveInGetErrorTextW(MMRESULT mmrError, LPWSTR pszText, UINT cchText)
     * }
     */
    public static MethodHandle waveInGetErrorTextW$handle() {
        return waveInGetErrorTextW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT waveInGetErrorTextW(MMRESULT mmrError, LPWSTR pszText, UINT cchText)
     * }
     */
    public static MemorySegment waveInGetErrorTextW$address() {
        return waveInGetErrorTextW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT waveInGetErrorTextW(MMRESULT mmrError, LPWSTR pszText, UINT cchText)
     * }
     */
    public static int waveInGetErrorTextW(int mmrError, MemorySegment pszText, int cchText) {
        var mh$ = waveInGetErrorTextW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveInGetErrorTextW", mmrError, pszText, cchText);
            }
            return (int)mh$.invokeExact(mmrError, pszText, cchText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveInOpen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveInOpen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveInOpen(LPHWAVEIN phwi, UINT uDeviceID, LPCWAVEFORMATEX pwfx, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static FunctionDescriptor waveInOpen$descriptor() {
        return waveInOpen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveInOpen(LPHWAVEIN phwi, UINT uDeviceID, LPCWAVEFORMATEX pwfx, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static MethodHandle waveInOpen$handle() {
        return waveInOpen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT waveInOpen(LPHWAVEIN phwi, UINT uDeviceID, LPCWAVEFORMATEX pwfx, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static MemorySegment waveInOpen$address() {
        return waveInOpen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT waveInOpen(LPHWAVEIN phwi, UINT uDeviceID, LPCWAVEFORMATEX pwfx, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static int waveInOpen(MemorySegment phwi, int uDeviceID, MemorySegment pwfx, long dwCallback, long dwInstance, int fdwOpen) {
        var mh$ = waveInOpen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveInOpen", phwi, uDeviceID, pwfx, dwCallback, dwInstance, fdwOpen);
            }
            return (int)mh$.invokeExact(phwi, uDeviceID, pwfx, dwCallback, dwInstance, fdwOpen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveInClose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveInClose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveInClose(HWAVEIN hwi)
     * }
     */
    public static FunctionDescriptor waveInClose$descriptor() {
        return waveInClose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveInClose(HWAVEIN hwi)
     * }
     */
    public static MethodHandle waveInClose$handle() {
        return waveInClose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT waveInClose(HWAVEIN hwi)
     * }
     */
    public static MemorySegment waveInClose$address() {
        return waveInClose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT waveInClose(HWAVEIN hwi)
     * }
     */
    public static int waveInClose(MemorySegment hwi) {
        var mh$ = waveInClose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveInClose", hwi);
            }
            return (int)mh$.invokeExact(hwi);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveInPrepareHeader {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveInPrepareHeader");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveInPrepareHeader(HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static FunctionDescriptor waveInPrepareHeader$descriptor() {
        return waveInPrepareHeader.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveInPrepareHeader(HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static MethodHandle waveInPrepareHeader$handle() {
        return waveInPrepareHeader.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT waveInPrepareHeader(HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static MemorySegment waveInPrepareHeader$address() {
        return waveInPrepareHeader.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT waveInPrepareHeader(HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static int waveInPrepareHeader(MemorySegment hwi, MemorySegment pwh, int cbwh) {
        var mh$ = waveInPrepareHeader.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveInPrepareHeader", hwi, pwh, cbwh);
            }
            return (int)mh$.invokeExact(hwi, pwh, cbwh);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveInUnprepareHeader {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveInUnprepareHeader");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveInUnprepareHeader(HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static FunctionDescriptor waveInUnprepareHeader$descriptor() {
        return waveInUnprepareHeader.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveInUnprepareHeader(HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static MethodHandle waveInUnprepareHeader$handle() {
        return waveInUnprepareHeader.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT waveInUnprepareHeader(HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static MemorySegment waveInUnprepareHeader$address() {
        return waveInUnprepareHeader.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT waveInUnprepareHeader(HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static int waveInUnprepareHeader(MemorySegment hwi, MemorySegment pwh, int cbwh) {
        var mh$ = waveInUnprepareHeader.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveInUnprepareHeader", hwi, pwh, cbwh);
            }
            return (int)mh$.invokeExact(hwi, pwh, cbwh);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveInAddBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveInAddBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveInAddBuffer(HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static FunctionDescriptor waveInAddBuffer$descriptor() {
        return waveInAddBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveInAddBuffer(HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static MethodHandle waveInAddBuffer$handle() {
        return waveInAddBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT waveInAddBuffer(HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static MemorySegment waveInAddBuffer$address() {
        return waveInAddBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT waveInAddBuffer(HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh)
     * }
     */
    public static int waveInAddBuffer(MemorySegment hwi, MemorySegment pwh, int cbwh) {
        var mh$ = waveInAddBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveInAddBuffer", hwi, pwh, cbwh);
            }
            return (int)mh$.invokeExact(hwi, pwh, cbwh);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveInStart {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveInStart");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveInStart(HWAVEIN hwi)
     * }
     */
    public static FunctionDescriptor waveInStart$descriptor() {
        return waveInStart.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveInStart(HWAVEIN hwi)
     * }
     */
    public static MethodHandle waveInStart$handle() {
        return waveInStart.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT waveInStart(HWAVEIN hwi)
     * }
     */
    public static MemorySegment waveInStart$address() {
        return waveInStart.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT waveInStart(HWAVEIN hwi)
     * }
     */
    public static int waveInStart(MemorySegment hwi) {
        var mh$ = waveInStart.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveInStart", hwi);
            }
            return (int)mh$.invokeExact(hwi);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveInStop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveInStop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveInStop(HWAVEIN hwi)
     * }
     */
    public static FunctionDescriptor waveInStop$descriptor() {
        return waveInStop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveInStop(HWAVEIN hwi)
     * }
     */
    public static MethodHandle waveInStop$handle() {
        return waveInStop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT waveInStop(HWAVEIN hwi)
     * }
     */
    public static MemorySegment waveInStop$address() {
        return waveInStop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT waveInStop(HWAVEIN hwi)
     * }
     */
    public static int waveInStop(MemorySegment hwi) {
        var mh$ = waveInStop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveInStop", hwi);
            }
            return (int)mh$.invokeExact(hwi);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveInReset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveInReset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveInReset(HWAVEIN hwi)
     * }
     */
    public static FunctionDescriptor waveInReset$descriptor() {
        return waveInReset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveInReset(HWAVEIN hwi)
     * }
     */
    public static MethodHandle waveInReset$handle() {
        return waveInReset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT waveInReset(HWAVEIN hwi)
     * }
     */
    public static MemorySegment waveInReset$address() {
        return waveInReset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT waveInReset(HWAVEIN hwi)
     * }
     */
    public static int waveInReset(MemorySegment hwi) {
        var mh$ = waveInReset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveInReset", hwi);
            }
            return (int)mh$.invokeExact(hwi);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveInGetPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveInGetPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveInGetPosition(HWAVEIN hwi, LPMMTIME pmmt, UINT cbmmt)
     * }
     */
    public static FunctionDescriptor waveInGetPosition$descriptor() {
        return waveInGetPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveInGetPosition(HWAVEIN hwi, LPMMTIME pmmt, UINT cbmmt)
     * }
     */
    public static MethodHandle waveInGetPosition$handle() {
        return waveInGetPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT waveInGetPosition(HWAVEIN hwi, LPMMTIME pmmt, UINT cbmmt)
     * }
     */
    public static MemorySegment waveInGetPosition$address() {
        return waveInGetPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT waveInGetPosition(HWAVEIN hwi, LPMMTIME pmmt, UINT cbmmt)
     * }
     */
    public static int waveInGetPosition(MemorySegment hwi, MemorySegment pmmt, int cbmmt) {
        var mh$ = waveInGetPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveInGetPosition", hwi, pmmt, cbmmt);
            }
            return (int)mh$.invokeExact(hwi, pmmt, cbmmt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveInGetID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveInGetID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveInGetID(HWAVEIN hwi, LPUINT puDeviceID)
     * }
     */
    public static FunctionDescriptor waveInGetID$descriptor() {
        return waveInGetID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveInGetID(HWAVEIN hwi, LPUINT puDeviceID)
     * }
     */
    public static MethodHandle waveInGetID$handle() {
        return waveInGetID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT waveInGetID(HWAVEIN hwi, LPUINT puDeviceID)
     * }
     */
    public static MemorySegment waveInGetID$address() {
        return waveInGetID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT waveInGetID(HWAVEIN hwi, LPUINT puDeviceID)
     * }
     */
    public static int waveInGetID(MemorySegment hwi, MemorySegment puDeviceID) {
        var mh$ = waveInGetID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveInGetID", hwi, puDeviceID);
            }
            return (int)mh$.invokeExact(hwi, puDeviceID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class waveInMessage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("waveInMessage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT waveInMessage(HWAVEIN hwi, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2)
     * }
     */
    public static FunctionDescriptor waveInMessage$descriptor() {
        return waveInMessage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT waveInMessage(HWAVEIN hwi, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2)
     * }
     */
    public static MethodHandle waveInMessage$handle() {
        return waveInMessage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT waveInMessage(HWAVEIN hwi, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2)
     * }
     */
    public static MemorySegment waveInMessage$address() {
        return waveInMessage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT waveInMessage(HWAVEIN hwi, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2)
     * }
     */
    public static int waveInMessage(MemorySegment hwi, int uMsg, long dw1, long dw2) {
        var mh$ = waveInMessage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("waveInMessage", hwi, uMsg, dw1, dw2);
            }
            return (int)mh$.invokeExact(hwi, uMsg, dw1, dw2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct HMIDI__ {
     *     int unused;
     * } *HMIDI
     * }
     */
    public static final AddressLayout HMIDI = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HMIDIIN__ {
     *     int unused;
     * } *HMIDIIN
     * }
     */
    public static final AddressLayout HMIDIIN = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HMIDIOUT__ {
     *     int unused;
     * } *HMIDIOUT
     * }
     */
    public static final AddressLayout HMIDIOUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HMIDISTRM__ {
     *     int unused;
     * } *HMIDISTRM
     * }
     */
    public static final AddressLayout HMIDISTRM = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef HMIDI *LPHMIDI
     * }
     */
    public static final AddressLayout LPHMIDI = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef HMIDIIN *LPHMIDIIN
     * }
     */
    public static final AddressLayout LPHMIDIIN = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef HMIDIOUT *LPHMIDIOUT
     * }
     */
    public static final AddressLayout LPHMIDIOUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef HMIDISTRM *LPHMIDISTRM
     * }
     */
    public static final AddressLayout LPHMIDISTRM = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef WORD *LPPATCHARRAY
     * }
     */
    public static final AddressLayout LPPATCHARRAY = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef WORD *LPKEYARRAY
     * }
     */
    public static final AddressLayout LPKEYARRAY = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIOUTCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wVoices;
     *     WORD wNotes;
     *     WORD wChannelMask;
     *     DWORD dwSupport;
     * } *PMIDIOUTCAPSA
     * }
     */
    public static final AddressLayout PMIDIOUTCAPSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIOUTCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wVoices;
     *     WORD wNotes;
     *     WORD wChannelMask;
     *     DWORD dwSupport;
     * } *NPMIDIOUTCAPSA
     * }
     */
    public static final AddressLayout NPMIDIOUTCAPSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIOUTCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wVoices;
     *     WORD wNotes;
     *     WORD wChannelMask;
     *     DWORD dwSupport;
     * } *LPMIDIOUTCAPSA
     * }
     */
    public static final AddressLayout LPMIDIOUTCAPSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIOUTCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wVoices;
     *     WORD wNotes;
     *     WORD wChannelMask;
     *     DWORD dwSupport;
     * } *PMIDIOUTCAPSW
     * }
     */
    public static final AddressLayout PMIDIOUTCAPSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIOUTCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wVoices;
     *     WORD wNotes;
     *     WORD wChannelMask;
     *     DWORD dwSupport;
     * } *NPMIDIOUTCAPSW
     * }
     */
    public static final AddressLayout NPMIDIOUTCAPSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIOUTCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wVoices;
     *     WORD wNotes;
     *     WORD wChannelMask;
     *     DWORD dwSupport;
     * } *LPMIDIOUTCAPSW
     * }
     */
    public static final AddressLayout LPMIDIOUTCAPSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMIDIOUTCAPSA PMIDIOUTCAPS
     * }
     */
    public static final AddressLayout PMIDIOUTCAPS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef NPMIDIOUTCAPSA NPMIDIOUTCAPS
     * }
     */
    public static final AddressLayout NPMIDIOUTCAPS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMIDIOUTCAPSA LPMIDIOUTCAPS
     * }
     */
    public static final AddressLayout LPMIDIOUTCAPS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIOUTCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wVoices;
     *     WORD wNotes;
     *     WORD wChannelMask;
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *PMIDIOUTCAPS2A
     * }
     */
    public static final AddressLayout PMIDIOUTCAPS2A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIOUTCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wVoices;
     *     WORD wNotes;
     *     WORD wChannelMask;
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *NPMIDIOUTCAPS2A
     * }
     */
    public static final AddressLayout NPMIDIOUTCAPS2A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIOUTCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wVoices;
     *     WORD wNotes;
     *     WORD wChannelMask;
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *LPMIDIOUTCAPS2A
     * }
     */
    public static final AddressLayout LPMIDIOUTCAPS2A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIOUTCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wVoices;
     *     WORD wNotes;
     *     WORD wChannelMask;
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *PMIDIOUTCAPS2W
     * }
     */
    public static final AddressLayout PMIDIOUTCAPS2W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIOUTCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wVoices;
     *     WORD wNotes;
     *     WORD wChannelMask;
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *NPMIDIOUTCAPS2W
     * }
     */
    public static final AddressLayout NPMIDIOUTCAPS2W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIOUTCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wVoices;
     *     WORD wNotes;
     *     WORD wChannelMask;
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *LPMIDIOUTCAPS2W
     * }
     */
    public static final AddressLayout LPMIDIOUTCAPS2W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMIDIOUTCAPS2A PMIDIOUTCAPS2
     * }
     */
    public static final AddressLayout PMIDIOUTCAPS2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef NPMIDIOUTCAPS2A NPMIDIOUTCAPS2
     * }
     */
    public static final AddressLayout NPMIDIOUTCAPS2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMIDIOUTCAPS2A LPMIDIOUTCAPS2
     * }
     */
    public static final AddressLayout LPMIDIOUTCAPS2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIINCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD dwSupport;
     * } *PMIDIINCAPSA
     * }
     */
    public static final AddressLayout PMIDIINCAPSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIINCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD dwSupport;
     * } *NPMIDIINCAPSA
     * }
     */
    public static final AddressLayout NPMIDIINCAPSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIINCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD dwSupport;
     * } *LPMIDIINCAPSA
     * }
     */
    public static final AddressLayout LPMIDIINCAPSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIINCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD dwSupport;
     * } *PMIDIINCAPSW
     * }
     */
    public static final AddressLayout PMIDIINCAPSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIINCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD dwSupport;
     * } *NPMIDIINCAPSW
     * }
     */
    public static final AddressLayout NPMIDIINCAPSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIINCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD dwSupport;
     * } *LPMIDIINCAPSW
     * }
     */
    public static final AddressLayout LPMIDIINCAPSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMIDIINCAPSA PMIDIINCAPS
     * }
     */
    public static final AddressLayout PMIDIINCAPS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef NPMIDIINCAPSA NPMIDIINCAPS
     * }
     */
    public static final AddressLayout NPMIDIINCAPS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMIDIINCAPSA LPMIDIINCAPS
     * }
     */
    public static final AddressLayout LPMIDIINCAPS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIINCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *PMIDIINCAPS2A
     * }
     */
    public static final AddressLayout PMIDIINCAPS2A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIINCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *NPMIDIINCAPS2A
     * }
     */
    public static final AddressLayout NPMIDIINCAPS2A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIINCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *LPMIDIINCAPS2A
     * }
     */
    public static final AddressLayout LPMIDIINCAPS2A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIINCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *PMIDIINCAPS2W
     * }
     */
    public static final AddressLayout PMIDIINCAPS2W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIINCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *NPMIDIINCAPS2W
     * }
     */
    public static final AddressLayout NPMIDIINCAPS2W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIDIINCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *LPMIDIINCAPS2W
     * }
     */
    public static final AddressLayout LPMIDIINCAPS2W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMIDIINCAPS2A PMIDIINCAPS2
     * }
     */
    public static final AddressLayout PMIDIINCAPS2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef NPMIDIINCAPS2A NPMIDIINCAPS2
     * }
     */
    public static final AddressLayout NPMIDIINCAPS2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMIDIINCAPS2A LPMIDIINCAPS2
     * }
     */
    public static final AddressLayout LPMIDIINCAPS2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct midihdr_tag {
     *     LPSTR lpData;
     *     DWORD dwBufferLength;
     *     DWORD dwBytesRecorded;
     *     DWORD_PTR dwUser;
     *     DWORD dwFlags;
     *     struct midihdr_tag *lpNext;
     *     DWORD_PTR reserved;
     *     DWORD dwOffset;
     *     DWORD_PTR dwReserved[8];
     * } *PMIDIHDR
     * }
     */
    public static final AddressLayout PMIDIHDR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct midihdr_tag {
     *     LPSTR lpData;
     *     DWORD dwBufferLength;
     *     DWORD dwBytesRecorded;
     *     DWORD_PTR dwUser;
     *     DWORD dwFlags;
     *     struct midihdr_tag *lpNext;
     *     DWORD_PTR reserved;
     *     DWORD dwOffset;
     *     DWORD_PTR dwReserved[8];
     * } *NPMIDIHDR
     * }
     */
    public static final AddressLayout NPMIDIHDR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct midihdr_tag {
     *     LPSTR lpData;
     *     DWORD dwBufferLength;
     *     DWORD dwBytesRecorded;
     *     DWORD_PTR dwUser;
     *     DWORD dwFlags;
     *     struct midihdr_tag *lpNext;
     *     DWORD_PTR reserved;
     *     DWORD dwOffset;
     *     DWORD_PTR dwReserved[8];
     * } *LPMIDIHDR
     * }
     */
    public static final AddressLayout LPMIDIHDR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct midiproptimediv_tag {
     *     DWORD cbStruct;
     *     DWORD dwTimeDiv;
     * } *LPMIDIPROPTIMEDIV
     * }
     */
    public static final AddressLayout LPMIDIPROPTIMEDIV = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct midiproptempo_tag {
     *     DWORD cbStruct;
     *     DWORD dwTempo;
     * } *LPMIDIPROPTEMPO
     * }
     */
    public static final AddressLayout LPMIDIPROPTEMPO = wgl_h.C_POINTER;

    private static class midiOutGetNumDevs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiOutGetNumDevs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT midiOutGetNumDevs()
     * }
     */
    public static FunctionDescriptor midiOutGetNumDevs$descriptor() {
        return midiOutGetNumDevs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT midiOutGetNumDevs()
     * }
     */
    public static MethodHandle midiOutGetNumDevs$handle() {
        return midiOutGetNumDevs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * UINT midiOutGetNumDevs()
     * }
     */
    public static MemorySegment midiOutGetNumDevs$address() {
        return midiOutGetNumDevs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * UINT midiOutGetNumDevs()
     * }
     */
    public static int midiOutGetNumDevs() {
        var mh$ = midiOutGetNumDevs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiOutGetNumDevs");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiStreamOpen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiStreamOpen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiStreamOpen(LPHMIDISTRM phms, LPUINT puDeviceID, DWORD cMidi, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static FunctionDescriptor midiStreamOpen$descriptor() {
        return midiStreamOpen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiStreamOpen(LPHMIDISTRM phms, LPUINT puDeviceID, DWORD cMidi, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static MethodHandle midiStreamOpen$handle() {
        return midiStreamOpen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiStreamOpen(LPHMIDISTRM phms, LPUINT puDeviceID, DWORD cMidi, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static MemorySegment midiStreamOpen$address() {
        return midiStreamOpen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiStreamOpen(LPHMIDISTRM phms, LPUINT puDeviceID, DWORD cMidi, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static int midiStreamOpen(MemorySegment phms, MemorySegment puDeviceID, int cMidi, long dwCallback, long dwInstance, int fdwOpen) {
        var mh$ = midiStreamOpen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiStreamOpen", phms, puDeviceID, cMidi, dwCallback, dwInstance, fdwOpen);
            }
            return (int)mh$.invokeExact(phms, puDeviceID, cMidi, dwCallback, dwInstance, fdwOpen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiStreamClose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiStreamClose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiStreamClose(HMIDISTRM hms)
     * }
     */
    public static FunctionDescriptor midiStreamClose$descriptor() {
        return midiStreamClose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiStreamClose(HMIDISTRM hms)
     * }
     */
    public static MethodHandle midiStreamClose$handle() {
        return midiStreamClose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiStreamClose(HMIDISTRM hms)
     * }
     */
    public static MemorySegment midiStreamClose$address() {
        return midiStreamClose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiStreamClose(HMIDISTRM hms)
     * }
     */
    public static int midiStreamClose(MemorySegment hms) {
        var mh$ = midiStreamClose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiStreamClose", hms);
            }
            return (int)mh$.invokeExact(hms);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiStreamProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiStreamProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiStreamProperty(HMIDISTRM hms, LPBYTE lppropdata, DWORD dwProperty)
     * }
     */
    public static FunctionDescriptor midiStreamProperty$descriptor() {
        return midiStreamProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiStreamProperty(HMIDISTRM hms, LPBYTE lppropdata, DWORD dwProperty)
     * }
     */
    public static MethodHandle midiStreamProperty$handle() {
        return midiStreamProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiStreamProperty(HMIDISTRM hms, LPBYTE lppropdata, DWORD dwProperty)
     * }
     */
    public static MemorySegment midiStreamProperty$address() {
        return midiStreamProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiStreamProperty(HMIDISTRM hms, LPBYTE lppropdata, DWORD dwProperty)
     * }
     */
    public static int midiStreamProperty(MemorySegment hms, MemorySegment lppropdata, int dwProperty) {
        var mh$ = midiStreamProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiStreamProperty", hms, lppropdata, dwProperty);
            }
            return (int)mh$.invokeExact(hms, lppropdata, dwProperty);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiStreamPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiStreamPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiStreamPosition(HMIDISTRM hms, LPMMTIME lpmmt, UINT cbmmt)
     * }
     */
    public static FunctionDescriptor midiStreamPosition$descriptor() {
        return midiStreamPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiStreamPosition(HMIDISTRM hms, LPMMTIME lpmmt, UINT cbmmt)
     * }
     */
    public static MethodHandle midiStreamPosition$handle() {
        return midiStreamPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiStreamPosition(HMIDISTRM hms, LPMMTIME lpmmt, UINT cbmmt)
     * }
     */
    public static MemorySegment midiStreamPosition$address() {
        return midiStreamPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiStreamPosition(HMIDISTRM hms, LPMMTIME lpmmt, UINT cbmmt)
     * }
     */
    public static int midiStreamPosition(MemorySegment hms, MemorySegment lpmmt, int cbmmt) {
        var mh$ = midiStreamPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiStreamPosition", hms, lpmmt, cbmmt);
            }
            return (int)mh$.invokeExact(hms, lpmmt, cbmmt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiStreamOut {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiStreamOut");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiStreamOut(HMIDISTRM hms, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static FunctionDescriptor midiStreamOut$descriptor() {
        return midiStreamOut.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiStreamOut(HMIDISTRM hms, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static MethodHandle midiStreamOut$handle() {
        return midiStreamOut.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiStreamOut(HMIDISTRM hms, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static MemorySegment midiStreamOut$address() {
        return midiStreamOut.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiStreamOut(HMIDISTRM hms, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static int midiStreamOut(MemorySegment hms, MemorySegment pmh, int cbmh) {
        var mh$ = midiStreamOut.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiStreamOut", hms, pmh, cbmh);
            }
            return (int)mh$.invokeExact(hms, pmh, cbmh);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiStreamPause {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiStreamPause");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiStreamPause(HMIDISTRM hms)
     * }
     */
    public static FunctionDescriptor midiStreamPause$descriptor() {
        return midiStreamPause.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiStreamPause(HMIDISTRM hms)
     * }
     */
    public static MethodHandle midiStreamPause$handle() {
        return midiStreamPause.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiStreamPause(HMIDISTRM hms)
     * }
     */
    public static MemorySegment midiStreamPause$address() {
        return midiStreamPause.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiStreamPause(HMIDISTRM hms)
     * }
     */
    public static int midiStreamPause(MemorySegment hms) {
        var mh$ = midiStreamPause.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiStreamPause", hms);
            }
            return (int)mh$.invokeExact(hms);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiStreamRestart {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiStreamRestart");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiStreamRestart(HMIDISTRM hms)
     * }
     */
    public static FunctionDescriptor midiStreamRestart$descriptor() {
        return midiStreamRestart.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiStreamRestart(HMIDISTRM hms)
     * }
     */
    public static MethodHandle midiStreamRestart$handle() {
        return midiStreamRestart.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiStreamRestart(HMIDISTRM hms)
     * }
     */
    public static MemorySegment midiStreamRestart$address() {
        return midiStreamRestart.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiStreamRestart(HMIDISTRM hms)
     * }
     */
    public static int midiStreamRestart(MemorySegment hms) {
        var mh$ = midiStreamRestart.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiStreamRestart", hms);
            }
            return (int)mh$.invokeExact(hms);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiStreamStop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiStreamStop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiStreamStop(HMIDISTRM hms)
     * }
     */
    public static FunctionDescriptor midiStreamStop$descriptor() {
        return midiStreamStop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiStreamStop(HMIDISTRM hms)
     * }
     */
    public static MethodHandle midiStreamStop$handle() {
        return midiStreamStop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiStreamStop(HMIDISTRM hms)
     * }
     */
    public static MemorySegment midiStreamStop$address() {
        return midiStreamStop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiStreamStop(HMIDISTRM hms)
     * }
     */
    public static int midiStreamStop(MemorySegment hms) {
        var mh$ = midiStreamStop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiStreamStop", hms);
            }
            return (int)mh$.invokeExact(hms);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiConnect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiConnect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiConnect(HMIDI hmi, HMIDIOUT hmo, LPVOID pReserved)
     * }
     */
    public static FunctionDescriptor midiConnect$descriptor() {
        return midiConnect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiConnect(HMIDI hmi, HMIDIOUT hmo, LPVOID pReserved)
     * }
     */
    public static MethodHandle midiConnect$handle() {
        return midiConnect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiConnect(HMIDI hmi, HMIDIOUT hmo, LPVOID pReserved)
     * }
     */
    public static MemorySegment midiConnect$address() {
        return midiConnect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiConnect(HMIDI hmi, HMIDIOUT hmo, LPVOID pReserved)
     * }
     */
    public static int midiConnect(MemorySegment hmi, MemorySegment hmo, MemorySegment pReserved) {
        var mh$ = midiConnect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiConnect", hmi, hmo, pReserved);
            }
            return (int)mh$.invokeExact(hmi, hmo, pReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiDisconnect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiDisconnect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiDisconnect(HMIDI hmi, HMIDIOUT hmo, LPVOID pReserved)
     * }
     */
    public static FunctionDescriptor midiDisconnect$descriptor() {
        return midiDisconnect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiDisconnect(HMIDI hmi, HMIDIOUT hmo, LPVOID pReserved)
     * }
     */
    public static MethodHandle midiDisconnect$handle() {
        return midiDisconnect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiDisconnect(HMIDI hmi, HMIDIOUT hmo, LPVOID pReserved)
     * }
     */
    public static MemorySegment midiDisconnect$address() {
        return midiDisconnect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiDisconnect(HMIDI hmi, HMIDIOUT hmo, LPVOID pReserved)
     * }
     */
    public static int midiDisconnect(MemorySegment hmi, MemorySegment hmo, MemorySegment pReserved) {
        var mh$ = midiDisconnect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiDisconnect", hmi, hmo, pReserved);
            }
            return (int)mh$.invokeExact(hmi, hmo, pReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiOutGetDevCapsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiOutGetDevCapsA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiOutGetDevCapsA(UINT_PTR uDeviceID, LPMIDIOUTCAPSA pmoc, UINT cbmoc)
     * }
     */
    public static FunctionDescriptor midiOutGetDevCapsA$descriptor() {
        return midiOutGetDevCapsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiOutGetDevCapsA(UINT_PTR uDeviceID, LPMIDIOUTCAPSA pmoc, UINT cbmoc)
     * }
     */
    public static MethodHandle midiOutGetDevCapsA$handle() {
        return midiOutGetDevCapsA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiOutGetDevCapsA(UINT_PTR uDeviceID, LPMIDIOUTCAPSA pmoc, UINT cbmoc)
     * }
     */
    public static MemorySegment midiOutGetDevCapsA$address() {
        return midiOutGetDevCapsA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiOutGetDevCapsA(UINT_PTR uDeviceID, LPMIDIOUTCAPSA pmoc, UINT cbmoc)
     * }
     */
    public static int midiOutGetDevCapsA(long uDeviceID, MemorySegment pmoc, int cbmoc) {
        var mh$ = midiOutGetDevCapsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiOutGetDevCapsA", uDeviceID, pmoc, cbmoc);
            }
            return (int)mh$.invokeExact(uDeviceID, pmoc, cbmoc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiOutGetDevCapsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiOutGetDevCapsW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiOutGetDevCapsW(UINT_PTR uDeviceID, LPMIDIOUTCAPSW pmoc, UINT cbmoc)
     * }
     */
    public static FunctionDescriptor midiOutGetDevCapsW$descriptor() {
        return midiOutGetDevCapsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiOutGetDevCapsW(UINT_PTR uDeviceID, LPMIDIOUTCAPSW pmoc, UINT cbmoc)
     * }
     */
    public static MethodHandle midiOutGetDevCapsW$handle() {
        return midiOutGetDevCapsW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiOutGetDevCapsW(UINT_PTR uDeviceID, LPMIDIOUTCAPSW pmoc, UINT cbmoc)
     * }
     */
    public static MemorySegment midiOutGetDevCapsW$address() {
        return midiOutGetDevCapsW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiOutGetDevCapsW(UINT_PTR uDeviceID, LPMIDIOUTCAPSW pmoc, UINT cbmoc)
     * }
     */
    public static int midiOutGetDevCapsW(long uDeviceID, MemorySegment pmoc, int cbmoc) {
        var mh$ = midiOutGetDevCapsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiOutGetDevCapsW", uDeviceID, pmoc, cbmoc);
            }
            return (int)mh$.invokeExact(uDeviceID, pmoc, cbmoc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiOutGetVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiOutGetVolume");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiOutGetVolume(HMIDIOUT hmo, LPDWORD pdwVolume)
     * }
     */
    public static FunctionDescriptor midiOutGetVolume$descriptor() {
        return midiOutGetVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiOutGetVolume(HMIDIOUT hmo, LPDWORD pdwVolume)
     * }
     */
    public static MethodHandle midiOutGetVolume$handle() {
        return midiOutGetVolume.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiOutGetVolume(HMIDIOUT hmo, LPDWORD pdwVolume)
     * }
     */
    public static MemorySegment midiOutGetVolume$address() {
        return midiOutGetVolume.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiOutGetVolume(HMIDIOUT hmo, LPDWORD pdwVolume)
     * }
     */
    public static int midiOutGetVolume(MemorySegment hmo, MemorySegment pdwVolume) {
        var mh$ = midiOutGetVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiOutGetVolume", hmo, pdwVolume);
            }
            return (int)mh$.invokeExact(hmo, pdwVolume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiOutSetVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiOutSetVolume");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiOutSetVolume(HMIDIOUT hmo, DWORD dwVolume)
     * }
     */
    public static FunctionDescriptor midiOutSetVolume$descriptor() {
        return midiOutSetVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiOutSetVolume(HMIDIOUT hmo, DWORD dwVolume)
     * }
     */
    public static MethodHandle midiOutSetVolume$handle() {
        return midiOutSetVolume.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiOutSetVolume(HMIDIOUT hmo, DWORD dwVolume)
     * }
     */
    public static MemorySegment midiOutSetVolume$address() {
        return midiOutSetVolume.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiOutSetVolume(HMIDIOUT hmo, DWORD dwVolume)
     * }
     */
    public static int midiOutSetVolume(MemorySegment hmo, int dwVolume) {
        var mh$ = midiOutSetVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiOutSetVolume", hmo, dwVolume);
            }
            return (int)mh$.invokeExact(hmo, dwVolume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiOutGetErrorTextA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiOutGetErrorTextA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiOutGetErrorTextA(MMRESULT mmrError, LPSTR pszText, UINT cchText)
     * }
     */
    public static FunctionDescriptor midiOutGetErrorTextA$descriptor() {
        return midiOutGetErrorTextA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiOutGetErrorTextA(MMRESULT mmrError, LPSTR pszText, UINT cchText)
     * }
     */
    public static MethodHandle midiOutGetErrorTextA$handle() {
        return midiOutGetErrorTextA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiOutGetErrorTextA(MMRESULT mmrError, LPSTR pszText, UINT cchText)
     * }
     */
    public static MemorySegment midiOutGetErrorTextA$address() {
        return midiOutGetErrorTextA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiOutGetErrorTextA(MMRESULT mmrError, LPSTR pszText, UINT cchText)
     * }
     */
    public static int midiOutGetErrorTextA(int mmrError, MemorySegment pszText, int cchText) {
        var mh$ = midiOutGetErrorTextA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiOutGetErrorTextA", mmrError, pszText, cchText);
            }
            return (int)mh$.invokeExact(mmrError, pszText, cchText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiOutGetErrorTextW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiOutGetErrorTextW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiOutGetErrorTextW(MMRESULT mmrError, LPWSTR pszText, UINT cchText)
     * }
     */
    public static FunctionDescriptor midiOutGetErrorTextW$descriptor() {
        return midiOutGetErrorTextW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiOutGetErrorTextW(MMRESULT mmrError, LPWSTR pszText, UINT cchText)
     * }
     */
    public static MethodHandle midiOutGetErrorTextW$handle() {
        return midiOutGetErrorTextW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiOutGetErrorTextW(MMRESULT mmrError, LPWSTR pszText, UINT cchText)
     * }
     */
    public static MemorySegment midiOutGetErrorTextW$address() {
        return midiOutGetErrorTextW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiOutGetErrorTextW(MMRESULT mmrError, LPWSTR pszText, UINT cchText)
     * }
     */
    public static int midiOutGetErrorTextW(int mmrError, MemorySegment pszText, int cchText) {
        var mh$ = midiOutGetErrorTextW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiOutGetErrorTextW", mmrError, pszText, cchText);
            }
            return (int)mh$.invokeExact(mmrError, pszText, cchText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiOutOpen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiOutOpen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiOutOpen(LPHMIDIOUT phmo, UINT uDeviceID, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static FunctionDescriptor midiOutOpen$descriptor() {
        return midiOutOpen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiOutOpen(LPHMIDIOUT phmo, UINT uDeviceID, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static MethodHandle midiOutOpen$handle() {
        return midiOutOpen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiOutOpen(LPHMIDIOUT phmo, UINT uDeviceID, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static MemorySegment midiOutOpen$address() {
        return midiOutOpen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiOutOpen(LPHMIDIOUT phmo, UINT uDeviceID, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static int midiOutOpen(MemorySegment phmo, int uDeviceID, long dwCallback, long dwInstance, int fdwOpen) {
        var mh$ = midiOutOpen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiOutOpen", phmo, uDeviceID, dwCallback, dwInstance, fdwOpen);
            }
            return (int)mh$.invokeExact(phmo, uDeviceID, dwCallback, dwInstance, fdwOpen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiOutClose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiOutClose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiOutClose(HMIDIOUT hmo)
     * }
     */
    public static FunctionDescriptor midiOutClose$descriptor() {
        return midiOutClose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiOutClose(HMIDIOUT hmo)
     * }
     */
    public static MethodHandle midiOutClose$handle() {
        return midiOutClose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiOutClose(HMIDIOUT hmo)
     * }
     */
    public static MemorySegment midiOutClose$address() {
        return midiOutClose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiOutClose(HMIDIOUT hmo)
     * }
     */
    public static int midiOutClose(MemorySegment hmo) {
        var mh$ = midiOutClose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiOutClose", hmo);
            }
            return (int)mh$.invokeExact(hmo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiOutPrepareHeader {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiOutPrepareHeader");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiOutPrepareHeader(HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static FunctionDescriptor midiOutPrepareHeader$descriptor() {
        return midiOutPrepareHeader.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiOutPrepareHeader(HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static MethodHandle midiOutPrepareHeader$handle() {
        return midiOutPrepareHeader.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiOutPrepareHeader(HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static MemorySegment midiOutPrepareHeader$address() {
        return midiOutPrepareHeader.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiOutPrepareHeader(HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static int midiOutPrepareHeader(MemorySegment hmo, MemorySegment pmh, int cbmh) {
        var mh$ = midiOutPrepareHeader.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiOutPrepareHeader", hmo, pmh, cbmh);
            }
            return (int)mh$.invokeExact(hmo, pmh, cbmh);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiOutUnprepareHeader {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiOutUnprepareHeader");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiOutUnprepareHeader(HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static FunctionDescriptor midiOutUnprepareHeader$descriptor() {
        return midiOutUnprepareHeader.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiOutUnprepareHeader(HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static MethodHandle midiOutUnprepareHeader$handle() {
        return midiOutUnprepareHeader.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiOutUnprepareHeader(HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static MemorySegment midiOutUnprepareHeader$address() {
        return midiOutUnprepareHeader.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiOutUnprepareHeader(HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static int midiOutUnprepareHeader(MemorySegment hmo, MemorySegment pmh, int cbmh) {
        var mh$ = midiOutUnprepareHeader.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiOutUnprepareHeader", hmo, pmh, cbmh);
            }
            return (int)mh$.invokeExact(hmo, pmh, cbmh);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiOutShortMsg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiOutShortMsg");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiOutShortMsg(HMIDIOUT hmo, DWORD dwMsg)
     * }
     */
    public static FunctionDescriptor midiOutShortMsg$descriptor() {
        return midiOutShortMsg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiOutShortMsg(HMIDIOUT hmo, DWORD dwMsg)
     * }
     */
    public static MethodHandle midiOutShortMsg$handle() {
        return midiOutShortMsg.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiOutShortMsg(HMIDIOUT hmo, DWORD dwMsg)
     * }
     */
    public static MemorySegment midiOutShortMsg$address() {
        return midiOutShortMsg.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiOutShortMsg(HMIDIOUT hmo, DWORD dwMsg)
     * }
     */
    public static int midiOutShortMsg(MemorySegment hmo, int dwMsg) {
        var mh$ = midiOutShortMsg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiOutShortMsg", hmo, dwMsg);
            }
            return (int)mh$.invokeExact(hmo, dwMsg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiOutLongMsg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiOutLongMsg");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiOutLongMsg(HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static FunctionDescriptor midiOutLongMsg$descriptor() {
        return midiOutLongMsg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiOutLongMsg(HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static MethodHandle midiOutLongMsg$handle() {
        return midiOutLongMsg.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiOutLongMsg(HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static MemorySegment midiOutLongMsg$address() {
        return midiOutLongMsg.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiOutLongMsg(HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static int midiOutLongMsg(MemorySegment hmo, MemorySegment pmh, int cbmh) {
        var mh$ = midiOutLongMsg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiOutLongMsg", hmo, pmh, cbmh);
            }
            return (int)mh$.invokeExact(hmo, pmh, cbmh);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiOutReset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiOutReset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiOutReset(HMIDIOUT hmo)
     * }
     */
    public static FunctionDescriptor midiOutReset$descriptor() {
        return midiOutReset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiOutReset(HMIDIOUT hmo)
     * }
     */
    public static MethodHandle midiOutReset$handle() {
        return midiOutReset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiOutReset(HMIDIOUT hmo)
     * }
     */
    public static MemorySegment midiOutReset$address() {
        return midiOutReset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiOutReset(HMIDIOUT hmo)
     * }
     */
    public static int midiOutReset(MemorySegment hmo) {
        var mh$ = midiOutReset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiOutReset", hmo);
            }
            return (int)mh$.invokeExact(hmo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiOutCachePatches {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiOutCachePatches");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiOutCachePatches(HMIDIOUT hmo, UINT uBank, LPWORD pwpa, UINT fuCache)
     * }
     */
    public static FunctionDescriptor midiOutCachePatches$descriptor() {
        return midiOutCachePatches.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiOutCachePatches(HMIDIOUT hmo, UINT uBank, LPWORD pwpa, UINT fuCache)
     * }
     */
    public static MethodHandle midiOutCachePatches$handle() {
        return midiOutCachePatches.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiOutCachePatches(HMIDIOUT hmo, UINT uBank, LPWORD pwpa, UINT fuCache)
     * }
     */
    public static MemorySegment midiOutCachePatches$address() {
        return midiOutCachePatches.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiOutCachePatches(HMIDIOUT hmo, UINT uBank, LPWORD pwpa, UINT fuCache)
     * }
     */
    public static int midiOutCachePatches(MemorySegment hmo, int uBank, MemorySegment pwpa, int fuCache) {
        var mh$ = midiOutCachePatches.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiOutCachePatches", hmo, uBank, pwpa, fuCache);
            }
            return (int)mh$.invokeExact(hmo, uBank, pwpa, fuCache);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiOutCacheDrumPatches {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiOutCacheDrumPatches");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiOutCacheDrumPatches(HMIDIOUT hmo, UINT uPatch, LPWORD pwkya, UINT fuCache)
     * }
     */
    public static FunctionDescriptor midiOutCacheDrumPatches$descriptor() {
        return midiOutCacheDrumPatches.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiOutCacheDrumPatches(HMIDIOUT hmo, UINT uPatch, LPWORD pwkya, UINT fuCache)
     * }
     */
    public static MethodHandle midiOutCacheDrumPatches$handle() {
        return midiOutCacheDrumPatches.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiOutCacheDrumPatches(HMIDIOUT hmo, UINT uPatch, LPWORD pwkya, UINT fuCache)
     * }
     */
    public static MemorySegment midiOutCacheDrumPatches$address() {
        return midiOutCacheDrumPatches.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiOutCacheDrumPatches(HMIDIOUT hmo, UINT uPatch, LPWORD pwkya, UINT fuCache)
     * }
     */
    public static int midiOutCacheDrumPatches(MemorySegment hmo, int uPatch, MemorySegment pwkya, int fuCache) {
        var mh$ = midiOutCacheDrumPatches.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiOutCacheDrumPatches", hmo, uPatch, pwkya, fuCache);
            }
            return (int)mh$.invokeExact(hmo, uPatch, pwkya, fuCache);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiOutGetID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiOutGetID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiOutGetID(HMIDIOUT hmo, LPUINT puDeviceID)
     * }
     */
    public static FunctionDescriptor midiOutGetID$descriptor() {
        return midiOutGetID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiOutGetID(HMIDIOUT hmo, LPUINT puDeviceID)
     * }
     */
    public static MethodHandle midiOutGetID$handle() {
        return midiOutGetID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiOutGetID(HMIDIOUT hmo, LPUINT puDeviceID)
     * }
     */
    public static MemorySegment midiOutGetID$address() {
        return midiOutGetID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiOutGetID(HMIDIOUT hmo, LPUINT puDeviceID)
     * }
     */
    public static int midiOutGetID(MemorySegment hmo, MemorySegment puDeviceID) {
        var mh$ = midiOutGetID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiOutGetID", hmo, puDeviceID);
            }
            return (int)mh$.invokeExact(hmo, puDeviceID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiOutMessage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiOutMessage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiOutMessage(HMIDIOUT hmo, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2)
     * }
     */
    public static FunctionDescriptor midiOutMessage$descriptor() {
        return midiOutMessage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiOutMessage(HMIDIOUT hmo, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2)
     * }
     */
    public static MethodHandle midiOutMessage$handle() {
        return midiOutMessage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiOutMessage(HMIDIOUT hmo, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2)
     * }
     */
    public static MemorySegment midiOutMessage$address() {
        return midiOutMessage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiOutMessage(HMIDIOUT hmo, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2)
     * }
     */
    public static int midiOutMessage(MemorySegment hmo, int uMsg, long dw1, long dw2) {
        var mh$ = midiOutMessage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiOutMessage", hmo, uMsg, dw1, dw2);
            }
            return (int)mh$.invokeExact(hmo, uMsg, dw1, dw2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiInGetNumDevs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiInGetNumDevs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT midiInGetNumDevs()
     * }
     */
    public static FunctionDescriptor midiInGetNumDevs$descriptor() {
        return midiInGetNumDevs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT midiInGetNumDevs()
     * }
     */
    public static MethodHandle midiInGetNumDevs$handle() {
        return midiInGetNumDevs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * UINT midiInGetNumDevs()
     * }
     */
    public static MemorySegment midiInGetNumDevs$address() {
        return midiInGetNumDevs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * UINT midiInGetNumDevs()
     * }
     */
    public static int midiInGetNumDevs() {
        var mh$ = midiInGetNumDevs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiInGetNumDevs");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiInGetDevCapsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiInGetDevCapsA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiInGetDevCapsA(UINT_PTR uDeviceID, LPMIDIINCAPSA pmic, UINT cbmic)
     * }
     */
    public static FunctionDescriptor midiInGetDevCapsA$descriptor() {
        return midiInGetDevCapsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiInGetDevCapsA(UINT_PTR uDeviceID, LPMIDIINCAPSA pmic, UINT cbmic)
     * }
     */
    public static MethodHandle midiInGetDevCapsA$handle() {
        return midiInGetDevCapsA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiInGetDevCapsA(UINT_PTR uDeviceID, LPMIDIINCAPSA pmic, UINT cbmic)
     * }
     */
    public static MemorySegment midiInGetDevCapsA$address() {
        return midiInGetDevCapsA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiInGetDevCapsA(UINT_PTR uDeviceID, LPMIDIINCAPSA pmic, UINT cbmic)
     * }
     */
    public static int midiInGetDevCapsA(long uDeviceID, MemorySegment pmic, int cbmic) {
        var mh$ = midiInGetDevCapsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiInGetDevCapsA", uDeviceID, pmic, cbmic);
            }
            return (int)mh$.invokeExact(uDeviceID, pmic, cbmic);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiInGetDevCapsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiInGetDevCapsW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiInGetDevCapsW(UINT_PTR uDeviceID, LPMIDIINCAPSW pmic, UINT cbmic)
     * }
     */
    public static FunctionDescriptor midiInGetDevCapsW$descriptor() {
        return midiInGetDevCapsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiInGetDevCapsW(UINT_PTR uDeviceID, LPMIDIINCAPSW pmic, UINT cbmic)
     * }
     */
    public static MethodHandle midiInGetDevCapsW$handle() {
        return midiInGetDevCapsW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiInGetDevCapsW(UINT_PTR uDeviceID, LPMIDIINCAPSW pmic, UINT cbmic)
     * }
     */
    public static MemorySegment midiInGetDevCapsW$address() {
        return midiInGetDevCapsW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiInGetDevCapsW(UINT_PTR uDeviceID, LPMIDIINCAPSW pmic, UINT cbmic)
     * }
     */
    public static int midiInGetDevCapsW(long uDeviceID, MemorySegment pmic, int cbmic) {
        var mh$ = midiInGetDevCapsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiInGetDevCapsW", uDeviceID, pmic, cbmic);
            }
            return (int)mh$.invokeExact(uDeviceID, pmic, cbmic);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiInGetErrorTextA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiInGetErrorTextA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiInGetErrorTextA(MMRESULT mmrError, LPSTR pszText, UINT cchText)
     * }
     */
    public static FunctionDescriptor midiInGetErrorTextA$descriptor() {
        return midiInGetErrorTextA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiInGetErrorTextA(MMRESULT mmrError, LPSTR pszText, UINT cchText)
     * }
     */
    public static MethodHandle midiInGetErrorTextA$handle() {
        return midiInGetErrorTextA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiInGetErrorTextA(MMRESULT mmrError, LPSTR pszText, UINT cchText)
     * }
     */
    public static MemorySegment midiInGetErrorTextA$address() {
        return midiInGetErrorTextA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiInGetErrorTextA(MMRESULT mmrError, LPSTR pszText, UINT cchText)
     * }
     */
    public static int midiInGetErrorTextA(int mmrError, MemorySegment pszText, int cchText) {
        var mh$ = midiInGetErrorTextA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiInGetErrorTextA", mmrError, pszText, cchText);
            }
            return (int)mh$.invokeExact(mmrError, pszText, cchText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiInGetErrorTextW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiInGetErrorTextW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiInGetErrorTextW(MMRESULT mmrError, LPWSTR pszText, UINT cchText)
     * }
     */
    public static FunctionDescriptor midiInGetErrorTextW$descriptor() {
        return midiInGetErrorTextW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiInGetErrorTextW(MMRESULT mmrError, LPWSTR pszText, UINT cchText)
     * }
     */
    public static MethodHandle midiInGetErrorTextW$handle() {
        return midiInGetErrorTextW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiInGetErrorTextW(MMRESULT mmrError, LPWSTR pszText, UINT cchText)
     * }
     */
    public static MemorySegment midiInGetErrorTextW$address() {
        return midiInGetErrorTextW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiInGetErrorTextW(MMRESULT mmrError, LPWSTR pszText, UINT cchText)
     * }
     */
    public static int midiInGetErrorTextW(int mmrError, MemorySegment pszText, int cchText) {
        var mh$ = midiInGetErrorTextW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiInGetErrorTextW", mmrError, pszText, cchText);
            }
            return (int)mh$.invokeExact(mmrError, pszText, cchText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiInOpen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiInOpen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiInOpen(LPHMIDIIN phmi, UINT uDeviceID, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static FunctionDescriptor midiInOpen$descriptor() {
        return midiInOpen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiInOpen(LPHMIDIIN phmi, UINT uDeviceID, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static MethodHandle midiInOpen$handle() {
        return midiInOpen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiInOpen(LPHMIDIIN phmi, UINT uDeviceID, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static MemorySegment midiInOpen$address() {
        return midiInOpen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiInOpen(LPHMIDIIN phmi, UINT uDeviceID, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static int midiInOpen(MemorySegment phmi, int uDeviceID, long dwCallback, long dwInstance, int fdwOpen) {
        var mh$ = midiInOpen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiInOpen", phmi, uDeviceID, dwCallback, dwInstance, fdwOpen);
            }
            return (int)mh$.invokeExact(phmi, uDeviceID, dwCallback, dwInstance, fdwOpen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiInClose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiInClose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiInClose(HMIDIIN hmi)
     * }
     */
    public static FunctionDescriptor midiInClose$descriptor() {
        return midiInClose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiInClose(HMIDIIN hmi)
     * }
     */
    public static MethodHandle midiInClose$handle() {
        return midiInClose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiInClose(HMIDIIN hmi)
     * }
     */
    public static MemorySegment midiInClose$address() {
        return midiInClose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiInClose(HMIDIIN hmi)
     * }
     */
    public static int midiInClose(MemorySegment hmi) {
        var mh$ = midiInClose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiInClose", hmi);
            }
            return (int)mh$.invokeExact(hmi);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiInPrepareHeader {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiInPrepareHeader");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiInPrepareHeader(HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static FunctionDescriptor midiInPrepareHeader$descriptor() {
        return midiInPrepareHeader.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiInPrepareHeader(HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static MethodHandle midiInPrepareHeader$handle() {
        return midiInPrepareHeader.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiInPrepareHeader(HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static MemorySegment midiInPrepareHeader$address() {
        return midiInPrepareHeader.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiInPrepareHeader(HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static int midiInPrepareHeader(MemorySegment hmi, MemorySegment pmh, int cbmh) {
        var mh$ = midiInPrepareHeader.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiInPrepareHeader", hmi, pmh, cbmh);
            }
            return (int)mh$.invokeExact(hmi, pmh, cbmh);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiInUnprepareHeader {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiInUnprepareHeader");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiInUnprepareHeader(HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static FunctionDescriptor midiInUnprepareHeader$descriptor() {
        return midiInUnprepareHeader.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiInUnprepareHeader(HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static MethodHandle midiInUnprepareHeader$handle() {
        return midiInUnprepareHeader.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiInUnprepareHeader(HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static MemorySegment midiInUnprepareHeader$address() {
        return midiInUnprepareHeader.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiInUnprepareHeader(HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static int midiInUnprepareHeader(MemorySegment hmi, MemorySegment pmh, int cbmh) {
        var mh$ = midiInUnprepareHeader.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiInUnprepareHeader", hmi, pmh, cbmh);
            }
            return (int)mh$.invokeExact(hmi, pmh, cbmh);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiInAddBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiInAddBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiInAddBuffer(HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static FunctionDescriptor midiInAddBuffer$descriptor() {
        return midiInAddBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiInAddBuffer(HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static MethodHandle midiInAddBuffer$handle() {
        return midiInAddBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiInAddBuffer(HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static MemorySegment midiInAddBuffer$address() {
        return midiInAddBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiInAddBuffer(HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh)
     * }
     */
    public static int midiInAddBuffer(MemorySegment hmi, MemorySegment pmh, int cbmh) {
        var mh$ = midiInAddBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiInAddBuffer", hmi, pmh, cbmh);
            }
            return (int)mh$.invokeExact(hmi, pmh, cbmh);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiInStart {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiInStart");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiInStart(HMIDIIN hmi)
     * }
     */
    public static FunctionDescriptor midiInStart$descriptor() {
        return midiInStart.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiInStart(HMIDIIN hmi)
     * }
     */
    public static MethodHandle midiInStart$handle() {
        return midiInStart.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiInStart(HMIDIIN hmi)
     * }
     */
    public static MemorySegment midiInStart$address() {
        return midiInStart.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiInStart(HMIDIIN hmi)
     * }
     */
    public static int midiInStart(MemorySegment hmi) {
        var mh$ = midiInStart.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiInStart", hmi);
            }
            return (int)mh$.invokeExact(hmi);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiInStop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiInStop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiInStop(HMIDIIN hmi)
     * }
     */
    public static FunctionDescriptor midiInStop$descriptor() {
        return midiInStop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiInStop(HMIDIIN hmi)
     * }
     */
    public static MethodHandle midiInStop$handle() {
        return midiInStop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiInStop(HMIDIIN hmi)
     * }
     */
    public static MemorySegment midiInStop$address() {
        return midiInStop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiInStop(HMIDIIN hmi)
     * }
     */
    public static int midiInStop(MemorySegment hmi) {
        var mh$ = midiInStop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiInStop", hmi);
            }
            return (int)mh$.invokeExact(hmi);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiInReset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiInReset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiInReset(HMIDIIN hmi)
     * }
     */
    public static FunctionDescriptor midiInReset$descriptor() {
        return midiInReset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiInReset(HMIDIIN hmi)
     * }
     */
    public static MethodHandle midiInReset$handle() {
        return midiInReset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiInReset(HMIDIIN hmi)
     * }
     */
    public static MemorySegment midiInReset$address() {
        return midiInReset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiInReset(HMIDIIN hmi)
     * }
     */
    public static int midiInReset(MemorySegment hmi) {
        var mh$ = midiInReset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiInReset", hmi);
            }
            return (int)mh$.invokeExact(hmi);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiInGetID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiInGetID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiInGetID(HMIDIIN hmi, LPUINT puDeviceID)
     * }
     */
    public static FunctionDescriptor midiInGetID$descriptor() {
        return midiInGetID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiInGetID(HMIDIIN hmi, LPUINT puDeviceID)
     * }
     */
    public static MethodHandle midiInGetID$handle() {
        return midiInGetID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiInGetID(HMIDIIN hmi, LPUINT puDeviceID)
     * }
     */
    public static MemorySegment midiInGetID$address() {
        return midiInGetID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiInGetID(HMIDIIN hmi, LPUINT puDeviceID)
     * }
     */
    public static int midiInGetID(MemorySegment hmi, MemorySegment puDeviceID) {
        var mh$ = midiInGetID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiInGetID", hmi, puDeviceID);
            }
            return (int)mh$.invokeExact(hmi, puDeviceID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class midiInMessage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("midiInMessage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT midiInMessage(HMIDIIN hmi, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2)
     * }
     */
    public static FunctionDescriptor midiInMessage$descriptor() {
        return midiInMessage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT midiInMessage(HMIDIIN hmi, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2)
     * }
     */
    public static MethodHandle midiInMessage$handle() {
        return midiInMessage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT midiInMessage(HMIDIIN hmi, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2)
     * }
     */
    public static MemorySegment midiInMessage$address() {
        return midiInMessage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT midiInMessage(HMIDIIN hmi, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2)
     * }
     */
    public static int midiInMessage(MemorySegment hmi, int uMsg, long dw1, long dw2) {
        var mh$ = midiInMessage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("midiInMessage", hmi, uMsg, dw1, dw2);
            }
            return (int)mh$.invokeExact(hmi, uMsg, dw1, dw2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagAUXCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     * } *PAUXCAPSA
     * }
     */
    public static final AddressLayout PAUXCAPSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagAUXCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     * } *NPAUXCAPSA
     * }
     */
    public static final AddressLayout NPAUXCAPSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagAUXCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     * } *LPAUXCAPSA
     * }
     */
    public static final AddressLayout LPAUXCAPSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagAUXCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     * } *PAUXCAPSW
     * }
     */
    public static final AddressLayout PAUXCAPSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagAUXCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     * } *NPAUXCAPSW
     * }
     */
    public static final AddressLayout NPAUXCAPSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagAUXCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     * } *LPAUXCAPSW
     * }
     */
    public static final AddressLayout LPAUXCAPSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PAUXCAPSA PAUXCAPS
     * }
     */
    public static final AddressLayout PAUXCAPS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef NPAUXCAPSA NPAUXCAPS
     * }
     */
    public static final AddressLayout NPAUXCAPS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPAUXCAPSA LPAUXCAPS
     * }
     */
    public static final AddressLayout LPAUXCAPS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagAUXCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *PAUXCAPS2A
     * }
     */
    public static final AddressLayout PAUXCAPS2A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagAUXCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *NPAUXCAPS2A
     * }
     */
    public static final AddressLayout NPAUXCAPS2A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagAUXCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *LPAUXCAPS2A
     * }
     */
    public static final AddressLayout LPAUXCAPS2A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagAUXCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *PAUXCAPS2W
     * }
     */
    public static final AddressLayout PAUXCAPS2W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagAUXCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *NPAUXCAPS2W
     * }
     */
    public static final AddressLayout NPAUXCAPS2W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagAUXCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     WORD wTechnology;
     *     WORD wReserved1;
     *     DWORD dwSupport;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *LPAUXCAPS2W
     * }
     */
    public static final AddressLayout LPAUXCAPS2W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PAUXCAPS2A PAUXCAPS2
     * }
     */
    public static final AddressLayout PAUXCAPS2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef NPAUXCAPS2A NPAUXCAPS2
     * }
     */
    public static final AddressLayout NPAUXCAPS2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPAUXCAPS2A LPAUXCAPS2
     * }
     */
    public static final AddressLayout LPAUXCAPS2 = wgl_h.C_POINTER;

    private static class auxGetNumDevs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("auxGetNumDevs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT auxGetNumDevs()
     * }
     */
    public static FunctionDescriptor auxGetNumDevs$descriptor() {
        return auxGetNumDevs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT auxGetNumDevs()
     * }
     */
    public static MethodHandle auxGetNumDevs$handle() {
        return auxGetNumDevs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * UINT auxGetNumDevs()
     * }
     */
    public static MemorySegment auxGetNumDevs$address() {
        return auxGetNumDevs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * UINT auxGetNumDevs()
     * }
     */
    public static int auxGetNumDevs() {
        var mh$ = auxGetNumDevs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("auxGetNumDevs");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class auxGetDevCapsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("auxGetDevCapsA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT auxGetDevCapsA(UINT_PTR uDeviceID, LPAUXCAPSA pac, UINT cbac)
     * }
     */
    public static FunctionDescriptor auxGetDevCapsA$descriptor() {
        return auxGetDevCapsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT auxGetDevCapsA(UINT_PTR uDeviceID, LPAUXCAPSA pac, UINT cbac)
     * }
     */
    public static MethodHandle auxGetDevCapsA$handle() {
        return auxGetDevCapsA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT auxGetDevCapsA(UINT_PTR uDeviceID, LPAUXCAPSA pac, UINT cbac)
     * }
     */
    public static MemorySegment auxGetDevCapsA$address() {
        return auxGetDevCapsA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT auxGetDevCapsA(UINT_PTR uDeviceID, LPAUXCAPSA pac, UINT cbac)
     * }
     */
    public static int auxGetDevCapsA(long uDeviceID, MemorySegment pac, int cbac) {
        var mh$ = auxGetDevCapsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("auxGetDevCapsA", uDeviceID, pac, cbac);
            }
            return (int)mh$.invokeExact(uDeviceID, pac, cbac);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class auxGetDevCapsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("auxGetDevCapsW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT auxGetDevCapsW(UINT_PTR uDeviceID, LPAUXCAPSW pac, UINT cbac)
     * }
     */
    public static FunctionDescriptor auxGetDevCapsW$descriptor() {
        return auxGetDevCapsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT auxGetDevCapsW(UINT_PTR uDeviceID, LPAUXCAPSW pac, UINT cbac)
     * }
     */
    public static MethodHandle auxGetDevCapsW$handle() {
        return auxGetDevCapsW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT auxGetDevCapsW(UINT_PTR uDeviceID, LPAUXCAPSW pac, UINT cbac)
     * }
     */
    public static MemorySegment auxGetDevCapsW$address() {
        return auxGetDevCapsW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT auxGetDevCapsW(UINT_PTR uDeviceID, LPAUXCAPSW pac, UINT cbac)
     * }
     */
    public static int auxGetDevCapsW(long uDeviceID, MemorySegment pac, int cbac) {
        var mh$ = auxGetDevCapsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("auxGetDevCapsW", uDeviceID, pac, cbac);
            }
            return (int)mh$.invokeExact(uDeviceID, pac, cbac);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class auxSetVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("auxSetVolume");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT auxSetVolume(UINT uDeviceID, DWORD dwVolume)
     * }
     */
    public static FunctionDescriptor auxSetVolume$descriptor() {
        return auxSetVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT auxSetVolume(UINT uDeviceID, DWORD dwVolume)
     * }
     */
    public static MethodHandle auxSetVolume$handle() {
        return auxSetVolume.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT auxSetVolume(UINT uDeviceID, DWORD dwVolume)
     * }
     */
    public static MemorySegment auxSetVolume$address() {
        return auxSetVolume.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT auxSetVolume(UINT uDeviceID, DWORD dwVolume)
     * }
     */
    public static int auxSetVolume(int uDeviceID, int dwVolume) {
        var mh$ = auxSetVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("auxSetVolume", uDeviceID, dwVolume);
            }
            return (int)mh$.invokeExact(uDeviceID, dwVolume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class auxGetVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("auxGetVolume");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT auxGetVolume(UINT uDeviceID, LPDWORD pdwVolume)
     * }
     */
    public static FunctionDescriptor auxGetVolume$descriptor() {
        return auxGetVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT auxGetVolume(UINT uDeviceID, LPDWORD pdwVolume)
     * }
     */
    public static MethodHandle auxGetVolume$handle() {
        return auxGetVolume.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT auxGetVolume(UINT uDeviceID, LPDWORD pdwVolume)
     * }
     */
    public static MemorySegment auxGetVolume$address() {
        return auxGetVolume.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT auxGetVolume(UINT uDeviceID, LPDWORD pdwVolume)
     * }
     */
    public static int auxGetVolume(int uDeviceID, MemorySegment pdwVolume) {
        var mh$ = auxGetVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("auxGetVolume", uDeviceID, pdwVolume);
            }
            return (int)mh$.invokeExact(uDeviceID, pdwVolume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class auxOutMessage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("auxOutMessage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT auxOutMessage(UINT uDeviceID, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2)
     * }
     */
    public static FunctionDescriptor auxOutMessage$descriptor() {
        return auxOutMessage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT auxOutMessage(UINT uDeviceID, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2)
     * }
     */
    public static MethodHandle auxOutMessage$handle() {
        return auxOutMessage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT auxOutMessage(UINT uDeviceID, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2)
     * }
     */
    public static MemorySegment auxOutMessage$address() {
        return auxOutMessage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT auxOutMessage(UINT uDeviceID, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2)
     * }
     */
    public static int auxOutMessage(int uDeviceID, int uMsg, long dw1, long dw2) {
        var mh$ = auxOutMessage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("auxOutMessage", uDeviceID, uMsg, dw1, dw2);
            }
            return (int)mh$.invokeExact(uDeviceID, uMsg, dw1, dw2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct HMIXEROBJ__ {
     *     int unused;
     * } *HMIXEROBJ
     * }
     */
    public static final AddressLayout HMIXEROBJ = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef HMIXEROBJ *LPHMIXEROBJ
     * }
     */
    public static final AddressLayout LPHMIXEROBJ = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HMIXER__ {
     *     int unused;
     * } *HMIXER
     * }
     */
    public static final AddressLayout HMIXER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef HMIXER *LPHMIXER
     * }
     */
    public static final AddressLayout LPHMIXER = wgl_h.C_POINTER;

    private static class mixerGetNumDevs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mixerGetNumDevs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT mixerGetNumDevs()
     * }
     */
    public static FunctionDescriptor mixerGetNumDevs$descriptor() {
        return mixerGetNumDevs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT mixerGetNumDevs()
     * }
     */
    public static MethodHandle mixerGetNumDevs$handle() {
        return mixerGetNumDevs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * UINT mixerGetNumDevs()
     * }
     */
    public static MemorySegment mixerGetNumDevs$address() {
        return mixerGetNumDevs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * UINT mixerGetNumDevs()
     * }
     */
    public static int mixerGetNumDevs() {
        var mh$ = mixerGetNumDevs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mixerGetNumDevs");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD fdwSupport;
     *     DWORD cDestinations;
     * } *PMIXERCAPSA
     * }
     */
    public static final AddressLayout PMIXERCAPSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD fdwSupport;
     *     DWORD cDestinations;
     * } *LPMIXERCAPSA
     * }
     */
    public static final AddressLayout LPMIXERCAPSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD fdwSupport;
     *     DWORD cDestinations;
     * } *PMIXERCAPSW
     * }
     */
    public static final AddressLayout PMIXERCAPSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD fdwSupport;
     *     DWORD cDestinations;
     * } *LPMIXERCAPSW
     * }
     */
    public static final AddressLayout LPMIXERCAPSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMIXERCAPSA PMIXERCAPS
     * }
     */
    public static final AddressLayout PMIXERCAPS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMIXERCAPSA LPMIXERCAPS
     * }
     */
    public static final AddressLayout LPMIXERCAPS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD fdwSupport;
     *     DWORD cDestinations;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *PMIXERCAPS2A
     * }
     */
    public static final AddressLayout PMIXERCAPS2A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     CHAR szPname[32];
     *     DWORD fdwSupport;
     *     DWORD cDestinations;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *LPMIXERCAPS2A
     * }
     */
    public static final AddressLayout LPMIXERCAPS2A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD fdwSupport;
     *     DWORD cDestinations;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *PMIXERCAPS2W
     * }
     */
    public static final AddressLayout PMIXERCAPS2W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     MMVERSION vDriverVersion;
     *     WCHAR szPname[32];
     *     DWORD fdwSupport;
     *     DWORD cDestinations;
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *LPMIXERCAPS2W
     * }
     */
    public static final AddressLayout LPMIXERCAPS2W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMIXERCAPS2A PMIXERCAPS2
     * }
     */
    public static final AddressLayout PMIXERCAPS2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMIXERCAPS2A LPMIXERCAPS2
     * }
     */
    public static final AddressLayout LPMIXERCAPS2 = wgl_h.C_POINTER;

    private static class mixerGetDevCapsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mixerGetDevCapsA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mixerGetDevCapsA(UINT_PTR uMxId, LPMIXERCAPSA pmxcaps, UINT cbmxcaps)
     * }
     */
    public static FunctionDescriptor mixerGetDevCapsA$descriptor() {
        return mixerGetDevCapsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mixerGetDevCapsA(UINT_PTR uMxId, LPMIXERCAPSA pmxcaps, UINT cbmxcaps)
     * }
     */
    public static MethodHandle mixerGetDevCapsA$handle() {
        return mixerGetDevCapsA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT mixerGetDevCapsA(UINT_PTR uMxId, LPMIXERCAPSA pmxcaps, UINT cbmxcaps)
     * }
     */
    public static MemorySegment mixerGetDevCapsA$address() {
        return mixerGetDevCapsA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT mixerGetDevCapsA(UINT_PTR uMxId, LPMIXERCAPSA pmxcaps, UINT cbmxcaps)
     * }
     */
    public static int mixerGetDevCapsA(long uMxId, MemorySegment pmxcaps, int cbmxcaps) {
        var mh$ = mixerGetDevCapsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mixerGetDevCapsA", uMxId, pmxcaps, cbmxcaps);
            }
            return (int)mh$.invokeExact(uMxId, pmxcaps, cbmxcaps);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mixerGetDevCapsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mixerGetDevCapsW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mixerGetDevCapsW(UINT_PTR uMxId, LPMIXERCAPSW pmxcaps, UINT cbmxcaps)
     * }
     */
    public static FunctionDescriptor mixerGetDevCapsW$descriptor() {
        return mixerGetDevCapsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mixerGetDevCapsW(UINT_PTR uMxId, LPMIXERCAPSW pmxcaps, UINT cbmxcaps)
     * }
     */
    public static MethodHandle mixerGetDevCapsW$handle() {
        return mixerGetDevCapsW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT mixerGetDevCapsW(UINT_PTR uMxId, LPMIXERCAPSW pmxcaps, UINT cbmxcaps)
     * }
     */
    public static MemorySegment mixerGetDevCapsW$address() {
        return mixerGetDevCapsW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT mixerGetDevCapsW(UINT_PTR uMxId, LPMIXERCAPSW pmxcaps, UINT cbmxcaps)
     * }
     */
    public static int mixerGetDevCapsW(long uMxId, MemorySegment pmxcaps, int cbmxcaps) {
        var mh$ = mixerGetDevCapsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mixerGetDevCapsW", uMxId, pmxcaps, cbmxcaps);
            }
            return (int)mh$.invokeExact(uMxId, pmxcaps, cbmxcaps);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mixerOpen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mixerOpen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mixerOpen(LPHMIXER phmx, UINT uMxId, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static FunctionDescriptor mixerOpen$descriptor() {
        return mixerOpen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mixerOpen(LPHMIXER phmx, UINT uMxId, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static MethodHandle mixerOpen$handle() {
        return mixerOpen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT mixerOpen(LPHMIXER phmx, UINT uMxId, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static MemorySegment mixerOpen$address() {
        return mixerOpen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT mixerOpen(LPHMIXER phmx, UINT uMxId, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
     * }
     */
    public static int mixerOpen(MemorySegment phmx, int uMxId, long dwCallback, long dwInstance, int fdwOpen) {
        var mh$ = mixerOpen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mixerOpen", phmx, uMxId, dwCallback, dwInstance, fdwOpen);
            }
            return (int)mh$.invokeExact(phmx, uMxId, dwCallback, dwInstance, fdwOpen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mixerClose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mixerClose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mixerClose(HMIXER hmx)
     * }
     */
    public static FunctionDescriptor mixerClose$descriptor() {
        return mixerClose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mixerClose(HMIXER hmx)
     * }
     */
    public static MethodHandle mixerClose$handle() {
        return mixerClose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT mixerClose(HMIXER hmx)
     * }
     */
    public static MemorySegment mixerClose$address() {
        return mixerClose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT mixerClose(HMIXER hmx)
     * }
     */
    public static int mixerClose(MemorySegment hmx) {
        var mh$ = mixerClose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mixerClose", hmx);
            }
            return (int)mh$.invokeExact(hmx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mixerMessage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mixerMessage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD mixerMessage(HMIXER hmx, UINT uMsg, DWORD_PTR dwParam1, DWORD_PTR dwParam2)
     * }
     */
    public static FunctionDescriptor mixerMessage$descriptor() {
        return mixerMessage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD mixerMessage(HMIXER hmx, UINT uMsg, DWORD_PTR dwParam1, DWORD_PTR dwParam2)
     * }
     */
    public static MethodHandle mixerMessage$handle() {
        return mixerMessage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD mixerMessage(HMIXER hmx, UINT uMsg, DWORD_PTR dwParam1, DWORD_PTR dwParam2)
     * }
     */
    public static MemorySegment mixerMessage$address() {
        return mixerMessage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD mixerMessage(HMIXER hmx, UINT uMsg, DWORD_PTR dwParam1, DWORD_PTR dwParam2)
     * }
     */
    public static int mixerMessage(MemorySegment hmx, int uMsg, long dwParam1, long dwParam2) {
        var mh$ = mixerMessage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mixerMessage", hmx, uMsg, dwParam1, dwParam2);
            }
            return (int)mh$.invokeExact(hmx, uMsg, dwParam1, dwParam2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERLINEA {
     *     DWORD cbStruct;
     *     DWORD dwDestination;
     *     DWORD dwSource;
     *     DWORD dwLineID;
     *     DWORD fdwLine;
     *     DWORD_PTR dwUser;
     *     DWORD dwComponentType;
     *     DWORD cChannels;
     *     DWORD cConnections;
     *     DWORD cControls;
     *     CHAR szShortName[16];
     *     CHAR szName[64];
     *     struct {
     *         DWORD dwType;
     *         DWORD dwDeviceID;
     *         WORD wMid;
     *         WORD wPid;
     *         MMVERSION vDriverVersion;
     *         CHAR szPname[32];
     *     } Target;
     * } *PMIXERLINEA
     * }
     */
    public static final AddressLayout PMIXERLINEA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERLINEA {
     *     DWORD cbStruct;
     *     DWORD dwDestination;
     *     DWORD dwSource;
     *     DWORD dwLineID;
     *     DWORD fdwLine;
     *     DWORD_PTR dwUser;
     *     DWORD dwComponentType;
     *     DWORD cChannels;
     *     DWORD cConnections;
     *     DWORD cControls;
     *     CHAR szShortName[16];
     *     CHAR szName[64];
     *     struct {
     *         DWORD dwType;
     *         DWORD dwDeviceID;
     *         WORD wMid;
     *         WORD wPid;
     *         MMVERSION vDriverVersion;
     *         CHAR szPname[32];
     *     } Target;
     * } *LPMIXERLINEA
     * }
     */
    public static final AddressLayout LPMIXERLINEA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERLINEW {
     *     DWORD cbStruct;
     *     DWORD dwDestination;
     *     DWORD dwSource;
     *     DWORD dwLineID;
     *     DWORD fdwLine;
     *     DWORD_PTR dwUser;
     *     DWORD dwComponentType;
     *     DWORD cChannels;
     *     DWORD cConnections;
     *     DWORD cControls;
     *     WCHAR szShortName[16];
     *     WCHAR szName[64];
     *     struct {
     *         DWORD dwType;
     *         DWORD dwDeviceID;
     *         WORD wMid;
     *         WORD wPid;
     *         MMVERSION vDriverVersion;
     *         WCHAR szPname[32];
     *     } Target;
     * } *PMIXERLINEW
     * }
     */
    public static final AddressLayout PMIXERLINEW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERLINEW {
     *     DWORD cbStruct;
     *     DWORD dwDestination;
     *     DWORD dwSource;
     *     DWORD dwLineID;
     *     DWORD fdwLine;
     *     DWORD_PTR dwUser;
     *     DWORD dwComponentType;
     *     DWORD cChannels;
     *     DWORD cConnections;
     *     DWORD cControls;
     *     WCHAR szShortName[16];
     *     WCHAR szName[64];
     *     struct {
     *         DWORD dwType;
     *         DWORD dwDeviceID;
     *         WORD wMid;
     *         WORD wPid;
     *         MMVERSION vDriverVersion;
     *         WCHAR szPname[32];
     *     } Target;
     * } *LPMIXERLINEW
     * }
     */
    public static final AddressLayout LPMIXERLINEW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMIXERLINEA PMIXERLINE
     * }
     */
    public static final AddressLayout PMIXERLINE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMIXERLINEA LPMIXERLINE
     * }
     */
    public static final AddressLayout LPMIXERLINE = wgl_h.C_POINTER;

    private static class mixerGetLineInfoA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mixerGetLineInfoA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mixerGetLineInfoA(HMIXEROBJ hmxobj, LPMIXERLINEA pmxl, DWORD fdwInfo)
     * }
     */
    public static FunctionDescriptor mixerGetLineInfoA$descriptor() {
        return mixerGetLineInfoA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mixerGetLineInfoA(HMIXEROBJ hmxobj, LPMIXERLINEA pmxl, DWORD fdwInfo)
     * }
     */
    public static MethodHandle mixerGetLineInfoA$handle() {
        return mixerGetLineInfoA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT mixerGetLineInfoA(HMIXEROBJ hmxobj, LPMIXERLINEA pmxl, DWORD fdwInfo)
     * }
     */
    public static MemorySegment mixerGetLineInfoA$address() {
        return mixerGetLineInfoA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT mixerGetLineInfoA(HMIXEROBJ hmxobj, LPMIXERLINEA pmxl, DWORD fdwInfo)
     * }
     */
    public static int mixerGetLineInfoA(MemorySegment hmxobj, MemorySegment pmxl, int fdwInfo) {
        var mh$ = mixerGetLineInfoA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mixerGetLineInfoA", hmxobj, pmxl, fdwInfo);
            }
            return (int)mh$.invokeExact(hmxobj, pmxl, fdwInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mixerGetLineInfoW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mixerGetLineInfoW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mixerGetLineInfoW(HMIXEROBJ hmxobj, LPMIXERLINEW pmxl, DWORD fdwInfo)
     * }
     */
    public static FunctionDescriptor mixerGetLineInfoW$descriptor() {
        return mixerGetLineInfoW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mixerGetLineInfoW(HMIXEROBJ hmxobj, LPMIXERLINEW pmxl, DWORD fdwInfo)
     * }
     */
    public static MethodHandle mixerGetLineInfoW$handle() {
        return mixerGetLineInfoW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT mixerGetLineInfoW(HMIXEROBJ hmxobj, LPMIXERLINEW pmxl, DWORD fdwInfo)
     * }
     */
    public static MemorySegment mixerGetLineInfoW$address() {
        return mixerGetLineInfoW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT mixerGetLineInfoW(HMIXEROBJ hmxobj, LPMIXERLINEW pmxl, DWORD fdwInfo)
     * }
     */
    public static int mixerGetLineInfoW(MemorySegment hmxobj, MemorySegment pmxl, int fdwInfo) {
        var mh$ = mixerGetLineInfoW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mixerGetLineInfoW", hmxobj, pmxl, fdwInfo);
            }
            return (int)mh$.invokeExact(hmxobj, pmxl, fdwInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mixerGetID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mixerGetID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mixerGetID(HMIXEROBJ hmxobj, UINT *puMxId, DWORD fdwId)
     * }
     */
    public static FunctionDescriptor mixerGetID$descriptor() {
        return mixerGetID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mixerGetID(HMIXEROBJ hmxobj, UINT *puMxId, DWORD fdwId)
     * }
     */
    public static MethodHandle mixerGetID$handle() {
        return mixerGetID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT mixerGetID(HMIXEROBJ hmxobj, UINT *puMxId, DWORD fdwId)
     * }
     */
    public static MemorySegment mixerGetID$address() {
        return mixerGetID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT mixerGetID(HMIXEROBJ hmxobj, UINT *puMxId, DWORD fdwId)
     * }
     */
    public static int mixerGetID(MemorySegment hmxobj, MemorySegment puMxId, int fdwId) {
        var mh$ = mixerGetID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mixerGetID", hmxobj, puMxId, fdwId);
            }
            return (int)mh$.invokeExact(hmxobj, puMxId, fdwId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERCONTROLA {
     *     DWORD cbStruct;
     *     DWORD dwControlID;
     *     DWORD dwControlType;
     *     DWORD fdwControl;
     *     DWORD cMultipleItems;
     *     CHAR szShortName[16];
     *     CHAR szName[64];
     *     union {
     *         struct {
     *             LONG lMinimum;
     *             LONG lMaximum;
     *         };
     *         struct {
     *             DWORD dwMinimum;
     *             DWORD dwMaximum;
     *         };
     *         DWORD dwReserved[6];
     *     } Bounds;
     *     union {
     *         DWORD cSteps;
     *         DWORD cbCustomData;
     *         DWORD dwReserved[6];
     *     } Metrics;
     * } *PMIXERCONTROLA
     * }
     */
    public static final AddressLayout PMIXERCONTROLA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERCONTROLA {
     *     DWORD cbStruct;
     *     DWORD dwControlID;
     *     DWORD dwControlType;
     *     DWORD fdwControl;
     *     DWORD cMultipleItems;
     *     CHAR szShortName[16];
     *     CHAR szName[64];
     *     union {
     *         struct {
     *             LONG lMinimum;
     *             LONG lMaximum;
     *         };
     *         struct {
     *             DWORD dwMinimum;
     *             DWORD dwMaximum;
     *         };
     *         DWORD dwReserved[6];
     *     } Bounds;
     *     union {
     *         DWORD cSteps;
     *         DWORD cbCustomData;
     *         DWORD dwReserved[6];
     *     } Metrics;
     * } *LPMIXERCONTROLA
     * }
     */
    public static final AddressLayout LPMIXERCONTROLA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERCONTROLW {
     *     DWORD cbStruct;
     *     DWORD dwControlID;
     *     DWORD dwControlType;
     *     DWORD fdwControl;
     *     DWORD cMultipleItems;
     *     WCHAR szShortName[16];
     *     WCHAR szName[64];
     *     union {
     *         struct {
     *             LONG lMinimum;
     *             LONG lMaximum;
     *         };
     *         struct {
     *             DWORD dwMinimum;
     *             DWORD dwMaximum;
     *         };
     *         DWORD dwReserved[6];
     *     } Bounds;
     *     union {
     *         DWORD cSteps;
     *         DWORD cbCustomData;
     *         DWORD dwReserved[6];
     *     } Metrics;
     * } *PMIXERCONTROLW
     * }
     */
    public static final AddressLayout PMIXERCONTROLW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERCONTROLW {
     *     DWORD cbStruct;
     *     DWORD dwControlID;
     *     DWORD dwControlType;
     *     DWORD fdwControl;
     *     DWORD cMultipleItems;
     *     WCHAR szShortName[16];
     *     WCHAR szName[64];
     *     union {
     *         struct {
     *             LONG lMinimum;
     *             LONG lMaximum;
     *         };
     *         struct {
     *             DWORD dwMinimum;
     *             DWORD dwMaximum;
     *         };
     *         DWORD dwReserved[6];
     *     } Bounds;
     *     union {
     *         DWORD cSteps;
     *         DWORD cbCustomData;
     *         DWORD dwReserved[6];
     *     } Metrics;
     * } *LPMIXERCONTROLW
     * }
     */
    public static final AddressLayout LPMIXERCONTROLW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMIXERCONTROLA PMIXERCONTROL
     * }
     */
    public static final AddressLayout PMIXERCONTROL = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMIXERCONTROLA LPMIXERCONTROL
     * }
     */
    public static final AddressLayout LPMIXERCONTROL = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERLINECONTROLSA {
     *     DWORD cbStruct;
     *     DWORD dwLineID;
     *     union {
     *         DWORD dwControlID;
     *         DWORD dwControlType;
     *     };
     *     DWORD cControls;
     *     DWORD cbmxctrl;
     *     LPMIXERCONTROLA pamxctrl;
     * } *PMIXERLINECONTROLSA
     * }
     */
    public static final AddressLayout PMIXERLINECONTROLSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERLINECONTROLSA {
     *     DWORD cbStruct;
     *     DWORD dwLineID;
     *     union {
     *         DWORD dwControlID;
     *         DWORD dwControlType;
     *     };
     *     DWORD cControls;
     *     DWORD cbmxctrl;
     *     LPMIXERCONTROLA pamxctrl;
     * } *LPMIXERLINECONTROLSA
     * }
     */
    public static final AddressLayout LPMIXERLINECONTROLSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERLINECONTROLSW {
     *     DWORD cbStruct;
     *     DWORD dwLineID;
     *     union {
     *         DWORD dwControlID;
     *         DWORD dwControlType;
     *     };
     *     DWORD cControls;
     *     DWORD cbmxctrl;
     *     LPMIXERCONTROLW pamxctrl;
     * } *PMIXERLINECONTROLSW
     * }
     */
    public static final AddressLayout PMIXERLINECONTROLSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERLINECONTROLSW {
     *     DWORD cbStruct;
     *     DWORD dwLineID;
     *     union {
     *         DWORD dwControlID;
     *         DWORD dwControlType;
     *     };
     *     DWORD cControls;
     *     DWORD cbmxctrl;
     *     LPMIXERCONTROLW pamxctrl;
     * } *LPMIXERLINECONTROLSW
     * }
     */
    public static final AddressLayout LPMIXERLINECONTROLSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMIXERLINECONTROLSA PMIXERLINECONTROLS
     * }
     */
    public static final AddressLayout PMIXERLINECONTROLS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMIXERLINECONTROLSA LPMIXERLINECONTROLS
     * }
     */
    public static final AddressLayout LPMIXERLINECONTROLS = wgl_h.C_POINTER;

    private static class mixerGetLineControlsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mixerGetLineControlsA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mixerGetLineControlsA(HMIXEROBJ hmxobj, LPMIXERLINECONTROLSA pmxlc, DWORD fdwControls)
     * }
     */
    public static FunctionDescriptor mixerGetLineControlsA$descriptor() {
        return mixerGetLineControlsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mixerGetLineControlsA(HMIXEROBJ hmxobj, LPMIXERLINECONTROLSA pmxlc, DWORD fdwControls)
     * }
     */
    public static MethodHandle mixerGetLineControlsA$handle() {
        return mixerGetLineControlsA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT mixerGetLineControlsA(HMIXEROBJ hmxobj, LPMIXERLINECONTROLSA pmxlc, DWORD fdwControls)
     * }
     */
    public static MemorySegment mixerGetLineControlsA$address() {
        return mixerGetLineControlsA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT mixerGetLineControlsA(HMIXEROBJ hmxobj, LPMIXERLINECONTROLSA pmxlc, DWORD fdwControls)
     * }
     */
    public static int mixerGetLineControlsA(MemorySegment hmxobj, MemorySegment pmxlc, int fdwControls) {
        var mh$ = mixerGetLineControlsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mixerGetLineControlsA", hmxobj, pmxlc, fdwControls);
            }
            return (int)mh$.invokeExact(hmxobj, pmxlc, fdwControls);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mixerGetLineControlsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mixerGetLineControlsW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mixerGetLineControlsW(HMIXEROBJ hmxobj, LPMIXERLINECONTROLSW pmxlc, DWORD fdwControls)
     * }
     */
    public static FunctionDescriptor mixerGetLineControlsW$descriptor() {
        return mixerGetLineControlsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mixerGetLineControlsW(HMIXEROBJ hmxobj, LPMIXERLINECONTROLSW pmxlc, DWORD fdwControls)
     * }
     */
    public static MethodHandle mixerGetLineControlsW$handle() {
        return mixerGetLineControlsW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT mixerGetLineControlsW(HMIXEROBJ hmxobj, LPMIXERLINECONTROLSW pmxlc, DWORD fdwControls)
     * }
     */
    public static MemorySegment mixerGetLineControlsW$address() {
        return mixerGetLineControlsW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT mixerGetLineControlsW(HMIXEROBJ hmxobj, LPMIXERLINECONTROLSW pmxlc, DWORD fdwControls)
     * }
     */
    public static int mixerGetLineControlsW(MemorySegment hmxobj, MemorySegment pmxlc, int fdwControls) {
        var mh$ = mixerGetLineControlsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mixerGetLineControlsW", hmxobj, pmxlc, fdwControls);
            }
            return (int)mh$.invokeExact(hmxobj, pmxlc, fdwControls);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct tMIXERCONTROLDETAILS {
     *     DWORD cbStruct;
     *     DWORD dwControlID;
     *     DWORD cChannels;
     *     union {
     *         HWND hwndOwner;
     *         DWORD cMultipleItems;
     *     };
     *     DWORD cbDetails;
     *     LPVOID paDetails;
     * } *PMIXERCONTROLDETAILS
     * }
     */
    public static final AddressLayout PMIXERCONTROLDETAILS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tMIXERCONTROLDETAILS {
     *     DWORD cbStruct;
     *     DWORD dwControlID;
     *     DWORD cChannels;
     *     union {
     *         HWND hwndOwner;
     *         DWORD cMultipleItems;
     *     };
     *     DWORD cbDetails;
     *     LPVOID paDetails;
     * } *LPMIXERCONTROLDETAILS
     * }
     */
    public static final AddressLayout LPMIXERCONTROLDETAILS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERCONTROLDETAILS_LISTTEXTA {
     *     DWORD dwParam1;
     *     DWORD dwParam2;
     *     CHAR szName[64];
     * } *PMIXERCONTROLDETAILS_LISTTEXTA
     * }
     */
    public static final AddressLayout PMIXERCONTROLDETAILS_LISTTEXTA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERCONTROLDETAILS_LISTTEXTA {
     *     DWORD dwParam1;
     *     DWORD dwParam2;
     *     CHAR szName[64];
     * } *LPMIXERCONTROLDETAILS_LISTTEXTA
     * }
     */
    public static final AddressLayout LPMIXERCONTROLDETAILS_LISTTEXTA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERCONTROLDETAILS_LISTTEXTW {
     *     DWORD dwParam1;
     *     DWORD dwParam2;
     *     WCHAR szName[64];
     * } *PMIXERCONTROLDETAILS_LISTTEXTW
     * }
     */
    public static final AddressLayout PMIXERCONTROLDETAILS_LISTTEXTW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMIXERCONTROLDETAILS_LISTTEXTW {
     *     DWORD dwParam1;
     *     DWORD dwParam2;
     *     WCHAR szName[64];
     * } *LPMIXERCONTROLDETAILS_LISTTEXTW
     * }
     */
    public static final AddressLayout LPMIXERCONTROLDETAILS_LISTTEXTW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMIXERCONTROLDETAILS_LISTTEXTA PMIXERCONTROLDETAILS_LISTTEXT
     * }
     */
    public static final AddressLayout PMIXERCONTROLDETAILS_LISTTEXT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMIXERCONTROLDETAILS_LISTTEXTA LPMIXERCONTROLDETAILS_LISTTEXT
     * }
     */
    public static final AddressLayout LPMIXERCONTROLDETAILS_LISTTEXT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tMIXERCONTROLDETAILS_BOOLEAN {
     *     LONG fValue;
     * } *PMIXERCONTROLDETAILS_BOOLEAN
     * }
     */
    public static final AddressLayout PMIXERCONTROLDETAILS_BOOLEAN = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tMIXERCONTROLDETAILS_BOOLEAN {
     *     LONG fValue;
     * } *LPMIXERCONTROLDETAILS_BOOLEAN
     * }
     */
    public static final AddressLayout LPMIXERCONTROLDETAILS_BOOLEAN = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tMIXERCONTROLDETAILS_SIGNED {
     *     LONG lValue;
     * } *PMIXERCONTROLDETAILS_SIGNED
     * }
     */
    public static final AddressLayout PMIXERCONTROLDETAILS_SIGNED = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tMIXERCONTROLDETAILS_SIGNED {
     *     LONG lValue;
     * } *LPMIXERCONTROLDETAILS_SIGNED
     * }
     */
    public static final AddressLayout LPMIXERCONTROLDETAILS_SIGNED = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tMIXERCONTROLDETAILS_UNSIGNED {
     *     DWORD dwValue;
     * } *PMIXERCONTROLDETAILS_UNSIGNED
     * }
     */
    public static final AddressLayout PMIXERCONTROLDETAILS_UNSIGNED = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tMIXERCONTROLDETAILS_UNSIGNED {
     *     DWORD dwValue;
     * } *LPMIXERCONTROLDETAILS_UNSIGNED
     * }
     */
    public static final AddressLayout LPMIXERCONTROLDETAILS_UNSIGNED = wgl_h.C_POINTER;

    private static class mixerGetControlDetailsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mixerGetControlDetailsA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mixerGetControlDetailsA(HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails)
     * }
     */
    public static FunctionDescriptor mixerGetControlDetailsA$descriptor() {
        return mixerGetControlDetailsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mixerGetControlDetailsA(HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails)
     * }
     */
    public static MethodHandle mixerGetControlDetailsA$handle() {
        return mixerGetControlDetailsA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT mixerGetControlDetailsA(HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails)
     * }
     */
    public static MemorySegment mixerGetControlDetailsA$address() {
        return mixerGetControlDetailsA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT mixerGetControlDetailsA(HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails)
     * }
     */
    public static int mixerGetControlDetailsA(MemorySegment hmxobj, MemorySegment pmxcd, int fdwDetails) {
        var mh$ = mixerGetControlDetailsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mixerGetControlDetailsA", hmxobj, pmxcd, fdwDetails);
            }
            return (int)mh$.invokeExact(hmxobj, pmxcd, fdwDetails);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mixerGetControlDetailsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mixerGetControlDetailsW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mixerGetControlDetailsW(HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails)
     * }
     */
    public static FunctionDescriptor mixerGetControlDetailsW$descriptor() {
        return mixerGetControlDetailsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mixerGetControlDetailsW(HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails)
     * }
     */
    public static MethodHandle mixerGetControlDetailsW$handle() {
        return mixerGetControlDetailsW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT mixerGetControlDetailsW(HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails)
     * }
     */
    public static MemorySegment mixerGetControlDetailsW$address() {
        return mixerGetControlDetailsW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT mixerGetControlDetailsW(HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails)
     * }
     */
    public static int mixerGetControlDetailsW(MemorySegment hmxobj, MemorySegment pmxcd, int fdwDetails) {
        var mh$ = mixerGetControlDetailsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mixerGetControlDetailsW", hmxobj, pmxcd, fdwDetails);
            }
            return (int)mh$.invokeExact(hmxobj, pmxcd, fdwDetails);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mixerSetControlDetails {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mixerSetControlDetails");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT mixerSetControlDetails(HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails)
     * }
     */
    public static FunctionDescriptor mixerSetControlDetails$descriptor() {
        return mixerSetControlDetails.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT mixerSetControlDetails(HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails)
     * }
     */
    public static MethodHandle mixerSetControlDetails$handle() {
        return mixerSetControlDetails.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT mixerSetControlDetails(HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails)
     * }
     */
    public static MemorySegment mixerSetControlDetails$address() {
        return mixerSetControlDetails.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT mixerSetControlDetails(HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails)
     * }
     */
    public static int mixerSetControlDetails(MemorySegment hmxobj, MemorySegment pmxcd, int fdwDetails) {
        var mh$ = mixerSetControlDetails.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mixerSetControlDetails", hmxobj, pmxcd, fdwDetails);
            }
            return (int)mh$.invokeExact(hmxobj, pmxcd, fdwDetails);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct timecaps_tag {
     *     UINT wPeriodMin;
     *     UINT wPeriodMax;
     * } *PTIMECAPS
     * }
     */
    public static final AddressLayout PTIMECAPS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct timecaps_tag {
     *     UINT wPeriodMin;
     *     UINT wPeriodMax;
     * } *NPTIMECAPS
     * }
     */
    public static final AddressLayout NPTIMECAPS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct timecaps_tag {
     *     UINT wPeriodMin;
     *     UINT wPeriodMax;
     * } *LPTIMECAPS
     * }
     */
    public static final AddressLayout LPTIMECAPS = wgl_h.C_POINTER;

    private static class timeGetSystemTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("timeGetSystemTime");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT timeGetSystemTime(LPMMTIME pmmt, UINT cbmmt)
     * }
     */
    public static FunctionDescriptor timeGetSystemTime$descriptor() {
        return timeGetSystemTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT timeGetSystemTime(LPMMTIME pmmt, UINT cbmmt)
     * }
     */
    public static MethodHandle timeGetSystemTime$handle() {
        return timeGetSystemTime.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT timeGetSystemTime(LPMMTIME pmmt, UINT cbmmt)
     * }
     */
    public static MemorySegment timeGetSystemTime$address() {
        return timeGetSystemTime.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT timeGetSystemTime(LPMMTIME pmmt, UINT cbmmt)
     * }
     */
    public static int timeGetSystemTime(MemorySegment pmmt, int cbmmt) {
        var mh$ = timeGetSystemTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("timeGetSystemTime", pmmt, cbmmt);
            }
            return (int)mh$.invokeExact(pmmt, cbmmt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class timeGetTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("timeGetTime");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD timeGetTime()
     * }
     */
    public static FunctionDescriptor timeGetTime$descriptor() {
        return timeGetTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD timeGetTime()
     * }
     */
    public static MethodHandle timeGetTime$handle() {
        return timeGetTime.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD timeGetTime()
     * }
     */
    public static MemorySegment timeGetTime$address() {
        return timeGetTime.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD timeGetTime()
     * }
     */
    public static int timeGetTime() {
        var mh$ = timeGetTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("timeGetTime");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class timeGetDevCaps {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("timeGetDevCaps");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT timeGetDevCaps(LPTIMECAPS ptc, UINT cbtc)
     * }
     */
    public static FunctionDescriptor timeGetDevCaps$descriptor() {
        return timeGetDevCaps.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT timeGetDevCaps(LPTIMECAPS ptc, UINT cbtc)
     * }
     */
    public static MethodHandle timeGetDevCaps$handle() {
        return timeGetDevCaps.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT timeGetDevCaps(LPTIMECAPS ptc, UINT cbtc)
     * }
     */
    public static MemorySegment timeGetDevCaps$address() {
        return timeGetDevCaps.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT timeGetDevCaps(LPTIMECAPS ptc, UINT cbtc)
     * }
     */
    public static int timeGetDevCaps(MemorySegment ptc, int cbtc) {
        var mh$ = timeGetDevCaps.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("timeGetDevCaps", ptc, cbtc);
            }
            return (int)mh$.invokeExact(ptc, cbtc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class timeBeginPeriod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("timeBeginPeriod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT timeBeginPeriod(UINT uPeriod)
     * }
     */
    public static FunctionDescriptor timeBeginPeriod$descriptor() {
        return timeBeginPeriod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT timeBeginPeriod(UINT uPeriod)
     * }
     */
    public static MethodHandle timeBeginPeriod$handle() {
        return timeBeginPeriod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT timeBeginPeriod(UINT uPeriod)
     * }
     */
    public static MemorySegment timeBeginPeriod$address() {
        return timeBeginPeriod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT timeBeginPeriod(UINT uPeriod)
     * }
     */
    public static int timeBeginPeriod(int uPeriod) {
        var mh$ = timeBeginPeriod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("timeBeginPeriod", uPeriod);
            }
            return (int)mh$.invokeExact(uPeriod);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class timeEndPeriod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("timeEndPeriod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT timeEndPeriod(UINT uPeriod)
     * }
     */
    public static FunctionDescriptor timeEndPeriod$descriptor() {
        return timeEndPeriod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT timeEndPeriod(UINT uPeriod)
     * }
     */
    public static MethodHandle timeEndPeriod$handle() {
        return timeEndPeriod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT timeEndPeriod(UINT uPeriod)
     * }
     */
    public static MemorySegment timeEndPeriod$address() {
        return timeEndPeriod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT timeEndPeriod(UINT uPeriod)
     * }
     */
    public static int timeEndPeriod(int uPeriod) {
        var mh$ = timeEndPeriod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("timeEndPeriod", uPeriod);
            }
            return (int)mh$.invokeExact(uPeriod);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagJOYCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     CHAR szPname[32];
     *     UINT wXmin;
     *     UINT wXmax;
     *     UINT wYmin;
     *     UINT wYmax;
     *     UINT wZmin;
     *     UINT wZmax;
     *     UINT wNumButtons;
     *     UINT wPeriodMin;
     *     UINT wPeriodMax;
     *     UINT wRmin;
     *     UINT wRmax;
     *     UINT wUmin;
     *     UINT wUmax;
     *     UINT wVmin;
     *     UINT wVmax;
     *     UINT wCaps;
     *     UINT wMaxAxes;
     *     UINT wNumAxes;
     *     UINT wMaxButtons;
     *     CHAR szRegKey[32];
     *     CHAR szOEMVxD[260];
     * } *PJOYCAPSA
     * }
     */
    public static final AddressLayout PJOYCAPSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagJOYCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     CHAR szPname[32];
     *     UINT wXmin;
     *     UINT wXmax;
     *     UINT wYmin;
     *     UINT wYmax;
     *     UINT wZmin;
     *     UINT wZmax;
     *     UINT wNumButtons;
     *     UINT wPeriodMin;
     *     UINT wPeriodMax;
     *     UINT wRmin;
     *     UINT wRmax;
     *     UINT wUmin;
     *     UINT wUmax;
     *     UINT wVmin;
     *     UINT wVmax;
     *     UINT wCaps;
     *     UINT wMaxAxes;
     *     UINT wNumAxes;
     *     UINT wMaxButtons;
     *     CHAR szRegKey[32];
     *     CHAR szOEMVxD[260];
     * } *NPJOYCAPSA
     * }
     */
    public static final AddressLayout NPJOYCAPSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagJOYCAPSA {
     *     WORD wMid;
     *     WORD wPid;
     *     CHAR szPname[32];
     *     UINT wXmin;
     *     UINT wXmax;
     *     UINT wYmin;
     *     UINT wYmax;
     *     UINT wZmin;
     *     UINT wZmax;
     *     UINT wNumButtons;
     *     UINT wPeriodMin;
     *     UINT wPeriodMax;
     *     UINT wRmin;
     *     UINT wRmax;
     *     UINT wUmin;
     *     UINT wUmax;
     *     UINT wVmin;
     *     UINT wVmax;
     *     UINT wCaps;
     *     UINT wMaxAxes;
     *     UINT wNumAxes;
     *     UINT wMaxButtons;
     *     CHAR szRegKey[32];
     *     CHAR szOEMVxD[260];
     * } *LPJOYCAPSA
     * }
     */
    public static final AddressLayout LPJOYCAPSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagJOYCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     WCHAR szPname[32];
     *     UINT wXmin;
     *     UINT wXmax;
     *     UINT wYmin;
     *     UINT wYmax;
     *     UINT wZmin;
     *     UINT wZmax;
     *     UINT wNumButtons;
     *     UINT wPeriodMin;
     *     UINT wPeriodMax;
     *     UINT wRmin;
     *     UINT wRmax;
     *     UINT wUmin;
     *     UINT wUmax;
     *     UINT wVmin;
     *     UINT wVmax;
     *     UINT wCaps;
     *     UINT wMaxAxes;
     *     UINT wNumAxes;
     *     UINT wMaxButtons;
     *     WCHAR szRegKey[32];
     *     WCHAR szOEMVxD[260];
     * } *PJOYCAPSW
     * }
     */
    public static final AddressLayout PJOYCAPSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagJOYCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     WCHAR szPname[32];
     *     UINT wXmin;
     *     UINT wXmax;
     *     UINT wYmin;
     *     UINT wYmax;
     *     UINT wZmin;
     *     UINT wZmax;
     *     UINT wNumButtons;
     *     UINT wPeriodMin;
     *     UINT wPeriodMax;
     *     UINT wRmin;
     *     UINT wRmax;
     *     UINT wUmin;
     *     UINT wUmax;
     *     UINT wVmin;
     *     UINT wVmax;
     *     UINT wCaps;
     *     UINT wMaxAxes;
     *     UINT wNumAxes;
     *     UINT wMaxButtons;
     *     WCHAR szRegKey[32];
     *     WCHAR szOEMVxD[260];
     * } *NPJOYCAPSW
     * }
     */
    public static final AddressLayout NPJOYCAPSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagJOYCAPSW {
     *     WORD wMid;
     *     WORD wPid;
     *     WCHAR szPname[32];
     *     UINT wXmin;
     *     UINT wXmax;
     *     UINT wYmin;
     *     UINT wYmax;
     *     UINT wZmin;
     *     UINT wZmax;
     *     UINT wNumButtons;
     *     UINT wPeriodMin;
     *     UINT wPeriodMax;
     *     UINT wRmin;
     *     UINT wRmax;
     *     UINT wUmin;
     *     UINT wUmax;
     *     UINT wVmin;
     *     UINT wVmax;
     *     UINT wCaps;
     *     UINT wMaxAxes;
     *     UINT wNumAxes;
     *     UINT wMaxButtons;
     *     WCHAR szRegKey[32];
     *     WCHAR szOEMVxD[260];
     * } *LPJOYCAPSW
     * }
     */
    public static final AddressLayout LPJOYCAPSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PJOYCAPSA PJOYCAPS
     * }
     */
    public static final AddressLayout PJOYCAPS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef NPJOYCAPSA NPJOYCAPS
     * }
     */
    public static final AddressLayout NPJOYCAPS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPJOYCAPSA LPJOYCAPS
     * }
     */
    public static final AddressLayout LPJOYCAPS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagJOYCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     CHAR szPname[32];
     *     UINT wXmin;
     *     UINT wXmax;
     *     UINT wYmin;
     *     UINT wYmax;
     *     UINT wZmin;
     *     UINT wZmax;
     *     UINT wNumButtons;
     *     UINT wPeriodMin;
     *     UINT wPeriodMax;
     *     UINT wRmin;
     *     UINT wRmax;
     *     UINT wUmin;
     *     UINT wUmax;
     *     UINT wVmin;
     *     UINT wVmax;
     *     UINT wCaps;
     *     UINT wMaxAxes;
     *     UINT wNumAxes;
     *     UINT wMaxButtons;
     *     CHAR szRegKey[32];
     *     CHAR szOEMVxD[260];
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *PJOYCAPS2A
     * }
     */
    public static final AddressLayout PJOYCAPS2A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagJOYCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     CHAR szPname[32];
     *     UINT wXmin;
     *     UINT wXmax;
     *     UINT wYmin;
     *     UINT wYmax;
     *     UINT wZmin;
     *     UINT wZmax;
     *     UINT wNumButtons;
     *     UINT wPeriodMin;
     *     UINT wPeriodMax;
     *     UINT wRmin;
     *     UINT wRmax;
     *     UINT wUmin;
     *     UINT wUmax;
     *     UINT wVmin;
     *     UINT wVmax;
     *     UINT wCaps;
     *     UINT wMaxAxes;
     *     UINT wNumAxes;
     *     UINT wMaxButtons;
     *     CHAR szRegKey[32];
     *     CHAR szOEMVxD[260];
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *NPJOYCAPS2A
     * }
     */
    public static final AddressLayout NPJOYCAPS2A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagJOYCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     CHAR szPname[32];
     *     UINT wXmin;
     *     UINT wXmax;
     *     UINT wYmin;
     *     UINT wYmax;
     *     UINT wZmin;
     *     UINT wZmax;
     *     UINT wNumButtons;
     *     UINT wPeriodMin;
     *     UINT wPeriodMax;
     *     UINT wRmin;
     *     UINT wRmax;
     *     UINT wUmin;
     *     UINT wUmax;
     *     UINT wVmin;
     *     UINT wVmax;
     *     UINT wCaps;
     *     UINT wMaxAxes;
     *     UINT wNumAxes;
     *     UINT wMaxButtons;
     *     CHAR szRegKey[32];
     *     CHAR szOEMVxD[260];
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *LPJOYCAPS2A
     * }
     */
    public static final AddressLayout LPJOYCAPS2A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagJOYCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     WCHAR szPname[32];
     *     UINT wXmin;
     *     UINT wXmax;
     *     UINT wYmin;
     *     UINT wYmax;
     *     UINT wZmin;
     *     UINT wZmax;
     *     UINT wNumButtons;
     *     UINT wPeriodMin;
     *     UINT wPeriodMax;
     *     UINT wRmin;
     *     UINT wRmax;
     *     UINT wUmin;
     *     UINT wUmax;
     *     UINT wVmin;
     *     UINT wVmax;
     *     UINT wCaps;
     *     UINT wMaxAxes;
     *     UINT wNumAxes;
     *     UINT wMaxButtons;
     *     WCHAR szRegKey[32];
     *     WCHAR szOEMVxD[260];
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *PJOYCAPS2W
     * }
     */
    public static final AddressLayout PJOYCAPS2W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagJOYCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     WCHAR szPname[32];
     *     UINT wXmin;
     *     UINT wXmax;
     *     UINT wYmin;
     *     UINT wYmax;
     *     UINT wZmin;
     *     UINT wZmax;
     *     UINT wNumButtons;
     *     UINT wPeriodMin;
     *     UINT wPeriodMax;
     *     UINT wRmin;
     *     UINT wRmax;
     *     UINT wUmin;
     *     UINT wUmax;
     *     UINT wVmin;
     *     UINT wVmax;
     *     UINT wCaps;
     *     UINT wMaxAxes;
     *     UINT wNumAxes;
     *     UINT wMaxButtons;
     *     WCHAR szRegKey[32];
     *     WCHAR szOEMVxD[260];
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *NPJOYCAPS2W
     * }
     */
    public static final AddressLayout NPJOYCAPS2W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagJOYCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     WCHAR szPname[32];
     *     UINT wXmin;
     *     UINT wXmax;
     *     UINT wYmin;
     *     UINT wYmax;
     *     UINT wZmin;
     *     UINT wZmax;
     *     UINT wNumButtons;
     *     UINT wPeriodMin;
     *     UINT wPeriodMax;
     *     UINT wRmin;
     *     UINT wRmax;
     *     UINT wUmin;
     *     UINT wUmax;
     *     UINT wVmin;
     *     UINT wVmax;
     *     UINT wCaps;
     *     UINT wMaxAxes;
     *     UINT wNumAxes;
     *     UINT wMaxButtons;
     *     WCHAR szRegKey[32];
     *     WCHAR szOEMVxD[260];
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *LPJOYCAPS2W
     * }
     */
    public static final AddressLayout LPJOYCAPS2W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PJOYCAPS2A PJOYCAPS2
     * }
     */
    public static final AddressLayout PJOYCAPS2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef NPJOYCAPS2A NPJOYCAPS2
     * }
     */
    public static final AddressLayout NPJOYCAPS2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPJOYCAPS2A LPJOYCAPS2
     * }
     */
    public static final AddressLayout LPJOYCAPS2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct joyinfo_tag {
     *     UINT wXpos;
     *     UINT wYpos;
     *     UINT wZpos;
     *     UINT wButtons;
     * } *PJOYINFO
     * }
     */
    public static final AddressLayout PJOYINFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct joyinfo_tag {
     *     UINT wXpos;
     *     UINT wYpos;
     *     UINT wZpos;
     *     UINT wButtons;
     * } *NPJOYINFO
     * }
     */
    public static final AddressLayout NPJOYINFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct joyinfo_tag {
     *     UINT wXpos;
     *     UINT wYpos;
     *     UINT wZpos;
     *     UINT wButtons;
     * } *LPJOYINFO
     * }
     */
    public static final AddressLayout LPJOYINFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct joyinfoex_tag {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     DWORD dwXpos;
     *     DWORD dwYpos;
     *     DWORD dwZpos;
     *     DWORD dwRpos;
     *     DWORD dwUpos;
     *     DWORD dwVpos;
     *     DWORD dwButtons;
     *     DWORD dwButtonNumber;
     *     DWORD dwPOV;
     *     DWORD dwReserved1;
     *     DWORD dwReserved2;
     * } *PJOYINFOEX
     * }
     */
    public static final AddressLayout PJOYINFOEX = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct joyinfoex_tag {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     DWORD dwXpos;
     *     DWORD dwYpos;
     *     DWORD dwZpos;
     *     DWORD dwRpos;
     *     DWORD dwUpos;
     *     DWORD dwVpos;
     *     DWORD dwButtons;
     *     DWORD dwButtonNumber;
     *     DWORD dwPOV;
     *     DWORD dwReserved1;
     *     DWORD dwReserved2;
     * } *NPJOYINFOEX
     * }
     */
    public static final AddressLayout NPJOYINFOEX = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct joyinfoex_tag {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     DWORD dwXpos;
     *     DWORD dwYpos;
     *     DWORD dwZpos;
     *     DWORD dwRpos;
     *     DWORD dwUpos;
     *     DWORD dwVpos;
     *     DWORD dwButtons;
     *     DWORD dwButtonNumber;
     *     DWORD dwPOV;
     *     DWORD dwReserved1;
     *     DWORD dwReserved2;
     * } *LPJOYINFOEX
     * }
     */
    public static final AddressLayout LPJOYINFOEX = wgl_h.C_POINTER;

    private static class joyGetPosEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("joyGetPosEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT joyGetPosEx(UINT uJoyID, LPJOYINFOEX pji)
     * }
     */
    public static FunctionDescriptor joyGetPosEx$descriptor() {
        return joyGetPosEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT joyGetPosEx(UINT uJoyID, LPJOYINFOEX pji)
     * }
     */
    public static MethodHandle joyGetPosEx$handle() {
        return joyGetPosEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT joyGetPosEx(UINT uJoyID, LPJOYINFOEX pji)
     * }
     */
    public static MemorySegment joyGetPosEx$address() {
        return joyGetPosEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT joyGetPosEx(UINT uJoyID, LPJOYINFOEX pji)
     * }
     */
    public static int joyGetPosEx(int uJoyID, MemorySegment pji) {
        var mh$ = joyGetPosEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("joyGetPosEx", uJoyID, pji);
            }
            return (int)mh$.invokeExact(uJoyID, pji);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class joyGetNumDevs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("joyGetNumDevs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT joyGetNumDevs()
     * }
     */
    public static FunctionDescriptor joyGetNumDevs$descriptor() {
        return joyGetNumDevs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT joyGetNumDevs()
     * }
     */
    public static MethodHandle joyGetNumDevs$handle() {
        return joyGetNumDevs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * UINT joyGetNumDevs()
     * }
     */
    public static MemorySegment joyGetNumDevs$address() {
        return joyGetNumDevs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * UINT joyGetNumDevs()
     * }
     */
    public static int joyGetNumDevs() {
        var mh$ = joyGetNumDevs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("joyGetNumDevs");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class joyGetDevCapsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("joyGetDevCapsA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT joyGetDevCapsA(UINT_PTR uJoyID, LPJOYCAPSA pjc, UINT cbjc)
     * }
     */
    public static FunctionDescriptor joyGetDevCapsA$descriptor() {
        return joyGetDevCapsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT joyGetDevCapsA(UINT_PTR uJoyID, LPJOYCAPSA pjc, UINT cbjc)
     * }
     */
    public static MethodHandle joyGetDevCapsA$handle() {
        return joyGetDevCapsA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT joyGetDevCapsA(UINT_PTR uJoyID, LPJOYCAPSA pjc, UINT cbjc)
     * }
     */
    public static MemorySegment joyGetDevCapsA$address() {
        return joyGetDevCapsA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT joyGetDevCapsA(UINT_PTR uJoyID, LPJOYCAPSA pjc, UINT cbjc)
     * }
     */
    public static int joyGetDevCapsA(long uJoyID, MemorySegment pjc, int cbjc) {
        var mh$ = joyGetDevCapsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("joyGetDevCapsA", uJoyID, pjc, cbjc);
            }
            return (int)mh$.invokeExact(uJoyID, pjc, cbjc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class joyGetDevCapsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("joyGetDevCapsW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT joyGetDevCapsW(UINT_PTR uJoyID, LPJOYCAPSW pjc, UINT cbjc)
     * }
     */
    public static FunctionDescriptor joyGetDevCapsW$descriptor() {
        return joyGetDevCapsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT joyGetDevCapsW(UINT_PTR uJoyID, LPJOYCAPSW pjc, UINT cbjc)
     * }
     */
    public static MethodHandle joyGetDevCapsW$handle() {
        return joyGetDevCapsW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT joyGetDevCapsW(UINT_PTR uJoyID, LPJOYCAPSW pjc, UINT cbjc)
     * }
     */
    public static MemorySegment joyGetDevCapsW$address() {
        return joyGetDevCapsW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT joyGetDevCapsW(UINT_PTR uJoyID, LPJOYCAPSW pjc, UINT cbjc)
     * }
     */
    public static int joyGetDevCapsW(long uJoyID, MemorySegment pjc, int cbjc) {
        var mh$ = joyGetDevCapsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("joyGetDevCapsW", uJoyID, pjc, cbjc);
            }
            return (int)mh$.invokeExact(uJoyID, pjc, cbjc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class joyGetPos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("joyGetPos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT joyGetPos(UINT uJoyID, LPJOYINFO pji)
     * }
     */
    public static FunctionDescriptor joyGetPos$descriptor() {
        return joyGetPos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT joyGetPos(UINT uJoyID, LPJOYINFO pji)
     * }
     */
    public static MethodHandle joyGetPos$handle() {
        return joyGetPos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT joyGetPos(UINT uJoyID, LPJOYINFO pji)
     * }
     */
    public static MemorySegment joyGetPos$address() {
        return joyGetPos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT joyGetPos(UINT uJoyID, LPJOYINFO pji)
     * }
     */
    public static int joyGetPos(int uJoyID, MemorySegment pji) {
        var mh$ = joyGetPos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("joyGetPos", uJoyID, pji);
            }
            return (int)mh$.invokeExact(uJoyID, pji);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class joyGetThreshold {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("joyGetThreshold");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT joyGetThreshold(UINT uJoyID, LPUINT puThreshold)
     * }
     */
    public static FunctionDescriptor joyGetThreshold$descriptor() {
        return joyGetThreshold.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT joyGetThreshold(UINT uJoyID, LPUINT puThreshold)
     * }
     */
    public static MethodHandle joyGetThreshold$handle() {
        return joyGetThreshold.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT joyGetThreshold(UINT uJoyID, LPUINT puThreshold)
     * }
     */
    public static MemorySegment joyGetThreshold$address() {
        return joyGetThreshold.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT joyGetThreshold(UINT uJoyID, LPUINT puThreshold)
     * }
     */
    public static int joyGetThreshold(int uJoyID, MemorySegment puThreshold) {
        var mh$ = joyGetThreshold.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("joyGetThreshold", uJoyID, puThreshold);
            }
            return (int)mh$.invokeExact(uJoyID, puThreshold);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class joyReleaseCapture {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("joyReleaseCapture");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT joyReleaseCapture(UINT uJoyID)
     * }
     */
    public static FunctionDescriptor joyReleaseCapture$descriptor() {
        return joyReleaseCapture.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT joyReleaseCapture(UINT uJoyID)
     * }
     */
    public static MethodHandle joyReleaseCapture$handle() {
        return joyReleaseCapture.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT joyReleaseCapture(UINT uJoyID)
     * }
     */
    public static MemorySegment joyReleaseCapture$address() {
        return joyReleaseCapture.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT joyReleaseCapture(UINT uJoyID)
     * }
     */
    public static int joyReleaseCapture(int uJoyID) {
        var mh$ = joyReleaseCapture.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("joyReleaseCapture", uJoyID);
            }
            return (int)mh$.invokeExact(uJoyID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class joySetCapture {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("joySetCapture");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT joySetCapture(HWND hwnd, UINT uJoyID, UINT uPeriod, BOOL fChanged)
     * }
     */
    public static FunctionDescriptor joySetCapture$descriptor() {
        return joySetCapture.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT joySetCapture(HWND hwnd, UINT uJoyID, UINT uPeriod, BOOL fChanged)
     * }
     */
    public static MethodHandle joySetCapture$handle() {
        return joySetCapture.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT joySetCapture(HWND hwnd, UINT uJoyID, UINT uPeriod, BOOL fChanged)
     * }
     */
    public static MemorySegment joySetCapture$address() {
        return joySetCapture.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT joySetCapture(HWND hwnd, UINT uJoyID, UINT uPeriod, BOOL fChanged)
     * }
     */
    public static int joySetCapture(MemorySegment hwnd, int uJoyID, int uPeriod, int fChanged) {
        var mh$ = joySetCapture.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("joySetCapture", hwnd, uJoyID, uPeriod, fChanged);
            }
            return (int)mh$.invokeExact(hwnd, uJoyID, uPeriod, fChanged);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class joySetThreshold {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("joySetThreshold");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT joySetThreshold(UINT uJoyID, UINT uThreshold)
     * }
     */
    public static FunctionDescriptor joySetThreshold$descriptor() {
        return joySetThreshold.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT joySetThreshold(UINT uJoyID, UINT uThreshold)
     * }
     */
    public static MethodHandle joySetThreshold$handle() {
        return joySetThreshold.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT joySetThreshold(UINT uJoyID, UINT uThreshold)
     * }
     */
    public static MemorySegment joySetThreshold$address() {
        return joySetThreshold.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT joySetThreshold(UINT uJoyID, UINT uThreshold)
     * }
     */
    public static int joySetThreshold(int uJoyID, int uThreshold) {
        var mh$ = joySetThreshold.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("joySetThreshold", uJoyID, uThreshold);
            }
            return (int)mh$.invokeExact(uJoyID, uThreshold);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class joyConfigChanged {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("joyConfigChanged");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT joyConfigChanged(DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor joyConfigChanged$descriptor() {
        return joyConfigChanged.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT joyConfigChanged(DWORD dwFlags)
     * }
     */
    public static MethodHandle joyConfigChanged$handle() {
        return joyConfigChanged.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT joyConfigChanged(DWORD dwFlags)
     * }
     */
    public static MemorySegment joyConfigChanged$address() {
        return joyConfigChanged.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT joyConfigChanged(DWORD dwFlags)
     * }
     */
    public static int joyConfigChanged(int dwFlags) {
        var mh$ = joyConfigChanged.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("joyConfigChanged", dwFlags);
            }
            return (int)mh$.invokeExact(dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _NCB {
     *     UCHAR ncb_command;
     *     UCHAR ncb_retcode;
     *     UCHAR ncb_lsn;
     *     UCHAR ncb_num;
     *     PUCHAR ncb_buffer;
     *     WORD ncb_length;
     *     UCHAR ncb_callname[16];
     *     UCHAR ncb_name[16];
     *     UCHAR ncb_rto;
     *     UCHAR ncb_sto;
     *     void (*ncb_post)(struct _NCB *) __attribute__((stdcall));
     *     UCHAR ncb_lana_num;
     *     UCHAR ncb_cmd_cplt;
     *     UCHAR ncb_reserve[18];
     *     HANDLE ncb_event;
     * } *PNCB
     * }
     */
    public static final AddressLayout PNCB = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ADAPTER_STATUS {
     *     UCHAR adapter_address[6];
     *     UCHAR rev_major;
     *     UCHAR reserved0;
     *     UCHAR adapter_type;
     *     UCHAR rev_minor;
     *     WORD duration;
     *     WORD frmr_recv;
     *     WORD frmr_xmit;
     *     WORD iframe_recv_err;
     *     WORD xmit_aborts;
     *     DWORD xmit_success;
     *     DWORD recv_success;
     *     WORD iframe_xmit_err;
     *     WORD recv_buff_unavail;
     *     WORD t1_timeouts;
     *     WORD ti_timeouts;
     *     DWORD reserved1;
     *     WORD free_ncbs;
     *     WORD max_cfg_ncbs;
     *     WORD max_ncbs;
     *     WORD xmit_buf_unavail;
     *     WORD max_dgram_size;
     *     WORD pending_sess;
     *     WORD max_cfg_sess;
     *     WORD max_sess;
     *     WORD max_sess_pkt_size;
     *     WORD name_count;
     * } *PADAPTER_STATUS
     * }
     */
    public static final AddressLayout PADAPTER_STATUS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _NAME_BUFFER {
     *     UCHAR name[16];
     *     UCHAR name_num;
     *     UCHAR name_flags;
     * } *PNAME_BUFFER
     * }
     */
    public static final AddressLayout PNAME_BUFFER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SESSION_HEADER {
     *     UCHAR sess_name;
     *     UCHAR num_sess;
     *     UCHAR rcv_dg_outstanding;
     *     UCHAR rcv_any_outstanding;
     * } *PSESSION_HEADER
     * }
     */
    public static final AddressLayout PSESSION_HEADER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SESSION_BUFFER {
     *     UCHAR lsn;
     *     UCHAR state;
     *     UCHAR local_name[16];
     *     UCHAR remote_name[16];
     *     UCHAR rcvs_outstanding;
     *     UCHAR sends_outstanding;
     * } *PSESSION_BUFFER
     * }
     */
    public static final AddressLayout PSESSION_BUFFER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _LANA_ENUM {
     *     UCHAR length;
     *     UCHAR lana[255];
     * } *PLANA_ENUM
     * }
     */
    public static final AddressLayout PLANA_ENUM = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FIND_NAME_HEADER {
     *     WORD node_count;
     *     UCHAR reserved;
     *     UCHAR unique_group;
     * } *PFIND_NAME_HEADER
     * }
     */
    public static final AddressLayout PFIND_NAME_HEADER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FIND_NAME_BUFFER {
     *     UCHAR length;
     *     UCHAR access_control;
     *     UCHAR frame_control;
     *     UCHAR destination_addr[6];
     *     UCHAR source_addr[6];
     *     UCHAR routing_info[18];
     * } *PFIND_NAME_BUFFER
     * }
     */
    public static final AddressLayout PFIND_NAME_BUFFER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ACTION_HEADER {
     *     ULONG transport_id;
     *     USHORT action_code;
     *     USHORT reserved;
     * } *PACTION_HEADER
     * }
     */
    public static final AddressLayout PACTION_HEADER = wgl_h.C_POINTER;

    private static class Netbios {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_CHAR,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("Netbios");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UCHAR Netbios(PNCB pncb)
     * }
     */
    public static FunctionDescriptor Netbios$descriptor() {
        return Netbios.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UCHAR Netbios(PNCB pncb)
     * }
     */
    public static MethodHandle Netbios$handle() {
        return Netbios.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * UCHAR Netbios(PNCB pncb)
     * }
     */
    public static MemorySegment Netbios$address() {
        return Netbios.ADDR;
    }

    /**
     * {@snippet lang=c :
     * UCHAR Netbios(PNCB pncb)
     * }
     */
    public static byte Netbios(MemorySegment pncb) {
        var mh$ = Netbios.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Netbios", pncb);
            }
            return (byte)mh$.invokeExact(pncb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef void *I_RPC_HANDLE
     * }
     */
    public static final AddressLayout I_RPC_HANDLE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef long RPC_STATUS
     * }
     */
    public static final OfInt RPC_STATUS = wgl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char *RPC_CSTR
     * }
     */
    public static final AddressLayout RPC_CSTR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef unsigned short *RPC_WSTR
     * }
     */
    public static final AddressLayout RPC_WSTR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const unsigned short *RPC_CWSTR
     * }
     */
    public static final AddressLayout RPC_CWSTR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef I_RPC_HANDLE RPC_BINDING_HANDLE
     * }
     */
    public static final AddressLayout RPC_BINDING_HANDLE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef RPC_BINDING_HANDLE handle_t
     * }
     */
    public static final AddressLayout handle_t = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef void *RPC_IF_HANDLE
     * }
     */
    public static final AddressLayout RPC_IF_HANDLE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_POLICY {
     *     unsigned int Length;
     *     unsigned long EndpointFlags;
     *     unsigned long NICFlags;
     * } *PRPC_POLICY
     * }
     */
    public static final AddressLayout PRPC_POLICY = wgl_h.C_POINTER;

    private static class RpcBindingCopy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcBindingCopy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingCopy(RPC_BINDING_HANDLE SourceBinding, RPC_BINDING_HANDLE *DestinationBinding)
     * }
     */
    public static FunctionDescriptor RpcBindingCopy$descriptor() {
        return RpcBindingCopy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingCopy(RPC_BINDING_HANDLE SourceBinding, RPC_BINDING_HANDLE *DestinationBinding)
     * }
     */
    public static MethodHandle RpcBindingCopy$handle() {
        return RpcBindingCopy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingCopy(RPC_BINDING_HANDLE SourceBinding, RPC_BINDING_HANDLE *DestinationBinding)
     * }
     */
    public static MemorySegment RpcBindingCopy$address() {
        return RpcBindingCopy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingCopy(RPC_BINDING_HANDLE SourceBinding, RPC_BINDING_HANDLE *DestinationBinding)
     * }
     */
    public static int RpcBindingCopy(MemorySegment SourceBinding, MemorySegment DestinationBinding) {
        var mh$ = RpcBindingCopy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingCopy", SourceBinding, DestinationBinding);
            }
            return (int)mh$.invokeExact(SourceBinding, DestinationBinding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcBindingFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingFree(RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static FunctionDescriptor RpcBindingFree$descriptor() {
        return RpcBindingFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingFree(RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MethodHandle RpcBindingFree$handle() {
        return RpcBindingFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingFree(RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MemorySegment RpcBindingFree$address() {
        return RpcBindingFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingFree(RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static int RpcBindingFree(MemorySegment Binding) {
        var mh$ = RpcBindingFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingFree", Binding);
            }
            return (int)mh$.invokeExact(Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingSetOption {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcBindingSetOption");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetOption(RPC_BINDING_HANDLE hBinding, unsigned long option, ULONG_PTR optionValue)
     * }
     */
    public static FunctionDescriptor RpcBindingSetOption$descriptor() {
        return RpcBindingSetOption.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetOption(RPC_BINDING_HANDLE hBinding, unsigned long option, ULONG_PTR optionValue)
     * }
     */
    public static MethodHandle RpcBindingSetOption$handle() {
        return RpcBindingSetOption.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetOption(RPC_BINDING_HANDLE hBinding, unsigned long option, ULONG_PTR optionValue)
     * }
     */
    public static MemorySegment RpcBindingSetOption$address() {
        return RpcBindingSetOption.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetOption(RPC_BINDING_HANDLE hBinding, unsigned long option, ULONG_PTR optionValue)
     * }
     */
    public static int RpcBindingSetOption(MemorySegment hBinding, int option, long optionValue) {
        var mh$ = RpcBindingSetOption.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingSetOption", hBinding, option, optionValue);
            }
            return (int)mh$.invokeExact(hBinding, option, optionValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingInqOption {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcBindingInqOption");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqOption(RPC_BINDING_HANDLE hBinding, unsigned long option, ULONG_PTR *pOptionValue)
     * }
     */
    public static FunctionDescriptor RpcBindingInqOption$descriptor() {
        return RpcBindingInqOption.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqOption(RPC_BINDING_HANDLE hBinding, unsigned long option, ULONG_PTR *pOptionValue)
     * }
     */
    public static MethodHandle RpcBindingInqOption$handle() {
        return RpcBindingInqOption.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqOption(RPC_BINDING_HANDLE hBinding, unsigned long option, ULONG_PTR *pOptionValue)
     * }
     */
    public static MemorySegment RpcBindingInqOption$address() {
        return RpcBindingInqOption.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqOption(RPC_BINDING_HANDLE hBinding, unsigned long option, ULONG_PTR *pOptionValue)
     * }
     */
    public static int RpcBindingInqOption(MemorySegment hBinding, int option, MemorySegment pOptionValue) {
        var mh$ = RpcBindingInqOption.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingInqOption", hBinding, option, pOptionValue);
            }
            return (int)mh$.invokeExact(hBinding, option, pOptionValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingFromStringBindingA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcBindingFromStringBindingA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingFromStringBindingA(RPC_CSTR StringBinding, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static FunctionDescriptor RpcBindingFromStringBindingA$descriptor() {
        return RpcBindingFromStringBindingA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingFromStringBindingA(RPC_CSTR StringBinding, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MethodHandle RpcBindingFromStringBindingA$handle() {
        return RpcBindingFromStringBindingA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingFromStringBindingA(RPC_CSTR StringBinding, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MemorySegment RpcBindingFromStringBindingA$address() {
        return RpcBindingFromStringBindingA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingFromStringBindingA(RPC_CSTR StringBinding, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static int RpcBindingFromStringBindingA(MemorySegment StringBinding, MemorySegment Binding) {
        var mh$ = RpcBindingFromStringBindingA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingFromStringBindingA", StringBinding, Binding);
            }
            return (int)mh$.invokeExact(StringBinding, Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingFromStringBindingW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcBindingFromStringBindingW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingFromStringBindingW(RPC_WSTR StringBinding, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static FunctionDescriptor RpcBindingFromStringBindingW$descriptor() {
        return RpcBindingFromStringBindingW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingFromStringBindingW(RPC_WSTR StringBinding, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MethodHandle RpcBindingFromStringBindingW$handle() {
        return RpcBindingFromStringBindingW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingFromStringBindingW(RPC_WSTR StringBinding, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MemorySegment RpcBindingFromStringBindingW$address() {
        return RpcBindingFromStringBindingW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingFromStringBindingW(RPC_WSTR StringBinding, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static int RpcBindingFromStringBindingW(MemorySegment StringBinding, MemorySegment Binding) {
        var mh$ = RpcBindingFromStringBindingW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingFromStringBindingW", StringBinding, Binding);
            }
            return (int)mh$.invokeExact(StringBinding, Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcSsGetContextBinding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcSsGetContextBinding");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSsGetContextBinding(void *ContextHandle, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static FunctionDescriptor RpcSsGetContextBinding$descriptor() {
        return RpcSsGetContextBinding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSsGetContextBinding(void *ContextHandle, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MethodHandle RpcSsGetContextBinding$handle() {
        return RpcSsGetContextBinding.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSsGetContextBinding(void *ContextHandle, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MemorySegment RpcSsGetContextBinding$address() {
        return RpcSsGetContextBinding.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcSsGetContextBinding(void *ContextHandle, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static int RpcSsGetContextBinding(MemorySegment ContextHandle, MemorySegment Binding) {
        var mh$ = RpcSsGetContextBinding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcSsGetContextBinding", ContextHandle, Binding);
            }
            return (int)mh$.invokeExact(ContextHandle, Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingInqObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcBindingInqObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqObject(RPC_BINDING_HANDLE Binding, UUID *ObjectUuid)
     * }
     */
    public static FunctionDescriptor RpcBindingInqObject$descriptor() {
        return RpcBindingInqObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqObject(RPC_BINDING_HANDLE Binding, UUID *ObjectUuid)
     * }
     */
    public static MethodHandle RpcBindingInqObject$handle() {
        return RpcBindingInqObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqObject(RPC_BINDING_HANDLE Binding, UUID *ObjectUuid)
     * }
     */
    public static MemorySegment RpcBindingInqObject$address() {
        return RpcBindingInqObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqObject(RPC_BINDING_HANDLE Binding, UUID *ObjectUuid)
     * }
     */
    public static int RpcBindingInqObject(MemorySegment Binding, MemorySegment ObjectUuid) {
        var mh$ = RpcBindingInqObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingInqObject", Binding, ObjectUuid);
            }
            return (int)mh$.invokeExact(Binding, ObjectUuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingReset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcBindingReset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingReset(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static FunctionDescriptor RpcBindingReset$descriptor() {
        return RpcBindingReset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingReset(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static MethodHandle RpcBindingReset$handle() {
        return RpcBindingReset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingReset(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static MemorySegment RpcBindingReset$address() {
        return RpcBindingReset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingReset(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static int RpcBindingReset(MemorySegment Binding) {
        var mh$ = RpcBindingReset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingReset", Binding);
            }
            return (int)mh$.invokeExact(Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingSetObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcBindingSetObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetObject(RPC_BINDING_HANDLE Binding, UUID *ObjectUuid)
     * }
     */
    public static FunctionDescriptor RpcBindingSetObject$descriptor() {
        return RpcBindingSetObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetObject(RPC_BINDING_HANDLE Binding, UUID *ObjectUuid)
     * }
     */
    public static MethodHandle RpcBindingSetObject$handle() {
        return RpcBindingSetObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetObject(RPC_BINDING_HANDLE Binding, UUID *ObjectUuid)
     * }
     */
    public static MemorySegment RpcBindingSetObject$address() {
        return RpcBindingSetObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetObject(RPC_BINDING_HANDLE Binding, UUID *ObjectUuid)
     * }
     */
    public static int RpcBindingSetObject(MemorySegment Binding, MemorySegment ObjectUuid) {
        var mh$ = RpcBindingSetObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingSetObject", Binding, ObjectUuid);
            }
            return (int)mh$.invokeExact(Binding, ObjectUuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtInqDefaultProtectLevel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcMgmtInqDefaultProtectLevel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqDefaultProtectLevel(unsigned long AuthnSvc, unsigned long *AuthnLevel)
     * }
     */
    public static FunctionDescriptor RpcMgmtInqDefaultProtectLevel$descriptor() {
        return RpcMgmtInqDefaultProtectLevel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqDefaultProtectLevel(unsigned long AuthnSvc, unsigned long *AuthnLevel)
     * }
     */
    public static MethodHandle RpcMgmtInqDefaultProtectLevel$handle() {
        return RpcMgmtInqDefaultProtectLevel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqDefaultProtectLevel(unsigned long AuthnSvc, unsigned long *AuthnLevel)
     * }
     */
    public static MemorySegment RpcMgmtInqDefaultProtectLevel$address() {
        return RpcMgmtInqDefaultProtectLevel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqDefaultProtectLevel(unsigned long AuthnSvc, unsigned long *AuthnLevel)
     * }
     */
    public static int RpcMgmtInqDefaultProtectLevel(int AuthnSvc, MemorySegment AuthnLevel) {
        var mh$ = RpcMgmtInqDefaultProtectLevel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtInqDefaultProtectLevel", AuthnSvc, AuthnLevel);
            }
            return (int)mh$.invokeExact(AuthnSvc, AuthnLevel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingToStringBindingA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcBindingToStringBindingA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingToStringBindingA(RPC_BINDING_HANDLE Binding, RPC_CSTR *StringBinding)
     * }
     */
    public static FunctionDescriptor RpcBindingToStringBindingA$descriptor() {
        return RpcBindingToStringBindingA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingToStringBindingA(RPC_BINDING_HANDLE Binding, RPC_CSTR *StringBinding)
     * }
     */
    public static MethodHandle RpcBindingToStringBindingA$handle() {
        return RpcBindingToStringBindingA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingToStringBindingA(RPC_BINDING_HANDLE Binding, RPC_CSTR *StringBinding)
     * }
     */
    public static MemorySegment RpcBindingToStringBindingA$address() {
        return RpcBindingToStringBindingA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingToStringBindingA(RPC_BINDING_HANDLE Binding, RPC_CSTR *StringBinding)
     * }
     */
    public static int RpcBindingToStringBindingA(MemorySegment Binding, MemorySegment StringBinding) {
        var mh$ = RpcBindingToStringBindingA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingToStringBindingA", Binding, StringBinding);
            }
            return (int)mh$.invokeExact(Binding, StringBinding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingToStringBindingW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcBindingToStringBindingW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingToStringBindingW(RPC_BINDING_HANDLE Binding, RPC_WSTR *StringBinding)
     * }
     */
    public static FunctionDescriptor RpcBindingToStringBindingW$descriptor() {
        return RpcBindingToStringBindingW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingToStringBindingW(RPC_BINDING_HANDLE Binding, RPC_WSTR *StringBinding)
     * }
     */
    public static MethodHandle RpcBindingToStringBindingW$handle() {
        return RpcBindingToStringBindingW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingToStringBindingW(RPC_BINDING_HANDLE Binding, RPC_WSTR *StringBinding)
     * }
     */
    public static MemorySegment RpcBindingToStringBindingW$address() {
        return RpcBindingToStringBindingW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingToStringBindingW(RPC_BINDING_HANDLE Binding, RPC_WSTR *StringBinding)
     * }
     */
    public static int RpcBindingToStringBindingW(MemorySegment Binding, MemorySegment StringBinding) {
        var mh$ = RpcBindingToStringBindingW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingToStringBindingW", Binding, StringBinding);
            }
            return (int)mh$.invokeExact(Binding, StringBinding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingVectorFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcBindingVectorFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingVectorFree(RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static FunctionDescriptor RpcBindingVectorFree$descriptor() {
        return RpcBindingVectorFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingVectorFree(RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static MethodHandle RpcBindingVectorFree$handle() {
        return RpcBindingVectorFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingVectorFree(RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static MemorySegment RpcBindingVectorFree$address() {
        return RpcBindingVectorFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingVectorFree(RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static int RpcBindingVectorFree(MemorySegment BindingVector) {
        var mh$ = RpcBindingVectorFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingVectorFree", BindingVector);
            }
            return (int)mh$.invokeExact(BindingVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcStringBindingComposeA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcStringBindingComposeA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingComposeA(RPC_CSTR ObjUuid, RPC_CSTR ProtSeq, RPC_CSTR NetworkAddr, RPC_CSTR Endpoint, RPC_CSTR Options, RPC_CSTR *StringBinding)
     * }
     */
    public static FunctionDescriptor RpcStringBindingComposeA$descriptor() {
        return RpcStringBindingComposeA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingComposeA(RPC_CSTR ObjUuid, RPC_CSTR ProtSeq, RPC_CSTR NetworkAddr, RPC_CSTR Endpoint, RPC_CSTR Options, RPC_CSTR *StringBinding)
     * }
     */
    public static MethodHandle RpcStringBindingComposeA$handle() {
        return RpcStringBindingComposeA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingComposeA(RPC_CSTR ObjUuid, RPC_CSTR ProtSeq, RPC_CSTR NetworkAddr, RPC_CSTR Endpoint, RPC_CSTR Options, RPC_CSTR *StringBinding)
     * }
     */
    public static MemorySegment RpcStringBindingComposeA$address() {
        return RpcStringBindingComposeA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingComposeA(RPC_CSTR ObjUuid, RPC_CSTR ProtSeq, RPC_CSTR NetworkAddr, RPC_CSTR Endpoint, RPC_CSTR Options, RPC_CSTR *StringBinding)
     * }
     */
    public static int RpcStringBindingComposeA(MemorySegment ObjUuid, MemorySegment ProtSeq, MemorySegment NetworkAddr, MemorySegment Endpoint, MemorySegment Options, MemorySegment StringBinding) {
        var mh$ = RpcStringBindingComposeA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcStringBindingComposeA", ObjUuid, ProtSeq, NetworkAddr, Endpoint, Options, StringBinding);
            }
            return (int)mh$.invokeExact(ObjUuid, ProtSeq, NetworkAddr, Endpoint, Options, StringBinding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcStringBindingComposeW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcStringBindingComposeW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingComposeW(RPC_WSTR ObjUuid, RPC_WSTR ProtSeq, RPC_WSTR NetworkAddr, RPC_WSTR Endpoint, RPC_WSTR Options, RPC_WSTR *StringBinding)
     * }
     */
    public static FunctionDescriptor RpcStringBindingComposeW$descriptor() {
        return RpcStringBindingComposeW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingComposeW(RPC_WSTR ObjUuid, RPC_WSTR ProtSeq, RPC_WSTR NetworkAddr, RPC_WSTR Endpoint, RPC_WSTR Options, RPC_WSTR *StringBinding)
     * }
     */
    public static MethodHandle RpcStringBindingComposeW$handle() {
        return RpcStringBindingComposeW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingComposeW(RPC_WSTR ObjUuid, RPC_WSTR ProtSeq, RPC_WSTR NetworkAddr, RPC_WSTR Endpoint, RPC_WSTR Options, RPC_WSTR *StringBinding)
     * }
     */
    public static MemorySegment RpcStringBindingComposeW$address() {
        return RpcStringBindingComposeW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingComposeW(RPC_WSTR ObjUuid, RPC_WSTR ProtSeq, RPC_WSTR NetworkAddr, RPC_WSTR Endpoint, RPC_WSTR Options, RPC_WSTR *StringBinding)
     * }
     */
    public static int RpcStringBindingComposeW(MemorySegment ObjUuid, MemorySegment ProtSeq, MemorySegment NetworkAddr, MemorySegment Endpoint, MemorySegment Options, MemorySegment StringBinding) {
        var mh$ = RpcStringBindingComposeW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcStringBindingComposeW", ObjUuid, ProtSeq, NetworkAddr, Endpoint, Options, StringBinding);
            }
            return (int)mh$.invokeExact(ObjUuid, ProtSeq, NetworkAddr, Endpoint, Options, StringBinding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcStringBindingParseA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcStringBindingParseA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingParseA(RPC_CSTR StringBinding, RPC_CSTR *ObjUuid, RPC_CSTR *Protseq, RPC_CSTR *NetworkAddr, RPC_CSTR *Endpoint, RPC_CSTR *NetworkOptions)
     * }
     */
    public static FunctionDescriptor RpcStringBindingParseA$descriptor() {
        return RpcStringBindingParseA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingParseA(RPC_CSTR StringBinding, RPC_CSTR *ObjUuid, RPC_CSTR *Protseq, RPC_CSTR *NetworkAddr, RPC_CSTR *Endpoint, RPC_CSTR *NetworkOptions)
     * }
     */
    public static MethodHandle RpcStringBindingParseA$handle() {
        return RpcStringBindingParseA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingParseA(RPC_CSTR StringBinding, RPC_CSTR *ObjUuid, RPC_CSTR *Protseq, RPC_CSTR *NetworkAddr, RPC_CSTR *Endpoint, RPC_CSTR *NetworkOptions)
     * }
     */
    public static MemorySegment RpcStringBindingParseA$address() {
        return RpcStringBindingParseA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingParseA(RPC_CSTR StringBinding, RPC_CSTR *ObjUuid, RPC_CSTR *Protseq, RPC_CSTR *NetworkAddr, RPC_CSTR *Endpoint, RPC_CSTR *NetworkOptions)
     * }
     */
    public static int RpcStringBindingParseA(MemorySegment StringBinding, MemorySegment ObjUuid, MemorySegment Protseq, MemorySegment NetworkAddr, MemorySegment Endpoint, MemorySegment NetworkOptions) {
        var mh$ = RpcStringBindingParseA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcStringBindingParseA", StringBinding, ObjUuid, Protseq, NetworkAddr, Endpoint, NetworkOptions);
            }
            return (int)mh$.invokeExact(StringBinding, ObjUuid, Protseq, NetworkAddr, Endpoint, NetworkOptions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcStringBindingParseW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcStringBindingParseW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingParseW(RPC_WSTR StringBinding, RPC_WSTR *ObjUuid, RPC_WSTR *Protseq, RPC_WSTR *NetworkAddr, RPC_WSTR *Endpoint, RPC_WSTR *NetworkOptions)
     * }
     */
    public static FunctionDescriptor RpcStringBindingParseW$descriptor() {
        return RpcStringBindingParseW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingParseW(RPC_WSTR StringBinding, RPC_WSTR *ObjUuid, RPC_WSTR *Protseq, RPC_WSTR *NetworkAddr, RPC_WSTR *Endpoint, RPC_WSTR *NetworkOptions)
     * }
     */
    public static MethodHandle RpcStringBindingParseW$handle() {
        return RpcStringBindingParseW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingParseW(RPC_WSTR StringBinding, RPC_WSTR *ObjUuid, RPC_WSTR *Protseq, RPC_WSTR *NetworkAddr, RPC_WSTR *Endpoint, RPC_WSTR *NetworkOptions)
     * }
     */
    public static MemorySegment RpcStringBindingParseW$address() {
        return RpcStringBindingParseW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingParseW(RPC_WSTR StringBinding, RPC_WSTR *ObjUuid, RPC_WSTR *Protseq, RPC_WSTR *NetworkAddr, RPC_WSTR *Endpoint, RPC_WSTR *NetworkOptions)
     * }
     */
    public static int RpcStringBindingParseW(MemorySegment StringBinding, MemorySegment ObjUuid, MemorySegment Protseq, MemorySegment NetworkAddr, MemorySegment Endpoint, MemorySegment NetworkOptions) {
        var mh$ = RpcStringBindingParseW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcStringBindingParseW", StringBinding, ObjUuid, Protseq, NetworkAddr, Endpoint, NetworkOptions);
            }
            return (int)mh$.invokeExact(StringBinding, ObjUuid, Protseq, NetworkAddr, Endpoint, NetworkOptions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcStringFreeA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcStringFreeA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringFreeA(RPC_CSTR *String)
     * }
     */
    public static FunctionDescriptor RpcStringFreeA$descriptor() {
        return RpcStringFreeA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringFreeA(RPC_CSTR *String)
     * }
     */
    public static MethodHandle RpcStringFreeA$handle() {
        return RpcStringFreeA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringFreeA(RPC_CSTR *String)
     * }
     */
    public static MemorySegment RpcStringFreeA$address() {
        return RpcStringFreeA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcStringFreeA(RPC_CSTR *String)
     * }
     */
    public static int RpcStringFreeA(MemorySegment String_) {
        var mh$ = RpcStringFreeA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcStringFreeA", String_);
            }
            return (int)mh$.invokeExact(String_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcStringFreeW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcStringFreeW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringFreeW(RPC_WSTR *String)
     * }
     */
    public static FunctionDescriptor RpcStringFreeW$descriptor() {
        return RpcStringFreeW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringFreeW(RPC_WSTR *String)
     * }
     */
    public static MethodHandle RpcStringFreeW$handle() {
        return RpcStringFreeW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringFreeW(RPC_WSTR *String)
     * }
     */
    public static MemorySegment RpcStringFreeW$address() {
        return RpcStringFreeW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcStringFreeW(RPC_WSTR *String)
     * }
     */
    public static int RpcStringFreeW(MemorySegment String_) {
        var mh$ = RpcStringFreeW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcStringFreeW", String_);
            }
            return (int)mh$.invokeExact(String_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcIfInqId {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcIfInqId");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcIfInqId(RPC_IF_HANDLE RpcIfHandle, RPC_IF_ID *RpcIfId)
     * }
     */
    public static FunctionDescriptor RpcIfInqId$descriptor() {
        return RpcIfInqId.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcIfInqId(RPC_IF_HANDLE RpcIfHandle, RPC_IF_ID *RpcIfId)
     * }
     */
    public static MethodHandle RpcIfInqId$handle() {
        return RpcIfInqId.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcIfInqId(RPC_IF_HANDLE RpcIfHandle, RPC_IF_ID *RpcIfId)
     * }
     */
    public static MemorySegment RpcIfInqId$address() {
        return RpcIfInqId.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcIfInqId(RPC_IF_HANDLE RpcIfHandle, RPC_IF_ID *RpcIfId)
     * }
     */
    public static int RpcIfInqId(MemorySegment RpcIfHandle, MemorySegment RpcIfId) {
        var mh$ = RpcIfInqId.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcIfInqId", RpcIfHandle, RpcIfId);
            }
            return (int)mh$.invokeExact(RpcIfHandle, RpcIfId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNetworkIsProtseqValidA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNetworkIsProtseqValidA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkIsProtseqValidA(RPC_CSTR Protseq)
     * }
     */
    public static FunctionDescriptor RpcNetworkIsProtseqValidA$descriptor() {
        return RpcNetworkIsProtseqValidA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkIsProtseqValidA(RPC_CSTR Protseq)
     * }
     */
    public static MethodHandle RpcNetworkIsProtseqValidA$handle() {
        return RpcNetworkIsProtseqValidA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkIsProtseqValidA(RPC_CSTR Protseq)
     * }
     */
    public static MemorySegment RpcNetworkIsProtseqValidA$address() {
        return RpcNetworkIsProtseqValidA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkIsProtseqValidA(RPC_CSTR Protseq)
     * }
     */
    public static int RpcNetworkIsProtseqValidA(MemorySegment Protseq) {
        var mh$ = RpcNetworkIsProtseqValidA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNetworkIsProtseqValidA", Protseq);
            }
            return (int)mh$.invokeExact(Protseq);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNetworkIsProtseqValidW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNetworkIsProtseqValidW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkIsProtseqValidW(RPC_WSTR Protseq)
     * }
     */
    public static FunctionDescriptor RpcNetworkIsProtseqValidW$descriptor() {
        return RpcNetworkIsProtseqValidW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkIsProtseqValidW(RPC_WSTR Protseq)
     * }
     */
    public static MethodHandle RpcNetworkIsProtseqValidW$handle() {
        return RpcNetworkIsProtseqValidW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkIsProtseqValidW(RPC_WSTR Protseq)
     * }
     */
    public static MemorySegment RpcNetworkIsProtseqValidW$address() {
        return RpcNetworkIsProtseqValidW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkIsProtseqValidW(RPC_WSTR Protseq)
     * }
     */
    public static int RpcNetworkIsProtseqValidW(MemorySegment Protseq) {
        var mh$ = RpcNetworkIsProtseqValidW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNetworkIsProtseqValidW", Protseq);
            }
            return (int)mh$.invokeExact(Protseq);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtInqComTimeout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcMgmtInqComTimeout");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqComTimeout(RPC_BINDING_HANDLE Binding, unsigned int *Timeout)
     * }
     */
    public static FunctionDescriptor RpcMgmtInqComTimeout$descriptor() {
        return RpcMgmtInqComTimeout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqComTimeout(RPC_BINDING_HANDLE Binding, unsigned int *Timeout)
     * }
     */
    public static MethodHandle RpcMgmtInqComTimeout$handle() {
        return RpcMgmtInqComTimeout.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqComTimeout(RPC_BINDING_HANDLE Binding, unsigned int *Timeout)
     * }
     */
    public static MemorySegment RpcMgmtInqComTimeout$address() {
        return RpcMgmtInqComTimeout.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqComTimeout(RPC_BINDING_HANDLE Binding, unsigned int *Timeout)
     * }
     */
    public static int RpcMgmtInqComTimeout(MemorySegment Binding, MemorySegment Timeout) {
        var mh$ = RpcMgmtInqComTimeout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtInqComTimeout", Binding, Timeout);
            }
            return (int)mh$.invokeExact(Binding, Timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtSetComTimeout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcMgmtSetComTimeout");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetComTimeout(RPC_BINDING_HANDLE Binding, unsigned int Timeout)
     * }
     */
    public static FunctionDescriptor RpcMgmtSetComTimeout$descriptor() {
        return RpcMgmtSetComTimeout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetComTimeout(RPC_BINDING_HANDLE Binding, unsigned int Timeout)
     * }
     */
    public static MethodHandle RpcMgmtSetComTimeout$handle() {
        return RpcMgmtSetComTimeout.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetComTimeout(RPC_BINDING_HANDLE Binding, unsigned int Timeout)
     * }
     */
    public static MemorySegment RpcMgmtSetComTimeout$address() {
        return RpcMgmtSetComTimeout.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetComTimeout(RPC_BINDING_HANDLE Binding, unsigned int Timeout)
     * }
     */
    public static int RpcMgmtSetComTimeout(MemorySegment Binding, int Timeout) {
        var mh$ = RpcMgmtSetComTimeout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtSetComTimeout", Binding, Timeout);
            }
            return (int)mh$.invokeExact(Binding, Timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtSetCancelTimeout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcMgmtSetCancelTimeout");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetCancelTimeout(long Timeout)
     * }
     */
    public static FunctionDescriptor RpcMgmtSetCancelTimeout$descriptor() {
        return RpcMgmtSetCancelTimeout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetCancelTimeout(long Timeout)
     * }
     */
    public static MethodHandle RpcMgmtSetCancelTimeout$handle() {
        return RpcMgmtSetCancelTimeout.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetCancelTimeout(long Timeout)
     * }
     */
    public static MemorySegment RpcMgmtSetCancelTimeout$address() {
        return RpcMgmtSetCancelTimeout.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetCancelTimeout(long Timeout)
     * }
     */
    public static int RpcMgmtSetCancelTimeout(int Timeout) {
        var mh$ = RpcMgmtSetCancelTimeout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtSetCancelTimeout", Timeout);
            }
            return (int)mh$.invokeExact(Timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNetworkInqProtseqsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNetworkInqProtseqsA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkInqProtseqsA(RPC_PROTSEQ_VECTORA **ProtseqVector)
     * }
     */
    public static FunctionDescriptor RpcNetworkInqProtseqsA$descriptor() {
        return RpcNetworkInqProtseqsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkInqProtseqsA(RPC_PROTSEQ_VECTORA **ProtseqVector)
     * }
     */
    public static MethodHandle RpcNetworkInqProtseqsA$handle() {
        return RpcNetworkInqProtseqsA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkInqProtseqsA(RPC_PROTSEQ_VECTORA **ProtseqVector)
     * }
     */
    public static MemorySegment RpcNetworkInqProtseqsA$address() {
        return RpcNetworkInqProtseqsA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkInqProtseqsA(RPC_PROTSEQ_VECTORA **ProtseqVector)
     * }
     */
    public static int RpcNetworkInqProtseqsA(MemorySegment ProtseqVector) {
        var mh$ = RpcNetworkInqProtseqsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNetworkInqProtseqsA", ProtseqVector);
            }
            return (int)mh$.invokeExact(ProtseqVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNetworkInqProtseqsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNetworkInqProtseqsW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkInqProtseqsW(RPC_PROTSEQ_VECTORW **ProtseqVector)
     * }
     */
    public static FunctionDescriptor RpcNetworkInqProtseqsW$descriptor() {
        return RpcNetworkInqProtseqsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkInqProtseqsW(RPC_PROTSEQ_VECTORW **ProtseqVector)
     * }
     */
    public static MethodHandle RpcNetworkInqProtseqsW$handle() {
        return RpcNetworkInqProtseqsW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkInqProtseqsW(RPC_PROTSEQ_VECTORW **ProtseqVector)
     * }
     */
    public static MemorySegment RpcNetworkInqProtseqsW$address() {
        return RpcNetworkInqProtseqsW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkInqProtseqsW(RPC_PROTSEQ_VECTORW **ProtseqVector)
     * }
     */
    public static int RpcNetworkInqProtseqsW(MemorySegment ProtseqVector) {
        var mh$ = RpcNetworkInqProtseqsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNetworkInqProtseqsW", ProtseqVector);
            }
            return (int)mh$.invokeExact(ProtseqVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcObjectInqType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcObjectInqType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcObjectInqType(UUID *ObjUuid, UUID *TypeUuid)
     * }
     */
    public static FunctionDescriptor RpcObjectInqType$descriptor() {
        return RpcObjectInqType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcObjectInqType(UUID *ObjUuid, UUID *TypeUuid)
     * }
     */
    public static MethodHandle RpcObjectInqType$handle() {
        return RpcObjectInqType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcObjectInqType(UUID *ObjUuid, UUID *TypeUuid)
     * }
     */
    public static MemorySegment RpcObjectInqType$address() {
        return RpcObjectInqType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcObjectInqType(UUID *ObjUuid, UUID *TypeUuid)
     * }
     */
    public static int RpcObjectInqType(MemorySegment ObjUuid, MemorySegment TypeUuid) {
        var mh$ = RpcObjectInqType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcObjectInqType", ObjUuid, TypeUuid);
            }
            return (int)mh$.invokeExact(ObjUuid, TypeUuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcObjectSetInqFn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcObjectSetInqFn");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcObjectSetInqFn(RPC_OBJECT_INQ_FN *InquiryFn)
     * }
     */
    public static FunctionDescriptor RpcObjectSetInqFn$descriptor() {
        return RpcObjectSetInqFn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcObjectSetInqFn(RPC_OBJECT_INQ_FN *InquiryFn)
     * }
     */
    public static MethodHandle RpcObjectSetInqFn$handle() {
        return RpcObjectSetInqFn.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcObjectSetInqFn(RPC_OBJECT_INQ_FN *InquiryFn)
     * }
     */
    public static MemorySegment RpcObjectSetInqFn$address() {
        return RpcObjectSetInqFn.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcObjectSetInqFn(RPC_OBJECT_INQ_FN *InquiryFn)
     * }
     */
    public static int RpcObjectSetInqFn(MemorySegment InquiryFn) {
        var mh$ = RpcObjectSetInqFn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcObjectSetInqFn", InquiryFn);
            }
            return (int)mh$.invokeExact(InquiryFn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcObjectSetType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcObjectSetType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcObjectSetType(UUID *ObjUuid, UUID *TypeUuid)
     * }
     */
    public static FunctionDescriptor RpcObjectSetType$descriptor() {
        return RpcObjectSetType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcObjectSetType(UUID *ObjUuid, UUID *TypeUuid)
     * }
     */
    public static MethodHandle RpcObjectSetType$handle() {
        return RpcObjectSetType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcObjectSetType(UUID *ObjUuid, UUID *TypeUuid)
     * }
     */
    public static MemorySegment RpcObjectSetType$address() {
        return RpcObjectSetType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcObjectSetType(UUID *ObjUuid, UUID *TypeUuid)
     * }
     */
    public static int RpcObjectSetType(MemorySegment ObjUuid, MemorySegment TypeUuid) {
        var mh$ = RpcObjectSetType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcObjectSetType", ObjUuid, TypeUuid);
            }
            return (int)mh$.invokeExact(ObjUuid, TypeUuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcProtseqVectorFreeA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcProtseqVectorFreeA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcProtseqVectorFreeA(RPC_PROTSEQ_VECTORA **ProtseqVector)
     * }
     */
    public static FunctionDescriptor RpcProtseqVectorFreeA$descriptor() {
        return RpcProtseqVectorFreeA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcProtseqVectorFreeA(RPC_PROTSEQ_VECTORA **ProtseqVector)
     * }
     */
    public static MethodHandle RpcProtseqVectorFreeA$handle() {
        return RpcProtseqVectorFreeA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcProtseqVectorFreeA(RPC_PROTSEQ_VECTORA **ProtseqVector)
     * }
     */
    public static MemorySegment RpcProtseqVectorFreeA$address() {
        return RpcProtseqVectorFreeA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcProtseqVectorFreeA(RPC_PROTSEQ_VECTORA **ProtseqVector)
     * }
     */
    public static int RpcProtseqVectorFreeA(MemorySegment ProtseqVector) {
        var mh$ = RpcProtseqVectorFreeA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcProtseqVectorFreeA", ProtseqVector);
            }
            return (int)mh$.invokeExact(ProtseqVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcProtseqVectorFreeW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcProtseqVectorFreeW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcProtseqVectorFreeW(RPC_PROTSEQ_VECTORW **ProtseqVector)
     * }
     */
    public static FunctionDescriptor RpcProtseqVectorFreeW$descriptor() {
        return RpcProtseqVectorFreeW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcProtseqVectorFreeW(RPC_PROTSEQ_VECTORW **ProtseqVector)
     * }
     */
    public static MethodHandle RpcProtseqVectorFreeW$handle() {
        return RpcProtseqVectorFreeW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcProtseqVectorFreeW(RPC_PROTSEQ_VECTORW **ProtseqVector)
     * }
     */
    public static MemorySegment RpcProtseqVectorFreeW$address() {
        return RpcProtseqVectorFreeW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcProtseqVectorFreeW(RPC_PROTSEQ_VECTORW **ProtseqVector)
     * }
     */
    public static int RpcProtseqVectorFreeW(MemorySegment ProtseqVector) {
        var mh$ = RpcProtseqVectorFreeW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcProtseqVectorFreeW", ProtseqVector);
            }
            return (int)mh$.invokeExact(ProtseqVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerInqBindings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerInqBindings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqBindings(RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static FunctionDescriptor RpcServerInqBindings$descriptor() {
        return RpcServerInqBindings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqBindings(RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static MethodHandle RpcServerInqBindings$handle() {
        return RpcServerInqBindings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqBindings(RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static MemorySegment RpcServerInqBindings$address() {
        return RpcServerInqBindings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqBindings(RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static int RpcServerInqBindings(MemorySegment BindingVector) {
        var mh$ = RpcServerInqBindings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInqBindings", BindingVector);
            }
            return (int)mh$.invokeExact(BindingVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerInqBindingsEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerInqBindingsEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqBindingsEx(void *SecurityDescriptor, RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static FunctionDescriptor RpcServerInqBindingsEx$descriptor() {
        return RpcServerInqBindingsEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqBindingsEx(void *SecurityDescriptor, RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static MethodHandle RpcServerInqBindingsEx$handle() {
        return RpcServerInqBindingsEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqBindingsEx(void *SecurityDescriptor, RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static MemorySegment RpcServerInqBindingsEx$address() {
        return RpcServerInqBindingsEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqBindingsEx(void *SecurityDescriptor, RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static int RpcServerInqBindingsEx(MemorySegment SecurityDescriptor, MemorySegment BindingVector) {
        var mh$ = RpcServerInqBindingsEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInqBindingsEx", SecurityDescriptor, BindingVector);
            }
            return (int)mh$.invokeExact(SecurityDescriptor, BindingVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerInqIf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerInqIf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void **MgrEpv)
     * }
     */
    public static FunctionDescriptor RpcServerInqIf$descriptor() {
        return RpcServerInqIf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void **MgrEpv)
     * }
     */
    public static MethodHandle RpcServerInqIf$handle() {
        return RpcServerInqIf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void **MgrEpv)
     * }
     */
    public static MemorySegment RpcServerInqIf$address() {
        return RpcServerInqIf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void **MgrEpv)
     * }
     */
    public static int RpcServerInqIf(MemorySegment IfSpec, MemorySegment MgrTypeUuid, MemorySegment MgrEpv) {
        var mh$ = RpcServerInqIf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInqIf", IfSpec, MgrTypeUuid, MgrEpv);
            }
            return (int)mh$.invokeExact(IfSpec, MgrTypeUuid, MgrEpv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerListen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerListen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerListen(unsigned int MinimumCallThreads, unsigned int MaxCalls, unsigned int DontWait)
     * }
     */
    public static FunctionDescriptor RpcServerListen$descriptor() {
        return RpcServerListen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerListen(unsigned int MinimumCallThreads, unsigned int MaxCalls, unsigned int DontWait)
     * }
     */
    public static MethodHandle RpcServerListen$handle() {
        return RpcServerListen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerListen(unsigned int MinimumCallThreads, unsigned int MaxCalls, unsigned int DontWait)
     * }
     */
    public static MemorySegment RpcServerListen$address() {
        return RpcServerListen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerListen(unsigned int MinimumCallThreads, unsigned int MaxCalls, unsigned int DontWait)
     * }
     */
    public static int RpcServerListen(int MinimumCallThreads, int MaxCalls, int DontWait) {
        var mh$ = RpcServerListen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerListen", MinimumCallThreads, MaxCalls, DontWait);
            }
            return (int)mh$.invokeExact(MinimumCallThreads, MaxCalls, DontWait);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerRegisterIf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerRegisterIf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv)
     * }
     */
    public static FunctionDescriptor RpcServerRegisterIf$descriptor() {
        return RpcServerRegisterIf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv)
     * }
     */
    public static MethodHandle RpcServerRegisterIf$handle() {
        return RpcServerRegisterIf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv)
     * }
     */
    public static MemorySegment RpcServerRegisterIf$address() {
        return RpcServerRegisterIf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv)
     * }
     */
    public static int RpcServerRegisterIf(MemorySegment IfSpec, MemorySegment MgrTypeUuid, MemorySegment MgrEpv) {
        var mh$ = RpcServerRegisterIf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerRegisterIf", IfSpec, MgrTypeUuid, MgrEpv);
            }
            return (int)mh$.invokeExact(IfSpec, MgrTypeUuid, MgrEpv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerRegisterIfEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerRegisterIfEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIfEx(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, unsigned int Flags, unsigned int MaxCalls, RPC_IF_CALLBACK_FN *IfCallback)
     * }
     */
    public static FunctionDescriptor RpcServerRegisterIfEx$descriptor() {
        return RpcServerRegisterIfEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIfEx(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, unsigned int Flags, unsigned int MaxCalls, RPC_IF_CALLBACK_FN *IfCallback)
     * }
     */
    public static MethodHandle RpcServerRegisterIfEx$handle() {
        return RpcServerRegisterIfEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIfEx(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, unsigned int Flags, unsigned int MaxCalls, RPC_IF_CALLBACK_FN *IfCallback)
     * }
     */
    public static MemorySegment RpcServerRegisterIfEx$address() {
        return RpcServerRegisterIfEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIfEx(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, unsigned int Flags, unsigned int MaxCalls, RPC_IF_CALLBACK_FN *IfCallback)
     * }
     */
    public static int RpcServerRegisterIfEx(MemorySegment IfSpec, MemorySegment MgrTypeUuid, MemorySegment MgrEpv, int Flags, int MaxCalls, MemorySegment IfCallback) {
        var mh$ = RpcServerRegisterIfEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerRegisterIfEx", IfSpec, MgrTypeUuid, MgrEpv, Flags, MaxCalls, IfCallback);
            }
            return (int)mh$.invokeExact(IfSpec, MgrTypeUuid, MgrEpv, Flags, MaxCalls, IfCallback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerRegisterIf2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerRegisterIf2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIf2(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, unsigned int Flags, unsigned int MaxCalls, unsigned int MaxRpcSize, RPC_IF_CALLBACK_FN *IfCallbackFn)
     * }
     */
    public static FunctionDescriptor RpcServerRegisterIf2$descriptor() {
        return RpcServerRegisterIf2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIf2(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, unsigned int Flags, unsigned int MaxCalls, unsigned int MaxRpcSize, RPC_IF_CALLBACK_FN *IfCallbackFn)
     * }
     */
    public static MethodHandle RpcServerRegisterIf2$handle() {
        return RpcServerRegisterIf2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIf2(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, unsigned int Flags, unsigned int MaxCalls, unsigned int MaxRpcSize, RPC_IF_CALLBACK_FN *IfCallbackFn)
     * }
     */
    public static MemorySegment RpcServerRegisterIf2$address() {
        return RpcServerRegisterIf2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIf2(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, unsigned int Flags, unsigned int MaxCalls, unsigned int MaxRpcSize, RPC_IF_CALLBACK_FN *IfCallbackFn)
     * }
     */
    public static int RpcServerRegisterIf2(MemorySegment IfSpec, MemorySegment MgrTypeUuid, MemorySegment MgrEpv, int Flags, int MaxCalls, int MaxRpcSize, MemorySegment IfCallbackFn) {
        var mh$ = RpcServerRegisterIf2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerRegisterIf2", IfSpec, MgrTypeUuid, MgrEpv, Flags, MaxCalls, MaxRpcSize, IfCallbackFn);
            }
            return (int)mh$.invokeExact(IfSpec, MgrTypeUuid, MgrEpv, Flags, MaxCalls, MaxRpcSize, IfCallbackFn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerRegisterIf3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerRegisterIf3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIf3(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, unsigned int Flags, unsigned int MaxCalls, unsigned int MaxRpcSize, RPC_IF_CALLBACK_FN *IfCallback, void *SecurityDescriptor)
     * }
     */
    public static FunctionDescriptor RpcServerRegisterIf3$descriptor() {
        return RpcServerRegisterIf3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIf3(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, unsigned int Flags, unsigned int MaxCalls, unsigned int MaxRpcSize, RPC_IF_CALLBACK_FN *IfCallback, void *SecurityDescriptor)
     * }
     */
    public static MethodHandle RpcServerRegisterIf3$handle() {
        return RpcServerRegisterIf3.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIf3(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, unsigned int Flags, unsigned int MaxCalls, unsigned int MaxRpcSize, RPC_IF_CALLBACK_FN *IfCallback, void *SecurityDescriptor)
     * }
     */
    public static MemorySegment RpcServerRegisterIf3$address() {
        return RpcServerRegisterIf3.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIf3(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, unsigned int Flags, unsigned int MaxCalls, unsigned int MaxRpcSize, RPC_IF_CALLBACK_FN *IfCallback, void *SecurityDescriptor)
     * }
     */
    public static int RpcServerRegisterIf3(MemorySegment IfSpec, MemorySegment MgrTypeUuid, MemorySegment MgrEpv, int Flags, int MaxCalls, int MaxRpcSize, MemorySegment IfCallback, MemorySegment SecurityDescriptor) {
        var mh$ = RpcServerRegisterIf3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerRegisterIf3", IfSpec, MgrTypeUuid, MgrEpv, Flags, MaxCalls, MaxRpcSize, IfCallback, SecurityDescriptor);
            }
            return (int)mh$.invokeExact(IfSpec, MgrTypeUuid, MgrEpv, Flags, MaxCalls, MaxRpcSize, IfCallback, SecurityDescriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUnregisterIf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerUnregisterIf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUnregisterIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, unsigned int WaitForCallsToComplete)
     * }
     */
    public static FunctionDescriptor RpcServerUnregisterIf$descriptor() {
        return RpcServerUnregisterIf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUnregisterIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, unsigned int WaitForCallsToComplete)
     * }
     */
    public static MethodHandle RpcServerUnregisterIf$handle() {
        return RpcServerUnregisterIf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUnregisterIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, unsigned int WaitForCallsToComplete)
     * }
     */
    public static MemorySegment RpcServerUnregisterIf$address() {
        return RpcServerUnregisterIf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUnregisterIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, unsigned int WaitForCallsToComplete)
     * }
     */
    public static int RpcServerUnregisterIf(MemorySegment IfSpec, MemorySegment MgrTypeUuid, int WaitForCallsToComplete) {
        var mh$ = RpcServerUnregisterIf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUnregisterIf", IfSpec, MgrTypeUuid, WaitForCallsToComplete);
            }
            return (int)mh$.invokeExact(IfSpec, MgrTypeUuid, WaitForCallsToComplete);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUnregisterIfEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerUnregisterIfEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUnregisterIfEx(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, int RundownContextHandles)
     * }
     */
    public static FunctionDescriptor RpcServerUnregisterIfEx$descriptor() {
        return RpcServerUnregisterIfEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUnregisterIfEx(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, int RundownContextHandles)
     * }
     */
    public static MethodHandle RpcServerUnregisterIfEx$handle() {
        return RpcServerUnregisterIfEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUnregisterIfEx(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, int RundownContextHandles)
     * }
     */
    public static MemorySegment RpcServerUnregisterIfEx$address() {
        return RpcServerUnregisterIfEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUnregisterIfEx(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, int RundownContextHandles)
     * }
     */
    public static int RpcServerUnregisterIfEx(MemorySegment IfSpec, MemorySegment MgrTypeUuid, int RundownContextHandles) {
        var mh$ = RpcServerUnregisterIfEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUnregisterIfEx", IfSpec, MgrTypeUuid, RundownContextHandles);
            }
            return (int)mh$.invokeExact(IfSpec, MgrTypeUuid, RundownContextHandles);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseAllProtseqs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerUseAllProtseqs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqs(unsigned int MaxCalls, void *SecurityDescriptor)
     * }
     */
    public static FunctionDescriptor RpcServerUseAllProtseqs$descriptor() {
        return RpcServerUseAllProtseqs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqs(unsigned int MaxCalls, void *SecurityDescriptor)
     * }
     */
    public static MethodHandle RpcServerUseAllProtseqs$handle() {
        return RpcServerUseAllProtseqs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqs(unsigned int MaxCalls, void *SecurityDescriptor)
     * }
     */
    public static MemorySegment RpcServerUseAllProtseqs$address() {
        return RpcServerUseAllProtseqs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqs(unsigned int MaxCalls, void *SecurityDescriptor)
     * }
     */
    public static int RpcServerUseAllProtseqs(int MaxCalls, MemorySegment SecurityDescriptor) {
        var mh$ = RpcServerUseAllProtseqs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseAllProtseqs", MaxCalls, SecurityDescriptor);
            }
            return (int)mh$.invokeExact(MaxCalls, SecurityDescriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseAllProtseqsEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerUseAllProtseqsEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqsEx(unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static FunctionDescriptor RpcServerUseAllProtseqsEx$descriptor() {
        return RpcServerUseAllProtseqsEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqsEx(unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MethodHandle RpcServerUseAllProtseqsEx$handle() {
        return RpcServerUseAllProtseqsEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqsEx(unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MemorySegment RpcServerUseAllProtseqsEx$address() {
        return RpcServerUseAllProtseqsEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqsEx(unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static int RpcServerUseAllProtseqsEx(int MaxCalls, MemorySegment SecurityDescriptor, MemorySegment Policy) {
        var mh$ = RpcServerUseAllProtseqsEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseAllProtseqsEx", MaxCalls, SecurityDescriptor, Policy);
            }
            return (int)mh$.invokeExact(MaxCalls, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseAllProtseqsIf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerUseAllProtseqsIf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqsIf(unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor)
     * }
     */
    public static FunctionDescriptor RpcServerUseAllProtseqsIf$descriptor() {
        return RpcServerUseAllProtseqsIf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqsIf(unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor)
     * }
     */
    public static MethodHandle RpcServerUseAllProtseqsIf$handle() {
        return RpcServerUseAllProtseqsIf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqsIf(unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor)
     * }
     */
    public static MemorySegment RpcServerUseAllProtseqsIf$address() {
        return RpcServerUseAllProtseqsIf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqsIf(unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor)
     * }
     */
    public static int RpcServerUseAllProtseqsIf(int MaxCalls, MemorySegment IfSpec, MemorySegment SecurityDescriptor) {
        var mh$ = RpcServerUseAllProtseqsIf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseAllProtseqsIf", MaxCalls, IfSpec, SecurityDescriptor);
            }
            return (int)mh$.invokeExact(MaxCalls, IfSpec, SecurityDescriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseAllProtseqsIfEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerUseAllProtseqsIfEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqsIfEx(unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static FunctionDescriptor RpcServerUseAllProtseqsIfEx$descriptor() {
        return RpcServerUseAllProtseqsIfEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqsIfEx(unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MethodHandle RpcServerUseAllProtseqsIfEx$handle() {
        return RpcServerUseAllProtseqsIfEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqsIfEx(unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MemorySegment RpcServerUseAllProtseqsIfEx$address() {
        return RpcServerUseAllProtseqsIfEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqsIfEx(unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static int RpcServerUseAllProtseqsIfEx(int MaxCalls, MemorySegment IfSpec, MemorySegment SecurityDescriptor, MemorySegment Policy) {
        var mh$ = RpcServerUseAllProtseqsIfEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseAllProtseqsIfEx", MaxCalls, IfSpec, SecurityDescriptor, Policy);
            }
            return (int)mh$.invokeExact(MaxCalls, IfSpec, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseProtseqA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerUseProtseqA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqA(RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor)
     * }
     */
    public static FunctionDescriptor RpcServerUseProtseqA$descriptor() {
        return RpcServerUseProtseqA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqA(RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor)
     * }
     */
    public static MethodHandle RpcServerUseProtseqA$handle() {
        return RpcServerUseProtseqA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqA(RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor)
     * }
     */
    public static MemorySegment RpcServerUseProtseqA$address() {
        return RpcServerUseProtseqA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqA(RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor)
     * }
     */
    public static int RpcServerUseProtseqA(MemorySegment Protseq, int MaxCalls, MemorySegment SecurityDescriptor) {
        var mh$ = RpcServerUseProtseqA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseProtseqA", Protseq, MaxCalls, SecurityDescriptor);
            }
            return (int)mh$.invokeExact(Protseq, MaxCalls, SecurityDescriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseProtseqExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerUseProtseqExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqExA(RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static FunctionDescriptor RpcServerUseProtseqExA$descriptor() {
        return RpcServerUseProtseqExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqExA(RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MethodHandle RpcServerUseProtseqExA$handle() {
        return RpcServerUseProtseqExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqExA(RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MemorySegment RpcServerUseProtseqExA$address() {
        return RpcServerUseProtseqExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqExA(RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static int RpcServerUseProtseqExA(MemorySegment Protseq, int MaxCalls, MemorySegment SecurityDescriptor, MemorySegment Policy) {
        var mh$ = RpcServerUseProtseqExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseProtseqExA", Protseq, MaxCalls, SecurityDescriptor, Policy);
            }
            return (int)mh$.invokeExact(Protseq, MaxCalls, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseProtseqW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerUseProtseqW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqW(RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor)
     * }
     */
    public static FunctionDescriptor RpcServerUseProtseqW$descriptor() {
        return RpcServerUseProtseqW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqW(RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor)
     * }
     */
    public static MethodHandle RpcServerUseProtseqW$handle() {
        return RpcServerUseProtseqW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqW(RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor)
     * }
     */
    public static MemorySegment RpcServerUseProtseqW$address() {
        return RpcServerUseProtseqW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqW(RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor)
     * }
     */
    public static int RpcServerUseProtseqW(MemorySegment Protseq, int MaxCalls, MemorySegment SecurityDescriptor) {
        var mh$ = RpcServerUseProtseqW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseProtseqW", Protseq, MaxCalls, SecurityDescriptor);
            }
            return (int)mh$.invokeExact(Protseq, MaxCalls, SecurityDescriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseProtseqExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerUseProtseqExW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqExW(RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static FunctionDescriptor RpcServerUseProtseqExW$descriptor() {
        return RpcServerUseProtseqExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqExW(RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MethodHandle RpcServerUseProtseqExW$handle() {
        return RpcServerUseProtseqExW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqExW(RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MemorySegment RpcServerUseProtseqExW$address() {
        return RpcServerUseProtseqExW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqExW(RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static int RpcServerUseProtseqExW(MemorySegment Protseq, int MaxCalls, MemorySegment SecurityDescriptor, MemorySegment Policy) {
        var mh$ = RpcServerUseProtseqExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseProtseqExW", Protseq, MaxCalls, SecurityDescriptor, Policy);
            }
            return (int)mh$.invokeExact(Protseq, MaxCalls, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseProtseqEpA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerUseProtseqEpA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor)
     * }
     */
    public static FunctionDescriptor RpcServerUseProtseqEpA$descriptor() {
        return RpcServerUseProtseqEpA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor)
     * }
     */
    public static MethodHandle RpcServerUseProtseqEpA$handle() {
        return RpcServerUseProtseqEpA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor)
     * }
     */
    public static MemorySegment RpcServerUseProtseqEpA$address() {
        return RpcServerUseProtseqEpA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor)
     * }
     */
    public static int RpcServerUseProtseqEpA(MemorySegment Protseq, int MaxCalls, MemorySegment Endpoint, MemorySegment SecurityDescriptor) {
        var mh$ = RpcServerUseProtseqEpA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseProtseqEpA", Protseq, MaxCalls, Endpoint, SecurityDescriptor);
            }
            return (int)mh$.invokeExact(Protseq, MaxCalls, Endpoint, SecurityDescriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseProtseqEpExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerUseProtseqEpExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpExA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static FunctionDescriptor RpcServerUseProtseqEpExA$descriptor() {
        return RpcServerUseProtseqEpExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpExA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MethodHandle RpcServerUseProtseqEpExA$handle() {
        return RpcServerUseProtseqEpExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpExA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MemorySegment RpcServerUseProtseqEpExA$address() {
        return RpcServerUseProtseqEpExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpExA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static int RpcServerUseProtseqEpExA(MemorySegment Protseq, int MaxCalls, MemorySegment Endpoint, MemorySegment SecurityDescriptor, MemorySegment Policy) {
        var mh$ = RpcServerUseProtseqEpExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseProtseqEpExA", Protseq, MaxCalls, Endpoint, SecurityDescriptor, Policy);
            }
            return (int)mh$.invokeExact(Protseq, MaxCalls, Endpoint, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseProtseqEpW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerUseProtseqEpW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor)
     * }
     */
    public static FunctionDescriptor RpcServerUseProtseqEpW$descriptor() {
        return RpcServerUseProtseqEpW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor)
     * }
     */
    public static MethodHandle RpcServerUseProtseqEpW$handle() {
        return RpcServerUseProtseqEpW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor)
     * }
     */
    public static MemorySegment RpcServerUseProtseqEpW$address() {
        return RpcServerUseProtseqEpW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor)
     * }
     */
    public static int RpcServerUseProtseqEpW(MemorySegment Protseq, int MaxCalls, MemorySegment Endpoint, MemorySegment SecurityDescriptor) {
        var mh$ = RpcServerUseProtseqEpW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseProtseqEpW", Protseq, MaxCalls, Endpoint, SecurityDescriptor);
            }
            return (int)mh$.invokeExact(Protseq, MaxCalls, Endpoint, SecurityDescriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseProtseqEpExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerUseProtseqEpExW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpExW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static FunctionDescriptor RpcServerUseProtseqEpExW$descriptor() {
        return RpcServerUseProtseqEpExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpExW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MethodHandle RpcServerUseProtseqEpExW$handle() {
        return RpcServerUseProtseqEpExW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpExW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MemorySegment RpcServerUseProtseqEpExW$address() {
        return RpcServerUseProtseqEpExW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpExW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static int RpcServerUseProtseqEpExW(MemorySegment Protseq, int MaxCalls, MemorySegment Endpoint, MemorySegment SecurityDescriptor, MemorySegment Policy) {
        var mh$ = RpcServerUseProtseqEpExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseProtseqEpExW", Protseq, MaxCalls, Endpoint, SecurityDescriptor, Policy);
            }
            return (int)mh$.invokeExact(Protseq, MaxCalls, Endpoint, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseProtseqIfA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerUseProtseqIfA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor)
     * }
     */
    public static FunctionDescriptor RpcServerUseProtseqIfA$descriptor() {
        return RpcServerUseProtseqIfA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor)
     * }
     */
    public static MethodHandle RpcServerUseProtseqIfA$handle() {
        return RpcServerUseProtseqIfA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor)
     * }
     */
    public static MemorySegment RpcServerUseProtseqIfA$address() {
        return RpcServerUseProtseqIfA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor)
     * }
     */
    public static int RpcServerUseProtseqIfA(MemorySegment Protseq, int MaxCalls, MemorySegment IfSpec, MemorySegment SecurityDescriptor) {
        var mh$ = RpcServerUseProtseqIfA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseProtseqIfA", Protseq, MaxCalls, IfSpec, SecurityDescriptor);
            }
            return (int)mh$.invokeExact(Protseq, MaxCalls, IfSpec, SecurityDescriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseProtseqIfExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerUseProtseqIfExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfExA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static FunctionDescriptor RpcServerUseProtseqIfExA$descriptor() {
        return RpcServerUseProtseqIfExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfExA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MethodHandle RpcServerUseProtseqIfExA$handle() {
        return RpcServerUseProtseqIfExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfExA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MemorySegment RpcServerUseProtseqIfExA$address() {
        return RpcServerUseProtseqIfExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfExA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static int RpcServerUseProtseqIfExA(MemorySegment Protseq, int MaxCalls, MemorySegment IfSpec, MemorySegment SecurityDescriptor, MemorySegment Policy) {
        var mh$ = RpcServerUseProtseqIfExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseProtseqIfExA", Protseq, MaxCalls, IfSpec, SecurityDescriptor, Policy);
            }
            return (int)mh$.invokeExact(Protseq, MaxCalls, IfSpec, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseProtseqIfW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerUseProtseqIfW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor)
     * }
     */
    public static FunctionDescriptor RpcServerUseProtseqIfW$descriptor() {
        return RpcServerUseProtseqIfW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor)
     * }
     */
    public static MethodHandle RpcServerUseProtseqIfW$handle() {
        return RpcServerUseProtseqIfW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor)
     * }
     */
    public static MemorySegment RpcServerUseProtseqIfW$address() {
        return RpcServerUseProtseqIfW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor)
     * }
     */
    public static int RpcServerUseProtseqIfW(MemorySegment Protseq, int MaxCalls, MemorySegment IfSpec, MemorySegment SecurityDescriptor) {
        var mh$ = RpcServerUseProtseqIfW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseProtseqIfW", Protseq, MaxCalls, IfSpec, SecurityDescriptor);
            }
            return (int)mh$.invokeExact(Protseq, MaxCalls, IfSpec, SecurityDescriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseProtseqIfExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerUseProtseqIfExW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfExW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static FunctionDescriptor RpcServerUseProtseqIfExW$descriptor() {
        return RpcServerUseProtseqIfExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfExW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MethodHandle RpcServerUseProtseqIfExW$handle() {
        return RpcServerUseProtseqIfExW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfExW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MemorySegment RpcServerUseProtseqIfExW$address() {
        return RpcServerUseProtseqIfExW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfExW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static int RpcServerUseProtseqIfExW(MemorySegment Protseq, int MaxCalls, MemorySegment IfSpec, MemorySegment SecurityDescriptor, MemorySegment Policy) {
        var mh$ = RpcServerUseProtseqIfExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseProtseqIfExW", Protseq, MaxCalls, IfSpec, SecurityDescriptor, Policy);
            }
            return (int)mh$.invokeExact(Protseq, MaxCalls, IfSpec, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerYield {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerYield");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void RpcServerYield()
     * }
     */
    public static FunctionDescriptor RpcServerYield$descriptor() {
        return RpcServerYield.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void RpcServerYield()
     * }
     */
    public static MethodHandle RpcServerYield$handle() {
        return RpcServerYield.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void RpcServerYield()
     * }
     */
    public static MemorySegment RpcServerYield$address() {
        return RpcServerYield.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void RpcServerYield()
     * }
     */
    public static void RpcServerYield() {
        var mh$ = RpcServerYield.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerYield");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtStatsVectorFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcMgmtStatsVectorFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtStatsVectorFree(RPC_STATS_VECTOR **StatsVector)
     * }
     */
    public static FunctionDescriptor RpcMgmtStatsVectorFree$descriptor() {
        return RpcMgmtStatsVectorFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtStatsVectorFree(RPC_STATS_VECTOR **StatsVector)
     * }
     */
    public static MethodHandle RpcMgmtStatsVectorFree$handle() {
        return RpcMgmtStatsVectorFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtStatsVectorFree(RPC_STATS_VECTOR **StatsVector)
     * }
     */
    public static MemorySegment RpcMgmtStatsVectorFree$address() {
        return RpcMgmtStatsVectorFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtStatsVectorFree(RPC_STATS_VECTOR **StatsVector)
     * }
     */
    public static int RpcMgmtStatsVectorFree(MemorySegment StatsVector) {
        var mh$ = RpcMgmtStatsVectorFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtStatsVectorFree", StatsVector);
            }
            return (int)mh$.invokeExact(StatsVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtInqStats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcMgmtInqStats");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqStats(RPC_BINDING_HANDLE Binding, RPC_STATS_VECTOR **Statistics)
     * }
     */
    public static FunctionDescriptor RpcMgmtInqStats$descriptor() {
        return RpcMgmtInqStats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqStats(RPC_BINDING_HANDLE Binding, RPC_STATS_VECTOR **Statistics)
     * }
     */
    public static MethodHandle RpcMgmtInqStats$handle() {
        return RpcMgmtInqStats.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqStats(RPC_BINDING_HANDLE Binding, RPC_STATS_VECTOR **Statistics)
     * }
     */
    public static MemorySegment RpcMgmtInqStats$address() {
        return RpcMgmtInqStats.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqStats(RPC_BINDING_HANDLE Binding, RPC_STATS_VECTOR **Statistics)
     * }
     */
    public static int RpcMgmtInqStats(MemorySegment Binding, MemorySegment Statistics) {
        var mh$ = RpcMgmtInqStats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtInqStats", Binding, Statistics);
            }
            return (int)mh$.invokeExact(Binding, Statistics);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtIsServerListening {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcMgmtIsServerListening");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtIsServerListening(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static FunctionDescriptor RpcMgmtIsServerListening$descriptor() {
        return RpcMgmtIsServerListening.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtIsServerListening(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static MethodHandle RpcMgmtIsServerListening$handle() {
        return RpcMgmtIsServerListening.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtIsServerListening(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static MemorySegment RpcMgmtIsServerListening$address() {
        return RpcMgmtIsServerListening.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtIsServerListening(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static int RpcMgmtIsServerListening(MemorySegment Binding) {
        var mh$ = RpcMgmtIsServerListening.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtIsServerListening", Binding);
            }
            return (int)mh$.invokeExact(Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtStopServerListening {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcMgmtStopServerListening");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtStopServerListening(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static FunctionDescriptor RpcMgmtStopServerListening$descriptor() {
        return RpcMgmtStopServerListening.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtStopServerListening(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static MethodHandle RpcMgmtStopServerListening$handle() {
        return RpcMgmtStopServerListening.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtStopServerListening(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static MemorySegment RpcMgmtStopServerListening$address() {
        return RpcMgmtStopServerListening.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtStopServerListening(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static int RpcMgmtStopServerListening(MemorySegment Binding) {
        var mh$ = RpcMgmtStopServerListening.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtStopServerListening", Binding);
            }
            return (int)mh$.invokeExact(Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtWaitServerListen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcMgmtWaitServerListen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtWaitServerListen()
     * }
     */
    public static FunctionDescriptor RpcMgmtWaitServerListen$descriptor() {
        return RpcMgmtWaitServerListen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtWaitServerListen()
     * }
     */
    public static MethodHandle RpcMgmtWaitServerListen$handle() {
        return RpcMgmtWaitServerListen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtWaitServerListen()
     * }
     */
    public static MemorySegment RpcMgmtWaitServerListen$address() {
        return RpcMgmtWaitServerListen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtWaitServerListen()
     * }
     */
    public static int RpcMgmtWaitServerListen() {
        var mh$ = RpcMgmtWaitServerListen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtWaitServerListen");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtSetServerStackSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcMgmtSetServerStackSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetServerStackSize(unsigned long ThreadStackSize)
     * }
     */
    public static FunctionDescriptor RpcMgmtSetServerStackSize$descriptor() {
        return RpcMgmtSetServerStackSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetServerStackSize(unsigned long ThreadStackSize)
     * }
     */
    public static MethodHandle RpcMgmtSetServerStackSize$handle() {
        return RpcMgmtSetServerStackSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetServerStackSize(unsigned long ThreadStackSize)
     * }
     */
    public static MemorySegment RpcMgmtSetServerStackSize$address() {
        return RpcMgmtSetServerStackSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetServerStackSize(unsigned long ThreadStackSize)
     * }
     */
    public static int RpcMgmtSetServerStackSize(int ThreadStackSize) {
        var mh$ = RpcMgmtSetServerStackSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtSetServerStackSize", ThreadStackSize);
            }
            return (int)mh$.invokeExact(ThreadStackSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcSsDontSerializeContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcSsDontSerializeContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void RpcSsDontSerializeContext()
     * }
     */
    public static FunctionDescriptor RpcSsDontSerializeContext$descriptor() {
        return RpcSsDontSerializeContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void RpcSsDontSerializeContext()
     * }
     */
    public static MethodHandle RpcSsDontSerializeContext$handle() {
        return RpcSsDontSerializeContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void RpcSsDontSerializeContext()
     * }
     */
    public static MemorySegment RpcSsDontSerializeContext$address() {
        return RpcSsDontSerializeContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void RpcSsDontSerializeContext()
     * }
     */
    public static void RpcSsDontSerializeContext() {
        var mh$ = RpcSsDontSerializeContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcSsDontSerializeContext");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtEnableIdleCleanup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcMgmtEnableIdleCleanup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEnableIdleCleanup()
     * }
     */
    public static FunctionDescriptor RpcMgmtEnableIdleCleanup$descriptor() {
        return RpcMgmtEnableIdleCleanup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEnableIdleCleanup()
     * }
     */
    public static MethodHandle RpcMgmtEnableIdleCleanup$handle() {
        return RpcMgmtEnableIdleCleanup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEnableIdleCleanup()
     * }
     */
    public static MemorySegment RpcMgmtEnableIdleCleanup$address() {
        return RpcMgmtEnableIdleCleanup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEnableIdleCleanup()
     * }
     */
    public static int RpcMgmtEnableIdleCleanup() {
        var mh$ = RpcMgmtEnableIdleCleanup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtEnableIdleCleanup");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtInqIfIds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcMgmtInqIfIds");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqIfIds(RPC_BINDING_HANDLE Binding, RPC_IF_ID_VECTOR **IfIdVector)
     * }
     */
    public static FunctionDescriptor RpcMgmtInqIfIds$descriptor() {
        return RpcMgmtInqIfIds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqIfIds(RPC_BINDING_HANDLE Binding, RPC_IF_ID_VECTOR **IfIdVector)
     * }
     */
    public static MethodHandle RpcMgmtInqIfIds$handle() {
        return RpcMgmtInqIfIds.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqIfIds(RPC_BINDING_HANDLE Binding, RPC_IF_ID_VECTOR **IfIdVector)
     * }
     */
    public static MemorySegment RpcMgmtInqIfIds$address() {
        return RpcMgmtInqIfIds.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqIfIds(RPC_BINDING_HANDLE Binding, RPC_IF_ID_VECTOR **IfIdVector)
     * }
     */
    public static int RpcMgmtInqIfIds(MemorySegment Binding, MemorySegment IfIdVector) {
        var mh$ = RpcMgmtInqIfIds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtInqIfIds", Binding, IfIdVector);
            }
            return (int)mh$.invokeExact(Binding, IfIdVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcIfIdVectorFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcIfIdVectorFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcIfIdVectorFree(RPC_IF_ID_VECTOR **IfIdVector)
     * }
     */
    public static FunctionDescriptor RpcIfIdVectorFree$descriptor() {
        return RpcIfIdVectorFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcIfIdVectorFree(RPC_IF_ID_VECTOR **IfIdVector)
     * }
     */
    public static MethodHandle RpcIfIdVectorFree$handle() {
        return RpcIfIdVectorFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcIfIdVectorFree(RPC_IF_ID_VECTOR **IfIdVector)
     * }
     */
    public static MemorySegment RpcIfIdVectorFree$address() {
        return RpcIfIdVectorFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcIfIdVectorFree(RPC_IF_ID_VECTOR **IfIdVector)
     * }
     */
    public static int RpcIfIdVectorFree(MemorySegment IfIdVector) {
        var mh$ = RpcIfIdVectorFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcIfIdVectorFree", IfIdVector);
            }
            return (int)mh$.invokeExact(IfIdVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtInqServerPrincNameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcMgmtInqServerPrincNameA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqServerPrincNameA(RPC_BINDING_HANDLE Binding, unsigned long AuthnSvc, RPC_CSTR *ServerPrincName)
     * }
     */
    public static FunctionDescriptor RpcMgmtInqServerPrincNameA$descriptor() {
        return RpcMgmtInqServerPrincNameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqServerPrincNameA(RPC_BINDING_HANDLE Binding, unsigned long AuthnSvc, RPC_CSTR *ServerPrincName)
     * }
     */
    public static MethodHandle RpcMgmtInqServerPrincNameA$handle() {
        return RpcMgmtInqServerPrincNameA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqServerPrincNameA(RPC_BINDING_HANDLE Binding, unsigned long AuthnSvc, RPC_CSTR *ServerPrincName)
     * }
     */
    public static MemorySegment RpcMgmtInqServerPrincNameA$address() {
        return RpcMgmtInqServerPrincNameA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqServerPrincNameA(RPC_BINDING_HANDLE Binding, unsigned long AuthnSvc, RPC_CSTR *ServerPrincName)
     * }
     */
    public static int RpcMgmtInqServerPrincNameA(MemorySegment Binding, int AuthnSvc, MemorySegment ServerPrincName) {
        var mh$ = RpcMgmtInqServerPrincNameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtInqServerPrincNameA", Binding, AuthnSvc, ServerPrincName);
            }
            return (int)mh$.invokeExact(Binding, AuthnSvc, ServerPrincName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtInqServerPrincNameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcMgmtInqServerPrincNameW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqServerPrincNameW(RPC_BINDING_HANDLE Binding, unsigned long AuthnSvc, RPC_WSTR *ServerPrincName)
     * }
     */
    public static FunctionDescriptor RpcMgmtInqServerPrincNameW$descriptor() {
        return RpcMgmtInqServerPrincNameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqServerPrincNameW(RPC_BINDING_HANDLE Binding, unsigned long AuthnSvc, RPC_WSTR *ServerPrincName)
     * }
     */
    public static MethodHandle RpcMgmtInqServerPrincNameW$handle() {
        return RpcMgmtInqServerPrincNameW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqServerPrincNameW(RPC_BINDING_HANDLE Binding, unsigned long AuthnSvc, RPC_WSTR *ServerPrincName)
     * }
     */
    public static MemorySegment RpcMgmtInqServerPrincNameW$address() {
        return RpcMgmtInqServerPrincNameW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqServerPrincNameW(RPC_BINDING_HANDLE Binding, unsigned long AuthnSvc, RPC_WSTR *ServerPrincName)
     * }
     */
    public static int RpcMgmtInqServerPrincNameW(MemorySegment Binding, int AuthnSvc, MemorySegment ServerPrincName) {
        var mh$ = RpcMgmtInqServerPrincNameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtInqServerPrincNameW", Binding, AuthnSvc, ServerPrincName);
            }
            return (int)mh$.invokeExact(Binding, AuthnSvc, ServerPrincName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerInqDefaultPrincNameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerInqDefaultPrincNameA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqDefaultPrincNameA(unsigned long AuthnSvc, RPC_CSTR *PrincName)
     * }
     */
    public static FunctionDescriptor RpcServerInqDefaultPrincNameA$descriptor() {
        return RpcServerInqDefaultPrincNameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqDefaultPrincNameA(unsigned long AuthnSvc, RPC_CSTR *PrincName)
     * }
     */
    public static MethodHandle RpcServerInqDefaultPrincNameA$handle() {
        return RpcServerInqDefaultPrincNameA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqDefaultPrincNameA(unsigned long AuthnSvc, RPC_CSTR *PrincName)
     * }
     */
    public static MemorySegment RpcServerInqDefaultPrincNameA$address() {
        return RpcServerInqDefaultPrincNameA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqDefaultPrincNameA(unsigned long AuthnSvc, RPC_CSTR *PrincName)
     * }
     */
    public static int RpcServerInqDefaultPrincNameA(int AuthnSvc, MemorySegment PrincName) {
        var mh$ = RpcServerInqDefaultPrincNameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInqDefaultPrincNameA", AuthnSvc, PrincName);
            }
            return (int)mh$.invokeExact(AuthnSvc, PrincName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerInqDefaultPrincNameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerInqDefaultPrincNameW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqDefaultPrincNameW(unsigned long AuthnSvc, RPC_WSTR *PrincName)
     * }
     */
    public static FunctionDescriptor RpcServerInqDefaultPrincNameW$descriptor() {
        return RpcServerInqDefaultPrincNameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqDefaultPrincNameW(unsigned long AuthnSvc, RPC_WSTR *PrincName)
     * }
     */
    public static MethodHandle RpcServerInqDefaultPrincNameW$handle() {
        return RpcServerInqDefaultPrincNameW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqDefaultPrincNameW(unsigned long AuthnSvc, RPC_WSTR *PrincName)
     * }
     */
    public static MemorySegment RpcServerInqDefaultPrincNameW$address() {
        return RpcServerInqDefaultPrincNameW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqDefaultPrincNameW(unsigned long AuthnSvc, RPC_WSTR *PrincName)
     * }
     */
    public static int RpcServerInqDefaultPrincNameW(int AuthnSvc, MemorySegment PrincName) {
        var mh$ = RpcServerInqDefaultPrincNameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInqDefaultPrincNameW", AuthnSvc, PrincName);
            }
            return (int)mh$.invokeExact(AuthnSvc, PrincName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcEpResolveBinding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcEpResolveBinding");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpResolveBinding(RPC_BINDING_HANDLE Binding, RPC_IF_HANDLE IfSpec)
     * }
     */
    public static FunctionDescriptor RpcEpResolveBinding$descriptor() {
        return RpcEpResolveBinding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpResolveBinding(RPC_BINDING_HANDLE Binding, RPC_IF_HANDLE IfSpec)
     * }
     */
    public static MethodHandle RpcEpResolveBinding$handle() {
        return RpcEpResolveBinding.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpResolveBinding(RPC_BINDING_HANDLE Binding, RPC_IF_HANDLE IfSpec)
     * }
     */
    public static MemorySegment RpcEpResolveBinding$address() {
        return RpcEpResolveBinding.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcEpResolveBinding(RPC_BINDING_HANDLE Binding, RPC_IF_HANDLE IfSpec)
     * }
     */
    public static int RpcEpResolveBinding(MemorySegment Binding, MemorySegment IfSpec) {
        var mh$ = RpcEpResolveBinding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcEpResolveBinding", Binding, IfSpec);
            }
            return (int)mh$.invokeExact(Binding, IfSpec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingInqEntryNameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsBindingInqEntryNameA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingInqEntryNameA(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_CSTR *EntryName)
     * }
     */
    public static FunctionDescriptor RpcNsBindingInqEntryNameA$descriptor() {
        return RpcNsBindingInqEntryNameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingInqEntryNameA(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_CSTR *EntryName)
     * }
     */
    public static MethodHandle RpcNsBindingInqEntryNameA$handle() {
        return RpcNsBindingInqEntryNameA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingInqEntryNameA(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_CSTR *EntryName)
     * }
     */
    public static MemorySegment RpcNsBindingInqEntryNameA$address() {
        return RpcNsBindingInqEntryNameA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingInqEntryNameA(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_CSTR *EntryName)
     * }
     */
    public static int RpcNsBindingInqEntryNameA(MemorySegment Binding, int EntryNameSyntax, MemorySegment EntryName) {
        var mh$ = RpcNsBindingInqEntryNameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingInqEntryNameA", Binding, EntryNameSyntax, EntryName);
            }
            return (int)mh$.invokeExact(Binding, EntryNameSyntax, EntryName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingInqEntryNameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsBindingInqEntryNameW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingInqEntryNameW(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_WSTR *EntryName)
     * }
     */
    public static FunctionDescriptor RpcNsBindingInqEntryNameW$descriptor() {
        return RpcNsBindingInqEntryNameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingInqEntryNameW(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_WSTR *EntryName)
     * }
     */
    public static MethodHandle RpcNsBindingInqEntryNameW$handle() {
        return RpcNsBindingInqEntryNameW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingInqEntryNameW(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_WSTR *EntryName)
     * }
     */
    public static MemorySegment RpcNsBindingInqEntryNameW$address() {
        return RpcNsBindingInqEntryNameW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingInqEntryNameW(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_WSTR *EntryName)
     * }
     */
    public static int RpcNsBindingInqEntryNameW(MemorySegment Binding, int EntryNameSyntax, MemorySegment EntryName) {
        var mh$ = RpcNsBindingInqEntryNameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingInqEntryNameW", Binding, EntryNameSyntax, EntryName);
            }
            return (int)mh$.invokeExact(Binding, EntryNameSyntax, EntryName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef void *RPC_AUTH_IDENTITY_HANDLE
     * }
     */
    public static final AddressLayout RPC_AUTH_IDENTITY_HANDLE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef void *RPC_AUTHZ_HANDLE
     * }
     */
    public static final AddressLayout RPC_AUTHZ_HANDLE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_SECURITY_QOS {
     *     unsigned long Version;
     *     unsigned long Capabilities;
     *     unsigned long IdentityTracking;
     *     unsigned long ImpersonationType;
     * } *PRPC_SECURITY_QOS
     * }
     */
    public static final AddressLayout PRPC_SECURITY_QOS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SEC_WINNT_AUTH_IDENTITY_W {
     *     unsigned short *User;
     *     unsigned long UserLength;
     *     unsigned short *Domain;
     *     unsigned long DomainLength;
     *     unsigned short *Password;
     *     unsigned long PasswordLength;
     *     unsigned long Flags;
     * } *PSEC_WINNT_AUTH_IDENTITY_W
     * }
     */
    public static final AddressLayout PSEC_WINNT_AUTH_IDENTITY_W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SEC_WINNT_AUTH_IDENTITY_A {
     *     unsigned char *User;
     *     unsigned long UserLength;
     *     unsigned char *Domain;
     *     unsigned long DomainLength;
     *     unsigned char *Password;
     *     unsigned long PasswordLength;
     *     unsigned long Flags;
     * } *PSEC_WINNT_AUTH_IDENTITY_A
     * }
     */
    public static final AddressLayout PSEC_WINNT_AUTH_IDENTITY_A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_W {
     *     SEC_WINNT_AUTH_IDENTITY_W *TransportCredentials;
     *     unsigned long Flags;
     *     unsigned long AuthenticationTarget;
     *     unsigned long NumberOfAuthnSchemes;
     *     unsigned long *AuthnSchemes;
     *     unsigned short *ServerCertificateSubject;
     * } *PRPC_HTTP_TRANSPORT_CREDENTIALS_W
     * }
     */
    public static final AddressLayout PRPC_HTTP_TRANSPORT_CREDENTIALS_W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_A {
     *     SEC_WINNT_AUTH_IDENTITY_A *TransportCredentials;
     *     unsigned long Flags;
     *     unsigned long AuthenticationTarget;
     *     unsigned long NumberOfAuthnSchemes;
     *     unsigned long *AuthnSchemes;
     *     unsigned char *ServerCertificateSubject;
     * } *PRPC_HTTP_TRANSPORT_CREDENTIALS_A
     * }
     */
    public static final AddressLayout PRPC_HTTP_TRANSPORT_CREDENTIALS_A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W {
     *     SEC_WINNT_AUTH_IDENTITY_W *TransportCredentials;
     *     unsigned long Flags;
     *     unsigned long AuthenticationTarget;
     *     unsigned long NumberOfAuthnSchemes;
     *     unsigned long *AuthnSchemes;
     *     unsigned short *ServerCertificateSubject;
     *     SEC_WINNT_AUTH_IDENTITY_W *ProxyCredentials;
     *     unsigned long NumberOfProxyAuthnSchemes;
     *     unsigned long *ProxyAuthnSchemes;
     * } *PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_W
     * }
     */
    public static final AddressLayout PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A {
     *     SEC_WINNT_AUTH_IDENTITY_A *TransportCredentials;
     *     unsigned long Flags;
     *     unsigned long AuthenticationTarget;
     *     unsigned long NumberOfAuthnSchemes;
     *     unsigned long *AuthnSchemes;
     *     unsigned char *ServerCertificateSubject;
     *     SEC_WINNT_AUTH_IDENTITY_A *ProxyCredentials;
     *     unsigned long NumberOfProxyAuthnSchemes;
     *     unsigned long *ProxyAuthnSchemes;
     * } *PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_A
     * }
     */
    public static final AddressLayout PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W {
     *     RPC_AUTH_IDENTITY_HANDLE TransportCredentials;
     *     unsigned long Flags;
     *     unsigned long AuthenticationTarget;
     *     unsigned long NumberOfAuthnSchemes;
     *     unsigned long *AuthnSchemes;
     *     unsigned short *ServerCertificateSubject;
     *     RPC_AUTH_IDENTITY_HANDLE ProxyCredentials;
     *     unsigned long NumberOfProxyAuthnSchemes;
     *     unsigned long *ProxyAuthnSchemes;
     * } *PRPC_HTTP_TRANSPORT_CREDENTIALS_V3_W
     * }
     */
    public static final AddressLayout PRPC_HTTP_TRANSPORT_CREDENTIALS_V3_W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A {
     *     RPC_AUTH_IDENTITY_HANDLE TransportCredentials;
     *     unsigned long Flags;
     *     unsigned long AuthenticationTarget;
     *     unsigned long NumberOfAuthnSchemes;
     *     unsigned long *AuthnSchemes;
     *     unsigned char *ServerCertificateSubject;
     *     RPC_AUTH_IDENTITY_HANDLE ProxyCredentials;
     *     unsigned long NumberOfProxyAuthnSchemes;
     *     unsigned long *ProxyAuthnSchemes;
     * } *PRPC_HTTP_TRANSPORT_CREDENTIALS_V3_A
     * }
     */
    public static final AddressLayout PRPC_HTTP_TRANSPORT_CREDENTIALS_V3_A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_SECURITY_QOS_V2_W {
     *     unsigned long Version;
     *     unsigned long Capabilities;
     *     unsigned long IdentityTracking;
     *     unsigned long ImpersonationType;
     *     unsigned long AdditionalSecurityInfoType;
     *     union {
     *         RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
     *     } u;
     * } *PRPC_SECURITY_QOS_V2_W
     * }
     */
    public static final AddressLayout PRPC_SECURITY_QOS_V2_W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_SECURITY_QOS_V2_A {
     *     unsigned long Version;
     *     unsigned long Capabilities;
     *     unsigned long IdentityTracking;
     *     unsigned long ImpersonationType;
     *     unsigned long AdditionalSecurityInfoType;
     *     union {
     *         RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
     *     } u;
     * } *PRPC_SECURITY_QOS_V2_A
     * }
     */
    public static final AddressLayout PRPC_SECURITY_QOS_V2_A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_SECURITY_QOS_V3_W {
     *     unsigned long Version;
     *     unsigned long Capabilities;
     *     unsigned long IdentityTracking;
     *     unsigned long ImpersonationType;
     *     unsigned long AdditionalSecurityInfoType;
     *     union {
     *         RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
     *     } u;
     *     void *Sid;
     * } *PRPC_SECURITY_QOS_V3_W
     * }
     */
    public static final AddressLayout PRPC_SECURITY_QOS_V3_W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_SECURITY_QOS_V3_A {
     *     unsigned long Version;
     *     unsigned long Capabilities;
     *     unsigned long IdentityTracking;
     *     unsigned long ImpersonationType;
     *     unsigned long AdditionalSecurityInfoType;
     *     union {
     *         RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
     *     } u;
     *     void *Sid;
     * } *PRPC_SECURITY_QOS_V3_A
     * }
     */
    public static final AddressLayout PRPC_SECURITY_QOS_V3_A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_SECURITY_QOS_V4_W {
     *     unsigned long Version;
     *     unsigned long Capabilities;
     *     unsigned long IdentityTracking;
     *     unsigned long ImpersonationType;
     *     unsigned long AdditionalSecurityInfoType;
     *     union {
     *         RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
     *     } u;
     *     void *Sid;
     *     unsigned int EffectiveOnly;
     * } *PRPC_SECURITY_QOS_V4_W
     * }
     */
    public static final AddressLayout PRPC_SECURITY_QOS_V4_W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_SECURITY_QOS_V4_A {
     *     unsigned long Version;
     *     unsigned long Capabilities;
     *     unsigned long IdentityTracking;
     *     unsigned long ImpersonationType;
     *     unsigned long AdditionalSecurityInfoType;
     *     union {
     *         RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
     *     } u;
     *     void *Sid;
     *     unsigned int EffectiveOnly;
     * } *PRPC_SECURITY_QOS_V4_A
     * }
     */
    public static final AddressLayout PRPC_SECURITY_QOS_V4_A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_SECURITY_QOS_V5_W {
     *     unsigned long Version;
     *     unsigned long Capabilities;
     *     unsigned long IdentityTracking;
     *     unsigned long ImpersonationType;
     *     unsigned long AdditionalSecurityInfoType;
     *     union {
     *         RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
     *     } u;
     *     void *Sid;
     *     unsigned int EffectiveOnly;
     *     void *ServerSecurityDescriptor;
     * } *PRPC_SECURITY_QOS_V5_W
     * }
     */
    public static final AddressLayout PRPC_SECURITY_QOS_V5_W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_SECURITY_QOS_V5_A {
     *     unsigned long Version;
     *     unsigned long Capabilities;
     *     unsigned long IdentityTracking;
     *     unsigned long ImpersonationType;
     *     unsigned long AdditionalSecurityInfoType;
     *     union {
     *         RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
     *     } u;
     *     void *Sid;
     *     unsigned int EffectiveOnly;
     *     void *ServerSecurityDescriptor;
     * } *PRPC_SECURITY_QOS_V5_A
     * }
     */
    public static final AddressLayout PRPC_SECURITY_QOS_V5_A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_BINDING_HANDLE_TEMPLATE_V1_W {
     *     unsigned long Version;
     *     unsigned long Flags;
     *     unsigned long ProtocolSequence;
     *     unsigned short *NetworkAddress;
     *     unsigned short *StringEndpoint;
     *     union {
     *         unsigned short *Reserved;
     *     } u1;
     *     UUID ObjectUuid;
     * } *PRPC_BINDING_HANDLE_TEMPLATE_V1_W
     * }
     */
    public static final AddressLayout PRPC_BINDING_HANDLE_TEMPLATE_V1_W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_BINDING_HANDLE_TEMPLATE_V1_A {
     *     unsigned long Version;
     *     unsigned long Flags;
     *     unsigned long ProtocolSequence;
     *     unsigned char *NetworkAddress;
     *     unsigned char *StringEndpoint;
     *     union {
     *         unsigned char *Reserved;
     *     } u1;
     *     UUID ObjectUuid;
     * } *PRPC_BINDING_HANDLE_TEMPLATE_V1_A
     * }
     */
    public static final AddressLayout PRPC_BINDING_HANDLE_TEMPLATE_V1_A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_BINDING_HANDLE_SECURITY_V1_W {
     *     unsigned long Version;
     *     unsigned short *ServerPrincName;
     *     unsigned long AuthnLevel;
     *     unsigned long AuthnSvc;
     *     SEC_WINNT_AUTH_IDENTITY_W *AuthIdentity;
     *     RPC_SECURITY_QOS *SecurityQos;
     * } *PRPC_BINDING_HANDLE_SECURITY_V1_W
     * }
     */
    public static final AddressLayout PRPC_BINDING_HANDLE_SECURITY_V1_W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_BINDING_HANDLE_SECURITY_V1_A {
     *     unsigned long Version;
     *     unsigned char *ServerPrincName;
     *     unsigned long AuthnLevel;
     *     unsigned long AuthnSvc;
     *     SEC_WINNT_AUTH_IDENTITY_A *AuthIdentity;
     *     RPC_SECURITY_QOS *SecurityQos;
     * } *PRPC_BINDING_HANDLE_SECURITY_V1_A
     * }
     */
    public static final AddressLayout PRPC_BINDING_HANDLE_SECURITY_V1_A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_BINDING_HANDLE_OPTIONS_V1 {
     *     unsigned long Version;
     *     unsigned long Flags;
     *     unsigned long ComTimeout;
     *     unsigned long CallTimeout;
     * } *PRPC_BINDING_HANDLE_OPTIONS_V1
     * }
     */
    public static final AddressLayout PRPC_BINDING_HANDLE_OPTIONS_V1 = wgl_h.C_POINTER;

    private static class RpcBindingCreateA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcBindingCreateA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingCreateA(RPC_BINDING_HANDLE_TEMPLATE_V1_A *Template, RPC_BINDING_HANDLE_SECURITY_V1_A *Security, RPC_BINDING_HANDLE_OPTIONS_V1 *Options, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static FunctionDescriptor RpcBindingCreateA$descriptor() {
        return RpcBindingCreateA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingCreateA(RPC_BINDING_HANDLE_TEMPLATE_V1_A *Template, RPC_BINDING_HANDLE_SECURITY_V1_A *Security, RPC_BINDING_HANDLE_OPTIONS_V1 *Options, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MethodHandle RpcBindingCreateA$handle() {
        return RpcBindingCreateA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingCreateA(RPC_BINDING_HANDLE_TEMPLATE_V1_A *Template, RPC_BINDING_HANDLE_SECURITY_V1_A *Security, RPC_BINDING_HANDLE_OPTIONS_V1 *Options, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MemorySegment RpcBindingCreateA$address() {
        return RpcBindingCreateA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingCreateA(RPC_BINDING_HANDLE_TEMPLATE_V1_A *Template, RPC_BINDING_HANDLE_SECURITY_V1_A *Security, RPC_BINDING_HANDLE_OPTIONS_V1 *Options, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static int RpcBindingCreateA(MemorySegment Template, MemorySegment Security, MemorySegment Options, MemorySegment Binding) {
        var mh$ = RpcBindingCreateA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingCreateA", Template, Security, Options, Binding);
            }
            return (int)mh$.invokeExact(Template, Security, Options, Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingCreateW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcBindingCreateW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingCreateW(RPC_BINDING_HANDLE_TEMPLATE_V1_W *Template, RPC_BINDING_HANDLE_SECURITY_V1_W *Security, RPC_BINDING_HANDLE_OPTIONS_V1 *Options, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static FunctionDescriptor RpcBindingCreateW$descriptor() {
        return RpcBindingCreateW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingCreateW(RPC_BINDING_HANDLE_TEMPLATE_V1_W *Template, RPC_BINDING_HANDLE_SECURITY_V1_W *Security, RPC_BINDING_HANDLE_OPTIONS_V1 *Options, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MethodHandle RpcBindingCreateW$handle() {
        return RpcBindingCreateW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingCreateW(RPC_BINDING_HANDLE_TEMPLATE_V1_W *Template, RPC_BINDING_HANDLE_SECURITY_V1_W *Security, RPC_BINDING_HANDLE_OPTIONS_V1 *Options, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MemorySegment RpcBindingCreateW$address() {
        return RpcBindingCreateW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingCreateW(RPC_BINDING_HANDLE_TEMPLATE_V1_W *Template, RPC_BINDING_HANDLE_SECURITY_V1_W *Security, RPC_BINDING_HANDLE_OPTIONS_V1 *Options, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static int RpcBindingCreateW(MemorySegment Template, MemorySegment Security, MemorySegment Options, MemorySegment Binding) {
        var mh$ = RpcBindingCreateW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingCreateW", Template, Security, Options, Binding);
            }
            return (int)mh$.invokeExact(Template, Security, Options, Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingGetTrainingContextHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcBindingGetTrainingContextHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingGetTrainingContextHandle(RPC_BINDING_HANDLE Binding, void **ContextHandle)
     * }
     */
    public static FunctionDescriptor RpcBindingGetTrainingContextHandle$descriptor() {
        return RpcBindingGetTrainingContextHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingGetTrainingContextHandle(RPC_BINDING_HANDLE Binding, void **ContextHandle)
     * }
     */
    public static MethodHandle RpcBindingGetTrainingContextHandle$handle() {
        return RpcBindingGetTrainingContextHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingGetTrainingContextHandle(RPC_BINDING_HANDLE Binding, void **ContextHandle)
     * }
     */
    public static MemorySegment RpcBindingGetTrainingContextHandle$address() {
        return RpcBindingGetTrainingContextHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingGetTrainingContextHandle(RPC_BINDING_HANDLE Binding, void **ContextHandle)
     * }
     */
    public static int RpcBindingGetTrainingContextHandle(MemorySegment Binding, MemorySegment ContextHandle) {
        var mh$ = RpcBindingGetTrainingContextHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingGetTrainingContextHandle", Binding, ContextHandle);
            }
            return (int)mh$.invokeExact(Binding, ContextHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerInqBindingHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerInqBindingHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqBindingHandle(RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static FunctionDescriptor RpcServerInqBindingHandle$descriptor() {
        return RpcServerInqBindingHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqBindingHandle(RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MethodHandle RpcServerInqBindingHandle$handle() {
        return RpcServerInqBindingHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqBindingHandle(RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MemorySegment RpcServerInqBindingHandle$address() {
        return RpcServerInqBindingHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqBindingHandle(RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static int RpcServerInqBindingHandle(MemorySegment Binding) {
        var mh$ = RpcServerInqBindingHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInqBindingHandle", Binding);
            }
            return (int)mh$.invokeExact(Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int RPCHTTP_RS_REDIRECT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _RPC_HTTP_REDIRECTOR_STAGE.RPCHTTP_RS_REDIRECT = 1
     * }
     */
    public static int RPCHTTP_RS_REDIRECT() {
        return RPCHTTP_RS_REDIRECT;
    }
    private static final int RPCHTTP_RS_ACCESS_1 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _RPC_HTTP_REDIRECTOR_STAGE.RPCHTTP_RS_ACCESS_1 = 2
     * }
     */
    public static int RPCHTTP_RS_ACCESS_1() {
        return RPCHTTP_RS_ACCESS_1;
    }
    private static final int RPCHTTP_RS_SESSION = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _RPC_HTTP_REDIRECTOR_STAGE.RPCHTTP_RS_SESSION = 3
     * }
     */
    public static int RPCHTTP_RS_SESSION() {
        return RPCHTTP_RS_SESSION;
    }
    private static final int RPCHTTP_RS_ACCESS_2 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _RPC_HTTP_REDIRECTOR_STAGE.RPCHTTP_RS_ACCESS_2 = 4
     * }
     */
    public static int RPCHTTP_RS_ACCESS_2() {
        return RPCHTTP_RS_ACCESS_2;
    }
    private static final int RPCHTTP_RS_INTERFACE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _RPC_HTTP_REDIRECTOR_STAGE.RPCHTTP_RS_INTERFACE = 5
     * }
     */
    public static int RPCHTTP_RS_INTERFACE() {
        return RPCHTTP_RS_INTERFACE;
    }

    private static class RpcImpersonateClient {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcImpersonateClient");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcImpersonateClient(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static FunctionDescriptor RpcImpersonateClient$descriptor() {
        return RpcImpersonateClient.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcImpersonateClient(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static MethodHandle RpcImpersonateClient$handle() {
        return RpcImpersonateClient.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcImpersonateClient(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static MemorySegment RpcImpersonateClient$address() {
        return RpcImpersonateClient.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcImpersonateClient(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static int RpcImpersonateClient(MemorySegment BindingHandle) {
        var mh$ = RpcImpersonateClient.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcImpersonateClient", BindingHandle);
            }
            return (int)mh$.invokeExact(BindingHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcImpersonateClient2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcImpersonateClient2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcImpersonateClient2(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static FunctionDescriptor RpcImpersonateClient2$descriptor() {
        return RpcImpersonateClient2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcImpersonateClient2(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static MethodHandle RpcImpersonateClient2$handle() {
        return RpcImpersonateClient2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcImpersonateClient2(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static MemorySegment RpcImpersonateClient2$address() {
        return RpcImpersonateClient2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcImpersonateClient2(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static int RpcImpersonateClient2(MemorySegment BindingHandle) {
        var mh$ = RpcImpersonateClient2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcImpersonateClient2", BindingHandle);
            }
            return (int)mh$.invokeExact(BindingHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcRevertToSelfEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcRevertToSelfEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcRevertToSelfEx(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static FunctionDescriptor RpcRevertToSelfEx$descriptor() {
        return RpcRevertToSelfEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcRevertToSelfEx(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static MethodHandle RpcRevertToSelfEx$handle() {
        return RpcRevertToSelfEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcRevertToSelfEx(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static MemorySegment RpcRevertToSelfEx$address() {
        return RpcRevertToSelfEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcRevertToSelfEx(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static int RpcRevertToSelfEx(MemorySegment BindingHandle) {
        var mh$ = RpcRevertToSelfEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcRevertToSelfEx", BindingHandle);
            }
            return (int)mh$.invokeExact(BindingHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcRevertToSelf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcRevertToSelf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcRevertToSelf()
     * }
     */
    public static FunctionDescriptor RpcRevertToSelf$descriptor() {
        return RpcRevertToSelf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcRevertToSelf()
     * }
     */
    public static MethodHandle RpcRevertToSelf$handle() {
        return RpcRevertToSelf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcRevertToSelf()
     * }
     */
    public static MemorySegment RpcRevertToSelf$address() {
        return RpcRevertToSelf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcRevertToSelf()
     * }
     */
    public static int RpcRevertToSelf() {
        var mh$ = RpcRevertToSelf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcRevertToSelf");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcImpersonateClientContainer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcImpersonateClientContainer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcImpersonateClientContainer(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static FunctionDescriptor RpcImpersonateClientContainer$descriptor() {
        return RpcImpersonateClientContainer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcImpersonateClientContainer(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static MethodHandle RpcImpersonateClientContainer$handle() {
        return RpcImpersonateClientContainer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcImpersonateClientContainer(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static MemorySegment RpcImpersonateClientContainer$address() {
        return RpcImpersonateClientContainer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcImpersonateClientContainer(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static int RpcImpersonateClientContainer(MemorySegment BindingHandle) {
        var mh$ = RpcImpersonateClientContainer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcImpersonateClientContainer", BindingHandle);
            }
            return (int)mh$.invokeExact(BindingHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcRevertContainerImpersonation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcRevertContainerImpersonation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcRevertContainerImpersonation()
     * }
     */
    public static FunctionDescriptor RpcRevertContainerImpersonation$descriptor() {
        return RpcRevertContainerImpersonation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcRevertContainerImpersonation()
     * }
     */
    public static MethodHandle RpcRevertContainerImpersonation$handle() {
        return RpcRevertContainerImpersonation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcRevertContainerImpersonation()
     * }
     */
    public static MemorySegment RpcRevertContainerImpersonation$address() {
        return RpcRevertContainerImpersonation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcRevertContainerImpersonation()
     * }
     */
    public static int RpcRevertContainerImpersonation() {
        var mh$ = RpcRevertContainerImpersonation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcRevertContainerImpersonation");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingInqAuthClientA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcBindingInqAuthClientA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientA(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc)
     * }
     */
    public static FunctionDescriptor RpcBindingInqAuthClientA$descriptor() {
        return RpcBindingInqAuthClientA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientA(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc)
     * }
     */
    public static MethodHandle RpcBindingInqAuthClientA$handle() {
        return RpcBindingInqAuthClientA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientA(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc)
     * }
     */
    public static MemorySegment RpcBindingInqAuthClientA$address() {
        return RpcBindingInqAuthClientA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientA(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc)
     * }
     */
    public static int RpcBindingInqAuthClientA(MemorySegment ClientBinding, MemorySegment Privs, MemorySegment ServerPrincName, MemorySegment AuthnLevel, MemorySegment AuthnSvc, MemorySegment AuthzSvc) {
        var mh$ = RpcBindingInqAuthClientA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingInqAuthClientA", ClientBinding, Privs, ServerPrincName, AuthnLevel, AuthnSvc, AuthzSvc);
            }
            return (int)mh$.invokeExact(ClientBinding, Privs, ServerPrincName, AuthnLevel, AuthnSvc, AuthzSvc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingInqAuthClientW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcBindingInqAuthClientW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientW(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc)
     * }
     */
    public static FunctionDescriptor RpcBindingInqAuthClientW$descriptor() {
        return RpcBindingInqAuthClientW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientW(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc)
     * }
     */
    public static MethodHandle RpcBindingInqAuthClientW$handle() {
        return RpcBindingInqAuthClientW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientW(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc)
     * }
     */
    public static MemorySegment RpcBindingInqAuthClientW$address() {
        return RpcBindingInqAuthClientW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientW(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc)
     * }
     */
    public static int RpcBindingInqAuthClientW(MemorySegment ClientBinding, MemorySegment Privs, MemorySegment ServerPrincName, MemorySegment AuthnLevel, MemorySegment AuthnSvc, MemorySegment AuthzSvc) {
        var mh$ = RpcBindingInqAuthClientW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingInqAuthClientW", ClientBinding, Privs, ServerPrincName, AuthnLevel, AuthnSvc, AuthzSvc);
            }
            return (int)mh$.invokeExact(ClientBinding, Privs, ServerPrincName, AuthnLevel, AuthnSvc, AuthzSvc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingInqAuthClientExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcBindingInqAuthClientExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientExA(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc, unsigned long Flags)
     * }
     */
    public static FunctionDescriptor RpcBindingInqAuthClientExA$descriptor() {
        return RpcBindingInqAuthClientExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientExA(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc, unsigned long Flags)
     * }
     */
    public static MethodHandle RpcBindingInqAuthClientExA$handle() {
        return RpcBindingInqAuthClientExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientExA(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc, unsigned long Flags)
     * }
     */
    public static MemorySegment RpcBindingInqAuthClientExA$address() {
        return RpcBindingInqAuthClientExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientExA(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc, unsigned long Flags)
     * }
     */
    public static int RpcBindingInqAuthClientExA(MemorySegment ClientBinding, MemorySegment Privs, MemorySegment ServerPrincName, MemorySegment AuthnLevel, MemorySegment AuthnSvc, MemorySegment AuthzSvc, int Flags) {
        var mh$ = RpcBindingInqAuthClientExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingInqAuthClientExA", ClientBinding, Privs, ServerPrincName, AuthnLevel, AuthnSvc, AuthzSvc, Flags);
            }
            return (int)mh$.invokeExact(ClientBinding, Privs, ServerPrincName, AuthnLevel, AuthnSvc, AuthzSvc, Flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingInqAuthClientExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcBindingInqAuthClientExW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientExW(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc, unsigned long Flags)
     * }
     */
    public static FunctionDescriptor RpcBindingInqAuthClientExW$descriptor() {
        return RpcBindingInqAuthClientExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientExW(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc, unsigned long Flags)
     * }
     */
    public static MethodHandle RpcBindingInqAuthClientExW$handle() {
        return RpcBindingInqAuthClientExW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientExW(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc, unsigned long Flags)
     * }
     */
    public static MemorySegment RpcBindingInqAuthClientExW$address() {
        return RpcBindingInqAuthClientExW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientExW(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc, unsigned long Flags)
     * }
     */
    public static int RpcBindingInqAuthClientExW(MemorySegment ClientBinding, MemorySegment Privs, MemorySegment ServerPrincName, MemorySegment AuthnLevel, MemorySegment AuthnSvc, MemorySegment AuthzSvc, int Flags) {
        var mh$ = RpcBindingInqAuthClientExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingInqAuthClientExW", ClientBinding, Privs, ServerPrincName, AuthnLevel, AuthnSvc, AuthzSvc, Flags);
            }
            return (int)mh$.invokeExact(ClientBinding, Privs, ServerPrincName, AuthnLevel, AuthnSvc, AuthzSvc, Flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingInqAuthInfoA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcBindingInqAuthInfoA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoA(RPC_BINDING_HANDLE Binding, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc)
     * }
     */
    public static FunctionDescriptor RpcBindingInqAuthInfoA$descriptor() {
        return RpcBindingInqAuthInfoA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoA(RPC_BINDING_HANDLE Binding, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc)
     * }
     */
    public static MethodHandle RpcBindingInqAuthInfoA$handle() {
        return RpcBindingInqAuthInfoA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoA(RPC_BINDING_HANDLE Binding, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc)
     * }
     */
    public static MemorySegment RpcBindingInqAuthInfoA$address() {
        return RpcBindingInqAuthInfoA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoA(RPC_BINDING_HANDLE Binding, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc)
     * }
     */
    public static int RpcBindingInqAuthInfoA(MemorySegment Binding, MemorySegment ServerPrincName, MemorySegment AuthnLevel, MemorySegment AuthnSvc, MemorySegment AuthIdentity, MemorySegment AuthzSvc) {
        var mh$ = RpcBindingInqAuthInfoA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingInqAuthInfoA", Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc);
            }
            return (int)mh$.invokeExact(Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingInqAuthInfoW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcBindingInqAuthInfoW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoW(RPC_BINDING_HANDLE Binding, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc)
     * }
     */
    public static FunctionDescriptor RpcBindingInqAuthInfoW$descriptor() {
        return RpcBindingInqAuthInfoW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoW(RPC_BINDING_HANDLE Binding, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc)
     * }
     */
    public static MethodHandle RpcBindingInqAuthInfoW$handle() {
        return RpcBindingInqAuthInfoW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoW(RPC_BINDING_HANDLE Binding, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc)
     * }
     */
    public static MemorySegment RpcBindingInqAuthInfoW$address() {
        return RpcBindingInqAuthInfoW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoW(RPC_BINDING_HANDLE Binding, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc)
     * }
     */
    public static int RpcBindingInqAuthInfoW(MemorySegment Binding, MemorySegment ServerPrincName, MemorySegment AuthnLevel, MemorySegment AuthnSvc, MemorySegment AuthIdentity, MemorySegment AuthzSvc) {
        var mh$ = RpcBindingInqAuthInfoW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingInqAuthInfoW", Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc);
            }
            return (int)mh$.invokeExact(Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingSetAuthInfoA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcBindingSetAuthInfoA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoA(RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc)
     * }
     */
    public static FunctionDescriptor RpcBindingSetAuthInfoA$descriptor() {
        return RpcBindingSetAuthInfoA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoA(RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc)
     * }
     */
    public static MethodHandle RpcBindingSetAuthInfoA$handle() {
        return RpcBindingSetAuthInfoA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoA(RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc)
     * }
     */
    public static MemorySegment RpcBindingSetAuthInfoA$address() {
        return RpcBindingSetAuthInfoA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoA(RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc)
     * }
     */
    public static int RpcBindingSetAuthInfoA(MemorySegment Binding, MemorySegment ServerPrincName, int AuthnLevel, int AuthnSvc, MemorySegment AuthIdentity, int AuthzSvc) {
        var mh$ = RpcBindingSetAuthInfoA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingSetAuthInfoA", Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc);
            }
            return (int)mh$.invokeExact(Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingSetAuthInfoExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcBindingSetAuthInfoExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoExA(RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc, RPC_SECURITY_QOS *SecurityQos)
     * }
     */
    public static FunctionDescriptor RpcBindingSetAuthInfoExA$descriptor() {
        return RpcBindingSetAuthInfoExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoExA(RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc, RPC_SECURITY_QOS *SecurityQos)
     * }
     */
    public static MethodHandle RpcBindingSetAuthInfoExA$handle() {
        return RpcBindingSetAuthInfoExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoExA(RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc, RPC_SECURITY_QOS *SecurityQos)
     * }
     */
    public static MemorySegment RpcBindingSetAuthInfoExA$address() {
        return RpcBindingSetAuthInfoExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoExA(RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc, RPC_SECURITY_QOS *SecurityQos)
     * }
     */
    public static int RpcBindingSetAuthInfoExA(MemorySegment Binding, MemorySegment ServerPrincName, int AuthnLevel, int AuthnSvc, MemorySegment AuthIdentity, int AuthzSvc, MemorySegment SecurityQos) {
        var mh$ = RpcBindingSetAuthInfoExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingSetAuthInfoExA", Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc, SecurityQos);
            }
            return (int)mh$.invokeExact(Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc, SecurityQos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingSetAuthInfoW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcBindingSetAuthInfoW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoW(RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc)
     * }
     */
    public static FunctionDescriptor RpcBindingSetAuthInfoW$descriptor() {
        return RpcBindingSetAuthInfoW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoW(RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc)
     * }
     */
    public static MethodHandle RpcBindingSetAuthInfoW$handle() {
        return RpcBindingSetAuthInfoW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoW(RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc)
     * }
     */
    public static MemorySegment RpcBindingSetAuthInfoW$address() {
        return RpcBindingSetAuthInfoW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoW(RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc)
     * }
     */
    public static int RpcBindingSetAuthInfoW(MemorySegment Binding, MemorySegment ServerPrincName, int AuthnLevel, int AuthnSvc, MemorySegment AuthIdentity, int AuthzSvc) {
        var mh$ = RpcBindingSetAuthInfoW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingSetAuthInfoW", Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc);
            }
            return (int)mh$.invokeExact(Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingSetAuthInfoExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcBindingSetAuthInfoExW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoExW(RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc, RPC_SECURITY_QOS *SecurityQOS)
     * }
     */
    public static FunctionDescriptor RpcBindingSetAuthInfoExW$descriptor() {
        return RpcBindingSetAuthInfoExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoExW(RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc, RPC_SECURITY_QOS *SecurityQOS)
     * }
     */
    public static MethodHandle RpcBindingSetAuthInfoExW$handle() {
        return RpcBindingSetAuthInfoExW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoExW(RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc, RPC_SECURITY_QOS *SecurityQOS)
     * }
     */
    public static MemorySegment RpcBindingSetAuthInfoExW$address() {
        return RpcBindingSetAuthInfoExW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoExW(RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc, RPC_SECURITY_QOS *SecurityQOS)
     * }
     */
    public static int RpcBindingSetAuthInfoExW(MemorySegment Binding, MemorySegment ServerPrincName, int AuthnLevel, int AuthnSvc, MemorySegment AuthIdentity, int AuthzSvc, MemorySegment SecurityQOS) {
        var mh$ = RpcBindingSetAuthInfoExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingSetAuthInfoExW", Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc, SecurityQOS);
            }
            return (int)mh$.invokeExact(Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc, SecurityQOS);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingInqAuthInfoExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcBindingInqAuthInfoExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoExA(RPC_BINDING_HANDLE Binding, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc, unsigned long RpcQosVersion, RPC_SECURITY_QOS *SecurityQOS)
     * }
     */
    public static FunctionDescriptor RpcBindingInqAuthInfoExA$descriptor() {
        return RpcBindingInqAuthInfoExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoExA(RPC_BINDING_HANDLE Binding, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc, unsigned long RpcQosVersion, RPC_SECURITY_QOS *SecurityQOS)
     * }
     */
    public static MethodHandle RpcBindingInqAuthInfoExA$handle() {
        return RpcBindingInqAuthInfoExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoExA(RPC_BINDING_HANDLE Binding, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc, unsigned long RpcQosVersion, RPC_SECURITY_QOS *SecurityQOS)
     * }
     */
    public static MemorySegment RpcBindingInqAuthInfoExA$address() {
        return RpcBindingInqAuthInfoExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoExA(RPC_BINDING_HANDLE Binding, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc, unsigned long RpcQosVersion, RPC_SECURITY_QOS *SecurityQOS)
     * }
     */
    public static int RpcBindingInqAuthInfoExA(MemorySegment Binding, MemorySegment ServerPrincName, MemorySegment AuthnLevel, MemorySegment AuthnSvc, MemorySegment AuthIdentity, MemorySegment AuthzSvc, int RpcQosVersion, MemorySegment SecurityQOS) {
        var mh$ = RpcBindingInqAuthInfoExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingInqAuthInfoExA", Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc, RpcQosVersion, SecurityQOS);
            }
            return (int)mh$.invokeExact(Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc, RpcQosVersion, SecurityQOS);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingInqAuthInfoExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcBindingInqAuthInfoExW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoExW(RPC_BINDING_HANDLE Binding, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc, unsigned long RpcQosVersion, RPC_SECURITY_QOS *SecurityQOS)
     * }
     */
    public static FunctionDescriptor RpcBindingInqAuthInfoExW$descriptor() {
        return RpcBindingInqAuthInfoExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoExW(RPC_BINDING_HANDLE Binding, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc, unsigned long RpcQosVersion, RPC_SECURITY_QOS *SecurityQOS)
     * }
     */
    public static MethodHandle RpcBindingInqAuthInfoExW$handle() {
        return RpcBindingInqAuthInfoExW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoExW(RPC_BINDING_HANDLE Binding, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc, unsigned long RpcQosVersion, RPC_SECURITY_QOS *SecurityQOS)
     * }
     */
    public static MemorySegment RpcBindingInqAuthInfoExW$address() {
        return RpcBindingInqAuthInfoExW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoExW(RPC_BINDING_HANDLE Binding, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc, unsigned long RpcQosVersion, RPC_SECURITY_QOS *SecurityQOS)
     * }
     */
    public static int RpcBindingInqAuthInfoExW(MemorySegment Binding, MemorySegment ServerPrincName, MemorySegment AuthnLevel, MemorySegment AuthnSvc, MemorySegment AuthIdentity, MemorySegment AuthzSvc, int RpcQosVersion, MemorySegment SecurityQOS) {
        var mh$ = RpcBindingInqAuthInfoExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingInqAuthInfoExW", Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc, RpcQosVersion, SecurityQOS);
            }
            return (int)mh$.invokeExact(Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc, RpcQosVersion, SecurityQOS);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerCompleteSecurityCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerCompleteSecurityCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerCompleteSecurityCallback(RPC_BINDING_HANDLE BindingHandle, RPC_STATUS Status)
     * }
     */
    public static FunctionDescriptor RpcServerCompleteSecurityCallback$descriptor() {
        return RpcServerCompleteSecurityCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerCompleteSecurityCallback(RPC_BINDING_HANDLE BindingHandle, RPC_STATUS Status)
     * }
     */
    public static MethodHandle RpcServerCompleteSecurityCallback$handle() {
        return RpcServerCompleteSecurityCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerCompleteSecurityCallback(RPC_BINDING_HANDLE BindingHandle, RPC_STATUS Status)
     * }
     */
    public static MemorySegment RpcServerCompleteSecurityCallback$address() {
        return RpcServerCompleteSecurityCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerCompleteSecurityCallback(RPC_BINDING_HANDLE BindingHandle, RPC_STATUS Status)
     * }
     */
    public static int RpcServerCompleteSecurityCallback(MemorySegment BindingHandle, int Status) {
        var mh$ = RpcServerCompleteSecurityCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerCompleteSecurityCallback", BindingHandle, Status);
            }
            return (int)mh$.invokeExact(BindingHandle, Status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerRegisterAuthInfoA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerRegisterAuthInfoA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterAuthInfoA(RPC_CSTR ServerPrincName, unsigned long AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, void *Arg)
     * }
     */
    public static FunctionDescriptor RpcServerRegisterAuthInfoA$descriptor() {
        return RpcServerRegisterAuthInfoA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterAuthInfoA(RPC_CSTR ServerPrincName, unsigned long AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, void *Arg)
     * }
     */
    public static MethodHandle RpcServerRegisterAuthInfoA$handle() {
        return RpcServerRegisterAuthInfoA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterAuthInfoA(RPC_CSTR ServerPrincName, unsigned long AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, void *Arg)
     * }
     */
    public static MemorySegment RpcServerRegisterAuthInfoA$address() {
        return RpcServerRegisterAuthInfoA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterAuthInfoA(RPC_CSTR ServerPrincName, unsigned long AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, void *Arg)
     * }
     */
    public static int RpcServerRegisterAuthInfoA(MemorySegment ServerPrincName, int AuthnSvc, MemorySegment GetKeyFn, MemorySegment Arg) {
        var mh$ = RpcServerRegisterAuthInfoA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerRegisterAuthInfoA", ServerPrincName, AuthnSvc, GetKeyFn, Arg);
            }
            return (int)mh$.invokeExact(ServerPrincName, AuthnSvc, GetKeyFn, Arg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerRegisterAuthInfoW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerRegisterAuthInfoW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterAuthInfoW(RPC_WSTR ServerPrincName, unsigned long AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, void *Arg)
     * }
     */
    public static FunctionDescriptor RpcServerRegisterAuthInfoW$descriptor() {
        return RpcServerRegisterAuthInfoW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterAuthInfoW(RPC_WSTR ServerPrincName, unsigned long AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, void *Arg)
     * }
     */
    public static MethodHandle RpcServerRegisterAuthInfoW$handle() {
        return RpcServerRegisterAuthInfoW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterAuthInfoW(RPC_WSTR ServerPrincName, unsigned long AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, void *Arg)
     * }
     */
    public static MemorySegment RpcServerRegisterAuthInfoW$address() {
        return RpcServerRegisterAuthInfoW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterAuthInfoW(RPC_WSTR ServerPrincName, unsigned long AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, void *Arg)
     * }
     */
    public static int RpcServerRegisterAuthInfoW(MemorySegment ServerPrincName, int AuthnSvc, MemorySegment GetKeyFn, MemorySegment Arg) {
        var mh$ = RpcServerRegisterAuthInfoW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerRegisterAuthInfoW", ServerPrincName, AuthnSvc, GetKeyFn, Arg);
            }
            return (int)mh$.invokeExact(ServerPrincName, AuthnSvc, GetKeyFn, Arg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     unsigned char *UserName;
     *     unsigned char *ComputerName;
     *     unsigned short Privilege;
     *     unsigned long AuthFlags;
     * } *PRPC_CLIENT_INFORMATION1
     * }
     */
    public static final AddressLayout PRPC_CLIENT_INFORMATION1 = wgl_h.C_POINTER;

    private static class RpcBindingServerFromClient {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcBindingServerFromClient");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingServerFromClient(RPC_BINDING_HANDLE ClientBinding, RPC_BINDING_HANDLE *ServerBinding)
     * }
     */
    public static FunctionDescriptor RpcBindingServerFromClient$descriptor() {
        return RpcBindingServerFromClient.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingServerFromClient(RPC_BINDING_HANDLE ClientBinding, RPC_BINDING_HANDLE *ServerBinding)
     * }
     */
    public static MethodHandle RpcBindingServerFromClient$handle() {
        return RpcBindingServerFromClient.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingServerFromClient(RPC_BINDING_HANDLE ClientBinding, RPC_BINDING_HANDLE *ServerBinding)
     * }
     */
    public static MemorySegment RpcBindingServerFromClient$address() {
        return RpcBindingServerFromClient.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingServerFromClient(RPC_BINDING_HANDLE ClientBinding, RPC_BINDING_HANDLE *ServerBinding)
     * }
     */
    public static int RpcBindingServerFromClient(MemorySegment ClientBinding, MemorySegment ServerBinding) {
        var mh$ = RpcBindingServerFromClient.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingServerFromClient", ClientBinding, ServerBinding);
            }
            return (int)mh$.invokeExact(ClientBinding, ServerBinding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcRaiseException {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcRaiseException");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void RpcRaiseException(RPC_STATUS exception)
     * }
     */
    public static FunctionDescriptor RpcRaiseException$descriptor() {
        return RpcRaiseException.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void RpcRaiseException(RPC_STATUS exception)
     * }
     */
    public static MethodHandle RpcRaiseException$handle() {
        return RpcRaiseException.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void RpcRaiseException(RPC_STATUS exception)
     * }
     */
    public static MemorySegment RpcRaiseException$address() {
        return RpcRaiseException.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void RpcRaiseException(RPC_STATUS exception)
     * }
     */
    public static void RpcRaiseException(int exception) {
        var mh$ = RpcRaiseException.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcRaiseException", exception);
            }
            mh$.invokeExact(exception);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcTestCancel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcTestCancel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcTestCancel()
     * }
     */
    public static FunctionDescriptor RpcTestCancel$descriptor() {
        return RpcTestCancel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcTestCancel()
     * }
     */
    public static MethodHandle RpcTestCancel$handle() {
        return RpcTestCancel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcTestCancel()
     * }
     */
    public static MemorySegment RpcTestCancel$address() {
        return RpcTestCancel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcTestCancel()
     * }
     */
    public static int RpcTestCancel() {
        var mh$ = RpcTestCancel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcTestCancel");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerTestCancel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerTestCancel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerTestCancel(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static FunctionDescriptor RpcServerTestCancel$descriptor() {
        return RpcServerTestCancel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerTestCancel(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static MethodHandle RpcServerTestCancel$handle() {
        return RpcServerTestCancel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerTestCancel(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static MemorySegment RpcServerTestCancel$address() {
        return RpcServerTestCancel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerTestCancel(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static int RpcServerTestCancel(MemorySegment BindingHandle) {
        var mh$ = RpcServerTestCancel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerTestCancel", BindingHandle);
            }
            return (int)mh$.invokeExact(BindingHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcCancelThread {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcCancelThread");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcCancelThread(void *Thread)
     * }
     */
    public static FunctionDescriptor RpcCancelThread$descriptor() {
        return RpcCancelThread.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcCancelThread(void *Thread)
     * }
     */
    public static MethodHandle RpcCancelThread$handle() {
        return RpcCancelThread.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcCancelThread(void *Thread)
     * }
     */
    public static MemorySegment RpcCancelThread$address() {
        return RpcCancelThread.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcCancelThread(void *Thread)
     * }
     */
    public static int RpcCancelThread(MemorySegment Thread) {
        var mh$ = RpcCancelThread.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcCancelThread", Thread);
            }
            return (int)mh$.invokeExact(Thread);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcCancelThreadEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcCancelThreadEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcCancelThreadEx(void *Thread, long Timeout)
     * }
     */
    public static FunctionDescriptor RpcCancelThreadEx$descriptor() {
        return RpcCancelThreadEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcCancelThreadEx(void *Thread, long Timeout)
     * }
     */
    public static MethodHandle RpcCancelThreadEx$handle() {
        return RpcCancelThreadEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcCancelThreadEx(void *Thread, long Timeout)
     * }
     */
    public static MemorySegment RpcCancelThreadEx$address() {
        return RpcCancelThreadEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcCancelThreadEx(void *Thread, long Timeout)
     * }
     */
    public static int RpcCancelThreadEx(MemorySegment Thread, int Timeout) {
        var mh$ = RpcCancelThreadEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcCancelThreadEx", Thread, Timeout);
            }
            return (int)mh$.invokeExact(Thread, Timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UuidCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("UuidCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS UuidCreate(UUID *Uuid)
     * }
     */
    public static FunctionDescriptor UuidCreate$descriptor() {
        return UuidCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS UuidCreate(UUID *Uuid)
     * }
     */
    public static MethodHandle UuidCreate$handle() {
        return UuidCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS UuidCreate(UUID *Uuid)
     * }
     */
    public static MemorySegment UuidCreate$address() {
        return UuidCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS UuidCreate(UUID *Uuid)
     * }
     */
    public static int UuidCreate(MemorySegment Uuid) {
        var mh$ = UuidCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UuidCreate", Uuid);
            }
            return (int)mh$.invokeExact(Uuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UuidCreateSequential {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("UuidCreateSequential");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS UuidCreateSequential(UUID *Uuid)
     * }
     */
    public static FunctionDescriptor UuidCreateSequential$descriptor() {
        return UuidCreateSequential.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS UuidCreateSequential(UUID *Uuid)
     * }
     */
    public static MethodHandle UuidCreateSequential$handle() {
        return UuidCreateSequential.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS UuidCreateSequential(UUID *Uuid)
     * }
     */
    public static MemorySegment UuidCreateSequential$address() {
        return UuidCreateSequential.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS UuidCreateSequential(UUID *Uuid)
     * }
     */
    public static int UuidCreateSequential(MemorySegment Uuid) {
        var mh$ = UuidCreateSequential.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UuidCreateSequential", Uuid);
            }
            return (int)mh$.invokeExact(Uuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UuidToStringA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("UuidToStringA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS UuidToStringA(const UUID *Uuid, RPC_CSTR *StringUuid)
     * }
     */
    public static FunctionDescriptor UuidToStringA$descriptor() {
        return UuidToStringA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS UuidToStringA(const UUID *Uuid, RPC_CSTR *StringUuid)
     * }
     */
    public static MethodHandle UuidToStringA$handle() {
        return UuidToStringA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS UuidToStringA(const UUID *Uuid, RPC_CSTR *StringUuid)
     * }
     */
    public static MemorySegment UuidToStringA$address() {
        return UuidToStringA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS UuidToStringA(const UUID *Uuid, RPC_CSTR *StringUuid)
     * }
     */
    public static int UuidToStringA(MemorySegment Uuid, MemorySegment StringUuid) {
        var mh$ = UuidToStringA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UuidToStringA", Uuid, StringUuid);
            }
            return (int)mh$.invokeExact(Uuid, StringUuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UuidFromStringA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("UuidFromStringA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS UuidFromStringA(RPC_CSTR StringUuid, UUID *Uuid)
     * }
     */
    public static FunctionDescriptor UuidFromStringA$descriptor() {
        return UuidFromStringA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS UuidFromStringA(RPC_CSTR StringUuid, UUID *Uuid)
     * }
     */
    public static MethodHandle UuidFromStringA$handle() {
        return UuidFromStringA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS UuidFromStringA(RPC_CSTR StringUuid, UUID *Uuid)
     * }
     */
    public static MemorySegment UuidFromStringA$address() {
        return UuidFromStringA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS UuidFromStringA(RPC_CSTR StringUuid, UUID *Uuid)
     * }
     */
    public static int UuidFromStringA(MemorySegment StringUuid, MemorySegment Uuid) {
        var mh$ = UuidFromStringA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UuidFromStringA", StringUuid, Uuid);
            }
            return (int)mh$.invokeExact(StringUuid, Uuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UuidToStringW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("UuidToStringW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS UuidToStringW(const UUID *Uuid, RPC_WSTR *StringUuid)
     * }
     */
    public static FunctionDescriptor UuidToStringW$descriptor() {
        return UuidToStringW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS UuidToStringW(const UUID *Uuid, RPC_WSTR *StringUuid)
     * }
     */
    public static MethodHandle UuidToStringW$handle() {
        return UuidToStringW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS UuidToStringW(const UUID *Uuid, RPC_WSTR *StringUuid)
     * }
     */
    public static MemorySegment UuidToStringW$address() {
        return UuidToStringW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS UuidToStringW(const UUID *Uuid, RPC_WSTR *StringUuid)
     * }
     */
    public static int UuidToStringW(MemorySegment Uuid, MemorySegment StringUuid) {
        var mh$ = UuidToStringW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UuidToStringW", Uuid, StringUuid);
            }
            return (int)mh$.invokeExact(Uuid, StringUuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UuidFromStringW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("UuidFromStringW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS UuidFromStringW(RPC_WSTR StringUuid, UUID *Uuid)
     * }
     */
    public static FunctionDescriptor UuidFromStringW$descriptor() {
        return UuidFromStringW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS UuidFromStringW(RPC_WSTR StringUuid, UUID *Uuid)
     * }
     */
    public static MethodHandle UuidFromStringW$handle() {
        return UuidFromStringW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS UuidFromStringW(RPC_WSTR StringUuid, UUID *Uuid)
     * }
     */
    public static MemorySegment UuidFromStringW$address() {
        return UuidFromStringW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS UuidFromStringW(RPC_WSTR StringUuid, UUID *Uuid)
     * }
     */
    public static int UuidFromStringW(MemorySegment StringUuid, MemorySegment Uuid) {
        var mh$ = UuidFromStringW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UuidFromStringW", StringUuid, Uuid);
            }
            return (int)mh$.invokeExact(StringUuid, Uuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UuidCompare {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("UuidCompare");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int UuidCompare(UUID *Uuid1, UUID *Uuid2, RPC_STATUS *Status)
     * }
     */
    public static FunctionDescriptor UuidCompare$descriptor() {
        return UuidCompare.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int UuidCompare(UUID *Uuid1, UUID *Uuid2, RPC_STATUS *Status)
     * }
     */
    public static MethodHandle UuidCompare$handle() {
        return UuidCompare.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int UuidCompare(UUID *Uuid1, UUID *Uuid2, RPC_STATUS *Status)
     * }
     */
    public static MemorySegment UuidCompare$address() {
        return UuidCompare.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int UuidCompare(UUID *Uuid1, UUID *Uuid2, RPC_STATUS *Status)
     * }
     */
    public static int UuidCompare(MemorySegment Uuid1, MemorySegment Uuid2, MemorySegment Status) {
        var mh$ = UuidCompare.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UuidCompare", Uuid1, Uuid2, Status);
            }
            return (int)mh$.invokeExact(Uuid1, Uuid2, Status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UuidCreateNil {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("UuidCreateNil");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS UuidCreateNil(UUID *NilUuid)
     * }
     */
    public static FunctionDescriptor UuidCreateNil$descriptor() {
        return UuidCreateNil.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS UuidCreateNil(UUID *NilUuid)
     * }
     */
    public static MethodHandle UuidCreateNil$handle() {
        return UuidCreateNil.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS UuidCreateNil(UUID *NilUuid)
     * }
     */
    public static MemorySegment UuidCreateNil$address() {
        return UuidCreateNil.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS UuidCreateNil(UUID *NilUuid)
     * }
     */
    public static int UuidCreateNil(MemorySegment NilUuid) {
        var mh$ = UuidCreateNil.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UuidCreateNil", NilUuid);
            }
            return (int)mh$.invokeExact(NilUuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UuidEqual {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("UuidEqual");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int UuidEqual(UUID *Uuid1, UUID *Uuid2, RPC_STATUS *Status)
     * }
     */
    public static FunctionDescriptor UuidEqual$descriptor() {
        return UuidEqual.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int UuidEqual(UUID *Uuid1, UUID *Uuid2, RPC_STATUS *Status)
     * }
     */
    public static MethodHandle UuidEqual$handle() {
        return UuidEqual.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int UuidEqual(UUID *Uuid1, UUID *Uuid2, RPC_STATUS *Status)
     * }
     */
    public static MemorySegment UuidEqual$address() {
        return UuidEqual.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int UuidEqual(UUID *Uuid1, UUID *Uuid2, RPC_STATUS *Status)
     * }
     */
    public static int UuidEqual(MemorySegment Uuid1, MemorySegment Uuid2, MemorySegment Status) {
        var mh$ = UuidEqual.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UuidEqual", Uuid1, Uuid2, Status);
            }
            return (int)mh$.invokeExact(Uuid1, Uuid2, Status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UuidHash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_SHORT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("UuidHash");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned short UuidHash(UUID *Uuid, RPC_STATUS *Status)
     * }
     */
    public static FunctionDescriptor UuidHash$descriptor() {
        return UuidHash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned short UuidHash(UUID *Uuid, RPC_STATUS *Status)
     * }
     */
    public static MethodHandle UuidHash$handle() {
        return UuidHash.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned short UuidHash(UUID *Uuid, RPC_STATUS *Status)
     * }
     */
    public static MemorySegment UuidHash$address() {
        return UuidHash.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned short UuidHash(UUID *Uuid, RPC_STATUS *Status)
     * }
     */
    public static short UuidHash(MemorySegment Uuid, MemorySegment Status) {
        var mh$ = UuidHash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UuidHash", Uuid, Status);
            }
            return (short)mh$.invokeExact(Uuid, Status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UuidIsNil {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("UuidIsNil");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int UuidIsNil(UUID *Uuid, RPC_STATUS *Status)
     * }
     */
    public static FunctionDescriptor UuidIsNil$descriptor() {
        return UuidIsNil.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int UuidIsNil(UUID *Uuid, RPC_STATUS *Status)
     * }
     */
    public static MethodHandle UuidIsNil$handle() {
        return UuidIsNil.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int UuidIsNil(UUID *Uuid, RPC_STATUS *Status)
     * }
     */
    public static MemorySegment UuidIsNil$address() {
        return UuidIsNil.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int UuidIsNil(UUID *Uuid, RPC_STATUS *Status)
     * }
     */
    public static int UuidIsNil(MemorySegment Uuid, MemorySegment Status) {
        var mh$ = UuidIsNil.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UuidIsNil", Uuid, Status);
            }
            return (int)mh$.invokeExact(Uuid, Status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcEpRegisterNoReplaceA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcEpRegisterNoReplaceA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterNoReplaceA(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_CSTR Annotation)
     * }
     */
    public static FunctionDescriptor RpcEpRegisterNoReplaceA$descriptor() {
        return RpcEpRegisterNoReplaceA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterNoReplaceA(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_CSTR Annotation)
     * }
     */
    public static MethodHandle RpcEpRegisterNoReplaceA$handle() {
        return RpcEpRegisterNoReplaceA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterNoReplaceA(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_CSTR Annotation)
     * }
     */
    public static MemorySegment RpcEpRegisterNoReplaceA$address() {
        return RpcEpRegisterNoReplaceA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterNoReplaceA(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_CSTR Annotation)
     * }
     */
    public static int RpcEpRegisterNoReplaceA(MemorySegment IfSpec, MemorySegment BindingVector, MemorySegment UuidVector, MemorySegment Annotation) {
        var mh$ = RpcEpRegisterNoReplaceA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcEpRegisterNoReplaceA", IfSpec, BindingVector, UuidVector, Annotation);
            }
            return (int)mh$.invokeExact(IfSpec, BindingVector, UuidVector, Annotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcEpRegisterNoReplaceW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcEpRegisterNoReplaceW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterNoReplaceW(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_WSTR Annotation)
     * }
     */
    public static FunctionDescriptor RpcEpRegisterNoReplaceW$descriptor() {
        return RpcEpRegisterNoReplaceW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterNoReplaceW(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_WSTR Annotation)
     * }
     */
    public static MethodHandle RpcEpRegisterNoReplaceW$handle() {
        return RpcEpRegisterNoReplaceW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterNoReplaceW(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_WSTR Annotation)
     * }
     */
    public static MemorySegment RpcEpRegisterNoReplaceW$address() {
        return RpcEpRegisterNoReplaceW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterNoReplaceW(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_WSTR Annotation)
     * }
     */
    public static int RpcEpRegisterNoReplaceW(MemorySegment IfSpec, MemorySegment BindingVector, MemorySegment UuidVector, MemorySegment Annotation) {
        var mh$ = RpcEpRegisterNoReplaceW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcEpRegisterNoReplaceW", IfSpec, BindingVector, UuidVector, Annotation);
            }
            return (int)mh$.invokeExact(IfSpec, BindingVector, UuidVector, Annotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcEpRegisterA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcEpRegisterA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterA(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_CSTR Annotation)
     * }
     */
    public static FunctionDescriptor RpcEpRegisterA$descriptor() {
        return RpcEpRegisterA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterA(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_CSTR Annotation)
     * }
     */
    public static MethodHandle RpcEpRegisterA$handle() {
        return RpcEpRegisterA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterA(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_CSTR Annotation)
     * }
     */
    public static MemorySegment RpcEpRegisterA$address() {
        return RpcEpRegisterA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterA(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_CSTR Annotation)
     * }
     */
    public static int RpcEpRegisterA(MemorySegment IfSpec, MemorySegment BindingVector, MemorySegment UuidVector, MemorySegment Annotation) {
        var mh$ = RpcEpRegisterA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcEpRegisterA", IfSpec, BindingVector, UuidVector, Annotation);
            }
            return (int)mh$.invokeExact(IfSpec, BindingVector, UuidVector, Annotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcEpRegisterW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcEpRegisterW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterW(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_WSTR Annotation)
     * }
     */
    public static FunctionDescriptor RpcEpRegisterW$descriptor() {
        return RpcEpRegisterW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterW(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_WSTR Annotation)
     * }
     */
    public static MethodHandle RpcEpRegisterW$handle() {
        return RpcEpRegisterW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterW(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_WSTR Annotation)
     * }
     */
    public static MemorySegment RpcEpRegisterW$address() {
        return RpcEpRegisterW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterW(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_WSTR Annotation)
     * }
     */
    public static int RpcEpRegisterW(MemorySegment IfSpec, MemorySegment BindingVector, MemorySegment UuidVector, MemorySegment Annotation) {
        var mh$ = RpcEpRegisterW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcEpRegisterW", IfSpec, BindingVector, UuidVector, Annotation);
            }
            return (int)mh$.invokeExact(IfSpec, BindingVector, UuidVector, Annotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcEpUnregister {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcEpUnregister");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpUnregister(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector)
     * }
     */
    public static FunctionDescriptor RpcEpUnregister$descriptor() {
        return RpcEpUnregister.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpUnregister(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector)
     * }
     */
    public static MethodHandle RpcEpUnregister$handle() {
        return RpcEpUnregister.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpUnregister(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector)
     * }
     */
    public static MemorySegment RpcEpUnregister$address() {
        return RpcEpUnregister.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcEpUnregister(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector)
     * }
     */
    public static int RpcEpUnregister(MemorySegment IfSpec, MemorySegment BindingVector, MemorySegment UuidVector) {
        var mh$ = RpcEpUnregister.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcEpUnregister", IfSpec, BindingVector, UuidVector);
            }
            return (int)mh$.invokeExact(IfSpec, BindingVector, UuidVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DceErrorInqTextA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DceErrorInqTextA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS DceErrorInqTextA(RPC_STATUS RpcStatus, RPC_CSTR ErrorText)
     * }
     */
    public static FunctionDescriptor DceErrorInqTextA$descriptor() {
        return DceErrorInqTextA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS DceErrorInqTextA(RPC_STATUS RpcStatus, RPC_CSTR ErrorText)
     * }
     */
    public static MethodHandle DceErrorInqTextA$handle() {
        return DceErrorInqTextA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS DceErrorInqTextA(RPC_STATUS RpcStatus, RPC_CSTR ErrorText)
     * }
     */
    public static MemorySegment DceErrorInqTextA$address() {
        return DceErrorInqTextA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS DceErrorInqTextA(RPC_STATUS RpcStatus, RPC_CSTR ErrorText)
     * }
     */
    public static int DceErrorInqTextA(int RpcStatus, MemorySegment ErrorText) {
        var mh$ = DceErrorInqTextA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DceErrorInqTextA", RpcStatus, ErrorText);
            }
            return (int)mh$.invokeExact(RpcStatus, ErrorText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DceErrorInqTextW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DceErrorInqTextW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS DceErrorInqTextW(RPC_STATUS RpcStatus, RPC_WSTR ErrorText)
     * }
     */
    public static FunctionDescriptor DceErrorInqTextW$descriptor() {
        return DceErrorInqTextW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS DceErrorInqTextW(RPC_STATUS RpcStatus, RPC_WSTR ErrorText)
     * }
     */
    public static MethodHandle DceErrorInqTextW$handle() {
        return DceErrorInqTextW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS DceErrorInqTextW(RPC_STATUS RpcStatus, RPC_WSTR ErrorText)
     * }
     */
    public static MemorySegment DceErrorInqTextW$address() {
        return DceErrorInqTextW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS DceErrorInqTextW(RPC_STATUS RpcStatus, RPC_WSTR ErrorText)
     * }
     */
    public static int DceErrorInqTextW(int RpcStatus, MemorySegment ErrorText) {
        var mh$ = DceErrorInqTextW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DceErrorInqTextW", RpcStatus, ErrorText);
            }
            return (int)mh$.invokeExact(RpcStatus, ErrorText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef I_RPC_HANDLE *RPC_EP_INQ_HANDLE
     * }
     */
    public static final AddressLayout RPC_EP_INQ_HANDLE = wgl_h.C_POINTER;

    private static class RpcMgmtEpEltInqBegin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcMgmtEpEltInqBegin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqBegin(RPC_BINDING_HANDLE EpBinding, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, UUID *ObjectUuid, RPC_EP_INQ_HANDLE *InquiryContext)
     * }
     */
    public static FunctionDescriptor RpcMgmtEpEltInqBegin$descriptor() {
        return RpcMgmtEpEltInqBegin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqBegin(RPC_BINDING_HANDLE EpBinding, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, UUID *ObjectUuid, RPC_EP_INQ_HANDLE *InquiryContext)
     * }
     */
    public static MethodHandle RpcMgmtEpEltInqBegin$handle() {
        return RpcMgmtEpEltInqBegin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqBegin(RPC_BINDING_HANDLE EpBinding, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, UUID *ObjectUuid, RPC_EP_INQ_HANDLE *InquiryContext)
     * }
     */
    public static MemorySegment RpcMgmtEpEltInqBegin$address() {
        return RpcMgmtEpEltInqBegin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqBegin(RPC_BINDING_HANDLE EpBinding, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, UUID *ObjectUuid, RPC_EP_INQ_HANDLE *InquiryContext)
     * }
     */
    public static int RpcMgmtEpEltInqBegin(MemorySegment EpBinding, int InquiryType, MemorySegment IfId, int VersOption, MemorySegment ObjectUuid, MemorySegment InquiryContext) {
        var mh$ = RpcMgmtEpEltInqBegin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtEpEltInqBegin", EpBinding, InquiryType, IfId, VersOption, ObjectUuid, InquiryContext);
            }
            return (int)mh$.invokeExact(EpBinding, InquiryType, IfId, VersOption, ObjectUuid, InquiryContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtEpEltInqDone {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcMgmtEpEltInqDone");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqDone(RPC_EP_INQ_HANDLE *InquiryContext)
     * }
     */
    public static FunctionDescriptor RpcMgmtEpEltInqDone$descriptor() {
        return RpcMgmtEpEltInqDone.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqDone(RPC_EP_INQ_HANDLE *InquiryContext)
     * }
     */
    public static MethodHandle RpcMgmtEpEltInqDone$handle() {
        return RpcMgmtEpEltInqDone.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqDone(RPC_EP_INQ_HANDLE *InquiryContext)
     * }
     */
    public static MemorySegment RpcMgmtEpEltInqDone$address() {
        return RpcMgmtEpEltInqDone.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqDone(RPC_EP_INQ_HANDLE *InquiryContext)
     * }
     */
    public static int RpcMgmtEpEltInqDone(MemorySegment InquiryContext) {
        var mh$ = RpcMgmtEpEltInqDone.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtEpEltInqDone", InquiryContext);
            }
            return (int)mh$.invokeExact(InquiryContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtEpEltInqNextA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcMgmtEpEltInqNextA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqNextA(RPC_EP_INQ_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_BINDING_HANDLE *Binding, UUID *ObjectUuid, RPC_CSTR *Annotation)
     * }
     */
    public static FunctionDescriptor RpcMgmtEpEltInqNextA$descriptor() {
        return RpcMgmtEpEltInqNextA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqNextA(RPC_EP_INQ_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_BINDING_HANDLE *Binding, UUID *ObjectUuid, RPC_CSTR *Annotation)
     * }
     */
    public static MethodHandle RpcMgmtEpEltInqNextA$handle() {
        return RpcMgmtEpEltInqNextA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqNextA(RPC_EP_INQ_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_BINDING_HANDLE *Binding, UUID *ObjectUuid, RPC_CSTR *Annotation)
     * }
     */
    public static MemorySegment RpcMgmtEpEltInqNextA$address() {
        return RpcMgmtEpEltInqNextA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqNextA(RPC_EP_INQ_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_BINDING_HANDLE *Binding, UUID *ObjectUuid, RPC_CSTR *Annotation)
     * }
     */
    public static int RpcMgmtEpEltInqNextA(MemorySegment InquiryContext, MemorySegment IfId, MemorySegment Binding, MemorySegment ObjectUuid, MemorySegment Annotation) {
        var mh$ = RpcMgmtEpEltInqNextA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtEpEltInqNextA", InquiryContext, IfId, Binding, ObjectUuid, Annotation);
            }
            return (int)mh$.invokeExact(InquiryContext, IfId, Binding, ObjectUuid, Annotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtEpEltInqNextW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcMgmtEpEltInqNextW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqNextW(RPC_EP_INQ_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_BINDING_HANDLE *Binding, UUID *ObjectUuid, RPC_WSTR *Annotation)
     * }
     */
    public static FunctionDescriptor RpcMgmtEpEltInqNextW$descriptor() {
        return RpcMgmtEpEltInqNextW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqNextW(RPC_EP_INQ_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_BINDING_HANDLE *Binding, UUID *ObjectUuid, RPC_WSTR *Annotation)
     * }
     */
    public static MethodHandle RpcMgmtEpEltInqNextW$handle() {
        return RpcMgmtEpEltInqNextW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqNextW(RPC_EP_INQ_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_BINDING_HANDLE *Binding, UUID *ObjectUuid, RPC_WSTR *Annotation)
     * }
     */
    public static MemorySegment RpcMgmtEpEltInqNextW$address() {
        return RpcMgmtEpEltInqNextW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqNextW(RPC_EP_INQ_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_BINDING_HANDLE *Binding, UUID *ObjectUuid, RPC_WSTR *Annotation)
     * }
     */
    public static int RpcMgmtEpEltInqNextW(MemorySegment InquiryContext, MemorySegment IfId, MemorySegment Binding, MemorySegment ObjectUuid, MemorySegment Annotation) {
        var mh$ = RpcMgmtEpEltInqNextW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtEpEltInqNextW", InquiryContext, IfId, Binding, ObjectUuid, Annotation);
            }
            return (int)mh$.invokeExact(InquiryContext, IfId, Binding, ObjectUuid, Annotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtEpUnregister {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcMgmtEpUnregister");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpUnregister(RPC_BINDING_HANDLE EpBinding, RPC_IF_ID *IfId, RPC_BINDING_HANDLE Binding, UUID *ObjectUuid)
     * }
     */
    public static FunctionDescriptor RpcMgmtEpUnregister$descriptor() {
        return RpcMgmtEpUnregister.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpUnregister(RPC_BINDING_HANDLE EpBinding, RPC_IF_ID *IfId, RPC_BINDING_HANDLE Binding, UUID *ObjectUuid)
     * }
     */
    public static MethodHandle RpcMgmtEpUnregister$handle() {
        return RpcMgmtEpUnregister.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpUnregister(RPC_BINDING_HANDLE EpBinding, RPC_IF_ID *IfId, RPC_BINDING_HANDLE Binding, UUID *ObjectUuid)
     * }
     */
    public static MemorySegment RpcMgmtEpUnregister$address() {
        return RpcMgmtEpUnregister.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpUnregister(RPC_BINDING_HANDLE EpBinding, RPC_IF_ID *IfId, RPC_BINDING_HANDLE Binding, UUID *ObjectUuid)
     * }
     */
    public static int RpcMgmtEpUnregister(MemorySegment EpBinding, MemorySegment IfId, MemorySegment Binding, MemorySegment ObjectUuid) {
        var mh$ = RpcMgmtEpUnregister.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtEpUnregister", EpBinding, IfId, Binding, ObjectUuid);
            }
            return (int)mh$.invokeExact(EpBinding, IfId, Binding, ObjectUuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtSetAuthorizationFn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcMgmtSetAuthorizationFn");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetAuthorizationFn(RPC_MGMT_AUTHORIZATION_FN AuthorizationFn)
     * }
     */
    public static FunctionDescriptor RpcMgmtSetAuthorizationFn$descriptor() {
        return RpcMgmtSetAuthorizationFn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetAuthorizationFn(RPC_MGMT_AUTHORIZATION_FN AuthorizationFn)
     * }
     */
    public static MethodHandle RpcMgmtSetAuthorizationFn$handle() {
        return RpcMgmtSetAuthorizationFn.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetAuthorizationFn(RPC_MGMT_AUTHORIZATION_FN AuthorizationFn)
     * }
     */
    public static MemorySegment RpcMgmtSetAuthorizationFn$address() {
        return RpcMgmtSetAuthorizationFn.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetAuthorizationFn(RPC_MGMT_AUTHORIZATION_FN AuthorizationFn)
     * }
     */
    public static int RpcMgmtSetAuthorizationFn(MemorySegment AuthorizationFn) {
        var mh$ = RpcMgmtSetAuthorizationFn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtSetAuthorizationFn", AuthorizationFn);
            }
            return (int)mh$.invokeExact(AuthorizationFn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcExceptionFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcExceptionFilter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int RpcExceptionFilter(unsigned long ExceptionCode)
     * }
     */
    public static FunctionDescriptor RpcExceptionFilter$descriptor() {
        return RpcExceptionFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int RpcExceptionFilter(unsigned long ExceptionCode)
     * }
     */
    public static MethodHandle RpcExceptionFilter$handle() {
        return RpcExceptionFilter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int RpcExceptionFilter(unsigned long ExceptionCode)
     * }
     */
    public static MemorySegment RpcExceptionFilter$address() {
        return RpcExceptionFilter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int RpcExceptionFilter(unsigned long ExceptionCode)
     * }
     */
    public static int RpcExceptionFilter(int ExceptionCode) {
        var mh$ = RpcExceptionFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcExceptionFilter", ExceptionCode);
            }
            return (int)mh$.invokeExact(ExceptionCode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef void *RPC_INTERFACE_GROUP
     * }
     */
    public static final AddressLayout RPC_INTERFACE_GROUP = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef void **PRPC_INTERFACE_GROUP
     * }
     */
    public static final AddressLayout PRPC_INTERFACE_GROUP = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     unsigned long Version;
     *     RPC_WSTR ProtSeq;
     *     RPC_WSTR Endpoint;
     *     void *SecurityDescriptor;
     *     unsigned long Backlog;
     * } *PRPC_ENDPOINT_TEMPLATEW
     * }
     */
    public static final AddressLayout PRPC_ENDPOINT_TEMPLATEW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     unsigned long Version;
     *     RPC_CSTR ProtSeq;
     *     RPC_CSTR Endpoint;
     *     void *SecurityDescriptor;
     *     unsigned long Backlog;
     * } *PRPC_ENDPOINT_TEMPLATEA
     * }
     */
    public static final AddressLayout PRPC_ENDPOINT_TEMPLATEA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     unsigned long Version;
     *     RPC_IF_HANDLE IfSpec;
     *     UUID *MgrTypeUuid;
     *     void *MgrEpv;
     *     unsigned int Flags;
     *     unsigned int MaxCalls;
     *     unsigned int MaxRpcSize;
     *     RPC_IF_CALLBACK_FN *IfCallback;
     *     UUID_VECTOR *UuidVector;
     *     RPC_CSTR Annotation;
     *     void *SecurityDescriptor;
     * } *PRPC_INTERFACE_TEMPLATEA
     * }
     */
    public static final AddressLayout PRPC_INTERFACE_TEMPLATEA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     unsigned long Version;
     *     RPC_IF_HANDLE IfSpec;
     *     UUID *MgrTypeUuid;
     *     void *MgrEpv;
     *     unsigned int Flags;
     *     unsigned int MaxCalls;
     *     unsigned int MaxRpcSize;
     *     RPC_IF_CALLBACK_FN *IfCallback;
     *     UUID_VECTOR *UuidVector;
     *     RPC_WSTR Annotation;
     *     void *SecurityDescriptor;
     * } *PRPC_INTERFACE_TEMPLATEW
     * }
     */
    public static final AddressLayout PRPC_INTERFACE_TEMPLATEW = wgl_h.C_POINTER;

    private static class RpcServerInterfaceGroupCreateW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerInterfaceGroupCreateW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupCreateW(RPC_INTERFACE_TEMPLATEW *Interfaces, unsigned long NumIfs, RPC_ENDPOINT_TEMPLATEW *Endpoints, unsigned long NumEndpoints, unsigned long IdlePeriod, RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn, void *IdleCallbackContext, PRPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static FunctionDescriptor RpcServerInterfaceGroupCreateW$descriptor() {
        return RpcServerInterfaceGroupCreateW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupCreateW(RPC_INTERFACE_TEMPLATEW *Interfaces, unsigned long NumIfs, RPC_ENDPOINT_TEMPLATEW *Endpoints, unsigned long NumEndpoints, unsigned long IdlePeriod, RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn, void *IdleCallbackContext, PRPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static MethodHandle RpcServerInterfaceGroupCreateW$handle() {
        return RpcServerInterfaceGroupCreateW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupCreateW(RPC_INTERFACE_TEMPLATEW *Interfaces, unsigned long NumIfs, RPC_ENDPOINT_TEMPLATEW *Endpoints, unsigned long NumEndpoints, unsigned long IdlePeriod, RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn, void *IdleCallbackContext, PRPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static MemorySegment RpcServerInterfaceGroupCreateW$address() {
        return RpcServerInterfaceGroupCreateW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupCreateW(RPC_INTERFACE_TEMPLATEW *Interfaces, unsigned long NumIfs, RPC_ENDPOINT_TEMPLATEW *Endpoints, unsigned long NumEndpoints, unsigned long IdlePeriod, RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn, void *IdleCallbackContext, PRPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static int RpcServerInterfaceGroupCreateW(MemorySegment Interfaces, int NumIfs, MemorySegment Endpoints, int NumEndpoints, int IdlePeriod, MemorySegment IdleCallbackFn, MemorySegment IdleCallbackContext, MemorySegment IfGroup) {
        var mh$ = RpcServerInterfaceGroupCreateW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInterfaceGroupCreateW", Interfaces, NumIfs, Endpoints, NumEndpoints, IdlePeriod, IdleCallbackFn, IdleCallbackContext, IfGroup);
            }
            return (int)mh$.invokeExact(Interfaces, NumIfs, Endpoints, NumEndpoints, IdlePeriod, IdleCallbackFn, IdleCallbackContext, IfGroup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerInterfaceGroupCreateA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerInterfaceGroupCreateA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupCreateA(RPC_INTERFACE_TEMPLATEA *Interfaces, unsigned long NumIfs, RPC_ENDPOINT_TEMPLATEA *Endpoints, unsigned long NumEndpoints, unsigned long IdlePeriod, RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn, void *IdleCallbackContext, PRPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static FunctionDescriptor RpcServerInterfaceGroupCreateA$descriptor() {
        return RpcServerInterfaceGroupCreateA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupCreateA(RPC_INTERFACE_TEMPLATEA *Interfaces, unsigned long NumIfs, RPC_ENDPOINT_TEMPLATEA *Endpoints, unsigned long NumEndpoints, unsigned long IdlePeriod, RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn, void *IdleCallbackContext, PRPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static MethodHandle RpcServerInterfaceGroupCreateA$handle() {
        return RpcServerInterfaceGroupCreateA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupCreateA(RPC_INTERFACE_TEMPLATEA *Interfaces, unsigned long NumIfs, RPC_ENDPOINT_TEMPLATEA *Endpoints, unsigned long NumEndpoints, unsigned long IdlePeriod, RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn, void *IdleCallbackContext, PRPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static MemorySegment RpcServerInterfaceGroupCreateA$address() {
        return RpcServerInterfaceGroupCreateA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupCreateA(RPC_INTERFACE_TEMPLATEA *Interfaces, unsigned long NumIfs, RPC_ENDPOINT_TEMPLATEA *Endpoints, unsigned long NumEndpoints, unsigned long IdlePeriod, RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn, void *IdleCallbackContext, PRPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static int RpcServerInterfaceGroupCreateA(MemorySegment Interfaces, int NumIfs, MemorySegment Endpoints, int NumEndpoints, int IdlePeriod, MemorySegment IdleCallbackFn, MemorySegment IdleCallbackContext, MemorySegment IfGroup) {
        var mh$ = RpcServerInterfaceGroupCreateA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInterfaceGroupCreateA", Interfaces, NumIfs, Endpoints, NumEndpoints, IdlePeriod, IdleCallbackFn, IdleCallbackContext, IfGroup);
            }
            return (int)mh$.invokeExact(Interfaces, NumIfs, Endpoints, NumEndpoints, IdlePeriod, IdleCallbackFn, IdleCallbackContext, IfGroup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerInterfaceGroupClose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerInterfaceGroupClose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupClose(RPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static FunctionDescriptor RpcServerInterfaceGroupClose$descriptor() {
        return RpcServerInterfaceGroupClose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupClose(RPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static MethodHandle RpcServerInterfaceGroupClose$handle() {
        return RpcServerInterfaceGroupClose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupClose(RPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static MemorySegment RpcServerInterfaceGroupClose$address() {
        return RpcServerInterfaceGroupClose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupClose(RPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static int RpcServerInterfaceGroupClose(MemorySegment IfGroup) {
        var mh$ = RpcServerInterfaceGroupClose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInterfaceGroupClose", IfGroup);
            }
            return (int)mh$.invokeExact(IfGroup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerInterfaceGroupActivate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerInterfaceGroupActivate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupActivate(RPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static FunctionDescriptor RpcServerInterfaceGroupActivate$descriptor() {
        return RpcServerInterfaceGroupActivate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupActivate(RPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static MethodHandle RpcServerInterfaceGroupActivate$handle() {
        return RpcServerInterfaceGroupActivate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupActivate(RPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static MemorySegment RpcServerInterfaceGroupActivate$address() {
        return RpcServerInterfaceGroupActivate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupActivate(RPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static int RpcServerInterfaceGroupActivate(MemorySegment IfGroup) {
        var mh$ = RpcServerInterfaceGroupActivate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInterfaceGroupActivate", IfGroup);
            }
            return (int)mh$.invokeExact(IfGroup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerInterfaceGroupDeactivate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerInterfaceGroupDeactivate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupDeactivate(RPC_INTERFACE_GROUP IfGroup, unsigned long ForceDeactivation)
     * }
     */
    public static FunctionDescriptor RpcServerInterfaceGroupDeactivate$descriptor() {
        return RpcServerInterfaceGroupDeactivate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupDeactivate(RPC_INTERFACE_GROUP IfGroup, unsigned long ForceDeactivation)
     * }
     */
    public static MethodHandle RpcServerInterfaceGroupDeactivate$handle() {
        return RpcServerInterfaceGroupDeactivate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupDeactivate(RPC_INTERFACE_GROUP IfGroup, unsigned long ForceDeactivation)
     * }
     */
    public static MemorySegment RpcServerInterfaceGroupDeactivate$address() {
        return RpcServerInterfaceGroupDeactivate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupDeactivate(RPC_INTERFACE_GROUP IfGroup, unsigned long ForceDeactivation)
     * }
     */
    public static int RpcServerInterfaceGroupDeactivate(MemorySegment IfGroup, int ForceDeactivation) {
        var mh$ = RpcServerInterfaceGroupDeactivate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInterfaceGroupDeactivate", IfGroup, ForceDeactivation);
            }
            return (int)mh$.invokeExact(IfGroup, ForceDeactivation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerInterfaceGroupInqBindings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerInterfaceGroupInqBindings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupInqBindings(RPC_INTERFACE_GROUP IfGroup, RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static FunctionDescriptor RpcServerInterfaceGroupInqBindings$descriptor() {
        return RpcServerInterfaceGroupInqBindings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupInqBindings(RPC_INTERFACE_GROUP IfGroup, RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static MethodHandle RpcServerInterfaceGroupInqBindings$handle() {
        return RpcServerInterfaceGroupInqBindings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupInqBindings(RPC_INTERFACE_GROUP IfGroup, RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static MemorySegment RpcServerInterfaceGroupInqBindings$address() {
        return RpcServerInterfaceGroupInqBindings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupInqBindings(RPC_INTERFACE_GROUP IfGroup, RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static int RpcServerInterfaceGroupInqBindings(MemorySegment IfGroup, MemorySegment BindingVector) {
        var mh$ = RpcServerInterfaceGroupInqBindings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInterfaceGroupInqBindings", IfGroup, BindingVector);
            }
            return (int)mh$.invokeExact(IfGroup, BindingVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_SYNTAX_IDENTIFIER {
     *     GUID SyntaxGUID;
     *     RPC_VERSION SyntaxVersion;
     * } *PRPC_SYNTAX_IDENTIFIER
     * }
     */
    public static final AddressLayout PRPC_SYNTAX_IDENTIFIER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_MESSAGE {
     *     RPC_BINDING_HANDLE Handle;
     *     unsigned long DataRepresentation;
     *     void *Buffer;
     *     unsigned int BufferLength;
     *     unsigned int ProcNum;
     *     PRPC_SYNTAX_IDENTIFIER TransferSyntax;
     *     void *RpcInterfaceInformation;
     *     void *ReservedForRuntime;
     *     void *ManagerEpv;
     *     void *ImportContext;
     *     unsigned long RpcFlags;
     * } *PRPC_MESSAGE
     * }
     */
    public static final AddressLayout PRPC_MESSAGE = wgl_h.C_POINTER;
    private static final int PROTOCOL_NOT_LOADED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum RPC_ADDRESS_CHANGE_TYPE.PROTOCOL_NOT_LOADED = 1
     * }
     */
    public static int PROTOCOL_NOT_LOADED() {
        return PROTOCOL_NOT_LOADED;
    }
    private static final int PROTOCOL_LOADED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum RPC_ADDRESS_CHANGE_TYPE.PROTOCOL_LOADED = 2
     * }
     */
    public static int PROTOCOL_LOADED() {
        return PROTOCOL_LOADED;
    }
    private static final int PROTOCOL_ADDRESS_CHANGE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum RPC_ADDRESS_CHANGE_TYPE.PROTOCOL_ADDRESS_CHANGE = 3
     * }
     */
    public static int PROTOCOL_ADDRESS_CHANGE() {
        return PROTOCOL_ADDRESS_CHANGE;
    }
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     unsigned int DispatchTableCount;
     *     RPC_DISPATCH_FUNCTION *DispatchTable;
     *     LONG_PTR Reserved;
     * } *PRPC_DISPATCH_TABLE
     * }
     */
    public static final AddressLayout PRPC_DISPATCH_TABLE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_PROTSEQ_ENDPOINT {
     *     unsigned char *RpcProtocolSequence;
     *     unsigned char *Endpoint;
     * } *PRPC_PROTSEQ_ENDPOINT
     * }
     */
    public static final AddressLayout PRPC_PROTSEQ_ENDPOINT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_SERVER_INTERFACE {
     *     unsigned int Length;
     *     RPC_SYNTAX_IDENTIFIER InterfaceId;
     *     RPC_SYNTAX_IDENTIFIER TransferSyntax;
     *     PRPC_DISPATCH_TABLE DispatchTable;
     *     unsigned int RpcProtseqEndpointCount;
     *     PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
     *     void *DefaultManagerEpv;
     *     const void *InterpreterInfo;
     *     unsigned int Flags;
     * } *PRPC_SERVER_INTERFACE
     * }
     */
    public static final AddressLayout PRPC_SERVER_INTERFACE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_CLIENT_INTERFACE {
     *     unsigned int Length;
     *     RPC_SYNTAX_IDENTIFIER InterfaceId;
     *     RPC_SYNTAX_IDENTIFIER TransferSyntax;
     *     PRPC_DISPATCH_TABLE DispatchTable;
     *     unsigned int RpcProtseqEndpointCount;
     *     PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
     *     ULONG_PTR Reserved;
     *     const void *InterpreterInfo;
     *     unsigned int Flags;
     * } *PRPC_CLIENT_INTERFACE
     * }
     */
    public static final AddressLayout PRPC_CLIENT_INTERFACE = wgl_h.C_POINTER;

    private static class I_RpcNegotiateTransferSyntax {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcNegotiateTransferSyntax");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNegotiateTransferSyntax(RPC_MESSAGE *Message)
     * }
     */
    public static FunctionDescriptor I_RpcNegotiateTransferSyntax$descriptor() {
        return I_RpcNegotiateTransferSyntax.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNegotiateTransferSyntax(RPC_MESSAGE *Message)
     * }
     */
    public static MethodHandle I_RpcNegotiateTransferSyntax$handle() {
        return I_RpcNegotiateTransferSyntax.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNegotiateTransferSyntax(RPC_MESSAGE *Message)
     * }
     */
    public static MemorySegment I_RpcNegotiateTransferSyntax$address() {
        return I_RpcNegotiateTransferSyntax.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNegotiateTransferSyntax(RPC_MESSAGE *Message)
     * }
     */
    public static int I_RpcNegotiateTransferSyntax(MemorySegment Message) {
        var mh$ = I_RpcNegotiateTransferSyntax.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcNegotiateTransferSyntax", Message);
            }
            return (int)mh$.invokeExact(Message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcGetBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcGetBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetBuffer(RPC_MESSAGE *Message)
     * }
     */
    public static FunctionDescriptor I_RpcGetBuffer$descriptor() {
        return I_RpcGetBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetBuffer(RPC_MESSAGE *Message)
     * }
     */
    public static MethodHandle I_RpcGetBuffer$handle() {
        return I_RpcGetBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetBuffer(RPC_MESSAGE *Message)
     * }
     */
    public static MemorySegment I_RpcGetBuffer$address() {
        return I_RpcGetBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetBuffer(RPC_MESSAGE *Message)
     * }
     */
    public static int I_RpcGetBuffer(MemorySegment Message) {
        var mh$ = I_RpcGetBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcGetBuffer", Message);
            }
            return (int)mh$.invokeExact(Message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcGetBufferWithObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcGetBufferWithObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetBufferWithObject(RPC_MESSAGE *Message, UUID *ObjectUuid)
     * }
     */
    public static FunctionDescriptor I_RpcGetBufferWithObject$descriptor() {
        return I_RpcGetBufferWithObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetBufferWithObject(RPC_MESSAGE *Message, UUID *ObjectUuid)
     * }
     */
    public static MethodHandle I_RpcGetBufferWithObject$handle() {
        return I_RpcGetBufferWithObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetBufferWithObject(RPC_MESSAGE *Message, UUID *ObjectUuid)
     * }
     */
    public static MemorySegment I_RpcGetBufferWithObject$address() {
        return I_RpcGetBufferWithObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetBufferWithObject(RPC_MESSAGE *Message, UUID *ObjectUuid)
     * }
     */
    public static int I_RpcGetBufferWithObject(MemorySegment Message, MemorySegment ObjectUuid) {
        var mh$ = I_RpcGetBufferWithObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcGetBufferWithObject", Message, ObjectUuid);
            }
            return (int)mh$.invokeExact(Message, ObjectUuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcSendReceive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcSendReceive");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSendReceive(RPC_MESSAGE *Message)
     * }
     */
    public static FunctionDescriptor I_RpcSendReceive$descriptor() {
        return I_RpcSendReceive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSendReceive(RPC_MESSAGE *Message)
     * }
     */
    public static MethodHandle I_RpcSendReceive$handle() {
        return I_RpcSendReceive.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSendReceive(RPC_MESSAGE *Message)
     * }
     */
    public static MemorySegment I_RpcSendReceive$address() {
        return I_RpcSendReceive.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSendReceive(RPC_MESSAGE *Message)
     * }
     */
    public static int I_RpcSendReceive(MemorySegment Message) {
        var mh$ = I_RpcSendReceive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcSendReceive", Message);
            }
            return (int)mh$.invokeExact(Message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcFreeBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcFreeBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcFreeBuffer(RPC_MESSAGE *Message)
     * }
     */
    public static FunctionDescriptor I_RpcFreeBuffer$descriptor() {
        return I_RpcFreeBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcFreeBuffer(RPC_MESSAGE *Message)
     * }
     */
    public static MethodHandle I_RpcFreeBuffer$handle() {
        return I_RpcFreeBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcFreeBuffer(RPC_MESSAGE *Message)
     * }
     */
    public static MemorySegment I_RpcFreeBuffer$address() {
        return I_RpcFreeBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcFreeBuffer(RPC_MESSAGE *Message)
     * }
     */
    public static int I_RpcFreeBuffer(MemorySegment Message) {
        var mh$ = I_RpcFreeBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcFreeBuffer", Message);
            }
            return (int)mh$.invokeExact(Message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcSend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcSend");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSend(PRPC_MESSAGE Message)
     * }
     */
    public static FunctionDescriptor I_RpcSend$descriptor() {
        return I_RpcSend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSend(PRPC_MESSAGE Message)
     * }
     */
    public static MethodHandle I_RpcSend$handle() {
        return I_RpcSend.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSend(PRPC_MESSAGE Message)
     * }
     */
    public static MemorySegment I_RpcSend$address() {
        return I_RpcSend.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSend(PRPC_MESSAGE Message)
     * }
     */
    public static int I_RpcSend(MemorySegment Message) {
        var mh$ = I_RpcSend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcSend", Message);
            }
            return (int)mh$.invokeExact(Message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcReceive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcReceive");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcReceive(PRPC_MESSAGE Message, unsigned int Size)
     * }
     */
    public static FunctionDescriptor I_RpcReceive$descriptor() {
        return I_RpcReceive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcReceive(PRPC_MESSAGE Message, unsigned int Size)
     * }
     */
    public static MethodHandle I_RpcReceive$handle() {
        return I_RpcReceive.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcReceive(PRPC_MESSAGE Message, unsigned int Size)
     * }
     */
    public static MemorySegment I_RpcReceive$address() {
        return I_RpcReceive.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcReceive(PRPC_MESSAGE Message, unsigned int Size)
     * }
     */
    public static int I_RpcReceive(MemorySegment Message, int Size) {
        var mh$ = I_RpcReceive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcReceive", Message, Size);
            }
            return (int)mh$.invokeExact(Message, Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcFreePipeBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcFreePipeBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcFreePipeBuffer(RPC_MESSAGE *Message)
     * }
     */
    public static FunctionDescriptor I_RpcFreePipeBuffer$descriptor() {
        return I_RpcFreePipeBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcFreePipeBuffer(RPC_MESSAGE *Message)
     * }
     */
    public static MethodHandle I_RpcFreePipeBuffer$handle() {
        return I_RpcFreePipeBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcFreePipeBuffer(RPC_MESSAGE *Message)
     * }
     */
    public static MemorySegment I_RpcFreePipeBuffer$address() {
        return I_RpcFreePipeBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcFreePipeBuffer(RPC_MESSAGE *Message)
     * }
     */
    public static int I_RpcFreePipeBuffer(MemorySegment Message) {
        var mh$ = I_RpcFreePipeBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcFreePipeBuffer", Message);
            }
            return (int)mh$.invokeExact(Message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcReallocPipeBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcReallocPipeBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcReallocPipeBuffer(PRPC_MESSAGE Message, unsigned int NewSize)
     * }
     */
    public static FunctionDescriptor I_RpcReallocPipeBuffer$descriptor() {
        return I_RpcReallocPipeBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcReallocPipeBuffer(PRPC_MESSAGE Message, unsigned int NewSize)
     * }
     */
    public static MethodHandle I_RpcReallocPipeBuffer$handle() {
        return I_RpcReallocPipeBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcReallocPipeBuffer(PRPC_MESSAGE Message, unsigned int NewSize)
     * }
     */
    public static MemorySegment I_RpcReallocPipeBuffer$address() {
        return I_RpcReallocPipeBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcReallocPipeBuffer(PRPC_MESSAGE Message, unsigned int NewSize)
     * }
     */
    public static int I_RpcReallocPipeBuffer(MemorySegment Message, int NewSize) {
        var mh$ = I_RpcReallocPipeBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcReallocPipeBuffer", Message, NewSize);
            }
            return (int)mh$.invokeExact(Message, NewSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef void *I_RPC_MUTEX
     * }
     */
    public static final AddressLayout I_RPC_MUTEX = wgl_h.C_POINTER;

    private static class I_RpcRequestMutex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcRequestMutex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void I_RpcRequestMutex(I_RPC_MUTEX *Mutex)
     * }
     */
    public static FunctionDescriptor I_RpcRequestMutex$descriptor() {
        return I_RpcRequestMutex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void I_RpcRequestMutex(I_RPC_MUTEX *Mutex)
     * }
     */
    public static MethodHandle I_RpcRequestMutex$handle() {
        return I_RpcRequestMutex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void I_RpcRequestMutex(I_RPC_MUTEX *Mutex)
     * }
     */
    public static MemorySegment I_RpcRequestMutex$address() {
        return I_RpcRequestMutex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void I_RpcRequestMutex(I_RPC_MUTEX *Mutex)
     * }
     */
    public static void I_RpcRequestMutex(MemorySegment Mutex) {
        var mh$ = I_RpcRequestMutex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcRequestMutex", Mutex);
            }
            mh$.invokeExact(Mutex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcClearMutex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcClearMutex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void I_RpcClearMutex(I_RPC_MUTEX Mutex)
     * }
     */
    public static FunctionDescriptor I_RpcClearMutex$descriptor() {
        return I_RpcClearMutex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void I_RpcClearMutex(I_RPC_MUTEX Mutex)
     * }
     */
    public static MethodHandle I_RpcClearMutex$handle() {
        return I_RpcClearMutex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void I_RpcClearMutex(I_RPC_MUTEX Mutex)
     * }
     */
    public static MemorySegment I_RpcClearMutex$address() {
        return I_RpcClearMutex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void I_RpcClearMutex(I_RPC_MUTEX Mutex)
     * }
     */
    public static void I_RpcClearMutex(MemorySegment Mutex) {
        var mh$ = I_RpcClearMutex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcClearMutex", Mutex);
            }
            mh$.invokeExact(Mutex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcDeleteMutex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcDeleteMutex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void I_RpcDeleteMutex(I_RPC_MUTEX Mutex)
     * }
     */
    public static FunctionDescriptor I_RpcDeleteMutex$descriptor() {
        return I_RpcDeleteMutex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void I_RpcDeleteMutex(I_RPC_MUTEX Mutex)
     * }
     */
    public static MethodHandle I_RpcDeleteMutex$handle() {
        return I_RpcDeleteMutex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void I_RpcDeleteMutex(I_RPC_MUTEX Mutex)
     * }
     */
    public static MemorySegment I_RpcDeleteMutex$address() {
        return I_RpcDeleteMutex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void I_RpcDeleteMutex(I_RPC_MUTEX Mutex)
     * }
     */
    public static void I_RpcDeleteMutex(MemorySegment Mutex) {
        var mh$ = I_RpcDeleteMutex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcDeleteMutex", Mutex);
            }
            mh$.invokeExact(Mutex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcAllocate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcAllocate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *I_RpcAllocate(unsigned int Size)
     * }
     */
    public static FunctionDescriptor I_RpcAllocate$descriptor() {
        return I_RpcAllocate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *I_RpcAllocate(unsigned int Size)
     * }
     */
    public static MethodHandle I_RpcAllocate$handle() {
        return I_RpcAllocate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *I_RpcAllocate(unsigned int Size)
     * }
     */
    public static MemorySegment I_RpcAllocate$address() {
        return I_RpcAllocate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *I_RpcAllocate(unsigned int Size)
     * }
     */
    public static MemorySegment I_RpcAllocate(int Size) {
        var mh$ = I_RpcAllocate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcAllocate", Size);
            }
            return (MemorySegment)mh$.invokeExact(Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void I_RpcFree(void *Object)
     * }
     */
    public static FunctionDescriptor I_RpcFree$descriptor() {
        return I_RpcFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void I_RpcFree(void *Object)
     * }
     */
    public static MethodHandle I_RpcFree$handle() {
        return I_RpcFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void I_RpcFree(void *Object)
     * }
     */
    public static MemorySegment I_RpcFree$address() {
        return I_RpcFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void I_RpcFree(void *Object)
     * }
     */
    public static void I_RpcFree(MemorySegment Object) {
        var mh$ = I_RpcFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcFree", Object);
            }
            mh$.invokeExact(Object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcFreeSystemHandleCollection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcFreeSystemHandleCollection");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long I_RpcFreeSystemHandleCollection(void *CallObj, unsigned long FreeFlags)
     * }
     */
    public static FunctionDescriptor I_RpcFreeSystemHandleCollection$descriptor() {
        return I_RpcFreeSystemHandleCollection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long I_RpcFreeSystemHandleCollection(void *CallObj, unsigned long FreeFlags)
     * }
     */
    public static MethodHandle I_RpcFreeSystemHandleCollection$handle() {
        return I_RpcFreeSystemHandleCollection.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long I_RpcFreeSystemHandleCollection(void *CallObj, unsigned long FreeFlags)
     * }
     */
    public static MemorySegment I_RpcFreeSystemHandleCollection$address() {
        return I_RpcFreeSystemHandleCollection.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long I_RpcFreeSystemHandleCollection(void *CallObj, unsigned long FreeFlags)
     * }
     */
    public static int I_RpcFreeSystemHandleCollection(MemorySegment CallObj, int FreeFlags) {
        var mh$ = I_RpcFreeSystemHandleCollection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcFreeSystemHandleCollection", CallObj, FreeFlags);
            }
            return (int)mh$.invokeExact(CallObj, FreeFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcSetSystemHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_CHAR,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcSetSystemHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSetSystemHandle(void *Handle, unsigned char Type, unsigned long AccessMask, void *CallObj, unsigned long *HandleIndex)
     * }
     */
    public static FunctionDescriptor I_RpcSetSystemHandle$descriptor() {
        return I_RpcSetSystemHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSetSystemHandle(void *Handle, unsigned char Type, unsigned long AccessMask, void *CallObj, unsigned long *HandleIndex)
     * }
     */
    public static MethodHandle I_RpcSetSystemHandle$handle() {
        return I_RpcSetSystemHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSetSystemHandle(void *Handle, unsigned char Type, unsigned long AccessMask, void *CallObj, unsigned long *HandleIndex)
     * }
     */
    public static MemorySegment I_RpcSetSystemHandle$address() {
        return I_RpcSetSystemHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSetSystemHandle(void *Handle, unsigned char Type, unsigned long AccessMask, void *CallObj, unsigned long *HandleIndex)
     * }
     */
    public static int I_RpcSetSystemHandle(MemorySegment Handle, byte Type, int AccessMask, MemorySegment CallObj, MemorySegment HandleIndex) {
        var mh$ = I_RpcSetSystemHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcSetSystemHandle", Handle, Type, AccessMask, CallObj, HandleIndex);
            }
            return (int)mh$.invokeExact(Handle, Type, AccessMask, CallObj, HandleIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcGetSystemHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_CHAR,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcGetSystemHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetSystemHandle(unsigned char *pMemory, unsigned char Type, unsigned long AccessMask, unsigned long HandleIndex, void *CallObj)
     * }
     */
    public static FunctionDescriptor I_RpcGetSystemHandle$descriptor() {
        return I_RpcGetSystemHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetSystemHandle(unsigned char *pMemory, unsigned char Type, unsigned long AccessMask, unsigned long HandleIndex, void *CallObj)
     * }
     */
    public static MethodHandle I_RpcGetSystemHandle$handle() {
        return I_RpcGetSystemHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetSystemHandle(unsigned char *pMemory, unsigned char Type, unsigned long AccessMask, unsigned long HandleIndex, void *CallObj)
     * }
     */
    public static MemorySegment I_RpcGetSystemHandle$address() {
        return I_RpcGetSystemHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetSystemHandle(unsigned char *pMemory, unsigned char Type, unsigned long AccessMask, unsigned long HandleIndex, void *CallObj)
     * }
     */
    public static int I_RpcGetSystemHandle(MemorySegment pMemory, byte Type, int AccessMask, int HandleIndex, MemorySegment CallObj) {
        var mh$ = I_RpcGetSystemHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcGetSystemHandle", pMemory, Type, AccessMask, HandleIndex, CallObj);
            }
            return (int)mh$.invokeExact(pMemory, Type, AccessMask, HandleIndex, CallObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcFreeSystemHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_CHAR,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcFreeSystemHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void I_RpcFreeSystemHandle(unsigned char Type, void *Handle)
     * }
     */
    public static FunctionDescriptor I_RpcFreeSystemHandle$descriptor() {
        return I_RpcFreeSystemHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void I_RpcFreeSystemHandle(unsigned char Type, void *Handle)
     * }
     */
    public static MethodHandle I_RpcFreeSystemHandle$handle() {
        return I_RpcFreeSystemHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void I_RpcFreeSystemHandle(unsigned char Type, void *Handle)
     * }
     */
    public static MemorySegment I_RpcFreeSystemHandle$address() {
        return I_RpcFreeSystemHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void I_RpcFreeSystemHandle(unsigned char Type, void *Handle)
     * }
     */
    public static void I_RpcFreeSystemHandle(byte Type, MemorySegment Handle) {
        var mh$ = I_RpcFreeSystemHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcFreeSystemHandle", Type, Handle);
            }
            mh$.invokeExact(Type, Handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcPauseExecution {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcPauseExecution");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void I_RpcPauseExecution(unsigned long Milliseconds)
     * }
     */
    public static FunctionDescriptor I_RpcPauseExecution$descriptor() {
        return I_RpcPauseExecution.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void I_RpcPauseExecution(unsigned long Milliseconds)
     * }
     */
    public static MethodHandle I_RpcPauseExecution$handle() {
        return I_RpcPauseExecution.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void I_RpcPauseExecution(unsigned long Milliseconds)
     * }
     */
    public static MemorySegment I_RpcPauseExecution$address() {
        return I_RpcPauseExecution.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void I_RpcPauseExecution(unsigned long Milliseconds)
     * }
     */
    public static void I_RpcPauseExecution(int Milliseconds) {
        var mh$ = I_RpcPauseExecution.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcPauseExecution", Milliseconds);
            }
            mh$.invokeExact(Milliseconds);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcGetExtendedError {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcGetExtendedError");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetExtendedError()
     * }
     */
    public static FunctionDescriptor I_RpcGetExtendedError$descriptor() {
        return I_RpcGetExtendedError.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetExtendedError()
     * }
     */
    public static MethodHandle I_RpcGetExtendedError$handle() {
        return I_RpcGetExtendedError.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetExtendedError()
     * }
     */
    public static MemorySegment I_RpcGetExtendedError$address() {
        return I_RpcGetExtendedError.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetExtendedError()
     * }
     */
    public static int I_RpcGetExtendedError() {
        var mh$ = I_RpcGetExtendedError.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcGetExtendedError");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int MarshalDirectionMarshal = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION.MarshalDirectionMarshal = 0
     * }
     */
    public static int MarshalDirectionMarshal() {
        return MarshalDirectionMarshal;
    }
    private static final int MarshalDirectionUnmarshal = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION.MarshalDirectionUnmarshal = 1
     * }
     */
    public static int MarshalDirectionUnmarshal() {
        return MarshalDirectionUnmarshal;
    }

    private static class I_RpcSystemHandleTypeSpecificWork {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_CHAR,
            wgl_h.C_CHAR,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcSystemHandleTypeSpecificWork");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSystemHandleTypeSpecificWork(void *Handle, unsigned char ActualType, unsigned char IdlType, LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION MarshalDirection)
     * }
     */
    public static FunctionDescriptor I_RpcSystemHandleTypeSpecificWork$descriptor() {
        return I_RpcSystemHandleTypeSpecificWork.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSystemHandleTypeSpecificWork(void *Handle, unsigned char ActualType, unsigned char IdlType, LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION MarshalDirection)
     * }
     */
    public static MethodHandle I_RpcSystemHandleTypeSpecificWork$handle() {
        return I_RpcSystemHandleTypeSpecificWork.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSystemHandleTypeSpecificWork(void *Handle, unsigned char ActualType, unsigned char IdlType, LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION MarshalDirection)
     * }
     */
    public static MemorySegment I_RpcSystemHandleTypeSpecificWork$address() {
        return I_RpcSystemHandleTypeSpecificWork.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSystemHandleTypeSpecificWork(void *Handle, unsigned char ActualType, unsigned char IdlType, LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION MarshalDirection)
     * }
     */
    public static int I_RpcSystemHandleTypeSpecificWork(MemorySegment Handle, byte ActualType, byte IdlType, int MarshalDirection) {
        var mh$ = I_RpcSystemHandleTypeSpecificWork.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcSystemHandleTypeSpecificWork", Handle, ActualType, IdlType, MarshalDirection);
            }
            return (int)mh$.invokeExact(Handle, ActualType, IdlType, MarshalDirection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcMonitorAssociation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcMonitorAssociation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcMonitorAssociation(RPC_BINDING_HANDLE Handle, PRPC_RUNDOWN RundownRoutine, void *Context)
     * }
     */
    public static FunctionDescriptor I_RpcMonitorAssociation$descriptor() {
        return I_RpcMonitorAssociation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcMonitorAssociation(RPC_BINDING_HANDLE Handle, PRPC_RUNDOWN RundownRoutine, void *Context)
     * }
     */
    public static MethodHandle I_RpcMonitorAssociation$handle() {
        return I_RpcMonitorAssociation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcMonitorAssociation(RPC_BINDING_HANDLE Handle, PRPC_RUNDOWN RundownRoutine, void *Context)
     * }
     */
    public static MemorySegment I_RpcMonitorAssociation$address() {
        return I_RpcMonitorAssociation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcMonitorAssociation(RPC_BINDING_HANDLE Handle, PRPC_RUNDOWN RundownRoutine, void *Context)
     * }
     */
    public static int I_RpcMonitorAssociation(MemorySegment Handle, MemorySegment RundownRoutine, MemorySegment Context) {
        var mh$ = I_RpcMonitorAssociation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcMonitorAssociation", Handle, RundownRoutine, Context);
            }
            return (int)mh$.invokeExact(Handle, RundownRoutine, Context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcStopMonitorAssociation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcStopMonitorAssociation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcStopMonitorAssociation(RPC_BINDING_HANDLE Handle)
     * }
     */
    public static FunctionDescriptor I_RpcStopMonitorAssociation$descriptor() {
        return I_RpcStopMonitorAssociation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcStopMonitorAssociation(RPC_BINDING_HANDLE Handle)
     * }
     */
    public static MethodHandle I_RpcStopMonitorAssociation$handle() {
        return I_RpcStopMonitorAssociation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcStopMonitorAssociation(RPC_BINDING_HANDLE Handle)
     * }
     */
    public static MemorySegment I_RpcStopMonitorAssociation$address() {
        return I_RpcStopMonitorAssociation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcStopMonitorAssociation(RPC_BINDING_HANDLE Handle)
     * }
     */
    public static int I_RpcStopMonitorAssociation(MemorySegment Handle) {
        var mh$ = I_RpcStopMonitorAssociation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcStopMonitorAssociation", Handle);
            }
            return (int)mh$.invokeExact(Handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcGetCurrentCallHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcGetCurrentCallHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_BINDING_HANDLE I_RpcGetCurrentCallHandle()
     * }
     */
    public static FunctionDescriptor I_RpcGetCurrentCallHandle$descriptor() {
        return I_RpcGetCurrentCallHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_BINDING_HANDLE I_RpcGetCurrentCallHandle()
     * }
     */
    public static MethodHandle I_RpcGetCurrentCallHandle$handle() {
        return I_RpcGetCurrentCallHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_BINDING_HANDLE I_RpcGetCurrentCallHandle()
     * }
     */
    public static MemorySegment I_RpcGetCurrentCallHandle$address() {
        return I_RpcGetCurrentCallHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_BINDING_HANDLE I_RpcGetCurrentCallHandle()
     * }
     */
    public static MemorySegment I_RpcGetCurrentCallHandle() {
        var mh$ = I_RpcGetCurrentCallHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcGetCurrentCallHandle");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcGetAssociationContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcGetAssociationContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetAssociationContext(RPC_BINDING_HANDLE BindingHandle, void **AssociationContext)
     * }
     */
    public static FunctionDescriptor I_RpcGetAssociationContext$descriptor() {
        return I_RpcGetAssociationContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetAssociationContext(RPC_BINDING_HANDLE BindingHandle, void **AssociationContext)
     * }
     */
    public static MethodHandle I_RpcGetAssociationContext$handle() {
        return I_RpcGetAssociationContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetAssociationContext(RPC_BINDING_HANDLE BindingHandle, void **AssociationContext)
     * }
     */
    public static MemorySegment I_RpcGetAssociationContext$address() {
        return I_RpcGetAssociationContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetAssociationContext(RPC_BINDING_HANDLE BindingHandle, void **AssociationContext)
     * }
     */
    public static int I_RpcGetAssociationContext(MemorySegment BindingHandle, MemorySegment AssociationContext) {
        var mh$ = I_RpcGetAssociationContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcGetAssociationContext", BindingHandle, AssociationContext);
            }
            return (int)mh$.invokeExact(BindingHandle, AssociationContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcGetServerContextList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcGetServerContextList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *I_RpcGetServerContextList(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static FunctionDescriptor I_RpcGetServerContextList$descriptor() {
        return I_RpcGetServerContextList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *I_RpcGetServerContextList(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static MethodHandle I_RpcGetServerContextList$handle() {
        return I_RpcGetServerContextList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *I_RpcGetServerContextList(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static MemorySegment I_RpcGetServerContextList$address() {
        return I_RpcGetServerContextList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *I_RpcGetServerContextList(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static MemorySegment I_RpcGetServerContextList(MemorySegment BindingHandle) {
        var mh$ = I_RpcGetServerContextList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcGetServerContextList", BindingHandle);
            }
            return (MemorySegment)mh$.invokeExact(BindingHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcSetServerContextList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcSetServerContextList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void I_RpcSetServerContextList(RPC_BINDING_HANDLE BindingHandle, void *ServerContextList)
     * }
     */
    public static FunctionDescriptor I_RpcSetServerContextList$descriptor() {
        return I_RpcSetServerContextList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void I_RpcSetServerContextList(RPC_BINDING_HANDLE BindingHandle, void *ServerContextList)
     * }
     */
    public static MethodHandle I_RpcSetServerContextList$handle() {
        return I_RpcSetServerContextList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void I_RpcSetServerContextList(RPC_BINDING_HANDLE BindingHandle, void *ServerContextList)
     * }
     */
    public static MemorySegment I_RpcSetServerContextList$address() {
        return I_RpcSetServerContextList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void I_RpcSetServerContextList(RPC_BINDING_HANDLE BindingHandle, void *ServerContextList)
     * }
     */
    public static void I_RpcSetServerContextList(MemorySegment BindingHandle, MemorySegment ServerContextList) {
        var mh$ = I_RpcSetServerContextList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcSetServerContextList", BindingHandle, ServerContextList);
            }
            mh$.invokeExact(BindingHandle, ServerContextList);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcNsInterfaceExported {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcNsInterfaceExported");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsInterfaceExported(unsigned long EntryNameSyntax, unsigned short *EntryName, RPC_SERVER_INTERFACE *RpcInterfaceInformation)
     * }
     */
    public static FunctionDescriptor I_RpcNsInterfaceExported$descriptor() {
        return I_RpcNsInterfaceExported.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsInterfaceExported(unsigned long EntryNameSyntax, unsigned short *EntryName, RPC_SERVER_INTERFACE *RpcInterfaceInformation)
     * }
     */
    public static MethodHandle I_RpcNsInterfaceExported$handle() {
        return I_RpcNsInterfaceExported.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsInterfaceExported(unsigned long EntryNameSyntax, unsigned short *EntryName, RPC_SERVER_INTERFACE *RpcInterfaceInformation)
     * }
     */
    public static MemorySegment I_RpcNsInterfaceExported$address() {
        return I_RpcNsInterfaceExported.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsInterfaceExported(unsigned long EntryNameSyntax, unsigned short *EntryName, RPC_SERVER_INTERFACE *RpcInterfaceInformation)
     * }
     */
    public static int I_RpcNsInterfaceExported(int EntryNameSyntax, MemorySegment EntryName, MemorySegment RpcInterfaceInformation) {
        var mh$ = I_RpcNsInterfaceExported.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcNsInterfaceExported", EntryNameSyntax, EntryName, RpcInterfaceInformation);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, RpcInterfaceInformation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcNsInterfaceUnexported {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcNsInterfaceUnexported");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsInterfaceUnexported(unsigned long EntryNameSyntax, unsigned short *EntryName, RPC_SERVER_INTERFACE *RpcInterfaceInformation)
     * }
     */
    public static FunctionDescriptor I_RpcNsInterfaceUnexported$descriptor() {
        return I_RpcNsInterfaceUnexported.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsInterfaceUnexported(unsigned long EntryNameSyntax, unsigned short *EntryName, RPC_SERVER_INTERFACE *RpcInterfaceInformation)
     * }
     */
    public static MethodHandle I_RpcNsInterfaceUnexported$handle() {
        return I_RpcNsInterfaceUnexported.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsInterfaceUnexported(unsigned long EntryNameSyntax, unsigned short *EntryName, RPC_SERVER_INTERFACE *RpcInterfaceInformation)
     * }
     */
    public static MemorySegment I_RpcNsInterfaceUnexported$address() {
        return I_RpcNsInterfaceUnexported.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsInterfaceUnexported(unsigned long EntryNameSyntax, unsigned short *EntryName, RPC_SERVER_INTERFACE *RpcInterfaceInformation)
     * }
     */
    public static int I_RpcNsInterfaceUnexported(int EntryNameSyntax, MemorySegment EntryName, MemorySegment RpcInterfaceInformation) {
        var mh$ = I_RpcNsInterfaceUnexported.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcNsInterfaceUnexported", EntryNameSyntax, EntryName, RpcInterfaceInformation);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, RpcInterfaceInformation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingToStaticStringBindingW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcBindingToStaticStringBindingW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingToStaticStringBindingW(RPC_BINDING_HANDLE Binding, unsigned short **StringBinding)
     * }
     */
    public static FunctionDescriptor I_RpcBindingToStaticStringBindingW$descriptor() {
        return I_RpcBindingToStaticStringBindingW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingToStaticStringBindingW(RPC_BINDING_HANDLE Binding, unsigned short **StringBinding)
     * }
     */
    public static MethodHandle I_RpcBindingToStaticStringBindingW$handle() {
        return I_RpcBindingToStaticStringBindingW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingToStaticStringBindingW(RPC_BINDING_HANDLE Binding, unsigned short **StringBinding)
     * }
     */
    public static MemorySegment I_RpcBindingToStaticStringBindingW$address() {
        return I_RpcBindingToStaticStringBindingW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingToStaticStringBindingW(RPC_BINDING_HANDLE Binding, unsigned short **StringBinding)
     * }
     */
    public static int I_RpcBindingToStaticStringBindingW(MemorySegment Binding, MemorySegment StringBinding) {
        var mh$ = I_RpcBindingToStaticStringBindingW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingToStaticStringBindingW", Binding, StringBinding);
            }
            return (int)mh$.invokeExact(Binding, StringBinding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingInqSecurityContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcBindingInqSecurityContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqSecurityContext(RPC_BINDING_HANDLE Binding, void **SecurityContextHandle)
     * }
     */
    public static FunctionDescriptor I_RpcBindingInqSecurityContext$descriptor() {
        return I_RpcBindingInqSecurityContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqSecurityContext(RPC_BINDING_HANDLE Binding, void **SecurityContextHandle)
     * }
     */
    public static MethodHandle I_RpcBindingInqSecurityContext$handle() {
        return I_RpcBindingInqSecurityContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqSecurityContext(RPC_BINDING_HANDLE Binding, void **SecurityContextHandle)
     * }
     */
    public static MemorySegment I_RpcBindingInqSecurityContext$address() {
        return I_RpcBindingInqSecurityContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqSecurityContext(RPC_BINDING_HANDLE Binding, void **SecurityContextHandle)
     * }
     */
    public static int I_RpcBindingInqSecurityContext(MemorySegment Binding, MemorySegment SecurityContextHandle) {
        var mh$ = I_RpcBindingInqSecurityContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingInqSecurityContext", Binding, SecurityContextHandle);
            }
            return (int)mh$.invokeExact(Binding, SecurityContextHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_SEC_CONTEXT_KEY_INFO {
     *     unsigned long EncryptAlgorithm;
     *     unsigned long KeySize;
     *     unsigned long SignatureAlgorithm;
     * } *PRPC_SEC_CONTEXT_KEY_INFO
     * }
     */
    public static final AddressLayout PRPC_SEC_CONTEXT_KEY_INFO = wgl_h.C_POINTER;

    private static class I_RpcBindingInqSecurityContextKeyInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcBindingInqSecurityContextKeyInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqSecurityContextKeyInfo(RPC_BINDING_HANDLE Binding, void *KeyInfo)
     * }
     */
    public static FunctionDescriptor I_RpcBindingInqSecurityContextKeyInfo$descriptor() {
        return I_RpcBindingInqSecurityContextKeyInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqSecurityContextKeyInfo(RPC_BINDING_HANDLE Binding, void *KeyInfo)
     * }
     */
    public static MethodHandle I_RpcBindingInqSecurityContextKeyInfo$handle() {
        return I_RpcBindingInqSecurityContextKeyInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqSecurityContextKeyInfo(RPC_BINDING_HANDLE Binding, void *KeyInfo)
     * }
     */
    public static MemorySegment I_RpcBindingInqSecurityContextKeyInfo$address() {
        return I_RpcBindingInqSecurityContextKeyInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqSecurityContextKeyInfo(RPC_BINDING_HANDLE Binding, void *KeyInfo)
     * }
     */
    public static int I_RpcBindingInqSecurityContextKeyInfo(MemorySegment Binding, MemorySegment KeyInfo) {
        var mh$ = I_RpcBindingInqSecurityContextKeyInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingInqSecurityContextKeyInfo", Binding, KeyInfo);
            }
            return (int)mh$.invokeExact(Binding, KeyInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingInqWireIdForSnego {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcBindingInqWireIdForSnego");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqWireIdForSnego(RPC_BINDING_HANDLE Binding, unsigned char *WireId)
     * }
     */
    public static FunctionDescriptor I_RpcBindingInqWireIdForSnego$descriptor() {
        return I_RpcBindingInqWireIdForSnego.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqWireIdForSnego(RPC_BINDING_HANDLE Binding, unsigned char *WireId)
     * }
     */
    public static MethodHandle I_RpcBindingInqWireIdForSnego$handle() {
        return I_RpcBindingInqWireIdForSnego.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqWireIdForSnego(RPC_BINDING_HANDLE Binding, unsigned char *WireId)
     * }
     */
    public static MemorySegment I_RpcBindingInqWireIdForSnego$address() {
        return I_RpcBindingInqWireIdForSnego.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqWireIdForSnego(RPC_BINDING_HANDLE Binding, unsigned char *WireId)
     * }
     */
    public static int I_RpcBindingInqWireIdForSnego(MemorySegment Binding, MemorySegment WireId) {
        var mh$ = I_RpcBindingInqWireIdForSnego.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingInqWireIdForSnego", Binding, WireId);
            }
            return (int)mh$.invokeExact(Binding, WireId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingInqMarshalledTargetInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcBindingInqMarshalledTargetInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqMarshalledTargetInfo(RPC_BINDING_HANDLE Binding, unsigned long *MarshalledTargetInfoSize, RPC_CSTR *MarshalledTargetInfo)
     * }
     */
    public static FunctionDescriptor I_RpcBindingInqMarshalledTargetInfo$descriptor() {
        return I_RpcBindingInqMarshalledTargetInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqMarshalledTargetInfo(RPC_BINDING_HANDLE Binding, unsigned long *MarshalledTargetInfoSize, RPC_CSTR *MarshalledTargetInfo)
     * }
     */
    public static MethodHandle I_RpcBindingInqMarshalledTargetInfo$handle() {
        return I_RpcBindingInqMarshalledTargetInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqMarshalledTargetInfo(RPC_BINDING_HANDLE Binding, unsigned long *MarshalledTargetInfoSize, RPC_CSTR *MarshalledTargetInfo)
     * }
     */
    public static MemorySegment I_RpcBindingInqMarshalledTargetInfo$address() {
        return I_RpcBindingInqMarshalledTargetInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqMarshalledTargetInfo(RPC_BINDING_HANDLE Binding, unsigned long *MarshalledTargetInfoSize, RPC_CSTR *MarshalledTargetInfo)
     * }
     */
    public static int I_RpcBindingInqMarshalledTargetInfo(MemorySegment Binding, MemorySegment MarshalledTargetInfoSize, MemorySegment MarshalledTargetInfo) {
        var mh$ = I_RpcBindingInqMarshalledTargetInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingInqMarshalledTargetInfo", Binding, MarshalledTargetInfoSize, MarshalledTargetInfo);
            }
            return (int)mh$.invokeExact(Binding, MarshalledTargetInfoSize, MarshalledTargetInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingInqLocalClientPID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcBindingInqLocalClientPID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqLocalClientPID(RPC_BINDING_HANDLE Binding, unsigned long *Pid)
     * }
     */
    public static FunctionDescriptor I_RpcBindingInqLocalClientPID$descriptor() {
        return I_RpcBindingInqLocalClientPID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqLocalClientPID(RPC_BINDING_HANDLE Binding, unsigned long *Pid)
     * }
     */
    public static MethodHandle I_RpcBindingInqLocalClientPID$handle() {
        return I_RpcBindingInqLocalClientPID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqLocalClientPID(RPC_BINDING_HANDLE Binding, unsigned long *Pid)
     * }
     */
    public static MemorySegment I_RpcBindingInqLocalClientPID$address() {
        return I_RpcBindingInqLocalClientPID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqLocalClientPID(RPC_BINDING_HANDLE Binding, unsigned long *Pid)
     * }
     */
    public static int I_RpcBindingInqLocalClientPID(MemorySegment Binding, MemorySegment Pid) {
        var mh$ = I_RpcBindingInqLocalClientPID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingInqLocalClientPID", Binding, Pid);
            }
            return (int)mh$.invokeExact(Binding, Pid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingHandleToAsyncHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcBindingHandleToAsyncHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingHandleToAsyncHandle(RPC_BINDING_HANDLE Binding, void **AsyncHandle)
     * }
     */
    public static FunctionDescriptor I_RpcBindingHandleToAsyncHandle$descriptor() {
        return I_RpcBindingHandleToAsyncHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingHandleToAsyncHandle(RPC_BINDING_HANDLE Binding, void **AsyncHandle)
     * }
     */
    public static MethodHandle I_RpcBindingHandleToAsyncHandle$handle() {
        return I_RpcBindingHandleToAsyncHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingHandleToAsyncHandle(RPC_BINDING_HANDLE Binding, void **AsyncHandle)
     * }
     */
    public static MemorySegment I_RpcBindingHandleToAsyncHandle$address() {
        return I_RpcBindingHandleToAsyncHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingHandleToAsyncHandle(RPC_BINDING_HANDLE Binding, void **AsyncHandle)
     * }
     */
    public static int I_RpcBindingHandleToAsyncHandle(MemorySegment Binding, MemorySegment AsyncHandle) {
        var mh$ = I_RpcBindingHandleToAsyncHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingHandleToAsyncHandle", Binding, AsyncHandle);
            }
            return (int)mh$.invokeExact(Binding, AsyncHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcNsBindingSetEntryNameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcNsBindingSetEntryNameW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsBindingSetEntryNameW(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_WSTR EntryName)
     * }
     */
    public static FunctionDescriptor I_RpcNsBindingSetEntryNameW$descriptor() {
        return I_RpcNsBindingSetEntryNameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsBindingSetEntryNameW(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_WSTR EntryName)
     * }
     */
    public static MethodHandle I_RpcNsBindingSetEntryNameW$handle() {
        return I_RpcNsBindingSetEntryNameW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsBindingSetEntryNameW(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_WSTR EntryName)
     * }
     */
    public static MemorySegment I_RpcNsBindingSetEntryNameW$address() {
        return I_RpcNsBindingSetEntryNameW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsBindingSetEntryNameW(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_WSTR EntryName)
     * }
     */
    public static int I_RpcNsBindingSetEntryNameW(MemorySegment Binding, int EntryNameSyntax, MemorySegment EntryName) {
        var mh$ = I_RpcNsBindingSetEntryNameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcNsBindingSetEntryNameW", Binding, EntryNameSyntax, EntryName);
            }
            return (int)mh$.invokeExact(Binding, EntryNameSyntax, EntryName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcNsBindingSetEntryNameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcNsBindingSetEntryNameA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsBindingSetEntryNameA(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_CSTR EntryName)
     * }
     */
    public static FunctionDescriptor I_RpcNsBindingSetEntryNameA$descriptor() {
        return I_RpcNsBindingSetEntryNameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsBindingSetEntryNameA(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_CSTR EntryName)
     * }
     */
    public static MethodHandle I_RpcNsBindingSetEntryNameA$handle() {
        return I_RpcNsBindingSetEntryNameA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsBindingSetEntryNameA(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_CSTR EntryName)
     * }
     */
    public static MemorySegment I_RpcNsBindingSetEntryNameA$address() {
        return I_RpcNsBindingSetEntryNameA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsBindingSetEntryNameA(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_CSTR EntryName)
     * }
     */
    public static int I_RpcNsBindingSetEntryNameA(MemorySegment Binding, int EntryNameSyntax, MemorySegment EntryName) {
        var mh$ = I_RpcNsBindingSetEntryNameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcNsBindingSetEntryNameA", Binding, EntryNameSyntax, EntryName);
            }
            return (int)mh$.invokeExact(Binding, EntryNameSyntax, EntryName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerUseProtseqEp2A {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcServerUseProtseqEp2A");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseqEp2A(RPC_CSTR NetworkAddress, RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static FunctionDescriptor I_RpcServerUseProtseqEp2A$descriptor() {
        return I_RpcServerUseProtseqEp2A.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseqEp2A(RPC_CSTR NetworkAddress, RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static MethodHandle I_RpcServerUseProtseqEp2A$handle() {
        return I_RpcServerUseProtseqEp2A.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseqEp2A(RPC_CSTR NetworkAddress, RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static MemorySegment I_RpcServerUseProtseqEp2A$address() {
        return I_RpcServerUseProtseqEp2A.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseqEp2A(RPC_CSTR NetworkAddress, RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static int I_RpcServerUseProtseqEp2A(MemorySegment NetworkAddress, MemorySegment Protseq, int MaxCalls, MemorySegment Endpoint, MemorySegment SecurityDescriptor, MemorySegment Policy) {
        var mh$ = I_RpcServerUseProtseqEp2A.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerUseProtseqEp2A", NetworkAddress, Protseq, MaxCalls, Endpoint, SecurityDescriptor, Policy);
            }
            return (int)mh$.invokeExact(NetworkAddress, Protseq, MaxCalls, Endpoint, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerUseProtseqEp2W {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcServerUseProtseqEp2W");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseqEp2W(RPC_WSTR NetworkAddress, RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static FunctionDescriptor I_RpcServerUseProtseqEp2W$descriptor() {
        return I_RpcServerUseProtseqEp2W.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseqEp2W(RPC_WSTR NetworkAddress, RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static MethodHandle I_RpcServerUseProtseqEp2W$handle() {
        return I_RpcServerUseProtseqEp2W.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseqEp2W(RPC_WSTR NetworkAddress, RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static MemorySegment I_RpcServerUseProtseqEp2W$address() {
        return I_RpcServerUseProtseqEp2W.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseqEp2W(RPC_WSTR NetworkAddress, RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static int I_RpcServerUseProtseqEp2W(MemorySegment NetworkAddress, MemorySegment Protseq, int MaxCalls, MemorySegment Endpoint, MemorySegment SecurityDescriptor, MemorySegment Policy) {
        var mh$ = I_RpcServerUseProtseqEp2W.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerUseProtseqEp2W", NetworkAddress, Protseq, MaxCalls, Endpoint, SecurityDescriptor, Policy);
            }
            return (int)mh$.invokeExact(NetworkAddress, Protseq, MaxCalls, Endpoint, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerUseProtseq2W {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcServerUseProtseq2W");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseq2W(RPC_WSTR NetworkAddress, RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static FunctionDescriptor I_RpcServerUseProtseq2W$descriptor() {
        return I_RpcServerUseProtseq2W.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseq2W(RPC_WSTR NetworkAddress, RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static MethodHandle I_RpcServerUseProtseq2W$handle() {
        return I_RpcServerUseProtseq2W.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseq2W(RPC_WSTR NetworkAddress, RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static MemorySegment I_RpcServerUseProtseq2W$address() {
        return I_RpcServerUseProtseq2W.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseq2W(RPC_WSTR NetworkAddress, RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static int I_RpcServerUseProtseq2W(MemorySegment NetworkAddress, MemorySegment Protseq, int MaxCalls, MemorySegment SecurityDescriptor, MemorySegment Policy) {
        var mh$ = I_RpcServerUseProtseq2W.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerUseProtseq2W", NetworkAddress, Protseq, MaxCalls, SecurityDescriptor, Policy);
            }
            return (int)mh$.invokeExact(NetworkAddress, Protseq, MaxCalls, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerUseProtseq2A {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcServerUseProtseq2A");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseq2A(RPC_CSTR NetworkAddress, RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static FunctionDescriptor I_RpcServerUseProtseq2A$descriptor() {
        return I_RpcServerUseProtseq2A.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseq2A(RPC_CSTR NetworkAddress, RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static MethodHandle I_RpcServerUseProtseq2A$handle() {
        return I_RpcServerUseProtseq2A.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseq2A(RPC_CSTR NetworkAddress, RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static MemorySegment I_RpcServerUseProtseq2A$address() {
        return I_RpcServerUseProtseq2A.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseq2A(RPC_CSTR NetworkAddress, RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static int I_RpcServerUseProtseq2A(MemorySegment NetworkAddress, MemorySegment Protseq, int MaxCalls, MemorySegment SecurityDescriptor, MemorySegment Policy) {
        var mh$ = I_RpcServerUseProtseq2A.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerUseProtseq2A", NetworkAddress, Protseq, MaxCalls, SecurityDescriptor, Policy);
            }
            return (int)mh$.invokeExact(NetworkAddress, Protseq, MaxCalls, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerStartService {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcServerStartService");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerStartService(RPC_WSTR Protseq, RPC_WSTR Endpoint, RPC_IF_HANDLE IfSpec)
     * }
     */
    public static FunctionDescriptor I_RpcServerStartService$descriptor() {
        return I_RpcServerStartService.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerStartService(RPC_WSTR Protseq, RPC_WSTR Endpoint, RPC_IF_HANDLE IfSpec)
     * }
     */
    public static MethodHandle I_RpcServerStartService$handle() {
        return I_RpcServerStartService.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerStartService(RPC_WSTR Protseq, RPC_WSTR Endpoint, RPC_IF_HANDLE IfSpec)
     * }
     */
    public static MemorySegment I_RpcServerStartService$address() {
        return I_RpcServerStartService.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerStartService(RPC_WSTR Protseq, RPC_WSTR Endpoint, RPC_IF_HANDLE IfSpec)
     * }
     */
    public static int I_RpcServerStartService(MemorySegment Protseq, MemorySegment Endpoint, MemorySegment IfSpec) {
        var mh$ = I_RpcServerStartService.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerStartService", Protseq, Endpoint, IfSpec);
            }
            return (int)mh$.invokeExact(Protseq, Endpoint, IfSpec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingInqDynamicEndpointW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcBindingInqDynamicEndpointW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqDynamicEndpointW(RPC_BINDING_HANDLE Binding, RPC_WSTR *DynamicEndpoint)
     * }
     */
    public static FunctionDescriptor I_RpcBindingInqDynamicEndpointW$descriptor() {
        return I_RpcBindingInqDynamicEndpointW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqDynamicEndpointW(RPC_BINDING_HANDLE Binding, RPC_WSTR *DynamicEndpoint)
     * }
     */
    public static MethodHandle I_RpcBindingInqDynamicEndpointW$handle() {
        return I_RpcBindingInqDynamicEndpointW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqDynamicEndpointW(RPC_BINDING_HANDLE Binding, RPC_WSTR *DynamicEndpoint)
     * }
     */
    public static MemorySegment I_RpcBindingInqDynamicEndpointW$address() {
        return I_RpcBindingInqDynamicEndpointW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqDynamicEndpointW(RPC_BINDING_HANDLE Binding, RPC_WSTR *DynamicEndpoint)
     * }
     */
    public static int I_RpcBindingInqDynamicEndpointW(MemorySegment Binding, MemorySegment DynamicEndpoint) {
        var mh$ = I_RpcBindingInqDynamicEndpointW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingInqDynamicEndpointW", Binding, DynamicEndpoint);
            }
            return (int)mh$.invokeExact(Binding, DynamicEndpoint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingInqDynamicEndpointA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcBindingInqDynamicEndpointA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqDynamicEndpointA(RPC_BINDING_HANDLE Binding, RPC_CSTR *DynamicEndpoint)
     * }
     */
    public static FunctionDescriptor I_RpcBindingInqDynamicEndpointA$descriptor() {
        return I_RpcBindingInqDynamicEndpointA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqDynamicEndpointA(RPC_BINDING_HANDLE Binding, RPC_CSTR *DynamicEndpoint)
     * }
     */
    public static MethodHandle I_RpcBindingInqDynamicEndpointA$handle() {
        return I_RpcBindingInqDynamicEndpointA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqDynamicEndpointA(RPC_BINDING_HANDLE Binding, RPC_CSTR *DynamicEndpoint)
     * }
     */
    public static MemorySegment I_RpcBindingInqDynamicEndpointA$address() {
        return I_RpcBindingInqDynamicEndpointA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqDynamicEndpointA(RPC_BINDING_HANDLE Binding, RPC_CSTR *DynamicEndpoint)
     * }
     */
    public static int I_RpcBindingInqDynamicEndpointA(MemorySegment Binding, MemorySegment DynamicEndpoint) {
        var mh$ = I_RpcBindingInqDynamicEndpointA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingInqDynamicEndpointA", Binding, DynamicEndpoint);
            }
            return (int)mh$.invokeExact(Binding, DynamicEndpoint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerCheckClientRestriction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcServerCheckClientRestriction");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerCheckClientRestriction(RPC_BINDING_HANDLE Context)
     * }
     */
    public static FunctionDescriptor I_RpcServerCheckClientRestriction$descriptor() {
        return I_RpcServerCheckClientRestriction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerCheckClientRestriction(RPC_BINDING_HANDLE Context)
     * }
     */
    public static MethodHandle I_RpcServerCheckClientRestriction$handle() {
        return I_RpcServerCheckClientRestriction.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerCheckClientRestriction(RPC_BINDING_HANDLE Context)
     * }
     */
    public static MemorySegment I_RpcServerCheckClientRestriction$address() {
        return I_RpcServerCheckClientRestriction.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerCheckClientRestriction(RPC_BINDING_HANDLE Context)
     * }
     */
    public static int I_RpcServerCheckClientRestriction(MemorySegment Context) {
        var mh$ = I_RpcServerCheckClientRestriction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerCheckClientRestriction", Context);
            }
            return (int)mh$.invokeExact(Context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingInqTransportType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcBindingInqTransportType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqTransportType(RPC_BINDING_HANDLE Binding, unsigned int *Type)
     * }
     */
    public static FunctionDescriptor I_RpcBindingInqTransportType$descriptor() {
        return I_RpcBindingInqTransportType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqTransportType(RPC_BINDING_HANDLE Binding, unsigned int *Type)
     * }
     */
    public static MethodHandle I_RpcBindingInqTransportType$handle() {
        return I_RpcBindingInqTransportType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqTransportType(RPC_BINDING_HANDLE Binding, unsigned int *Type)
     * }
     */
    public static MemorySegment I_RpcBindingInqTransportType$address() {
        return I_RpcBindingInqTransportType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqTransportType(RPC_BINDING_HANDLE Binding, unsigned int *Type)
     * }
     */
    public static int I_RpcBindingInqTransportType(MemorySegment Binding, MemorySegment Type) {
        var mh$ = I_RpcBindingInqTransportType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingInqTransportType", Binding, Type);
            }
            return (int)mh$.invokeExact(Binding, Type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcIfInqTransferSyntaxes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcIfInqTransferSyntaxes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcIfInqTransferSyntaxes(RPC_IF_HANDLE RpcIfHandle, RPC_TRANSFER_SYNTAX *TransferSyntaxes, unsigned int TransferSyntaxSize, unsigned int *TransferSyntaxCount)
     * }
     */
    public static FunctionDescriptor I_RpcIfInqTransferSyntaxes$descriptor() {
        return I_RpcIfInqTransferSyntaxes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcIfInqTransferSyntaxes(RPC_IF_HANDLE RpcIfHandle, RPC_TRANSFER_SYNTAX *TransferSyntaxes, unsigned int TransferSyntaxSize, unsigned int *TransferSyntaxCount)
     * }
     */
    public static MethodHandle I_RpcIfInqTransferSyntaxes$handle() {
        return I_RpcIfInqTransferSyntaxes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcIfInqTransferSyntaxes(RPC_IF_HANDLE RpcIfHandle, RPC_TRANSFER_SYNTAX *TransferSyntaxes, unsigned int TransferSyntaxSize, unsigned int *TransferSyntaxCount)
     * }
     */
    public static MemorySegment I_RpcIfInqTransferSyntaxes$address() {
        return I_RpcIfInqTransferSyntaxes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcIfInqTransferSyntaxes(RPC_IF_HANDLE RpcIfHandle, RPC_TRANSFER_SYNTAX *TransferSyntaxes, unsigned int TransferSyntaxSize, unsigned int *TransferSyntaxCount)
     * }
     */
    public static int I_RpcIfInqTransferSyntaxes(MemorySegment RpcIfHandle, MemorySegment TransferSyntaxes, int TransferSyntaxSize, MemorySegment TransferSyntaxCount) {
        var mh$ = I_RpcIfInqTransferSyntaxes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcIfInqTransferSyntaxes", RpcIfHandle, TransferSyntaxes, TransferSyntaxSize, TransferSyntaxCount);
            }
            return (int)mh$.invokeExact(RpcIfHandle, TransferSyntaxes, TransferSyntaxSize, TransferSyntaxCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_UuidCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_UuidCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_UuidCreate(UUID *Uuid)
     * }
     */
    public static FunctionDescriptor I_UuidCreate$descriptor() {
        return I_UuidCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_UuidCreate(UUID *Uuid)
     * }
     */
    public static MethodHandle I_UuidCreate$handle() {
        return I_UuidCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_UuidCreate(UUID *Uuid)
     * }
     */
    public static MemorySegment I_UuidCreate$address() {
        return I_UuidCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_UuidCreate(UUID *Uuid)
     * }
     */
    public static int I_UuidCreate(MemorySegment Uuid) {
        var mh$ = I_UuidCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_UuidCreate", Uuid);
            }
            return (int)mh$.invokeExact(Uuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcUninitializeNdrOle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcUninitializeNdrOle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void I_RpcUninitializeNdrOle()
     * }
     */
    public static FunctionDescriptor I_RpcUninitializeNdrOle$descriptor() {
        return I_RpcUninitializeNdrOle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void I_RpcUninitializeNdrOle()
     * }
     */
    public static MethodHandle I_RpcUninitializeNdrOle$handle() {
        return I_RpcUninitializeNdrOle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void I_RpcUninitializeNdrOle()
     * }
     */
    public static MemorySegment I_RpcUninitializeNdrOle$address() {
        return I_RpcUninitializeNdrOle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void I_RpcUninitializeNdrOle()
     * }
     */
    public static void I_RpcUninitializeNdrOle() {
        var mh$ = I_RpcUninitializeNdrOle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcUninitializeNdrOle");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingCopy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcBindingCopy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingCopy(RPC_BINDING_HANDLE SourceBinding, RPC_BINDING_HANDLE *DestinationBinding)
     * }
     */
    public static FunctionDescriptor I_RpcBindingCopy$descriptor() {
        return I_RpcBindingCopy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingCopy(RPC_BINDING_HANDLE SourceBinding, RPC_BINDING_HANDLE *DestinationBinding)
     * }
     */
    public static MethodHandle I_RpcBindingCopy$handle() {
        return I_RpcBindingCopy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingCopy(RPC_BINDING_HANDLE SourceBinding, RPC_BINDING_HANDLE *DestinationBinding)
     * }
     */
    public static MemorySegment I_RpcBindingCopy$address() {
        return I_RpcBindingCopy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingCopy(RPC_BINDING_HANDLE SourceBinding, RPC_BINDING_HANDLE *DestinationBinding)
     * }
     */
    public static int I_RpcBindingCopy(MemorySegment SourceBinding, MemorySegment DestinationBinding) {
        var mh$ = I_RpcBindingCopy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingCopy", SourceBinding, DestinationBinding);
            }
            return (int)mh$.invokeExact(SourceBinding, DestinationBinding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingIsClientLocal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcBindingIsClientLocal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingIsClientLocal(RPC_BINDING_HANDLE BindingHandle, unsigned int *ClientLocalFlag)
     * }
     */
    public static FunctionDescriptor I_RpcBindingIsClientLocal$descriptor() {
        return I_RpcBindingIsClientLocal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingIsClientLocal(RPC_BINDING_HANDLE BindingHandle, unsigned int *ClientLocalFlag)
     * }
     */
    public static MethodHandle I_RpcBindingIsClientLocal$handle() {
        return I_RpcBindingIsClientLocal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingIsClientLocal(RPC_BINDING_HANDLE BindingHandle, unsigned int *ClientLocalFlag)
     * }
     */
    public static MemorySegment I_RpcBindingIsClientLocal$address() {
        return I_RpcBindingIsClientLocal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingIsClientLocal(RPC_BINDING_HANDLE BindingHandle, unsigned int *ClientLocalFlag)
     * }
     */
    public static int I_RpcBindingIsClientLocal(MemorySegment BindingHandle, MemorySegment ClientLocalFlag) {
        var mh$ = I_RpcBindingIsClientLocal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingIsClientLocal", BindingHandle, ClientLocalFlag);
            }
            return (int)mh$.invokeExact(BindingHandle, ClientLocalFlag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingInqConnId {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcBindingInqConnId");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqConnId(RPC_BINDING_HANDLE Binding, void **ConnId, int *pfFirstCall)
     * }
     */
    public static FunctionDescriptor I_RpcBindingInqConnId$descriptor() {
        return I_RpcBindingInqConnId.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqConnId(RPC_BINDING_HANDLE Binding, void **ConnId, int *pfFirstCall)
     * }
     */
    public static MethodHandle I_RpcBindingInqConnId$handle() {
        return I_RpcBindingInqConnId.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqConnId(RPC_BINDING_HANDLE Binding, void **ConnId, int *pfFirstCall)
     * }
     */
    public static MemorySegment I_RpcBindingInqConnId$address() {
        return I_RpcBindingInqConnId.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqConnId(RPC_BINDING_HANDLE Binding, void **ConnId, int *pfFirstCall)
     * }
     */
    public static int I_RpcBindingInqConnId(MemorySegment Binding, MemorySegment ConnId, MemorySegment pfFirstCall) {
        var mh$ = I_RpcBindingInqConnId.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingInqConnId", Binding, ConnId, pfFirstCall);
            }
            return (int)mh$.invokeExact(Binding, ConnId, pfFirstCall);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingCreateNP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcBindingCreateNP");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingCreateNP(RPC_WSTR ServerName, RPC_WSTR ServiceName, RPC_WSTR NetworkOptions, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static FunctionDescriptor I_RpcBindingCreateNP$descriptor() {
        return I_RpcBindingCreateNP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingCreateNP(RPC_WSTR ServerName, RPC_WSTR ServiceName, RPC_WSTR NetworkOptions, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MethodHandle I_RpcBindingCreateNP$handle() {
        return I_RpcBindingCreateNP.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingCreateNP(RPC_WSTR ServerName, RPC_WSTR ServiceName, RPC_WSTR NetworkOptions, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MemorySegment I_RpcBindingCreateNP$address() {
        return I_RpcBindingCreateNP.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingCreateNP(RPC_WSTR ServerName, RPC_WSTR ServiceName, RPC_WSTR NetworkOptions, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static int I_RpcBindingCreateNP(MemorySegment ServerName, MemorySegment ServiceName, MemorySegment NetworkOptions, MemorySegment Binding) {
        var mh$ = I_RpcBindingCreateNP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingCreateNP", ServerName, ServiceName, NetworkOptions, Binding);
            }
            return (int)mh$.invokeExact(ServerName, ServiceName, NetworkOptions, Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcSsDontSerializeContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcSsDontSerializeContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void I_RpcSsDontSerializeContext()
     * }
     */
    public static FunctionDescriptor I_RpcSsDontSerializeContext$descriptor() {
        return I_RpcSsDontSerializeContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void I_RpcSsDontSerializeContext()
     * }
     */
    public static MethodHandle I_RpcSsDontSerializeContext$handle() {
        return I_RpcSsDontSerializeContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void I_RpcSsDontSerializeContext()
     * }
     */
    public static MemorySegment I_RpcSsDontSerializeContext$address() {
        return I_RpcSsDontSerializeContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void I_RpcSsDontSerializeContext()
     * }
     */
    public static void I_RpcSsDontSerializeContext() {
        var mh$ = I_RpcSsDontSerializeContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcSsDontSerializeContext");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcLaunchDatagramReceiveThread {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcLaunchDatagramReceiveThread");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcLaunchDatagramReceiveThread(void *pAddress)
     * }
     */
    public static FunctionDescriptor I_RpcLaunchDatagramReceiveThread$descriptor() {
        return I_RpcLaunchDatagramReceiveThread.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcLaunchDatagramReceiveThread(void *pAddress)
     * }
     */
    public static MethodHandle I_RpcLaunchDatagramReceiveThread$handle() {
        return I_RpcLaunchDatagramReceiveThread.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcLaunchDatagramReceiveThread(void *pAddress)
     * }
     */
    public static MemorySegment I_RpcLaunchDatagramReceiveThread$address() {
        return I_RpcLaunchDatagramReceiveThread.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcLaunchDatagramReceiveThread(void *pAddress)
     * }
     */
    public static int I_RpcLaunchDatagramReceiveThread(MemorySegment pAddress) {
        var mh$ = I_RpcLaunchDatagramReceiveThread.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcLaunchDatagramReceiveThread", pAddress);
            }
            return (int)mh$.invokeExact(pAddress);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerRegisterForwardFunction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcServerRegisterForwardFunction");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerRegisterForwardFunction(RPC_FORWARD_FUNCTION *pForwardFunction)
     * }
     */
    public static FunctionDescriptor I_RpcServerRegisterForwardFunction$descriptor() {
        return I_RpcServerRegisterForwardFunction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerRegisterForwardFunction(RPC_FORWARD_FUNCTION *pForwardFunction)
     * }
     */
    public static MethodHandle I_RpcServerRegisterForwardFunction$handle() {
        return I_RpcServerRegisterForwardFunction.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerRegisterForwardFunction(RPC_FORWARD_FUNCTION *pForwardFunction)
     * }
     */
    public static MemorySegment I_RpcServerRegisterForwardFunction$address() {
        return I_RpcServerRegisterForwardFunction.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerRegisterForwardFunction(RPC_FORWARD_FUNCTION *pForwardFunction)
     * }
     */
    public static int I_RpcServerRegisterForwardFunction(MemorySegment pForwardFunction) {
        var mh$ = I_RpcServerRegisterForwardFunction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerRegisterForwardFunction", pForwardFunction);
            }
            return (int)mh$.invokeExact(pForwardFunction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerInqAddressChangeFn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcServerInqAddressChangeFn");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_ADDRESS_CHANGE_FN *I_RpcServerInqAddressChangeFn() __attribute__((stdcall))
     * }
     */
    public static FunctionDescriptor I_RpcServerInqAddressChangeFn$descriptor() {
        return I_RpcServerInqAddressChangeFn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_ADDRESS_CHANGE_FN *I_RpcServerInqAddressChangeFn() __attribute__((stdcall))
     * }
     */
    public static MethodHandle I_RpcServerInqAddressChangeFn$handle() {
        return I_RpcServerInqAddressChangeFn.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_ADDRESS_CHANGE_FN *I_RpcServerInqAddressChangeFn() __attribute__((stdcall))
     * }
     */
    public static MemorySegment I_RpcServerInqAddressChangeFn$address() {
        return I_RpcServerInqAddressChangeFn.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_ADDRESS_CHANGE_FN *I_RpcServerInqAddressChangeFn() __attribute__((stdcall))
     * }
     */
    public static MemorySegment I_RpcServerInqAddressChangeFn() {
        var mh$ = I_RpcServerInqAddressChangeFn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerInqAddressChangeFn");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerSetAddressChangeFn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcServerSetAddressChangeFn");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerSetAddressChangeFn(RPC_ADDRESS_CHANGE_FN *pAddressChangeFn)
     * }
     */
    public static FunctionDescriptor I_RpcServerSetAddressChangeFn$descriptor() {
        return I_RpcServerSetAddressChangeFn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerSetAddressChangeFn(RPC_ADDRESS_CHANGE_FN *pAddressChangeFn)
     * }
     */
    public static MethodHandle I_RpcServerSetAddressChangeFn$handle() {
        return I_RpcServerSetAddressChangeFn.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerSetAddressChangeFn(RPC_ADDRESS_CHANGE_FN *pAddressChangeFn)
     * }
     */
    public static MemorySegment I_RpcServerSetAddressChangeFn$address() {
        return I_RpcServerSetAddressChangeFn.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerSetAddressChangeFn(RPC_ADDRESS_CHANGE_FN *pAddressChangeFn)
     * }
     */
    public static int I_RpcServerSetAddressChangeFn(MemorySegment pAddressChangeFn) {
        var mh$ = I_RpcServerSetAddressChangeFn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerSetAddressChangeFn", pAddressChangeFn);
            }
            return (int)mh$.invokeExact(pAddressChangeFn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerInqLocalConnAddress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcServerInqLocalConnAddress");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerInqLocalConnAddress(RPC_BINDING_HANDLE Binding, void *Buffer, unsigned long *BufferSize, unsigned long *AddressFormat)
     * }
     */
    public static FunctionDescriptor I_RpcServerInqLocalConnAddress$descriptor() {
        return I_RpcServerInqLocalConnAddress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerInqLocalConnAddress(RPC_BINDING_HANDLE Binding, void *Buffer, unsigned long *BufferSize, unsigned long *AddressFormat)
     * }
     */
    public static MethodHandle I_RpcServerInqLocalConnAddress$handle() {
        return I_RpcServerInqLocalConnAddress.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerInqLocalConnAddress(RPC_BINDING_HANDLE Binding, void *Buffer, unsigned long *BufferSize, unsigned long *AddressFormat)
     * }
     */
    public static MemorySegment I_RpcServerInqLocalConnAddress$address() {
        return I_RpcServerInqLocalConnAddress.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerInqLocalConnAddress(RPC_BINDING_HANDLE Binding, void *Buffer, unsigned long *BufferSize, unsigned long *AddressFormat)
     * }
     */
    public static int I_RpcServerInqLocalConnAddress(MemorySegment Binding, MemorySegment Buffer, MemorySegment BufferSize, MemorySegment AddressFormat) {
        var mh$ = I_RpcServerInqLocalConnAddress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerInqLocalConnAddress", Binding, Buffer, BufferSize, AddressFormat);
            }
            return (int)mh$.invokeExact(Binding, Buffer, BufferSize, AddressFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerInqRemoteConnAddress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcServerInqRemoteConnAddress");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerInqRemoteConnAddress(RPC_BINDING_HANDLE Binding, void *Buffer, unsigned long *BufferSize, unsigned long *AddressFormat)
     * }
     */
    public static FunctionDescriptor I_RpcServerInqRemoteConnAddress$descriptor() {
        return I_RpcServerInqRemoteConnAddress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerInqRemoteConnAddress(RPC_BINDING_HANDLE Binding, void *Buffer, unsigned long *BufferSize, unsigned long *AddressFormat)
     * }
     */
    public static MethodHandle I_RpcServerInqRemoteConnAddress$handle() {
        return I_RpcServerInqRemoteConnAddress.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerInqRemoteConnAddress(RPC_BINDING_HANDLE Binding, void *Buffer, unsigned long *BufferSize, unsigned long *AddressFormat)
     * }
     */
    public static MemorySegment I_RpcServerInqRemoteConnAddress$address() {
        return I_RpcServerInqRemoteConnAddress.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerInqRemoteConnAddress(RPC_BINDING_HANDLE Binding, void *Buffer, unsigned long *BufferSize, unsigned long *AddressFormat)
     * }
     */
    public static int I_RpcServerInqRemoteConnAddress(MemorySegment Binding, MemorySegment Buffer, MemorySegment BufferSize, MemorySegment AddressFormat) {
        var mh$ = I_RpcServerInqRemoteConnAddress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerInqRemoteConnAddress", Binding, Buffer, BufferSize, AddressFormat);
            }
            return (int)mh$.invokeExact(Binding, Buffer, BufferSize, AddressFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcSessionStrictContextHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcSessionStrictContextHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void I_RpcSessionStrictContextHandle()
     * }
     */
    public static FunctionDescriptor I_RpcSessionStrictContextHandle$descriptor() {
        return I_RpcSessionStrictContextHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void I_RpcSessionStrictContextHandle()
     * }
     */
    public static MethodHandle I_RpcSessionStrictContextHandle$handle() {
        return I_RpcSessionStrictContextHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void I_RpcSessionStrictContextHandle()
     * }
     */
    public static MemorySegment I_RpcSessionStrictContextHandle$address() {
        return I_RpcSessionStrictContextHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void I_RpcSessionStrictContextHandle()
     * }
     */
    public static void I_RpcSessionStrictContextHandle() {
        var mh$ = I_RpcSessionStrictContextHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcSessionStrictContextHandle");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcTurnOnEEInfoPropagation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcTurnOnEEInfoPropagation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcTurnOnEEInfoPropagation()
     * }
     */
    public static FunctionDescriptor I_RpcTurnOnEEInfoPropagation$descriptor() {
        return I_RpcTurnOnEEInfoPropagation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcTurnOnEEInfoPropagation()
     * }
     */
    public static MethodHandle I_RpcTurnOnEEInfoPropagation$handle() {
        return I_RpcTurnOnEEInfoPropagation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcTurnOnEEInfoPropagation()
     * }
     */
    public static MemorySegment I_RpcTurnOnEEInfoPropagation$address() {
        return I_RpcTurnOnEEInfoPropagation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcTurnOnEEInfoPropagation()
     * }
     */
    public static int I_RpcTurnOnEEInfoPropagation() {
        var mh$ = I_RpcTurnOnEEInfoPropagation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcTurnOnEEInfoPropagation");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcConnectionInqSockBuffSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcConnectionInqSockBuffSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcConnectionInqSockBuffSize(unsigned long *RecvBuffSize, unsigned long *SendBuffSize)
     * }
     */
    public static FunctionDescriptor I_RpcConnectionInqSockBuffSize$descriptor() {
        return I_RpcConnectionInqSockBuffSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcConnectionInqSockBuffSize(unsigned long *RecvBuffSize, unsigned long *SendBuffSize)
     * }
     */
    public static MethodHandle I_RpcConnectionInqSockBuffSize$handle() {
        return I_RpcConnectionInqSockBuffSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcConnectionInqSockBuffSize(unsigned long *RecvBuffSize, unsigned long *SendBuffSize)
     * }
     */
    public static MemorySegment I_RpcConnectionInqSockBuffSize$address() {
        return I_RpcConnectionInqSockBuffSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcConnectionInqSockBuffSize(unsigned long *RecvBuffSize, unsigned long *SendBuffSize)
     * }
     */
    public static int I_RpcConnectionInqSockBuffSize(MemorySegment RecvBuffSize, MemorySegment SendBuffSize) {
        var mh$ = I_RpcConnectionInqSockBuffSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcConnectionInqSockBuffSize", RecvBuffSize, SendBuffSize);
            }
            return (int)mh$.invokeExact(RecvBuffSize, SendBuffSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcConnectionSetSockBuffSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcConnectionSetSockBuffSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcConnectionSetSockBuffSize(unsigned long RecvBuffSize, unsigned long SendBuffSize)
     * }
     */
    public static FunctionDescriptor I_RpcConnectionSetSockBuffSize$descriptor() {
        return I_RpcConnectionSetSockBuffSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcConnectionSetSockBuffSize(unsigned long RecvBuffSize, unsigned long SendBuffSize)
     * }
     */
    public static MethodHandle I_RpcConnectionSetSockBuffSize$handle() {
        return I_RpcConnectionSetSockBuffSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcConnectionSetSockBuffSize(unsigned long RecvBuffSize, unsigned long SendBuffSize)
     * }
     */
    public static MemorySegment I_RpcConnectionSetSockBuffSize$address() {
        return I_RpcConnectionSetSockBuffSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcConnectionSetSockBuffSize(unsigned long RecvBuffSize, unsigned long SendBuffSize)
     * }
     */
    public static int I_RpcConnectionSetSockBuffSize(int RecvBuffSize, int SendBuffSize) {
        var mh$ = I_RpcConnectionSetSockBuffSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcConnectionSetSockBuffSize", RecvBuffSize, SendBuffSize);
            }
            return (int)mh$.invokeExact(RecvBuffSize, SendBuffSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerStartListening {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcServerStartListening");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerStartListening(void *hWnd)
     * }
     */
    public static FunctionDescriptor I_RpcServerStartListening$descriptor() {
        return I_RpcServerStartListening.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerStartListening(void *hWnd)
     * }
     */
    public static MethodHandle I_RpcServerStartListening$handle() {
        return I_RpcServerStartListening.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerStartListening(void *hWnd)
     * }
     */
    public static MemorySegment I_RpcServerStartListening$address() {
        return I_RpcServerStartListening.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerStartListening(void *hWnd)
     * }
     */
    public static int I_RpcServerStartListening(MemorySegment hWnd) {
        var mh$ = I_RpcServerStartListening.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerStartListening", hWnd);
            }
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerStopListening {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcServerStopListening");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerStopListening()
     * }
     */
    public static FunctionDescriptor I_RpcServerStopListening$descriptor() {
        return I_RpcServerStopListening.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerStopListening()
     * }
     */
    public static MethodHandle I_RpcServerStopListening$handle() {
        return I_RpcServerStopListening.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerStopListening()
     * }
     */
    public static MemorySegment I_RpcServerStopListening$address() {
        return I_RpcServerStopListening.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerStopListening()
     * }
     */
    public static int I_RpcServerStopListening() {
        var mh$ = I_RpcServerStopListening.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerStopListening");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingSetAsync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcBindingSetAsync");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingSetAsync(RPC_BINDING_HANDLE Binding, RPC_BLOCKING_FN BlockingFn, unsigned long ServerTid)
     * }
     */
    public static FunctionDescriptor I_RpcBindingSetAsync$descriptor() {
        return I_RpcBindingSetAsync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingSetAsync(RPC_BINDING_HANDLE Binding, RPC_BLOCKING_FN BlockingFn, unsigned long ServerTid)
     * }
     */
    public static MethodHandle I_RpcBindingSetAsync$handle() {
        return I_RpcBindingSetAsync.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingSetAsync(RPC_BINDING_HANDLE Binding, RPC_BLOCKING_FN BlockingFn, unsigned long ServerTid)
     * }
     */
    public static MemorySegment I_RpcBindingSetAsync$address() {
        return I_RpcBindingSetAsync.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingSetAsync(RPC_BINDING_HANDLE Binding, RPC_BLOCKING_FN BlockingFn, unsigned long ServerTid)
     * }
     */
    public static int I_RpcBindingSetAsync(MemorySegment Binding, MemorySegment BlockingFn, int ServerTid) {
        var mh$ = I_RpcBindingSetAsync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingSetAsync", Binding, BlockingFn, ServerTid);
            }
            return (int)mh$.invokeExact(Binding, BlockingFn, ServerTid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcSetThreadParams {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcSetThreadParams");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSetThreadParams(int fClientFree, void *Context, void *hWndClient)
     * }
     */
    public static FunctionDescriptor I_RpcSetThreadParams$descriptor() {
        return I_RpcSetThreadParams.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSetThreadParams(int fClientFree, void *Context, void *hWndClient)
     * }
     */
    public static MethodHandle I_RpcSetThreadParams$handle() {
        return I_RpcSetThreadParams.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSetThreadParams(int fClientFree, void *Context, void *hWndClient)
     * }
     */
    public static MemorySegment I_RpcSetThreadParams$address() {
        return I_RpcSetThreadParams.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSetThreadParams(int fClientFree, void *Context, void *hWndClient)
     * }
     */
    public static int I_RpcSetThreadParams(int fClientFree, MemorySegment Context, MemorySegment hWndClient) {
        var mh$ = I_RpcSetThreadParams.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcSetThreadParams", fClientFree, Context, hWndClient);
            }
            return (int)mh$.invokeExact(fClientFree, Context, hWndClient);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcWindowProc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcWindowProc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int I_RpcWindowProc(void *hWnd, unsigned int Message, unsigned int wParam, unsigned long lParam)
     * }
     */
    public static FunctionDescriptor I_RpcWindowProc$descriptor() {
        return I_RpcWindowProc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int I_RpcWindowProc(void *hWnd, unsigned int Message, unsigned int wParam, unsigned long lParam)
     * }
     */
    public static MethodHandle I_RpcWindowProc$handle() {
        return I_RpcWindowProc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int I_RpcWindowProc(void *hWnd, unsigned int Message, unsigned int wParam, unsigned long lParam)
     * }
     */
    public static MemorySegment I_RpcWindowProc$address() {
        return I_RpcWindowProc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int I_RpcWindowProc(void *hWnd, unsigned int Message, unsigned int wParam, unsigned long lParam)
     * }
     */
    public static int I_RpcWindowProc(MemorySegment hWnd, int Message, int wParam, int lParam) {
        var mh$ = I_RpcWindowProc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcWindowProc", hWnd, Message, wParam, lParam);
            }
            return (int)mh$.invokeExact(hWnd, Message, wParam, lParam);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerUnregisterEndpointA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcServerUnregisterEndpointA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUnregisterEndpointA(RPC_CSTR Protseq, RPC_CSTR Endpoint)
     * }
     */
    public static FunctionDescriptor I_RpcServerUnregisterEndpointA$descriptor() {
        return I_RpcServerUnregisterEndpointA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUnregisterEndpointA(RPC_CSTR Protseq, RPC_CSTR Endpoint)
     * }
     */
    public static MethodHandle I_RpcServerUnregisterEndpointA$handle() {
        return I_RpcServerUnregisterEndpointA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUnregisterEndpointA(RPC_CSTR Protseq, RPC_CSTR Endpoint)
     * }
     */
    public static MemorySegment I_RpcServerUnregisterEndpointA$address() {
        return I_RpcServerUnregisterEndpointA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUnregisterEndpointA(RPC_CSTR Protseq, RPC_CSTR Endpoint)
     * }
     */
    public static int I_RpcServerUnregisterEndpointA(MemorySegment Protseq, MemorySegment Endpoint) {
        var mh$ = I_RpcServerUnregisterEndpointA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerUnregisterEndpointA", Protseq, Endpoint);
            }
            return (int)mh$.invokeExact(Protseq, Endpoint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerUnregisterEndpointW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcServerUnregisterEndpointW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUnregisterEndpointW(RPC_WSTR Protseq, RPC_WSTR Endpoint)
     * }
     */
    public static FunctionDescriptor I_RpcServerUnregisterEndpointW$descriptor() {
        return I_RpcServerUnregisterEndpointW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUnregisterEndpointW(RPC_WSTR Protseq, RPC_WSTR Endpoint)
     * }
     */
    public static MethodHandle I_RpcServerUnregisterEndpointW$handle() {
        return I_RpcServerUnregisterEndpointW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUnregisterEndpointW(RPC_WSTR Protseq, RPC_WSTR Endpoint)
     * }
     */
    public static MemorySegment I_RpcServerUnregisterEndpointW$address() {
        return I_RpcServerUnregisterEndpointW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUnregisterEndpointW(RPC_WSTR Protseq, RPC_WSTR Endpoint)
     * }
     */
    public static int I_RpcServerUnregisterEndpointW(MemorySegment Protseq, MemorySegment Endpoint) {
        var mh$ = I_RpcServerUnregisterEndpointW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerUnregisterEndpointW", Protseq, Endpoint);
            }
            return (int)mh$.invokeExact(Protseq, Endpoint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerInqTransportType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcServerInqTransportType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerInqTransportType(unsigned int *Type)
     * }
     */
    public static FunctionDescriptor I_RpcServerInqTransportType$descriptor() {
        return I_RpcServerInqTransportType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerInqTransportType(unsigned int *Type)
     * }
     */
    public static MethodHandle I_RpcServerInqTransportType$handle() {
        return I_RpcServerInqTransportType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerInqTransportType(unsigned int *Type)
     * }
     */
    public static MemorySegment I_RpcServerInqTransportType$address() {
        return I_RpcServerInqTransportType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerInqTransportType(unsigned int *Type)
     * }
     */
    public static int I_RpcServerInqTransportType(MemorySegment Type) {
        var mh$ = I_RpcServerInqTransportType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerInqTransportType", Type);
            }
            return (int)mh$.invokeExact(Type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcMapWin32Status {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcMapWin32Status");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long I_RpcMapWin32Status(RPC_STATUS Status)
     * }
     */
    public static FunctionDescriptor I_RpcMapWin32Status$descriptor() {
        return I_RpcMapWin32Status.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long I_RpcMapWin32Status(RPC_STATUS Status)
     * }
     */
    public static MethodHandle I_RpcMapWin32Status$handle() {
        return I_RpcMapWin32Status.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long I_RpcMapWin32Status(RPC_STATUS Status)
     * }
     */
    public static MemorySegment I_RpcMapWin32Status$address() {
        return I_RpcMapWin32Status.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long I_RpcMapWin32Status(RPC_STATUS Status)
     * }
     */
    public static int I_RpcMapWin32Status(int Status) {
        var mh$ = I_RpcMapWin32Status.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcMapWin32Status", Status);
            }
            return (int)mh$.invokeExact(Status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int RpcCurrentUniqueUser = (int)1L;
    /**
     * {@snippet lang=c :
     * enum RpcProxyPerfCounters.RpcCurrentUniqueUser = 1
     * }
     */
    public static int RpcCurrentUniqueUser() {
        return RpcCurrentUniqueUser;
    }
    private static final int RpcBackEndConnectionAttempts = (int)2L;
    /**
     * {@snippet lang=c :
     * enum RpcProxyPerfCounters.RpcBackEndConnectionAttempts = 2
     * }
     */
    public static int RpcBackEndConnectionAttempts() {
        return RpcBackEndConnectionAttempts;
    }
    private static final int RpcBackEndConnectionFailed = (int)3L;
    /**
     * {@snippet lang=c :
     * enum RpcProxyPerfCounters.RpcBackEndConnectionFailed = 3
     * }
     */
    public static int RpcBackEndConnectionFailed() {
        return RpcBackEndConnectionFailed;
    }
    private static final int RpcRequestsPerSecond = (int)4L;
    /**
     * {@snippet lang=c :
     * enum RpcProxyPerfCounters.RpcRequestsPerSecond = 4
     * }
     */
    public static int RpcRequestsPerSecond() {
        return RpcRequestsPerSecond;
    }
    private static final int RpcIncomingConnections = (int)5L;
    /**
     * {@snippet lang=c :
     * enum RpcProxyPerfCounters.RpcIncomingConnections = 5
     * }
     */
    public static int RpcIncomingConnections() {
        return RpcIncomingConnections;
    }
    private static final int RpcIncomingBandwidth = (int)6L;
    /**
     * {@snippet lang=c :
     * enum RpcProxyPerfCounters.RpcIncomingBandwidth = 6
     * }
     */
    public static int RpcIncomingBandwidth() {
        return RpcIncomingBandwidth;
    }
    private static final int RpcOutgoingBandwidth = (int)7L;
    /**
     * {@snippet lang=c :
     * enum RpcProxyPerfCounters.RpcOutgoingBandwidth = 7
     * }
     */
    public static int RpcOutgoingBandwidth() {
        return RpcOutgoingBandwidth;
    }
    private static final int RpcAttemptedLbsDecisions = (int)8L;
    /**
     * {@snippet lang=c :
     * enum RpcProxyPerfCounters.RpcAttemptedLbsDecisions = 8
     * }
     */
    public static int RpcAttemptedLbsDecisions() {
        return RpcAttemptedLbsDecisions;
    }
    private static final int RpcFailedLbsDecisions = (int)9L;
    /**
     * {@snippet lang=c :
     * enum RpcProxyPerfCounters.RpcFailedLbsDecisions = 9
     * }
     */
    public static int RpcFailedLbsDecisions() {
        return RpcFailedLbsDecisions;
    }
    private static final int RpcAttemptedLbsMessages = (int)10L;
    /**
     * {@snippet lang=c :
     * enum RpcProxyPerfCounters.RpcAttemptedLbsMessages = 10
     * }
     */
    public static int RpcAttemptedLbsMessages() {
        return RpcAttemptedLbsMessages;
    }
    private static final int RpcFailedLbsMessages = (int)11L;
    /**
     * {@snippet lang=c :
     * enum RpcProxyPerfCounters.RpcFailedLbsMessages = 11
     * }
     */
    public static int RpcFailedLbsMessages() {
        return RpcFailedLbsMessages;
    }
    private static final int RpcLastCounter = (int)12L;
    /**
     * {@snippet lang=c :
     * enum RpcProxyPerfCounters.RpcLastCounter = 12
     * }
     */
    public static int RpcLastCounter() {
        return RpcLastCounter;
    }

    private static class I_RpcProxyNewConnection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcProxyNewConnection");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcProxyNewConnection(unsigned long ConnectionType, unsigned short *ServerAddress, unsigned short *ServerPort, unsigned short *MinConnTimeout, void *ConnectionParameter, RDR_CALLOUT_STATE *CallOutState, I_RpcProxyCallbackInterface *ProxyCallbackInterface)
     * }
     */
    public static FunctionDescriptor I_RpcProxyNewConnection$descriptor() {
        return I_RpcProxyNewConnection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcProxyNewConnection(unsigned long ConnectionType, unsigned short *ServerAddress, unsigned short *ServerPort, unsigned short *MinConnTimeout, void *ConnectionParameter, RDR_CALLOUT_STATE *CallOutState, I_RpcProxyCallbackInterface *ProxyCallbackInterface)
     * }
     */
    public static MethodHandle I_RpcProxyNewConnection$handle() {
        return I_RpcProxyNewConnection.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcProxyNewConnection(unsigned long ConnectionType, unsigned short *ServerAddress, unsigned short *ServerPort, unsigned short *MinConnTimeout, void *ConnectionParameter, RDR_CALLOUT_STATE *CallOutState, I_RpcProxyCallbackInterface *ProxyCallbackInterface)
     * }
     */
    public static MemorySegment I_RpcProxyNewConnection$address() {
        return I_RpcProxyNewConnection.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcProxyNewConnection(unsigned long ConnectionType, unsigned short *ServerAddress, unsigned short *ServerPort, unsigned short *MinConnTimeout, void *ConnectionParameter, RDR_CALLOUT_STATE *CallOutState, I_RpcProxyCallbackInterface *ProxyCallbackInterface)
     * }
     */
    public static int I_RpcProxyNewConnection(int ConnectionType, MemorySegment ServerAddress, MemorySegment ServerPort, MemorySegment MinConnTimeout, MemorySegment ConnectionParameter, MemorySegment CallOutState, MemorySegment ProxyCallbackInterface) {
        var mh$ = I_RpcProxyNewConnection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcProxyNewConnection", ConnectionType, ServerAddress, ServerPort, MinConnTimeout, ConnectionParameter, CallOutState, ProxyCallbackInterface);
            }
            return (int)mh$.invokeExact(ConnectionType, ServerAddress, ServerPort, MinConnTimeout, ConnectionParameter, CallOutState, ProxyCallbackInterface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcReplyToClientWithStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcReplyToClientWithStatus");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcReplyToClientWithStatus(void *ConnectionParameter, RPC_STATUS RpcStatus)
     * }
     */
    public static FunctionDescriptor I_RpcReplyToClientWithStatus$descriptor() {
        return I_RpcReplyToClientWithStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcReplyToClientWithStatus(void *ConnectionParameter, RPC_STATUS RpcStatus)
     * }
     */
    public static MethodHandle I_RpcReplyToClientWithStatus$handle() {
        return I_RpcReplyToClientWithStatus.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcReplyToClientWithStatus(void *ConnectionParameter, RPC_STATUS RpcStatus)
     * }
     */
    public static MemorySegment I_RpcReplyToClientWithStatus$address() {
        return I_RpcReplyToClientWithStatus.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcReplyToClientWithStatus(void *ConnectionParameter, RPC_STATUS RpcStatus)
     * }
     */
    public static int I_RpcReplyToClientWithStatus(MemorySegment ConnectionParameter, int RpcStatus) {
        var mh$ = I_RpcReplyToClientWithStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcReplyToClientWithStatus", ConnectionParameter, RpcStatus);
            }
            return (int)mh$.invokeExact(ConnectionParameter, RpcStatus);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcRecordCalloutFailure {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcRecordCalloutFailure");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void I_RpcRecordCalloutFailure(RPC_STATUS RpcStatus, RDR_CALLOUT_STATE *CallOutState, unsigned short *DllName)
     * }
     */
    public static FunctionDescriptor I_RpcRecordCalloutFailure$descriptor() {
        return I_RpcRecordCalloutFailure.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void I_RpcRecordCalloutFailure(RPC_STATUS RpcStatus, RDR_CALLOUT_STATE *CallOutState, unsigned short *DllName)
     * }
     */
    public static MethodHandle I_RpcRecordCalloutFailure$handle() {
        return I_RpcRecordCalloutFailure.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void I_RpcRecordCalloutFailure(RPC_STATUS RpcStatus, RDR_CALLOUT_STATE *CallOutState, unsigned short *DllName)
     * }
     */
    public static MemorySegment I_RpcRecordCalloutFailure$address() {
        return I_RpcRecordCalloutFailure.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void I_RpcRecordCalloutFailure(RPC_STATUS RpcStatus, RDR_CALLOUT_STATE *CallOutState, unsigned short *DllName)
     * }
     */
    public static void I_RpcRecordCalloutFailure(int RpcStatus, MemorySegment CallOutState, MemorySegment DllName) {
        var mh$ = I_RpcRecordCalloutFailure.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcRecordCalloutFailure", RpcStatus, CallOutState, DllName);
            }
            mh$.invokeExact(RpcStatus, CallOutState, DllName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcMgmtEnableDedicatedThreadPool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcMgmtEnableDedicatedThreadPool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcMgmtEnableDedicatedThreadPool()
     * }
     */
    public static FunctionDescriptor I_RpcMgmtEnableDedicatedThreadPool$descriptor() {
        return I_RpcMgmtEnableDedicatedThreadPool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcMgmtEnableDedicatedThreadPool()
     * }
     */
    public static MethodHandle I_RpcMgmtEnableDedicatedThreadPool$handle() {
        return I_RpcMgmtEnableDedicatedThreadPool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcMgmtEnableDedicatedThreadPool()
     * }
     */
    public static MemorySegment I_RpcMgmtEnableDedicatedThreadPool$address() {
        return I_RpcMgmtEnableDedicatedThreadPool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcMgmtEnableDedicatedThreadPool()
     * }
     */
    public static int I_RpcMgmtEnableDedicatedThreadPool() {
        var mh$ = I_RpcMgmtEnableDedicatedThreadPool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcMgmtEnableDedicatedThreadPool");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcGetDefaultSD {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcGetDefaultSD");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetDefaultSD(void **ppSecurityDescriptor)
     * }
     */
    public static FunctionDescriptor I_RpcGetDefaultSD$descriptor() {
        return I_RpcGetDefaultSD.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetDefaultSD(void **ppSecurityDescriptor)
     * }
     */
    public static MethodHandle I_RpcGetDefaultSD$handle() {
        return I_RpcGetDefaultSD.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetDefaultSD(void **ppSecurityDescriptor)
     * }
     */
    public static MemorySegment I_RpcGetDefaultSD$address() {
        return I_RpcGetDefaultSD.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetDefaultSD(void **ppSecurityDescriptor)
     * }
     */
    public static int I_RpcGetDefaultSD(MemorySegment ppSecurityDescriptor) {
        var mh$ = I_RpcGetDefaultSD.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcGetDefaultSD", ppSecurityDescriptor);
            }
            return (int)mh$.invokeExact(ppSecurityDescriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcOpenClientProcess {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcOpenClientProcess");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcOpenClientProcess(RPC_BINDING_HANDLE Binding, unsigned long DesiredAccess, void **ClientProcess)
     * }
     */
    public static FunctionDescriptor I_RpcOpenClientProcess$descriptor() {
        return I_RpcOpenClientProcess.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcOpenClientProcess(RPC_BINDING_HANDLE Binding, unsigned long DesiredAccess, void **ClientProcess)
     * }
     */
    public static MethodHandle I_RpcOpenClientProcess$handle() {
        return I_RpcOpenClientProcess.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcOpenClientProcess(RPC_BINDING_HANDLE Binding, unsigned long DesiredAccess, void **ClientProcess)
     * }
     */
    public static MemorySegment I_RpcOpenClientProcess$address() {
        return I_RpcOpenClientProcess.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcOpenClientProcess(RPC_BINDING_HANDLE Binding, unsigned long DesiredAccess, void **ClientProcess)
     * }
     */
    public static int I_RpcOpenClientProcess(MemorySegment Binding, int DesiredAccess, MemorySegment ClientProcess) {
        var mh$ = I_RpcOpenClientProcess.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcOpenClientProcess", Binding, DesiredAccess, ClientProcess);
            }
            return (int)mh$.invokeExact(Binding, DesiredAccess, ClientProcess);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingIsServerLocal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcBindingIsServerLocal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingIsServerLocal(RPC_BINDING_HANDLE Binding, unsigned int *ServerLocalFlag)
     * }
     */
    public static FunctionDescriptor I_RpcBindingIsServerLocal$descriptor() {
        return I_RpcBindingIsServerLocal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingIsServerLocal(RPC_BINDING_HANDLE Binding, unsigned int *ServerLocalFlag)
     * }
     */
    public static MethodHandle I_RpcBindingIsServerLocal$handle() {
        return I_RpcBindingIsServerLocal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingIsServerLocal(RPC_BINDING_HANDLE Binding, unsigned int *ServerLocalFlag)
     * }
     */
    public static MemorySegment I_RpcBindingIsServerLocal$address() {
        return I_RpcBindingIsServerLocal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingIsServerLocal(RPC_BINDING_HANDLE Binding, unsigned int *ServerLocalFlag)
     * }
     */
    public static int I_RpcBindingIsServerLocal(MemorySegment Binding, MemorySegment ServerLocalFlag) {
        var mh$ = I_RpcBindingIsServerLocal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingIsServerLocal", Binding, ServerLocalFlag);
            }
            return (int)mh$.invokeExact(Binding, ServerLocalFlag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingSetPrivateOption {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcBindingSetPrivateOption");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingSetPrivateOption(RPC_BINDING_HANDLE hBinding, unsigned long option, ULONG_PTR optionValue)
     * }
     */
    public static FunctionDescriptor I_RpcBindingSetPrivateOption$descriptor() {
        return I_RpcBindingSetPrivateOption.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingSetPrivateOption(RPC_BINDING_HANDLE hBinding, unsigned long option, ULONG_PTR optionValue)
     * }
     */
    public static MethodHandle I_RpcBindingSetPrivateOption$handle() {
        return I_RpcBindingSetPrivateOption.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingSetPrivateOption(RPC_BINDING_HANDLE hBinding, unsigned long option, ULONG_PTR optionValue)
     * }
     */
    public static MemorySegment I_RpcBindingSetPrivateOption$address() {
        return I_RpcBindingSetPrivateOption.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingSetPrivateOption(RPC_BINDING_HANDLE hBinding, unsigned long option, ULONG_PTR optionValue)
     * }
     */
    public static int I_RpcBindingSetPrivateOption(MemorySegment hBinding, int option, long optionValue) {
        var mh$ = I_RpcBindingSetPrivateOption.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingSetPrivateOption", hBinding, option, optionValue);
            }
            return (int)mh$.invokeExact(hBinding, option, optionValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerSubscribeForDisconnectNotification {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcServerSubscribeForDisconnectNotification");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerSubscribeForDisconnectNotification(RPC_BINDING_HANDLE Binding, void *hEvent)
     * }
     */
    public static FunctionDescriptor I_RpcServerSubscribeForDisconnectNotification$descriptor() {
        return I_RpcServerSubscribeForDisconnectNotification.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerSubscribeForDisconnectNotification(RPC_BINDING_HANDLE Binding, void *hEvent)
     * }
     */
    public static MethodHandle I_RpcServerSubscribeForDisconnectNotification$handle() {
        return I_RpcServerSubscribeForDisconnectNotification.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerSubscribeForDisconnectNotification(RPC_BINDING_HANDLE Binding, void *hEvent)
     * }
     */
    public static MemorySegment I_RpcServerSubscribeForDisconnectNotification$address() {
        return I_RpcServerSubscribeForDisconnectNotification.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerSubscribeForDisconnectNotification(RPC_BINDING_HANDLE Binding, void *hEvent)
     * }
     */
    public static int I_RpcServerSubscribeForDisconnectNotification(MemorySegment Binding, MemorySegment hEvent) {
        var mh$ = I_RpcServerSubscribeForDisconnectNotification.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerSubscribeForDisconnectNotification", Binding, hEvent);
            }
            return (int)mh$.invokeExact(Binding, hEvent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerGetAssociationID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcServerGetAssociationID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerGetAssociationID(RPC_BINDING_HANDLE Binding, unsigned long *AssociationID)
     * }
     */
    public static FunctionDescriptor I_RpcServerGetAssociationID$descriptor() {
        return I_RpcServerGetAssociationID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerGetAssociationID(RPC_BINDING_HANDLE Binding, unsigned long *AssociationID)
     * }
     */
    public static MethodHandle I_RpcServerGetAssociationID$handle() {
        return I_RpcServerGetAssociationID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerGetAssociationID(RPC_BINDING_HANDLE Binding, unsigned long *AssociationID)
     * }
     */
    public static MemorySegment I_RpcServerGetAssociationID$address() {
        return I_RpcServerGetAssociationID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerGetAssociationID(RPC_BINDING_HANDLE Binding, unsigned long *AssociationID)
     * }
     */
    public static int I_RpcServerGetAssociationID(MemorySegment Binding, MemorySegment AssociationID) {
        var mh$ = I_RpcServerGetAssociationID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerGetAssociationID", Binding, AssociationID);
            }
            return (int)mh$.invokeExact(Binding, AssociationID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerDisableExceptionFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcServerDisableExceptionFilter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long I_RpcServerDisableExceptionFilter()
     * }
     */
    public static FunctionDescriptor I_RpcServerDisableExceptionFilter$descriptor() {
        return I_RpcServerDisableExceptionFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long I_RpcServerDisableExceptionFilter()
     * }
     */
    public static MethodHandle I_RpcServerDisableExceptionFilter$handle() {
        return I_RpcServerDisableExceptionFilter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long I_RpcServerDisableExceptionFilter()
     * }
     */
    public static MemorySegment I_RpcServerDisableExceptionFilter$address() {
        return I_RpcServerDisableExceptionFilter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long I_RpcServerDisableExceptionFilter()
     * }
     */
    public static int I_RpcServerDisableExceptionFilter() {
        var mh$ = I_RpcServerDisableExceptionFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerDisableExceptionFilter");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerSubscribeForDisconnectNotification2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcServerSubscribeForDisconnectNotification2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerSubscribeForDisconnectNotification2(RPC_BINDING_HANDLE Binding, void *hEvent, UUID *SubscriptionId)
     * }
     */
    public static FunctionDescriptor I_RpcServerSubscribeForDisconnectNotification2$descriptor() {
        return I_RpcServerSubscribeForDisconnectNotification2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerSubscribeForDisconnectNotification2(RPC_BINDING_HANDLE Binding, void *hEvent, UUID *SubscriptionId)
     * }
     */
    public static MethodHandle I_RpcServerSubscribeForDisconnectNotification2$handle() {
        return I_RpcServerSubscribeForDisconnectNotification2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerSubscribeForDisconnectNotification2(RPC_BINDING_HANDLE Binding, void *hEvent, UUID *SubscriptionId)
     * }
     */
    public static MemorySegment I_RpcServerSubscribeForDisconnectNotification2$address() {
        return I_RpcServerSubscribeForDisconnectNotification2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerSubscribeForDisconnectNotification2(RPC_BINDING_HANDLE Binding, void *hEvent, UUID *SubscriptionId)
     * }
     */
    public static int I_RpcServerSubscribeForDisconnectNotification2(MemorySegment Binding, MemorySegment hEvent, MemorySegment SubscriptionId) {
        var mh$ = I_RpcServerSubscribeForDisconnectNotification2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerSubscribeForDisconnectNotification2", Binding, hEvent, SubscriptionId);
            }
            return (int)mh$.invokeExact(Binding, hEvent, SubscriptionId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerUnsubscribeForDisconnectNotification {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            _GUID.layout()
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcServerUnsubscribeForDisconnectNotification");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUnsubscribeForDisconnectNotification(RPC_BINDING_HANDLE Binding, UUID SubscriptionId)
     * }
     */
    public static FunctionDescriptor I_RpcServerUnsubscribeForDisconnectNotification$descriptor() {
        return I_RpcServerUnsubscribeForDisconnectNotification.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUnsubscribeForDisconnectNotification(RPC_BINDING_HANDLE Binding, UUID SubscriptionId)
     * }
     */
    public static MethodHandle I_RpcServerUnsubscribeForDisconnectNotification$handle() {
        return I_RpcServerUnsubscribeForDisconnectNotification.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUnsubscribeForDisconnectNotification(RPC_BINDING_HANDLE Binding, UUID SubscriptionId)
     * }
     */
    public static MemorySegment I_RpcServerUnsubscribeForDisconnectNotification$address() {
        return I_RpcServerUnsubscribeForDisconnectNotification.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUnsubscribeForDisconnectNotification(RPC_BINDING_HANDLE Binding, UUID SubscriptionId)
     * }
     */
    public static int I_RpcServerUnsubscribeForDisconnectNotification(MemorySegment Binding, MemorySegment SubscriptionId) {
        var mh$ = I_RpcServerUnsubscribeForDisconnectNotification.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerUnsubscribeForDisconnectNotification", Binding, SubscriptionId);
            }
            return (int)mh$.invokeExact(Binding, SubscriptionId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef void *RPC_NS_HANDLE
     * }
     */
    public static final AddressLayout RPC_NS_HANDLE = wgl_h.C_POINTER;

    private static class RpcNsBindingExportA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsBindingExportA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static FunctionDescriptor RpcNsBindingExportA$descriptor() {
        return RpcNsBindingExportA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static MethodHandle RpcNsBindingExportA$handle() {
        return RpcNsBindingExportA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static MemorySegment RpcNsBindingExportA$address() {
        return RpcNsBindingExportA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static int RpcNsBindingExportA(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfSpec, MemorySegment BindingVec, MemorySegment ObjectUuidVec) {
        var mh$ = RpcNsBindingExportA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingExportA", EntryNameSyntax, EntryName, IfSpec, BindingVec, ObjectUuidVec);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, BindingVec, ObjectUuidVec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingUnexportA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsBindingUnexportA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static FunctionDescriptor RpcNsBindingUnexportA$descriptor() {
        return RpcNsBindingUnexportA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static MethodHandle RpcNsBindingUnexportA$handle() {
        return RpcNsBindingUnexportA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static MemorySegment RpcNsBindingUnexportA$address() {
        return RpcNsBindingUnexportA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static int RpcNsBindingUnexportA(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfSpec, MemorySegment ObjectUuidVec) {
        var mh$ = RpcNsBindingUnexportA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingUnexportA", EntryNameSyntax, EntryName, IfSpec, ObjectUuidVec);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjectUuidVec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingExportW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsBindingExportW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static FunctionDescriptor RpcNsBindingExportW$descriptor() {
        return RpcNsBindingExportW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static MethodHandle RpcNsBindingExportW$handle() {
        return RpcNsBindingExportW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static MemorySegment RpcNsBindingExportW$address() {
        return RpcNsBindingExportW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static int RpcNsBindingExportW(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfSpec, MemorySegment BindingVec, MemorySegment ObjectUuidVec) {
        var mh$ = RpcNsBindingExportW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingExportW", EntryNameSyntax, EntryName, IfSpec, BindingVec, ObjectUuidVec);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, BindingVec, ObjectUuidVec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingUnexportW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsBindingUnexportW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static FunctionDescriptor RpcNsBindingUnexportW$descriptor() {
        return RpcNsBindingUnexportW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static MethodHandle RpcNsBindingUnexportW$handle() {
        return RpcNsBindingUnexportW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static MemorySegment RpcNsBindingUnexportW$address() {
        return RpcNsBindingUnexportW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static int RpcNsBindingUnexportW(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfSpec, MemorySegment ObjectUuidVec) {
        var mh$ = RpcNsBindingUnexportW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingUnexportW", EntryNameSyntax, EntryName, IfSpec, ObjectUuidVec);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjectUuidVec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingExportPnPA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsBindingExportPnPA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportPnPA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static FunctionDescriptor RpcNsBindingExportPnPA$descriptor() {
        return RpcNsBindingExportPnPA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportPnPA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static MethodHandle RpcNsBindingExportPnPA$handle() {
        return RpcNsBindingExportPnPA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportPnPA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static MemorySegment RpcNsBindingExportPnPA$address() {
        return RpcNsBindingExportPnPA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportPnPA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static int RpcNsBindingExportPnPA(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfSpec, MemorySegment ObjectVector) {
        var mh$ = RpcNsBindingExportPnPA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingExportPnPA", EntryNameSyntax, EntryName, IfSpec, ObjectVector);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjectVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingUnexportPnPA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsBindingUnexportPnPA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportPnPA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static FunctionDescriptor RpcNsBindingUnexportPnPA$descriptor() {
        return RpcNsBindingUnexportPnPA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportPnPA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static MethodHandle RpcNsBindingUnexportPnPA$handle() {
        return RpcNsBindingUnexportPnPA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportPnPA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static MemorySegment RpcNsBindingUnexportPnPA$address() {
        return RpcNsBindingUnexportPnPA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportPnPA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static int RpcNsBindingUnexportPnPA(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfSpec, MemorySegment ObjectVector) {
        var mh$ = RpcNsBindingUnexportPnPA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingUnexportPnPA", EntryNameSyntax, EntryName, IfSpec, ObjectVector);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjectVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingExportPnPW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsBindingExportPnPW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportPnPW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static FunctionDescriptor RpcNsBindingExportPnPW$descriptor() {
        return RpcNsBindingExportPnPW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportPnPW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static MethodHandle RpcNsBindingExportPnPW$handle() {
        return RpcNsBindingExportPnPW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportPnPW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static MemorySegment RpcNsBindingExportPnPW$address() {
        return RpcNsBindingExportPnPW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportPnPW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static int RpcNsBindingExportPnPW(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfSpec, MemorySegment ObjectVector) {
        var mh$ = RpcNsBindingExportPnPW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingExportPnPW", EntryNameSyntax, EntryName, IfSpec, ObjectVector);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjectVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingUnexportPnPW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsBindingUnexportPnPW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportPnPW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static FunctionDescriptor RpcNsBindingUnexportPnPW$descriptor() {
        return RpcNsBindingUnexportPnPW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportPnPW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static MethodHandle RpcNsBindingUnexportPnPW$handle() {
        return RpcNsBindingUnexportPnPW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportPnPW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static MemorySegment RpcNsBindingUnexportPnPW$address() {
        return RpcNsBindingUnexportPnPW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportPnPW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static int RpcNsBindingUnexportPnPW(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfSpec, MemorySegment ObjectVector) {
        var mh$ = RpcNsBindingUnexportPnPW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingUnexportPnPW", EntryNameSyntax, EntryName, IfSpec, ObjectVector);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjectVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingLookupBeginA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsBindingLookupBeginA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupBeginA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, unsigned long BindingMaxCount, RPC_NS_HANDLE *LookupContext)
     * }
     */
    public static FunctionDescriptor RpcNsBindingLookupBeginA$descriptor() {
        return RpcNsBindingLookupBeginA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupBeginA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, unsigned long BindingMaxCount, RPC_NS_HANDLE *LookupContext)
     * }
     */
    public static MethodHandle RpcNsBindingLookupBeginA$handle() {
        return RpcNsBindingLookupBeginA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupBeginA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, unsigned long BindingMaxCount, RPC_NS_HANDLE *LookupContext)
     * }
     */
    public static MemorySegment RpcNsBindingLookupBeginA$address() {
        return RpcNsBindingLookupBeginA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupBeginA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, unsigned long BindingMaxCount, RPC_NS_HANDLE *LookupContext)
     * }
     */
    public static int RpcNsBindingLookupBeginA(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfSpec, MemorySegment ObjUuid, int BindingMaxCount, MemorySegment LookupContext) {
        var mh$ = RpcNsBindingLookupBeginA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingLookupBeginA", EntryNameSyntax, EntryName, IfSpec, ObjUuid, BindingMaxCount, LookupContext);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjUuid, BindingMaxCount, LookupContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingLookupBeginW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsBindingLookupBeginW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupBeginW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, unsigned long BindingMaxCount, RPC_NS_HANDLE *LookupContext)
     * }
     */
    public static FunctionDescriptor RpcNsBindingLookupBeginW$descriptor() {
        return RpcNsBindingLookupBeginW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupBeginW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, unsigned long BindingMaxCount, RPC_NS_HANDLE *LookupContext)
     * }
     */
    public static MethodHandle RpcNsBindingLookupBeginW$handle() {
        return RpcNsBindingLookupBeginW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupBeginW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, unsigned long BindingMaxCount, RPC_NS_HANDLE *LookupContext)
     * }
     */
    public static MemorySegment RpcNsBindingLookupBeginW$address() {
        return RpcNsBindingLookupBeginW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupBeginW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, unsigned long BindingMaxCount, RPC_NS_HANDLE *LookupContext)
     * }
     */
    public static int RpcNsBindingLookupBeginW(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfSpec, MemorySegment ObjUuid, int BindingMaxCount, MemorySegment LookupContext) {
        var mh$ = RpcNsBindingLookupBeginW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingLookupBeginW", EntryNameSyntax, EntryName, IfSpec, ObjUuid, BindingMaxCount, LookupContext);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjUuid, BindingMaxCount, LookupContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingLookupNext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsBindingLookupNext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupNext(RPC_NS_HANDLE LookupContext, RPC_BINDING_VECTOR **BindingVec)
     * }
     */
    public static FunctionDescriptor RpcNsBindingLookupNext$descriptor() {
        return RpcNsBindingLookupNext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupNext(RPC_NS_HANDLE LookupContext, RPC_BINDING_VECTOR **BindingVec)
     * }
     */
    public static MethodHandle RpcNsBindingLookupNext$handle() {
        return RpcNsBindingLookupNext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupNext(RPC_NS_HANDLE LookupContext, RPC_BINDING_VECTOR **BindingVec)
     * }
     */
    public static MemorySegment RpcNsBindingLookupNext$address() {
        return RpcNsBindingLookupNext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupNext(RPC_NS_HANDLE LookupContext, RPC_BINDING_VECTOR **BindingVec)
     * }
     */
    public static int RpcNsBindingLookupNext(MemorySegment LookupContext, MemorySegment BindingVec) {
        var mh$ = RpcNsBindingLookupNext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingLookupNext", LookupContext, BindingVec);
            }
            return (int)mh$.invokeExact(LookupContext, BindingVec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingLookupDone {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsBindingLookupDone");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupDone(RPC_NS_HANDLE *LookupContext)
     * }
     */
    public static FunctionDescriptor RpcNsBindingLookupDone$descriptor() {
        return RpcNsBindingLookupDone.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupDone(RPC_NS_HANDLE *LookupContext)
     * }
     */
    public static MethodHandle RpcNsBindingLookupDone$handle() {
        return RpcNsBindingLookupDone.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupDone(RPC_NS_HANDLE *LookupContext)
     * }
     */
    public static MemorySegment RpcNsBindingLookupDone$address() {
        return RpcNsBindingLookupDone.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupDone(RPC_NS_HANDLE *LookupContext)
     * }
     */
    public static int RpcNsBindingLookupDone(MemorySegment LookupContext) {
        var mh$ = RpcNsBindingLookupDone.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingLookupDone", LookupContext);
            }
            return (int)mh$.invokeExact(LookupContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsGroupDeleteA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsGroupDeleteA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupDeleteA(unsigned long GroupNameSyntax, RPC_CSTR GroupName)
     * }
     */
    public static FunctionDescriptor RpcNsGroupDeleteA$descriptor() {
        return RpcNsGroupDeleteA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupDeleteA(unsigned long GroupNameSyntax, RPC_CSTR GroupName)
     * }
     */
    public static MethodHandle RpcNsGroupDeleteA$handle() {
        return RpcNsGroupDeleteA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupDeleteA(unsigned long GroupNameSyntax, RPC_CSTR GroupName)
     * }
     */
    public static MemorySegment RpcNsGroupDeleteA$address() {
        return RpcNsGroupDeleteA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupDeleteA(unsigned long GroupNameSyntax, RPC_CSTR GroupName)
     * }
     */
    public static int RpcNsGroupDeleteA(int GroupNameSyntax, MemorySegment GroupName) {
        var mh$ = RpcNsGroupDeleteA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsGroupDeleteA", GroupNameSyntax, GroupName);
            }
            return (int)mh$.invokeExact(GroupNameSyntax, GroupName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsGroupMbrAddA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsGroupMbrAddA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrAddA(unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_CSTR MemberName)
     * }
     */
    public static FunctionDescriptor RpcNsGroupMbrAddA$descriptor() {
        return RpcNsGroupMbrAddA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrAddA(unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_CSTR MemberName)
     * }
     */
    public static MethodHandle RpcNsGroupMbrAddA$handle() {
        return RpcNsGroupMbrAddA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrAddA(unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_CSTR MemberName)
     * }
     */
    public static MemorySegment RpcNsGroupMbrAddA$address() {
        return RpcNsGroupMbrAddA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrAddA(unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_CSTR MemberName)
     * }
     */
    public static int RpcNsGroupMbrAddA(int GroupNameSyntax, MemorySegment GroupName, int MemberNameSyntax, MemorySegment MemberName) {
        var mh$ = RpcNsGroupMbrAddA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsGroupMbrAddA", GroupNameSyntax, GroupName, MemberNameSyntax, MemberName);
            }
            return (int)mh$.invokeExact(GroupNameSyntax, GroupName, MemberNameSyntax, MemberName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsGroupMbrRemoveA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsGroupMbrRemoveA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrRemoveA(unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_CSTR MemberName)
     * }
     */
    public static FunctionDescriptor RpcNsGroupMbrRemoveA$descriptor() {
        return RpcNsGroupMbrRemoveA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrRemoveA(unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_CSTR MemberName)
     * }
     */
    public static MethodHandle RpcNsGroupMbrRemoveA$handle() {
        return RpcNsGroupMbrRemoveA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrRemoveA(unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_CSTR MemberName)
     * }
     */
    public static MemorySegment RpcNsGroupMbrRemoveA$address() {
        return RpcNsGroupMbrRemoveA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrRemoveA(unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_CSTR MemberName)
     * }
     */
    public static int RpcNsGroupMbrRemoveA(int GroupNameSyntax, MemorySegment GroupName, int MemberNameSyntax, MemorySegment MemberName) {
        var mh$ = RpcNsGroupMbrRemoveA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsGroupMbrRemoveA", GroupNameSyntax, GroupName, MemberNameSyntax, MemberName);
            }
            return (int)mh$.invokeExact(GroupNameSyntax, GroupName, MemberNameSyntax, MemberName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsGroupMbrInqBeginA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsGroupMbrInqBeginA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqBeginA(unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static FunctionDescriptor RpcNsGroupMbrInqBeginA$descriptor() {
        return RpcNsGroupMbrInqBeginA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqBeginA(unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MethodHandle RpcNsGroupMbrInqBeginA$handle() {
        return RpcNsGroupMbrInqBeginA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqBeginA(unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MemorySegment RpcNsGroupMbrInqBeginA$address() {
        return RpcNsGroupMbrInqBeginA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqBeginA(unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static int RpcNsGroupMbrInqBeginA(int GroupNameSyntax, MemorySegment GroupName, int MemberNameSyntax, MemorySegment InquiryContext) {
        var mh$ = RpcNsGroupMbrInqBeginA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsGroupMbrInqBeginA", GroupNameSyntax, GroupName, MemberNameSyntax, InquiryContext);
            }
            return (int)mh$.invokeExact(GroupNameSyntax, GroupName, MemberNameSyntax, InquiryContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsGroupMbrInqNextA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsGroupMbrInqNextA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqNextA(RPC_NS_HANDLE InquiryContext, RPC_CSTR *MemberName)
     * }
     */
    public static FunctionDescriptor RpcNsGroupMbrInqNextA$descriptor() {
        return RpcNsGroupMbrInqNextA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqNextA(RPC_NS_HANDLE InquiryContext, RPC_CSTR *MemberName)
     * }
     */
    public static MethodHandle RpcNsGroupMbrInqNextA$handle() {
        return RpcNsGroupMbrInqNextA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqNextA(RPC_NS_HANDLE InquiryContext, RPC_CSTR *MemberName)
     * }
     */
    public static MemorySegment RpcNsGroupMbrInqNextA$address() {
        return RpcNsGroupMbrInqNextA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqNextA(RPC_NS_HANDLE InquiryContext, RPC_CSTR *MemberName)
     * }
     */
    public static int RpcNsGroupMbrInqNextA(MemorySegment InquiryContext, MemorySegment MemberName) {
        var mh$ = RpcNsGroupMbrInqNextA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsGroupMbrInqNextA", InquiryContext, MemberName);
            }
            return (int)mh$.invokeExact(InquiryContext, MemberName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsGroupDeleteW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsGroupDeleteW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupDeleteW(unsigned long GroupNameSyntax, RPC_WSTR GroupName)
     * }
     */
    public static FunctionDescriptor RpcNsGroupDeleteW$descriptor() {
        return RpcNsGroupDeleteW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupDeleteW(unsigned long GroupNameSyntax, RPC_WSTR GroupName)
     * }
     */
    public static MethodHandle RpcNsGroupDeleteW$handle() {
        return RpcNsGroupDeleteW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupDeleteW(unsigned long GroupNameSyntax, RPC_WSTR GroupName)
     * }
     */
    public static MemorySegment RpcNsGroupDeleteW$address() {
        return RpcNsGroupDeleteW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupDeleteW(unsigned long GroupNameSyntax, RPC_WSTR GroupName)
     * }
     */
    public static int RpcNsGroupDeleteW(int GroupNameSyntax, MemorySegment GroupName) {
        var mh$ = RpcNsGroupDeleteW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsGroupDeleteW", GroupNameSyntax, GroupName);
            }
            return (int)mh$.invokeExact(GroupNameSyntax, GroupName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsGroupMbrAddW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsGroupMbrAddW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrAddW(unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_WSTR MemberName)
     * }
     */
    public static FunctionDescriptor RpcNsGroupMbrAddW$descriptor() {
        return RpcNsGroupMbrAddW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrAddW(unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_WSTR MemberName)
     * }
     */
    public static MethodHandle RpcNsGroupMbrAddW$handle() {
        return RpcNsGroupMbrAddW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrAddW(unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_WSTR MemberName)
     * }
     */
    public static MemorySegment RpcNsGroupMbrAddW$address() {
        return RpcNsGroupMbrAddW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrAddW(unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_WSTR MemberName)
     * }
     */
    public static int RpcNsGroupMbrAddW(int GroupNameSyntax, MemorySegment GroupName, int MemberNameSyntax, MemorySegment MemberName) {
        var mh$ = RpcNsGroupMbrAddW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsGroupMbrAddW", GroupNameSyntax, GroupName, MemberNameSyntax, MemberName);
            }
            return (int)mh$.invokeExact(GroupNameSyntax, GroupName, MemberNameSyntax, MemberName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsGroupMbrRemoveW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsGroupMbrRemoveW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrRemoveW(unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_WSTR MemberName)
     * }
     */
    public static FunctionDescriptor RpcNsGroupMbrRemoveW$descriptor() {
        return RpcNsGroupMbrRemoveW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrRemoveW(unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_WSTR MemberName)
     * }
     */
    public static MethodHandle RpcNsGroupMbrRemoveW$handle() {
        return RpcNsGroupMbrRemoveW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrRemoveW(unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_WSTR MemberName)
     * }
     */
    public static MemorySegment RpcNsGroupMbrRemoveW$address() {
        return RpcNsGroupMbrRemoveW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrRemoveW(unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_WSTR MemberName)
     * }
     */
    public static int RpcNsGroupMbrRemoveW(int GroupNameSyntax, MemorySegment GroupName, int MemberNameSyntax, MemorySegment MemberName) {
        var mh$ = RpcNsGroupMbrRemoveW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsGroupMbrRemoveW", GroupNameSyntax, GroupName, MemberNameSyntax, MemberName);
            }
            return (int)mh$.invokeExact(GroupNameSyntax, GroupName, MemberNameSyntax, MemberName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsGroupMbrInqBeginW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsGroupMbrInqBeginW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqBeginW(unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static FunctionDescriptor RpcNsGroupMbrInqBeginW$descriptor() {
        return RpcNsGroupMbrInqBeginW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqBeginW(unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MethodHandle RpcNsGroupMbrInqBeginW$handle() {
        return RpcNsGroupMbrInqBeginW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqBeginW(unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MemorySegment RpcNsGroupMbrInqBeginW$address() {
        return RpcNsGroupMbrInqBeginW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqBeginW(unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static int RpcNsGroupMbrInqBeginW(int GroupNameSyntax, MemorySegment GroupName, int MemberNameSyntax, MemorySegment InquiryContext) {
        var mh$ = RpcNsGroupMbrInqBeginW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsGroupMbrInqBeginW", GroupNameSyntax, GroupName, MemberNameSyntax, InquiryContext);
            }
            return (int)mh$.invokeExact(GroupNameSyntax, GroupName, MemberNameSyntax, InquiryContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsGroupMbrInqNextW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsGroupMbrInqNextW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqNextW(RPC_NS_HANDLE InquiryContext, RPC_WSTR *MemberName)
     * }
     */
    public static FunctionDescriptor RpcNsGroupMbrInqNextW$descriptor() {
        return RpcNsGroupMbrInqNextW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqNextW(RPC_NS_HANDLE InquiryContext, RPC_WSTR *MemberName)
     * }
     */
    public static MethodHandle RpcNsGroupMbrInqNextW$handle() {
        return RpcNsGroupMbrInqNextW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqNextW(RPC_NS_HANDLE InquiryContext, RPC_WSTR *MemberName)
     * }
     */
    public static MemorySegment RpcNsGroupMbrInqNextW$address() {
        return RpcNsGroupMbrInqNextW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqNextW(RPC_NS_HANDLE InquiryContext, RPC_WSTR *MemberName)
     * }
     */
    public static int RpcNsGroupMbrInqNextW(MemorySegment InquiryContext, MemorySegment MemberName) {
        var mh$ = RpcNsGroupMbrInqNextW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsGroupMbrInqNextW", InquiryContext, MemberName);
            }
            return (int)mh$.invokeExact(InquiryContext, MemberName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsGroupMbrInqDone {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsGroupMbrInqDone");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqDone(RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static FunctionDescriptor RpcNsGroupMbrInqDone$descriptor() {
        return RpcNsGroupMbrInqDone.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqDone(RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MethodHandle RpcNsGroupMbrInqDone$handle() {
        return RpcNsGroupMbrInqDone.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqDone(RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MemorySegment RpcNsGroupMbrInqDone$address() {
        return RpcNsGroupMbrInqDone.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqDone(RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static int RpcNsGroupMbrInqDone(MemorySegment InquiryContext) {
        var mh$ = RpcNsGroupMbrInqDone.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsGroupMbrInqDone", InquiryContext);
            }
            return (int)mh$.invokeExact(InquiryContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsProfileDeleteA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsProfileDeleteA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileDeleteA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName)
     * }
     */
    public static FunctionDescriptor RpcNsProfileDeleteA$descriptor() {
        return RpcNsProfileDeleteA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileDeleteA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName)
     * }
     */
    public static MethodHandle RpcNsProfileDeleteA$handle() {
        return RpcNsProfileDeleteA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileDeleteA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName)
     * }
     */
    public static MemorySegment RpcNsProfileDeleteA$address() {
        return RpcNsProfileDeleteA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileDeleteA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName)
     * }
     */
    public static int RpcNsProfileDeleteA(int ProfileNameSyntax, MemorySegment ProfileName) {
        var mh$ = RpcNsProfileDeleteA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsProfileDeleteA", ProfileNameSyntax, ProfileName);
            }
            return (int)mh$.invokeExact(ProfileNameSyntax, ProfileName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsProfileEltAddA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsProfileEltAddA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltAddA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_CSTR MemberName, unsigned long Priority, RPC_CSTR Annotation)
     * }
     */
    public static FunctionDescriptor RpcNsProfileEltAddA$descriptor() {
        return RpcNsProfileEltAddA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltAddA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_CSTR MemberName, unsigned long Priority, RPC_CSTR Annotation)
     * }
     */
    public static MethodHandle RpcNsProfileEltAddA$handle() {
        return RpcNsProfileEltAddA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltAddA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_CSTR MemberName, unsigned long Priority, RPC_CSTR Annotation)
     * }
     */
    public static MemorySegment RpcNsProfileEltAddA$address() {
        return RpcNsProfileEltAddA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltAddA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_CSTR MemberName, unsigned long Priority, RPC_CSTR Annotation)
     * }
     */
    public static int RpcNsProfileEltAddA(int ProfileNameSyntax, MemorySegment ProfileName, MemorySegment IfId, int MemberNameSyntax, MemorySegment MemberName, int Priority, MemorySegment Annotation) {
        var mh$ = RpcNsProfileEltAddA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsProfileEltAddA", ProfileNameSyntax, ProfileName, IfId, MemberNameSyntax, MemberName, Priority, Annotation);
            }
            return (int)mh$.invokeExact(ProfileNameSyntax, ProfileName, IfId, MemberNameSyntax, MemberName, Priority, Annotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsProfileEltRemoveA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsProfileEltRemoveA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltRemoveA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_CSTR MemberName)
     * }
     */
    public static FunctionDescriptor RpcNsProfileEltRemoveA$descriptor() {
        return RpcNsProfileEltRemoveA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltRemoveA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_CSTR MemberName)
     * }
     */
    public static MethodHandle RpcNsProfileEltRemoveA$handle() {
        return RpcNsProfileEltRemoveA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltRemoveA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_CSTR MemberName)
     * }
     */
    public static MemorySegment RpcNsProfileEltRemoveA$address() {
        return RpcNsProfileEltRemoveA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltRemoveA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_CSTR MemberName)
     * }
     */
    public static int RpcNsProfileEltRemoveA(int ProfileNameSyntax, MemorySegment ProfileName, MemorySegment IfId, int MemberNameSyntax, MemorySegment MemberName) {
        var mh$ = RpcNsProfileEltRemoveA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsProfileEltRemoveA", ProfileNameSyntax, ProfileName, IfId, MemberNameSyntax, MemberName);
            }
            return (int)mh$.invokeExact(ProfileNameSyntax, ProfileName, IfId, MemberNameSyntax, MemberName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsProfileEltInqBeginA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsProfileEltInqBeginA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqBeginA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, unsigned long MemberNameSyntax, RPC_CSTR MemberName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static FunctionDescriptor RpcNsProfileEltInqBeginA$descriptor() {
        return RpcNsProfileEltInqBeginA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqBeginA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, unsigned long MemberNameSyntax, RPC_CSTR MemberName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MethodHandle RpcNsProfileEltInqBeginA$handle() {
        return RpcNsProfileEltInqBeginA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqBeginA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, unsigned long MemberNameSyntax, RPC_CSTR MemberName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MemorySegment RpcNsProfileEltInqBeginA$address() {
        return RpcNsProfileEltInqBeginA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqBeginA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, unsigned long MemberNameSyntax, RPC_CSTR MemberName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static int RpcNsProfileEltInqBeginA(int ProfileNameSyntax, MemorySegment ProfileName, int InquiryType, MemorySegment IfId, int VersOption, int MemberNameSyntax, MemorySegment MemberName, MemorySegment InquiryContext) {
        var mh$ = RpcNsProfileEltInqBeginA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsProfileEltInqBeginA", ProfileNameSyntax, ProfileName, InquiryType, IfId, VersOption, MemberNameSyntax, MemberName, InquiryContext);
            }
            return (int)mh$.invokeExact(ProfileNameSyntax, ProfileName, InquiryType, IfId, VersOption, MemberNameSyntax, MemberName, InquiryContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsProfileEltInqNextA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsProfileEltInqNextA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqNextA(RPC_NS_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_CSTR *MemberName, unsigned long *Priority, RPC_CSTR *Annotation)
     * }
     */
    public static FunctionDescriptor RpcNsProfileEltInqNextA$descriptor() {
        return RpcNsProfileEltInqNextA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqNextA(RPC_NS_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_CSTR *MemberName, unsigned long *Priority, RPC_CSTR *Annotation)
     * }
     */
    public static MethodHandle RpcNsProfileEltInqNextA$handle() {
        return RpcNsProfileEltInqNextA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqNextA(RPC_NS_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_CSTR *MemberName, unsigned long *Priority, RPC_CSTR *Annotation)
     * }
     */
    public static MemorySegment RpcNsProfileEltInqNextA$address() {
        return RpcNsProfileEltInqNextA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqNextA(RPC_NS_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_CSTR *MemberName, unsigned long *Priority, RPC_CSTR *Annotation)
     * }
     */
    public static int RpcNsProfileEltInqNextA(MemorySegment InquiryContext, MemorySegment IfId, MemorySegment MemberName, MemorySegment Priority, MemorySegment Annotation) {
        var mh$ = RpcNsProfileEltInqNextA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsProfileEltInqNextA", InquiryContext, IfId, MemberName, Priority, Annotation);
            }
            return (int)mh$.invokeExact(InquiryContext, IfId, MemberName, Priority, Annotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsProfileDeleteW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsProfileDeleteW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileDeleteW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName)
     * }
     */
    public static FunctionDescriptor RpcNsProfileDeleteW$descriptor() {
        return RpcNsProfileDeleteW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileDeleteW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName)
     * }
     */
    public static MethodHandle RpcNsProfileDeleteW$handle() {
        return RpcNsProfileDeleteW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileDeleteW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName)
     * }
     */
    public static MemorySegment RpcNsProfileDeleteW$address() {
        return RpcNsProfileDeleteW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileDeleteW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName)
     * }
     */
    public static int RpcNsProfileDeleteW(int ProfileNameSyntax, MemorySegment ProfileName) {
        var mh$ = RpcNsProfileDeleteW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsProfileDeleteW", ProfileNameSyntax, ProfileName);
            }
            return (int)mh$.invokeExact(ProfileNameSyntax, ProfileName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsProfileEltAddW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsProfileEltAddW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltAddW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_WSTR MemberName, unsigned long Priority, RPC_WSTR Annotation)
     * }
     */
    public static FunctionDescriptor RpcNsProfileEltAddW$descriptor() {
        return RpcNsProfileEltAddW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltAddW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_WSTR MemberName, unsigned long Priority, RPC_WSTR Annotation)
     * }
     */
    public static MethodHandle RpcNsProfileEltAddW$handle() {
        return RpcNsProfileEltAddW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltAddW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_WSTR MemberName, unsigned long Priority, RPC_WSTR Annotation)
     * }
     */
    public static MemorySegment RpcNsProfileEltAddW$address() {
        return RpcNsProfileEltAddW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltAddW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_WSTR MemberName, unsigned long Priority, RPC_WSTR Annotation)
     * }
     */
    public static int RpcNsProfileEltAddW(int ProfileNameSyntax, MemorySegment ProfileName, MemorySegment IfId, int MemberNameSyntax, MemorySegment MemberName, int Priority, MemorySegment Annotation) {
        var mh$ = RpcNsProfileEltAddW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsProfileEltAddW", ProfileNameSyntax, ProfileName, IfId, MemberNameSyntax, MemberName, Priority, Annotation);
            }
            return (int)mh$.invokeExact(ProfileNameSyntax, ProfileName, IfId, MemberNameSyntax, MemberName, Priority, Annotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsProfileEltRemoveW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsProfileEltRemoveW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltRemoveW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_WSTR MemberName)
     * }
     */
    public static FunctionDescriptor RpcNsProfileEltRemoveW$descriptor() {
        return RpcNsProfileEltRemoveW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltRemoveW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_WSTR MemberName)
     * }
     */
    public static MethodHandle RpcNsProfileEltRemoveW$handle() {
        return RpcNsProfileEltRemoveW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltRemoveW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_WSTR MemberName)
     * }
     */
    public static MemorySegment RpcNsProfileEltRemoveW$address() {
        return RpcNsProfileEltRemoveW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltRemoveW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_WSTR MemberName)
     * }
     */
    public static int RpcNsProfileEltRemoveW(int ProfileNameSyntax, MemorySegment ProfileName, MemorySegment IfId, int MemberNameSyntax, MemorySegment MemberName) {
        var mh$ = RpcNsProfileEltRemoveW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsProfileEltRemoveW", ProfileNameSyntax, ProfileName, IfId, MemberNameSyntax, MemberName);
            }
            return (int)mh$.invokeExact(ProfileNameSyntax, ProfileName, IfId, MemberNameSyntax, MemberName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsProfileEltInqBeginW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsProfileEltInqBeginW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqBeginW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, unsigned long MemberNameSyntax, RPC_WSTR MemberName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static FunctionDescriptor RpcNsProfileEltInqBeginW$descriptor() {
        return RpcNsProfileEltInqBeginW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqBeginW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, unsigned long MemberNameSyntax, RPC_WSTR MemberName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MethodHandle RpcNsProfileEltInqBeginW$handle() {
        return RpcNsProfileEltInqBeginW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqBeginW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, unsigned long MemberNameSyntax, RPC_WSTR MemberName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MemorySegment RpcNsProfileEltInqBeginW$address() {
        return RpcNsProfileEltInqBeginW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqBeginW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, unsigned long MemberNameSyntax, RPC_WSTR MemberName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static int RpcNsProfileEltInqBeginW(int ProfileNameSyntax, MemorySegment ProfileName, int InquiryType, MemorySegment IfId, int VersOption, int MemberNameSyntax, MemorySegment MemberName, MemorySegment InquiryContext) {
        var mh$ = RpcNsProfileEltInqBeginW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsProfileEltInqBeginW", ProfileNameSyntax, ProfileName, InquiryType, IfId, VersOption, MemberNameSyntax, MemberName, InquiryContext);
            }
            return (int)mh$.invokeExact(ProfileNameSyntax, ProfileName, InquiryType, IfId, VersOption, MemberNameSyntax, MemberName, InquiryContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsProfileEltInqNextW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsProfileEltInqNextW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqNextW(RPC_NS_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_WSTR *MemberName, unsigned long *Priority, RPC_WSTR *Annotation)
     * }
     */
    public static FunctionDescriptor RpcNsProfileEltInqNextW$descriptor() {
        return RpcNsProfileEltInqNextW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqNextW(RPC_NS_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_WSTR *MemberName, unsigned long *Priority, RPC_WSTR *Annotation)
     * }
     */
    public static MethodHandle RpcNsProfileEltInqNextW$handle() {
        return RpcNsProfileEltInqNextW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqNextW(RPC_NS_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_WSTR *MemberName, unsigned long *Priority, RPC_WSTR *Annotation)
     * }
     */
    public static MemorySegment RpcNsProfileEltInqNextW$address() {
        return RpcNsProfileEltInqNextW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqNextW(RPC_NS_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_WSTR *MemberName, unsigned long *Priority, RPC_WSTR *Annotation)
     * }
     */
    public static int RpcNsProfileEltInqNextW(MemorySegment InquiryContext, MemorySegment IfId, MemorySegment MemberName, MemorySegment Priority, MemorySegment Annotation) {
        var mh$ = RpcNsProfileEltInqNextW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsProfileEltInqNextW", InquiryContext, IfId, MemberName, Priority, Annotation);
            }
            return (int)mh$.invokeExact(InquiryContext, IfId, MemberName, Priority, Annotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsProfileEltInqDone {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsProfileEltInqDone");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqDone(RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static FunctionDescriptor RpcNsProfileEltInqDone$descriptor() {
        return RpcNsProfileEltInqDone.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqDone(RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MethodHandle RpcNsProfileEltInqDone$handle() {
        return RpcNsProfileEltInqDone.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqDone(RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MemorySegment RpcNsProfileEltInqDone$address() {
        return RpcNsProfileEltInqDone.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqDone(RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static int RpcNsProfileEltInqDone(MemorySegment InquiryContext) {
        var mh$ = RpcNsProfileEltInqDone.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsProfileEltInqDone", InquiryContext);
            }
            return (int)mh$.invokeExact(InquiryContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsEntryObjectInqBeginA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsEntryObjectInqBeginA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryObjectInqBeginA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static FunctionDescriptor RpcNsEntryObjectInqBeginA$descriptor() {
        return RpcNsEntryObjectInqBeginA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryObjectInqBeginA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MethodHandle RpcNsEntryObjectInqBeginA$handle() {
        return RpcNsEntryObjectInqBeginA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryObjectInqBeginA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MemorySegment RpcNsEntryObjectInqBeginA$address() {
        return RpcNsEntryObjectInqBeginA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryObjectInqBeginA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static int RpcNsEntryObjectInqBeginA(int EntryNameSyntax, MemorySegment EntryName, MemorySegment InquiryContext) {
        var mh$ = RpcNsEntryObjectInqBeginA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsEntryObjectInqBeginA", EntryNameSyntax, EntryName, InquiryContext);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, InquiryContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsEntryObjectInqBeginW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsEntryObjectInqBeginW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryObjectInqBeginW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static FunctionDescriptor RpcNsEntryObjectInqBeginW$descriptor() {
        return RpcNsEntryObjectInqBeginW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryObjectInqBeginW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MethodHandle RpcNsEntryObjectInqBeginW$handle() {
        return RpcNsEntryObjectInqBeginW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryObjectInqBeginW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MemorySegment RpcNsEntryObjectInqBeginW$address() {
        return RpcNsEntryObjectInqBeginW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryObjectInqBeginW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static int RpcNsEntryObjectInqBeginW(int EntryNameSyntax, MemorySegment EntryName, MemorySegment InquiryContext) {
        var mh$ = RpcNsEntryObjectInqBeginW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsEntryObjectInqBeginW", EntryNameSyntax, EntryName, InquiryContext);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, InquiryContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsEntryObjectInqNext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsEntryObjectInqNext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryObjectInqNext(RPC_NS_HANDLE InquiryContext, UUID *ObjUuid)
     * }
     */
    public static FunctionDescriptor RpcNsEntryObjectInqNext$descriptor() {
        return RpcNsEntryObjectInqNext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryObjectInqNext(RPC_NS_HANDLE InquiryContext, UUID *ObjUuid)
     * }
     */
    public static MethodHandle RpcNsEntryObjectInqNext$handle() {
        return RpcNsEntryObjectInqNext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryObjectInqNext(RPC_NS_HANDLE InquiryContext, UUID *ObjUuid)
     * }
     */
    public static MemorySegment RpcNsEntryObjectInqNext$address() {
        return RpcNsEntryObjectInqNext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryObjectInqNext(RPC_NS_HANDLE InquiryContext, UUID *ObjUuid)
     * }
     */
    public static int RpcNsEntryObjectInqNext(MemorySegment InquiryContext, MemorySegment ObjUuid) {
        var mh$ = RpcNsEntryObjectInqNext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsEntryObjectInqNext", InquiryContext, ObjUuid);
            }
            return (int)mh$.invokeExact(InquiryContext, ObjUuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsEntryObjectInqDone {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsEntryObjectInqDone");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryObjectInqDone(RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static FunctionDescriptor RpcNsEntryObjectInqDone$descriptor() {
        return RpcNsEntryObjectInqDone.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryObjectInqDone(RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MethodHandle RpcNsEntryObjectInqDone$handle() {
        return RpcNsEntryObjectInqDone.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryObjectInqDone(RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MemorySegment RpcNsEntryObjectInqDone$address() {
        return RpcNsEntryObjectInqDone.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryObjectInqDone(RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static int RpcNsEntryObjectInqDone(MemorySegment InquiryContext) {
        var mh$ = RpcNsEntryObjectInqDone.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsEntryObjectInqDone", InquiryContext);
            }
            return (int)mh$.invokeExact(InquiryContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsEntryExpandNameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsEntryExpandNameA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryExpandNameA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_CSTR *ExpandedName)
     * }
     */
    public static FunctionDescriptor RpcNsEntryExpandNameA$descriptor() {
        return RpcNsEntryExpandNameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryExpandNameA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_CSTR *ExpandedName)
     * }
     */
    public static MethodHandle RpcNsEntryExpandNameA$handle() {
        return RpcNsEntryExpandNameA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryExpandNameA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_CSTR *ExpandedName)
     * }
     */
    public static MemorySegment RpcNsEntryExpandNameA$address() {
        return RpcNsEntryExpandNameA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryExpandNameA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_CSTR *ExpandedName)
     * }
     */
    public static int RpcNsEntryExpandNameA(int EntryNameSyntax, MemorySegment EntryName, MemorySegment ExpandedName) {
        var mh$ = RpcNsEntryExpandNameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsEntryExpandNameA", EntryNameSyntax, EntryName, ExpandedName);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, ExpandedName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsMgmtBindingUnexportA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsMgmtBindingUnexportA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtBindingUnexportA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_ID *IfId, unsigned long VersOption, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static FunctionDescriptor RpcNsMgmtBindingUnexportA$descriptor() {
        return RpcNsMgmtBindingUnexportA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtBindingUnexportA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_ID *IfId, unsigned long VersOption, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static MethodHandle RpcNsMgmtBindingUnexportA$handle() {
        return RpcNsMgmtBindingUnexportA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtBindingUnexportA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_ID *IfId, unsigned long VersOption, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static MemorySegment RpcNsMgmtBindingUnexportA$address() {
        return RpcNsMgmtBindingUnexportA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtBindingUnexportA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_ID *IfId, unsigned long VersOption, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static int RpcNsMgmtBindingUnexportA(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfId, int VersOption, MemorySegment ObjectUuidVec) {
        var mh$ = RpcNsMgmtBindingUnexportA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsMgmtBindingUnexportA", EntryNameSyntax, EntryName, IfId, VersOption, ObjectUuidVec);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfId, VersOption, ObjectUuidVec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsMgmtEntryCreateA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsMgmtEntryCreateA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryCreateA(unsigned long EntryNameSyntax, RPC_CSTR EntryName)
     * }
     */
    public static FunctionDescriptor RpcNsMgmtEntryCreateA$descriptor() {
        return RpcNsMgmtEntryCreateA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryCreateA(unsigned long EntryNameSyntax, RPC_CSTR EntryName)
     * }
     */
    public static MethodHandle RpcNsMgmtEntryCreateA$handle() {
        return RpcNsMgmtEntryCreateA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryCreateA(unsigned long EntryNameSyntax, RPC_CSTR EntryName)
     * }
     */
    public static MemorySegment RpcNsMgmtEntryCreateA$address() {
        return RpcNsMgmtEntryCreateA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryCreateA(unsigned long EntryNameSyntax, RPC_CSTR EntryName)
     * }
     */
    public static int RpcNsMgmtEntryCreateA(int EntryNameSyntax, MemorySegment EntryName) {
        var mh$ = RpcNsMgmtEntryCreateA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsMgmtEntryCreateA", EntryNameSyntax, EntryName);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsMgmtEntryDeleteA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsMgmtEntryDeleteA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryDeleteA(unsigned long EntryNameSyntax, RPC_CSTR EntryName)
     * }
     */
    public static FunctionDescriptor RpcNsMgmtEntryDeleteA$descriptor() {
        return RpcNsMgmtEntryDeleteA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryDeleteA(unsigned long EntryNameSyntax, RPC_CSTR EntryName)
     * }
     */
    public static MethodHandle RpcNsMgmtEntryDeleteA$handle() {
        return RpcNsMgmtEntryDeleteA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryDeleteA(unsigned long EntryNameSyntax, RPC_CSTR EntryName)
     * }
     */
    public static MemorySegment RpcNsMgmtEntryDeleteA$address() {
        return RpcNsMgmtEntryDeleteA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryDeleteA(unsigned long EntryNameSyntax, RPC_CSTR EntryName)
     * }
     */
    public static int RpcNsMgmtEntryDeleteA(int EntryNameSyntax, MemorySegment EntryName) {
        var mh$ = RpcNsMgmtEntryDeleteA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsMgmtEntryDeleteA", EntryNameSyntax, EntryName);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsMgmtEntryInqIfIdsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsMgmtEntryInqIfIdsA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryInqIfIdsA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_ID_VECTOR **IfIdVec)
     * }
     */
    public static FunctionDescriptor RpcNsMgmtEntryInqIfIdsA$descriptor() {
        return RpcNsMgmtEntryInqIfIdsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryInqIfIdsA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_ID_VECTOR **IfIdVec)
     * }
     */
    public static MethodHandle RpcNsMgmtEntryInqIfIdsA$handle() {
        return RpcNsMgmtEntryInqIfIdsA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryInqIfIdsA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_ID_VECTOR **IfIdVec)
     * }
     */
    public static MemorySegment RpcNsMgmtEntryInqIfIdsA$address() {
        return RpcNsMgmtEntryInqIfIdsA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryInqIfIdsA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_ID_VECTOR **IfIdVec)
     * }
     */
    public static int RpcNsMgmtEntryInqIfIdsA(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfIdVec) {
        var mh$ = RpcNsMgmtEntryInqIfIdsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsMgmtEntryInqIfIdsA", EntryNameSyntax, EntryName, IfIdVec);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfIdVec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsMgmtHandleSetExpAge {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsMgmtHandleSetExpAge");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtHandleSetExpAge(RPC_NS_HANDLE NsHandle, unsigned long ExpirationAge)
     * }
     */
    public static FunctionDescriptor RpcNsMgmtHandleSetExpAge$descriptor() {
        return RpcNsMgmtHandleSetExpAge.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtHandleSetExpAge(RPC_NS_HANDLE NsHandle, unsigned long ExpirationAge)
     * }
     */
    public static MethodHandle RpcNsMgmtHandleSetExpAge$handle() {
        return RpcNsMgmtHandleSetExpAge.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtHandleSetExpAge(RPC_NS_HANDLE NsHandle, unsigned long ExpirationAge)
     * }
     */
    public static MemorySegment RpcNsMgmtHandleSetExpAge$address() {
        return RpcNsMgmtHandleSetExpAge.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtHandleSetExpAge(RPC_NS_HANDLE NsHandle, unsigned long ExpirationAge)
     * }
     */
    public static int RpcNsMgmtHandleSetExpAge(MemorySegment NsHandle, int ExpirationAge) {
        var mh$ = RpcNsMgmtHandleSetExpAge.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsMgmtHandleSetExpAge", NsHandle, ExpirationAge);
            }
            return (int)mh$.invokeExact(NsHandle, ExpirationAge);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsMgmtInqExpAge {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsMgmtInqExpAge");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtInqExpAge(unsigned long *ExpirationAge)
     * }
     */
    public static FunctionDescriptor RpcNsMgmtInqExpAge$descriptor() {
        return RpcNsMgmtInqExpAge.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtInqExpAge(unsigned long *ExpirationAge)
     * }
     */
    public static MethodHandle RpcNsMgmtInqExpAge$handle() {
        return RpcNsMgmtInqExpAge.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtInqExpAge(unsigned long *ExpirationAge)
     * }
     */
    public static MemorySegment RpcNsMgmtInqExpAge$address() {
        return RpcNsMgmtInqExpAge.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtInqExpAge(unsigned long *ExpirationAge)
     * }
     */
    public static int RpcNsMgmtInqExpAge(MemorySegment ExpirationAge) {
        var mh$ = RpcNsMgmtInqExpAge.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsMgmtInqExpAge", ExpirationAge);
            }
            return (int)mh$.invokeExact(ExpirationAge);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsMgmtSetExpAge {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsMgmtSetExpAge");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtSetExpAge(unsigned long ExpirationAge)
     * }
     */
    public static FunctionDescriptor RpcNsMgmtSetExpAge$descriptor() {
        return RpcNsMgmtSetExpAge.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtSetExpAge(unsigned long ExpirationAge)
     * }
     */
    public static MethodHandle RpcNsMgmtSetExpAge$handle() {
        return RpcNsMgmtSetExpAge.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtSetExpAge(unsigned long ExpirationAge)
     * }
     */
    public static MemorySegment RpcNsMgmtSetExpAge$address() {
        return RpcNsMgmtSetExpAge.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtSetExpAge(unsigned long ExpirationAge)
     * }
     */
    public static int RpcNsMgmtSetExpAge(int ExpirationAge) {
        var mh$ = RpcNsMgmtSetExpAge.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsMgmtSetExpAge", ExpirationAge);
            }
            return (int)mh$.invokeExact(ExpirationAge);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsEntryExpandNameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsEntryExpandNameW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryExpandNameW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_WSTR *ExpandedName)
     * }
     */
    public static FunctionDescriptor RpcNsEntryExpandNameW$descriptor() {
        return RpcNsEntryExpandNameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryExpandNameW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_WSTR *ExpandedName)
     * }
     */
    public static MethodHandle RpcNsEntryExpandNameW$handle() {
        return RpcNsEntryExpandNameW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryExpandNameW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_WSTR *ExpandedName)
     * }
     */
    public static MemorySegment RpcNsEntryExpandNameW$address() {
        return RpcNsEntryExpandNameW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryExpandNameW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_WSTR *ExpandedName)
     * }
     */
    public static int RpcNsEntryExpandNameW(int EntryNameSyntax, MemorySegment EntryName, MemorySegment ExpandedName) {
        var mh$ = RpcNsEntryExpandNameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsEntryExpandNameW", EntryNameSyntax, EntryName, ExpandedName);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, ExpandedName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsMgmtBindingUnexportW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsMgmtBindingUnexportW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtBindingUnexportW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_ID *IfId, unsigned long VersOption, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static FunctionDescriptor RpcNsMgmtBindingUnexportW$descriptor() {
        return RpcNsMgmtBindingUnexportW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtBindingUnexportW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_ID *IfId, unsigned long VersOption, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static MethodHandle RpcNsMgmtBindingUnexportW$handle() {
        return RpcNsMgmtBindingUnexportW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtBindingUnexportW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_ID *IfId, unsigned long VersOption, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static MemorySegment RpcNsMgmtBindingUnexportW$address() {
        return RpcNsMgmtBindingUnexportW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtBindingUnexportW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_ID *IfId, unsigned long VersOption, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static int RpcNsMgmtBindingUnexportW(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfId, int VersOption, MemorySegment ObjectUuidVec) {
        var mh$ = RpcNsMgmtBindingUnexportW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsMgmtBindingUnexportW", EntryNameSyntax, EntryName, IfId, VersOption, ObjectUuidVec);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfId, VersOption, ObjectUuidVec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsMgmtEntryCreateW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsMgmtEntryCreateW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryCreateW(unsigned long EntryNameSyntax, RPC_WSTR EntryName)
     * }
     */
    public static FunctionDescriptor RpcNsMgmtEntryCreateW$descriptor() {
        return RpcNsMgmtEntryCreateW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryCreateW(unsigned long EntryNameSyntax, RPC_WSTR EntryName)
     * }
     */
    public static MethodHandle RpcNsMgmtEntryCreateW$handle() {
        return RpcNsMgmtEntryCreateW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryCreateW(unsigned long EntryNameSyntax, RPC_WSTR EntryName)
     * }
     */
    public static MemorySegment RpcNsMgmtEntryCreateW$address() {
        return RpcNsMgmtEntryCreateW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryCreateW(unsigned long EntryNameSyntax, RPC_WSTR EntryName)
     * }
     */
    public static int RpcNsMgmtEntryCreateW(int EntryNameSyntax, MemorySegment EntryName) {
        var mh$ = RpcNsMgmtEntryCreateW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsMgmtEntryCreateW", EntryNameSyntax, EntryName);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsMgmtEntryDeleteW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsMgmtEntryDeleteW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryDeleteW(unsigned long EntryNameSyntax, RPC_WSTR EntryName)
     * }
     */
    public static FunctionDescriptor RpcNsMgmtEntryDeleteW$descriptor() {
        return RpcNsMgmtEntryDeleteW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryDeleteW(unsigned long EntryNameSyntax, RPC_WSTR EntryName)
     * }
     */
    public static MethodHandle RpcNsMgmtEntryDeleteW$handle() {
        return RpcNsMgmtEntryDeleteW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryDeleteW(unsigned long EntryNameSyntax, RPC_WSTR EntryName)
     * }
     */
    public static MemorySegment RpcNsMgmtEntryDeleteW$address() {
        return RpcNsMgmtEntryDeleteW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryDeleteW(unsigned long EntryNameSyntax, RPC_WSTR EntryName)
     * }
     */
    public static int RpcNsMgmtEntryDeleteW(int EntryNameSyntax, MemorySegment EntryName) {
        var mh$ = RpcNsMgmtEntryDeleteW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsMgmtEntryDeleteW", EntryNameSyntax, EntryName);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsMgmtEntryInqIfIdsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsMgmtEntryInqIfIdsW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryInqIfIdsW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_ID_VECTOR **IfIdVec)
     * }
     */
    public static FunctionDescriptor RpcNsMgmtEntryInqIfIdsW$descriptor() {
        return RpcNsMgmtEntryInqIfIdsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryInqIfIdsW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_ID_VECTOR **IfIdVec)
     * }
     */
    public static MethodHandle RpcNsMgmtEntryInqIfIdsW$handle() {
        return RpcNsMgmtEntryInqIfIdsW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryInqIfIdsW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_ID_VECTOR **IfIdVec)
     * }
     */
    public static MemorySegment RpcNsMgmtEntryInqIfIdsW$address() {
        return RpcNsMgmtEntryInqIfIdsW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryInqIfIdsW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_ID_VECTOR **IfIdVec)
     * }
     */
    public static int RpcNsMgmtEntryInqIfIdsW(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfIdVec) {
        var mh$ = RpcNsMgmtEntryInqIfIdsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsMgmtEntryInqIfIdsW", EntryNameSyntax, EntryName, IfIdVec);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfIdVec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingImportBeginA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsBindingImportBeginA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingImportBeginA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, RPC_NS_HANDLE *ImportContext)
     * }
     */
    public static FunctionDescriptor RpcNsBindingImportBeginA$descriptor() {
        return RpcNsBindingImportBeginA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingImportBeginA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, RPC_NS_HANDLE *ImportContext)
     * }
     */
    public static MethodHandle RpcNsBindingImportBeginA$handle() {
        return RpcNsBindingImportBeginA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingImportBeginA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, RPC_NS_HANDLE *ImportContext)
     * }
     */
    public static MemorySegment RpcNsBindingImportBeginA$address() {
        return RpcNsBindingImportBeginA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingImportBeginA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, RPC_NS_HANDLE *ImportContext)
     * }
     */
    public static int RpcNsBindingImportBeginA(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfSpec, MemorySegment ObjUuid, MemorySegment ImportContext) {
        var mh$ = RpcNsBindingImportBeginA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingImportBeginA", EntryNameSyntax, EntryName, IfSpec, ObjUuid, ImportContext);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjUuid, ImportContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingImportBeginW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsBindingImportBeginW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingImportBeginW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, RPC_NS_HANDLE *ImportContext)
     * }
     */
    public static FunctionDescriptor RpcNsBindingImportBeginW$descriptor() {
        return RpcNsBindingImportBeginW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingImportBeginW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, RPC_NS_HANDLE *ImportContext)
     * }
     */
    public static MethodHandle RpcNsBindingImportBeginW$handle() {
        return RpcNsBindingImportBeginW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingImportBeginW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, RPC_NS_HANDLE *ImportContext)
     * }
     */
    public static MemorySegment RpcNsBindingImportBeginW$address() {
        return RpcNsBindingImportBeginW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingImportBeginW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, RPC_NS_HANDLE *ImportContext)
     * }
     */
    public static int RpcNsBindingImportBeginW(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfSpec, MemorySegment ObjUuid, MemorySegment ImportContext) {
        var mh$ = RpcNsBindingImportBeginW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingImportBeginW", EntryNameSyntax, EntryName, IfSpec, ObjUuid, ImportContext);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjUuid, ImportContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingImportNext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsBindingImportNext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingImportNext(RPC_NS_HANDLE ImportContext, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static FunctionDescriptor RpcNsBindingImportNext$descriptor() {
        return RpcNsBindingImportNext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingImportNext(RPC_NS_HANDLE ImportContext, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MethodHandle RpcNsBindingImportNext$handle() {
        return RpcNsBindingImportNext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingImportNext(RPC_NS_HANDLE ImportContext, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MemorySegment RpcNsBindingImportNext$address() {
        return RpcNsBindingImportNext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingImportNext(RPC_NS_HANDLE ImportContext, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static int RpcNsBindingImportNext(MemorySegment ImportContext, MemorySegment Binding) {
        var mh$ = RpcNsBindingImportNext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingImportNext", ImportContext, Binding);
            }
            return (int)mh$.invokeExact(ImportContext, Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingImportDone {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsBindingImportDone");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingImportDone(RPC_NS_HANDLE *ImportContext)
     * }
     */
    public static FunctionDescriptor RpcNsBindingImportDone$descriptor() {
        return RpcNsBindingImportDone.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingImportDone(RPC_NS_HANDLE *ImportContext)
     * }
     */
    public static MethodHandle RpcNsBindingImportDone$handle() {
        return RpcNsBindingImportDone.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingImportDone(RPC_NS_HANDLE *ImportContext)
     * }
     */
    public static MemorySegment RpcNsBindingImportDone$address() {
        return RpcNsBindingImportDone.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingImportDone(RPC_NS_HANDLE *ImportContext)
     * }
     */
    public static int RpcNsBindingImportDone(MemorySegment ImportContext) {
        var mh$ = RpcNsBindingImportDone.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingImportDone", ImportContext);
            }
            return (int)mh$.invokeExact(ImportContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingSelect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcNsBindingSelect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingSelect(RPC_BINDING_VECTOR *BindingVec, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static FunctionDescriptor RpcNsBindingSelect$descriptor() {
        return RpcNsBindingSelect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingSelect(RPC_BINDING_VECTOR *BindingVec, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MethodHandle RpcNsBindingSelect$handle() {
        return RpcNsBindingSelect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingSelect(RPC_BINDING_VECTOR *BindingVec, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MemorySegment RpcNsBindingSelect$address() {
        return RpcNsBindingSelect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingSelect(RPC_BINDING_VECTOR *BindingVec, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static int RpcNsBindingSelect(MemorySegment BindingVec, MemorySegment Binding) {
        var mh$ = RpcNsBindingSelect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingSelect", BindingVec, Binding);
            }
            return (int)mh$.invokeExact(BindingVec, Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int RpcNotificationTypeNone = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _RPC_NOTIFICATION_TYPES.RpcNotificationTypeNone = 0
     * }
     */
    public static int RpcNotificationTypeNone() {
        return RpcNotificationTypeNone;
    }
    private static final int RpcNotificationTypeEvent = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _RPC_NOTIFICATION_TYPES.RpcNotificationTypeEvent = 1
     * }
     */
    public static int RpcNotificationTypeEvent() {
        return RpcNotificationTypeEvent;
    }
    private static final int RpcNotificationTypeApc = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _RPC_NOTIFICATION_TYPES.RpcNotificationTypeApc = 2
     * }
     */
    public static int RpcNotificationTypeApc() {
        return RpcNotificationTypeApc;
    }
    private static final int RpcNotificationTypeIoc = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _RPC_NOTIFICATION_TYPES.RpcNotificationTypeIoc = 3
     * }
     */
    public static int RpcNotificationTypeIoc() {
        return RpcNotificationTypeIoc;
    }
    private static final int RpcNotificationTypeHwnd = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _RPC_NOTIFICATION_TYPES.RpcNotificationTypeHwnd = 4
     * }
     */
    public static int RpcNotificationTypeHwnd() {
        return RpcNotificationTypeHwnd;
    }
    private static final int RpcNotificationTypeCallback = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _RPC_NOTIFICATION_TYPES.RpcNotificationTypeCallback = 5
     * }
     */
    public static int RpcNotificationTypeCallback() {
        return RpcNotificationTypeCallback;
    }
    private static final int RpcCallComplete = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _RPC_ASYNC_EVENT.RpcCallComplete = 0
     * }
     */
    public static int RpcCallComplete() {
        return RpcCallComplete;
    }
    private static final int RpcSendComplete = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _RPC_ASYNC_EVENT.RpcSendComplete = 1
     * }
     */
    public static int RpcSendComplete() {
        return RpcSendComplete;
    }
    private static final int RpcReceiveComplete = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _RPC_ASYNC_EVENT.RpcReceiveComplete = 2
     * }
     */
    public static int RpcReceiveComplete() {
        return RpcReceiveComplete;
    }
    private static final int RpcClientDisconnect = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _RPC_ASYNC_EVENT.RpcClientDisconnect = 3
     * }
     */
    public static int RpcClientDisconnect() {
        return RpcClientDisconnect;
    }
    private static final int RpcClientCancel = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _RPC_ASYNC_EVENT.RpcClientCancel = 4
     * }
     */
    public static int RpcClientCancel() {
        return RpcClientCancel;
    }
    /**
     * {@snippet lang=c :
     * typedef union _RPC_ASYNC_NOTIFICATION_INFO {
     *     struct {
     *         PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
     *         HANDLE hThread;
     *     } APC;
     *     struct {
     *         HANDLE hIOPort;
     *         DWORD dwNumberOfBytesTransferred;
     *         DWORD_PTR dwCompletionKey;
     *         LPOVERLAPPED lpOverlapped;
     *     } IOC;
     *     struct {
     *         HWND hWnd;
     *         UINT Msg;
     *     } HWND;
     *     HANDLE hEvent;
     *     PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
     * } *PRPC_ASYNC_NOTIFICATION_INFO
     * }
     */
    public static final AddressLayout PRPC_ASYNC_NOTIFICATION_INFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_ASYNC_STATE {
     *     unsigned int Size;
     *     unsigned long Signature;
     *     long Lock;
     *     unsigned long Flags;
     *     void *StubInfo;
     *     void *UserInfo;
     *     void *RuntimeInfo;
     *     RPC_ASYNC_EVENT Event;
     *     RPC_NOTIFICATION_TYPES NotificationType;
     *     RPC_ASYNC_NOTIFICATION_INFO u;
     *     LONG_PTR Reserved[4];
     * } *PRPC_ASYNC_STATE
     * }
     */
    public static final AddressLayout PRPC_ASYNC_STATE = wgl_h.C_POINTER;

    private static class RpcAsyncRegisterInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcAsyncRegisterInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncRegisterInfo(PRPC_ASYNC_STATE pAsync)
     * }
     */
    public static FunctionDescriptor RpcAsyncRegisterInfo$descriptor() {
        return RpcAsyncRegisterInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncRegisterInfo(PRPC_ASYNC_STATE pAsync)
     * }
     */
    public static MethodHandle RpcAsyncRegisterInfo$handle() {
        return RpcAsyncRegisterInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncRegisterInfo(PRPC_ASYNC_STATE pAsync)
     * }
     */
    public static MemorySegment RpcAsyncRegisterInfo$address() {
        return RpcAsyncRegisterInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncRegisterInfo(PRPC_ASYNC_STATE pAsync)
     * }
     */
    public static int RpcAsyncRegisterInfo(MemorySegment pAsync) {
        var mh$ = RpcAsyncRegisterInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcAsyncRegisterInfo", pAsync);
            }
            return (int)mh$.invokeExact(pAsync);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcAsyncInitializeHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcAsyncInitializeHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncInitializeHandle(PRPC_ASYNC_STATE pAsync, unsigned int Size)
     * }
     */
    public static FunctionDescriptor RpcAsyncInitializeHandle$descriptor() {
        return RpcAsyncInitializeHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncInitializeHandle(PRPC_ASYNC_STATE pAsync, unsigned int Size)
     * }
     */
    public static MethodHandle RpcAsyncInitializeHandle$handle() {
        return RpcAsyncInitializeHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncInitializeHandle(PRPC_ASYNC_STATE pAsync, unsigned int Size)
     * }
     */
    public static MemorySegment RpcAsyncInitializeHandle$address() {
        return RpcAsyncInitializeHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncInitializeHandle(PRPC_ASYNC_STATE pAsync, unsigned int Size)
     * }
     */
    public static int RpcAsyncInitializeHandle(MemorySegment pAsync, int Size) {
        var mh$ = RpcAsyncInitializeHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcAsyncInitializeHandle", pAsync, Size);
            }
            return (int)mh$.invokeExact(pAsync, Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcAsyncGetCallStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcAsyncGetCallStatus");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncGetCallStatus(PRPC_ASYNC_STATE pAsync)
     * }
     */
    public static FunctionDescriptor RpcAsyncGetCallStatus$descriptor() {
        return RpcAsyncGetCallStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncGetCallStatus(PRPC_ASYNC_STATE pAsync)
     * }
     */
    public static MethodHandle RpcAsyncGetCallStatus$handle() {
        return RpcAsyncGetCallStatus.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncGetCallStatus(PRPC_ASYNC_STATE pAsync)
     * }
     */
    public static MemorySegment RpcAsyncGetCallStatus$address() {
        return RpcAsyncGetCallStatus.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncGetCallStatus(PRPC_ASYNC_STATE pAsync)
     * }
     */
    public static int RpcAsyncGetCallStatus(MemorySegment pAsync) {
        var mh$ = RpcAsyncGetCallStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcAsyncGetCallStatus", pAsync);
            }
            return (int)mh$.invokeExact(pAsync);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcAsyncCompleteCall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcAsyncCompleteCall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncCompleteCall(PRPC_ASYNC_STATE pAsync, void *Reply)
     * }
     */
    public static FunctionDescriptor RpcAsyncCompleteCall$descriptor() {
        return RpcAsyncCompleteCall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncCompleteCall(PRPC_ASYNC_STATE pAsync, void *Reply)
     * }
     */
    public static MethodHandle RpcAsyncCompleteCall$handle() {
        return RpcAsyncCompleteCall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncCompleteCall(PRPC_ASYNC_STATE pAsync, void *Reply)
     * }
     */
    public static MemorySegment RpcAsyncCompleteCall$address() {
        return RpcAsyncCompleteCall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncCompleteCall(PRPC_ASYNC_STATE pAsync, void *Reply)
     * }
     */
    public static int RpcAsyncCompleteCall(MemorySegment pAsync, MemorySegment Reply) {
        var mh$ = RpcAsyncCompleteCall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcAsyncCompleteCall", pAsync, Reply);
            }
            return (int)mh$.invokeExact(pAsync, Reply);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcAsyncAbortCall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcAsyncAbortCall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncAbortCall(PRPC_ASYNC_STATE pAsync, unsigned long ExceptionCode)
     * }
     */
    public static FunctionDescriptor RpcAsyncAbortCall$descriptor() {
        return RpcAsyncAbortCall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncAbortCall(PRPC_ASYNC_STATE pAsync, unsigned long ExceptionCode)
     * }
     */
    public static MethodHandle RpcAsyncAbortCall$handle() {
        return RpcAsyncAbortCall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncAbortCall(PRPC_ASYNC_STATE pAsync, unsigned long ExceptionCode)
     * }
     */
    public static MemorySegment RpcAsyncAbortCall$address() {
        return RpcAsyncAbortCall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncAbortCall(PRPC_ASYNC_STATE pAsync, unsigned long ExceptionCode)
     * }
     */
    public static int RpcAsyncAbortCall(MemorySegment pAsync, int ExceptionCode) {
        var mh$ = RpcAsyncAbortCall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcAsyncAbortCall", pAsync, ExceptionCode);
            }
            return (int)mh$.invokeExact(pAsync, ExceptionCode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcAsyncCancelCall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcAsyncCancelCall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncCancelCall(PRPC_ASYNC_STATE pAsync, BOOL fAbort)
     * }
     */
    public static FunctionDescriptor RpcAsyncCancelCall$descriptor() {
        return RpcAsyncCancelCall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncCancelCall(PRPC_ASYNC_STATE pAsync, BOOL fAbort)
     * }
     */
    public static MethodHandle RpcAsyncCancelCall$handle() {
        return RpcAsyncCancelCall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncCancelCall(PRPC_ASYNC_STATE pAsync, BOOL fAbort)
     * }
     */
    public static MemorySegment RpcAsyncCancelCall$address() {
        return RpcAsyncCancelCall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncCancelCall(PRPC_ASYNC_STATE pAsync, BOOL fAbort)
     * }
     */
    public static int RpcAsyncCancelCall(MemorySegment pAsync, int fAbort) {
        var mh$ = RpcAsyncCancelCall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcAsyncCancelCall", pAsync, fAbort);
            }
            return (int)mh$.invokeExact(pAsync, fAbort);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int eeptAnsiString = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagExtendedErrorParamTypes.eeptAnsiString = 1
     * }
     */
    public static int eeptAnsiString() {
        return eeptAnsiString;
    }
    private static final int eeptUnicodeString = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagExtendedErrorParamTypes.eeptUnicodeString = 2
     * }
     */
    public static int eeptUnicodeString() {
        return eeptUnicodeString;
    }
    private static final int eeptLongVal = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagExtendedErrorParamTypes.eeptLongVal = 3
     * }
     */
    public static int eeptLongVal() {
        return eeptLongVal;
    }
    private static final int eeptShortVal = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagExtendedErrorParamTypes.eeptShortVal = 4
     * }
     */
    public static int eeptShortVal() {
        return eeptShortVal;
    }
    private static final int eeptPointerVal = (int)5L;
    /**
     * {@snippet lang=c :
     * enum tagExtendedErrorParamTypes.eeptPointerVal = 5
     * }
     */
    public static int eeptPointerVal() {
        return eeptPointerVal;
    }
    private static final int eeptNone = (int)6L;
    /**
     * {@snippet lang=c :
     * enum tagExtendedErrorParamTypes.eeptNone = 6
     * }
     */
    public static int eeptNone() {
        return eeptNone;
    }
    private static final int eeptBinary = (int)7L;
    /**
     * {@snippet lang=c :
     * enum tagExtendedErrorParamTypes.eeptBinary = 7
     * }
     */
    public static int eeptBinary() {
        return eeptBinary;
    }

    private static class RpcErrorStartEnumeration {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcErrorStartEnumeration");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorStartEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle)
     * }
     */
    public static FunctionDescriptor RpcErrorStartEnumeration$descriptor() {
        return RpcErrorStartEnumeration.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorStartEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle)
     * }
     */
    public static MethodHandle RpcErrorStartEnumeration$handle() {
        return RpcErrorStartEnumeration.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorStartEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle)
     * }
     */
    public static MemorySegment RpcErrorStartEnumeration$address() {
        return RpcErrorStartEnumeration.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorStartEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle)
     * }
     */
    public static int RpcErrorStartEnumeration(MemorySegment EnumHandle) {
        var mh$ = RpcErrorStartEnumeration.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcErrorStartEnumeration", EnumHandle);
            }
            return (int)mh$.invokeExact(EnumHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcErrorGetNextRecord {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcErrorGetNextRecord");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorGetNextRecord(RPC_ERROR_ENUM_HANDLE *EnumHandle, BOOL CopyStrings, RPC_EXTENDED_ERROR_INFO *ErrorInfo)
     * }
     */
    public static FunctionDescriptor RpcErrorGetNextRecord$descriptor() {
        return RpcErrorGetNextRecord.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorGetNextRecord(RPC_ERROR_ENUM_HANDLE *EnumHandle, BOOL CopyStrings, RPC_EXTENDED_ERROR_INFO *ErrorInfo)
     * }
     */
    public static MethodHandle RpcErrorGetNextRecord$handle() {
        return RpcErrorGetNextRecord.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorGetNextRecord(RPC_ERROR_ENUM_HANDLE *EnumHandle, BOOL CopyStrings, RPC_EXTENDED_ERROR_INFO *ErrorInfo)
     * }
     */
    public static MemorySegment RpcErrorGetNextRecord$address() {
        return RpcErrorGetNextRecord.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorGetNextRecord(RPC_ERROR_ENUM_HANDLE *EnumHandle, BOOL CopyStrings, RPC_EXTENDED_ERROR_INFO *ErrorInfo)
     * }
     */
    public static int RpcErrorGetNextRecord(MemorySegment EnumHandle, int CopyStrings, MemorySegment ErrorInfo) {
        var mh$ = RpcErrorGetNextRecord.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcErrorGetNextRecord", EnumHandle, CopyStrings, ErrorInfo);
            }
            return (int)mh$.invokeExact(EnumHandle, CopyStrings, ErrorInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcErrorEndEnumeration {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcErrorEndEnumeration");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorEndEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle)
     * }
     */
    public static FunctionDescriptor RpcErrorEndEnumeration$descriptor() {
        return RpcErrorEndEnumeration.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorEndEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle)
     * }
     */
    public static MethodHandle RpcErrorEndEnumeration$handle() {
        return RpcErrorEndEnumeration.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorEndEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle)
     * }
     */
    public static MemorySegment RpcErrorEndEnumeration$address() {
        return RpcErrorEndEnumeration.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorEndEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle)
     * }
     */
    public static int RpcErrorEndEnumeration(MemorySegment EnumHandle) {
        var mh$ = RpcErrorEndEnumeration.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcErrorEndEnumeration", EnumHandle);
            }
            return (int)mh$.invokeExact(EnumHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcErrorResetEnumeration {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcErrorResetEnumeration");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorResetEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle)
     * }
     */
    public static FunctionDescriptor RpcErrorResetEnumeration$descriptor() {
        return RpcErrorResetEnumeration.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorResetEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle)
     * }
     */
    public static MethodHandle RpcErrorResetEnumeration$handle() {
        return RpcErrorResetEnumeration.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorResetEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle)
     * }
     */
    public static MemorySegment RpcErrorResetEnumeration$address() {
        return RpcErrorResetEnumeration.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorResetEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle)
     * }
     */
    public static int RpcErrorResetEnumeration(MemorySegment EnumHandle) {
        var mh$ = RpcErrorResetEnumeration.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcErrorResetEnumeration", EnumHandle);
            }
            return (int)mh$.invokeExact(EnumHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcErrorGetNumberOfRecords {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcErrorGetNumberOfRecords");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorGetNumberOfRecords(RPC_ERROR_ENUM_HANDLE *EnumHandle, int *Records)
     * }
     */
    public static FunctionDescriptor RpcErrorGetNumberOfRecords$descriptor() {
        return RpcErrorGetNumberOfRecords.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorGetNumberOfRecords(RPC_ERROR_ENUM_HANDLE *EnumHandle, int *Records)
     * }
     */
    public static MethodHandle RpcErrorGetNumberOfRecords$handle() {
        return RpcErrorGetNumberOfRecords.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorGetNumberOfRecords(RPC_ERROR_ENUM_HANDLE *EnumHandle, int *Records)
     * }
     */
    public static MemorySegment RpcErrorGetNumberOfRecords$address() {
        return RpcErrorGetNumberOfRecords.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorGetNumberOfRecords(RPC_ERROR_ENUM_HANDLE *EnumHandle, int *Records)
     * }
     */
    public static int RpcErrorGetNumberOfRecords(MemorySegment EnumHandle, MemorySegment Records) {
        var mh$ = RpcErrorGetNumberOfRecords.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcErrorGetNumberOfRecords", EnumHandle, Records);
            }
            return (int)mh$.invokeExact(EnumHandle, Records);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcErrorSaveErrorInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcErrorSaveErrorInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorSaveErrorInfo(RPC_ERROR_ENUM_HANDLE *EnumHandle, PVOID *ErrorBlob, size_t *BlobSize)
     * }
     */
    public static FunctionDescriptor RpcErrorSaveErrorInfo$descriptor() {
        return RpcErrorSaveErrorInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorSaveErrorInfo(RPC_ERROR_ENUM_HANDLE *EnumHandle, PVOID *ErrorBlob, size_t *BlobSize)
     * }
     */
    public static MethodHandle RpcErrorSaveErrorInfo$handle() {
        return RpcErrorSaveErrorInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorSaveErrorInfo(RPC_ERROR_ENUM_HANDLE *EnumHandle, PVOID *ErrorBlob, size_t *BlobSize)
     * }
     */
    public static MemorySegment RpcErrorSaveErrorInfo$address() {
        return RpcErrorSaveErrorInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorSaveErrorInfo(RPC_ERROR_ENUM_HANDLE *EnumHandle, PVOID *ErrorBlob, size_t *BlobSize)
     * }
     */
    public static int RpcErrorSaveErrorInfo(MemorySegment EnumHandle, MemorySegment ErrorBlob, MemorySegment BlobSize) {
        var mh$ = RpcErrorSaveErrorInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcErrorSaveErrorInfo", EnumHandle, ErrorBlob, BlobSize);
            }
            return (int)mh$.invokeExact(EnumHandle, ErrorBlob, BlobSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcErrorLoadErrorInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcErrorLoadErrorInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorLoadErrorInfo(PVOID ErrorBlob, size_t BlobSize, RPC_ERROR_ENUM_HANDLE *EnumHandle)
     * }
     */
    public static FunctionDescriptor RpcErrorLoadErrorInfo$descriptor() {
        return RpcErrorLoadErrorInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorLoadErrorInfo(PVOID ErrorBlob, size_t BlobSize, RPC_ERROR_ENUM_HANDLE *EnumHandle)
     * }
     */
    public static MethodHandle RpcErrorLoadErrorInfo$handle() {
        return RpcErrorLoadErrorInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorLoadErrorInfo(PVOID ErrorBlob, size_t BlobSize, RPC_ERROR_ENUM_HANDLE *EnumHandle)
     * }
     */
    public static MemorySegment RpcErrorLoadErrorInfo$address() {
        return RpcErrorLoadErrorInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorLoadErrorInfo(PVOID ErrorBlob, size_t BlobSize, RPC_ERROR_ENUM_HANDLE *EnumHandle)
     * }
     */
    public static int RpcErrorLoadErrorInfo(MemorySegment ErrorBlob, long BlobSize, MemorySegment EnumHandle) {
        var mh$ = RpcErrorLoadErrorInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcErrorLoadErrorInfo", ErrorBlob, BlobSize, EnumHandle);
            }
            return (int)mh$.invokeExact(ErrorBlob, BlobSize, EnumHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcErrorAddRecord {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcErrorAddRecord");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorAddRecord(RPC_EXTENDED_ERROR_INFO *ErrorInfo)
     * }
     */
    public static FunctionDescriptor RpcErrorAddRecord$descriptor() {
        return RpcErrorAddRecord.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorAddRecord(RPC_EXTENDED_ERROR_INFO *ErrorInfo)
     * }
     */
    public static MethodHandle RpcErrorAddRecord$handle() {
        return RpcErrorAddRecord.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorAddRecord(RPC_EXTENDED_ERROR_INFO *ErrorInfo)
     * }
     */
    public static MemorySegment RpcErrorAddRecord$address() {
        return RpcErrorAddRecord.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorAddRecord(RPC_EXTENDED_ERROR_INFO *ErrorInfo)
     * }
     */
    public static int RpcErrorAddRecord(MemorySegment ErrorInfo) {
        var mh$ = RpcErrorAddRecord.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcErrorAddRecord", ErrorInfo);
            }
            return (int)mh$.invokeExact(ErrorInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcErrorClearInformation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcErrorClearInformation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void RpcErrorClearInformation()
     * }
     */
    public static FunctionDescriptor RpcErrorClearInformation$descriptor() {
        return RpcErrorClearInformation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void RpcErrorClearInformation()
     * }
     */
    public static MethodHandle RpcErrorClearInformation$handle() {
        return RpcErrorClearInformation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void RpcErrorClearInformation()
     * }
     */
    public static MemorySegment RpcErrorClearInformation$address() {
        return RpcErrorClearInformation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void RpcErrorClearInformation()
     * }
     */
    public static void RpcErrorClearInformation() {
        var mh$ = RpcErrorClearInformation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcErrorClearInformation");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcAsyncCleanupThread {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcAsyncCleanupThread");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncCleanupThread(DWORD dwTimeout)
     * }
     */
    public static FunctionDescriptor RpcAsyncCleanupThread$descriptor() {
        return RpcAsyncCleanupThread.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncCleanupThread(DWORD dwTimeout)
     * }
     */
    public static MethodHandle RpcAsyncCleanupThread$handle() {
        return RpcAsyncCleanupThread.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncCleanupThread(DWORD dwTimeout)
     * }
     */
    public static MemorySegment RpcAsyncCleanupThread$address() {
        return RpcAsyncCleanupThread.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncCleanupThread(DWORD dwTimeout)
     * }
     */
    public static int RpcAsyncCleanupThread(int dwTimeout) {
        var mh$ = RpcAsyncCleanupThread.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcAsyncCleanupThread", dwTimeout);
            }
            return (int)mh$.invokeExact(dwTimeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcGetAuthorizationContextForClient {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            _LUID.layout(),
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcGetAuthorizationContextForClient");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcGetAuthorizationContextForClient(RPC_BINDING_HANDLE ClientBinding, BOOL ImpersonateOnReturn, PVOID Reserved1, PLARGE_INTEGER pExpirationTime, LUID Reserved2, DWORD Reserved3, PVOID Reserved4, PVOID *pAuthzClientContext)
     * }
     */
    public static FunctionDescriptor RpcGetAuthorizationContextForClient$descriptor() {
        return RpcGetAuthorizationContextForClient.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcGetAuthorizationContextForClient(RPC_BINDING_HANDLE ClientBinding, BOOL ImpersonateOnReturn, PVOID Reserved1, PLARGE_INTEGER pExpirationTime, LUID Reserved2, DWORD Reserved3, PVOID Reserved4, PVOID *pAuthzClientContext)
     * }
     */
    public static MethodHandle RpcGetAuthorizationContextForClient$handle() {
        return RpcGetAuthorizationContextForClient.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcGetAuthorizationContextForClient(RPC_BINDING_HANDLE ClientBinding, BOOL ImpersonateOnReturn, PVOID Reserved1, PLARGE_INTEGER pExpirationTime, LUID Reserved2, DWORD Reserved3, PVOID Reserved4, PVOID *pAuthzClientContext)
     * }
     */
    public static MemorySegment RpcGetAuthorizationContextForClient$address() {
        return RpcGetAuthorizationContextForClient.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcGetAuthorizationContextForClient(RPC_BINDING_HANDLE ClientBinding, BOOL ImpersonateOnReturn, PVOID Reserved1, PLARGE_INTEGER pExpirationTime, LUID Reserved2, DWORD Reserved3, PVOID Reserved4, PVOID *pAuthzClientContext)
     * }
     */
    public static int RpcGetAuthorizationContextForClient(MemorySegment ClientBinding, int ImpersonateOnReturn, MemorySegment Reserved1, MemorySegment pExpirationTime, MemorySegment Reserved2, int Reserved3, MemorySegment Reserved4, MemorySegment pAuthzClientContext) {
        var mh$ = RpcGetAuthorizationContextForClient.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcGetAuthorizationContextForClient", ClientBinding, ImpersonateOnReturn, Reserved1, pExpirationTime, Reserved2, Reserved3, Reserved4, pAuthzClientContext);
            }
            return (int)mh$.invokeExact(ClientBinding, ImpersonateOnReturn, Reserved1, pExpirationTime, Reserved2, Reserved3, Reserved4, pAuthzClientContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcFreeAuthorizationContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcFreeAuthorizationContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcFreeAuthorizationContext(PVOID *pAuthzClientContext)
     * }
     */
    public static FunctionDescriptor RpcFreeAuthorizationContext$descriptor() {
        return RpcFreeAuthorizationContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcFreeAuthorizationContext(PVOID *pAuthzClientContext)
     * }
     */
    public static MethodHandle RpcFreeAuthorizationContext$handle() {
        return RpcFreeAuthorizationContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcFreeAuthorizationContext(PVOID *pAuthzClientContext)
     * }
     */
    public static MemorySegment RpcFreeAuthorizationContext$address() {
        return RpcFreeAuthorizationContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcFreeAuthorizationContext(PVOID *pAuthzClientContext)
     * }
     */
    public static int RpcFreeAuthorizationContext(MemorySegment pAuthzClientContext) {
        var mh$ = RpcFreeAuthorizationContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcFreeAuthorizationContext", pAuthzClientContext);
            }
            return (int)mh$.invokeExact(pAuthzClientContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcSsContextLockExclusive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcSsContextLockExclusive");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSsContextLockExclusive(RPC_BINDING_HANDLE ServerBindingHandle, PVOID UserContext)
     * }
     */
    public static FunctionDescriptor RpcSsContextLockExclusive$descriptor() {
        return RpcSsContextLockExclusive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSsContextLockExclusive(RPC_BINDING_HANDLE ServerBindingHandle, PVOID UserContext)
     * }
     */
    public static MethodHandle RpcSsContextLockExclusive$handle() {
        return RpcSsContextLockExclusive.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSsContextLockExclusive(RPC_BINDING_HANDLE ServerBindingHandle, PVOID UserContext)
     * }
     */
    public static MemorySegment RpcSsContextLockExclusive$address() {
        return RpcSsContextLockExclusive.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcSsContextLockExclusive(RPC_BINDING_HANDLE ServerBindingHandle, PVOID UserContext)
     * }
     */
    public static int RpcSsContextLockExclusive(MemorySegment ServerBindingHandle, MemorySegment UserContext) {
        var mh$ = RpcSsContextLockExclusive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcSsContextLockExclusive", ServerBindingHandle, UserContext);
            }
            return (int)mh$.invokeExact(ServerBindingHandle, UserContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcSsContextLockShared {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcSsContextLockShared");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSsContextLockShared(RPC_BINDING_HANDLE ServerBindingHandle, PVOID UserContext)
     * }
     */
    public static FunctionDescriptor RpcSsContextLockShared$descriptor() {
        return RpcSsContextLockShared.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSsContextLockShared(RPC_BINDING_HANDLE ServerBindingHandle, PVOID UserContext)
     * }
     */
    public static MethodHandle RpcSsContextLockShared$handle() {
        return RpcSsContextLockShared.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSsContextLockShared(RPC_BINDING_HANDLE ServerBindingHandle, PVOID UserContext)
     * }
     */
    public static MemorySegment RpcSsContextLockShared$address() {
        return RpcSsContextLockShared.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcSsContextLockShared(RPC_BINDING_HANDLE ServerBindingHandle, PVOID UserContext)
     * }
     */
    public static int RpcSsContextLockShared(MemorySegment ServerBindingHandle, MemorySegment UserContext) {
        var mh$ = RpcSsContextLockShared.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcSsContextLockShared", ServerBindingHandle, UserContext);
            }
            return (int)mh$.invokeExact(ServerBindingHandle, UserContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int rlafInvalid = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagRpcLocalAddressFormat.rlafInvalid = 0
     * }
     */
    public static int rlafInvalid() {
        return rlafInvalid;
    }
    private static final int rlafIPv4 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagRpcLocalAddressFormat.rlafIPv4 = 1
     * }
     */
    public static int rlafIPv4() {
        return rlafIPv4;
    }
    private static final int rlafIPv6 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagRpcLocalAddressFormat.rlafIPv6 = 2
     * }
     */
    public static int rlafIPv6() {
        return rlafIPv6;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_CALL_LOCAL_ADDRESS_V1 {
     *     unsigned int Version;
     *     void *Buffer;
     *     unsigned long BufferSize;
     *     RpcLocalAddressFormat AddressFormat;
     * } *PRPC_CALL_LOCAL_ADDRESS_V1
     * }
     */
    public static final AddressLayout PRPC_CALL_LOCAL_ADDRESS_V1 = wgl_h.C_POINTER;
    private static final int rctInvalid = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagRpcCallType.rctInvalid = 0
     * }
     */
    public static int rctInvalid() {
        return rctInvalid;
    }
    private static final int rctNormal = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagRpcCallType.rctNormal = 1
     * }
     */
    public static int rctNormal() {
        return rctNormal;
    }
    private static final int rctTraining = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagRpcCallType.rctTraining = 2
     * }
     */
    public static int rctTraining() {
        return rctTraining;
    }
    private static final int rctGuaranteed = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagRpcCallType.rctGuaranteed = 3
     * }
     */
    public static int rctGuaranteed() {
        return rctGuaranteed;
    }
    private static final int rcclInvalid = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagRpcCallClientLocality.rcclInvalid = 0
     * }
     */
    public static int rcclInvalid() {
        return rcclInvalid;
    }
    private static final int rcclLocal = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagRpcCallClientLocality.rcclLocal = 1
     * }
     */
    public static int rcclLocal() {
        return rcclLocal;
    }
    private static final int rcclRemote = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagRpcCallClientLocality.rcclRemote = 2
     * }
     */
    public static int rcclRemote() {
        return rcclRemote;
    }
    private static final int rcclClientUnknownLocality = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagRpcCallClientLocality.rcclClientUnknownLocality = 3
     * }
     */
    public static int rcclClientUnknownLocality() {
        return rcclClientUnknownLocality;
    }

    private static class RpcServerInqCallAttributesW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerInqCallAttributesW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqCallAttributesW(RPC_BINDING_HANDLE ClientBinding, void *RpcCallAttributes)
     * }
     */
    public static FunctionDescriptor RpcServerInqCallAttributesW$descriptor() {
        return RpcServerInqCallAttributesW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqCallAttributesW(RPC_BINDING_HANDLE ClientBinding, void *RpcCallAttributes)
     * }
     */
    public static MethodHandle RpcServerInqCallAttributesW$handle() {
        return RpcServerInqCallAttributesW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqCallAttributesW(RPC_BINDING_HANDLE ClientBinding, void *RpcCallAttributes)
     * }
     */
    public static MemorySegment RpcServerInqCallAttributesW$address() {
        return RpcServerInqCallAttributesW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqCallAttributesW(RPC_BINDING_HANDLE ClientBinding, void *RpcCallAttributes)
     * }
     */
    public static int RpcServerInqCallAttributesW(MemorySegment ClientBinding, MemorySegment RpcCallAttributes) {
        var mh$ = RpcServerInqCallAttributesW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInqCallAttributesW", ClientBinding, RpcCallAttributes);
            }
            return (int)mh$.invokeExact(ClientBinding, RpcCallAttributes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerInqCallAttributesA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerInqCallAttributesA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqCallAttributesA(RPC_BINDING_HANDLE ClientBinding, void *RpcCallAttributes)
     * }
     */
    public static FunctionDescriptor RpcServerInqCallAttributesA$descriptor() {
        return RpcServerInqCallAttributesA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqCallAttributesA(RPC_BINDING_HANDLE ClientBinding, void *RpcCallAttributes)
     * }
     */
    public static MethodHandle RpcServerInqCallAttributesA$handle() {
        return RpcServerInqCallAttributesA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqCallAttributesA(RPC_BINDING_HANDLE ClientBinding, void *RpcCallAttributes)
     * }
     */
    public static MemorySegment RpcServerInqCallAttributesA$address() {
        return RpcServerInqCallAttributesA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqCallAttributesA(RPC_BINDING_HANDLE ClientBinding, void *RpcCallAttributes)
     * }
     */
    public static int RpcServerInqCallAttributesA(MemorySegment ClientBinding, MemorySegment RpcCallAttributes) {
        var mh$ = RpcServerInqCallAttributesA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInqCallAttributesA", ClientBinding, RpcCallAttributes);
            }
            return (int)mh$.invokeExact(ClientBinding, RpcCallAttributes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int RpcNotificationCallNone = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _RPC_NOTIFICATIONS.RpcNotificationCallNone = 0
     * }
     */
    public static int RpcNotificationCallNone() {
        return RpcNotificationCallNone;
    }
    private static final int RpcNotificationClientDisconnect = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _RPC_NOTIFICATIONS.RpcNotificationClientDisconnect = 1
     * }
     */
    public static int RpcNotificationClientDisconnect() {
        return RpcNotificationClientDisconnect;
    }
    private static final int RpcNotificationCallCancel = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _RPC_NOTIFICATIONS.RpcNotificationCallCancel = 2
     * }
     */
    public static int RpcNotificationCallCancel() {
        return RpcNotificationCallCancel;
    }

    private static class RpcServerSubscribeForNotification {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerSubscribeForNotification");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerSubscribeForNotification(RPC_BINDING_HANDLE Binding, RPC_NOTIFICATIONS Notification, RPC_NOTIFICATION_TYPES NotificationType, RPC_ASYNC_NOTIFICATION_INFO *NotificationInfo)
     * }
     */
    public static FunctionDescriptor RpcServerSubscribeForNotification$descriptor() {
        return RpcServerSubscribeForNotification.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerSubscribeForNotification(RPC_BINDING_HANDLE Binding, RPC_NOTIFICATIONS Notification, RPC_NOTIFICATION_TYPES NotificationType, RPC_ASYNC_NOTIFICATION_INFO *NotificationInfo)
     * }
     */
    public static MethodHandle RpcServerSubscribeForNotification$handle() {
        return RpcServerSubscribeForNotification.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerSubscribeForNotification(RPC_BINDING_HANDLE Binding, RPC_NOTIFICATIONS Notification, RPC_NOTIFICATION_TYPES NotificationType, RPC_ASYNC_NOTIFICATION_INFO *NotificationInfo)
     * }
     */
    public static MemorySegment RpcServerSubscribeForNotification$address() {
        return RpcServerSubscribeForNotification.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerSubscribeForNotification(RPC_BINDING_HANDLE Binding, RPC_NOTIFICATIONS Notification, RPC_NOTIFICATION_TYPES NotificationType, RPC_ASYNC_NOTIFICATION_INFO *NotificationInfo)
     * }
     */
    public static int RpcServerSubscribeForNotification(MemorySegment Binding, int Notification, int NotificationType, MemorySegment NotificationInfo) {
        var mh$ = RpcServerSubscribeForNotification.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerSubscribeForNotification", Binding, Notification, NotificationType, NotificationInfo);
            }
            return (int)mh$.invokeExact(Binding, Notification, NotificationType, NotificationInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUnsubscribeForNotification {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcServerUnsubscribeForNotification");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUnsubscribeForNotification(RPC_BINDING_HANDLE Binding, RPC_NOTIFICATIONS Notification, unsigned long *NotificationsQueued)
     * }
     */
    public static FunctionDescriptor RpcServerUnsubscribeForNotification$descriptor() {
        return RpcServerUnsubscribeForNotification.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUnsubscribeForNotification(RPC_BINDING_HANDLE Binding, RPC_NOTIFICATIONS Notification, unsigned long *NotificationsQueued)
     * }
     */
    public static MethodHandle RpcServerUnsubscribeForNotification$handle() {
        return RpcServerUnsubscribeForNotification.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUnsubscribeForNotification(RPC_BINDING_HANDLE Binding, RPC_NOTIFICATIONS Notification, unsigned long *NotificationsQueued)
     * }
     */
    public static MemorySegment RpcServerUnsubscribeForNotification$address() {
        return RpcServerUnsubscribeForNotification.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUnsubscribeForNotification(RPC_BINDING_HANDLE Binding, RPC_NOTIFICATIONS Notification, unsigned long *NotificationsQueued)
     * }
     */
    public static int RpcServerUnsubscribeForNotification(MemorySegment Binding, int Notification, MemorySegment NotificationsQueued) {
        var mh$ = RpcServerUnsubscribeForNotification.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUnsubscribeForNotification", Binding, Notification, NotificationsQueued);
            }
            return (int)mh$.invokeExact(Binding, Notification, NotificationsQueued);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingBind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcBindingBind");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingBind(PRPC_ASYNC_STATE pAsync, RPC_BINDING_HANDLE Binding, RPC_IF_HANDLE IfSpec)
     * }
     */
    public static FunctionDescriptor RpcBindingBind$descriptor() {
        return RpcBindingBind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingBind(PRPC_ASYNC_STATE pAsync, RPC_BINDING_HANDLE Binding, RPC_IF_HANDLE IfSpec)
     * }
     */
    public static MethodHandle RpcBindingBind$handle() {
        return RpcBindingBind.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingBind(PRPC_ASYNC_STATE pAsync, RPC_BINDING_HANDLE Binding, RPC_IF_HANDLE IfSpec)
     * }
     */
    public static MemorySegment RpcBindingBind$address() {
        return RpcBindingBind.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingBind(PRPC_ASYNC_STATE pAsync, RPC_BINDING_HANDLE Binding, RPC_IF_HANDLE IfSpec)
     * }
     */
    public static int RpcBindingBind(MemorySegment pAsync, MemorySegment Binding, MemorySegment IfSpec) {
        var mh$ = RpcBindingBind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingBind", pAsync, Binding, IfSpec);
            }
            return (int)mh$.invokeExact(pAsync, Binding, IfSpec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingUnbind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcBindingUnbind");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingUnbind(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static FunctionDescriptor RpcBindingUnbind$descriptor() {
        return RpcBindingUnbind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingUnbind(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static MethodHandle RpcBindingUnbind$handle() {
        return RpcBindingUnbind.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingUnbind(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static MemorySegment RpcBindingUnbind$address() {
        return RpcBindingUnbind.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingUnbind(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static int RpcBindingUnbind(MemorySegment Binding) {
        var mh$ = RpcBindingUnbind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingUnbind", Binding);
            }
            return (int)mh$.invokeExact(Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcAsyncSetHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcAsyncSetHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcAsyncSetHandle(PRPC_MESSAGE Message, PRPC_ASYNC_STATE pAsync)
     * }
     */
    public static FunctionDescriptor I_RpcAsyncSetHandle$descriptor() {
        return I_RpcAsyncSetHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcAsyncSetHandle(PRPC_MESSAGE Message, PRPC_ASYNC_STATE pAsync)
     * }
     */
    public static MethodHandle I_RpcAsyncSetHandle$handle() {
        return I_RpcAsyncSetHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcAsyncSetHandle(PRPC_MESSAGE Message, PRPC_ASYNC_STATE pAsync)
     * }
     */
    public static MemorySegment I_RpcAsyncSetHandle$address() {
        return I_RpcAsyncSetHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcAsyncSetHandle(PRPC_MESSAGE Message, PRPC_ASYNC_STATE pAsync)
     * }
     */
    public static int I_RpcAsyncSetHandle(MemorySegment Message, MemorySegment pAsync) {
        var mh$ = I_RpcAsyncSetHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcAsyncSetHandle", Message, pAsync);
            }
            return (int)mh$.invokeExact(Message, pAsync);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcAsyncAbortCall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcAsyncAbortCall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcAsyncAbortCall(PRPC_ASYNC_STATE pAsync, unsigned long ExceptionCode)
     * }
     */
    public static FunctionDescriptor I_RpcAsyncAbortCall$descriptor() {
        return I_RpcAsyncAbortCall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcAsyncAbortCall(PRPC_ASYNC_STATE pAsync, unsigned long ExceptionCode)
     * }
     */
    public static MethodHandle I_RpcAsyncAbortCall$handle() {
        return I_RpcAsyncAbortCall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcAsyncAbortCall(PRPC_ASYNC_STATE pAsync, unsigned long ExceptionCode)
     * }
     */
    public static MemorySegment I_RpcAsyncAbortCall$address() {
        return I_RpcAsyncAbortCall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcAsyncAbortCall(PRPC_ASYNC_STATE pAsync, unsigned long ExceptionCode)
     * }
     */
    public static int I_RpcAsyncAbortCall(MemorySegment pAsync, int ExceptionCode) {
        var mh$ = I_RpcAsyncAbortCall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcAsyncAbortCall", pAsync, ExceptionCode);
            }
            return (int)mh$.invokeExact(pAsync, ExceptionCode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcExceptionFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcExceptionFilter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int I_RpcExceptionFilter(unsigned long ExceptionCode)
     * }
     */
    public static FunctionDescriptor I_RpcExceptionFilter$descriptor() {
        return I_RpcExceptionFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int I_RpcExceptionFilter(unsigned long ExceptionCode)
     * }
     */
    public static MethodHandle I_RpcExceptionFilter$handle() {
        return I_RpcExceptionFilter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int I_RpcExceptionFilter(unsigned long ExceptionCode)
     * }
     */
    public static MemorySegment I_RpcExceptionFilter$address() {
        return I_RpcExceptionFilter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int I_RpcExceptionFilter(unsigned long ExceptionCode)
     * }
     */
    public static int I_RpcExceptionFilter(int ExceptionCode) {
        var mh$ = I_RpcExceptionFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcExceptionFilter", ExceptionCode);
            }
            return (int)mh$.invokeExact(ExceptionCode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingInqClientTokenAttributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("I_RpcBindingInqClientTokenAttributes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqClientTokenAttributes(RPC_BINDING_HANDLE Binding, LUID *TokenId, LUID *AuthenticationId, LUID *ModifiedId)
     * }
     */
    public static FunctionDescriptor I_RpcBindingInqClientTokenAttributes$descriptor() {
        return I_RpcBindingInqClientTokenAttributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqClientTokenAttributes(RPC_BINDING_HANDLE Binding, LUID *TokenId, LUID *AuthenticationId, LUID *ModifiedId)
     * }
     */
    public static MethodHandle I_RpcBindingInqClientTokenAttributes$handle() {
        return I_RpcBindingInqClientTokenAttributes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqClientTokenAttributes(RPC_BINDING_HANDLE Binding, LUID *TokenId, LUID *AuthenticationId, LUID *ModifiedId)
     * }
     */
    public static MemorySegment I_RpcBindingInqClientTokenAttributes$address() {
        return I_RpcBindingInqClientTokenAttributes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqClientTokenAttributes(RPC_BINDING_HANDLE Binding, LUID *TokenId, LUID *AuthenticationId, LUID *ModifiedId)
     * }
     */
    public static int I_RpcBindingInqClientTokenAttributes(MemorySegment Binding, MemorySegment TokenId, MemorySegment AuthenticationId, MemorySegment ModifiedId) {
        var mh$ = I_RpcBindingInqClientTokenAttributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingInqClientTokenAttributes", Binding, TokenId, AuthenticationId, ModifiedId);
            }
            return (int)mh$.invokeExact(Binding, TokenId, AuthenticationId, ModifiedId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CommandLineToArgvW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CommandLineToArgvW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LPWSTR *CommandLineToArgvW(LPCWSTR lpCmdLine, int *pNumArgs)
     * }
     */
    public static FunctionDescriptor CommandLineToArgvW$descriptor() {
        return CommandLineToArgvW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LPWSTR *CommandLineToArgvW(LPCWSTR lpCmdLine, int *pNumArgs)
     * }
     */
    public static MethodHandle CommandLineToArgvW$handle() {
        return CommandLineToArgvW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LPWSTR *CommandLineToArgvW(LPCWSTR lpCmdLine, int *pNumArgs)
     * }
     */
    public static MemorySegment CommandLineToArgvW$address() {
        return CommandLineToArgvW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LPWSTR *CommandLineToArgvW(LPCWSTR lpCmdLine, int *pNumArgs)
     * }
     */
    public static MemorySegment CommandLineToArgvW(MemorySegment lpCmdLine, MemorySegment pNumArgs) {
        var mh$ = CommandLineToArgvW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CommandLineToArgvW", lpCmdLine, pNumArgs);
            }
            return (MemorySegment)mh$.invokeExact(lpCmdLine, pNumArgs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct HDROP__ {
     *     int unused;
     * } *HDROP
     * }
     */
    public static final AddressLayout HDROP = wgl_h.C_POINTER;

    private static class DragQueryFileA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DragQueryFileA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern UINT DragQueryFileA(HDROP hDrop, UINT iFile, LPSTR lpszFile, UINT cch)
     * }
     */
    public static FunctionDescriptor DragQueryFileA$descriptor() {
        return DragQueryFileA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern UINT DragQueryFileA(HDROP hDrop, UINT iFile, LPSTR lpszFile, UINT cch)
     * }
     */
    public static MethodHandle DragQueryFileA$handle() {
        return DragQueryFileA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern UINT DragQueryFileA(HDROP hDrop, UINT iFile, LPSTR lpszFile, UINT cch)
     * }
     */
    public static MemorySegment DragQueryFileA$address() {
        return DragQueryFileA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern UINT DragQueryFileA(HDROP hDrop, UINT iFile, LPSTR lpszFile, UINT cch)
     * }
     */
    public static int DragQueryFileA(MemorySegment hDrop, int iFile, MemorySegment lpszFile, int cch) {
        var mh$ = DragQueryFileA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DragQueryFileA", hDrop, iFile, lpszFile, cch);
            }
            return (int)mh$.invokeExact(hDrop, iFile, lpszFile, cch);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DragQueryFileW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DragQueryFileW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern UINT DragQueryFileW(HDROP hDrop, UINT iFile, LPWSTR lpszFile, UINT cch)
     * }
     */
    public static FunctionDescriptor DragQueryFileW$descriptor() {
        return DragQueryFileW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern UINT DragQueryFileW(HDROP hDrop, UINT iFile, LPWSTR lpszFile, UINT cch)
     * }
     */
    public static MethodHandle DragQueryFileW$handle() {
        return DragQueryFileW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern UINT DragQueryFileW(HDROP hDrop, UINT iFile, LPWSTR lpszFile, UINT cch)
     * }
     */
    public static MemorySegment DragQueryFileW$address() {
        return DragQueryFileW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern UINT DragQueryFileW(HDROP hDrop, UINT iFile, LPWSTR lpszFile, UINT cch)
     * }
     */
    public static int DragQueryFileW(MemorySegment hDrop, int iFile, MemorySegment lpszFile, int cch) {
        var mh$ = DragQueryFileW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DragQueryFileW", hDrop, iFile, lpszFile, cch);
            }
            return (int)mh$.invokeExact(hDrop, iFile, lpszFile, cch);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DragQueryPoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DragQueryPoint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BOOL DragQueryPoint(HDROP hDrop, POINT *ppt)
     * }
     */
    public static FunctionDescriptor DragQueryPoint$descriptor() {
        return DragQueryPoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BOOL DragQueryPoint(HDROP hDrop, POINT *ppt)
     * }
     */
    public static MethodHandle DragQueryPoint$handle() {
        return DragQueryPoint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern BOOL DragQueryPoint(HDROP hDrop, POINT *ppt)
     * }
     */
    public static MemorySegment DragQueryPoint$address() {
        return DragQueryPoint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern BOOL DragQueryPoint(HDROP hDrop, POINT *ppt)
     * }
     */
    public static int DragQueryPoint(MemorySegment hDrop, MemorySegment ppt) {
        var mh$ = DragQueryPoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DragQueryPoint", hDrop, ppt);
            }
            return (int)mh$.invokeExact(hDrop, ppt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DragFinish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DragFinish");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void DragFinish(HDROP hDrop)
     * }
     */
    public static FunctionDescriptor DragFinish$descriptor() {
        return DragFinish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void DragFinish(HDROP hDrop)
     * }
     */
    public static MethodHandle DragFinish$handle() {
        return DragFinish.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void DragFinish(HDROP hDrop)
     * }
     */
    public static MemorySegment DragFinish$address() {
        return DragFinish.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void DragFinish(HDROP hDrop)
     * }
     */
    public static void DragFinish(MemorySegment hDrop) {
        var mh$ = DragFinish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DragFinish", hDrop);
            }
            mh$.invokeExact(hDrop);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DragAcceptFiles {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DragAcceptFiles");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void DragAcceptFiles(HWND hWnd, BOOL fAccept)
     * }
     */
    public static FunctionDescriptor DragAcceptFiles$descriptor() {
        return DragAcceptFiles.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void DragAcceptFiles(HWND hWnd, BOOL fAccept)
     * }
     */
    public static MethodHandle DragAcceptFiles$handle() {
        return DragAcceptFiles.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void DragAcceptFiles(HWND hWnd, BOOL fAccept)
     * }
     */
    public static MemorySegment DragAcceptFiles$address() {
        return DragAcceptFiles.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void DragAcceptFiles(HWND hWnd, BOOL fAccept)
     * }
     */
    public static void DragAcceptFiles(MemorySegment hWnd, int fAccept) {
        var mh$ = DragAcceptFiles.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DragAcceptFiles", hWnd, fAccept);
            }
            mh$.invokeExact(hWnd, fAccept);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ShellExecuteA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ShellExecuteA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HINSTANCE ShellExecuteA(HWND hwnd, LPCSTR lpOperation, LPCSTR lpFile, LPCSTR lpParameters, LPCSTR lpDirectory, INT nShowCmd)
     * }
     */
    public static FunctionDescriptor ShellExecuteA$descriptor() {
        return ShellExecuteA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HINSTANCE ShellExecuteA(HWND hwnd, LPCSTR lpOperation, LPCSTR lpFile, LPCSTR lpParameters, LPCSTR lpDirectory, INT nShowCmd)
     * }
     */
    public static MethodHandle ShellExecuteA$handle() {
        return ShellExecuteA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HINSTANCE ShellExecuteA(HWND hwnd, LPCSTR lpOperation, LPCSTR lpFile, LPCSTR lpParameters, LPCSTR lpDirectory, INT nShowCmd)
     * }
     */
    public static MemorySegment ShellExecuteA$address() {
        return ShellExecuteA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HINSTANCE ShellExecuteA(HWND hwnd, LPCSTR lpOperation, LPCSTR lpFile, LPCSTR lpParameters, LPCSTR lpDirectory, INT nShowCmd)
     * }
     */
    public static MemorySegment ShellExecuteA(MemorySegment hwnd, MemorySegment lpOperation, MemorySegment lpFile, MemorySegment lpParameters, MemorySegment lpDirectory, int nShowCmd) {
        var mh$ = ShellExecuteA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ShellExecuteA", hwnd, lpOperation, lpFile, lpParameters, lpDirectory, nShowCmd);
            }
            return (MemorySegment)mh$.invokeExact(hwnd, lpOperation, lpFile, lpParameters, lpDirectory, nShowCmd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ShellExecuteW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ShellExecuteW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HINSTANCE ShellExecuteW(HWND hwnd, LPCWSTR lpOperation, LPCWSTR lpFile, LPCWSTR lpParameters, LPCWSTR lpDirectory, INT nShowCmd)
     * }
     */
    public static FunctionDescriptor ShellExecuteW$descriptor() {
        return ShellExecuteW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HINSTANCE ShellExecuteW(HWND hwnd, LPCWSTR lpOperation, LPCWSTR lpFile, LPCWSTR lpParameters, LPCWSTR lpDirectory, INT nShowCmd)
     * }
     */
    public static MethodHandle ShellExecuteW$handle() {
        return ShellExecuteW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HINSTANCE ShellExecuteW(HWND hwnd, LPCWSTR lpOperation, LPCWSTR lpFile, LPCWSTR lpParameters, LPCWSTR lpDirectory, INT nShowCmd)
     * }
     */
    public static MemorySegment ShellExecuteW$address() {
        return ShellExecuteW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HINSTANCE ShellExecuteW(HWND hwnd, LPCWSTR lpOperation, LPCWSTR lpFile, LPCWSTR lpParameters, LPCWSTR lpDirectory, INT nShowCmd)
     * }
     */
    public static MemorySegment ShellExecuteW(MemorySegment hwnd, MemorySegment lpOperation, MemorySegment lpFile, MemorySegment lpParameters, MemorySegment lpDirectory, int nShowCmd) {
        var mh$ = ShellExecuteW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ShellExecuteW", hwnd, lpOperation, lpFile, lpParameters, lpDirectory, nShowCmd);
            }
            return (MemorySegment)mh$.invokeExact(hwnd, lpOperation, lpFile, lpParameters, lpDirectory, nShowCmd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FindExecutableA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("FindExecutableA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HINSTANCE FindExecutableA(LPCSTR lpFile, LPCSTR lpDirectory, LPSTR lpResult)
     * }
     */
    public static FunctionDescriptor FindExecutableA$descriptor() {
        return FindExecutableA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HINSTANCE FindExecutableA(LPCSTR lpFile, LPCSTR lpDirectory, LPSTR lpResult)
     * }
     */
    public static MethodHandle FindExecutableA$handle() {
        return FindExecutableA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HINSTANCE FindExecutableA(LPCSTR lpFile, LPCSTR lpDirectory, LPSTR lpResult)
     * }
     */
    public static MemorySegment FindExecutableA$address() {
        return FindExecutableA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HINSTANCE FindExecutableA(LPCSTR lpFile, LPCSTR lpDirectory, LPSTR lpResult)
     * }
     */
    public static MemorySegment FindExecutableA(MemorySegment lpFile, MemorySegment lpDirectory, MemorySegment lpResult) {
        var mh$ = FindExecutableA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FindExecutableA", lpFile, lpDirectory, lpResult);
            }
            return (MemorySegment)mh$.invokeExact(lpFile, lpDirectory, lpResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FindExecutableW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("FindExecutableW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HINSTANCE FindExecutableW(LPCWSTR lpFile, LPCWSTR lpDirectory, LPWSTR lpResult)
     * }
     */
    public static FunctionDescriptor FindExecutableW$descriptor() {
        return FindExecutableW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HINSTANCE FindExecutableW(LPCWSTR lpFile, LPCWSTR lpDirectory, LPWSTR lpResult)
     * }
     */
    public static MethodHandle FindExecutableW$handle() {
        return FindExecutableW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HINSTANCE FindExecutableW(LPCWSTR lpFile, LPCWSTR lpDirectory, LPWSTR lpResult)
     * }
     */
    public static MemorySegment FindExecutableW$address() {
        return FindExecutableW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HINSTANCE FindExecutableW(LPCWSTR lpFile, LPCWSTR lpDirectory, LPWSTR lpResult)
     * }
     */
    public static MemorySegment FindExecutableW(MemorySegment lpFile, MemorySegment lpDirectory, MemorySegment lpResult) {
        var mh$ = FindExecutableW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FindExecutableW", lpFile, lpDirectory, lpResult);
            }
            return (MemorySegment)mh$.invokeExact(lpFile, lpDirectory, lpResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ShellAboutA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ShellAboutA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern INT ShellAboutA(HWND hWnd, LPCSTR szApp, LPCSTR szOtherStuff, HICON hIcon)
     * }
     */
    public static FunctionDescriptor ShellAboutA$descriptor() {
        return ShellAboutA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern INT ShellAboutA(HWND hWnd, LPCSTR szApp, LPCSTR szOtherStuff, HICON hIcon)
     * }
     */
    public static MethodHandle ShellAboutA$handle() {
        return ShellAboutA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern INT ShellAboutA(HWND hWnd, LPCSTR szApp, LPCSTR szOtherStuff, HICON hIcon)
     * }
     */
    public static MemorySegment ShellAboutA$address() {
        return ShellAboutA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern INT ShellAboutA(HWND hWnd, LPCSTR szApp, LPCSTR szOtherStuff, HICON hIcon)
     * }
     */
    public static int ShellAboutA(MemorySegment hWnd, MemorySegment szApp, MemorySegment szOtherStuff, MemorySegment hIcon) {
        var mh$ = ShellAboutA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ShellAboutA", hWnd, szApp, szOtherStuff, hIcon);
            }
            return (int)mh$.invokeExact(hWnd, szApp, szOtherStuff, hIcon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ShellAboutW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ShellAboutW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern INT ShellAboutW(HWND hWnd, LPCWSTR szApp, LPCWSTR szOtherStuff, HICON hIcon)
     * }
     */
    public static FunctionDescriptor ShellAboutW$descriptor() {
        return ShellAboutW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern INT ShellAboutW(HWND hWnd, LPCWSTR szApp, LPCWSTR szOtherStuff, HICON hIcon)
     * }
     */
    public static MethodHandle ShellAboutW$handle() {
        return ShellAboutW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern INT ShellAboutW(HWND hWnd, LPCWSTR szApp, LPCWSTR szOtherStuff, HICON hIcon)
     * }
     */
    public static MemorySegment ShellAboutW$address() {
        return ShellAboutW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern INT ShellAboutW(HWND hWnd, LPCWSTR szApp, LPCWSTR szOtherStuff, HICON hIcon)
     * }
     */
    public static int ShellAboutW(MemorySegment hWnd, MemorySegment szApp, MemorySegment szOtherStuff, MemorySegment hIcon) {
        var mh$ = ShellAboutW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ShellAboutW", hWnd, szApp, szOtherStuff, hIcon);
            }
            return (int)mh$.invokeExact(hWnd, szApp, szOtherStuff, hIcon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DuplicateIcon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DuplicateIcon");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HICON DuplicateIcon(HINSTANCE hInst, HICON hIcon)
     * }
     */
    public static FunctionDescriptor DuplicateIcon$descriptor() {
        return DuplicateIcon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HICON DuplicateIcon(HINSTANCE hInst, HICON hIcon)
     * }
     */
    public static MethodHandle DuplicateIcon$handle() {
        return DuplicateIcon.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HICON DuplicateIcon(HINSTANCE hInst, HICON hIcon)
     * }
     */
    public static MemorySegment DuplicateIcon$address() {
        return DuplicateIcon.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HICON DuplicateIcon(HINSTANCE hInst, HICON hIcon)
     * }
     */
    public static MemorySegment DuplicateIcon(MemorySegment hInst, MemorySegment hIcon) {
        var mh$ = DuplicateIcon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DuplicateIcon", hInst, hIcon);
            }
            return (MemorySegment)mh$.invokeExact(hInst, hIcon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ExtractAssociatedIconA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ExtractAssociatedIconA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HICON ExtractAssociatedIconA(HINSTANCE hInst, LPSTR pszIconPath, WORD *piIcon)
     * }
     */
    public static FunctionDescriptor ExtractAssociatedIconA$descriptor() {
        return ExtractAssociatedIconA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HICON ExtractAssociatedIconA(HINSTANCE hInst, LPSTR pszIconPath, WORD *piIcon)
     * }
     */
    public static MethodHandle ExtractAssociatedIconA$handle() {
        return ExtractAssociatedIconA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HICON ExtractAssociatedIconA(HINSTANCE hInst, LPSTR pszIconPath, WORD *piIcon)
     * }
     */
    public static MemorySegment ExtractAssociatedIconA$address() {
        return ExtractAssociatedIconA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HICON ExtractAssociatedIconA(HINSTANCE hInst, LPSTR pszIconPath, WORD *piIcon)
     * }
     */
    public static MemorySegment ExtractAssociatedIconA(MemorySegment hInst, MemorySegment pszIconPath, MemorySegment piIcon) {
        var mh$ = ExtractAssociatedIconA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ExtractAssociatedIconA", hInst, pszIconPath, piIcon);
            }
            return (MemorySegment)mh$.invokeExact(hInst, pszIconPath, piIcon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ExtractAssociatedIconW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ExtractAssociatedIconW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HICON ExtractAssociatedIconW(HINSTANCE hInst, LPWSTR pszIconPath, WORD *piIcon)
     * }
     */
    public static FunctionDescriptor ExtractAssociatedIconW$descriptor() {
        return ExtractAssociatedIconW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HICON ExtractAssociatedIconW(HINSTANCE hInst, LPWSTR pszIconPath, WORD *piIcon)
     * }
     */
    public static MethodHandle ExtractAssociatedIconW$handle() {
        return ExtractAssociatedIconW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HICON ExtractAssociatedIconW(HINSTANCE hInst, LPWSTR pszIconPath, WORD *piIcon)
     * }
     */
    public static MemorySegment ExtractAssociatedIconW$address() {
        return ExtractAssociatedIconW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HICON ExtractAssociatedIconW(HINSTANCE hInst, LPWSTR pszIconPath, WORD *piIcon)
     * }
     */
    public static MemorySegment ExtractAssociatedIconW(MemorySegment hInst, MemorySegment pszIconPath, MemorySegment piIcon) {
        var mh$ = ExtractAssociatedIconW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ExtractAssociatedIconW", hInst, pszIconPath, piIcon);
            }
            return (MemorySegment)mh$.invokeExact(hInst, pszIconPath, piIcon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ExtractAssociatedIconExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ExtractAssociatedIconExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HICON ExtractAssociatedIconExA(HINSTANCE hInst, LPSTR pszIconPath, WORD *piIconIndex, WORD *piIconId)
     * }
     */
    public static FunctionDescriptor ExtractAssociatedIconExA$descriptor() {
        return ExtractAssociatedIconExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HICON ExtractAssociatedIconExA(HINSTANCE hInst, LPSTR pszIconPath, WORD *piIconIndex, WORD *piIconId)
     * }
     */
    public static MethodHandle ExtractAssociatedIconExA$handle() {
        return ExtractAssociatedIconExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HICON ExtractAssociatedIconExA(HINSTANCE hInst, LPSTR pszIconPath, WORD *piIconIndex, WORD *piIconId)
     * }
     */
    public static MemorySegment ExtractAssociatedIconExA$address() {
        return ExtractAssociatedIconExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HICON ExtractAssociatedIconExA(HINSTANCE hInst, LPSTR pszIconPath, WORD *piIconIndex, WORD *piIconId)
     * }
     */
    public static MemorySegment ExtractAssociatedIconExA(MemorySegment hInst, MemorySegment pszIconPath, MemorySegment piIconIndex, MemorySegment piIconId) {
        var mh$ = ExtractAssociatedIconExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ExtractAssociatedIconExA", hInst, pszIconPath, piIconIndex, piIconId);
            }
            return (MemorySegment)mh$.invokeExact(hInst, pszIconPath, piIconIndex, piIconId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ExtractAssociatedIconExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ExtractAssociatedIconExW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HICON ExtractAssociatedIconExW(HINSTANCE hInst, LPWSTR pszIconPath, WORD *piIconIndex, WORD *piIconId)
     * }
     */
    public static FunctionDescriptor ExtractAssociatedIconExW$descriptor() {
        return ExtractAssociatedIconExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HICON ExtractAssociatedIconExW(HINSTANCE hInst, LPWSTR pszIconPath, WORD *piIconIndex, WORD *piIconId)
     * }
     */
    public static MethodHandle ExtractAssociatedIconExW$handle() {
        return ExtractAssociatedIconExW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HICON ExtractAssociatedIconExW(HINSTANCE hInst, LPWSTR pszIconPath, WORD *piIconIndex, WORD *piIconId)
     * }
     */
    public static MemorySegment ExtractAssociatedIconExW$address() {
        return ExtractAssociatedIconExW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HICON ExtractAssociatedIconExW(HINSTANCE hInst, LPWSTR pszIconPath, WORD *piIconIndex, WORD *piIconId)
     * }
     */
    public static MemorySegment ExtractAssociatedIconExW(MemorySegment hInst, MemorySegment pszIconPath, MemorySegment piIconIndex, MemorySegment piIconId) {
        var mh$ = ExtractAssociatedIconExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ExtractAssociatedIconExW", hInst, pszIconPath, piIconIndex, piIconId);
            }
            return (MemorySegment)mh$.invokeExact(hInst, pszIconPath, piIconIndex, piIconId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ExtractIconA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ExtractIconA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HICON ExtractIconA(HINSTANCE hInst, LPCSTR pszExeFileName, UINT nIconIndex)
     * }
     */
    public static FunctionDescriptor ExtractIconA$descriptor() {
        return ExtractIconA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HICON ExtractIconA(HINSTANCE hInst, LPCSTR pszExeFileName, UINT nIconIndex)
     * }
     */
    public static MethodHandle ExtractIconA$handle() {
        return ExtractIconA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HICON ExtractIconA(HINSTANCE hInst, LPCSTR pszExeFileName, UINT nIconIndex)
     * }
     */
    public static MemorySegment ExtractIconA$address() {
        return ExtractIconA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HICON ExtractIconA(HINSTANCE hInst, LPCSTR pszExeFileName, UINT nIconIndex)
     * }
     */
    public static MemorySegment ExtractIconA(MemorySegment hInst, MemorySegment pszExeFileName, int nIconIndex) {
        var mh$ = ExtractIconA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ExtractIconA", hInst, pszExeFileName, nIconIndex);
            }
            return (MemorySegment)mh$.invokeExact(hInst, pszExeFileName, nIconIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ExtractIconW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ExtractIconW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HICON ExtractIconW(HINSTANCE hInst, LPCWSTR pszExeFileName, UINT nIconIndex)
     * }
     */
    public static FunctionDescriptor ExtractIconW$descriptor() {
        return ExtractIconW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HICON ExtractIconW(HINSTANCE hInst, LPCWSTR pszExeFileName, UINT nIconIndex)
     * }
     */
    public static MethodHandle ExtractIconW$handle() {
        return ExtractIconW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HICON ExtractIconW(HINSTANCE hInst, LPCWSTR pszExeFileName, UINT nIconIndex)
     * }
     */
    public static MemorySegment ExtractIconW$address() {
        return ExtractIconW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HICON ExtractIconW(HINSTANCE hInst, LPCWSTR pszExeFileName, UINT nIconIndex)
     * }
     */
    public static MemorySegment ExtractIconW(MemorySegment hInst, MemorySegment pszExeFileName, int nIconIndex) {
        var mh$ = ExtractIconW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ExtractIconW", hInst, pszExeFileName, nIconIndex);
            }
            return (MemorySegment)mh$.invokeExact(hInst, pszExeFileName, nIconIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _DRAGINFOA {
     *     UINT uSize;
     *     POINT pt;
     *     BOOL fNC;
     *     PZZSTR lpFileList;
     *     DWORD grfKeyState;
     * } *LPDRAGINFOA
     * }
     */
    public static final AddressLayout LPDRAGINFOA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRAGINFOW {
     *     UINT uSize;
     *     POINT pt;
     *     BOOL fNC;
     *     PZZWSTR lpFileList;
     *     DWORD grfKeyState;
     * } *LPDRAGINFOW
     * }
     */
    public static final AddressLayout LPDRAGINFOW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPDRAGINFOA LPDRAGINFO
     * }
     */
    public static final AddressLayout LPDRAGINFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _AppBarData {
     *     DWORD cbSize;
     *     HWND hWnd;
     *     UINT uCallbackMessage;
     *     UINT uEdge;
     *     RECT rc;
     *     LPARAM lParam;
     * } *PAPPBARDATA
     * }
     */
    public static final AddressLayout PAPPBARDATA = wgl_h.C_POINTER;

    private static class SHAppBarMessage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SHAppBarMessage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern UINT_PTR SHAppBarMessage(DWORD dwMessage, PAPPBARDATA pData)
     * }
     */
    public static FunctionDescriptor SHAppBarMessage$descriptor() {
        return SHAppBarMessage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern UINT_PTR SHAppBarMessage(DWORD dwMessage, PAPPBARDATA pData)
     * }
     */
    public static MethodHandle SHAppBarMessage$handle() {
        return SHAppBarMessage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern UINT_PTR SHAppBarMessage(DWORD dwMessage, PAPPBARDATA pData)
     * }
     */
    public static MemorySegment SHAppBarMessage$address() {
        return SHAppBarMessage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern UINT_PTR SHAppBarMessage(DWORD dwMessage, PAPPBARDATA pData)
     * }
     */
    public static long SHAppBarMessage(int dwMessage, MemorySegment pData) {
        var mh$ = SHAppBarMessage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHAppBarMessage", dwMessage, pData);
            }
            return (long)mh$.invokeExact(dwMessage, pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DoEnvironmentSubstA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DoEnvironmentSubstA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern DWORD DoEnvironmentSubstA(LPSTR pszSrc, UINT cchSrc)
     * }
     */
    public static FunctionDescriptor DoEnvironmentSubstA$descriptor() {
        return DoEnvironmentSubstA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern DWORD DoEnvironmentSubstA(LPSTR pszSrc, UINT cchSrc)
     * }
     */
    public static MethodHandle DoEnvironmentSubstA$handle() {
        return DoEnvironmentSubstA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern DWORD DoEnvironmentSubstA(LPSTR pszSrc, UINT cchSrc)
     * }
     */
    public static MemorySegment DoEnvironmentSubstA$address() {
        return DoEnvironmentSubstA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern DWORD DoEnvironmentSubstA(LPSTR pszSrc, UINT cchSrc)
     * }
     */
    public static int DoEnvironmentSubstA(MemorySegment pszSrc, int cchSrc) {
        var mh$ = DoEnvironmentSubstA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DoEnvironmentSubstA", pszSrc, cchSrc);
            }
            return (int)mh$.invokeExact(pszSrc, cchSrc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DoEnvironmentSubstW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DoEnvironmentSubstW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern DWORD DoEnvironmentSubstW(LPWSTR pszSrc, UINT cchSrc)
     * }
     */
    public static FunctionDescriptor DoEnvironmentSubstW$descriptor() {
        return DoEnvironmentSubstW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern DWORD DoEnvironmentSubstW(LPWSTR pszSrc, UINT cchSrc)
     * }
     */
    public static MethodHandle DoEnvironmentSubstW$handle() {
        return DoEnvironmentSubstW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern DWORD DoEnvironmentSubstW(LPWSTR pszSrc, UINT cchSrc)
     * }
     */
    public static MemorySegment DoEnvironmentSubstW$address() {
        return DoEnvironmentSubstW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern DWORD DoEnvironmentSubstW(LPWSTR pszSrc, UINT cchSrc)
     * }
     */
    public static int DoEnvironmentSubstW(MemorySegment pszSrc, int cchSrc) {
        var mh$ = DoEnvironmentSubstW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DoEnvironmentSubstW", pszSrc, cchSrc);
            }
            return (int)mh$.invokeExact(pszSrc, cchSrc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ExtractIconExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ExtractIconExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern UINT ExtractIconExA(LPCSTR lpszFile, int nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons)
     * }
     */
    public static FunctionDescriptor ExtractIconExA$descriptor() {
        return ExtractIconExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern UINT ExtractIconExA(LPCSTR lpszFile, int nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons)
     * }
     */
    public static MethodHandle ExtractIconExA$handle() {
        return ExtractIconExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern UINT ExtractIconExA(LPCSTR lpszFile, int nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons)
     * }
     */
    public static MemorySegment ExtractIconExA$address() {
        return ExtractIconExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern UINT ExtractIconExA(LPCSTR lpszFile, int nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons)
     * }
     */
    public static int ExtractIconExA(MemorySegment lpszFile, int nIconIndex, MemorySegment phiconLarge, MemorySegment phiconSmall, int nIcons) {
        var mh$ = ExtractIconExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ExtractIconExA", lpszFile, nIconIndex, phiconLarge, phiconSmall, nIcons);
            }
            return (int)mh$.invokeExact(lpszFile, nIconIndex, phiconLarge, phiconSmall, nIcons);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ExtractIconExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ExtractIconExW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern UINT ExtractIconExW(LPCWSTR lpszFile, int nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons)
     * }
     */
    public static FunctionDescriptor ExtractIconExW$descriptor() {
        return ExtractIconExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern UINT ExtractIconExW(LPCWSTR lpszFile, int nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons)
     * }
     */
    public static MethodHandle ExtractIconExW$handle() {
        return ExtractIconExW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern UINT ExtractIconExW(LPCWSTR lpszFile, int nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons)
     * }
     */
    public static MemorySegment ExtractIconExW$address() {
        return ExtractIconExW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern UINT ExtractIconExW(LPCWSTR lpszFile, int nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons)
     * }
     */
    public static int ExtractIconExW(MemorySegment lpszFile, int nIconIndex, MemorySegment phiconLarge, MemorySegment phiconSmall, int nIcons) {
        var mh$ = ExtractIconExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ExtractIconExW", lpszFile, nIconIndex, phiconLarge, phiconSmall, nIcons);
            }
            return (int)mh$.invokeExact(lpszFile, nIconIndex, phiconLarge, phiconSmall, nIcons);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef WORD FILEOP_FLAGS
     * }
     */
    public static final OfShort FILEOP_FLAGS = wgl_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef WORD PRINTEROP_FLAGS
     * }
     */
    public static final OfShort PRINTEROP_FLAGS = wgl_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef struct _SHFILEOPSTRUCTA {
     *     HWND hwnd;
     *     UINT wFunc;
     *     PCZZSTR pFrom;
     *     PCZZSTR pTo;
     *     FILEOP_FLAGS fFlags;
     *     BOOL fAnyOperationsAborted;
     *     LPVOID hNameMappings;
     *     PCSTR lpszProgressTitle;
     * } *LPSHFILEOPSTRUCTA
     * }
     */
    public static final AddressLayout LPSHFILEOPSTRUCTA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SHFILEOPSTRUCTW {
     *     HWND hwnd;
     *     UINT wFunc;
     *     PCZZWSTR pFrom;
     *     PCZZWSTR pTo;
     *     FILEOP_FLAGS fFlags;
     *     BOOL fAnyOperationsAborted;
     *     LPVOID hNameMappings;
     *     PCWSTR lpszProgressTitle;
     * } *LPSHFILEOPSTRUCTW
     * }
     */
    public static final AddressLayout LPSHFILEOPSTRUCTW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPSHFILEOPSTRUCTA LPSHFILEOPSTRUCT
     * }
     */
    public static final AddressLayout LPSHFILEOPSTRUCT = wgl_h.C_POINTER;

    private static class SHFileOperationA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SHFileOperationA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int SHFileOperationA(LPSHFILEOPSTRUCTA lpFileOp)
     * }
     */
    public static FunctionDescriptor SHFileOperationA$descriptor() {
        return SHFileOperationA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int SHFileOperationA(LPSHFILEOPSTRUCTA lpFileOp)
     * }
     */
    public static MethodHandle SHFileOperationA$handle() {
        return SHFileOperationA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int SHFileOperationA(LPSHFILEOPSTRUCTA lpFileOp)
     * }
     */
    public static MemorySegment SHFileOperationA$address() {
        return SHFileOperationA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int SHFileOperationA(LPSHFILEOPSTRUCTA lpFileOp)
     * }
     */
    public static int SHFileOperationA(MemorySegment lpFileOp) {
        var mh$ = SHFileOperationA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHFileOperationA", lpFileOp);
            }
            return (int)mh$.invokeExact(lpFileOp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SHFileOperationW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SHFileOperationW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int SHFileOperationW(LPSHFILEOPSTRUCTW lpFileOp)
     * }
     */
    public static FunctionDescriptor SHFileOperationW$descriptor() {
        return SHFileOperationW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int SHFileOperationW(LPSHFILEOPSTRUCTW lpFileOp)
     * }
     */
    public static MethodHandle SHFileOperationW$handle() {
        return SHFileOperationW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int SHFileOperationW(LPSHFILEOPSTRUCTW lpFileOp)
     * }
     */
    public static MemorySegment SHFileOperationW$address() {
        return SHFileOperationW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int SHFileOperationW(LPSHFILEOPSTRUCTW lpFileOp)
     * }
     */
    public static int SHFileOperationW(MemorySegment lpFileOp) {
        var mh$ = SHFileOperationW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHFileOperationW", lpFileOp);
            }
            return (int)mh$.invokeExact(lpFileOp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SHFreeNameMappings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SHFreeNameMappings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void SHFreeNameMappings(HANDLE hNameMappings)
     * }
     */
    public static FunctionDescriptor SHFreeNameMappings$descriptor() {
        return SHFreeNameMappings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void SHFreeNameMappings(HANDLE hNameMappings)
     * }
     */
    public static MethodHandle SHFreeNameMappings$handle() {
        return SHFreeNameMappings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void SHFreeNameMappings(HANDLE hNameMappings)
     * }
     */
    public static MemorySegment SHFreeNameMappings$address() {
        return SHFreeNameMappings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void SHFreeNameMappings(HANDLE hNameMappings)
     * }
     */
    public static void SHFreeNameMappings(MemorySegment hNameMappings) {
        var mh$ = SHFreeNameMappings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHFreeNameMappings", hNameMappings);
            }
            mh$.invokeExact(hNameMappings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _SHNAMEMAPPINGA {
     *     LPSTR pszOldPath;
     *     LPSTR pszNewPath;
     *     int cchOldPath;
     *     int cchNewPath;
     * } *LPSHNAMEMAPPINGA
     * }
     */
    public static final AddressLayout LPSHNAMEMAPPINGA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SHNAMEMAPPINGW {
     *     LPWSTR pszOldPath;
     *     LPWSTR pszNewPath;
     *     int cchOldPath;
     *     int cchNewPath;
     * } *LPSHNAMEMAPPINGW
     * }
     */
    public static final AddressLayout LPSHNAMEMAPPINGW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPSHNAMEMAPPINGA LPSHNAMEMAPPING
     * }
     */
    public static final AddressLayout LPSHNAMEMAPPING = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SHELLEXECUTEINFOA {
     *     DWORD cbSize;
     *     ULONG fMask;
     *     HWND hwnd;
     *     LPCSTR lpVerb;
     *     LPCSTR lpFile;
     *     LPCSTR lpParameters;
     *     LPCSTR lpDirectory;
     *     int nShow;
     *     HINSTANCE hInstApp;
     *     void *lpIDList;
     *     LPCSTR lpClass;
     *     HKEY hkeyClass;
     *     DWORD dwHotKey;
     *     union {
     *         HANDLE hIcon;
     *         HANDLE hMonitor;
     *     };
     *     HANDLE hProcess;
     * } *LPSHELLEXECUTEINFOA
     * }
     */
    public static final AddressLayout LPSHELLEXECUTEINFOA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SHELLEXECUTEINFOW {
     *     DWORD cbSize;
     *     ULONG fMask;
     *     HWND hwnd;
     *     LPCWSTR lpVerb;
     *     LPCWSTR lpFile;
     *     LPCWSTR lpParameters;
     *     LPCWSTR lpDirectory;
     *     int nShow;
     *     HINSTANCE hInstApp;
     *     void *lpIDList;
     *     LPCWSTR lpClass;
     *     HKEY hkeyClass;
     *     DWORD dwHotKey;
     *     union {
     *         HANDLE hIcon;
     *         HANDLE hMonitor;
     *     };
     *     HANDLE hProcess;
     * } *LPSHELLEXECUTEINFOW
     * }
     */
    public static final AddressLayout LPSHELLEXECUTEINFOW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPSHELLEXECUTEINFOA LPSHELLEXECUTEINFO
     * }
     */
    public static final AddressLayout LPSHELLEXECUTEINFO = wgl_h.C_POINTER;

    private static class ShellExecuteExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ShellExecuteExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BOOL ShellExecuteExA(SHELLEXECUTEINFOA *pExecInfo)
     * }
     */
    public static FunctionDescriptor ShellExecuteExA$descriptor() {
        return ShellExecuteExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BOOL ShellExecuteExA(SHELLEXECUTEINFOA *pExecInfo)
     * }
     */
    public static MethodHandle ShellExecuteExA$handle() {
        return ShellExecuteExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern BOOL ShellExecuteExA(SHELLEXECUTEINFOA *pExecInfo)
     * }
     */
    public static MemorySegment ShellExecuteExA$address() {
        return ShellExecuteExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern BOOL ShellExecuteExA(SHELLEXECUTEINFOA *pExecInfo)
     * }
     */
    public static int ShellExecuteExA(MemorySegment pExecInfo) {
        var mh$ = ShellExecuteExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ShellExecuteExA", pExecInfo);
            }
            return (int)mh$.invokeExact(pExecInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ShellExecuteExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ShellExecuteExW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BOOL ShellExecuteExW(SHELLEXECUTEINFOW *pExecInfo)
     * }
     */
    public static FunctionDescriptor ShellExecuteExW$descriptor() {
        return ShellExecuteExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BOOL ShellExecuteExW(SHELLEXECUTEINFOW *pExecInfo)
     * }
     */
    public static MethodHandle ShellExecuteExW$handle() {
        return ShellExecuteExW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern BOOL ShellExecuteExW(SHELLEXECUTEINFOW *pExecInfo)
     * }
     */
    public static MemorySegment ShellExecuteExW$address() {
        return ShellExecuteExW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern BOOL ShellExecuteExW(SHELLEXECUTEINFOW *pExecInfo)
     * }
     */
    public static int ShellExecuteExW(MemorySegment pExecInfo) {
        var mh$ = ShellExecuteExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ShellExecuteExW", pExecInfo);
            }
            return (int)mh$.invokeExact(pExecInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _SHCREATEPROCESSINFOW {
     *     DWORD cbSize;
     *     ULONG fMask;
     *     HWND hwnd;
     *     LPCWSTR pszFile;
     *     LPCWSTR pszParameters;
     *     LPCWSTR pszCurrentDirectory;
     *     HANDLE hUserToken;
     *     LPSECURITY_ATTRIBUTES lpProcessAttributes;
     *     LPSECURITY_ATTRIBUTES lpThreadAttributes;
     *     BOOL bInheritHandles;
     *     DWORD dwCreationFlags;
     *     LPSTARTUPINFOW lpStartupInfo;
     *     LPPROCESS_INFORMATION lpProcessInformation;
     * } *PSHCREATEPROCESSINFOW
     * }
     */
    public static final AddressLayout PSHCREATEPROCESSINFOW = wgl_h.C_POINTER;

    private static class SHCreateProcessAsUserW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SHCreateProcessAsUserW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BOOL SHCreateProcessAsUserW(PSHCREATEPROCESSINFOW pscpi)
     * }
     */
    public static FunctionDescriptor SHCreateProcessAsUserW$descriptor() {
        return SHCreateProcessAsUserW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BOOL SHCreateProcessAsUserW(PSHCREATEPROCESSINFOW pscpi)
     * }
     */
    public static MethodHandle SHCreateProcessAsUserW$handle() {
        return SHCreateProcessAsUserW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern BOOL SHCreateProcessAsUserW(PSHCREATEPROCESSINFOW pscpi)
     * }
     */
    public static MemorySegment SHCreateProcessAsUserW$address() {
        return SHCreateProcessAsUserW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern BOOL SHCreateProcessAsUserW(PSHCREATEPROCESSINFOW pscpi)
     * }
     */
    public static int SHCreateProcessAsUserW(MemorySegment pscpi) {
        var mh$ = SHCreateProcessAsUserW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHCreateProcessAsUserW", pscpi);
            }
            return (int)mh$.invokeExact(pscpi);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SHEvaluateSystemCommandTemplate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SHEvaluateSystemCommandTemplate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SHEvaluateSystemCommandTemplate(PCWSTR pszCmdTemplate, PWSTR *ppszApplication, PWSTR *ppszCommandLine, PWSTR *ppszParameters)
     * }
     */
    public static FunctionDescriptor SHEvaluateSystemCommandTemplate$descriptor() {
        return SHEvaluateSystemCommandTemplate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SHEvaluateSystemCommandTemplate(PCWSTR pszCmdTemplate, PWSTR *ppszApplication, PWSTR *ppszCommandLine, PWSTR *ppszParameters)
     * }
     */
    public static MethodHandle SHEvaluateSystemCommandTemplate$handle() {
        return SHEvaluateSystemCommandTemplate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SHEvaluateSystemCommandTemplate(PCWSTR pszCmdTemplate, PWSTR *ppszApplication, PWSTR *ppszCommandLine, PWSTR *ppszParameters)
     * }
     */
    public static MemorySegment SHEvaluateSystemCommandTemplate$address() {
        return SHEvaluateSystemCommandTemplate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SHEvaluateSystemCommandTemplate(PCWSTR pszCmdTemplate, PWSTR *ppszApplication, PWSTR *ppszCommandLine, PWSTR *ppszParameters)
     * }
     */
    public static int SHEvaluateSystemCommandTemplate(MemorySegment pszCmdTemplate, MemorySegment ppszApplication, MemorySegment ppszCommandLine, MemorySegment ppszParameters) {
        var mh$ = SHEvaluateSystemCommandTemplate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHEvaluateSystemCommandTemplate", pszCmdTemplate, ppszApplication, ppszCommandLine, ppszParameters);
            }
            return (int)mh$.invokeExact(pszCmdTemplate, ppszApplication, ppszCommandLine, ppszParameters);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int ASSOCCLASS_SHELL_KEY = (int)0L;
    /**
     * {@snippet lang=c :
     * enum ASSOCCLASS.ASSOCCLASS_SHELL_KEY = 0
     * }
     */
    public static int ASSOCCLASS_SHELL_KEY() {
        return ASSOCCLASS_SHELL_KEY;
    }
    private static final int ASSOCCLASS_PROGID_KEY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ASSOCCLASS.ASSOCCLASS_PROGID_KEY = 1
     * }
     */
    public static int ASSOCCLASS_PROGID_KEY() {
        return ASSOCCLASS_PROGID_KEY;
    }
    private static final int ASSOCCLASS_PROGID_STR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum ASSOCCLASS.ASSOCCLASS_PROGID_STR = 2
     * }
     */
    public static int ASSOCCLASS_PROGID_STR() {
        return ASSOCCLASS_PROGID_STR;
    }
    private static final int ASSOCCLASS_CLSID_KEY = (int)3L;
    /**
     * {@snippet lang=c :
     * enum ASSOCCLASS.ASSOCCLASS_CLSID_KEY = 3
     * }
     */
    public static int ASSOCCLASS_CLSID_KEY() {
        return ASSOCCLASS_CLSID_KEY;
    }
    private static final int ASSOCCLASS_CLSID_STR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum ASSOCCLASS.ASSOCCLASS_CLSID_STR = 4
     * }
     */
    public static int ASSOCCLASS_CLSID_STR() {
        return ASSOCCLASS_CLSID_STR;
    }
    private static final int ASSOCCLASS_APP_KEY = (int)5L;
    /**
     * {@snippet lang=c :
     * enum ASSOCCLASS.ASSOCCLASS_APP_KEY = 5
     * }
     */
    public static int ASSOCCLASS_APP_KEY() {
        return ASSOCCLASS_APP_KEY;
    }
    private static final int ASSOCCLASS_APP_STR = (int)6L;
    /**
     * {@snippet lang=c :
     * enum ASSOCCLASS.ASSOCCLASS_APP_STR = 6
     * }
     */
    public static int ASSOCCLASS_APP_STR() {
        return ASSOCCLASS_APP_STR;
    }
    private static final int ASSOCCLASS_SYSTEM_STR = (int)7L;
    /**
     * {@snippet lang=c :
     * enum ASSOCCLASS.ASSOCCLASS_SYSTEM_STR = 7
     * }
     */
    public static int ASSOCCLASS_SYSTEM_STR() {
        return ASSOCCLASS_SYSTEM_STR;
    }
    private static final int ASSOCCLASS_FOLDER = (int)8L;
    /**
     * {@snippet lang=c :
     * enum ASSOCCLASS.ASSOCCLASS_FOLDER = 8
     * }
     */
    public static int ASSOCCLASS_FOLDER() {
        return ASSOCCLASS_FOLDER;
    }
    private static final int ASSOCCLASS_STAR = (int)9L;
    /**
     * {@snippet lang=c :
     * enum ASSOCCLASS.ASSOCCLASS_STAR = 9
     * }
     */
    public static int ASSOCCLASS_STAR() {
        return ASSOCCLASS_STAR;
    }
    private static final int ASSOCCLASS_FIXED_PROGID_STR = (int)10L;
    /**
     * {@snippet lang=c :
     * enum ASSOCCLASS.ASSOCCLASS_FIXED_PROGID_STR = 10
     * }
     */
    public static int ASSOCCLASS_FIXED_PROGID_STR() {
        return ASSOCCLASS_FIXED_PROGID_STR;
    }
    private static final int ASSOCCLASS_PROTOCOL_STR = (int)11L;
    /**
     * {@snippet lang=c :
     * enum ASSOCCLASS.ASSOCCLASS_PROTOCOL_STR = 11
     * }
     */
    public static int ASSOCCLASS_PROTOCOL_STR() {
        return ASSOCCLASS_PROTOCOL_STR;
    }

    private static class AssocCreateForClasses {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AssocCreateForClasses");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT AssocCreateForClasses(const ASSOCIATIONELEMENT *rgClasses, ULONG cClasses, const IID *const riid, void **ppv)
     * }
     */
    public static FunctionDescriptor AssocCreateForClasses$descriptor() {
        return AssocCreateForClasses.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT AssocCreateForClasses(const ASSOCIATIONELEMENT *rgClasses, ULONG cClasses, const IID *const riid, void **ppv)
     * }
     */
    public static MethodHandle AssocCreateForClasses$handle() {
        return AssocCreateForClasses.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT AssocCreateForClasses(const ASSOCIATIONELEMENT *rgClasses, ULONG cClasses, const IID *const riid, void **ppv)
     * }
     */
    public static MemorySegment AssocCreateForClasses$address() {
        return AssocCreateForClasses.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT AssocCreateForClasses(const ASSOCIATIONELEMENT *rgClasses, ULONG cClasses, const IID *const riid, void **ppv)
     * }
     */
    public static int AssocCreateForClasses(MemorySegment rgClasses, int cClasses, MemorySegment riid, MemorySegment ppv) {
        var mh$ = AssocCreateForClasses.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AssocCreateForClasses", rgClasses, cClasses, riid, ppv);
            }
            return (int)mh$.invokeExact(rgClasses, cClasses, riid, ppv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _SHQUERYRBINFO {
     *     DWORD cbSize;
     *     long long i64Size;
     *     long long i64NumItems;
     * } *LPSHQUERYRBINFO
     * }
     */
    public static final AddressLayout LPSHQUERYRBINFO = wgl_h.C_POINTER;

    private static class SHQueryRecycleBinA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SHQueryRecycleBinA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SHQueryRecycleBinA(LPCSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo)
     * }
     */
    public static FunctionDescriptor SHQueryRecycleBinA$descriptor() {
        return SHQueryRecycleBinA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SHQueryRecycleBinA(LPCSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo)
     * }
     */
    public static MethodHandle SHQueryRecycleBinA$handle() {
        return SHQueryRecycleBinA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SHQueryRecycleBinA(LPCSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo)
     * }
     */
    public static MemorySegment SHQueryRecycleBinA$address() {
        return SHQueryRecycleBinA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SHQueryRecycleBinA(LPCSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo)
     * }
     */
    public static int SHQueryRecycleBinA(MemorySegment pszRootPath, MemorySegment pSHQueryRBInfo) {
        var mh$ = SHQueryRecycleBinA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHQueryRecycleBinA", pszRootPath, pSHQueryRBInfo);
            }
            return (int)mh$.invokeExact(pszRootPath, pSHQueryRBInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SHQueryRecycleBinW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SHQueryRecycleBinW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SHQueryRecycleBinW(LPCWSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo)
     * }
     */
    public static FunctionDescriptor SHQueryRecycleBinW$descriptor() {
        return SHQueryRecycleBinW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SHQueryRecycleBinW(LPCWSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo)
     * }
     */
    public static MethodHandle SHQueryRecycleBinW$handle() {
        return SHQueryRecycleBinW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SHQueryRecycleBinW(LPCWSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo)
     * }
     */
    public static MemorySegment SHQueryRecycleBinW$address() {
        return SHQueryRecycleBinW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SHQueryRecycleBinW(LPCWSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo)
     * }
     */
    public static int SHQueryRecycleBinW(MemorySegment pszRootPath, MemorySegment pSHQueryRBInfo) {
        var mh$ = SHQueryRecycleBinW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHQueryRecycleBinW", pszRootPath, pSHQueryRBInfo);
            }
            return (int)mh$.invokeExact(pszRootPath, pSHQueryRBInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SHEmptyRecycleBinA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SHEmptyRecycleBinA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SHEmptyRecycleBinA(HWND hwnd, LPCSTR pszRootPath, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor SHEmptyRecycleBinA$descriptor() {
        return SHEmptyRecycleBinA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SHEmptyRecycleBinA(HWND hwnd, LPCSTR pszRootPath, DWORD dwFlags)
     * }
     */
    public static MethodHandle SHEmptyRecycleBinA$handle() {
        return SHEmptyRecycleBinA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SHEmptyRecycleBinA(HWND hwnd, LPCSTR pszRootPath, DWORD dwFlags)
     * }
     */
    public static MemorySegment SHEmptyRecycleBinA$address() {
        return SHEmptyRecycleBinA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SHEmptyRecycleBinA(HWND hwnd, LPCSTR pszRootPath, DWORD dwFlags)
     * }
     */
    public static int SHEmptyRecycleBinA(MemorySegment hwnd, MemorySegment pszRootPath, int dwFlags) {
        var mh$ = SHEmptyRecycleBinA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHEmptyRecycleBinA", hwnd, pszRootPath, dwFlags);
            }
            return (int)mh$.invokeExact(hwnd, pszRootPath, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SHEmptyRecycleBinW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SHEmptyRecycleBinW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SHEmptyRecycleBinW(HWND hwnd, LPCWSTR pszRootPath, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor SHEmptyRecycleBinW$descriptor() {
        return SHEmptyRecycleBinW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SHEmptyRecycleBinW(HWND hwnd, LPCWSTR pszRootPath, DWORD dwFlags)
     * }
     */
    public static MethodHandle SHEmptyRecycleBinW$handle() {
        return SHEmptyRecycleBinW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SHEmptyRecycleBinW(HWND hwnd, LPCWSTR pszRootPath, DWORD dwFlags)
     * }
     */
    public static MemorySegment SHEmptyRecycleBinW$address() {
        return SHEmptyRecycleBinW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SHEmptyRecycleBinW(HWND hwnd, LPCWSTR pszRootPath, DWORD dwFlags)
     * }
     */
    public static int SHEmptyRecycleBinW(MemorySegment hwnd, MemorySegment pszRootPath, int dwFlags) {
        var mh$ = SHEmptyRecycleBinW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHEmptyRecycleBinW", hwnd, pszRootPath, dwFlags);
            }
            return (int)mh$.invokeExact(hwnd, pszRootPath, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int QUNS_NOT_PRESENT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.QUNS_NOT_PRESENT = 1
     * }
     */
    public static int QUNS_NOT_PRESENT() {
        return QUNS_NOT_PRESENT;
    }
    private static final int QUNS_BUSY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.QUNS_BUSY = 2
     * }
     */
    public static int QUNS_BUSY() {
        return QUNS_BUSY;
    }
    private static final int QUNS_RUNNING_D3D_FULL_SCREEN = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.QUNS_RUNNING_D3D_FULL_SCREEN = 3
     * }
     */
    public static int QUNS_RUNNING_D3D_FULL_SCREEN() {
        return QUNS_RUNNING_D3D_FULL_SCREEN;
    }
    private static final int QUNS_PRESENTATION_MODE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.QUNS_PRESENTATION_MODE = 4
     * }
     */
    public static int QUNS_PRESENTATION_MODE() {
        return QUNS_PRESENTATION_MODE;
    }
    private static final int QUNS_ACCEPTS_NOTIFICATIONS = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.QUNS_ACCEPTS_NOTIFICATIONS = 5
     * }
     */
    public static int QUNS_ACCEPTS_NOTIFICATIONS() {
        return QUNS_ACCEPTS_NOTIFICATIONS;
    }
    private static final int QUNS_QUIET_TIME = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.QUNS_QUIET_TIME = 6
     * }
     */
    public static int QUNS_QUIET_TIME() {
        return QUNS_QUIET_TIME;
    }
    private static final int QUNS_APP = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.QUNS_APP = 7
     * }
     */
    public static int QUNS_APP() {
        return QUNS_APP;
    }

    private static class SHQueryUserNotificationState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SHQueryUserNotificationState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SHQueryUserNotificationState(QUERY_USER_NOTIFICATION_STATE *pquns)
     * }
     */
    public static FunctionDescriptor SHQueryUserNotificationState$descriptor() {
        return SHQueryUserNotificationState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SHQueryUserNotificationState(QUERY_USER_NOTIFICATION_STATE *pquns)
     * }
     */
    public static MethodHandle SHQueryUserNotificationState$handle() {
        return SHQueryUserNotificationState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SHQueryUserNotificationState(QUERY_USER_NOTIFICATION_STATE *pquns)
     * }
     */
    public static MemorySegment SHQueryUserNotificationState$address() {
        return SHQueryUserNotificationState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SHQueryUserNotificationState(QUERY_USER_NOTIFICATION_STATE *pquns)
     * }
     */
    public static int SHQueryUserNotificationState(MemorySegment pquns) {
        var mh$ = SHQueryUserNotificationState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHQueryUserNotificationState", pquns);
            }
            return (int)mh$.invokeExact(pquns);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SHGetPropertyStoreForWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SHGetPropertyStoreForWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SHGetPropertyStoreForWindow(HWND hwnd, const IID *const riid, void **ppv)
     * }
     */
    public static FunctionDescriptor SHGetPropertyStoreForWindow$descriptor() {
        return SHGetPropertyStoreForWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SHGetPropertyStoreForWindow(HWND hwnd, const IID *const riid, void **ppv)
     * }
     */
    public static MethodHandle SHGetPropertyStoreForWindow$handle() {
        return SHGetPropertyStoreForWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SHGetPropertyStoreForWindow(HWND hwnd, const IID *const riid, void **ppv)
     * }
     */
    public static MemorySegment SHGetPropertyStoreForWindow$address() {
        return SHGetPropertyStoreForWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SHGetPropertyStoreForWindow(HWND hwnd, const IID *const riid, void **ppv)
     * }
     */
    public static int SHGetPropertyStoreForWindow(MemorySegment hwnd, MemorySegment riid, MemorySegment ppv) {
        var mh$ = SHGetPropertyStoreForWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHGetPropertyStoreForWindow", hwnd, riid, ppv);
            }
            return (int)mh$.invokeExact(hwnd, riid, ppv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _NOTIFYICONDATAA {
     *     DWORD cbSize;
     *     HWND hWnd;
     *     UINT uID;
     *     UINT uFlags;
     *     UINT uCallbackMessage;
     *     HICON hIcon;
     *     CHAR szTip[128];
     *     DWORD dwState;
     *     DWORD dwStateMask;
     *     CHAR szInfo[256];
     *     union {
     *         UINT uTimeout;
     *         UINT uVersion;
     *     };
     *     CHAR szInfoTitle[64];
     *     DWORD dwInfoFlags;
     *     GUID guidItem;
     *     HICON hBalloonIcon;
     * } *PNOTIFYICONDATAA
     * }
     */
    public static final AddressLayout PNOTIFYICONDATAA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _NOTIFYICONDATAW {
     *     DWORD cbSize;
     *     HWND hWnd;
     *     UINT uID;
     *     UINT uFlags;
     *     UINT uCallbackMessage;
     *     HICON hIcon;
     *     WCHAR szTip[128];
     *     DWORD dwState;
     *     DWORD dwStateMask;
     *     WCHAR szInfo[256];
     *     union {
     *         UINT uTimeout;
     *         UINT uVersion;
     *     };
     *     WCHAR szInfoTitle[64];
     *     DWORD dwInfoFlags;
     *     GUID guidItem;
     *     HICON hBalloonIcon;
     * } *PNOTIFYICONDATAW
     * }
     */
    public static final AddressLayout PNOTIFYICONDATAW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PNOTIFYICONDATAA PNOTIFYICONDATA
     * }
     */
    public static final AddressLayout PNOTIFYICONDATA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _NOTIFYICONIDENTIFIER {
     *     DWORD cbSize;
     *     HWND hWnd;
     *     UINT uID;
     *     GUID guidItem;
     * } *PNOTIFYICONIDENTIFIER
     * }
     */
    public static final AddressLayout PNOTIFYICONIDENTIFIER = wgl_h.C_POINTER;

    private static class Shell_NotifyIconA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("Shell_NotifyIconA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BOOL Shell_NotifyIconA(DWORD dwMessage, PNOTIFYICONDATAA lpData)
     * }
     */
    public static FunctionDescriptor Shell_NotifyIconA$descriptor() {
        return Shell_NotifyIconA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BOOL Shell_NotifyIconA(DWORD dwMessage, PNOTIFYICONDATAA lpData)
     * }
     */
    public static MethodHandle Shell_NotifyIconA$handle() {
        return Shell_NotifyIconA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern BOOL Shell_NotifyIconA(DWORD dwMessage, PNOTIFYICONDATAA lpData)
     * }
     */
    public static MemorySegment Shell_NotifyIconA$address() {
        return Shell_NotifyIconA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern BOOL Shell_NotifyIconA(DWORD dwMessage, PNOTIFYICONDATAA lpData)
     * }
     */
    public static int Shell_NotifyIconA(int dwMessage, MemorySegment lpData) {
        var mh$ = Shell_NotifyIconA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Shell_NotifyIconA", dwMessage, lpData);
            }
            return (int)mh$.invokeExact(dwMessage, lpData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Shell_NotifyIconW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("Shell_NotifyIconW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BOOL Shell_NotifyIconW(DWORD dwMessage, PNOTIFYICONDATAW lpData)
     * }
     */
    public static FunctionDescriptor Shell_NotifyIconW$descriptor() {
        return Shell_NotifyIconW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BOOL Shell_NotifyIconW(DWORD dwMessage, PNOTIFYICONDATAW lpData)
     * }
     */
    public static MethodHandle Shell_NotifyIconW$handle() {
        return Shell_NotifyIconW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern BOOL Shell_NotifyIconW(DWORD dwMessage, PNOTIFYICONDATAW lpData)
     * }
     */
    public static MemorySegment Shell_NotifyIconW$address() {
        return Shell_NotifyIconW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern BOOL Shell_NotifyIconW(DWORD dwMessage, PNOTIFYICONDATAW lpData)
     * }
     */
    public static int Shell_NotifyIconW(int dwMessage, MemorySegment lpData) {
        var mh$ = Shell_NotifyIconW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Shell_NotifyIconW", dwMessage, lpData);
            }
            return (int)mh$.invokeExact(dwMessage, lpData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Shell_NotifyIconGetRect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("Shell_NotifyIconGetRect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT Shell_NotifyIconGetRect(const NOTIFYICONIDENTIFIER *identifier, RECT *iconLocation)
     * }
     */
    public static FunctionDescriptor Shell_NotifyIconGetRect$descriptor() {
        return Shell_NotifyIconGetRect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT Shell_NotifyIconGetRect(const NOTIFYICONIDENTIFIER *identifier, RECT *iconLocation)
     * }
     */
    public static MethodHandle Shell_NotifyIconGetRect$handle() {
        return Shell_NotifyIconGetRect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT Shell_NotifyIconGetRect(const NOTIFYICONIDENTIFIER *identifier, RECT *iconLocation)
     * }
     */
    public static MemorySegment Shell_NotifyIconGetRect$address() {
        return Shell_NotifyIconGetRect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT Shell_NotifyIconGetRect(const NOTIFYICONIDENTIFIER *identifier, RECT *iconLocation)
     * }
     */
    public static int Shell_NotifyIconGetRect(MemorySegment identifier, MemorySegment iconLocation) {
        var mh$ = Shell_NotifyIconGetRect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Shell_NotifyIconGetRect", identifier, iconLocation);
            }
            return (int)mh$.invokeExact(identifier, iconLocation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SHGetFileInfoA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SHGetFileInfoA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern DWORD_PTR SHGetFileInfoA(LPCSTR pszPath, DWORD dwFileAttributes, SHFILEINFOA *psfi, UINT cbFileInfo, UINT uFlags)
     * }
     */
    public static FunctionDescriptor SHGetFileInfoA$descriptor() {
        return SHGetFileInfoA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern DWORD_PTR SHGetFileInfoA(LPCSTR pszPath, DWORD dwFileAttributes, SHFILEINFOA *psfi, UINT cbFileInfo, UINT uFlags)
     * }
     */
    public static MethodHandle SHGetFileInfoA$handle() {
        return SHGetFileInfoA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern DWORD_PTR SHGetFileInfoA(LPCSTR pszPath, DWORD dwFileAttributes, SHFILEINFOA *psfi, UINT cbFileInfo, UINT uFlags)
     * }
     */
    public static MemorySegment SHGetFileInfoA$address() {
        return SHGetFileInfoA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern DWORD_PTR SHGetFileInfoA(LPCSTR pszPath, DWORD dwFileAttributes, SHFILEINFOA *psfi, UINT cbFileInfo, UINT uFlags)
     * }
     */
    public static long SHGetFileInfoA(MemorySegment pszPath, int dwFileAttributes, MemorySegment psfi, int cbFileInfo, int uFlags) {
        var mh$ = SHGetFileInfoA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHGetFileInfoA", pszPath, dwFileAttributes, psfi, cbFileInfo, uFlags);
            }
            return (long)mh$.invokeExact(pszPath, dwFileAttributes, psfi, cbFileInfo, uFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SHGetFileInfoW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SHGetFileInfoW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern DWORD_PTR SHGetFileInfoW(LPCWSTR pszPath, DWORD dwFileAttributes, SHFILEINFOW *psfi, UINT cbFileInfo, UINT uFlags)
     * }
     */
    public static FunctionDescriptor SHGetFileInfoW$descriptor() {
        return SHGetFileInfoW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern DWORD_PTR SHGetFileInfoW(LPCWSTR pszPath, DWORD dwFileAttributes, SHFILEINFOW *psfi, UINT cbFileInfo, UINT uFlags)
     * }
     */
    public static MethodHandle SHGetFileInfoW$handle() {
        return SHGetFileInfoW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern DWORD_PTR SHGetFileInfoW(LPCWSTR pszPath, DWORD dwFileAttributes, SHFILEINFOW *psfi, UINT cbFileInfo, UINT uFlags)
     * }
     */
    public static MemorySegment SHGetFileInfoW$address() {
        return SHGetFileInfoW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern DWORD_PTR SHGetFileInfoW(LPCWSTR pszPath, DWORD dwFileAttributes, SHFILEINFOW *psfi, UINT cbFileInfo, UINT uFlags)
     * }
     */
    public static long SHGetFileInfoW(MemorySegment pszPath, int dwFileAttributes, MemorySegment psfi, int cbFileInfo, int uFlags) {
        var mh$ = SHGetFileInfoW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHGetFileInfoW", pszPath, dwFileAttributes, psfi, cbFileInfo, uFlags);
            }
            return (long)mh$.invokeExact(pszPath, dwFileAttributes, psfi, cbFileInfo, uFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int SIID_DOCNOASSOC = (int)0L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_DOCNOASSOC = 0
     * }
     */
    public static int SIID_DOCNOASSOC() {
        return SIID_DOCNOASSOC;
    }
    private static final int SIID_DOCASSOC = (int)1L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_DOCASSOC = 1
     * }
     */
    public static int SIID_DOCASSOC() {
        return SIID_DOCASSOC;
    }
    private static final int SIID_APPLICATION = (int)2L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_APPLICATION = 2
     * }
     */
    public static int SIID_APPLICATION() {
        return SIID_APPLICATION;
    }
    private static final int SIID_FOLDER = (int)3L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_FOLDER = 3
     * }
     */
    public static int SIID_FOLDER() {
        return SIID_FOLDER;
    }
}

