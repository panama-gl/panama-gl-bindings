// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct IAsyncRpcChannelBufferVtbl {
 *     HRESULT (*QueryInterface)(IAsyncRpcChannelBuffer *, const IID *const, void **) __attribute__((stdcall));
 *     ULONG (*AddRef)(IAsyncRpcChannelBuffer *) __attribute__((stdcall));
 *     ULONG (*Release)(IAsyncRpcChannelBuffer *) __attribute__((stdcall));
 *     HRESULT (*GetBuffer)(IAsyncRpcChannelBuffer *, RPCOLEMESSAGE *, const IID *const) __attribute__((stdcall));
 *     HRESULT (*SendReceive)(IAsyncRpcChannelBuffer *, RPCOLEMESSAGE *, ULONG *) __attribute__((stdcall));
 *     HRESULT (*FreeBuffer)(IAsyncRpcChannelBuffer *, RPCOLEMESSAGE *) __attribute__((stdcall));
 *     HRESULT (*GetDestCtx)(IAsyncRpcChannelBuffer *, DWORD *, void **) __attribute__((stdcall));
 *     HRESULT (*IsConnected)(IAsyncRpcChannelBuffer *) __attribute__((stdcall));
 *     HRESULT (*GetProtocolVersion)(IAsyncRpcChannelBuffer *, DWORD *) __attribute__((stdcall));
 *     HRESULT (*Send)(IAsyncRpcChannelBuffer *, RPCOLEMESSAGE *, ISynchronize *, ULONG *) __attribute__((stdcall));
 *     HRESULT (*Receive)(IAsyncRpcChannelBuffer *, RPCOLEMESSAGE *, ULONG *) __attribute__((stdcall));
 *     HRESULT (*GetDestCtxEx)(IAsyncRpcChannelBuffer *, RPCOLEMESSAGE *, DWORD *, void **) __attribute__((stdcall));
 * }
 * }
 */
public class IAsyncRpcChannelBufferVtbl {

    IAsyncRpcChannelBufferVtbl() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("QueryInterface"),
        wgl_h.C_POINTER.withName("AddRef"),
        wgl_h.C_POINTER.withName("Release"),
        wgl_h.C_POINTER.withName("GetBuffer"),
        wgl_h.C_POINTER.withName("SendReceive"),
        wgl_h.C_POINTER.withName("FreeBuffer"),
        wgl_h.C_POINTER.withName("GetDestCtx"),
        wgl_h.C_POINTER.withName("IsConnected"),
        wgl_h.C_POINTER.withName("GetProtocolVersion"),
        wgl_h.C_POINTER.withName("Send"),
        wgl_h.C_POINTER.withName("Receive"),
        wgl_h.C_POINTER.withName("GetDestCtxEx")
    ).withName("IAsyncRpcChannelBufferVtbl");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IAsyncRpcChannelBuffer *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static class QueryInterface {

        QueryInterface() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(QueryInterface.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(QueryInterface.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout QueryInterface$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("QueryInterface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IAsyncRpcChannelBuffer *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout QueryInterface$layout() {
        return QueryInterface$LAYOUT;
    }

    private static final long QueryInterface$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IAsyncRpcChannelBuffer *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final long QueryInterface$offset() {
        return QueryInterface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IAsyncRpcChannelBuffer *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment QueryInterface(MemorySegment struct) {
        return struct.get(QueryInterface$LAYOUT, QueryInterface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IAsyncRpcChannelBuffer *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static void QueryInterface(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(QueryInterface$LAYOUT, QueryInterface$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*AddRef)(IAsyncRpcChannelBuffer *) __attribute__((stdcall))
     * }
     */
    public static class AddRef {

        AddRef() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(AddRef.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(AddRef.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout AddRef$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("AddRef"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IAsyncRpcChannelBuffer *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout AddRef$layout() {
        return AddRef$LAYOUT;
    }

    private static final long AddRef$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IAsyncRpcChannelBuffer *) __attribute__((stdcall))
     * }
     */
    public static final long AddRef$offset() {
        return AddRef$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IAsyncRpcChannelBuffer *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment AddRef(MemorySegment struct) {
        return struct.get(AddRef$LAYOUT, AddRef$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IAsyncRpcChannelBuffer *) __attribute__((stdcall))
     * }
     */
    public static void AddRef(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(AddRef$LAYOUT, AddRef$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*Release)(IAsyncRpcChannelBuffer *) __attribute__((stdcall))
     * }
     */
    public static class Release {

        Release() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Release.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Release.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Release$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Release"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IAsyncRpcChannelBuffer *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Release$layout() {
        return Release$LAYOUT;
    }

    private static final long Release$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IAsyncRpcChannelBuffer *) __attribute__((stdcall))
     * }
     */
    public static final long Release$offset() {
        return Release$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IAsyncRpcChannelBuffer *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Release(MemorySegment struct) {
        return struct.get(Release$LAYOUT, Release$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IAsyncRpcChannelBuffer *) __attribute__((stdcall))
     * }
     */
    public static void Release(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Release$LAYOUT, Release$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetBuffer)(IAsyncRpcChannelBuffer *, RPCOLEMESSAGE *, const IID *const) __attribute__((stdcall))
     * }
     */
    public static class GetBuffer {

        GetBuffer() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetBuffer.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetBuffer.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetBuffer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetBuffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetBuffer)(IAsyncRpcChannelBuffer *, RPCOLEMESSAGE *, const IID *const) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetBuffer$layout() {
        return GetBuffer$LAYOUT;
    }

    private static final long GetBuffer$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetBuffer)(IAsyncRpcChannelBuffer *, RPCOLEMESSAGE *, const IID *const) __attribute__((stdcall))
     * }
     */
    public static final long GetBuffer$offset() {
        return GetBuffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetBuffer)(IAsyncRpcChannelBuffer *, RPCOLEMESSAGE *, const IID *const) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetBuffer(MemorySegment struct) {
        return struct.get(GetBuffer$LAYOUT, GetBuffer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetBuffer)(IAsyncRpcChannelBuffer *, RPCOLEMESSAGE *, const IID *const) __attribute__((stdcall))
     * }
     */
    public static void GetBuffer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetBuffer$LAYOUT, GetBuffer$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SendReceive)(IAsyncRpcChannelBuffer *, RPCOLEMESSAGE *, ULONG *) __attribute__((stdcall))
     * }
     */
    public static class SendReceive {

        SendReceive() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SendReceive.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SendReceive.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SendReceive$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SendReceive"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SendReceive)(IAsyncRpcChannelBuffer *, RPCOLEMESSAGE *, ULONG *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SendReceive$layout() {
        return SendReceive$LAYOUT;
    }

    private static final long SendReceive$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SendReceive)(IAsyncRpcChannelBuffer *, RPCOLEMESSAGE *, ULONG *) __attribute__((stdcall))
     * }
     */
    public static final long SendReceive$offset() {
        return SendReceive$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SendReceive)(IAsyncRpcChannelBuffer *, RPCOLEMESSAGE *, ULONG *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SendReceive(MemorySegment struct) {
        return struct.get(SendReceive$LAYOUT, SendReceive$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SendReceive)(IAsyncRpcChannelBuffer *, RPCOLEMESSAGE *, ULONG *) __attribute__((stdcall))
     * }
     */
    public static void SendReceive(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SendReceive$LAYOUT, SendReceive$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*FreeBuffer)(IAsyncRpcChannelBuffer *, RPCOLEMESSAGE *) __attribute__((stdcall))
     * }
     */
    public static class FreeBuffer {

        FreeBuffer() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(FreeBuffer.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(FreeBuffer.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout FreeBuffer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("FreeBuffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*FreeBuffer)(IAsyncRpcChannelBuffer *, RPCOLEMESSAGE *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout FreeBuffer$layout() {
        return FreeBuffer$LAYOUT;
    }

    private static final long FreeBuffer$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*FreeBuffer)(IAsyncRpcChannelBuffer *, RPCOLEMESSAGE *) __attribute__((stdcall))
     * }
     */
    public static final long FreeBuffer$offset() {
        return FreeBuffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*FreeBuffer)(IAsyncRpcChannelBuffer *, RPCOLEMESSAGE *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment FreeBuffer(MemorySegment struct) {
        return struct.get(FreeBuffer$LAYOUT, FreeBuffer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*FreeBuffer)(IAsyncRpcChannelBuffer *, RPCOLEMESSAGE *) __attribute__((stdcall))
     * }
     */
    public static void FreeBuffer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(FreeBuffer$LAYOUT, FreeBuffer$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetDestCtx)(IAsyncRpcChannelBuffer *, DWORD *, void **) __attribute__((stdcall))
     * }
     */
    public static class GetDestCtx {

        GetDestCtx() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetDestCtx.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetDestCtx.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetDestCtx$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetDestCtx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetDestCtx)(IAsyncRpcChannelBuffer *, DWORD *, void **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetDestCtx$layout() {
        return GetDestCtx$LAYOUT;
    }

    private static final long GetDestCtx$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetDestCtx)(IAsyncRpcChannelBuffer *, DWORD *, void **) __attribute__((stdcall))
     * }
     */
    public static final long GetDestCtx$offset() {
        return GetDestCtx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetDestCtx)(IAsyncRpcChannelBuffer *, DWORD *, void **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetDestCtx(MemorySegment struct) {
        return struct.get(GetDestCtx$LAYOUT, GetDestCtx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetDestCtx)(IAsyncRpcChannelBuffer *, DWORD *, void **) __attribute__((stdcall))
     * }
     */
    public static void GetDestCtx(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetDestCtx$LAYOUT, GetDestCtx$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*IsConnected)(IAsyncRpcChannelBuffer *) __attribute__((stdcall))
     * }
     */
    public static class IsConnected {

        IsConnected() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(IsConnected.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(IsConnected.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout IsConnected$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("IsConnected"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*IsConnected)(IAsyncRpcChannelBuffer *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout IsConnected$layout() {
        return IsConnected$LAYOUT;
    }

    private static final long IsConnected$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*IsConnected)(IAsyncRpcChannelBuffer *) __attribute__((stdcall))
     * }
     */
    public static final long IsConnected$offset() {
        return IsConnected$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*IsConnected)(IAsyncRpcChannelBuffer *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment IsConnected(MemorySegment struct) {
        return struct.get(IsConnected$LAYOUT, IsConnected$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*IsConnected)(IAsyncRpcChannelBuffer *) __attribute__((stdcall))
     * }
     */
    public static void IsConnected(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(IsConnected$LAYOUT, IsConnected$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetProtocolVersion)(IAsyncRpcChannelBuffer *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static class GetProtocolVersion {

        GetProtocolVersion() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetProtocolVersion.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetProtocolVersion.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetProtocolVersion$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetProtocolVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetProtocolVersion)(IAsyncRpcChannelBuffer *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetProtocolVersion$layout() {
        return GetProtocolVersion$LAYOUT;
    }

    private static final long GetProtocolVersion$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetProtocolVersion)(IAsyncRpcChannelBuffer *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static final long GetProtocolVersion$offset() {
        return GetProtocolVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetProtocolVersion)(IAsyncRpcChannelBuffer *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetProtocolVersion(MemorySegment struct) {
        return struct.get(GetProtocolVersion$LAYOUT, GetProtocolVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetProtocolVersion)(IAsyncRpcChannelBuffer *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static void GetProtocolVersion(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetProtocolVersion$LAYOUT, GetProtocolVersion$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*Send)(IAsyncRpcChannelBuffer *, RPCOLEMESSAGE *, ISynchronize *, ULONG *) __attribute__((stdcall))
     * }
     */
    public static class Send {

        Send() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Send.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Send.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Send$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Send"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*Send)(IAsyncRpcChannelBuffer *, RPCOLEMESSAGE *, ISynchronize *, ULONG *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Send$layout() {
        return Send$LAYOUT;
    }

    private static final long Send$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*Send)(IAsyncRpcChannelBuffer *, RPCOLEMESSAGE *, ISynchronize *, ULONG *) __attribute__((stdcall))
     * }
     */
    public static final long Send$offset() {
        return Send$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*Send)(IAsyncRpcChannelBuffer *, RPCOLEMESSAGE *, ISynchronize *, ULONG *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Send(MemorySegment struct) {
        return struct.get(Send$LAYOUT, Send$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*Send)(IAsyncRpcChannelBuffer *, RPCOLEMESSAGE *, ISynchronize *, ULONG *) __attribute__((stdcall))
     * }
     */
    public static void Send(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Send$LAYOUT, Send$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*Receive)(IAsyncRpcChannelBuffer *, RPCOLEMESSAGE *, ULONG *) __attribute__((stdcall))
     * }
     */
    public static class Receive {

        Receive() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Receive.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Receive.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Receive$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Receive"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*Receive)(IAsyncRpcChannelBuffer *, RPCOLEMESSAGE *, ULONG *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Receive$layout() {
        return Receive$LAYOUT;
    }

    private static final long Receive$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*Receive)(IAsyncRpcChannelBuffer *, RPCOLEMESSAGE *, ULONG *) __attribute__((stdcall))
     * }
     */
    public static final long Receive$offset() {
        return Receive$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*Receive)(IAsyncRpcChannelBuffer *, RPCOLEMESSAGE *, ULONG *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Receive(MemorySegment struct) {
        return struct.get(Receive$LAYOUT, Receive$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*Receive)(IAsyncRpcChannelBuffer *, RPCOLEMESSAGE *, ULONG *) __attribute__((stdcall))
     * }
     */
    public static void Receive(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Receive$LAYOUT, Receive$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetDestCtxEx)(IAsyncRpcChannelBuffer *, RPCOLEMESSAGE *, DWORD *, void **) __attribute__((stdcall))
     * }
     */
    public static class GetDestCtxEx {

        GetDestCtxEx() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetDestCtxEx.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetDestCtxEx.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetDestCtxEx$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetDestCtxEx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetDestCtxEx)(IAsyncRpcChannelBuffer *, RPCOLEMESSAGE *, DWORD *, void **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetDestCtxEx$layout() {
        return GetDestCtxEx$LAYOUT;
    }

    private static final long GetDestCtxEx$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetDestCtxEx)(IAsyncRpcChannelBuffer *, RPCOLEMESSAGE *, DWORD *, void **) __attribute__((stdcall))
     * }
     */
    public static final long GetDestCtxEx$offset() {
        return GetDestCtxEx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetDestCtxEx)(IAsyncRpcChannelBuffer *, RPCOLEMESSAGE *, DWORD *, void **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetDestCtxEx(MemorySegment struct) {
        return struct.get(GetDestCtxEx$LAYOUT, GetDestCtxEx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetDestCtxEx)(IAsyncRpcChannelBuffer *, RPCOLEMESSAGE *, DWORD *, void **) __attribute__((stdcall))
     * }
     */
    public static void GetDestCtxEx(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetDestCtxEx$LAYOUT, GetDestCtxEx$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

