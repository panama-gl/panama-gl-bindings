// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A {
 *     RPC_AUTH_IDENTITY_HANDLE TransportCredentials;
 *     unsigned long Flags;
 *     unsigned long AuthenticationTarget;
 *     unsigned long NumberOfAuthnSchemes;
 *     unsigned long *AuthnSchemes;
 *     unsigned char *ServerCertificateSubject;
 *     RPC_AUTH_IDENTITY_HANDLE ProxyCredentials;
 *     unsigned long NumberOfProxyAuthnSchemes;
 *     unsigned long *ProxyAuthnSchemes;
 * }
 * }
 */
public class _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A {

    _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("TransportCredentials"),
        wgl_h.C_LONG.withName("Flags"),
        wgl_h.C_LONG.withName("AuthenticationTarget"),
        wgl_h.C_LONG.withName("NumberOfAuthnSchemes"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_POINTER.withName("AuthnSchemes"),
        wgl_h.C_POINTER.withName("ServerCertificateSubject"),
        wgl_h.C_POINTER.withName("ProxyCredentials"),
        wgl_h.C_LONG.withName("NumberOfProxyAuthnSchemes"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_POINTER.withName("ProxyAuthnSchemes")
    ).withName("_RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout TransportCredentials$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("TransportCredentials"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * RPC_AUTH_IDENTITY_HANDLE TransportCredentials
     * }
     */
    public static final AddressLayout TransportCredentials$layout() {
        return TransportCredentials$LAYOUT;
    }

    private static final long TransportCredentials$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * RPC_AUTH_IDENTITY_HANDLE TransportCredentials
     * }
     */
    public static final long TransportCredentials$offset() {
        return TransportCredentials$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * RPC_AUTH_IDENTITY_HANDLE TransportCredentials
     * }
     */
    public static MemorySegment TransportCredentials(MemorySegment struct) {
        return struct.get(TransportCredentials$LAYOUT, TransportCredentials$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * RPC_AUTH_IDENTITY_HANDLE TransportCredentials
     * }
     */
    public static void TransportCredentials(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(TransportCredentials$LAYOUT, TransportCredentials$OFFSET, fieldValue);
    }

    private static final OfInt Flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long Flags
     * }
     */
    public static final OfInt Flags$layout() {
        return Flags$LAYOUT;
    }

    private static final long Flags$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long Flags
     * }
     */
    public static final long Flags$offset() {
        return Flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long Flags
     * }
     */
    public static int Flags(MemorySegment struct) {
        return struct.get(Flags$LAYOUT, Flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long Flags
     * }
     */
    public static void Flags(MemorySegment struct, int fieldValue) {
        struct.set(Flags$LAYOUT, Flags$OFFSET, fieldValue);
    }

    private static final OfInt AuthenticationTarget$LAYOUT = (OfInt)$LAYOUT.select(groupElement("AuthenticationTarget"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long AuthenticationTarget
     * }
     */
    public static final OfInt AuthenticationTarget$layout() {
        return AuthenticationTarget$LAYOUT;
    }

    private static final long AuthenticationTarget$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long AuthenticationTarget
     * }
     */
    public static final long AuthenticationTarget$offset() {
        return AuthenticationTarget$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long AuthenticationTarget
     * }
     */
    public static int AuthenticationTarget(MemorySegment struct) {
        return struct.get(AuthenticationTarget$LAYOUT, AuthenticationTarget$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long AuthenticationTarget
     * }
     */
    public static void AuthenticationTarget(MemorySegment struct, int fieldValue) {
        struct.set(AuthenticationTarget$LAYOUT, AuthenticationTarget$OFFSET, fieldValue);
    }

    private static final OfInt NumberOfAuthnSchemes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NumberOfAuthnSchemes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long NumberOfAuthnSchemes
     * }
     */
    public static final OfInt NumberOfAuthnSchemes$layout() {
        return NumberOfAuthnSchemes$LAYOUT;
    }

    private static final long NumberOfAuthnSchemes$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long NumberOfAuthnSchemes
     * }
     */
    public static final long NumberOfAuthnSchemes$offset() {
        return NumberOfAuthnSchemes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long NumberOfAuthnSchemes
     * }
     */
    public static int NumberOfAuthnSchemes(MemorySegment struct) {
        return struct.get(NumberOfAuthnSchemes$LAYOUT, NumberOfAuthnSchemes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long NumberOfAuthnSchemes
     * }
     */
    public static void NumberOfAuthnSchemes(MemorySegment struct, int fieldValue) {
        struct.set(NumberOfAuthnSchemes$LAYOUT, NumberOfAuthnSchemes$OFFSET, fieldValue);
    }

    private static final AddressLayout AuthnSchemes$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("AuthnSchemes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long *AuthnSchemes
     * }
     */
    public static final AddressLayout AuthnSchemes$layout() {
        return AuthnSchemes$LAYOUT;
    }

    private static final long AuthnSchemes$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long *AuthnSchemes
     * }
     */
    public static final long AuthnSchemes$offset() {
        return AuthnSchemes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long *AuthnSchemes
     * }
     */
    public static MemorySegment AuthnSchemes(MemorySegment struct) {
        return struct.get(AuthnSchemes$LAYOUT, AuthnSchemes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long *AuthnSchemes
     * }
     */
    public static void AuthnSchemes(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(AuthnSchemes$LAYOUT, AuthnSchemes$OFFSET, fieldValue);
    }

    private static final AddressLayout ServerCertificateSubject$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ServerCertificateSubject"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char *ServerCertificateSubject
     * }
     */
    public static final AddressLayout ServerCertificateSubject$layout() {
        return ServerCertificateSubject$LAYOUT;
    }

    private static final long ServerCertificateSubject$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char *ServerCertificateSubject
     * }
     */
    public static final long ServerCertificateSubject$offset() {
        return ServerCertificateSubject$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char *ServerCertificateSubject
     * }
     */
    public static MemorySegment ServerCertificateSubject(MemorySegment struct) {
        return struct.get(ServerCertificateSubject$LAYOUT, ServerCertificateSubject$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char *ServerCertificateSubject
     * }
     */
    public static void ServerCertificateSubject(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ServerCertificateSubject$LAYOUT, ServerCertificateSubject$OFFSET, fieldValue);
    }

    private static final AddressLayout ProxyCredentials$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ProxyCredentials"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * RPC_AUTH_IDENTITY_HANDLE ProxyCredentials
     * }
     */
    public static final AddressLayout ProxyCredentials$layout() {
        return ProxyCredentials$LAYOUT;
    }

    private static final long ProxyCredentials$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * RPC_AUTH_IDENTITY_HANDLE ProxyCredentials
     * }
     */
    public static final long ProxyCredentials$offset() {
        return ProxyCredentials$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * RPC_AUTH_IDENTITY_HANDLE ProxyCredentials
     * }
     */
    public static MemorySegment ProxyCredentials(MemorySegment struct) {
        return struct.get(ProxyCredentials$LAYOUT, ProxyCredentials$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * RPC_AUTH_IDENTITY_HANDLE ProxyCredentials
     * }
     */
    public static void ProxyCredentials(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ProxyCredentials$LAYOUT, ProxyCredentials$OFFSET, fieldValue);
    }

    private static final OfInt NumberOfProxyAuthnSchemes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NumberOfProxyAuthnSchemes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long NumberOfProxyAuthnSchemes
     * }
     */
    public static final OfInt NumberOfProxyAuthnSchemes$layout() {
        return NumberOfProxyAuthnSchemes$LAYOUT;
    }

    private static final long NumberOfProxyAuthnSchemes$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long NumberOfProxyAuthnSchemes
     * }
     */
    public static final long NumberOfProxyAuthnSchemes$offset() {
        return NumberOfProxyAuthnSchemes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long NumberOfProxyAuthnSchemes
     * }
     */
    public static int NumberOfProxyAuthnSchemes(MemorySegment struct) {
        return struct.get(NumberOfProxyAuthnSchemes$LAYOUT, NumberOfProxyAuthnSchemes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long NumberOfProxyAuthnSchemes
     * }
     */
    public static void NumberOfProxyAuthnSchemes(MemorySegment struct, int fieldValue) {
        struct.set(NumberOfProxyAuthnSchemes$LAYOUT, NumberOfProxyAuthnSchemes$OFFSET, fieldValue);
    }

    private static final AddressLayout ProxyAuthnSchemes$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ProxyAuthnSchemes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long *ProxyAuthnSchemes
     * }
     */
    public static final AddressLayout ProxyAuthnSchemes$layout() {
        return ProxyAuthnSchemes$LAYOUT;
    }

    private static final long ProxyAuthnSchemes$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long *ProxyAuthnSchemes
     * }
     */
    public static final long ProxyAuthnSchemes$offset() {
        return ProxyAuthnSchemes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long *ProxyAuthnSchemes
     * }
     */
    public static MemorySegment ProxyAuthnSchemes(MemorySegment struct) {
        return struct.get(ProxyAuthnSchemes$LAYOUT, ProxyAuthnSchemes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long *ProxyAuthnSchemes
     * }
     */
    public static void ProxyAuthnSchemes(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ProxyAuthnSchemes$LAYOUT, ProxyAuthnSchemes$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

