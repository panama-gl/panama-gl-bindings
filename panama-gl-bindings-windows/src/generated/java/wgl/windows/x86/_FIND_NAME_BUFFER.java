// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _FIND_NAME_BUFFER {
 *     UCHAR length;
 *     UCHAR access_control;
 *     UCHAR frame_control;
 *     UCHAR destination_addr[6];
 *     UCHAR source_addr[6];
 *     UCHAR routing_info[18];
 * }
 * }
 */
public class _FIND_NAME_BUFFER {

    _FIND_NAME_BUFFER() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_CHAR.withName("length"),
        wgl_h.C_CHAR.withName("access_control"),
        wgl_h.C_CHAR.withName("frame_control"),
        MemoryLayout.sequenceLayout(6, wgl_h.C_CHAR).withName("destination_addr"),
        MemoryLayout.sequenceLayout(6, wgl_h.C_CHAR).withName("source_addr"),
        MemoryLayout.sequenceLayout(18, wgl_h.C_CHAR).withName("routing_info")
    ).withName("_FIND_NAME_BUFFER");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte length$LAYOUT = (OfByte)$LAYOUT.select(groupElement("length"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UCHAR length
     * }
     */
    public static final OfByte length$layout() {
        return length$LAYOUT;
    }

    private static final long length$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UCHAR length
     * }
     */
    public static final long length$offset() {
        return length$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UCHAR length
     * }
     */
    public static byte length(MemorySegment struct) {
        return struct.get(length$LAYOUT, length$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UCHAR length
     * }
     */
    public static void length(MemorySegment struct, byte fieldValue) {
        struct.set(length$LAYOUT, length$OFFSET, fieldValue);
    }

    private static final OfByte access_control$LAYOUT = (OfByte)$LAYOUT.select(groupElement("access_control"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UCHAR access_control
     * }
     */
    public static final OfByte access_control$layout() {
        return access_control$LAYOUT;
    }

    private static final long access_control$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UCHAR access_control
     * }
     */
    public static final long access_control$offset() {
        return access_control$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UCHAR access_control
     * }
     */
    public static byte access_control(MemorySegment struct) {
        return struct.get(access_control$LAYOUT, access_control$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UCHAR access_control
     * }
     */
    public static void access_control(MemorySegment struct, byte fieldValue) {
        struct.set(access_control$LAYOUT, access_control$OFFSET, fieldValue);
    }

    private static final OfByte frame_control$LAYOUT = (OfByte)$LAYOUT.select(groupElement("frame_control"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UCHAR frame_control
     * }
     */
    public static final OfByte frame_control$layout() {
        return frame_control$LAYOUT;
    }

    private static final long frame_control$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UCHAR frame_control
     * }
     */
    public static final long frame_control$offset() {
        return frame_control$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UCHAR frame_control
     * }
     */
    public static byte frame_control(MemorySegment struct) {
        return struct.get(frame_control$LAYOUT, frame_control$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UCHAR frame_control
     * }
     */
    public static void frame_control(MemorySegment struct, byte fieldValue) {
        struct.set(frame_control$LAYOUT, frame_control$OFFSET, fieldValue);
    }

    private static final SequenceLayout destination_addr$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("destination_addr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UCHAR destination_addr[6]
     * }
     */
    public static final SequenceLayout destination_addr$layout() {
        return destination_addr$LAYOUT;
    }

    private static final long destination_addr$OFFSET = 3;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UCHAR destination_addr[6]
     * }
     */
    public static final long destination_addr$offset() {
        return destination_addr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UCHAR destination_addr[6]
     * }
     */
    public static MemorySegment destination_addr(MemorySegment struct) {
        return struct.asSlice(destination_addr$OFFSET, destination_addr$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UCHAR destination_addr[6]
     * }
     */
    public static void destination_addr(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, destination_addr$OFFSET, destination_addr$LAYOUT.byteSize());
    }

    private static long[] destination_addr$DIMS = { 6 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * UCHAR destination_addr[6]
     * }
     */
    public static long[] destination_addr$dimensions() {
        return destination_addr$DIMS;
    }
    private static final VarHandle destination_addr$ELEM_HANDLE = destination_addr$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * UCHAR destination_addr[6]
     * }
     */
    public static byte destination_addr(MemorySegment struct, long index0) {
        return (byte)destination_addr$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * UCHAR destination_addr[6]
     * }
     */
    public static void destination_addr(MemorySegment struct, long index0, byte fieldValue) {
        destination_addr$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout source_addr$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("source_addr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UCHAR source_addr[6]
     * }
     */
    public static final SequenceLayout source_addr$layout() {
        return source_addr$LAYOUT;
    }

    private static final long source_addr$OFFSET = 9;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UCHAR source_addr[6]
     * }
     */
    public static final long source_addr$offset() {
        return source_addr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UCHAR source_addr[6]
     * }
     */
    public static MemorySegment source_addr(MemorySegment struct) {
        return struct.asSlice(source_addr$OFFSET, source_addr$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UCHAR source_addr[6]
     * }
     */
    public static void source_addr(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, source_addr$OFFSET, source_addr$LAYOUT.byteSize());
    }

    private static long[] source_addr$DIMS = { 6 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * UCHAR source_addr[6]
     * }
     */
    public static long[] source_addr$dimensions() {
        return source_addr$DIMS;
    }
    private static final VarHandle source_addr$ELEM_HANDLE = source_addr$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * UCHAR source_addr[6]
     * }
     */
    public static byte source_addr(MemorySegment struct, long index0) {
        return (byte)source_addr$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * UCHAR source_addr[6]
     * }
     */
    public static void source_addr(MemorySegment struct, long index0, byte fieldValue) {
        source_addr$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout routing_info$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("routing_info"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UCHAR routing_info[18]
     * }
     */
    public static final SequenceLayout routing_info$layout() {
        return routing_info$LAYOUT;
    }

    private static final long routing_info$OFFSET = 15;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UCHAR routing_info[18]
     * }
     */
    public static final long routing_info$offset() {
        return routing_info$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UCHAR routing_info[18]
     * }
     */
    public static MemorySegment routing_info(MemorySegment struct) {
        return struct.asSlice(routing_info$OFFSET, routing_info$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UCHAR routing_info[18]
     * }
     */
    public static void routing_info(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, routing_info$OFFSET, routing_info$LAYOUT.byteSize());
    }

    private static long[] routing_info$DIMS = { 18 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * UCHAR routing_info[18]
     * }
     */
    public static long[] routing_info$dimensions() {
        return routing_info$DIMS;
    }
    private static final VarHandle routing_info$ELEM_HANDLE = routing_info$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * UCHAR routing_info[18]
     * }
     */
    public static byte routing_info(MemorySegment struct, long index0) {
        return (byte)routing_info$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * UCHAR routing_info[18]
     * }
     */
    public static void routing_info(MemorySegment struct, long index0, byte fieldValue) {
        routing_info$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

