// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class wgl_h_17 extends wgl_h_18 {

    wgl_h_17() {
        // Should not be called directly
    }
    /**
     * {@snippet lang=c :
     * typedef LPPRINTER_OPTIONSA LPPRINTER_OPTIONS
     * }
     */
    public static final AddressLayout LPPRINTER_OPTIONS = wgl_h.C_POINTER;

    private static class OpenPrinter2A {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("OpenPrinter2A");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL OpenPrinter2A(LPCSTR pPrinterName, LPHANDLE phPrinter, PPRINTER_DEFAULTSA pDefault, PPRINTER_OPTIONSA pOptions)
     * }
     */
    public static FunctionDescriptor OpenPrinter2A$descriptor() {
        return OpenPrinter2A.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL OpenPrinter2A(LPCSTR pPrinterName, LPHANDLE phPrinter, PPRINTER_DEFAULTSA pDefault, PPRINTER_OPTIONSA pOptions)
     * }
     */
    public static MethodHandle OpenPrinter2A$handle() {
        return OpenPrinter2A.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL OpenPrinter2A(LPCSTR pPrinterName, LPHANDLE phPrinter, PPRINTER_DEFAULTSA pDefault, PPRINTER_OPTIONSA pOptions)
     * }
     */
    public static MemorySegment OpenPrinter2A$address() {
        return OpenPrinter2A.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL OpenPrinter2A(LPCSTR pPrinterName, LPHANDLE phPrinter, PPRINTER_DEFAULTSA pDefault, PPRINTER_OPTIONSA pOptions)
     * }
     */
    public static int OpenPrinter2A(MemorySegment pPrinterName, MemorySegment phPrinter, MemorySegment pDefault, MemorySegment pOptions) {
        var mh$ = OpenPrinter2A.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OpenPrinter2A", pPrinterName, phPrinter, pDefault, pOptions);
            }
            return (int)mh$.invokeExact(pPrinterName, phPrinter, pDefault, pOptions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OpenPrinter2W {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("OpenPrinter2W");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL OpenPrinter2W(LPCWSTR pPrinterName, LPHANDLE phPrinter, PPRINTER_DEFAULTSW pDefault, PPRINTER_OPTIONSW pOptions)
     * }
     */
    public static FunctionDescriptor OpenPrinter2W$descriptor() {
        return OpenPrinter2W.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL OpenPrinter2W(LPCWSTR pPrinterName, LPHANDLE phPrinter, PPRINTER_DEFAULTSW pDefault, PPRINTER_OPTIONSW pOptions)
     * }
     */
    public static MethodHandle OpenPrinter2W$handle() {
        return OpenPrinter2W.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL OpenPrinter2W(LPCWSTR pPrinterName, LPHANDLE phPrinter, PPRINTER_DEFAULTSW pDefault, PPRINTER_OPTIONSW pOptions)
     * }
     */
    public static MemorySegment OpenPrinter2W$address() {
        return OpenPrinter2W.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL OpenPrinter2W(LPCWSTR pPrinterName, LPHANDLE phPrinter, PPRINTER_DEFAULTSW pDefault, PPRINTER_OPTIONSW pOptions)
     * }
     */
    public static int OpenPrinter2W(MemorySegment pPrinterName, MemorySegment phPrinter, MemorySegment pDefault, MemorySegment pOptions) {
        var mh$ = OpenPrinter2W.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OpenPrinter2W", pPrinterName, phPrinter, pDefault, pOptions);
            }
            return (int)mh$.invokeExact(pPrinterName, phPrinter, pDefault, pOptions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_CONNECTION_INFO_1A {
     *     DWORD dwFlags;
     *     LPSTR pszDriverName;
     * } *PPRINTER_CONNECTION_INFO_1A
     * }
     */
    public static final AddressLayout PPRINTER_CONNECTION_INFO_1A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_CONNECTION_INFO_1W {
     *     DWORD dwFlags;
     *     LPWSTR pszDriverName;
     * } *PPRINTER_CONNECTION_INFO_1W
     * }
     */
    public static final AddressLayout PPRINTER_CONNECTION_INFO_1W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPRINTER_CONNECTION_INFO_1A PPRINTER_CONNECTION_INFO_1
     * }
     */
    public static final AddressLayout PPRINTER_CONNECTION_INFO_1 = wgl_h.C_POINTER;

    private static class AddPrinterConnection2A {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AddPrinterConnection2A");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddPrinterConnection2A(HWND hWnd, LPCSTR pszName, DWORD dwLevel, PVOID pConnectionInfo)
     * }
     */
    public static FunctionDescriptor AddPrinterConnection2A$descriptor() {
        return AddPrinterConnection2A.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddPrinterConnection2A(HWND hWnd, LPCSTR pszName, DWORD dwLevel, PVOID pConnectionInfo)
     * }
     */
    public static MethodHandle AddPrinterConnection2A$handle() {
        return AddPrinterConnection2A.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddPrinterConnection2A(HWND hWnd, LPCSTR pszName, DWORD dwLevel, PVOID pConnectionInfo)
     * }
     */
    public static MemorySegment AddPrinterConnection2A$address() {
        return AddPrinterConnection2A.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddPrinterConnection2A(HWND hWnd, LPCSTR pszName, DWORD dwLevel, PVOID pConnectionInfo)
     * }
     */
    public static int AddPrinterConnection2A(MemorySegment hWnd, MemorySegment pszName, int dwLevel, MemorySegment pConnectionInfo) {
        var mh$ = AddPrinterConnection2A.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddPrinterConnection2A", hWnd, pszName, dwLevel, pConnectionInfo);
            }
            return (int)mh$.invokeExact(hWnd, pszName, dwLevel, pConnectionInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddPrinterConnection2W {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AddPrinterConnection2W");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddPrinterConnection2W(HWND hWnd, LPCWSTR pszName, DWORD dwLevel, PVOID pConnectionInfo)
     * }
     */
    public static FunctionDescriptor AddPrinterConnection2W$descriptor() {
        return AddPrinterConnection2W.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddPrinterConnection2W(HWND hWnd, LPCWSTR pszName, DWORD dwLevel, PVOID pConnectionInfo)
     * }
     */
    public static MethodHandle AddPrinterConnection2W$handle() {
        return AddPrinterConnection2W.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddPrinterConnection2W(HWND hWnd, LPCWSTR pszName, DWORD dwLevel, PVOID pConnectionInfo)
     * }
     */
    public static MemorySegment AddPrinterConnection2W$address() {
        return AddPrinterConnection2W.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddPrinterConnection2W(HWND hWnd, LPCWSTR pszName, DWORD dwLevel, PVOID pConnectionInfo)
     * }
     */
    public static int AddPrinterConnection2W(MemorySegment hWnd, MemorySegment pszName, int dwLevel, MemorySegment pConnectionInfo) {
        var mh$ = AddPrinterConnection2W.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddPrinterConnection2W", hWnd, pszName, dwLevel, pConnectionInfo);
            }
            return (int)mh$.invokeExact(hWnd, pszName, dwLevel, pConnectionInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class InstallPrinterDriverFromPackageA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("InstallPrinterDriverFromPackageA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT InstallPrinterDriverFromPackageA(LPCSTR pszServer, LPCSTR pszInfPath, LPCSTR pszDriverName, LPCSTR pszEnvironment, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor InstallPrinterDriverFromPackageA$descriptor() {
        return InstallPrinterDriverFromPackageA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT InstallPrinterDriverFromPackageA(LPCSTR pszServer, LPCSTR pszInfPath, LPCSTR pszDriverName, LPCSTR pszEnvironment, DWORD dwFlags)
     * }
     */
    public static MethodHandle InstallPrinterDriverFromPackageA$handle() {
        return InstallPrinterDriverFromPackageA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT InstallPrinterDriverFromPackageA(LPCSTR pszServer, LPCSTR pszInfPath, LPCSTR pszDriverName, LPCSTR pszEnvironment, DWORD dwFlags)
     * }
     */
    public static MemorySegment InstallPrinterDriverFromPackageA$address() {
        return InstallPrinterDriverFromPackageA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT InstallPrinterDriverFromPackageA(LPCSTR pszServer, LPCSTR pszInfPath, LPCSTR pszDriverName, LPCSTR pszEnvironment, DWORD dwFlags)
     * }
     */
    public static int InstallPrinterDriverFromPackageA(MemorySegment pszServer, MemorySegment pszInfPath, MemorySegment pszDriverName, MemorySegment pszEnvironment, int dwFlags) {
        var mh$ = InstallPrinterDriverFromPackageA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("InstallPrinterDriverFromPackageA", pszServer, pszInfPath, pszDriverName, pszEnvironment, dwFlags);
            }
            return (int)mh$.invokeExact(pszServer, pszInfPath, pszDriverName, pszEnvironment, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class InstallPrinterDriverFromPackageW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("InstallPrinterDriverFromPackageW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT InstallPrinterDriverFromPackageW(LPCWSTR pszServer, LPCWSTR pszInfPath, LPCWSTR pszDriverName, LPCWSTR pszEnvironment, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor InstallPrinterDriverFromPackageW$descriptor() {
        return InstallPrinterDriverFromPackageW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT InstallPrinterDriverFromPackageW(LPCWSTR pszServer, LPCWSTR pszInfPath, LPCWSTR pszDriverName, LPCWSTR pszEnvironment, DWORD dwFlags)
     * }
     */
    public static MethodHandle InstallPrinterDriverFromPackageW$handle() {
        return InstallPrinterDriverFromPackageW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT InstallPrinterDriverFromPackageW(LPCWSTR pszServer, LPCWSTR pszInfPath, LPCWSTR pszDriverName, LPCWSTR pszEnvironment, DWORD dwFlags)
     * }
     */
    public static MemorySegment InstallPrinterDriverFromPackageW$address() {
        return InstallPrinterDriverFromPackageW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT InstallPrinterDriverFromPackageW(LPCWSTR pszServer, LPCWSTR pszInfPath, LPCWSTR pszDriverName, LPCWSTR pszEnvironment, DWORD dwFlags)
     * }
     */
    public static int InstallPrinterDriverFromPackageW(MemorySegment pszServer, MemorySegment pszInfPath, MemorySegment pszDriverName, MemorySegment pszEnvironment, int dwFlags) {
        var mh$ = InstallPrinterDriverFromPackageW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("InstallPrinterDriverFromPackageW", pszServer, pszInfPath, pszDriverName, pszEnvironment, dwFlags);
            }
            return (int)mh$.invokeExact(pszServer, pszInfPath, pszDriverName, pszEnvironment, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UploadPrinterDriverPackageA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("UploadPrinterDriverPackageA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT UploadPrinterDriverPackageA(LPCSTR pszServer, LPCSTR pszInfPath, LPCSTR pszEnvironment, DWORD dwFlags, HWND hwnd, LPSTR pszDestInfPath, PULONG pcchDestInfPath)
     * }
     */
    public static FunctionDescriptor UploadPrinterDriverPackageA$descriptor() {
        return UploadPrinterDriverPackageA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT UploadPrinterDriverPackageA(LPCSTR pszServer, LPCSTR pszInfPath, LPCSTR pszEnvironment, DWORD dwFlags, HWND hwnd, LPSTR pszDestInfPath, PULONG pcchDestInfPath)
     * }
     */
    public static MethodHandle UploadPrinterDriverPackageA$handle() {
        return UploadPrinterDriverPackageA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT UploadPrinterDriverPackageA(LPCSTR pszServer, LPCSTR pszInfPath, LPCSTR pszEnvironment, DWORD dwFlags, HWND hwnd, LPSTR pszDestInfPath, PULONG pcchDestInfPath)
     * }
     */
    public static MemorySegment UploadPrinterDriverPackageA$address() {
        return UploadPrinterDriverPackageA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT UploadPrinterDriverPackageA(LPCSTR pszServer, LPCSTR pszInfPath, LPCSTR pszEnvironment, DWORD dwFlags, HWND hwnd, LPSTR pszDestInfPath, PULONG pcchDestInfPath)
     * }
     */
    public static int UploadPrinterDriverPackageA(MemorySegment pszServer, MemorySegment pszInfPath, MemorySegment pszEnvironment, int dwFlags, MemorySegment hwnd, MemorySegment pszDestInfPath, MemorySegment pcchDestInfPath) {
        var mh$ = UploadPrinterDriverPackageA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UploadPrinterDriverPackageA", pszServer, pszInfPath, pszEnvironment, dwFlags, hwnd, pszDestInfPath, pcchDestInfPath);
            }
            return (int)mh$.invokeExact(pszServer, pszInfPath, pszEnvironment, dwFlags, hwnd, pszDestInfPath, pcchDestInfPath);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UploadPrinterDriverPackageW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("UploadPrinterDriverPackageW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT UploadPrinterDriverPackageW(LPCWSTR pszServer, LPCWSTR pszInfPath, LPCWSTR pszEnvironment, DWORD dwFlags, HWND hwnd, LPWSTR pszDestInfPath, PULONG pcchDestInfPath)
     * }
     */
    public static FunctionDescriptor UploadPrinterDriverPackageW$descriptor() {
        return UploadPrinterDriverPackageW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT UploadPrinterDriverPackageW(LPCWSTR pszServer, LPCWSTR pszInfPath, LPCWSTR pszEnvironment, DWORD dwFlags, HWND hwnd, LPWSTR pszDestInfPath, PULONG pcchDestInfPath)
     * }
     */
    public static MethodHandle UploadPrinterDriverPackageW$handle() {
        return UploadPrinterDriverPackageW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT UploadPrinterDriverPackageW(LPCWSTR pszServer, LPCWSTR pszInfPath, LPCWSTR pszEnvironment, DWORD dwFlags, HWND hwnd, LPWSTR pszDestInfPath, PULONG pcchDestInfPath)
     * }
     */
    public static MemorySegment UploadPrinterDriverPackageW$address() {
        return UploadPrinterDriverPackageW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT UploadPrinterDriverPackageW(LPCWSTR pszServer, LPCWSTR pszInfPath, LPCWSTR pszEnvironment, DWORD dwFlags, HWND hwnd, LPWSTR pszDestInfPath, PULONG pcchDestInfPath)
     * }
     */
    public static int UploadPrinterDriverPackageW(MemorySegment pszServer, MemorySegment pszInfPath, MemorySegment pszEnvironment, int dwFlags, MemorySegment hwnd, MemorySegment pszDestInfPath, MemorySegment pcchDestInfPath) {
        var mh$ = UploadPrinterDriverPackageW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UploadPrinterDriverPackageW", pszServer, pszInfPath, pszEnvironment, dwFlags, hwnd, pszDestInfPath, pcchDestInfPath);
            }
            return (int)mh$.invokeExact(pszServer, pszInfPath, pszEnvironment, dwFlags, hwnd, pszDestInfPath, pcchDestInfPath);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _CORE_PRINTER_DRIVERA {
     *     GUID CoreDriverGUID;
     *     FILETIME ftDriverDate;
     *     DWORDLONG dwlDriverVersion;
     *     CHAR szPackageID[260];
     * } *PCORE_PRINTER_DRIVERA
     * }
     */
    public static final AddressLayout PCORE_PRINTER_DRIVERA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CORE_PRINTER_DRIVERW {
     *     GUID CoreDriverGUID;
     *     FILETIME ftDriverDate;
     *     DWORDLONG dwlDriverVersion;
     *     WCHAR szPackageID[260];
     * } *PCORE_PRINTER_DRIVERW
     * }
     */
    public static final AddressLayout PCORE_PRINTER_DRIVERW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PCORE_PRINTER_DRIVERA PCORE_PRINTER_DRIVER
     * }
     */
    public static final AddressLayout PCORE_PRINTER_DRIVER = wgl_h.C_POINTER;

    private static class GetCorePrinterDriversA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetCorePrinterDriversA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT GetCorePrinterDriversA(LPCSTR pszServer, LPCSTR pszEnvironment, LPCSTR pszzCoreDriverDependencies, DWORD cCorePrinterDrivers, PCORE_PRINTER_DRIVERA pCorePrinterDrivers)
     * }
     */
    public static FunctionDescriptor GetCorePrinterDriversA$descriptor() {
        return GetCorePrinterDriversA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT GetCorePrinterDriversA(LPCSTR pszServer, LPCSTR pszEnvironment, LPCSTR pszzCoreDriverDependencies, DWORD cCorePrinterDrivers, PCORE_PRINTER_DRIVERA pCorePrinterDrivers)
     * }
     */
    public static MethodHandle GetCorePrinterDriversA$handle() {
        return GetCorePrinterDriversA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT GetCorePrinterDriversA(LPCSTR pszServer, LPCSTR pszEnvironment, LPCSTR pszzCoreDriverDependencies, DWORD cCorePrinterDrivers, PCORE_PRINTER_DRIVERA pCorePrinterDrivers)
     * }
     */
    public static MemorySegment GetCorePrinterDriversA$address() {
        return GetCorePrinterDriversA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT GetCorePrinterDriversA(LPCSTR pszServer, LPCSTR pszEnvironment, LPCSTR pszzCoreDriverDependencies, DWORD cCorePrinterDrivers, PCORE_PRINTER_DRIVERA pCorePrinterDrivers)
     * }
     */
    public static int GetCorePrinterDriversA(MemorySegment pszServer, MemorySegment pszEnvironment, MemorySegment pszzCoreDriverDependencies, int cCorePrinterDrivers, MemorySegment pCorePrinterDrivers) {
        var mh$ = GetCorePrinterDriversA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetCorePrinterDriversA", pszServer, pszEnvironment, pszzCoreDriverDependencies, cCorePrinterDrivers, pCorePrinterDrivers);
            }
            return (int)mh$.invokeExact(pszServer, pszEnvironment, pszzCoreDriverDependencies, cCorePrinterDrivers, pCorePrinterDrivers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetCorePrinterDriversW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetCorePrinterDriversW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT GetCorePrinterDriversW(LPCWSTR pszServer, LPCWSTR pszEnvironment, LPCWSTR pszzCoreDriverDependencies, DWORD cCorePrinterDrivers, PCORE_PRINTER_DRIVERW pCorePrinterDrivers)
     * }
     */
    public static FunctionDescriptor GetCorePrinterDriversW$descriptor() {
        return GetCorePrinterDriversW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT GetCorePrinterDriversW(LPCWSTR pszServer, LPCWSTR pszEnvironment, LPCWSTR pszzCoreDriverDependencies, DWORD cCorePrinterDrivers, PCORE_PRINTER_DRIVERW pCorePrinterDrivers)
     * }
     */
    public static MethodHandle GetCorePrinterDriversW$handle() {
        return GetCorePrinterDriversW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT GetCorePrinterDriversW(LPCWSTR pszServer, LPCWSTR pszEnvironment, LPCWSTR pszzCoreDriverDependencies, DWORD cCorePrinterDrivers, PCORE_PRINTER_DRIVERW pCorePrinterDrivers)
     * }
     */
    public static MemorySegment GetCorePrinterDriversW$address() {
        return GetCorePrinterDriversW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT GetCorePrinterDriversW(LPCWSTR pszServer, LPCWSTR pszEnvironment, LPCWSTR pszzCoreDriverDependencies, DWORD cCorePrinterDrivers, PCORE_PRINTER_DRIVERW pCorePrinterDrivers)
     * }
     */
    public static int GetCorePrinterDriversW(MemorySegment pszServer, MemorySegment pszEnvironment, MemorySegment pszzCoreDriverDependencies, int cCorePrinterDrivers, MemorySegment pCorePrinterDrivers) {
        var mh$ = GetCorePrinterDriversW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetCorePrinterDriversW", pszServer, pszEnvironment, pszzCoreDriverDependencies, cCorePrinterDrivers, pCorePrinterDrivers);
            }
            return (int)mh$.invokeExact(pszServer, pszEnvironment, pszzCoreDriverDependencies, cCorePrinterDrivers, pCorePrinterDrivers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CorePrinterDriverInstalledA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            _GUID.layout(),
            _FILETIME.layout(),
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CorePrinterDriverInstalledA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT CorePrinterDriverInstalledA(LPCSTR pszServer, LPCSTR pszEnvironment, GUID CoreDriverGUID, FILETIME ftDriverDate, DWORDLONG dwlDriverVersion, BOOL *pbDriverInstalled)
     * }
     */
    public static FunctionDescriptor CorePrinterDriverInstalledA$descriptor() {
        return CorePrinterDriverInstalledA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT CorePrinterDriverInstalledA(LPCSTR pszServer, LPCSTR pszEnvironment, GUID CoreDriverGUID, FILETIME ftDriverDate, DWORDLONG dwlDriverVersion, BOOL *pbDriverInstalled)
     * }
     */
    public static MethodHandle CorePrinterDriverInstalledA$handle() {
        return CorePrinterDriverInstalledA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT CorePrinterDriverInstalledA(LPCSTR pszServer, LPCSTR pszEnvironment, GUID CoreDriverGUID, FILETIME ftDriverDate, DWORDLONG dwlDriverVersion, BOOL *pbDriverInstalled)
     * }
     */
    public static MemorySegment CorePrinterDriverInstalledA$address() {
        return CorePrinterDriverInstalledA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT CorePrinterDriverInstalledA(LPCSTR pszServer, LPCSTR pszEnvironment, GUID CoreDriverGUID, FILETIME ftDriverDate, DWORDLONG dwlDriverVersion, BOOL *pbDriverInstalled)
     * }
     */
    public static int CorePrinterDriverInstalledA(MemorySegment pszServer, MemorySegment pszEnvironment, MemorySegment CoreDriverGUID, MemorySegment ftDriverDate, long dwlDriverVersion, MemorySegment pbDriverInstalled) {
        var mh$ = CorePrinterDriverInstalledA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CorePrinterDriverInstalledA", pszServer, pszEnvironment, CoreDriverGUID, ftDriverDate, dwlDriverVersion, pbDriverInstalled);
            }
            return (int)mh$.invokeExact(pszServer, pszEnvironment, CoreDriverGUID, ftDriverDate, dwlDriverVersion, pbDriverInstalled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CorePrinterDriverInstalledW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            _GUID.layout(),
            _FILETIME.layout(),
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CorePrinterDriverInstalledW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT CorePrinterDriverInstalledW(LPCWSTR pszServer, LPCWSTR pszEnvironment, GUID CoreDriverGUID, FILETIME ftDriverDate, DWORDLONG dwlDriverVersion, BOOL *pbDriverInstalled)
     * }
     */
    public static FunctionDescriptor CorePrinterDriverInstalledW$descriptor() {
        return CorePrinterDriverInstalledW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT CorePrinterDriverInstalledW(LPCWSTR pszServer, LPCWSTR pszEnvironment, GUID CoreDriverGUID, FILETIME ftDriverDate, DWORDLONG dwlDriverVersion, BOOL *pbDriverInstalled)
     * }
     */
    public static MethodHandle CorePrinterDriverInstalledW$handle() {
        return CorePrinterDriverInstalledW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT CorePrinterDriverInstalledW(LPCWSTR pszServer, LPCWSTR pszEnvironment, GUID CoreDriverGUID, FILETIME ftDriverDate, DWORDLONG dwlDriverVersion, BOOL *pbDriverInstalled)
     * }
     */
    public static MemorySegment CorePrinterDriverInstalledW$address() {
        return CorePrinterDriverInstalledW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT CorePrinterDriverInstalledW(LPCWSTR pszServer, LPCWSTR pszEnvironment, GUID CoreDriverGUID, FILETIME ftDriverDate, DWORDLONG dwlDriverVersion, BOOL *pbDriverInstalled)
     * }
     */
    public static int CorePrinterDriverInstalledW(MemorySegment pszServer, MemorySegment pszEnvironment, MemorySegment CoreDriverGUID, MemorySegment ftDriverDate, long dwlDriverVersion, MemorySegment pbDriverInstalled) {
        var mh$ = CorePrinterDriverInstalledW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CorePrinterDriverInstalledW", pszServer, pszEnvironment, CoreDriverGUID, ftDriverDate, dwlDriverVersion, pbDriverInstalled);
            }
            return (int)mh$.invokeExact(pszServer, pszEnvironment, CoreDriverGUID, ftDriverDate, dwlDriverVersion, pbDriverInstalled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetPrinterDriverPackagePathA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetPrinterDriverPackagePathA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT GetPrinterDriverPackagePathA(LPCSTR pszServer, LPCSTR pszEnvironment, LPCSTR pszLanguage, LPCSTR pszPackageID, LPSTR pszDriverPackageCab, DWORD cchDriverPackageCab, LPDWORD pcchRequiredSize)
     * }
     */
    public static FunctionDescriptor GetPrinterDriverPackagePathA$descriptor() {
        return GetPrinterDriverPackagePathA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT GetPrinterDriverPackagePathA(LPCSTR pszServer, LPCSTR pszEnvironment, LPCSTR pszLanguage, LPCSTR pszPackageID, LPSTR pszDriverPackageCab, DWORD cchDriverPackageCab, LPDWORD pcchRequiredSize)
     * }
     */
    public static MethodHandle GetPrinterDriverPackagePathA$handle() {
        return GetPrinterDriverPackagePathA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT GetPrinterDriverPackagePathA(LPCSTR pszServer, LPCSTR pszEnvironment, LPCSTR pszLanguage, LPCSTR pszPackageID, LPSTR pszDriverPackageCab, DWORD cchDriverPackageCab, LPDWORD pcchRequiredSize)
     * }
     */
    public static MemorySegment GetPrinterDriverPackagePathA$address() {
        return GetPrinterDriverPackagePathA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT GetPrinterDriverPackagePathA(LPCSTR pszServer, LPCSTR pszEnvironment, LPCSTR pszLanguage, LPCSTR pszPackageID, LPSTR pszDriverPackageCab, DWORD cchDriverPackageCab, LPDWORD pcchRequiredSize)
     * }
     */
    public static int GetPrinterDriverPackagePathA(MemorySegment pszServer, MemorySegment pszEnvironment, MemorySegment pszLanguage, MemorySegment pszPackageID, MemorySegment pszDriverPackageCab, int cchDriverPackageCab, MemorySegment pcchRequiredSize) {
        var mh$ = GetPrinterDriverPackagePathA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetPrinterDriverPackagePathA", pszServer, pszEnvironment, pszLanguage, pszPackageID, pszDriverPackageCab, cchDriverPackageCab, pcchRequiredSize);
            }
            return (int)mh$.invokeExact(pszServer, pszEnvironment, pszLanguage, pszPackageID, pszDriverPackageCab, cchDriverPackageCab, pcchRequiredSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetPrinterDriverPackagePathW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetPrinterDriverPackagePathW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT GetPrinterDriverPackagePathW(LPCWSTR pszServer, LPCWSTR pszEnvironment, LPCWSTR pszLanguage, LPCWSTR pszPackageID, LPWSTR pszDriverPackageCab, DWORD cchDriverPackageCab, LPDWORD pcchRequiredSize)
     * }
     */
    public static FunctionDescriptor GetPrinterDriverPackagePathW$descriptor() {
        return GetPrinterDriverPackagePathW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT GetPrinterDriverPackagePathW(LPCWSTR pszServer, LPCWSTR pszEnvironment, LPCWSTR pszLanguage, LPCWSTR pszPackageID, LPWSTR pszDriverPackageCab, DWORD cchDriverPackageCab, LPDWORD pcchRequiredSize)
     * }
     */
    public static MethodHandle GetPrinterDriverPackagePathW$handle() {
        return GetPrinterDriverPackagePathW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT GetPrinterDriverPackagePathW(LPCWSTR pszServer, LPCWSTR pszEnvironment, LPCWSTR pszLanguage, LPCWSTR pszPackageID, LPWSTR pszDriverPackageCab, DWORD cchDriverPackageCab, LPDWORD pcchRequiredSize)
     * }
     */
    public static MemorySegment GetPrinterDriverPackagePathW$address() {
        return GetPrinterDriverPackagePathW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT GetPrinterDriverPackagePathW(LPCWSTR pszServer, LPCWSTR pszEnvironment, LPCWSTR pszLanguage, LPCWSTR pszPackageID, LPWSTR pszDriverPackageCab, DWORD cchDriverPackageCab, LPDWORD pcchRequiredSize)
     * }
     */
    public static int GetPrinterDriverPackagePathW(MemorySegment pszServer, MemorySegment pszEnvironment, MemorySegment pszLanguage, MemorySegment pszPackageID, MemorySegment pszDriverPackageCab, int cchDriverPackageCab, MemorySegment pcchRequiredSize) {
        var mh$ = GetPrinterDriverPackagePathW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetPrinterDriverPackagePathW", pszServer, pszEnvironment, pszLanguage, pszPackageID, pszDriverPackageCab, cchDriverPackageCab, pcchRequiredSize);
            }
            return (int)mh$.invokeExact(pszServer, pszEnvironment, pszLanguage, pszPackageID, pszDriverPackageCab, cchDriverPackageCab, pcchRequiredSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrinterDriverPackageA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DeletePrinterDriverPackageA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT DeletePrinterDriverPackageA(LPCSTR pszServer, LPCSTR pszInfPath, LPCSTR pszEnvironment)
     * }
     */
    public static FunctionDescriptor DeletePrinterDriverPackageA$descriptor() {
        return DeletePrinterDriverPackageA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT DeletePrinterDriverPackageA(LPCSTR pszServer, LPCSTR pszInfPath, LPCSTR pszEnvironment)
     * }
     */
    public static MethodHandle DeletePrinterDriverPackageA$handle() {
        return DeletePrinterDriverPackageA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT DeletePrinterDriverPackageA(LPCSTR pszServer, LPCSTR pszInfPath, LPCSTR pszEnvironment)
     * }
     */
    public static MemorySegment DeletePrinterDriverPackageA$address() {
        return DeletePrinterDriverPackageA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT DeletePrinterDriverPackageA(LPCSTR pszServer, LPCSTR pszInfPath, LPCSTR pszEnvironment)
     * }
     */
    public static int DeletePrinterDriverPackageA(MemorySegment pszServer, MemorySegment pszInfPath, MemorySegment pszEnvironment) {
        var mh$ = DeletePrinterDriverPackageA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrinterDriverPackageA", pszServer, pszInfPath, pszEnvironment);
            }
            return (int)mh$.invokeExact(pszServer, pszInfPath, pszEnvironment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrinterDriverPackageW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DeletePrinterDriverPackageW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT DeletePrinterDriverPackageW(LPCWSTR pszServer, LPCWSTR pszInfPath, LPCWSTR pszEnvironment)
     * }
     */
    public static FunctionDescriptor DeletePrinterDriverPackageW$descriptor() {
        return DeletePrinterDriverPackageW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT DeletePrinterDriverPackageW(LPCWSTR pszServer, LPCWSTR pszInfPath, LPCWSTR pszEnvironment)
     * }
     */
    public static MethodHandle DeletePrinterDriverPackageW$handle() {
        return DeletePrinterDriverPackageW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT DeletePrinterDriverPackageW(LPCWSTR pszServer, LPCWSTR pszInfPath, LPCWSTR pszEnvironment)
     * }
     */
    public static MemorySegment DeletePrinterDriverPackageW$address() {
        return DeletePrinterDriverPackageW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT DeletePrinterDriverPackageW(LPCWSTR pszServer, LPCWSTR pszInfPath, LPCWSTR pszEnvironment)
     * }
     */
    public static int DeletePrinterDriverPackageW(MemorySegment pszServer, MemorySegment pszInfPath, MemorySegment pszEnvironment) {
        var mh$ = DeletePrinterDriverPackageW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrinterDriverPackageW", pszServer, pszInfPath, pszEnvironment);
            }
            return (int)mh$.invokeExact(pszServer, pszInfPath, pszEnvironment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int kPropertyTypeString = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kPropertyTypeString = 1
     * }
     */
    public static int kPropertyTypeString() {
        return kPropertyTypeString;
    }
    private static final int kPropertyTypeInt32 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kPropertyTypeInt32 = 2
     * }
     */
    public static int kPropertyTypeInt32() {
        return kPropertyTypeInt32;
    }
    private static final int kPropertyTypeInt64 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kPropertyTypeInt64 = 3
     * }
     */
    public static int kPropertyTypeInt64() {
        return kPropertyTypeInt64;
    }
    private static final int kPropertyTypeByte = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kPropertyTypeByte = 4
     * }
     */
    public static int kPropertyTypeByte() {
        return kPropertyTypeByte;
    }
    private static final int kPropertyTypeTime = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kPropertyTypeTime = 5
     * }
     */
    public static int kPropertyTypeTime() {
        return kPropertyTypeTime;
    }
    private static final int kPropertyTypeDevMode = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kPropertyTypeDevMode = 6
     * }
     */
    public static int kPropertyTypeDevMode() {
        return kPropertyTypeDevMode;
    }
    private static final int kPropertyTypeSD = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kPropertyTypeSD = 7
     * }
     */
    public static int kPropertyTypeSD() {
        return kPropertyTypeSD;
    }
    private static final int kPropertyTypeNotificationReply = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kPropertyTypeNotificationReply = 8
     * }
     */
    public static int kPropertyTypeNotificationReply() {
        return kPropertyTypeNotificationReply;
    }
    private static final int kPropertyTypeNotificationOptions = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kPropertyTypeNotificationOptions = 9
     * }
     */
    public static int kPropertyTypeNotificationOptions() {
        return kPropertyTypeNotificationOptions;
    }
    private static final int kPropertyTypeBuffer = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kPropertyTypeBuffer = 10
     * }
     */
    public static int kPropertyTypeBuffer() {
        return kPropertyTypeBuffer;
    }
    private static final int kAddingDocumentSequence = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kAddingDocumentSequence = 0
     * }
     */
    public static int kAddingDocumentSequence() {
        return kAddingDocumentSequence;
    }
    private static final int kDocumentSequenceAdded = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kDocumentSequenceAdded = 1
     * }
     */
    public static int kDocumentSequenceAdded() {
        return kDocumentSequenceAdded;
    }
    private static final int kAddingFixedDocument = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kAddingFixedDocument = 2
     * }
     */
    public static int kAddingFixedDocument() {
        return kAddingFixedDocument;
    }
    private static final int kFixedDocumentAdded = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kFixedDocumentAdded = 3
     * }
     */
    public static int kFixedDocumentAdded() {
        return kFixedDocumentAdded;
    }
    private static final int kAddingFixedPage = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kAddingFixedPage = 4
     * }
     */
    public static int kAddingFixedPage() {
        return kAddingFixedPage;
    }
    private static final int kFixedPageAdded = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kFixedPageAdded = 5
     * }
     */
    public static int kFixedPageAdded() {
        return kFixedPageAdded;
    }
    private static final int kResourceAdded = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kResourceAdded = 6
     * }
     */
    public static int kResourceAdded() {
        return kResourceAdded;
    }
    private static final int kFontAdded = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kFontAdded = 7
     * }
     */
    public static int kFontAdded() {
        return kFontAdded;
    }
    private static final int kImageAdded = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kImageAdded = 8
     * }
     */
    public static int kImageAdded() {
        return kImageAdded;
    }
    private static final int kXpsDocumentCommitted = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kXpsDocumentCommitted = 9
     * }
     */
    public static int kXpsDocumentCommitted() {
        return kXpsDocumentCommitted;
    }
    private static final int kJobProduction = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kJobProduction = 1
     * }
     */
    public static int kJobProduction() {
        return kJobProduction;
    }
    private static final int kJobConsumption = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kJobConsumption = 2
     * }
     */
    public static int kJobConsumption() {
        return kJobConsumption;
    }

    private static class ReportJobProcessingProgress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_INT,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ReportJobProcessingProgress");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ReportJobProcessingProgress(HANDLE printerHandle, ULONG jobId, EPrintXPSJobOperation jobOperation, EPrintXPSJobProgress jobProgress)
     * }
     */
    public static FunctionDescriptor ReportJobProcessingProgress$descriptor() {
        return ReportJobProcessingProgress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ReportJobProcessingProgress(HANDLE printerHandle, ULONG jobId, EPrintXPSJobOperation jobOperation, EPrintXPSJobProgress jobProgress)
     * }
     */
    public static MethodHandle ReportJobProcessingProgress$handle() {
        return ReportJobProcessingProgress.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ReportJobProcessingProgress(HANDLE printerHandle, ULONG jobId, EPrintXPSJobOperation jobOperation, EPrintXPSJobProgress jobProgress)
     * }
     */
    public static MemorySegment ReportJobProcessingProgress$address() {
        return ReportJobProcessingProgress.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ReportJobProcessingProgress(HANDLE printerHandle, ULONG jobId, EPrintXPSJobOperation jobOperation, EPrintXPSJobProgress jobProgress)
     * }
     */
    public static int ReportJobProcessingProgress(MemorySegment printerHandle, int jobId, int jobOperation, int jobProgress) {
        var mh$ = ReportJobProcessingProgress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ReportJobProcessingProgress", printerHandle, jobId, jobOperation, jobProgress);
            }
            return (int)mh$.invokeExact(printerHandle, jobId, jobOperation, jobProgress);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetPrinterDriver2A {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetPrinterDriver2A");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetPrinterDriver2A(HWND hWnd, HANDLE hPrinter, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor GetPrinterDriver2A$descriptor() {
        return GetPrinterDriver2A.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetPrinterDriver2A(HWND hWnd, HANDLE hPrinter, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle GetPrinterDriver2A$handle() {
        return GetPrinterDriver2A.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetPrinterDriver2A(HWND hWnd, HANDLE hPrinter, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment GetPrinterDriver2A$address() {
        return GetPrinterDriver2A.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetPrinterDriver2A(HWND hWnd, HANDLE hPrinter, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static int GetPrinterDriver2A(MemorySegment hWnd, MemorySegment hPrinter, MemorySegment pEnvironment, int Level, MemorySegment pDriverInfo, int cbBuf, MemorySegment pcbNeeded) {
        var mh$ = GetPrinterDriver2A.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetPrinterDriver2A", hWnd, hPrinter, pEnvironment, Level, pDriverInfo, cbBuf, pcbNeeded);
            }
            return (int)mh$.invokeExact(hWnd, hPrinter, pEnvironment, Level, pDriverInfo, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetPrinterDriver2W {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetPrinterDriver2W");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetPrinterDriver2W(HWND hWnd, HANDLE hPrinter, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor GetPrinterDriver2W$descriptor() {
        return GetPrinterDriver2W.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetPrinterDriver2W(HWND hWnd, HANDLE hPrinter, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle GetPrinterDriver2W$handle() {
        return GetPrinterDriver2W.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetPrinterDriver2W(HWND hWnd, HANDLE hPrinter, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment GetPrinterDriver2W$address() {
        return GetPrinterDriver2W.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetPrinterDriver2W(HWND hWnd, HANDLE hPrinter, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static int GetPrinterDriver2W(MemorySegment hWnd, MemorySegment hPrinter, MemorySegment pEnvironment, int Level, MemorySegment pDriverInfo, int cbBuf, MemorySegment pcbNeeded) {
        var mh$ = GetPrinterDriver2W.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetPrinterDriver2W", hWnd, hPrinter, pEnvironment, Level, pDriverInfo, cbBuf, pcbNeeded);
            }
            return (int)mh$.invokeExact(hWnd, hPrinter, pEnvironment, Level, pDriverInfo, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int PRINT_EXECUTION_CONTEXT_APPLICATION = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PRINT_EXECUTION_CONTEXT_APPLICATION = 0
     * }
     */
    public static int PRINT_EXECUTION_CONTEXT_APPLICATION() {
        return PRINT_EXECUTION_CONTEXT_APPLICATION;
    }
    private static final int PRINT_EXECUTION_CONTEXT_SPOOLER_SERVICE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PRINT_EXECUTION_CONTEXT_SPOOLER_SERVICE = 1
     * }
     */
    public static int PRINT_EXECUTION_CONTEXT_SPOOLER_SERVICE() {
        return PRINT_EXECUTION_CONTEXT_SPOOLER_SERVICE;
    }
    private static final int PRINT_EXECUTION_CONTEXT_SPOOLER_ISOLATION_HOST = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PRINT_EXECUTION_CONTEXT_SPOOLER_ISOLATION_HOST = 2
     * }
     */
    public static int PRINT_EXECUTION_CONTEXT_SPOOLER_ISOLATION_HOST() {
        return PRINT_EXECUTION_CONTEXT_SPOOLER_ISOLATION_HOST;
    }
    private static final int PRINT_EXECUTION_CONTEXT_FILTER_PIPELINE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PRINT_EXECUTION_CONTEXT_FILTER_PIPELINE = 3
     * }
     */
    public static int PRINT_EXECUTION_CONTEXT_FILTER_PIPELINE() {
        return PRINT_EXECUTION_CONTEXT_FILTER_PIPELINE;
    }
    private static final int PRINT_EXECUTION_CONTEXT_WOW64 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PRINT_EXECUTION_CONTEXT_WOW64 = 4
     * }
     */
    public static int PRINT_EXECUTION_CONTEXT_WOW64() {
        return PRINT_EXECUTION_CONTEXT_WOW64;
    }

    private static class GetPrintExecutionData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetPrintExecutionData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetPrintExecutionData(PRINT_EXECUTION_DATA *pData)
     * }
     */
    public static FunctionDescriptor GetPrintExecutionData$descriptor() {
        return GetPrintExecutionData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetPrintExecutionData(PRINT_EXECUTION_DATA *pData)
     * }
     */
    public static MethodHandle GetPrintExecutionData$handle() {
        return GetPrintExecutionData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetPrintExecutionData(PRINT_EXECUTION_DATA *pData)
     * }
     */
    public static MemorySegment GetPrintExecutionData$address() {
        return GetPrintExecutionData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetPrintExecutionData(PRINT_EXECUTION_DATA *pData)
     * }
     */
    public static int GetPrintExecutionData(MemorySegment pData) {
        var mh$ = GetPrintExecutionData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetPrintExecutionData", pData);
            }
            return (int)mh$.invokeExact(pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetJobNamedPropertyValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetJobNamedPropertyValue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD GetJobNamedPropertyValue(HANDLE hPrinter, DWORD JobId, PCWSTR pszName, PrintPropertyValue *pValue)
     * }
     */
    public static FunctionDescriptor GetJobNamedPropertyValue$descriptor() {
        return GetJobNamedPropertyValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD GetJobNamedPropertyValue(HANDLE hPrinter, DWORD JobId, PCWSTR pszName, PrintPropertyValue *pValue)
     * }
     */
    public static MethodHandle GetJobNamedPropertyValue$handle() {
        return GetJobNamedPropertyValue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD GetJobNamedPropertyValue(HANDLE hPrinter, DWORD JobId, PCWSTR pszName, PrintPropertyValue *pValue)
     * }
     */
    public static MemorySegment GetJobNamedPropertyValue$address() {
        return GetJobNamedPropertyValue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD GetJobNamedPropertyValue(HANDLE hPrinter, DWORD JobId, PCWSTR pszName, PrintPropertyValue *pValue)
     * }
     */
    public static int GetJobNamedPropertyValue(MemorySegment hPrinter, int JobId, MemorySegment pszName, MemorySegment pValue) {
        var mh$ = GetJobNamedPropertyValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetJobNamedPropertyValue", hPrinter, JobId, pszName, pValue);
            }
            return (int)mh$.invokeExact(hPrinter, JobId, pszName, pValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FreePrintPropertyValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("FreePrintPropertyValue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void FreePrintPropertyValue(PrintPropertyValue *pValue)
     * }
     */
    public static FunctionDescriptor FreePrintPropertyValue$descriptor() {
        return FreePrintPropertyValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void FreePrintPropertyValue(PrintPropertyValue *pValue)
     * }
     */
    public static MethodHandle FreePrintPropertyValue$handle() {
        return FreePrintPropertyValue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void FreePrintPropertyValue(PrintPropertyValue *pValue)
     * }
     */
    public static MemorySegment FreePrintPropertyValue$address() {
        return FreePrintPropertyValue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void FreePrintPropertyValue(PrintPropertyValue *pValue)
     * }
     */
    public static void FreePrintPropertyValue(MemorySegment pValue) {
        var mh$ = FreePrintPropertyValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FreePrintPropertyValue", pValue);
            }
            mh$.invokeExact(pValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FreePrintNamedPropertyArray {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("FreePrintNamedPropertyArray");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void FreePrintNamedPropertyArray(DWORD cProperties, PrintNamedProperty **ppProperties)
     * }
     */
    public static FunctionDescriptor FreePrintNamedPropertyArray$descriptor() {
        return FreePrintNamedPropertyArray.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void FreePrintNamedPropertyArray(DWORD cProperties, PrintNamedProperty **ppProperties)
     * }
     */
    public static MethodHandle FreePrintNamedPropertyArray$handle() {
        return FreePrintNamedPropertyArray.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void FreePrintNamedPropertyArray(DWORD cProperties, PrintNamedProperty **ppProperties)
     * }
     */
    public static MemorySegment FreePrintNamedPropertyArray$address() {
        return FreePrintNamedPropertyArray.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void FreePrintNamedPropertyArray(DWORD cProperties, PrintNamedProperty **ppProperties)
     * }
     */
    public static void FreePrintNamedPropertyArray(int cProperties, MemorySegment ppProperties) {
        var mh$ = FreePrintNamedPropertyArray.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FreePrintNamedPropertyArray", cProperties, ppProperties);
            }
            mh$.invokeExact(cProperties, ppProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetJobNamedProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SetJobNamedProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD SetJobNamedProperty(HANDLE hPrinter, DWORD JobId, const PrintNamedProperty *pProperty)
     * }
     */
    public static FunctionDescriptor SetJobNamedProperty$descriptor() {
        return SetJobNamedProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD SetJobNamedProperty(HANDLE hPrinter, DWORD JobId, const PrintNamedProperty *pProperty)
     * }
     */
    public static MethodHandle SetJobNamedProperty$handle() {
        return SetJobNamedProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD SetJobNamedProperty(HANDLE hPrinter, DWORD JobId, const PrintNamedProperty *pProperty)
     * }
     */
    public static MemorySegment SetJobNamedProperty$address() {
        return SetJobNamedProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD SetJobNamedProperty(HANDLE hPrinter, DWORD JobId, const PrintNamedProperty *pProperty)
     * }
     */
    public static int SetJobNamedProperty(MemorySegment hPrinter, int JobId, MemorySegment pProperty) {
        var mh$ = SetJobNamedProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetJobNamedProperty", hPrinter, JobId, pProperty);
            }
            return (int)mh$.invokeExact(hPrinter, JobId, pProperty);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeleteJobNamedProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DeleteJobNamedProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD DeleteJobNamedProperty(HANDLE hPrinter, DWORD JobId, PCWSTR pszName)
     * }
     */
    public static FunctionDescriptor DeleteJobNamedProperty$descriptor() {
        return DeleteJobNamedProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD DeleteJobNamedProperty(HANDLE hPrinter, DWORD JobId, PCWSTR pszName)
     * }
     */
    public static MethodHandle DeleteJobNamedProperty$handle() {
        return DeleteJobNamedProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD DeleteJobNamedProperty(HANDLE hPrinter, DWORD JobId, PCWSTR pszName)
     * }
     */
    public static MemorySegment DeleteJobNamedProperty$address() {
        return DeleteJobNamedProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD DeleteJobNamedProperty(HANDLE hPrinter, DWORD JobId, PCWSTR pszName)
     * }
     */
    public static int DeleteJobNamedProperty(MemorySegment hPrinter, int JobId, MemorySegment pszName) {
        var mh$ = DeleteJobNamedProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeleteJobNamedProperty", hPrinter, JobId, pszName);
            }
            return (int)mh$.invokeExact(hPrinter, JobId, pszName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumJobNamedProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("EnumJobNamedProperties");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD EnumJobNamedProperties(HANDLE hPrinter, DWORD JobId, DWORD *pcProperties, PrintNamedProperty **ppProperties)
     * }
     */
    public static FunctionDescriptor EnumJobNamedProperties$descriptor() {
        return EnumJobNamedProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD EnumJobNamedProperties(HANDLE hPrinter, DWORD JobId, DWORD *pcProperties, PrintNamedProperty **ppProperties)
     * }
     */
    public static MethodHandle EnumJobNamedProperties$handle() {
        return EnumJobNamedProperties.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD EnumJobNamedProperties(HANDLE hPrinter, DWORD JobId, DWORD *pcProperties, PrintNamedProperty **ppProperties)
     * }
     */
    public static MemorySegment EnumJobNamedProperties$address() {
        return EnumJobNamedProperties.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD EnumJobNamedProperties(HANDLE hPrinter, DWORD JobId, DWORD *pcProperties, PrintNamedProperty **ppProperties)
     * }
     */
    public static int EnumJobNamedProperties(MemorySegment hPrinter, int JobId, MemorySegment pcProperties, MemorySegment ppProperties) {
        var mh$ = EnumJobNamedProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumJobNamedProperties", hPrinter, JobId, pcProperties, ppProperties);
            }
            return (int)mh$.invokeExact(hPrinter, JobId, pcProperties, ppProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetPrintOutputInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetPrintOutputInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT GetPrintOutputInfo(HWND hWnd, PCWSTR pszPrinter, HANDLE *phFile, PWSTR *ppszOutputFile)
     * }
     */
    public static FunctionDescriptor GetPrintOutputInfo$descriptor() {
        return GetPrintOutputInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT GetPrintOutputInfo(HWND hWnd, PCWSTR pszPrinter, HANDLE *phFile, PWSTR *ppszOutputFile)
     * }
     */
    public static MethodHandle GetPrintOutputInfo$handle() {
        return GetPrintOutputInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT GetPrintOutputInfo(HWND hWnd, PCWSTR pszPrinter, HANDLE *phFile, PWSTR *ppszOutputFile)
     * }
     */
    public static MemorySegment GetPrintOutputInfo$address() {
        return GetPrintOutputInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT GetPrintOutputInfo(HWND hWnd, PCWSTR pszPrinter, HANDLE *phFile, PWSTR *ppszOutputFile)
     * }
     */
    public static int GetPrintOutputInfo(MemorySegment hWnd, MemorySegment pszPrinter, MemorySegment phFile, MemorySegment ppszOutputFile) {
        var mh$ = GetPrintOutputInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetPrintOutputInfo", hWnd, pszPrinter, phFile, ppszOutputFile);
            }
            return (int)mh$.invokeExact(hWnd, pszPrinter, phFile, ppszOutputFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _calloc_base {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_calloc_base");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_calloc_base(size_t _Count, size_t _Size)
     * }
     */
    public static FunctionDescriptor _calloc_base$descriptor() {
        return _calloc_base.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_calloc_base(size_t _Count, size_t _Size)
     * }
     */
    public static MethodHandle _calloc_base$handle() {
        return _calloc_base.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_calloc_base(size_t _Count, size_t _Size)
     * }
     */
    public static MemorySegment _calloc_base$address() {
        return _calloc_base.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_calloc_base(size_t _Count, size_t _Size)
     * }
     */
    public static MemorySegment _calloc_base(long _Count, long _Size) {
        var mh$ = _calloc_base.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_calloc_base", _Count, _Size);
            }
            return (MemorySegment)mh$.invokeExact(_Count, _Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class calloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("calloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *calloc(size_t _Count, size_t _Size)
     * }
     */
    public static FunctionDescriptor calloc$descriptor() {
        return calloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *calloc(size_t _Count, size_t _Size)
     * }
     */
    public static MethodHandle calloc$handle() {
        return calloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *calloc(size_t _Count, size_t _Size)
     * }
     */
    public static MemorySegment calloc$address() {
        return calloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *calloc(size_t _Count, size_t _Size)
     * }
     */
    public static MemorySegment calloc(long _Count, long _Size) {
        var mh$ = calloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("calloc", _Count, _Size);
            }
            return (MemorySegment)mh$.invokeExact(_Count, _Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _callnewh {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_callnewh");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _callnewh(size_t _Size)
     * }
     */
    public static FunctionDescriptor _callnewh$descriptor() {
        return _callnewh.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _callnewh(size_t _Size)
     * }
     */
    public static MethodHandle _callnewh$handle() {
        return _callnewh.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _callnewh(size_t _Size)
     * }
     */
    public static MemorySegment _callnewh$address() {
        return _callnewh.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _callnewh(size_t _Size)
     * }
     */
    public static int _callnewh(long _Size) {
        var mh$ = _callnewh.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_callnewh", _Size);
            }
            return (int)mh$.invokeExact(_Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _expand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_expand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_expand(void *_Block, size_t _Size)
     * }
     */
    public static FunctionDescriptor _expand$descriptor() {
        return _expand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_expand(void *_Block, size_t _Size)
     * }
     */
    public static MethodHandle _expand$handle() {
        return _expand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_expand(void *_Block, size_t _Size)
     * }
     */
    public static MemorySegment _expand$address() {
        return _expand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_expand(void *_Block, size_t _Size)
     * }
     */
    public static MemorySegment _expand(MemorySegment _Block, long _Size) {
        var mh$ = _expand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_expand", _Block, _Size);
            }
            return (MemorySegment)mh$.invokeExact(_Block, _Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _free_base {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_free_base");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _free_base(void *_Block)
     * }
     */
    public static FunctionDescriptor _free_base$descriptor() {
        return _free_base.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _free_base(void *_Block)
     * }
     */
    public static MethodHandle _free_base$handle() {
        return _free_base.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _free_base(void *_Block)
     * }
     */
    public static MemorySegment _free_base$address() {
        return _free_base.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _free_base(void *_Block)
     * }
     */
    public static void _free_base(MemorySegment _Block) {
        var mh$ = _free_base.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_free_base", _Block);
            }
            mh$.invokeExact(_Block);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void free(void *_Block)
     * }
     */
    public static FunctionDescriptor free$descriptor() {
        return free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void free(void *_Block)
     * }
     */
    public static MethodHandle free$handle() {
        return free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void free(void *_Block)
     * }
     */
    public static MemorySegment free$address() {
        return free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void free(void *_Block)
     * }
     */
    public static void free(MemorySegment _Block) {
        var mh$ = free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("free", _Block);
            }
            mh$.invokeExact(_Block);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _malloc_base {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_malloc_base");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_malloc_base(size_t _Size)
     * }
     */
    public static FunctionDescriptor _malloc_base$descriptor() {
        return _malloc_base.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_malloc_base(size_t _Size)
     * }
     */
    public static MethodHandle _malloc_base$handle() {
        return _malloc_base.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_malloc_base(size_t _Size)
     * }
     */
    public static MemorySegment _malloc_base$address() {
        return _malloc_base.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_malloc_base(size_t _Size)
     * }
     */
    public static MemorySegment _malloc_base(long _Size) {
        var mh$ = _malloc_base.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_malloc_base", _Size);
            }
            return (MemorySegment)mh$.invokeExact(_Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class malloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("malloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *malloc(size_t _Size)
     * }
     */
    public static FunctionDescriptor malloc$descriptor() {
        return malloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *malloc(size_t _Size)
     * }
     */
    public static MethodHandle malloc$handle() {
        return malloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *malloc(size_t _Size)
     * }
     */
    public static MemorySegment malloc$address() {
        return malloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *malloc(size_t _Size)
     * }
     */
    public static MemorySegment malloc(long _Size) {
        var mh$ = malloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("malloc", _Size);
            }
            return (MemorySegment)mh$.invokeExact(_Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _msize_base {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_msize_base");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t _msize_base(void *_Block)
     * }
     */
    public static FunctionDescriptor _msize_base$descriptor() {
        return _msize_base.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t _msize_base(void *_Block)
     * }
     */
    public static MethodHandle _msize_base$handle() {
        return _msize_base.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t _msize_base(void *_Block)
     * }
     */
    public static MemorySegment _msize_base$address() {
        return _msize_base.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t _msize_base(void *_Block)
     * }
     */
    public static long _msize_base(MemorySegment _Block) {
        var mh$ = _msize_base.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_msize_base", _Block);
            }
            return (long)mh$.invokeExact(_Block);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _msize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_msize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t _msize(void *_Block)
     * }
     */
    public static FunctionDescriptor _msize$descriptor() {
        return _msize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t _msize(void *_Block)
     * }
     */
    public static MethodHandle _msize$handle() {
        return _msize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t _msize(void *_Block)
     * }
     */
    public static MemorySegment _msize$address() {
        return _msize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t _msize(void *_Block)
     * }
     */
    public static long _msize(MemorySegment _Block) {
        var mh$ = _msize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_msize", _Block);
            }
            return (long)mh$.invokeExact(_Block);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _realloc_base {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_realloc_base");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_realloc_base(void *_Block, size_t _Size)
     * }
     */
    public static FunctionDescriptor _realloc_base$descriptor() {
        return _realloc_base.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_realloc_base(void *_Block, size_t _Size)
     * }
     */
    public static MethodHandle _realloc_base$handle() {
        return _realloc_base.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_realloc_base(void *_Block, size_t _Size)
     * }
     */
    public static MemorySegment _realloc_base$address() {
        return _realloc_base.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_realloc_base(void *_Block, size_t _Size)
     * }
     */
    public static MemorySegment _realloc_base(MemorySegment _Block, long _Size) {
        var mh$ = _realloc_base.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_realloc_base", _Block, _Size);
            }
            return (MemorySegment)mh$.invokeExact(_Block, _Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class realloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("realloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *realloc(void *_Block, size_t _Size)
     * }
     */
    public static FunctionDescriptor realloc$descriptor() {
        return realloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *realloc(void *_Block, size_t _Size)
     * }
     */
    public static MethodHandle realloc$handle() {
        return realloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *realloc(void *_Block, size_t _Size)
     * }
     */
    public static MemorySegment realloc$address() {
        return realloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *realloc(void *_Block, size_t _Size)
     * }
     */
    public static MemorySegment realloc(MemorySegment _Block, long _Size) {
        var mh$ = realloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("realloc", _Block, _Size);
            }
            return (MemorySegment)mh$.invokeExact(_Block, _Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _recalloc_base {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_recalloc_base");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_recalloc_base(void *_Block, size_t _Count, size_t _Size)
     * }
     */
    public static FunctionDescriptor _recalloc_base$descriptor() {
        return _recalloc_base.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_recalloc_base(void *_Block, size_t _Count, size_t _Size)
     * }
     */
    public static MethodHandle _recalloc_base$handle() {
        return _recalloc_base.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_recalloc_base(void *_Block, size_t _Count, size_t _Size)
     * }
     */
    public static MemorySegment _recalloc_base$address() {
        return _recalloc_base.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_recalloc_base(void *_Block, size_t _Count, size_t _Size)
     * }
     */
    public static MemorySegment _recalloc_base(MemorySegment _Block, long _Count, long _Size) {
        var mh$ = _recalloc_base.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_recalloc_base", _Block, _Count, _Size);
            }
            return (MemorySegment)mh$.invokeExact(_Block, _Count, _Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _recalloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_recalloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_recalloc(void *_Block, size_t _Count, size_t _Size)
     * }
     */
    public static FunctionDescriptor _recalloc$descriptor() {
        return _recalloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_recalloc(void *_Block, size_t _Count, size_t _Size)
     * }
     */
    public static MethodHandle _recalloc$handle() {
        return _recalloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_recalloc(void *_Block, size_t _Count, size_t _Size)
     * }
     */
    public static MemorySegment _recalloc$address() {
        return _recalloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_recalloc(void *_Block, size_t _Count, size_t _Size)
     * }
     */
    public static MemorySegment _recalloc(MemorySegment _Block, long _Count, long _Size) {
        var mh$ = _recalloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_recalloc", _Block, _Count, _Size);
            }
            return (MemorySegment)mh$.invokeExact(_Block, _Count, _Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _aligned_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_aligned_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _aligned_free(void *_Block)
     * }
     */
    public static FunctionDescriptor _aligned_free$descriptor() {
        return _aligned_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _aligned_free(void *_Block)
     * }
     */
    public static MethodHandle _aligned_free$handle() {
        return _aligned_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _aligned_free(void *_Block)
     * }
     */
    public static MemorySegment _aligned_free$address() {
        return _aligned_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _aligned_free(void *_Block)
     * }
     */
    public static void _aligned_free(MemorySegment _Block) {
        var mh$ = _aligned_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_aligned_free", _Block);
            }
            mh$.invokeExact(_Block);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _aligned_malloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_aligned_malloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_aligned_malloc(size_t _Size, size_t _Alignment)
     * }
     */
    public static FunctionDescriptor _aligned_malloc$descriptor() {
        return _aligned_malloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_aligned_malloc(size_t _Size, size_t _Alignment)
     * }
     */
    public static MethodHandle _aligned_malloc$handle() {
        return _aligned_malloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_aligned_malloc(size_t _Size, size_t _Alignment)
     * }
     */
    public static MemorySegment _aligned_malloc$address() {
        return _aligned_malloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_aligned_malloc(size_t _Size, size_t _Alignment)
     * }
     */
    public static MemorySegment _aligned_malloc(long _Size, long _Alignment) {
        var mh$ = _aligned_malloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_aligned_malloc", _Size, _Alignment);
            }
            return (MemorySegment)mh$.invokeExact(_Size, _Alignment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _aligned_offset_malloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_aligned_offset_malloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_aligned_offset_malloc(size_t _Size, size_t _Alignment, size_t _Offset)
     * }
     */
    public static FunctionDescriptor _aligned_offset_malloc$descriptor() {
        return _aligned_offset_malloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_aligned_offset_malloc(size_t _Size, size_t _Alignment, size_t _Offset)
     * }
     */
    public static MethodHandle _aligned_offset_malloc$handle() {
        return _aligned_offset_malloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_aligned_offset_malloc(size_t _Size, size_t _Alignment, size_t _Offset)
     * }
     */
    public static MemorySegment _aligned_offset_malloc$address() {
        return _aligned_offset_malloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_aligned_offset_malloc(size_t _Size, size_t _Alignment, size_t _Offset)
     * }
     */
    public static MemorySegment _aligned_offset_malloc(long _Size, long _Alignment, long _Offset) {
        var mh$ = _aligned_offset_malloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_aligned_offset_malloc", _Size, _Alignment, _Offset);
            }
            return (MemorySegment)mh$.invokeExact(_Size, _Alignment, _Offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _aligned_msize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_aligned_msize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t _aligned_msize(void *_Block, size_t _Alignment, size_t _Offset)
     * }
     */
    public static FunctionDescriptor _aligned_msize$descriptor() {
        return _aligned_msize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t _aligned_msize(void *_Block, size_t _Alignment, size_t _Offset)
     * }
     */
    public static MethodHandle _aligned_msize$handle() {
        return _aligned_msize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t _aligned_msize(void *_Block, size_t _Alignment, size_t _Offset)
     * }
     */
    public static MemorySegment _aligned_msize$address() {
        return _aligned_msize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t _aligned_msize(void *_Block, size_t _Alignment, size_t _Offset)
     * }
     */
    public static long _aligned_msize(MemorySegment _Block, long _Alignment, long _Offset) {
        var mh$ = _aligned_msize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_aligned_msize", _Block, _Alignment, _Offset);
            }
            return (long)mh$.invokeExact(_Block, _Alignment, _Offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _aligned_offset_realloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_aligned_offset_realloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_aligned_offset_realloc(void *_Block, size_t _Size, size_t _Alignment, size_t _Offset)
     * }
     */
    public static FunctionDescriptor _aligned_offset_realloc$descriptor() {
        return _aligned_offset_realloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_aligned_offset_realloc(void *_Block, size_t _Size, size_t _Alignment, size_t _Offset)
     * }
     */
    public static MethodHandle _aligned_offset_realloc$handle() {
        return _aligned_offset_realloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_aligned_offset_realloc(void *_Block, size_t _Size, size_t _Alignment, size_t _Offset)
     * }
     */
    public static MemorySegment _aligned_offset_realloc$address() {
        return _aligned_offset_realloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_aligned_offset_realloc(void *_Block, size_t _Size, size_t _Alignment, size_t _Offset)
     * }
     */
    public static MemorySegment _aligned_offset_realloc(MemorySegment _Block, long _Size, long _Alignment, long _Offset) {
        var mh$ = _aligned_offset_realloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_aligned_offset_realloc", _Block, _Size, _Alignment, _Offset);
            }
            return (MemorySegment)mh$.invokeExact(_Block, _Size, _Alignment, _Offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _aligned_offset_recalloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_aligned_offset_recalloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_aligned_offset_recalloc(void *_Block, size_t _Count, size_t _Size, size_t _Alignment, size_t _Offset)
     * }
     */
    public static FunctionDescriptor _aligned_offset_recalloc$descriptor() {
        return _aligned_offset_recalloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_aligned_offset_recalloc(void *_Block, size_t _Count, size_t _Size, size_t _Alignment, size_t _Offset)
     * }
     */
    public static MethodHandle _aligned_offset_recalloc$handle() {
        return _aligned_offset_recalloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_aligned_offset_recalloc(void *_Block, size_t _Count, size_t _Size, size_t _Alignment, size_t _Offset)
     * }
     */
    public static MemorySegment _aligned_offset_recalloc$address() {
        return _aligned_offset_recalloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_aligned_offset_recalloc(void *_Block, size_t _Count, size_t _Size, size_t _Alignment, size_t _Offset)
     * }
     */
    public static MemorySegment _aligned_offset_recalloc(MemorySegment _Block, long _Count, long _Size, long _Alignment, long _Offset) {
        var mh$ = _aligned_offset_recalloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_aligned_offset_recalloc", _Block, _Count, _Size, _Alignment, _Offset);
            }
            return (MemorySegment)mh$.invokeExact(_Block, _Count, _Size, _Alignment, _Offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _aligned_realloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_aligned_realloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_aligned_realloc(void *_Block, size_t _Size, size_t _Alignment)
     * }
     */
    public static FunctionDescriptor _aligned_realloc$descriptor() {
        return _aligned_realloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_aligned_realloc(void *_Block, size_t _Size, size_t _Alignment)
     * }
     */
    public static MethodHandle _aligned_realloc$handle() {
        return _aligned_realloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_aligned_realloc(void *_Block, size_t _Size, size_t _Alignment)
     * }
     */
    public static MemorySegment _aligned_realloc$address() {
        return _aligned_realloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_aligned_realloc(void *_Block, size_t _Size, size_t _Alignment)
     * }
     */
    public static MemorySegment _aligned_realloc(MemorySegment _Block, long _Size, long _Alignment) {
        var mh$ = _aligned_realloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_aligned_realloc", _Block, _Size, _Alignment);
            }
            return (MemorySegment)mh$.invokeExact(_Block, _Size, _Alignment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _aligned_recalloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_aligned_recalloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_aligned_recalloc(void *_Block, size_t _Count, size_t _Size, size_t _Alignment)
     * }
     */
    public static FunctionDescriptor _aligned_recalloc$descriptor() {
        return _aligned_recalloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_aligned_recalloc(void *_Block, size_t _Count, size_t _Size, size_t _Alignment)
     * }
     */
    public static MethodHandle _aligned_recalloc$handle() {
        return _aligned_recalloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_aligned_recalloc(void *_Block, size_t _Count, size_t _Size, size_t _Alignment)
     * }
     */
    public static MemorySegment _aligned_recalloc$address() {
        return _aligned_recalloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_aligned_recalloc(void *_Block, size_t _Count, size_t _Size, size_t _Alignment)
     * }
     */
    public static MemorySegment _aligned_recalloc(MemorySegment _Block, long _Count, long _Size, long _Alignment) {
        var mh$ = _aligned_recalloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_aligned_recalloc", _Block, _Count, _Size, _Alignment);
            }
            return (MemorySegment)mh$.invokeExact(_Block, _Count, _Size, _Alignment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef double max_align_t
     * }
     */
    public static final OfDouble max_align_t = wgl_h.C_DOUBLE;

    private static class bsearch_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("bsearch_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *bsearch_s(const void *_Key, const void *_Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static FunctionDescriptor bsearch_s$descriptor() {
        return bsearch_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *bsearch_s(const void *_Key, const void *_Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static MethodHandle bsearch_s$handle() {
        return bsearch_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *bsearch_s(const void *_Key, const void *_Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static MemorySegment bsearch_s$address() {
        return bsearch_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *bsearch_s(const void *_Key, const void *_Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static MemorySegment bsearch_s(MemorySegment _Key, MemorySegment _Base, long _NumOfElements, long _SizeOfElements, MemorySegment _CompareFunction, MemorySegment _Context) {
        var mh$ = bsearch_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bsearch_s", _Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
            }
            return (MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class qsort_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("qsort_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void qsort_s(void *_Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static FunctionDescriptor qsort_s$descriptor() {
        return qsort_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void qsort_s(void *_Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static MethodHandle qsort_s$handle() {
        return qsort_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void qsort_s(void *_Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static MemorySegment qsort_s$address() {
        return qsort_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void qsort_s(void *_Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static void qsort_s(MemorySegment _Base, long _NumOfElements, long _SizeOfElements, MemorySegment _CompareFunction, MemorySegment _Context) {
        var mh$ = qsort_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("qsort_s", _Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
            }
            mh$.invokeExact(_Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bsearch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("bsearch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *bsearch(const void *_Key, const void *_Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static FunctionDescriptor bsearch$descriptor() {
        return bsearch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *bsearch(const void *_Key, const void *_Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MethodHandle bsearch$handle() {
        return bsearch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *bsearch(const void *_Key, const void *_Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MemorySegment bsearch$address() {
        return bsearch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *bsearch(const void *_Key, const void *_Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MemorySegment bsearch(MemorySegment _Key, MemorySegment _Base, long _NumOfElements, long _SizeOfElements, MemorySegment _CompareFunction) {
        var mh$ = bsearch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bsearch", _Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
            }
            return (MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class qsort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("qsort");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void qsort(void *_Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static FunctionDescriptor qsort$descriptor() {
        return qsort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void qsort(void *_Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MethodHandle qsort$handle() {
        return qsort.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void qsort(void *_Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MemorySegment qsort$address() {
        return qsort.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void qsort(void *_Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static void qsort(MemorySegment _Base, long _NumOfElements, long _SizeOfElements, MemorySegment _CompareFunction) {
        var mh$ = qsort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("qsort", _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
            }
            mh$.invokeExact(_Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _lfind_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_lfind_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_lfind_s(const void *_Key, const void *_Base, unsigned int *_NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static FunctionDescriptor _lfind_s$descriptor() {
        return _lfind_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_lfind_s(const void *_Key, const void *_Base, unsigned int *_NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static MethodHandle _lfind_s$handle() {
        return _lfind_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_lfind_s(const void *_Key, const void *_Base, unsigned int *_NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static MemorySegment _lfind_s$address() {
        return _lfind_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_lfind_s(const void *_Key, const void *_Base, unsigned int *_NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static MemorySegment _lfind_s(MemorySegment _Key, MemorySegment _Base, MemorySegment _NumOfElements, long _SizeOfElements, MemorySegment _CompareFunction, MemorySegment _Context) {
        var mh$ = _lfind_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_lfind_s", _Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
            }
            return (MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _lfind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_lfind");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_lfind(const void *_Key, const void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static FunctionDescriptor _lfind$descriptor() {
        return _lfind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_lfind(const void *_Key, const void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MethodHandle _lfind$handle() {
        return _lfind.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_lfind(const void *_Key, const void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MemorySegment _lfind$address() {
        return _lfind.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_lfind(const void *_Key, const void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MemorySegment _lfind(MemorySegment _Key, MemorySegment _Base, MemorySegment _NumOfElements, int _SizeOfElements, MemorySegment _CompareFunction) {
        var mh$ = _lfind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_lfind", _Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
            }
            return (MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _lsearch_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_lsearch_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_lsearch_s(const void *_Key, void *_Base, unsigned int *_NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static FunctionDescriptor _lsearch_s$descriptor() {
        return _lsearch_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_lsearch_s(const void *_Key, void *_Base, unsigned int *_NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static MethodHandle _lsearch_s$handle() {
        return _lsearch_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_lsearch_s(const void *_Key, void *_Base, unsigned int *_NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static MemorySegment _lsearch_s$address() {
        return _lsearch_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_lsearch_s(const void *_Key, void *_Base, unsigned int *_NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static MemorySegment _lsearch_s(MemorySegment _Key, MemorySegment _Base, MemorySegment _NumOfElements, long _SizeOfElements, MemorySegment _CompareFunction, MemorySegment _Context) {
        var mh$ = _lsearch_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_lsearch_s", _Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
            }
            return (MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _lsearch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_lsearch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_lsearch(const void *_Key, void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static FunctionDescriptor _lsearch$descriptor() {
        return _lsearch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_lsearch(const void *_Key, void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MethodHandle _lsearch$handle() {
        return _lsearch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_lsearch(const void *_Key, void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MemorySegment _lsearch$address() {
        return _lsearch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_lsearch(const void *_Key, void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MemorySegment _lsearch(MemorySegment _Key, MemorySegment _Base, MemorySegment _NumOfElements, int _SizeOfElements, MemorySegment _CompareFunction) {
        var mh$ = _lsearch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_lsearch", _Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
            }
            return (MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lfind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("lfind");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *lfind(const void *_Key, const void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static FunctionDescriptor lfind$descriptor() {
        return lfind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *lfind(const void *_Key, const void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MethodHandle lfind$handle() {
        return lfind.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *lfind(const void *_Key, const void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MemorySegment lfind$address() {
        return lfind.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *lfind(const void *_Key, const void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MemorySegment lfind(MemorySegment _Key, MemorySegment _Base, MemorySegment _NumOfElements, int _SizeOfElements, MemorySegment _CompareFunction) {
        var mh$ = lfind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lfind", _Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
            }
            return (MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lsearch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("lsearch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *lsearch(const void *_Key, void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static FunctionDescriptor lsearch$descriptor() {
        return lsearch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *lsearch(const void *_Key, void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MethodHandle lsearch$handle() {
        return lsearch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *lsearch(const void *_Key, void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MemorySegment lsearch$address() {
        return lsearch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *lsearch(const void *_Key, void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MemorySegment lsearch(MemorySegment _Key, MemorySegment _Base, MemorySegment _NumOfElements, int _SizeOfElements, MemorySegment _CompareFunction) {
        var mh$ = lsearch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lsearch", _Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
            }
            return (MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _itow_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_itow_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _itow_s(int _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static FunctionDescriptor _itow_s$descriptor() {
        return _itow_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _itow_s(int _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MethodHandle _itow_s$handle() {
        return _itow_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _itow_s(int _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MemorySegment _itow_s$address() {
        return _itow_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _itow_s(int _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static int _itow_s(int _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _itow_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_itow_s", _Value, _Buffer, _BufferCount, _Radix);
            }
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _itow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_itow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wchar_t *_itow(int _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor _itow$descriptor() {
        return _itow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wchar_t *_itow(int _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle _itow$handle() {
        return _itow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wchar_t *_itow(int _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _itow$address() {
        return _itow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wchar_t *_itow(int _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _itow(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _itow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_itow", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ltow_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_ltow_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _ltow_s(long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static FunctionDescriptor _ltow_s$descriptor() {
        return _ltow_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _ltow_s(long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MethodHandle _ltow_s$handle() {
        return _ltow_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _ltow_s(long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MemorySegment _ltow_s$address() {
        return _ltow_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _ltow_s(long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static int _ltow_s(int _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _ltow_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ltow_s", _Value, _Buffer, _BufferCount, _Radix);
            }
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ltow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_ltow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wchar_t *_ltow(long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor _ltow$descriptor() {
        return _ltow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wchar_t *_ltow(long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle _ltow$handle() {
        return _ltow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wchar_t *_ltow(long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _ltow$address() {
        return _ltow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wchar_t *_ltow(long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _ltow(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _ltow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ltow", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ultow_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_ultow_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _ultow_s(unsigned long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static FunctionDescriptor _ultow_s$descriptor() {
        return _ultow_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _ultow_s(unsigned long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MethodHandle _ultow_s$handle() {
        return _ultow_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _ultow_s(unsigned long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MemorySegment _ultow_s$address() {
        return _ultow_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _ultow_s(unsigned long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static int _ultow_s(int _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _ultow_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ultow_s", _Value, _Buffer, _BufferCount, _Radix);
            }
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ultow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_ultow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wchar_t *_ultow(unsigned long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor _ultow$descriptor() {
        return _ultow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wchar_t *_ultow(unsigned long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle _ultow$handle() {
        return _ultow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wchar_t *_ultow(unsigned long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _ultow$address() {
        return _ultow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wchar_t *_ultow(unsigned long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _ultow(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _ultow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ultow", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wcstod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_DOUBLE,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("wcstod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double wcstod(const wchar_t *_String, wchar_t **_EndPtr)
     * }
     */
    public static FunctionDescriptor wcstod$descriptor() {
        return wcstod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double wcstod(const wchar_t *_String, wchar_t **_EndPtr)
     * }
     */
    public static MethodHandle wcstod$handle() {
        return wcstod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double wcstod(const wchar_t *_String, wchar_t **_EndPtr)
     * }
     */
    public static MemorySegment wcstod$address() {
        return wcstod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double wcstod(const wchar_t *_String, wchar_t **_EndPtr)
     * }
     */
    public static double wcstod(MemorySegment _String, MemorySegment _EndPtr) {
        var mh$ = wcstod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wcstod", _String, _EndPtr);
            }
            return (double)mh$.invokeExact(_String, _EndPtr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstod_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_DOUBLE,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wcstod_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double _wcstod_l(const wchar_t *_String, wchar_t **_EndPtr, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wcstod_l$descriptor() {
        return _wcstod_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double _wcstod_l(const wchar_t *_String, wchar_t **_EndPtr, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wcstod_l$handle() {
        return _wcstod_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double _wcstod_l(const wchar_t *_String, wchar_t **_EndPtr, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wcstod_l$address() {
        return _wcstod_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double _wcstod_l(const wchar_t *_String, wchar_t **_EndPtr, _locale_t _Locale)
     * }
     */
    public static double _wcstod_l(MemorySegment _String, MemorySegment _EndPtr, MemorySegment _Locale) {
        var mh$ = _wcstod_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstod_l", _String, _EndPtr, _Locale);
            }
            return (double)mh$.invokeExact(_String, _EndPtr, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wcstol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("wcstol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long wcstol(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static FunctionDescriptor wcstol$descriptor() {
        return wcstol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long wcstol(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static MethodHandle wcstol$handle() {
        return wcstol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long wcstol(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static MemorySegment wcstol$address() {
        return wcstol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long wcstol(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static int wcstol(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = wcstol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wcstol", _String, _EndPtr, _Radix);
            }
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstol_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wcstol_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long _wcstol_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wcstol_l$descriptor() {
        return _wcstol_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long _wcstol_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wcstol_l$handle() {
        return _wcstol_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long _wcstol_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wcstol_l$address() {
        return _wcstol_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long _wcstol_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static int _wcstol_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _wcstol_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstol_l", _String, _EndPtr, _Radix, _Locale);
            }
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wcstoll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("wcstoll");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long wcstoll(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static FunctionDescriptor wcstoll$descriptor() {
        return wcstoll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long wcstoll(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static MethodHandle wcstoll$handle() {
        return wcstoll.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long wcstoll(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static MemorySegment wcstoll$address() {
        return wcstoll.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long wcstoll(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static long wcstoll(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = wcstoll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wcstoll", _String, _EndPtr, _Radix);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstoll_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wcstoll_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _wcstoll_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wcstoll_l$descriptor() {
        return _wcstoll_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _wcstoll_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wcstoll_l$handle() {
        return _wcstoll_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _wcstoll_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wcstoll_l$address() {
        return _wcstoll_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _wcstoll_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static long _wcstoll_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _wcstoll_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstoll_l", _String, _EndPtr, _Radix, _Locale);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wcstoul {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("wcstoul");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long wcstoul(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static FunctionDescriptor wcstoul$descriptor() {
        return wcstoul.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long wcstoul(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static MethodHandle wcstoul$handle() {
        return wcstoul.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long wcstoul(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static MemorySegment wcstoul$address() {
        return wcstoul.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long wcstoul(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static int wcstoul(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = wcstoul.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wcstoul", _String, _EndPtr, _Radix);
            }
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstoul_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wcstoul_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long _wcstoul_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wcstoul_l$descriptor() {
        return _wcstoul_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long _wcstoul_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wcstoul_l$handle() {
        return _wcstoul_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long _wcstoul_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wcstoul_l$address() {
        return _wcstoul_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long _wcstoul_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static int _wcstoul_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _wcstoul_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstoul_l", _String, _EndPtr, _Radix, _Locale);
            }
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wcstoull {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("wcstoull");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long long wcstoull(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static FunctionDescriptor wcstoull$descriptor() {
        return wcstoull.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long long wcstoull(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static MethodHandle wcstoull$handle() {
        return wcstoull.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long long wcstoull(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static MemorySegment wcstoull$address() {
        return wcstoull.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long long wcstoull(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static long wcstoull(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = wcstoull.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wcstoull", _String, _EndPtr, _Radix);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstoull_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wcstoull_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long long _wcstoull_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wcstoull_l$descriptor() {
        return _wcstoull_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long long _wcstoull_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wcstoull_l$handle() {
        return _wcstoull_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long long _wcstoull_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wcstoull_l$address() {
        return _wcstoull_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long long _wcstoull_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static long _wcstoull_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _wcstoull_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstoull_l", _String, _EndPtr, _Radix, _Locale);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wcstold {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_DOUBLE,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("wcstold");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long double wcstold(const wchar_t *_String, wchar_t **_EndPtr)
     * }
     */
    public static FunctionDescriptor wcstold$descriptor() {
        return wcstold.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long double wcstold(const wchar_t *_String, wchar_t **_EndPtr)
     * }
     */
    public static MethodHandle wcstold$handle() {
        return wcstold.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long double wcstold(const wchar_t *_String, wchar_t **_EndPtr)
     * }
     */
    public static MemorySegment wcstold$address() {
        return wcstold.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long double wcstold(const wchar_t *_String, wchar_t **_EndPtr)
     * }
     */
    public static double wcstold(MemorySegment _String, MemorySegment _EndPtr) {
        var mh$ = wcstold.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wcstold", _String, _EndPtr);
            }
            return (double)mh$.invokeExact(_String, _EndPtr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstold_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_DOUBLE,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wcstold_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long double _wcstold_l(const wchar_t *_String, wchar_t **_EndPtr, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wcstold_l$descriptor() {
        return _wcstold_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long double _wcstold_l(const wchar_t *_String, wchar_t **_EndPtr, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wcstold_l$handle() {
        return _wcstold_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long double _wcstold_l(const wchar_t *_String, wchar_t **_EndPtr, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wcstold_l$address() {
        return _wcstold_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long double _wcstold_l(const wchar_t *_String, wchar_t **_EndPtr, _locale_t _Locale)
     * }
     */
    public static double _wcstold_l(MemorySegment _String, MemorySegment _EndPtr, MemorySegment _Locale) {
        var mh$ = _wcstold_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstold_l", _String, _EndPtr, _Locale);
            }
            return (double)mh$.invokeExact(_String, _EndPtr, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wcstof {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_FLOAT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("wcstof");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * float wcstof(const wchar_t *_String, wchar_t **_EndPtr)
     * }
     */
    public static FunctionDescriptor wcstof$descriptor() {
        return wcstof.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * float wcstof(const wchar_t *_String, wchar_t **_EndPtr)
     * }
     */
    public static MethodHandle wcstof$handle() {
        return wcstof.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * float wcstof(const wchar_t *_String, wchar_t **_EndPtr)
     * }
     */
    public static MemorySegment wcstof$address() {
        return wcstof.ADDR;
    }

    /**
     * {@snippet lang=c :
     * float wcstof(const wchar_t *_String, wchar_t **_EndPtr)
     * }
     */
    public static float wcstof(MemorySegment _String, MemorySegment _EndPtr) {
        var mh$ = wcstof.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wcstof", _String, _EndPtr);
            }
            return (float)mh$.invokeExact(_String, _EndPtr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstof_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_FLOAT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wcstof_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * float _wcstof_l(const wchar_t *_String, wchar_t **_EndPtr, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wcstof_l$descriptor() {
        return _wcstof_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * float _wcstof_l(const wchar_t *_String, wchar_t **_EndPtr, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wcstof_l$handle() {
        return _wcstof_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * float _wcstof_l(const wchar_t *_String, wchar_t **_EndPtr, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wcstof_l$address() {
        return _wcstof_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * float _wcstof_l(const wchar_t *_String, wchar_t **_EndPtr, _locale_t _Locale)
     * }
     */
    public static float _wcstof_l(MemorySegment _String, MemorySegment _EndPtr, MemorySegment _Locale) {
        var mh$ = _wcstof_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstof_l", _String, _EndPtr, _Locale);
            }
            return (float)mh$.invokeExact(_String, _EndPtr, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wtof {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_DOUBLE,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wtof");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double _wtof(const wchar_t *_String)
     * }
     */
    public static FunctionDescriptor _wtof$descriptor() {
        return _wtof.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double _wtof(const wchar_t *_String)
     * }
     */
    public static MethodHandle _wtof$handle() {
        return _wtof.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double _wtof(const wchar_t *_String)
     * }
     */
    public static MemorySegment _wtof$address() {
        return _wtof.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double _wtof(const wchar_t *_String)
     * }
     */
    public static double _wtof(MemorySegment _String) {
        var mh$ = _wtof.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wtof", _String);
            }
            return (double)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wtof_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_DOUBLE,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wtof_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double _wtof_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wtof_l$descriptor() {
        return _wtof_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double _wtof_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wtof_l$handle() {
        return _wtof_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double _wtof_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wtof_l$address() {
        return _wtof_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double _wtof_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static double _wtof_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _wtof_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wtof_l", _String, _Locale);
            }
            return (double)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wtoi {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wtoi");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _wtoi(const wchar_t *_String)
     * }
     */
    public static FunctionDescriptor _wtoi$descriptor() {
        return _wtoi.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _wtoi(const wchar_t *_String)
     * }
     */
    public static MethodHandle _wtoi$handle() {
        return _wtoi.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _wtoi(const wchar_t *_String)
     * }
     */
    public static MemorySegment _wtoi$address() {
        return _wtoi.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _wtoi(const wchar_t *_String)
     * }
     */
    public static int _wtoi(MemorySegment _String) {
        var mh$ = _wtoi.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wtoi", _String);
            }
            return (int)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wtoi_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wtoi_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _wtoi_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wtoi_l$descriptor() {
        return _wtoi_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _wtoi_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wtoi_l$handle() {
        return _wtoi_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _wtoi_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wtoi_l$address() {
        return _wtoi_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _wtoi_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static int _wtoi_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _wtoi_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wtoi_l", _String, _Locale);
            }
            return (int)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wtol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wtol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long _wtol(const wchar_t *_String)
     * }
     */
    public static FunctionDescriptor _wtol$descriptor() {
        return _wtol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long _wtol(const wchar_t *_String)
     * }
     */
    public static MethodHandle _wtol$handle() {
        return _wtol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long _wtol(const wchar_t *_String)
     * }
     */
    public static MemorySegment _wtol$address() {
        return _wtol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long _wtol(const wchar_t *_String)
     * }
     */
    public static int _wtol(MemorySegment _String) {
        var mh$ = _wtol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wtol", _String);
            }
            return (int)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wtol_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wtol_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long _wtol_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wtol_l$descriptor() {
        return _wtol_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long _wtol_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wtol_l$handle() {
        return _wtol_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long _wtol_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wtol_l$address() {
        return _wtol_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long _wtol_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static int _wtol_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _wtol_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wtol_l", _String, _Locale);
            }
            return (int)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wtoll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wtoll");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _wtoll(const wchar_t *_String)
     * }
     */
    public static FunctionDescriptor _wtoll$descriptor() {
        return _wtoll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _wtoll(const wchar_t *_String)
     * }
     */
    public static MethodHandle _wtoll$handle() {
        return _wtoll.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _wtoll(const wchar_t *_String)
     * }
     */
    public static MemorySegment _wtoll$address() {
        return _wtoll.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _wtoll(const wchar_t *_String)
     * }
     */
    public static long _wtoll(MemorySegment _String) {
        var mh$ = _wtoll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wtoll", _String);
            }
            return (long)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wtoll_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wtoll_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _wtoll_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wtoll_l$descriptor() {
        return _wtoll_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _wtoll_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wtoll_l$handle() {
        return _wtoll_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _wtoll_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wtoll_l$address() {
        return _wtoll_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _wtoll_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static long _wtoll_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _wtoll_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wtoll_l", _String, _Locale);
            }
            return (long)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _i64tow_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_i64tow_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _i64tow_s(long long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static FunctionDescriptor _i64tow_s$descriptor() {
        return _i64tow_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _i64tow_s(long long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MethodHandle _i64tow_s$handle() {
        return _i64tow_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _i64tow_s(long long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MemorySegment _i64tow_s$address() {
        return _i64tow_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _i64tow_s(long long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static int _i64tow_s(long _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _i64tow_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_i64tow_s", _Value, _Buffer, _BufferCount, _Radix);
            }
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _i64tow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_i64tow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wchar_t *_i64tow(long long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor _i64tow$descriptor() {
        return _i64tow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wchar_t *_i64tow(long long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle _i64tow$handle() {
        return _i64tow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wchar_t *_i64tow(long long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _i64tow$address() {
        return _i64tow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wchar_t *_i64tow(long long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _i64tow(long _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _i64tow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_i64tow", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ui64tow_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_ui64tow_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _ui64tow_s(unsigned long long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static FunctionDescriptor _ui64tow_s$descriptor() {
        return _ui64tow_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _ui64tow_s(unsigned long long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MethodHandle _ui64tow_s$handle() {
        return _ui64tow_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _ui64tow_s(unsigned long long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MemorySegment _ui64tow_s$address() {
        return _ui64tow_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _ui64tow_s(unsigned long long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static int _ui64tow_s(long _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _ui64tow_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ui64tow_s", _Value, _Buffer, _BufferCount, _Radix);
            }
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ui64tow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_ui64tow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wchar_t *_ui64tow(unsigned long long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor _ui64tow$descriptor() {
        return _ui64tow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wchar_t *_ui64tow(unsigned long long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle _ui64tow$handle() {
        return _ui64tow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wchar_t *_ui64tow(unsigned long long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _ui64tow$address() {
        return _ui64tow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wchar_t *_ui64tow(unsigned long long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _ui64tow(long _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _ui64tow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ui64tow", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wtoi64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wtoi64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _wtoi64(const wchar_t *_String)
     * }
     */
    public static FunctionDescriptor _wtoi64$descriptor() {
        return _wtoi64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _wtoi64(const wchar_t *_String)
     * }
     */
    public static MethodHandle _wtoi64$handle() {
        return _wtoi64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _wtoi64(const wchar_t *_String)
     * }
     */
    public static MemorySegment _wtoi64$address() {
        return _wtoi64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _wtoi64(const wchar_t *_String)
     * }
     */
    public static long _wtoi64(MemorySegment _String) {
        var mh$ = _wtoi64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wtoi64", _String);
            }
            return (long)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wtoi64_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wtoi64_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _wtoi64_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wtoi64_l$descriptor() {
        return _wtoi64_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _wtoi64_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wtoi64_l$handle() {
        return _wtoi64_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _wtoi64_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wtoi64_l$address() {
        return _wtoi64_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _wtoi64_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static long _wtoi64_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _wtoi64_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wtoi64_l", _String, _Locale);
            }
            return (long)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstoi64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wcstoi64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _wcstoi64(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static FunctionDescriptor _wcstoi64$descriptor() {
        return _wcstoi64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _wcstoi64(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static MethodHandle _wcstoi64$handle() {
        return _wcstoi64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _wcstoi64(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static MemorySegment _wcstoi64$address() {
        return _wcstoi64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _wcstoi64(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static long _wcstoi64(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = _wcstoi64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstoi64", _String, _EndPtr, _Radix);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstoi64_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wcstoi64_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _wcstoi64_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wcstoi64_l$descriptor() {
        return _wcstoi64_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _wcstoi64_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wcstoi64_l$handle() {
        return _wcstoi64_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _wcstoi64_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wcstoi64_l$address() {
        return _wcstoi64_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _wcstoi64_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static long _wcstoi64_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _wcstoi64_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstoi64_l", _String, _EndPtr, _Radix, _Locale);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstoui64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wcstoui64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long long _wcstoui64(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static FunctionDescriptor _wcstoui64$descriptor() {
        return _wcstoui64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long long _wcstoui64(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static MethodHandle _wcstoui64$handle() {
        return _wcstoui64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long long _wcstoui64(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static MemorySegment _wcstoui64$address() {
        return _wcstoui64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long long _wcstoui64(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static long _wcstoui64(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = _wcstoui64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstoui64", _String, _EndPtr, _Radix);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstoui64_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wcstoui64_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long long _wcstoui64_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wcstoui64_l$descriptor() {
        return _wcstoui64_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long long _wcstoui64_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wcstoui64_l$handle() {
        return _wcstoui64_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long long _wcstoui64_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wcstoui64_l$address() {
        return _wcstoui64_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long long _wcstoui64_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static long _wcstoui64_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _wcstoui64_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstoui64_l", _String, _EndPtr, _Radix, _Locale);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wfullpath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wfullpath");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wchar_t *_wfullpath(wchar_t *_Buffer, const wchar_t *_Path, size_t _BufferCount)
     * }
     */
    public static FunctionDescriptor _wfullpath$descriptor() {
        return _wfullpath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wchar_t *_wfullpath(wchar_t *_Buffer, const wchar_t *_Path, size_t _BufferCount)
     * }
     */
    public static MethodHandle _wfullpath$handle() {
        return _wfullpath.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wchar_t *_wfullpath(wchar_t *_Buffer, const wchar_t *_Path, size_t _BufferCount)
     * }
     */
    public static MemorySegment _wfullpath$address() {
        return _wfullpath.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wchar_t *_wfullpath(wchar_t *_Buffer, const wchar_t *_Path, size_t _BufferCount)
     * }
     */
    public static MemorySegment _wfullpath(MemorySegment _Buffer, MemorySegment _Path, long _BufferCount) {
        var mh$ = _wfullpath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wfullpath", _Buffer, _Path, _BufferCount);
            }
            return (MemorySegment)mh$.invokeExact(_Buffer, _Path, _BufferCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wmakepath_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wmakepath_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _wmakepath_s(wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_Drive, const wchar_t *_Dir, const wchar_t *_Filename, const wchar_t *_Ext)
     * }
     */
    public static FunctionDescriptor _wmakepath_s$descriptor() {
        return _wmakepath_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _wmakepath_s(wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_Drive, const wchar_t *_Dir, const wchar_t *_Filename, const wchar_t *_Ext)
     * }
     */
    public static MethodHandle _wmakepath_s$handle() {
        return _wmakepath_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _wmakepath_s(wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_Drive, const wchar_t *_Dir, const wchar_t *_Filename, const wchar_t *_Ext)
     * }
     */
    public static MemorySegment _wmakepath_s$address() {
        return _wmakepath_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _wmakepath_s(wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_Drive, const wchar_t *_Dir, const wchar_t *_Filename, const wchar_t *_Ext)
     * }
     */
    public static int _wmakepath_s(MemorySegment _Buffer, long _BufferCount, MemorySegment _Drive, MemorySegment _Dir, MemorySegment _Filename, MemorySegment _Ext) {
        var mh$ = _wmakepath_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wmakepath_s", _Buffer, _BufferCount, _Drive, _Dir, _Filename, _Ext);
            }
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wmakepath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wmakepath");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _wmakepath(wchar_t *_Buffer, const wchar_t *_Drive, const wchar_t *_Dir, const wchar_t *_Filename, const wchar_t *_Ext)
     * }
     */
    public static FunctionDescriptor _wmakepath$descriptor() {
        return _wmakepath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _wmakepath(wchar_t *_Buffer, const wchar_t *_Drive, const wchar_t *_Dir, const wchar_t *_Filename, const wchar_t *_Ext)
     * }
     */
    public static MethodHandle _wmakepath$handle() {
        return _wmakepath.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _wmakepath(wchar_t *_Buffer, const wchar_t *_Drive, const wchar_t *_Dir, const wchar_t *_Filename, const wchar_t *_Ext)
     * }
     */
    public static MemorySegment _wmakepath$address() {
        return _wmakepath.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _wmakepath(wchar_t *_Buffer, const wchar_t *_Drive, const wchar_t *_Dir, const wchar_t *_Filename, const wchar_t *_Ext)
     * }
     */
    public static void _wmakepath(MemorySegment _Buffer, MemorySegment _Drive, MemorySegment _Dir, MemorySegment _Filename, MemorySegment _Ext) {
        var mh$ = _wmakepath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wmakepath", _Buffer, _Drive, _Dir, _Filename, _Ext);
            }
            mh$.invokeExact(_Buffer, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wperror {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wperror");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _wperror(const wchar_t *_ErrorMessage)
     * }
     */
    public static FunctionDescriptor _wperror$descriptor() {
        return _wperror.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _wperror(const wchar_t *_ErrorMessage)
     * }
     */
    public static MethodHandle _wperror$handle() {
        return _wperror.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _wperror(const wchar_t *_ErrorMessage)
     * }
     */
    public static MemorySegment _wperror$address() {
        return _wperror.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _wperror(const wchar_t *_ErrorMessage)
     * }
     */
    public static void _wperror(MemorySegment _ErrorMessage) {
        var mh$ = _wperror.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wperror", _ErrorMessage);
            }
            mh$.invokeExact(_ErrorMessage);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wsplitpath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wsplitpath");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _wsplitpath(const wchar_t *_FullPath, wchar_t *_Drive, wchar_t *_Dir, wchar_t *_Filename, wchar_t *_Ext)
     * }
     */
    public static FunctionDescriptor _wsplitpath$descriptor() {
        return _wsplitpath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _wsplitpath(const wchar_t *_FullPath, wchar_t *_Drive, wchar_t *_Dir, wchar_t *_Filename, wchar_t *_Ext)
     * }
     */
    public static MethodHandle _wsplitpath$handle() {
        return _wsplitpath.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _wsplitpath(const wchar_t *_FullPath, wchar_t *_Drive, wchar_t *_Dir, wchar_t *_Filename, wchar_t *_Ext)
     * }
     */
    public static MemorySegment _wsplitpath$address() {
        return _wsplitpath.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _wsplitpath(const wchar_t *_FullPath, wchar_t *_Drive, wchar_t *_Dir, wchar_t *_Filename, wchar_t *_Ext)
     * }
     */
    public static void _wsplitpath(MemorySegment _FullPath, MemorySegment _Drive, MemorySegment _Dir, MemorySegment _Filename, MemorySegment _Ext) {
        var mh$ = _wsplitpath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wsplitpath", _FullPath, _Drive, _Dir, _Filename, _Ext);
            }
            mh$.invokeExact(_FullPath, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wsplitpath_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wsplitpath_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _wsplitpath_s(const wchar_t *_FullPath, wchar_t *_Drive, size_t _DriveCount, wchar_t *_Dir, size_t _DirCount, wchar_t *_Filename, size_t _FilenameCount, wchar_t *_Ext, size_t _ExtCount)
     * }
     */
    public static FunctionDescriptor _wsplitpath_s$descriptor() {
        return _wsplitpath_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _wsplitpath_s(const wchar_t *_FullPath, wchar_t *_Drive, size_t _DriveCount, wchar_t *_Dir, size_t _DirCount, wchar_t *_Filename, size_t _FilenameCount, wchar_t *_Ext, size_t _ExtCount)
     * }
     */
    public static MethodHandle _wsplitpath_s$handle() {
        return _wsplitpath_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _wsplitpath_s(const wchar_t *_FullPath, wchar_t *_Drive, size_t _DriveCount, wchar_t *_Dir, size_t _DirCount, wchar_t *_Filename, size_t _FilenameCount, wchar_t *_Ext, size_t _ExtCount)
     * }
     */
    public static MemorySegment _wsplitpath_s$address() {
        return _wsplitpath_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _wsplitpath_s(const wchar_t *_FullPath, wchar_t *_Drive, size_t _DriveCount, wchar_t *_Dir, size_t _DirCount, wchar_t *_Filename, size_t _FilenameCount, wchar_t *_Ext, size_t _ExtCount)
     * }
     */
    public static int _wsplitpath_s(MemorySegment _FullPath, MemorySegment _Drive, long _DriveCount, MemorySegment _Dir, long _DirCount, MemorySegment _Filename, long _FilenameCount, MemorySegment _Ext, long _ExtCount) {
        var mh$ = _wsplitpath_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wsplitpath_s", _FullPath, _Drive, _DriveCount, _Dir, _DirCount, _Filename, _FilenameCount, _Ext, _ExtCount);
            }
            return (int)mh$.invokeExact(_FullPath, _Drive, _DriveCount, _Dir, _DirCount, _Filename, _FilenameCount, _Ext, _ExtCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wdupenv_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wdupenv_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _wdupenv_s(wchar_t **_Buffer, size_t *_BufferCount, const wchar_t *_VarName)
     * }
     */
    public static FunctionDescriptor _wdupenv_s$descriptor() {
        return _wdupenv_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _wdupenv_s(wchar_t **_Buffer, size_t *_BufferCount, const wchar_t *_VarName)
     * }
     */
    public static MethodHandle _wdupenv_s$handle() {
        return _wdupenv_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _wdupenv_s(wchar_t **_Buffer, size_t *_BufferCount, const wchar_t *_VarName)
     * }
     */
    public static MemorySegment _wdupenv_s$address() {
        return _wdupenv_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _wdupenv_s(wchar_t **_Buffer, size_t *_BufferCount, const wchar_t *_VarName)
     * }
     */
    public static int _wdupenv_s(MemorySegment _Buffer, MemorySegment _BufferCount, MemorySegment _VarName) {
        var mh$ = _wdupenv_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wdupenv_s", _Buffer, _BufferCount, _VarName);
            }
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _VarName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wgetenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wgetenv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wchar_t *_wgetenv(const wchar_t *_VarName)
     * }
     */
    public static FunctionDescriptor _wgetenv$descriptor() {
        return _wgetenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wchar_t *_wgetenv(const wchar_t *_VarName)
     * }
     */
    public static MethodHandle _wgetenv$handle() {
        return _wgetenv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wchar_t *_wgetenv(const wchar_t *_VarName)
     * }
     */
    public static MemorySegment _wgetenv$address() {
        return _wgetenv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wchar_t *_wgetenv(const wchar_t *_VarName)
     * }
     */
    public static MemorySegment _wgetenv(MemorySegment _VarName) {
        var mh$ = _wgetenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wgetenv", _VarName);
            }
            return (MemorySegment)mh$.invokeExact(_VarName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wgetenv_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wgetenv_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _wgetenv_s(size_t *_RequiredCount, wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_VarName)
     * }
     */
    public static FunctionDescriptor _wgetenv_s$descriptor() {
        return _wgetenv_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _wgetenv_s(size_t *_RequiredCount, wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_VarName)
     * }
     */
    public static MethodHandle _wgetenv_s$handle() {
        return _wgetenv_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _wgetenv_s(size_t *_RequiredCount, wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_VarName)
     * }
     */
    public static MemorySegment _wgetenv_s$address() {
        return _wgetenv_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _wgetenv_s(size_t *_RequiredCount, wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_VarName)
     * }
     */
    public static int _wgetenv_s(MemorySegment _RequiredCount, MemorySegment _Buffer, long _BufferCount, MemorySegment _VarName) {
        var mh$ = _wgetenv_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wgetenv_s", _RequiredCount, _Buffer, _BufferCount, _VarName);
            }
            return (int)mh$.invokeExact(_RequiredCount, _Buffer, _BufferCount, _VarName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wputenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wputenv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _wputenv(const wchar_t *_EnvString)
     * }
     */
    public static FunctionDescriptor _wputenv$descriptor() {
        return _wputenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _wputenv(const wchar_t *_EnvString)
     * }
     */
    public static MethodHandle _wputenv$handle() {
        return _wputenv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _wputenv(const wchar_t *_EnvString)
     * }
     */
    public static MemorySegment _wputenv$address() {
        return _wputenv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _wputenv(const wchar_t *_EnvString)
     * }
     */
    public static int _wputenv(MemorySegment _EnvString) {
        var mh$ = _wputenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wputenv", _EnvString);
            }
            return (int)mh$.invokeExact(_EnvString);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wputenv_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wputenv_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _wputenv_s(const wchar_t *_Name, const wchar_t *_Value)
     * }
     */
    public static FunctionDescriptor _wputenv_s$descriptor() {
        return _wputenv_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _wputenv_s(const wchar_t *_Name, const wchar_t *_Value)
     * }
     */
    public static MethodHandle _wputenv_s$handle() {
        return _wputenv_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _wputenv_s(const wchar_t *_Name, const wchar_t *_Value)
     * }
     */
    public static MemorySegment _wputenv_s$address() {
        return _wputenv_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _wputenv_s(const wchar_t *_Name, const wchar_t *_Value)
     * }
     */
    public static int _wputenv_s(MemorySegment _Name, MemorySegment _Value) {
        var mh$ = _wputenv_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wputenv_s", _Name, _Value);
            }
            return (int)mh$.invokeExact(_Name, _Value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wsearchenv_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wsearchenv_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _wsearchenv_s(const wchar_t *_Filename, const wchar_t *_VarName, wchar_t *_Buffer, size_t _BufferCount)
     * }
     */
    public static FunctionDescriptor _wsearchenv_s$descriptor() {
        return _wsearchenv_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _wsearchenv_s(const wchar_t *_Filename, const wchar_t *_VarName, wchar_t *_Buffer, size_t _BufferCount)
     * }
     */
    public static MethodHandle _wsearchenv_s$handle() {
        return _wsearchenv_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _wsearchenv_s(const wchar_t *_Filename, const wchar_t *_VarName, wchar_t *_Buffer, size_t _BufferCount)
     * }
     */
    public static MemorySegment _wsearchenv_s$address() {
        return _wsearchenv_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _wsearchenv_s(const wchar_t *_Filename, const wchar_t *_VarName, wchar_t *_Buffer, size_t _BufferCount)
     * }
     */
    public static int _wsearchenv_s(MemorySegment _Filename, MemorySegment _VarName, MemorySegment _Buffer, long _BufferCount) {
        var mh$ = _wsearchenv_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wsearchenv_s", _Filename, _VarName, _Buffer, _BufferCount);
            }
            return (int)mh$.invokeExact(_Filename, _VarName, _Buffer, _BufferCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wsearchenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wsearchenv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _wsearchenv(const wchar_t *_Filename, const wchar_t *_VarName, wchar_t *_ResultPath)
     * }
     */
    public static FunctionDescriptor _wsearchenv$descriptor() {
        return _wsearchenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _wsearchenv(const wchar_t *_Filename, const wchar_t *_VarName, wchar_t *_ResultPath)
     * }
     */
    public static MethodHandle _wsearchenv$handle() {
        return _wsearchenv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _wsearchenv(const wchar_t *_Filename, const wchar_t *_VarName, wchar_t *_ResultPath)
     * }
     */
    public static MemorySegment _wsearchenv$address() {
        return _wsearchenv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _wsearchenv(const wchar_t *_Filename, const wchar_t *_VarName, wchar_t *_ResultPath)
     * }
     */
    public static void _wsearchenv(MemorySegment _Filename, MemorySegment _VarName, MemorySegment _ResultPath) {
        var mh$ = _wsearchenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wsearchenv", _Filename, _VarName, _ResultPath);
            }
            mh$.invokeExact(_Filename, _VarName, _ResultPath);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wsystem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wsystem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _wsystem(const wchar_t *_Command)
     * }
     */
    public static FunctionDescriptor _wsystem$descriptor() {
        return _wsystem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _wsystem(const wchar_t *_Command)
     * }
     */
    public static MethodHandle _wsystem$handle() {
        return _wsystem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _wsystem(const wchar_t *_Command)
     * }
     */
    public static MemorySegment _wsystem$address() {
        return _wsystem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _wsystem(const wchar_t *_Command)
     * }
     */
    public static int _wsystem(MemorySegment _Command) {
        var mh$ = _wsystem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wsystem", _Command);
            }
            return (int)mh$.invokeExact(_Command);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _swab {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_swab");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _swab(char *_Buf1, char *_Buf2, int _SizeInBytes)
     * }
     */
    public static FunctionDescriptor _swab$descriptor() {
        return _swab.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _swab(char *_Buf1, char *_Buf2, int _SizeInBytes)
     * }
     */
    public static MethodHandle _swab$handle() {
        return _swab.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _swab(char *_Buf1, char *_Buf2, int _SizeInBytes)
     * }
     */
    public static MemorySegment _swab$address() {
        return _swab.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _swab(char *_Buf1, char *_Buf2, int _SizeInBytes)
     * }
     */
    public static void _swab(MemorySegment _Buf1, MemorySegment _Buf2, int _SizeInBytes) {
        var mh$ = _swab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_swab", _Buf1, _Buf2, _SizeInBytes);
            }
            mh$.invokeExact(_Buf1, _Buf2, _SizeInBytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class exit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("exit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void exit(int _Code)
     * }
     */
    public static FunctionDescriptor exit$descriptor() {
        return exit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void exit(int _Code)
     * }
     */
    public static MethodHandle exit$handle() {
        return exit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void exit(int _Code)
     * }
     */
    public static MemorySegment exit$address() {
        return exit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void exit(int _Code)
     * }
     */
    public static void exit(int _Code) {
        var mh$ = exit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("exit", _Code);
            }
            mh$.invokeExact(_Code);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _exit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_exit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _exit(int _Code)
     * }
     */
    public static FunctionDescriptor _exit$descriptor() {
        return _exit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _exit(int _Code)
     * }
     */
    public static MethodHandle _exit$handle() {
        return _exit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _exit(int _Code)
     * }
     */
    public static MemorySegment _exit$address() {
        return _exit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _exit(int _Code)
     * }
     */
    public static void _exit(int _Code) {
        var mh$ = _exit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_exit", _Code);
            }
            mh$.invokeExact(_Code);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _Exit$ {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_Exit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _Exit(int _Code)
     * }
     */
    public static FunctionDescriptor _Exit$descriptor() {
        return _Exit$.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _Exit(int _Code)
     * }
     */
    public static MethodHandle _Exit$handle() {
        return _Exit$.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _Exit(int _Code)
     * }
     */
    public static MemorySegment _Exit$address() {
        return _Exit$.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _Exit(int _Code)
     * }
     */
    public static void _Exit(int _Code) {
        var mh$ = _Exit$.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_Exit", _Code);
            }
            mh$.invokeExact(_Code);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class quick_exit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("quick_exit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void quick_exit(int _Code)
     * }
     */
    public static FunctionDescriptor quick_exit$descriptor() {
        return quick_exit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void quick_exit(int _Code)
     * }
     */
    public static MethodHandle quick_exit$handle() {
        return quick_exit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void quick_exit(int _Code)
     * }
     */
    public static MemorySegment quick_exit$address() {
        return quick_exit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void quick_exit(int _Code)
     * }
     */
    public static void quick_exit(int _Code) {
        var mh$ = quick_exit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("quick_exit", _Code);
            }
            mh$.invokeExact(_Code);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class abort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("abort");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void abort()
     * }
     */
    public static FunctionDescriptor abort$descriptor() {
        return abort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void abort()
     * }
     */
    public static MethodHandle abort$handle() {
        return abort.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void abort()
     * }
     */
    public static MemorySegment abort$address() {
        return abort.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void abort()
     * }
     */
    public static void abort() {
        var mh$ = abort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("abort");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _set_abort_behavior {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_set_abort_behavior");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int _set_abort_behavior(unsigned int _Flags, unsigned int _Mask)
     * }
     */
    public static FunctionDescriptor _set_abort_behavior$descriptor() {
        return _set_abort_behavior.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int _set_abort_behavior(unsigned int _Flags, unsigned int _Mask)
     * }
     */
    public static MethodHandle _set_abort_behavior$handle() {
        return _set_abort_behavior.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int _set_abort_behavior(unsigned int _Flags, unsigned int _Mask)
     * }
     */
    public static MemorySegment _set_abort_behavior$address() {
        return _set_abort_behavior.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int _set_abort_behavior(unsigned int _Flags, unsigned int _Mask)
     * }
     */
    public static int _set_abort_behavior(int _Flags, int _Mask) {
        var mh$ = _set_abort_behavior.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_set_abort_behavior", _Flags, _Mask);
            }
            return (int)mh$.invokeExact(_Flags, _Mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atexit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("atexit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int atexit(void (*)(void) __attribute__((cdecl)))
     * }
     */
    public static FunctionDescriptor atexit$descriptor() {
        return atexit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int atexit(void (*)(void) __attribute__((cdecl)))
     * }
     */
    public static MethodHandle atexit$handle() {
        return atexit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int atexit(void (*)(void) __attribute__((cdecl)))
     * }
     */
    public static MemorySegment atexit$address() {
        return atexit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int atexit(void (*)(void) __attribute__((cdecl)))
     * }
     */
    public static int atexit(MemorySegment x0) {
        var mh$ = atexit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atexit", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _onexit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_onexit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _onexit_t _onexit(_onexit_t _Func)
     * }
     */
    public static FunctionDescriptor _onexit$descriptor() {
        return _onexit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _onexit_t _onexit(_onexit_t _Func)
     * }
     */
    public static MethodHandle _onexit$handle() {
        return _onexit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _onexit_t _onexit(_onexit_t _Func)
     * }
     */
    public static MemorySegment _onexit$address() {
        return _onexit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _onexit_t _onexit(_onexit_t _Func)
     * }
     */
    public static MemorySegment _onexit(MemorySegment _Func) {
        var mh$ = _onexit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_onexit", _Func);
            }
            return (MemorySegment)mh$.invokeExact(_Func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class at_quick_exit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("at_quick_exit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int at_quick_exit(void (*)(void) __attribute__((cdecl)))
     * }
     */
    public static FunctionDescriptor at_quick_exit$descriptor() {
        return at_quick_exit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int at_quick_exit(void (*)(void) __attribute__((cdecl)))
     * }
     */
    public static MethodHandle at_quick_exit$handle() {
        return at_quick_exit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int at_quick_exit(void (*)(void) __attribute__((cdecl)))
     * }
     */
    public static MemorySegment at_quick_exit$address() {
        return at_quick_exit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int at_quick_exit(void (*)(void) __attribute__((cdecl)))
     * }
     */
    public static int at_quick_exit(MemorySegment x0) {
        var mh$ = at_quick_exit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("at_quick_exit", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _set_purecall_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_set_purecall_handler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _purecall_handler _set_purecall_handler(_purecall_handler _Handler)
     * }
     */
    public static FunctionDescriptor _set_purecall_handler$descriptor() {
        return _set_purecall_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _purecall_handler _set_purecall_handler(_purecall_handler _Handler)
     * }
     */
    public static MethodHandle _set_purecall_handler$handle() {
        return _set_purecall_handler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _purecall_handler _set_purecall_handler(_purecall_handler _Handler)
     * }
     */
    public static MemorySegment _set_purecall_handler$address() {
        return _set_purecall_handler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _purecall_handler _set_purecall_handler(_purecall_handler _Handler)
     * }
     */
    public static MemorySegment _set_purecall_handler(MemorySegment _Handler) {
        var mh$ = _set_purecall_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_set_purecall_handler", _Handler);
            }
            return (MemorySegment)mh$.invokeExact(_Handler);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _get_purecall_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_get_purecall_handler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _purecall_handler _get_purecall_handler()
     * }
     */
    public static FunctionDescriptor _get_purecall_handler$descriptor() {
        return _get_purecall_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _purecall_handler _get_purecall_handler()
     * }
     */
    public static MethodHandle _get_purecall_handler$handle() {
        return _get_purecall_handler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _purecall_handler _get_purecall_handler()
     * }
     */
    public static MemorySegment _get_purecall_handler$address() {
        return _get_purecall_handler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _purecall_handler _get_purecall_handler()
     * }
     */
    public static MemorySegment _get_purecall_handler() {
        var mh$ = _get_purecall_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_get_purecall_handler");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _set_invalid_parameter_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_set_invalid_parameter_handler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _invalid_parameter_handler _set_invalid_parameter_handler(_invalid_parameter_handler _Handler)
     * }
     */
    public static FunctionDescriptor _set_invalid_parameter_handler$descriptor() {
        return _set_invalid_parameter_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _invalid_parameter_handler _set_invalid_parameter_handler(_invalid_parameter_handler _Handler)
     * }
     */
    public static MethodHandle _set_invalid_parameter_handler$handle() {
        return _set_invalid_parameter_handler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _invalid_parameter_handler _set_invalid_parameter_handler(_invalid_parameter_handler _Handler)
     * }
     */
    public static MemorySegment _set_invalid_parameter_handler$address() {
        return _set_invalid_parameter_handler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _invalid_parameter_handler _set_invalid_parameter_handler(_invalid_parameter_handler _Handler)
     * }
     */
    public static MemorySegment _set_invalid_parameter_handler(MemorySegment _Handler) {
        var mh$ = _set_invalid_parameter_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_set_invalid_parameter_handler", _Handler);
            }
            return (MemorySegment)mh$.invokeExact(_Handler);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _get_invalid_parameter_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_get_invalid_parameter_handler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _invalid_parameter_handler _get_invalid_parameter_handler()
     * }
     */
    public static FunctionDescriptor _get_invalid_parameter_handler$descriptor() {
        return _get_invalid_parameter_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _invalid_parameter_handler _get_invalid_parameter_handler()
     * }
     */
    public static MethodHandle _get_invalid_parameter_handler$handle() {
        return _get_invalid_parameter_handler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _invalid_parameter_handler _get_invalid_parameter_handler()
     * }
     */
    public static MemorySegment _get_invalid_parameter_handler$address() {
        return _get_invalid_parameter_handler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _invalid_parameter_handler _get_invalid_parameter_handler()
     * }
     */
    public static MemorySegment _get_invalid_parameter_handler() {
        var mh$ = _get_invalid_parameter_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_get_invalid_parameter_handler");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _set_thread_local_invalid_parameter_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_set_thread_local_invalid_parameter_handler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _invalid_parameter_handler _set_thread_local_invalid_parameter_handler(_invalid_parameter_handler _Handler)
     * }
     */
    public static FunctionDescriptor _set_thread_local_invalid_parameter_handler$descriptor() {
        return _set_thread_local_invalid_parameter_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _invalid_parameter_handler _set_thread_local_invalid_parameter_handler(_invalid_parameter_handler _Handler)
     * }
     */
    public static MethodHandle _set_thread_local_invalid_parameter_handler$handle() {
        return _set_thread_local_invalid_parameter_handler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _invalid_parameter_handler _set_thread_local_invalid_parameter_handler(_invalid_parameter_handler _Handler)
     * }
     */
    public static MemorySegment _set_thread_local_invalid_parameter_handler$address() {
        return _set_thread_local_invalid_parameter_handler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _invalid_parameter_handler _set_thread_local_invalid_parameter_handler(_invalid_parameter_handler _Handler)
     * }
     */
    public static MemorySegment _set_thread_local_invalid_parameter_handler(MemorySegment _Handler) {
        var mh$ = _set_thread_local_invalid_parameter_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_set_thread_local_invalid_parameter_handler", _Handler);
            }
            return (MemorySegment)mh$.invokeExact(_Handler);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _get_thread_local_invalid_parameter_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_get_thread_local_invalid_parameter_handler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _invalid_parameter_handler _get_thread_local_invalid_parameter_handler()
     * }
     */
    public static FunctionDescriptor _get_thread_local_invalid_parameter_handler$descriptor() {
        return _get_thread_local_invalid_parameter_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _invalid_parameter_handler _get_thread_local_invalid_parameter_handler()
     * }
     */
    public static MethodHandle _get_thread_local_invalid_parameter_handler$handle() {
        return _get_thread_local_invalid_parameter_handler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _invalid_parameter_handler _get_thread_local_invalid_parameter_handler()
     * }
     */
    public static MemorySegment _get_thread_local_invalid_parameter_handler$address() {
        return _get_thread_local_invalid_parameter_handler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _invalid_parameter_handler _get_thread_local_invalid_parameter_handler()
     * }
     */
    public static MemorySegment _get_thread_local_invalid_parameter_handler() {
        var mh$ = _get_thread_local_invalid_parameter_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_get_thread_local_invalid_parameter_handler");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _set_error_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_set_error_mode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _set_error_mode(int _Mode)
     * }
     */
    public static FunctionDescriptor _set_error_mode$descriptor() {
        return _set_error_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _set_error_mode(int _Mode)
     * }
     */
    public static MethodHandle _set_error_mode$handle() {
        return _set_error_mode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _set_error_mode(int _Mode)
     * }
     */
    public static MemorySegment _set_error_mode$address() {
        return _set_error_mode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _set_error_mode(int _Mode)
     * }
     */
    public static int _set_error_mode(int _Mode) {
        var mh$ = _set_error_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_set_error_mode", _Mode);
            }
            return (int)mh$.invokeExact(_Mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __sys_errlist {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("__sys_errlist");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char **__sys_errlist()
     * }
     */
    public static FunctionDescriptor __sys_errlist$descriptor() {
        return __sys_errlist.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char **__sys_errlist()
     * }
     */
    public static MethodHandle __sys_errlist$handle() {
        return __sys_errlist.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char **__sys_errlist()
     * }
     */
    public static MemorySegment __sys_errlist$address() {
        return __sys_errlist.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char **__sys_errlist()
     * }
     */
    public static MemorySegment __sys_errlist() {
        var mh$ = __sys_errlist.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__sys_errlist");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __sys_nerr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("__sys_nerr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int *__sys_nerr()
     * }
     */
    public static FunctionDescriptor __sys_nerr$descriptor() {
        return __sys_nerr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int *__sys_nerr()
     * }
     */
    public static MethodHandle __sys_nerr$handle() {
        return __sys_nerr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int *__sys_nerr()
     * }
     */
    public static MemorySegment __sys_nerr$address() {
        return __sys_nerr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int *__sys_nerr()
     * }
     */
    public static MemorySegment __sys_nerr() {
        var mh$ = __sys_nerr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__sys_nerr");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class perror {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("perror");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void perror(const char *_ErrMsg)
     * }
     */
    public static FunctionDescriptor perror$descriptor() {
        return perror.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void perror(const char *_ErrMsg)
     * }
     */
    public static MethodHandle perror$handle() {
        return perror.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void perror(const char *_ErrMsg)
     * }
     */
    public static MemorySegment perror$address() {
        return perror.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void perror(const char *_ErrMsg)
     * }
     */
    public static void perror(MemorySegment _ErrMsg) {
        var mh$ = perror.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("perror", _ErrMsg);
            }
            mh$.invokeExact(_ErrMsg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __p__pgmptr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("__p__pgmptr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char **__p__pgmptr()
     * }
     */
    public static FunctionDescriptor __p__pgmptr$descriptor() {
        return __p__pgmptr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char **__p__pgmptr()
     * }
     */
    public static MethodHandle __p__pgmptr$handle() {
        return __p__pgmptr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char **__p__pgmptr()
     * }
     */
    public static MemorySegment __p__pgmptr$address() {
        return __p__pgmptr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char **__p__pgmptr()
     * }
     */
    public static MemorySegment __p__pgmptr() {
        var mh$ = __p__pgmptr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__p__pgmptr");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __p__wpgmptr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("__p__wpgmptr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wchar_t **__p__wpgmptr()
     * }
     */
    public static FunctionDescriptor __p__wpgmptr$descriptor() {
        return __p__wpgmptr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wchar_t **__p__wpgmptr()
     * }
     */
    public static MethodHandle __p__wpgmptr$handle() {
        return __p__wpgmptr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wchar_t **__p__wpgmptr()
     * }
     */
    public static MemorySegment __p__wpgmptr$address() {
        return __p__wpgmptr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wchar_t **__p__wpgmptr()
     * }
     */
    public static MemorySegment __p__wpgmptr() {
        var mh$ = __p__wpgmptr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__p__wpgmptr");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __p__fmode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("__p__fmode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int *__p__fmode()
     * }
     */
    public static FunctionDescriptor __p__fmode$descriptor() {
        return __p__fmode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int *__p__fmode()
     * }
     */
    public static MethodHandle __p__fmode$handle() {
        return __p__fmode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int *__p__fmode()
     * }
     */
    public static MemorySegment __p__fmode$address() {
        return __p__fmode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int *__p__fmode()
     * }
     */
    public static MemorySegment __p__fmode() {
        var mh$ = __p__fmode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__p__fmode");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _get_pgmptr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_get_pgmptr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _get_pgmptr(char **_Value)
     * }
     */
    public static FunctionDescriptor _get_pgmptr$descriptor() {
        return _get_pgmptr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _get_pgmptr(char **_Value)
     * }
     */
    public static MethodHandle _get_pgmptr$handle() {
        return _get_pgmptr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _get_pgmptr(char **_Value)
     * }
     */
    public static MemorySegment _get_pgmptr$address() {
        return _get_pgmptr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _get_pgmptr(char **_Value)
     * }
     */
    public static int _get_pgmptr(MemorySegment _Value) {
        var mh$ = _get_pgmptr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_get_pgmptr", _Value);
            }
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _get_wpgmptr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_get_wpgmptr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _get_wpgmptr(wchar_t **_Value)
     * }
     */
    public static FunctionDescriptor _get_wpgmptr$descriptor() {
        return _get_wpgmptr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _get_wpgmptr(wchar_t **_Value)
     * }
     */
    public static MethodHandle _get_wpgmptr$handle() {
        return _get_wpgmptr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _get_wpgmptr(wchar_t **_Value)
     * }
     */
    public static MemorySegment _get_wpgmptr$address() {
        return _get_wpgmptr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _get_wpgmptr(wchar_t **_Value)
     * }
     */
    public static int _get_wpgmptr(MemorySegment _Value) {
        var mh$ = _get_wpgmptr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_get_wpgmptr", _Value);
            }
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _set_fmode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_set_fmode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _set_fmode(int _Mode)
     * }
     */
    public static FunctionDescriptor _set_fmode$descriptor() {
        return _set_fmode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _set_fmode(int _Mode)
     * }
     */
    public static MethodHandle _set_fmode$handle() {
        return _set_fmode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _set_fmode(int _Mode)
     * }
     */
    public static MemorySegment _set_fmode$address() {
        return _set_fmode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _set_fmode(int _Mode)
     * }
     */
    public static int _set_fmode(int _Mode) {
        var mh$ = _set_fmode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_set_fmode", _Mode);
            }
            return (int)mh$.invokeExact(_Mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _get_fmode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_get_fmode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _get_fmode(int *_PMode)
     * }
     */
    public static FunctionDescriptor _get_fmode$descriptor() {
        return _get_fmode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _get_fmode(int *_PMode)
     * }
     */
    public static MethodHandle _get_fmode$handle() {
        return _get_fmode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _get_fmode(int *_PMode)
     * }
     */
    public static MemorySegment _get_fmode$address() {
        return _get_fmode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _get_fmode(int *_PMode)
     * }
     */
    public static int _get_fmode(MemorySegment _PMode) {
        var mh$ = _get_fmode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_get_fmode", _PMode);
            }
            return (int)mh$.invokeExact(_PMode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class abs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("abs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int abs(int _Number)
     * }
     */
    public static FunctionDescriptor abs$descriptor() {
        return abs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int abs(int _Number)
     * }
     */
    public static MethodHandle abs$handle() {
        return abs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int abs(int _Number)
     * }
     */
    public static MemorySegment abs$address() {
        return abs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int abs(int _Number)
     * }
     */
    public static int abs(int _Number) {
        var mh$ = abs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("abs", _Number);
            }
            return (int)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class labs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("labs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long labs(long _Number)
     * }
     */
    public static FunctionDescriptor labs$descriptor() {
        return labs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long labs(long _Number)
     * }
     */
    public static MethodHandle labs$handle() {
        return labs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long labs(long _Number)
     * }
     */
    public static MemorySegment labs$address() {
        return labs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long labs(long _Number)
     * }
     */
    public static int labs(int _Number) {
        var mh$ = labs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("labs", _Number);
            }
            return (int)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class llabs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("llabs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long llabs(long long _Number)
     * }
     */
    public static FunctionDescriptor llabs$descriptor() {
        return llabs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long llabs(long long _Number)
     * }
     */
    public static MethodHandle llabs$handle() {
        return llabs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long llabs(long long _Number)
     * }
     */
    public static MemorySegment llabs$address() {
        return llabs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long llabs(long long _Number)
     * }
     */
    public static long llabs(long _Number) {
        var mh$ = llabs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("llabs", _Number);
            }
            return (long)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _abs64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_abs64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _abs64(long long _Number)
     * }
     */
    public static FunctionDescriptor _abs64$descriptor() {
        return _abs64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _abs64(long long _Number)
     * }
     */
    public static MethodHandle _abs64$handle() {
        return _abs64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _abs64(long long _Number)
     * }
     */
    public static MemorySegment _abs64$address() {
        return _abs64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _abs64(long long _Number)
     * }
     */
    public static long _abs64(long _Number) {
        var mh$ = _abs64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_abs64", _Number);
            }
            return (long)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _byteswap_ushort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_SHORT,
            wgl_h.C_SHORT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_byteswap_ushort");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned short _byteswap_ushort(unsigned short _Number)
     * }
     */
    public static FunctionDescriptor _byteswap_ushort$descriptor() {
        return _byteswap_ushort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned short _byteswap_ushort(unsigned short _Number)
     * }
     */
    public static MethodHandle _byteswap_ushort$handle() {
        return _byteswap_ushort.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned short _byteswap_ushort(unsigned short _Number)
     * }
     */
    public static MemorySegment _byteswap_ushort$address() {
        return _byteswap_ushort.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned short _byteswap_ushort(unsigned short _Number)
     * }
     */
    public static short _byteswap_ushort(short _Number) {
        var mh$ = _byteswap_ushort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_byteswap_ushort", _Number);
            }
            return (short)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _byteswap_ulong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_byteswap_ulong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long _byteswap_ulong(unsigned long _Number)
     * }
     */
    public static FunctionDescriptor _byteswap_ulong$descriptor() {
        return _byteswap_ulong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long _byteswap_ulong(unsigned long _Number)
     * }
     */
    public static MethodHandle _byteswap_ulong$handle() {
        return _byteswap_ulong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long _byteswap_ulong(unsigned long _Number)
     * }
     */
    public static MemorySegment _byteswap_ulong$address() {
        return _byteswap_ulong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long _byteswap_ulong(unsigned long _Number)
     * }
     */
    public static int _byteswap_ulong(int _Number) {
        var mh$ = _byteswap_ulong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_byteswap_ulong", _Number);
            }
            return (int)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _byteswap_uint64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_byteswap_uint64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long long _byteswap_uint64(unsigned long long _Number)
     * }
     */
    public static FunctionDescriptor _byteswap_uint64$descriptor() {
        return _byteswap_uint64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long long _byteswap_uint64(unsigned long long _Number)
     * }
     */
    public static MethodHandle _byteswap_uint64$handle() {
        return _byteswap_uint64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long long _byteswap_uint64(unsigned long long _Number)
     * }
     */
    public static MemorySegment _byteswap_uint64$address() {
        return _byteswap_uint64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long long _byteswap_uint64(unsigned long long _Number)
     * }
     */
    public static long _byteswap_uint64(long _Number) {
        var mh$ = _byteswap_uint64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_byteswap_uint64", _Number);
            }
            return (long)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class div {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            _div_t.layout(),
            wgl_h.C_INT,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("div");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * div_t div(int _Numerator, int _Denominator)
     * }
     */
    public static FunctionDescriptor div$descriptor() {
        return div.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * div_t div(int _Numerator, int _Denominator)
     * }
     */
    public static MethodHandle div$handle() {
        return div.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * div_t div(int _Numerator, int _Denominator)
     * }
     */
    public static MemorySegment div$address() {
        return div.ADDR;
    }

    /**
     * {@snippet lang=c :
     * div_t div(int _Numerator, int _Denominator)
     * }
     */
    public static MemorySegment div(SegmentAllocator allocator, int _Numerator, int _Denominator) {
        var mh$ = div.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("div", allocator, _Numerator, _Denominator);
            }
            return (MemorySegment)mh$.invokeExact(allocator, _Numerator, _Denominator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ldiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            _ldiv_t.layout(),
            wgl_h.C_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ldiv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ldiv_t ldiv(long _Numerator, long _Denominator)
     * }
     */
    public static FunctionDescriptor ldiv$descriptor() {
        return ldiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ldiv_t ldiv(long _Numerator, long _Denominator)
     * }
     */
    public static MethodHandle ldiv$handle() {
        return ldiv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * ldiv_t ldiv(long _Numerator, long _Denominator)
     * }
     */
    public static MemorySegment ldiv$address() {
        return ldiv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * ldiv_t ldiv(long _Numerator, long _Denominator)
     * }
     */
    public static MemorySegment ldiv(SegmentAllocator allocator, int _Numerator, int _Denominator) {
        var mh$ = ldiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ldiv", allocator, _Numerator, _Denominator);
            }
            return (MemorySegment)mh$.invokeExact(allocator, _Numerator, _Denominator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lldiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            _lldiv_t.layout(),
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("lldiv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * lldiv_t lldiv(long long _Numerator, long long _Denominator)
     * }
     */
    public static FunctionDescriptor lldiv$descriptor() {
        return lldiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * lldiv_t lldiv(long long _Numerator, long long _Denominator)
     * }
     */
    public static MethodHandle lldiv$handle() {
        return lldiv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * lldiv_t lldiv(long long _Numerator, long long _Denominator)
     * }
     */
    public static MemorySegment lldiv$address() {
        return lldiv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * lldiv_t lldiv(long long _Numerator, long long _Denominator)
     * }
     */
    public static MemorySegment lldiv(SegmentAllocator allocator, long _Numerator, long _Denominator) {
        var mh$ = lldiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lldiv", allocator, _Numerator, _Denominator);
            }
            return (MemorySegment)mh$.invokeExact(allocator, _Numerator, _Denominator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _lrotl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_lrotl");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long _lrotl(unsigned long _Value, int _Shift)
     * }
     */
    public static FunctionDescriptor _lrotl$descriptor() {
        return _lrotl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long _lrotl(unsigned long _Value, int _Shift)
     * }
     */
    public static MethodHandle _lrotl$handle() {
        return _lrotl.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long _lrotl(unsigned long _Value, int _Shift)
     * }
     */
    public static MemorySegment _lrotl$address() {
        return _lrotl.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long _lrotl(unsigned long _Value, int _Shift)
     * }
     */
    public static int _lrotl(int _Value, int _Shift) {
        var mh$ = _lrotl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_lrotl", _Value, _Shift);
            }
            return (int)mh$.invokeExact(_Value, _Shift);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _lrotr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_lrotr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long _lrotr(unsigned long _Value, int _Shift)
     * }
     */
    public static FunctionDescriptor _lrotr$descriptor() {
        return _lrotr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long _lrotr(unsigned long _Value, int _Shift)
     * }
     */
    public static MethodHandle _lrotr$handle() {
        return _lrotr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long _lrotr(unsigned long _Value, int _Shift)
     * }
     */
    public static MemorySegment _lrotr$address() {
        return _lrotr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long _lrotr(unsigned long _Value, int _Shift)
     * }
     */
    public static int _lrotr(int _Value, int _Shift) {
        var mh$ = _lrotr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_lrotr", _Value, _Shift);
            }
            return (int)mh$.invokeExact(_Value, _Shift);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class srand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("srand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void srand(unsigned int _Seed)
     * }
     */
    public static FunctionDescriptor srand$descriptor() {
        return srand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void srand(unsigned int _Seed)
     * }
     */
    public static MethodHandle srand$handle() {
        return srand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void srand(unsigned int _Seed)
     * }
     */
    public static MemorySegment srand$address() {
        return srand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void srand(unsigned int _Seed)
     * }
     */
    public static void srand(int _Seed) {
        var mh$ = srand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("srand", _Seed);
            }
            mh$.invokeExact(_Seed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("rand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rand()
     * }
     */
    public static FunctionDescriptor rand$descriptor() {
        return rand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rand()
     * }
     */
    public static MethodHandle rand$handle() {
        return rand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int rand()
     * }
     */
    public static MemorySegment rand$address() {
        return rand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int rand()
     * }
     */
    public static int rand() {
        var mh$ = rand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rand");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atof {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_DOUBLE,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("atof");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double atof(const char *_String)
     * }
     */
    public static FunctionDescriptor atof$descriptor() {
        return atof.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double atof(const char *_String)
     * }
     */
    public static MethodHandle atof$handle() {
        return atof.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double atof(const char *_String)
     * }
     */
    public static MemorySegment atof$address() {
        return atof.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double atof(const char *_String)
     * }
     */
    public static double atof(MemorySegment _String) {
        var mh$ = atof.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atof", _String);
            }
            return (double)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atoi {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("atoi");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int atoi(const char *_String)
     * }
     */
    public static FunctionDescriptor atoi$descriptor() {
        return atoi.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int atoi(const char *_String)
     * }
     */
    public static MethodHandle atoi$handle() {
        return atoi.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int atoi(const char *_String)
     * }
     */
    public static MemorySegment atoi$address() {
        return atoi.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int atoi(const char *_String)
     * }
     */
    public static int atoi(MemorySegment _String) {
        var mh$ = atoi.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atoi", _String);
            }
            return (int)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("atol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long atol(const char *_String)
     * }
     */
    public static FunctionDescriptor atol$descriptor() {
        return atol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long atol(const char *_String)
     * }
     */
    public static MethodHandle atol$handle() {
        return atol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long atol(const char *_String)
     * }
     */
    public static MemorySegment atol$address() {
        return atol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long atol(const char *_String)
     * }
     */
    public static int atol(MemorySegment _String) {
        var mh$ = atol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atol", _String);
            }
            return (int)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atoll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("atoll");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long atoll(const char *_String)
     * }
     */
    public static FunctionDescriptor atoll$descriptor() {
        return atoll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long atoll(const char *_String)
     * }
     */
    public static MethodHandle atoll$handle() {
        return atoll.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long atoll(const char *_String)
     * }
     */
    public static MemorySegment atoll$address() {
        return atoll.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long atoll(const char *_String)
     * }
     */
    public static long atoll(MemorySegment _String) {
        var mh$ = atoll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atoll", _String);
            }
            return (long)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _atoi64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_atoi64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _atoi64(const char *_String)
     * }
     */
    public static FunctionDescriptor _atoi64$descriptor() {
        return _atoi64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _atoi64(const char *_String)
     * }
     */
    public static MethodHandle _atoi64$handle() {
        return _atoi64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _atoi64(const char *_String)
     * }
     */
    public static MemorySegment _atoi64$address() {
        return _atoi64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _atoi64(const char *_String)
     * }
     */
    public static long _atoi64(MemorySegment _String) {
        var mh$ = _atoi64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_atoi64", _String);
            }
            return (long)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _atof_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_DOUBLE,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_atof_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double _atof_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _atof_l$descriptor() {
        return _atof_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double _atof_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _atof_l$handle() {
        return _atof_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double _atof_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _atof_l$address() {
        return _atof_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double _atof_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static double _atof_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _atof_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_atof_l", _String, _Locale);
            }
            return (double)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _atoi_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_atoi_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _atoi_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _atoi_l$descriptor() {
        return _atoi_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _atoi_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _atoi_l$handle() {
        return _atoi_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _atoi_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _atoi_l$address() {
        return _atoi_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _atoi_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static int _atoi_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _atoi_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_atoi_l", _String, _Locale);
            }
            return (int)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _atol_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_atol_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long _atol_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _atol_l$descriptor() {
        return _atol_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long _atol_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _atol_l$handle() {
        return _atol_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long _atol_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _atol_l$address() {
        return _atol_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long _atol_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static int _atol_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _atol_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_atol_l", _String, _Locale);
            }
            return (int)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _atoll_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_atoll_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _atoll_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _atoll_l$descriptor() {
        return _atoll_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _atoll_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _atoll_l$handle() {
        return _atoll_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _atoll_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _atoll_l$address() {
        return _atoll_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _atoll_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static long _atoll_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _atoll_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_atoll_l", _String, _Locale);
            }
            return (long)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _atoi64_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_atoi64_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _atoi64_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _atoi64_l$descriptor() {
        return _atoi64_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _atoi64_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _atoi64_l$handle() {
        return _atoi64_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _atoi64_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _atoi64_l$address() {
        return _atoi64_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _atoi64_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static long _atoi64_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _atoi64_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_atoi64_l", _String, _Locale);
            }
            return (long)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _atoflt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_atoflt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _atoflt(_CRT_FLOAT *_Result, const char *_String)
     * }
     */
    public static FunctionDescriptor _atoflt$descriptor() {
        return _atoflt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _atoflt(_CRT_FLOAT *_Result, const char *_String)
     * }
     */
    public static MethodHandle _atoflt$handle() {
        return _atoflt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _atoflt(_CRT_FLOAT *_Result, const char *_String)
     * }
     */
    public static MemorySegment _atoflt$address() {
        return _atoflt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _atoflt(_CRT_FLOAT *_Result, const char *_String)
     * }
     */
    public static int _atoflt(MemorySegment _Result, MemorySegment _String) {
        var mh$ = _atoflt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_atoflt", _Result, _String);
            }
            return (int)mh$.invokeExact(_Result, _String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _atodbl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_atodbl");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _atodbl(_CRT_DOUBLE *_Result, char *_String)
     * }
     */
    public static FunctionDescriptor _atodbl$descriptor() {
        return _atodbl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _atodbl(_CRT_DOUBLE *_Result, char *_String)
     * }
     */
    public static MethodHandle _atodbl$handle() {
        return _atodbl.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _atodbl(_CRT_DOUBLE *_Result, char *_String)
     * }
     */
    public static MemorySegment _atodbl$address() {
        return _atodbl.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _atodbl(_CRT_DOUBLE *_Result, char *_String)
     * }
     */
    public static int _atodbl(MemorySegment _Result, MemorySegment _String) {
        var mh$ = _atodbl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_atodbl", _Result, _String);
            }
            return (int)mh$.invokeExact(_Result, _String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _atoldbl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_atoldbl");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _atoldbl(_LDOUBLE *_Result, char *_String)
     * }
     */
    public static FunctionDescriptor _atoldbl$descriptor() {
        return _atoldbl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _atoldbl(_LDOUBLE *_Result, char *_String)
     * }
     */
    public static MethodHandle _atoldbl$handle() {
        return _atoldbl.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _atoldbl(_LDOUBLE *_Result, char *_String)
     * }
     */
    public static MemorySegment _atoldbl$address() {
        return _atoldbl.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _atoldbl(_LDOUBLE *_Result, char *_String)
     * }
     */
    public static int _atoldbl(MemorySegment _Result, MemorySegment _String) {
        var mh$ = _atoldbl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_atoldbl", _Result, _String);
            }
            return (int)mh$.invokeExact(_Result, _String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _atoflt_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_atoflt_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _atoflt_l(_CRT_FLOAT *_Result, const char *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _atoflt_l$descriptor() {
        return _atoflt_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _atoflt_l(_CRT_FLOAT *_Result, const char *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _atoflt_l$handle() {
        return _atoflt_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _atoflt_l(_CRT_FLOAT *_Result, const char *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _atoflt_l$address() {
        return _atoflt_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _atoflt_l(_CRT_FLOAT *_Result, const char *_String, _locale_t _Locale)
     * }
     */
    public static int _atoflt_l(MemorySegment _Result, MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _atoflt_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_atoflt_l", _Result, _String, _Locale);
            }
            return (int)mh$.invokeExact(_Result, _String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _atodbl_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_atodbl_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _atodbl_l(_CRT_DOUBLE *_Result, char *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _atodbl_l$descriptor() {
        return _atodbl_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _atodbl_l(_CRT_DOUBLE *_Result, char *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _atodbl_l$handle() {
        return _atodbl_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _atodbl_l(_CRT_DOUBLE *_Result, char *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _atodbl_l$address() {
        return _atodbl_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _atodbl_l(_CRT_DOUBLE *_Result, char *_String, _locale_t _Locale)
     * }
     */
    public static int _atodbl_l(MemorySegment _Result, MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _atodbl_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_atodbl_l", _Result, _String, _Locale);
            }
            return (int)mh$.invokeExact(_Result, _String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _atoldbl_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_atoldbl_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _atoldbl_l(_LDOUBLE *_Result, char *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _atoldbl_l$descriptor() {
        return _atoldbl_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _atoldbl_l(_LDOUBLE *_Result, char *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _atoldbl_l$handle() {
        return _atoldbl_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _atoldbl_l(_LDOUBLE *_Result, char *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _atoldbl_l$address() {
        return _atoldbl_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _atoldbl_l(_LDOUBLE *_Result, char *_String, _locale_t _Locale)
     * }
     */
    public static int _atoldbl_l(MemorySegment _Result, MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _atoldbl_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_atoldbl_l", _Result, _String, _Locale);
            }
            return (int)mh$.invokeExact(_Result, _String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtof {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_FLOAT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("strtof");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * float strtof(const char *_String, char **_EndPtr)
     * }
     */
    public static FunctionDescriptor strtof$descriptor() {
        return strtof.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * float strtof(const char *_String, char **_EndPtr)
     * }
     */
    public static MethodHandle strtof$handle() {
        return strtof.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * float strtof(const char *_String, char **_EndPtr)
     * }
     */
    public static MemorySegment strtof$address() {
        return strtof.ADDR;
    }

    /**
     * {@snippet lang=c :
     * float strtof(const char *_String, char **_EndPtr)
     * }
     */
    public static float strtof(MemorySegment _String, MemorySegment _EndPtr) {
        var mh$ = strtof.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtof", _String, _EndPtr);
            }
            return (float)mh$.invokeExact(_String, _EndPtr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _strtof_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_FLOAT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_strtof_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * float _strtof_l(const char *_String, char **_EndPtr, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _strtof_l$descriptor() {
        return _strtof_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * float _strtof_l(const char *_String, char **_EndPtr, _locale_t _Locale)
     * }
     */
    public static MethodHandle _strtof_l$handle() {
        return _strtof_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * float _strtof_l(const char *_String, char **_EndPtr, _locale_t _Locale)
     * }
     */
    public static MemorySegment _strtof_l$address() {
        return _strtof_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * float _strtof_l(const char *_String, char **_EndPtr, _locale_t _Locale)
     * }
     */
    public static float _strtof_l(MemorySegment _String, MemorySegment _EndPtr, MemorySegment _Locale) {
        var mh$ = _strtof_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_strtof_l", _String, _EndPtr, _Locale);
            }
            return (float)mh$.invokeExact(_String, _EndPtr, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_DOUBLE,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("strtod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double strtod(const char *_String, char **_EndPtr)
     * }
     */
    public static FunctionDescriptor strtod$descriptor() {
        return strtod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double strtod(const char *_String, char **_EndPtr)
     * }
     */
    public static MethodHandle strtod$handle() {
        return strtod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double strtod(const char *_String, char **_EndPtr)
     * }
     */
    public static MemorySegment strtod$address() {
        return strtod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double strtod(const char *_String, char **_EndPtr)
     * }
     */
    public static double strtod(MemorySegment _String, MemorySegment _EndPtr) {
        var mh$ = strtod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtod", _String, _EndPtr);
            }
            return (double)mh$.invokeExact(_String, _EndPtr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _strtod_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_DOUBLE,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_strtod_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double _strtod_l(const char *_String, char **_EndPtr, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _strtod_l$descriptor() {
        return _strtod_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double _strtod_l(const char *_String, char **_EndPtr, _locale_t _Locale)
     * }
     */
    public static MethodHandle _strtod_l$handle() {
        return _strtod_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double _strtod_l(const char *_String, char **_EndPtr, _locale_t _Locale)
     * }
     */
    public static MemorySegment _strtod_l$address() {
        return _strtod_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double _strtod_l(const char *_String, char **_EndPtr, _locale_t _Locale)
     * }
     */
    public static double _strtod_l(MemorySegment _String, MemorySegment _EndPtr, MemorySegment _Locale) {
        var mh$ = _strtod_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_strtod_l", _String, _EndPtr, _Locale);
            }
            return (double)mh$.invokeExact(_String, _EndPtr, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtold {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_DOUBLE,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("strtold");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long double strtold(const char *_String, char **_EndPtr)
     * }
     */
    public static FunctionDescriptor strtold$descriptor() {
        return strtold.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long double strtold(const char *_String, char **_EndPtr)
     * }
     */
    public static MethodHandle strtold$handle() {
        return strtold.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long double strtold(const char *_String, char **_EndPtr)
     * }
     */
    public static MemorySegment strtold$address() {
        return strtold.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long double strtold(const char *_String, char **_EndPtr)
     * }
     */
    public static double strtold(MemorySegment _String, MemorySegment _EndPtr) {
        var mh$ = strtold.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtold", _String, _EndPtr);
            }
            return (double)mh$.invokeExact(_String, _EndPtr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _strtold_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_DOUBLE,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_strtold_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long double _strtold_l(const char *_String, char **_EndPtr, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _strtold_l$descriptor() {
        return _strtold_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long double _strtold_l(const char *_String, char **_EndPtr, _locale_t _Locale)
     * }
     */
    public static MethodHandle _strtold_l$handle() {
        return _strtold_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long double _strtold_l(const char *_String, char **_EndPtr, _locale_t _Locale)
     * }
     */
    public static MemorySegment _strtold_l$address() {
        return _strtold_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long double _strtold_l(const char *_String, char **_EndPtr, _locale_t _Locale)
     * }
     */
    public static double _strtold_l(MemorySegment _String, MemorySegment _EndPtr, MemorySegment _Locale) {
        var mh$ = _strtold_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_strtold_l", _String, _EndPtr, _Locale);
            }
            return (double)mh$.invokeExact(_String, _EndPtr, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("strtol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long strtol(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static FunctionDescriptor strtol$descriptor() {
        return strtol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long strtol(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static MethodHandle strtol$handle() {
        return strtol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long strtol(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static MemorySegment strtol$address() {
        return strtol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long strtol(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static int strtol(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = strtol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtol", _String, _EndPtr, _Radix);
            }
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _strtol_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_strtol_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long _strtol_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _strtol_l$descriptor() {
        return _strtol_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long _strtol_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MethodHandle _strtol_l$handle() {
        return _strtol_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long _strtol_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MemorySegment _strtol_l$address() {
        return _strtol_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long _strtol_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static int _strtol_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _strtol_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_strtol_l", _String, _EndPtr, _Radix, _Locale);
            }
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtoll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("strtoll");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long strtoll(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static FunctionDescriptor strtoll$descriptor() {
        return strtoll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long strtoll(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static MethodHandle strtoll$handle() {
        return strtoll.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long strtoll(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static MemorySegment strtoll$address() {
        return strtoll.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long strtoll(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static long strtoll(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = strtoll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtoll", _String, _EndPtr, _Radix);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _strtoll_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_strtoll_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _strtoll_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _strtoll_l$descriptor() {
        return _strtoll_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _strtoll_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MethodHandle _strtoll_l$handle() {
        return _strtoll_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _strtoll_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MemorySegment _strtoll_l$address() {
        return _strtoll_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _strtoll_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static long _strtoll_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _strtoll_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_strtoll_l", _String, _EndPtr, _Radix, _Locale);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtoul {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("strtoul");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long strtoul(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static FunctionDescriptor strtoul$descriptor() {
        return strtoul.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long strtoul(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static MethodHandle strtoul$handle() {
        return strtoul.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long strtoul(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static MemorySegment strtoul$address() {
        return strtoul.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long strtoul(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static int strtoul(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = strtoul.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtoul", _String, _EndPtr, _Radix);
            }
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _strtoul_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_strtoul_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long _strtoul_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _strtoul_l$descriptor() {
        return _strtoul_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long _strtoul_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MethodHandle _strtoul_l$handle() {
        return _strtoul_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long _strtoul_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MemorySegment _strtoul_l$address() {
        return _strtoul_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long _strtoul_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static int _strtoul_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _strtoul_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_strtoul_l", _String, _EndPtr, _Radix, _Locale);
            }
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtoull {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("strtoull");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long long strtoull(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static FunctionDescriptor strtoull$descriptor() {
        return strtoull.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long long strtoull(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static MethodHandle strtoull$handle() {
        return strtoull.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long long strtoull(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static MemorySegment strtoull$address() {
        return strtoull.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long long strtoull(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static long strtoull(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = strtoull.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtoull", _String, _EndPtr, _Radix);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _strtoull_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_strtoull_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long long _strtoull_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _strtoull_l$descriptor() {
        return _strtoull_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long long _strtoull_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MethodHandle _strtoull_l$handle() {
        return _strtoull_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long long _strtoull_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MemorySegment _strtoull_l$address() {
        return _strtoull_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long long _strtoull_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static long _strtoull_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _strtoull_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_strtoull_l", _String, _EndPtr, _Radix, _Locale);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _strtoi64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_strtoi64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _strtoi64(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static FunctionDescriptor _strtoi64$descriptor() {
        return _strtoi64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _strtoi64(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static MethodHandle _strtoi64$handle() {
        return _strtoi64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _strtoi64(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static MemorySegment _strtoi64$address() {
        return _strtoi64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _strtoi64(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static long _strtoi64(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = _strtoi64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_strtoi64", _String, _EndPtr, _Radix);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _strtoi64_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_strtoi64_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _strtoi64_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _strtoi64_l$descriptor() {
        return _strtoi64_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _strtoi64_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MethodHandle _strtoi64_l$handle() {
        return _strtoi64_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _strtoi64_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MemorySegment _strtoi64_l$address() {
        return _strtoi64_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _strtoi64_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static long _strtoi64_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _strtoi64_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_strtoi64_l", _String, _EndPtr, _Radix, _Locale);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _strtoui64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_strtoui64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long long _strtoui64(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static FunctionDescriptor _strtoui64$descriptor() {
        return _strtoui64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long long _strtoui64(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static MethodHandle _strtoui64$handle() {
        return _strtoui64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long long _strtoui64(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static MemorySegment _strtoui64$address() {
        return _strtoui64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long long _strtoui64(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static long _strtoui64(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = _strtoui64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_strtoui64", _String, _EndPtr, _Radix);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _strtoui64_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_strtoui64_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long long _strtoui64_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _strtoui64_l$descriptor() {
        return _strtoui64_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long long _strtoui64_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MethodHandle _strtoui64_l$handle() {
        return _strtoui64_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long long _strtoui64_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MemorySegment _strtoui64_l$address() {
        return _strtoui64_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long long _strtoui64_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static long _strtoui64_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _strtoui64_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_strtoui64_l", _String, _EndPtr, _Radix, _Locale);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _itoa_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_itoa_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _itoa_s(int _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static FunctionDescriptor _itoa_s$descriptor() {
        return _itoa_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _itoa_s(int _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MethodHandle _itoa_s$handle() {
        return _itoa_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _itoa_s(int _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MemorySegment _itoa_s$address() {
        return _itoa_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _itoa_s(int _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static int _itoa_s(int _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _itoa_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_itoa_s", _Value, _Buffer, _BufferCount, _Radix);
            }
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _itoa {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_itoa");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *_itoa(int _Value, char *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor _itoa$descriptor() {
        return _itoa.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *_itoa(int _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle _itoa$handle() {
        return _itoa.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *_itoa(int _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _itoa$address() {
        return _itoa.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *_itoa(int _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _itoa(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _itoa.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_itoa", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ltoa_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_ltoa_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _ltoa_s(long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static FunctionDescriptor _ltoa_s$descriptor() {
        return _ltoa_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _ltoa_s(long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MethodHandle _ltoa_s$handle() {
        return _ltoa_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _ltoa_s(long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MemorySegment _ltoa_s$address() {
        return _ltoa_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _ltoa_s(long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static int _ltoa_s(int _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _ltoa_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ltoa_s", _Value, _Buffer, _BufferCount, _Radix);
            }
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ltoa {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_ltoa");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *_ltoa(long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor _ltoa$descriptor() {
        return _ltoa.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *_ltoa(long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle _ltoa$handle() {
        return _ltoa.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *_ltoa(long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _ltoa$address() {
        return _ltoa.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *_ltoa(long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _ltoa(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _ltoa.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ltoa", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ultoa_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_ultoa_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _ultoa_s(unsigned long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static FunctionDescriptor _ultoa_s$descriptor() {
        return _ultoa_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _ultoa_s(unsigned long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MethodHandle _ultoa_s$handle() {
        return _ultoa_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _ultoa_s(unsigned long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MemorySegment _ultoa_s$address() {
        return _ultoa_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _ultoa_s(unsigned long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static int _ultoa_s(int _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _ultoa_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ultoa_s", _Value, _Buffer, _BufferCount, _Radix);
            }
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ultoa {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_ultoa");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *_ultoa(unsigned long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor _ultoa$descriptor() {
        return _ultoa.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *_ultoa(unsigned long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle _ultoa$handle() {
        return _ultoa.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *_ultoa(unsigned long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _ultoa$address() {
        return _ultoa.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *_ultoa(unsigned long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _ultoa(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _ultoa.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ultoa", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _i64toa_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_i64toa_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _i64toa_s(long long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static FunctionDescriptor _i64toa_s$descriptor() {
        return _i64toa_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _i64toa_s(long long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MethodHandle _i64toa_s$handle() {
        return _i64toa_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _i64toa_s(long long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MemorySegment _i64toa_s$address() {
        return _i64toa_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _i64toa_s(long long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static int _i64toa_s(long _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _i64toa_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_i64toa_s", _Value, _Buffer, _BufferCount, _Radix);
            }
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _i64toa {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_i64toa");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *_i64toa(long long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor _i64toa$descriptor() {
        return _i64toa.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *_i64toa(long long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle _i64toa$handle() {
        return _i64toa.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *_i64toa(long long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _i64toa$address() {
        return _i64toa.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *_i64toa(long long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _i64toa(long _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _i64toa.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_i64toa", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ui64toa_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_ui64toa_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _ui64toa_s(unsigned long long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static FunctionDescriptor _ui64toa_s$descriptor() {
        return _ui64toa_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _ui64toa_s(unsigned long long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MethodHandle _ui64toa_s$handle() {
        return _ui64toa_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _ui64toa_s(unsigned long long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MemorySegment _ui64toa_s$address() {
        return _ui64toa_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _ui64toa_s(unsigned long long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static int _ui64toa_s(long _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _ui64toa_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ui64toa_s", _Value, _Buffer, _BufferCount, _Radix);
            }
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ui64toa {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_ui64toa");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *_ui64toa(unsigned long long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor _ui64toa$descriptor() {
        return _ui64toa.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *_ui64toa(unsigned long long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle _ui64toa$handle() {
        return _ui64toa.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *_ui64toa(unsigned long long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _ui64toa$address() {
        return _ui64toa.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *_ui64toa(unsigned long long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _ui64toa(long _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _ui64toa.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ui64toa", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ecvt_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_DOUBLE,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_ecvt_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _ecvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _DigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static FunctionDescriptor _ecvt_s$descriptor() {
        return _ecvt_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _ecvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _DigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MethodHandle _ecvt_s$handle() {
        return _ecvt_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _ecvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _DigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MemorySegment _ecvt_s$address() {
        return _ecvt_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _ecvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _DigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static int _ecvt_s(MemorySegment _Buffer, long _BufferCount, double _Value, int _DigitCount, MemorySegment _PtDec, MemorySegment _PtSign) {
        var mh$ = _ecvt_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ecvt_s", _Buffer, _BufferCount, _Value, _DigitCount, _PtDec, _PtSign);
            }
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _Value, _DigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ecvt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_DOUBLE,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_ecvt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *_ecvt(double _Value, int _DigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static FunctionDescriptor _ecvt$descriptor() {
        return _ecvt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *_ecvt(double _Value, int _DigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MethodHandle _ecvt$handle() {
        return _ecvt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *_ecvt(double _Value, int _DigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MemorySegment _ecvt$address() {
        return _ecvt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *_ecvt(double _Value, int _DigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MemorySegment _ecvt(double _Value, int _DigitCount, MemorySegment _PtDec, MemorySegment _PtSign) {
        var mh$ = _ecvt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ecvt", _Value, _DigitCount, _PtDec, _PtSign);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _DigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _fcvt_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_DOUBLE,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_fcvt_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _fcvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static FunctionDescriptor _fcvt_s$descriptor() {
        return _fcvt_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _fcvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MethodHandle _fcvt_s$handle() {
        return _fcvt_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _fcvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MemorySegment _fcvt_s$address() {
        return _fcvt_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _fcvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static int _fcvt_s(MemorySegment _Buffer, long _BufferCount, double _Value, int _FractionalDigitCount, MemorySegment _PtDec, MemorySegment _PtSign) {
        var mh$ = _fcvt_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_fcvt_s", _Buffer, _BufferCount, _Value, _FractionalDigitCount, _PtDec, _PtSign);
            }
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _Value, _FractionalDigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _fcvt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_DOUBLE,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_fcvt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *_fcvt(double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static FunctionDescriptor _fcvt$descriptor() {
        return _fcvt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *_fcvt(double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MethodHandle _fcvt$handle() {
        return _fcvt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *_fcvt(double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MemorySegment _fcvt$address() {
        return _fcvt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *_fcvt(double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MemorySegment _fcvt(double _Value, int _FractionalDigitCount, MemorySegment _PtDec, MemorySegment _PtSign) {
        var mh$ = _fcvt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_fcvt", _Value, _FractionalDigitCount, _PtDec, _PtSign);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _FractionalDigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _gcvt_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_DOUBLE,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_gcvt_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _gcvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _DigitCount)
     * }
     */
    public static FunctionDescriptor _gcvt_s$descriptor() {
        return _gcvt_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _gcvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _DigitCount)
     * }
     */
    public static MethodHandle _gcvt_s$handle() {
        return _gcvt_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _gcvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _DigitCount)
     * }
     */
    public static MemorySegment _gcvt_s$address() {
        return _gcvt_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _gcvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _DigitCount)
     * }
     */
    public static int _gcvt_s(MemorySegment _Buffer, long _BufferCount, double _Value, int _DigitCount) {
        var mh$ = _gcvt_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gcvt_s", _Buffer, _BufferCount, _Value, _DigitCount);
            }
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _Value, _DigitCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _gcvt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_DOUBLE,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_gcvt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *_gcvt(double _Value, int _DigitCount, char *_Buffer)
     * }
     */
    public static FunctionDescriptor _gcvt$descriptor() {
        return _gcvt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *_gcvt(double _Value, int _DigitCount, char *_Buffer)
     * }
     */
    public static MethodHandle _gcvt$handle() {
        return _gcvt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *_gcvt(double _Value, int _DigitCount, char *_Buffer)
     * }
     */
    public static MemorySegment _gcvt$address() {
        return _gcvt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *_gcvt(double _Value, int _DigitCount, char *_Buffer)
     * }
     */
    public static MemorySegment _gcvt(double _Value, int _DigitCount, MemorySegment _Buffer) {
        var mh$ = _gcvt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gcvt", _Value, _DigitCount, _Buffer);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _DigitCount, _Buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mblen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mblen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mblen(const char *_Ch, size_t _MaxCount)
     * }
     */
    public static FunctionDescriptor mblen$descriptor() {
        return mblen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mblen(const char *_Ch, size_t _MaxCount)
     * }
     */
    public static MethodHandle mblen$handle() {
        return mblen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mblen(const char *_Ch, size_t _MaxCount)
     * }
     */
    public static MemorySegment mblen$address() {
        return mblen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mblen(const char *_Ch, size_t _MaxCount)
     * }
     */
    public static int mblen(MemorySegment _Ch, long _MaxCount) {
        var mh$ = mblen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mblen", _Ch, _MaxCount);
            }
            return (int)mh$.invokeExact(_Ch, _MaxCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _mblen_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_mblen_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _mblen_l(const char *_Ch, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _mblen_l$descriptor() {
        return _mblen_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _mblen_l(const char *_Ch, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static MethodHandle _mblen_l$handle() {
        return _mblen_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _mblen_l(const char *_Ch, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static MemorySegment _mblen_l$address() {
        return _mblen_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _mblen_l(const char *_Ch, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static int _mblen_l(MemorySegment _Ch, long _MaxCount, MemorySegment _Locale) {
        var mh$ = _mblen_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_mblen_l", _Ch, _MaxCount, _Locale);
            }
            return (int)mh$.invokeExact(_Ch, _MaxCount, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _mbstrlen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_mbstrlen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t _mbstrlen(const char *_String)
     * }
     */
    public static FunctionDescriptor _mbstrlen$descriptor() {
        return _mbstrlen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t _mbstrlen(const char *_String)
     * }
     */
    public static MethodHandle _mbstrlen$handle() {
        return _mbstrlen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t _mbstrlen(const char *_String)
     * }
     */
    public static MemorySegment _mbstrlen$address() {
        return _mbstrlen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t _mbstrlen(const char *_String)
     * }
     */
    public static long _mbstrlen(MemorySegment _String) {
        var mh$ = _mbstrlen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_mbstrlen", _String);
            }
            return (long)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _mbstrlen_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_mbstrlen_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t _mbstrlen_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _mbstrlen_l$descriptor() {
        return _mbstrlen_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t _mbstrlen_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _mbstrlen_l$handle() {
        return _mbstrlen_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t _mbstrlen_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _mbstrlen_l$address() {
        return _mbstrlen_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t _mbstrlen_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static long _mbstrlen_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _mbstrlen_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_mbstrlen_l", _String, _Locale);
            }
            return (long)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _mbstrnlen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_mbstrnlen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t _mbstrnlen(const char *_String, size_t _MaxCount)
     * }
     */
    public static FunctionDescriptor _mbstrnlen$descriptor() {
        return _mbstrnlen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t _mbstrnlen(const char *_String, size_t _MaxCount)
     * }
     */
    public static MethodHandle _mbstrnlen$handle() {
        return _mbstrnlen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t _mbstrnlen(const char *_String, size_t _MaxCount)
     * }
     */
    public static MemorySegment _mbstrnlen$address() {
        return _mbstrnlen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t _mbstrnlen(const char *_String, size_t _MaxCount)
     * }
     */
    public static long _mbstrnlen(MemorySegment _String, long _MaxCount) {
        var mh$ = _mbstrnlen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_mbstrnlen", _String, _MaxCount);
            }
            return (long)mh$.invokeExact(_String, _MaxCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _mbstrnlen_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_mbstrnlen_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t _mbstrnlen_l(const char *_String, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _mbstrnlen_l$descriptor() {
        return _mbstrnlen_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t _mbstrnlen_l(const char *_String, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static MethodHandle _mbstrnlen_l$handle() {
        return _mbstrnlen_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t _mbstrnlen_l(const char *_String, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static MemorySegment _mbstrnlen_l$address() {
        return _mbstrnlen_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t _mbstrnlen_l(const char *_String, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static long _mbstrnlen_l(MemorySegment _String, long _MaxCount, MemorySegment _Locale) {
        var mh$ = _mbstrnlen_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_mbstrnlen_l", _String, _MaxCount, _Locale);
            }
            return (long)mh$.invokeExact(_String, _MaxCount, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mbtowc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mbtowc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mbtowc(wchar_t *_DstCh, const char *_SrcCh, size_t _SrcSizeInBytes)
     * }
     */
    public static FunctionDescriptor mbtowc$descriptor() {
        return mbtowc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mbtowc(wchar_t *_DstCh, const char *_SrcCh, size_t _SrcSizeInBytes)
     * }
     */
    public static MethodHandle mbtowc$handle() {
        return mbtowc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mbtowc(wchar_t *_DstCh, const char *_SrcCh, size_t _SrcSizeInBytes)
     * }
     */
    public static MemorySegment mbtowc$address() {
        return mbtowc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mbtowc(wchar_t *_DstCh, const char *_SrcCh, size_t _SrcSizeInBytes)
     * }
     */
    public static int mbtowc(MemorySegment _DstCh, MemorySegment _SrcCh, long _SrcSizeInBytes) {
        var mh$ = mbtowc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mbtowc", _DstCh, _SrcCh, _SrcSizeInBytes);
            }
            return (int)mh$.invokeExact(_DstCh, _SrcCh, _SrcSizeInBytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _mbtowc_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_mbtowc_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _mbtowc_l(wchar_t *_DstCh, const char *_SrcCh, size_t _SrcSizeInBytes, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _mbtowc_l$descriptor() {
        return _mbtowc_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _mbtowc_l(wchar_t *_DstCh, const char *_SrcCh, size_t _SrcSizeInBytes, _locale_t _Locale)
     * }
     */
    public static MethodHandle _mbtowc_l$handle() {
        return _mbtowc_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _mbtowc_l(wchar_t *_DstCh, const char *_SrcCh, size_t _SrcSizeInBytes, _locale_t _Locale)
     * }
     */
    public static MemorySegment _mbtowc_l$address() {
        return _mbtowc_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _mbtowc_l(wchar_t *_DstCh, const char *_SrcCh, size_t _SrcSizeInBytes, _locale_t _Locale)
     * }
     */
    public static int _mbtowc_l(MemorySegment _DstCh, MemorySegment _SrcCh, long _SrcSizeInBytes, MemorySegment _Locale) {
        var mh$ = _mbtowc_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_mbtowc_l", _DstCh, _SrcCh, _SrcSizeInBytes, _Locale);
            }
            return (int)mh$.invokeExact(_DstCh, _SrcCh, _SrcSizeInBytes, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mbstowcs_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mbstowcs_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t mbstowcs_s(size_t *_PtNumOfCharConverted, wchar_t *_DstBuf, size_t _SizeInWords, const char *_SrcBuf, size_t _MaxCount)
     * }
     */
    public static FunctionDescriptor mbstowcs_s$descriptor() {
        return mbstowcs_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t mbstowcs_s(size_t *_PtNumOfCharConverted, wchar_t *_DstBuf, size_t _SizeInWords, const char *_SrcBuf, size_t _MaxCount)
     * }
     */
    public static MethodHandle mbstowcs_s$handle() {
        return mbstowcs_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t mbstowcs_s(size_t *_PtNumOfCharConverted, wchar_t *_DstBuf, size_t _SizeInWords, const char *_SrcBuf, size_t _MaxCount)
     * }
     */
    public static MemorySegment mbstowcs_s$address() {
        return mbstowcs_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t mbstowcs_s(size_t *_PtNumOfCharConverted, wchar_t *_DstBuf, size_t _SizeInWords, const char *_SrcBuf, size_t _MaxCount)
     * }
     */
    public static int mbstowcs_s(MemorySegment _PtNumOfCharConverted, MemorySegment _DstBuf, long _SizeInWords, MemorySegment _SrcBuf, long _MaxCount) {
        var mh$ = mbstowcs_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mbstowcs_s", _PtNumOfCharConverted, _DstBuf, _SizeInWords, _SrcBuf, _MaxCount);
            }
            return (int)mh$.invokeExact(_PtNumOfCharConverted, _DstBuf, _SizeInWords, _SrcBuf, _MaxCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mbstowcs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("mbstowcs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t mbstowcs(wchar_t *_Dest, const char *_Source, size_t _MaxCount)
     * }
     */
    public static FunctionDescriptor mbstowcs$descriptor() {
        return mbstowcs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t mbstowcs(wchar_t *_Dest, const char *_Source, size_t _MaxCount)
     * }
     */
    public static MethodHandle mbstowcs$handle() {
        return mbstowcs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t mbstowcs(wchar_t *_Dest, const char *_Source, size_t _MaxCount)
     * }
     */
    public static MemorySegment mbstowcs$address() {
        return mbstowcs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t mbstowcs(wchar_t *_Dest, const char *_Source, size_t _MaxCount)
     * }
     */
    public static long mbstowcs(MemorySegment _Dest, MemorySegment _Source, long _MaxCount) {
        var mh$ = mbstowcs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mbstowcs", _Dest, _Source, _MaxCount);
            }
            return (long)mh$.invokeExact(_Dest, _Source, _MaxCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _mbstowcs_s_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_mbstowcs_s_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _mbstowcs_s_l(size_t *_PtNumOfCharConverted, wchar_t *_DstBuf, size_t _SizeInWords, const char *_SrcBuf, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _mbstowcs_s_l$descriptor() {
        return _mbstowcs_s_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _mbstowcs_s_l(size_t *_PtNumOfCharConverted, wchar_t *_DstBuf, size_t _SizeInWords, const char *_SrcBuf, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static MethodHandle _mbstowcs_s_l$handle() {
        return _mbstowcs_s_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _mbstowcs_s_l(size_t *_PtNumOfCharConverted, wchar_t *_DstBuf, size_t _SizeInWords, const char *_SrcBuf, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static MemorySegment _mbstowcs_s_l$address() {
        return _mbstowcs_s_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _mbstowcs_s_l(size_t *_PtNumOfCharConverted, wchar_t *_DstBuf, size_t _SizeInWords, const char *_SrcBuf, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static int _mbstowcs_s_l(MemorySegment _PtNumOfCharConverted, MemorySegment _DstBuf, long _SizeInWords, MemorySegment _SrcBuf, long _MaxCount, MemorySegment _Locale) {
        var mh$ = _mbstowcs_s_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_mbstowcs_s_l", _PtNumOfCharConverted, _DstBuf, _SizeInWords, _SrcBuf, _MaxCount, _Locale);
            }
            return (int)mh$.invokeExact(_PtNumOfCharConverted, _DstBuf, _SizeInWords, _SrcBuf, _MaxCount, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _mbstowcs_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_mbstowcs_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t _mbstowcs_l(wchar_t *_Dest, const char *_Source, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _mbstowcs_l$descriptor() {
        return _mbstowcs_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t _mbstowcs_l(wchar_t *_Dest, const char *_Source, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static MethodHandle _mbstowcs_l$handle() {
        return _mbstowcs_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t _mbstowcs_l(wchar_t *_Dest, const char *_Source, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static MemorySegment _mbstowcs_l$address() {
        return _mbstowcs_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t _mbstowcs_l(wchar_t *_Dest, const char *_Source, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static long _mbstowcs_l(MemorySegment _Dest, MemorySegment _Source, long _MaxCount, MemorySegment _Locale) {
        var mh$ = _mbstowcs_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_mbstowcs_l", _Dest, _Source, _MaxCount, _Locale);
            }
            return (long)mh$.invokeExact(_Dest, _Source, _MaxCount, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wctomb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_SHORT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("wctomb");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int wctomb(char *_MbCh, wchar_t _WCh)
     * }
     */
    public static FunctionDescriptor wctomb$descriptor() {
        return wctomb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int wctomb(char *_MbCh, wchar_t _WCh)
     * }
     */
    public static MethodHandle wctomb$handle() {
        return wctomb.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int wctomb(char *_MbCh, wchar_t _WCh)
     * }
     */
    public static MemorySegment wctomb$address() {
        return wctomb.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int wctomb(char *_MbCh, wchar_t _WCh)
     * }
     */
    public static int wctomb(MemorySegment _MbCh, short _WCh) {
        var mh$ = wctomb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wctomb", _MbCh, _WCh);
            }
            return (int)mh$.invokeExact(_MbCh, _WCh);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wctomb_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wctomb_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _wctomb_l(char *_MbCh, wchar_t _WCh, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wctomb_l$descriptor() {
        return _wctomb_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _wctomb_l(char *_MbCh, wchar_t _WCh, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wctomb_l$handle() {
        return _wctomb_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _wctomb_l(char *_MbCh, wchar_t _WCh, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wctomb_l$address() {
        return _wctomb_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _wctomb_l(char *_MbCh, wchar_t _WCh, _locale_t _Locale)
     * }
     */
    public static int _wctomb_l(MemorySegment _MbCh, short _WCh, MemorySegment _Locale) {
        var mh$ = _wctomb_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wctomb_l", _MbCh, _WCh, _Locale);
            }
            return (int)mh$.invokeExact(_MbCh, _WCh, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wctomb_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_SHORT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("wctomb_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t wctomb_s(int *_SizeConverted, char *_MbCh, rsize_t _SizeInBytes, wchar_t _WCh)
     * }
     */
    public static FunctionDescriptor wctomb_s$descriptor() {
        return wctomb_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t wctomb_s(int *_SizeConverted, char *_MbCh, rsize_t _SizeInBytes, wchar_t _WCh)
     * }
     */
    public static MethodHandle wctomb_s$handle() {
        return wctomb_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t wctomb_s(int *_SizeConverted, char *_MbCh, rsize_t _SizeInBytes, wchar_t _WCh)
     * }
     */
    public static MemorySegment wctomb_s$address() {
        return wctomb_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t wctomb_s(int *_SizeConverted, char *_MbCh, rsize_t _SizeInBytes, wchar_t _WCh)
     * }
     */
    public static int wctomb_s(MemorySegment _SizeConverted, MemorySegment _MbCh, long _SizeInBytes, short _WCh) {
        var mh$ = wctomb_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wctomb_s", _SizeConverted, _MbCh, _SizeInBytes, _WCh);
            }
            return (int)mh$.invokeExact(_SizeConverted, _MbCh, _SizeInBytes, _WCh);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wctomb_s_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wctomb_s_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _wctomb_s_l(int *_SizeConverted, char *_MbCh, size_t _SizeInBytes, wchar_t _WCh, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wctomb_s_l$descriptor() {
        return _wctomb_s_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _wctomb_s_l(int *_SizeConverted, char *_MbCh, size_t _SizeInBytes, wchar_t _WCh, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wctomb_s_l$handle() {
        return _wctomb_s_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _wctomb_s_l(int *_SizeConverted, char *_MbCh, size_t _SizeInBytes, wchar_t _WCh, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wctomb_s_l$address() {
        return _wctomb_s_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _wctomb_s_l(int *_SizeConverted, char *_MbCh, size_t _SizeInBytes, wchar_t _WCh, _locale_t _Locale)
     * }
     */
    public static int _wctomb_s_l(MemorySegment _SizeConverted, MemorySegment _MbCh, long _SizeInBytes, short _WCh, MemorySegment _Locale) {
        var mh$ = _wctomb_s_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wctomb_s_l", _SizeConverted, _MbCh, _SizeInBytes, _WCh, _Locale);
            }
            return (int)mh$.invokeExact(_SizeConverted, _MbCh, _SizeInBytes, _WCh, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wcstombs_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("wcstombs_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t wcstombs_s(size_t *_PtNumOfCharConverted, char *_Dst, size_t _DstSizeInBytes, const wchar_t *_Src, size_t _MaxCountInBytes)
     * }
     */
    public static FunctionDescriptor wcstombs_s$descriptor() {
        return wcstombs_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t wcstombs_s(size_t *_PtNumOfCharConverted, char *_Dst, size_t _DstSizeInBytes, const wchar_t *_Src, size_t _MaxCountInBytes)
     * }
     */
    public static MethodHandle wcstombs_s$handle() {
        return wcstombs_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t wcstombs_s(size_t *_PtNumOfCharConverted, char *_Dst, size_t _DstSizeInBytes, const wchar_t *_Src, size_t _MaxCountInBytes)
     * }
     */
    public static MemorySegment wcstombs_s$address() {
        return wcstombs_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t wcstombs_s(size_t *_PtNumOfCharConverted, char *_Dst, size_t _DstSizeInBytes, const wchar_t *_Src, size_t _MaxCountInBytes)
     * }
     */
    public static int wcstombs_s(MemorySegment _PtNumOfCharConverted, MemorySegment _Dst, long _DstSizeInBytes, MemorySegment _Src, long _MaxCountInBytes) {
        var mh$ = wcstombs_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wcstombs_s", _PtNumOfCharConverted, _Dst, _DstSizeInBytes, _Src, _MaxCountInBytes);
            }
            return (int)mh$.invokeExact(_PtNumOfCharConverted, _Dst, _DstSizeInBytes, _Src, _MaxCountInBytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wcstombs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("wcstombs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t wcstombs(char *_Dest, const wchar_t *_Source, size_t _MaxCount)
     * }
     */
    public static FunctionDescriptor wcstombs$descriptor() {
        return wcstombs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t wcstombs(char *_Dest, const wchar_t *_Source, size_t _MaxCount)
     * }
     */
    public static MethodHandle wcstombs$handle() {
        return wcstombs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t wcstombs(char *_Dest, const wchar_t *_Source, size_t _MaxCount)
     * }
     */
    public static MemorySegment wcstombs$address() {
        return wcstombs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t wcstombs(char *_Dest, const wchar_t *_Source, size_t _MaxCount)
     * }
     */
    public static long wcstombs(MemorySegment _Dest, MemorySegment _Source, long _MaxCount) {
        var mh$ = wcstombs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wcstombs", _Dest, _Source, _MaxCount);
            }
            return (long)mh$.invokeExact(_Dest, _Source, _MaxCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstombs_s_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wcstombs_s_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _wcstombs_s_l(size_t *_PtNumOfCharConverted, char *_Dst, size_t _DstSizeInBytes, const wchar_t *_Src, size_t _MaxCountInBytes, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wcstombs_s_l$descriptor() {
        return _wcstombs_s_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _wcstombs_s_l(size_t *_PtNumOfCharConverted, char *_Dst, size_t _DstSizeInBytes, const wchar_t *_Src, size_t _MaxCountInBytes, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wcstombs_s_l$handle() {
        return _wcstombs_s_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _wcstombs_s_l(size_t *_PtNumOfCharConverted, char *_Dst, size_t _DstSizeInBytes, const wchar_t *_Src, size_t _MaxCountInBytes, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wcstombs_s_l$address() {
        return _wcstombs_s_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _wcstombs_s_l(size_t *_PtNumOfCharConverted, char *_Dst, size_t _DstSizeInBytes, const wchar_t *_Src, size_t _MaxCountInBytes, _locale_t _Locale)
     * }
     */
    public static int _wcstombs_s_l(MemorySegment _PtNumOfCharConverted, MemorySegment _Dst, long _DstSizeInBytes, MemorySegment _Src, long _MaxCountInBytes, MemorySegment _Locale) {
        var mh$ = _wcstombs_s_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstombs_s_l", _PtNumOfCharConverted, _Dst, _DstSizeInBytes, _Src, _MaxCountInBytes, _Locale);
            }
            return (int)mh$.invokeExact(_PtNumOfCharConverted, _Dst, _DstSizeInBytes, _Src, _MaxCountInBytes, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstombs_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_wcstombs_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t _wcstombs_l(char *_Dest, const wchar_t *_Source, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wcstombs_l$descriptor() {
        return _wcstombs_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t _wcstombs_l(char *_Dest, const wchar_t *_Source, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wcstombs_l$handle() {
        return _wcstombs_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t _wcstombs_l(char *_Dest, const wchar_t *_Source, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wcstombs_l$address() {
        return _wcstombs_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t _wcstombs_l(char *_Dest, const wchar_t *_Source, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static long _wcstombs_l(MemorySegment _Dest, MemorySegment _Source, long _MaxCount, MemorySegment _Locale) {
        var mh$ = _wcstombs_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstombs_l", _Dest, _Source, _MaxCount, _Locale);
            }
            return (long)mh$.invokeExact(_Dest, _Source, _MaxCount, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _fullpath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_fullpath");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *_fullpath(char *_Buffer, const char *_Path, size_t _BufferCount)
     * }
     */
    public static FunctionDescriptor _fullpath$descriptor() {
        return _fullpath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *_fullpath(char *_Buffer, const char *_Path, size_t _BufferCount)
     * }
     */
    public static MethodHandle _fullpath$handle() {
        return _fullpath.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *_fullpath(char *_Buffer, const char *_Path, size_t _BufferCount)
     * }
     */
    public static MemorySegment _fullpath$address() {
        return _fullpath.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *_fullpath(char *_Buffer, const char *_Path, size_t _BufferCount)
     * }
     */
    public static MemorySegment _fullpath(MemorySegment _Buffer, MemorySegment _Path, long _BufferCount) {
        var mh$ = _fullpath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_fullpath", _Buffer, _Path, _BufferCount);
            }
            return (MemorySegment)mh$.invokeExact(_Buffer, _Path, _BufferCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _makepath_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_makepath_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _makepath_s(char *_Buffer, size_t _BufferCount, const char *_Drive, const char *_Dir, const char *_Filename, const char *_Ext)
     * }
     */
    public static FunctionDescriptor _makepath_s$descriptor() {
        return _makepath_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _makepath_s(char *_Buffer, size_t _BufferCount, const char *_Drive, const char *_Dir, const char *_Filename, const char *_Ext)
     * }
     */
    public static MethodHandle _makepath_s$handle() {
        return _makepath_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _makepath_s(char *_Buffer, size_t _BufferCount, const char *_Drive, const char *_Dir, const char *_Filename, const char *_Ext)
     * }
     */
    public static MemorySegment _makepath_s$address() {
        return _makepath_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _makepath_s(char *_Buffer, size_t _BufferCount, const char *_Drive, const char *_Dir, const char *_Filename, const char *_Ext)
     * }
     */
    public static int _makepath_s(MemorySegment _Buffer, long _BufferCount, MemorySegment _Drive, MemorySegment _Dir, MemorySegment _Filename, MemorySegment _Ext) {
        var mh$ = _makepath_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_makepath_s", _Buffer, _BufferCount, _Drive, _Dir, _Filename, _Ext);
            }
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _makepath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_makepath");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _makepath(char *_Buffer, const char *_Drive, const char *_Dir, const char *_Filename, const char *_Ext)
     * }
     */
    public static FunctionDescriptor _makepath$descriptor() {
        return _makepath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _makepath(char *_Buffer, const char *_Drive, const char *_Dir, const char *_Filename, const char *_Ext)
     * }
     */
    public static MethodHandle _makepath$handle() {
        return _makepath.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _makepath(char *_Buffer, const char *_Drive, const char *_Dir, const char *_Filename, const char *_Ext)
     * }
     */
    public static MemorySegment _makepath$address() {
        return _makepath.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _makepath(char *_Buffer, const char *_Drive, const char *_Dir, const char *_Filename, const char *_Ext)
     * }
     */
    public static void _makepath(MemorySegment _Buffer, MemorySegment _Drive, MemorySegment _Dir, MemorySegment _Filename, MemorySegment _Ext) {
        var mh$ = _makepath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_makepath", _Buffer, _Drive, _Dir, _Filename, _Ext);
            }
            mh$.invokeExact(_Buffer, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _splitpath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_splitpath");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _splitpath(const char *_FullPath, char *_Drive, char *_Dir, char *_Filename, char *_Ext)
     * }
     */
    public static FunctionDescriptor _splitpath$descriptor() {
        return _splitpath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _splitpath(const char *_FullPath, char *_Drive, char *_Dir, char *_Filename, char *_Ext)
     * }
     */
    public static MethodHandle _splitpath$handle() {
        return _splitpath.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _splitpath(const char *_FullPath, char *_Drive, char *_Dir, char *_Filename, char *_Ext)
     * }
     */
    public static MemorySegment _splitpath$address() {
        return _splitpath.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _splitpath(const char *_FullPath, char *_Drive, char *_Dir, char *_Filename, char *_Ext)
     * }
     */
    public static void _splitpath(MemorySegment _FullPath, MemorySegment _Drive, MemorySegment _Dir, MemorySegment _Filename, MemorySegment _Ext) {
        var mh$ = _splitpath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_splitpath", _FullPath, _Drive, _Dir, _Filename, _Ext);
            }
            mh$.invokeExact(_FullPath, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _splitpath_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_splitpath_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _splitpath_s(const char *_FullPath, char *_Drive, size_t _DriveCount, char *_Dir, size_t _DirCount, char *_Filename, size_t _FilenameCount, char *_Ext, size_t _ExtCount)
     * }
     */
    public static FunctionDescriptor _splitpath_s$descriptor() {
        return _splitpath_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _splitpath_s(const char *_FullPath, char *_Drive, size_t _DriveCount, char *_Dir, size_t _DirCount, char *_Filename, size_t _FilenameCount, char *_Ext, size_t _ExtCount)
     * }
     */
    public static MethodHandle _splitpath_s$handle() {
        return _splitpath_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _splitpath_s(const char *_FullPath, char *_Drive, size_t _DriveCount, char *_Dir, size_t _DirCount, char *_Filename, size_t _FilenameCount, char *_Ext, size_t _ExtCount)
     * }
     */
    public static MemorySegment _splitpath_s$address() {
        return _splitpath_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _splitpath_s(const char *_FullPath, char *_Drive, size_t _DriveCount, char *_Dir, size_t _DirCount, char *_Filename, size_t _FilenameCount, char *_Ext, size_t _ExtCount)
     * }
     */
    public static int _splitpath_s(MemorySegment _FullPath, MemorySegment _Drive, long _DriveCount, MemorySegment _Dir, long _DirCount, MemorySegment _Filename, long _FilenameCount, MemorySegment _Ext, long _ExtCount) {
        var mh$ = _splitpath_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_splitpath_s", _FullPath, _Drive, _DriveCount, _Dir, _DirCount, _Filename, _FilenameCount, _Ext, _ExtCount);
            }
            return (int)mh$.invokeExact(_FullPath, _Drive, _DriveCount, _Dir, _DirCount, _Filename, _FilenameCount, _Ext, _ExtCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getenv_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("getenv_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t getenv_s(size_t *_RequiredCount, char *_Buffer, rsize_t _BufferCount, const char *_VarName)
     * }
     */
    public static FunctionDescriptor getenv_s$descriptor() {
        return getenv_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t getenv_s(size_t *_RequiredCount, char *_Buffer, rsize_t _BufferCount, const char *_VarName)
     * }
     */
    public static MethodHandle getenv_s$handle() {
        return getenv_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t getenv_s(size_t *_RequiredCount, char *_Buffer, rsize_t _BufferCount, const char *_VarName)
     * }
     */
    public static MemorySegment getenv_s$address() {
        return getenv_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t getenv_s(size_t *_RequiredCount, char *_Buffer, rsize_t _BufferCount, const char *_VarName)
     * }
     */
    public static int getenv_s(MemorySegment _RequiredCount, MemorySegment _Buffer, long _BufferCount, MemorySegment _VarName) {
        var mh$ = getenv_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getenv_s", _RequiredCount, _Buffer, _BufferCount, _VarName);
            }
            return (int)mh$.invokeExact(_RequiredCount, _Buffer, _BufferCount, _VarName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __p___argc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("__p___argc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int *__p___argc()
     * }
     */
    public static FunctionDescriptor __p___argc$descriptor() {
        return __p___argc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int *__p___argc()
     * }
     */
    public static MethodHandle __p___argc$handle() {
        return __p___argc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int *__p___argc()
     * }
     */
    public static MemorySegment __p___argc$address() {
        return __p___argc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int *__p___argc()
     * }
     */
    public static MemorySegment __p___argc() {
        var mh$ = __p___argc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__p___argc");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __p___argv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("__p___argv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char ***__p___argv()
     * }
     */
    public static FunctionDescriptor __p___argv$descriptor() {
        return __p___argv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char ***__p___argv()
     * }
     */
    public static MethodHandle __p___argv$handle() {
        return __p___argv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char ***__p___argv()
     * }
     */
    public static MemorySegment __p___argv$address() {
        return __p___argv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char ***__p___argv()
     * }
     */
    public static MemorySegment __p___argv() {
        var mh$ = __p___argv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__p___argv");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __p___wargv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("__p___wargv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wchar_t ***__p___wargv()
     * }
     */
    public static FunctionDescriptor __p___wargv$descriptor() {
        return __p___wargv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wchar_t ***__p___wargv()
     * }
     */
    public static MethodHandle __p___wargv$handle() {
        return __p___wargv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wchar_t ***__p___wargv()
     * }
     */
    public static MemorySegment __p___wargv$address() {
        return __p___wargv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wchar_t ***__p___wargv()
     * }
     */
    public static MemorySegment __p___wargv() {
        var mh$ = __p___wargv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__p___wargv");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __p__environ {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("__p__environ");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char ***__p__environ()
     * }
     */
    public static FunctionDescriptor __p__environ$descriptor() {
        return __p__environ.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char ***__p__environ()
     * }
     */
    public static MethodHandle __p__environ$handle() {
        return __p__environ.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char ***__p__environ()
     * }
     */
    public static MemorySegment __p__environ$address() {
        return __p__environ.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char ***__p__environ()
     * }
     */
    public static MemorySegment __p__environ() {
        var mh$ = __p__environ.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__p__environ");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __p__wenviron {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("__p__wenviron");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wchar_t ***__p__wenviron()
     * }
     */
    public static FunctionDescriptor __p__wenviron$descriptor() {
        return __p__wenviron.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wchar_t ***__p__wenviron()
     * }
     */
    public static MethodHandle __p__wenviron$handle() {
        return __p__wenviron.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wchar_t ***__p__wenviron()
     * }
     */
    public static MemorySegment __p__wenviron$address() {
        return __p__wenviron.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wchar_t ***__p__wenviron()
     * }
     */
    public static MemorySegment __p__wenviron() {
        var mh$ = __p__wenviron.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__p__wenviron");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("getenv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *getenv(const char *_VarName)
     * }
     */
    public static FunctionDescriptor getenv$descriptor() {
        return getenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *getenv(const char *_VarName)
     * }
     */
    public static MethodHandle getenv$handle() {
        return getenv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *getenv(const char *_VarName)
     * }
     */
    public static MemorySegment getenv$address() {
        return getenv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *getenv(const char *_VarName)
     * }
     */
    public static MemorySegment getenv(MemorySegment _VarName) {
        var mh$ = getenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getenv", _VarName);
            }
            return (MemorySegment)mh$.invokeExact(_VarName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _dupenv_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_dupenv_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _dupenv_s(char **_Buffer, size_t *_BufferCount, const char *_VarName)
     * }
     */
    public static FunctionDescriptor _dupenv_s$descriptor() {
        return _dupenv_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _dupenv_s(char **_Buffer, size_t *_BufferCount, const char *_VarName)
     * }
     */
    public static MethodHandle _dupenv_s$handle() {
        return _dupenv_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _dupenv_s(char **_Buffer, size_t *_BufferCount, const char *_VarName)
     * }
     */
    public static MemorySegment _dupenv_s$address() {
        return _dupenv_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _dupenv_s(char **_Buffer, size_t *_BufferCount, const char *_VarName)
     * }
     */
    public static int _dupenv_s(MemorySegment _Buffer, MemorySegment _BufferCount, MemorySegment _VarName) {
        var mh$ = _dupenv_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_dupenv_s", _Buffer, _BufferCount, _VarName);
            }
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _VarName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class system {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("system");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int system(const char *_Command)
     * }
     */
    public static FunctionDescriptor system$descriptor() {
        return system.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int system(const char *_Command)
     * }
     */
    public static MethodHandle system$handle() {
        return system.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int system(const char *_Command)
     * }
     */
    public static MemorySegment system$address() {
        return system.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int system(const char *_Command)
     * }
     */
    public static int system(MemorySegment _Command) {
        var mh$ = system.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("system", _Command);
            }
            return (int)mh$.invokeExact(_Command);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _putenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_putenv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _putenv(const char *_EnvString)
     * }
     */
    public static FunctionDescriptor _putenv$descriptor() {
        return _putenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _putenv(const char *_EnvString)
     * }
     */
    public static MethodHandle _putenv$handle() {
        return _putenv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _putenv(const char *_EnvString)
     * }
     */
    public static MemorySegment _putenv$address() {
        return _putenv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _putenv(const char *_EnvString)
     * }
     */
    public static int _putenv(MemorySegment _EnvString) {
        var mh$ = _putenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_putenv", _EnvString);
            }
            return (int)mh$.invokeExact(_EnvString);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _putenv_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_putenv_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _putenv_s(const char *_Name, const char *_Value)
     * }
     */
    public static FunctionDescriptor _putenv_s$descriptor() {
        return _putenv_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _putenv_s(const char *_Name, const char *_Value)
     * }
     */
    public static MethodHandle _putenv_s$handle() {
        return _putenv_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _putenv_s(const char *_Name, const char *_Value)
     * }
     */
    public static MemorySegment _putenv_s$address() {
        return _putenv_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _putenv_s(const char *_Name, const char *_Value)
     * }
     */
    public static int _putenv_s(MemorySegment _Name, MemorySegment _Value) {
        var mh$ = _putenv_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_putenv_s", _Name, _Value);
            }
            return (int)mh$.invokeExact(_Name, _Value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _searchenv_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_searchenv_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _searchenv_s(const char *_Filename, const char *_VarName, char *_Buffer, size_t _BufferCount)
     * }
     */
    public static FunctionDescriptor _searchenv_s$descriptor() {
        return _searchenv_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _searchenv_s(const char *_Filename, const char *_VarName, char *_Buffer, size_t _BufferCount)
     * }
     */
    public static MethodHandle _searchenv_s$handle() {
        return _searchenv_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _searchenv_s(const char *_Filename, const char *_VarName, char *_Buffer, size_t _BufferCount)
     * }
     */
    public static MemorySegment _searchenv_s$address() {
        return _searchenv_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _searchenv_s(const char *_Filename, const char *_VarName, char *_Buffer, size_t _BufferCount)
     * }
     */
    public static int _searchenv_s(MemorySegment _Filename, MemorySegment _VarName, MemorySegment _Buffer, long _BufferCount) {
        var mh$ = _searchenv_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_searchenv_s", _Filename, _VarName, _Buffer, _BufferCount);
            }
            return (int)mh$.invokeExact(_Filename, _VarName, _Buffer, _BufferCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _searchenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_searchenv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _searchenv(const char *_Filename, const char *_VarName, char *_Buffer)
     * }
     */
    public static FunctionDescriptor _searchenv$descriptor() {
        return _searchenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _searchenv(const char *_Filename, const char *_VarName, char *_Buffer)
     * }
     */
    public static MethodHandle _searchenv$handle() {
        return _searchenv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _searchenv(const char *_Filename, const char *_VarName, char *_Buffer)
     * }
     */
    public static MemorySegment _searchenv$address() {
        return _searchenv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _searchenv(const char *_Filename, const char *_VarName, char *_Buffer)
     * }
     */
    public static void _searchenv(MemorySegment _Filename, MemorySegment _VarName, MemorySegment _Buffer) {
        var mh$ = _searchenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_searchenv", _Filename, _VarName, _Buffer);
            }
            mh$.invokeExact(_Filename, _VarName, _Buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _seterrormode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_seterrormode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _seterrormode(int _Mode)
     * }
     */
    public static FunctionDescriptor _seterrormode$descriptor() {
        return _seterrormode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _seterrormode(int _Mode)
     * }
     */
    public static MethodHandle _seterrormode$handle() {
        return _seterrormode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _seterrormode(int _Mode)
     * }
     */
    public static MemorySegment _seterrormode$address() {
        return _seterrormode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _seterrormode(int _Mode)
     * }
     */
    public static void _seterrormode(int _Mode) {
        var mh$ = _seterrormode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_seterrormode", _Mode);
            }
            mh$.invokeExact(_Mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _beep {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_INT,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_beep");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _beep(unsigned int _Frequency, unsigned int _Duration)
     * }
     */
    public static FunctionDescriptor _beep$descriptor() {
        return _beep.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _beep(unsigned int _Frequency, unsigned int _Duration)
     * }
     */
    public static MethodHandle _beep$handle() {
        return _beep.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _beep(unsigned int _Frequency, unsigned int _Duration)
     * }
     */
    public static MemorySegment _beep$address() {
        return _beep.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _beep(unsigned int _Frequency, unsigned int _Duration)
     * }
     */
    public static void _beep(int _Frequency, int _Duration) {
        var mh$ = _beep.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_beep", _Frequency, _Duration);
            }
            mh$.invokeExact(_Frequency, _Duration);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _sleep {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("_sleep");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _sleep(unsigned long _Duration)
     * }
     */
    public static FunctionDescriptor _sleep$descriptor() {
        return _sleep.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _sleep(unsigned long _Duration)
     * }
     */
    public static MethodHandle _sleep$handle() {
        return _sleep.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _sleep(unsigned long _Duration)
     * }
     */
    public static MemorySegment _sleep$address() {
        return _sleep.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _sleep(unsigned long _Duration)
     * }
     */
    public static void _sleep(int _Duration) {
        var mh$ = _sleep.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_sleep", _Duration);
            }
            mh$.invokeExact(_Duration);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ecvt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_DOUBLE,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ecvt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *ecvt(double _Value, int _DigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static FunctionDescriptor ecvt$descriptor() {
        return ecvt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *ecvt(double _Value, int _DigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MethodHandle ecvt$handle() {
        return ecvt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *ecvt(double _Value, int _DigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MemorySegment ecvt$address() {
        return ecvt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *ecvt(double _Value, int _DigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MemorySegment ecvt(double _Value, int _DigitCount, MemorySegment _PtDec, MemorySegment _PtSign) {
        var mh$ = ecvt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ecvt", _Value, _DigitCount, _PtDec, _PtSign);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _DigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fcvt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_DOUBLE,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("fcvt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *fcvt(double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static FunctionDescriptor fcvt$descriptor() {
        return fcvt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *fcvt(double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MethodHandle fcvt$handle() {
        return fcvt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *fcvt(double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MemorySegment fcvt$address() {
        return fcvt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *fcvt(double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MemorySegment fcvt(double _Value, int _FractionalDigitCount, MemorySegment _PtDec, MemorySegment _PtSign) {
        var mh$ = fcvt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fcvt", _Value, _FractionalDigitCount, _PtDec, _PtSign);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _FractionalDigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gcvt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_DOUBLE,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("gcvt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *gcvt(double _Value, int _DigitCount, char *_DstBuf)
     * }
     */
    public static FunctionDescriptor gcvt$descriptor() {
        return gcvt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *gcvt(double _Value, int _DigitCount, char *_DstBuf)
     * }
     */
    public static MethodHandle gcvt$handle() {
        return gcvt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *gcvt(double _Value, int _DigitCount, char *_DstBuf)
     * }
     */
    public static MemorySegment gcvt$address() {
        return gcvt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *gcvt(double _Value, int _DigitCount, char *_DstBuf)
     * }
     */
    public static MemorySegment gcvt(double _Value, int _DigitCount, MemorySegment _DstBuf) {
        var mh$ = gcvt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gcvt", _Value, _DigitCount, _DstBuf);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _DigitCount, _DstBuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class itoa {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("itoa");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *itoa(int _Value, char *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor itoa$descriptor() {
        return itoa.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *itoa(int _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle itoa$handle() {
        return itoa.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *itoa(int _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment itoa$address() {
        return itoa.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *itoa(int _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment itoa(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = itoa.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("itoa", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ltoa {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ltoa");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *ltoa(long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor ltoa$descriptor() {
        return ltoa.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *ltoa(long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle ltoa$handle() {
        return ltoa.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *ltoa(long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment ltoa$address() {
        return ltoa.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *ltoa(long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment ltoa(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = ltoa.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ltoa", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class swab {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("swab");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void swab(char *_Buf1, char *_Buf2, int _SizeInBytes)
     * }
     */
    public static FunctionDescriptor swab$descriptor() {
        return swab.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void swab(char *_Buf1, char *_Buf2, int _SizeInBytes)
     * }
     */
    public static MethodHandle swab$handle() {
        return swab.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void swab(char *_Buf1, char *_Buf2, int _SizeInBytes)
     * }
     */
    public static MemorySegment swab$address() {
        return swab.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void swab(char *_Buf1, char *_Buf2, int _SizeInBytes)
     * }
     */
    public static void swab(MemorySegment _Buf1, MemorySegment _Buf2, int _SizeInBytes) {
        var mh$ = swab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("swab", _Buf1, _Buf2, _SizeInBytes);
            }
            mh$.invokeExact(_Buf1, _Buf2, _SizeInBytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ultoa {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ultoa");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *ultoa(unsigned long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor ultoa$descriptor() {
        return ultoa.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *ultoa(unsigned long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle ultoa$handle() {
        return ultoa.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *ultoa(unsigned long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment ultoa$address() {
        return ultoa.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *ultoa(unsigned long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment ultoa(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = ultoa.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ultoa", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("putenv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int putenv(const char *_EnvString)
     * }
     */
    public static FunctionDescriptor putenv$descriptor() {
        return putenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int putenv(const char *_EnvString)
     * }
     */
    public static MethodHandle putenv$handle() {
        return putenv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int putenv(const char *_EnvString)
     * }
     */
    public static MemorySegment putenv$address() {
        return putenv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int putenv(const char *_EnvString)
     * }
     */
    public static int putenv(MemorySegment _EnvString) {
        var mh$ = putenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putenv", _EnvString);
            }
            return (int)mh$.invokeExact(_EnvString);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class onexit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("onexit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _onexit_t onexit(_onexit_t _Func)
     * }
     */
    public static FunctionDescriptor onexit$descriptor() {
        return onexit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _onexit_t onexit(_onexit_t _Func)
     * }
     */
    public static MethodHandle onexit$handle() {
        return onexit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _onexit_t onexit(_onexit_t _Func)
     * }
     */
    public static MemorySegment onexit$address() {
        return onexit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _onexit_t onexit(_onexit_t _Func)
     * }
     */
    public static MemorySegment onexit(MemorySegment _Func) {
        var mh$ = onexit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("onexit", _Func);
            }
            return (MemorySegment)mh$.invokeExact(_Func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int REGCLS_SINGLEUSE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagREGCLS.REGCLS_SINGLEUSE = 0
     * }
     */
    public static int REGCLS_SINGLEUSE() {
        return REGCLS_SINGLEUSE;
    }
    private static final int REGCLS_MULTIPLEUSE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagREGCLS.REGCLS_MULTIPLEUSE = 1
     * }
     */
    public static int REGCLS_MULTIPLEUSE() {
        return REGCLS_MULTIPLEUSE;
    }
    private static final int REGCLS_MULTI_SEPARATE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagREGCLS.REGCLS_MULTI_SEPARATE = 2
     * }
     */
    public static int REGCLS_MULTI_SEPARATE() {
        return REGCLS_MULTI_SEPARATE;
    }
    private static final int REGCLS_SUSPENDED = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagREGCLS.REGCLS_SUSPENDED = 4
     * }
     */
    public static int REGCLS_SUSPENDED() {
        return REGCLS_SUSPENDED;
    }
    private static final int REGCLS_SURROGATE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagREGCLS.REGCLS_SURROGATE = 8
     * }
     */
    public static int REGCLS_SURROGATE() {
        return REGCLS_SURROGATE;
    }
    private static final int REGCLS_AGILE = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagREGCLS.REGCLS_AGILE = 16
     * }
     */
    public static int REGCLS_AGILE() {
        return REGCLS_AGILE;
    }
    private static final int COINITBASE_MULTITHREADED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagCOINITBASE.COINITBASE_MULTITHREADED = 0
     * }
     */
    public static int COINITBASE_MULTITHREADED() {
        return COINITBASE_MULTITHREADED;
    }

    private static class __MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec$layout() {
        return __MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec$segment() {
        return __MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec() {
        return __MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec$layout() {
        return __MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec$segment() {
        return __MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec() {
        return __MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IUnknown *LPUNKNOWN
     * }
     */
    public static final AddressLayout LPUNKNOWN = wgl_h.C_POINTER;

    private static class IID_IUnknown$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IUnknown").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUnknown
     * }
     */
    public static GroupLayout IID_IUnknown$layout() {
        return IID_IUnknown$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUnknown
     * }
     */
    public static MemorySegment IID_IUnknown() {
        return IID_IUnknown$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUnknown
     * }
     */
    public static void IID_IUnknown(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IUnknown$constants.SEGMENT, 0L, IID_IUnknown$constants.LAYOUT.byteSize());
    }

    private static class IUnknown_QueryInterface_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IUnknown_QueryInterface_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IUnknown_QueryInterface_Proxy(IUnknown *This, const IID *const riid, void **ppvObject)
     * }
     */
    public static FunctionDescriptor IUnknown_QueryInterface_Proxy$descriptor() {
        return IUnknown_QueryInterface_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IUnknown_QueryInterface_Proxy(IUnknown *This, const IID *const riid, void **ppvObject)
     * }
     */
    public static MethodHandle IUnknown_QueryInterface_Proxy$handle() {
        return IUnknown_QueryInterface_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IUnknown_QueryInterface_Proxy(IUnknown *This, const IID *const riid, void **ppvObject)
     * }
     */
    public static MemorySegment IUnknown_QueryInterface_Proxy$address() {
        return IUnknown_QueryInterface_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IUnknown_QueryInterface_Proxy(IUnknown *This, const IID *const riid, void **ppvObject)
     * }
     */
    public static int IUnknown_QueryInterface_Proxy(MemorySegment This, MemorySegment riid, MemorySegment ppvObject) {
        var mh$ = IUnknown_QueryInterface_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IUnknown_QueryInterface_Proxy", This, riid, ppvObject);
            }
            return (int)mh$.invokeExact(This, riid, ppvObject);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IUnknown_QueryInterface_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IUnknown_QueryInterface_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IUnknown_QueryInterface_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IUnknown_QueryInterface_Stub$descriptor() {
        return IUnknown_QueryInterface_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IUnknown_QueryInterface_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IUnknown_QueryInterface_Stub$handle() {
        return IUnknown_QueryInterface_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IUnknown_QueryInterface_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IUnknown_QueryInterface_Stub$address() {
        return IUnknown_QueryInterface_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IUnknown_QueryInterface_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IUnknown_QueryInterface_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IUnknown_QueryInterface_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IUnknown_QueryInterface_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IUnknown_AddRef_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IUnknown_AddRef_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ULONG IUnknown_AddRef_Proxy(IUnknown *This)
     * }
     */
    public static FunctionDescriptor IUnknown_AddRef_Proxy$descriptor() {
        return IUnknown_AddRef_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ULONG IUnknown_AddRef_Proxy(IUnknown *This)
     * }
     */
    public static MethodHandle IUnknown_AddRef_Proxy$handle() {
        return IUnknown_AddRef_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * ULONG IUnknown_AddRef_Proxy(IUnknown *This)
     * }
     */
    public static MemorySegment IUnknown_AddRef_Proxy$address() {
        return IUnknown_AddRef_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * ULONG IUnknown_AddRef_Proxy(IUnknown *This)
     * }
     */
    public static int IUnknown_AddRef_Proxy(MemorySegment This) {
        var mh$ = IUnknown_AddRef_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IUnknown_AddRef_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IUnknown_AddRef_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IUnknown_AddRef_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IUnknown_AddRef_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IUnknown_AddRef_Stub$descriptor() {
        return IUnknown_AddRef_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IUnknown_AddRef_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IUnknown_AddRef_Stub$handle() {
        return IUnknown_AddRef_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IUnknown_AddRef_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IUnknown_AddRef_Stub$address() {
        return IUnknown_AddRef_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IUnknown_AddRef_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IUnknown_AddRef_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IUnknown_AddRef_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IUnknown_AddRef_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IUnknown_Release_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IUnknown_Release_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ULONG IUnknown_Release_Proxy(IUnknown *This)
     * }
     */
    public static FunctionDescriptor IUnknown_Release_Proxy$descriptor() {
        return IUnknown_Release_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ULONG IUnknown_Release_Proxy(IUnknown *This)
     * }
     */
    public static MethodHandle IUnknown_Release_Proxy$handle() {
        return IUnknown_Release_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * ULONG IUnknown_Release_Proxy(IUnknown *This)
     * }
     */
    public static MemorySegment IUnknown_Release_Proxy$address() {
        return IUnknown_Release_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * ULONG IUnknown_Release_Proxy(IUnknown *This)
     * }
     */
    public static int IUnknown_Release_Proxy(MemorySegment This) {
        var mh$ = IUnknown_Release_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IUnknown_Release_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IUnknown_Release_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IUnknown_Release_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IUnknown_Release_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IUnknown_Release_Stub$descriptor() {
        return IUnknown_Release_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IUnknown_Release_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IUnknown_Release_Stub$handle() {
        return IUnknown_Release_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IUnknown_Release_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IUnknown_Release_Stub$address() {
        return IUnknown_Release_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IUnknown_Release_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IUnknown_Release_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IUnknown_Release_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IUnknown_Release_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec$layout() {
        return __MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec$segment() {
        return __MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec() {
        return __MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec$layout() {
        return __MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec$segment() {
        return __MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec() {
        return __MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_AsyncIUnknown$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_AsyncIUnknown").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIUnknown
     * }
     */
    public static GroupLayout IID_AsyncIUnknown$layout() {
        return IID_AsyncIUnknown$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIUnknown
     * }
     */
    public static MemorySegment IID_AsyncIUnknown() {
        return IID_AsyncIUnknown$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIUnknown
     * }
     */
    public static void IID_AsyncIUnknown(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_AsyncIUnknown$constants.SEGMENT, 0L, IID_AsyncIUnknown$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec$layout() {
        return __MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec$segment() {
        return __MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec() {
        return __MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec$layout() {
        return __MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec$segment() {
        return __MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec() {
        return __MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IClassFactory *LPCLASSFACTORY
     * }
     */
    public static final AddressLayout LPCLASSFACTORY = wgl_h.C_POINTER;

    private static class IID_IClassFactory$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IClassFactory").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IClassFactory
     * }
     */
    public static GroupLayout IID_IClassFactory$layout() {
        return IID_IClassFactory$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IClassFactory
     * }
     */
    public static MemorySegment IID_IClassFactory() {
        return IID_IClassFactory$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IClassFactory
     * }
     */
    public static void IID_IClassFactory(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IClassFactory$constants.SEGMENT, 0L, IID_IClassFactory$constants.LAYOUT.byteSize());
    }

    private static class IClassFactory_RemoteCreateInstance_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IClassFactory_RemoteCreateInstance_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IClassFactory_RemoteCreateInstance_Proxy(IClassFactory *This, const IID *const riid, IUnknown **ppvObject)
     * }
     */
    public static FunctionDescriptor IClassFactory_RemoteCreateInstance_Proxy$descriptor() {
        return IClassFactory_RemoteCreateInstance_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IClassFactory_RemoteCreateInstance_Proxy(IClassFactory *This, const IID *const riid, IUnknown **ppvObject)
     * }
     */
    public static MethodHandle IClassFactory_RemoteCreateInstance_Proxy$handle() {
        return IClassFactory_RemoteCreateInstance_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IClassFactory_RemoteCreateInstance_Proxy(IClassFactory *This, const IID *const riid, IUnknown **ppvObject)
     * }
     */
    public static MemorySegment IClassFactory_RemoteCreateInstance_Proxy$address() {
        return IClassFactory_RemoteCreateInstance_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IClassFactory_RemoteCreateInstance_Proxy(IClassFactory *This, const IID *const riid, IUnknown **ppvObject)
     * }
     */
    public static int IClassFactory_RemoteCreateInstance_Proxy(MemorySegment This, MemorySegment riid, MemorySegment ppvObject) {
        var mh$ = IClassFactory_RemoteCreateInstance_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IClassFactory_RemoteCreateInstance_Proxy", This, riid, ppvObject);
            }
            return (int)mh$.invokeExact(This, riid, ppvObject);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IClassFactory_RemoteCreateInstance_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IClassFactory_RemoteCreateInstance_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IClassFactory_RemoteCreateInstance_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IClassFactory_RemoteCreateInstance_Stub$descriptor() {
        return IClassFactory_RemoteCreateInstance_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IClassFactory_RemoteCreateInstance_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IClassFactory_RemoteCreateInstance_Stub$handle() {
        return IClassFactory_RemoteCreateInstance_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IClassFactory_RemoteCreateInstance_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IClassFactory_RemoteCreateInstance_Stub$address() {
        return IClassFactory_RemoteCreateInstance_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IClassFactory_RemoteCreateInstance_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IClassFactory_RemoteCreateInstance_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IClassFactory_RemoteCreateInstance_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IClassFactory_RemoteCreateInstance_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IClassFactory_RemoteLockServer_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IClassFactory_RemoteLockServer_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IClassFactory_RemoteLockServer_Proxy(IClassFactory *This, BOOL fLock)
     * }
     */
    public static FunctionDescriptor IClassFactory_RemoteLockServer_Proxy$descriptor() {
        return IClassFactory_RemoteLockServer_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IClassFactory_RemoteLockServer_Proxy(IClassFactory *This, BOOL fLock)
     * }
     */
    public static MethodHandle IClassFactory_RemoteLockServer_Proxy$handle() {
        return IClassFactory_RemoteLockServer_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IClassFactory_RemoteLockServer_Proxy(IClassFactory *This, BOOL fLock)
     * }
     */
    public static MemorySegment IClassFactory_RemoteLockServer_Proxy$address() {
        return IClassFactory_RemoteLockServer_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IClassFactory_RemoteLockServer_Proxy(IClassFactory *This, BOOL fLock)
     * }
     */
    public static int IClassFactory_RemoteLockServer_Proxy(MemorySegment This, int fLock) {
        var mh$ = IClassFactory_RemoteLockServer_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IClassFactory_RemoteLockServer_Proxy", This, fLock);
            }
            return (int)mh$.invokeExact(This, fLock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IClassFactory_RemoteLockServer_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IClassFactory_RemoteLockServer_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IClassFactory_RemoteLockServer_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IClassFactory_RemoteLockServer_Stub$descriptor() {
        return IClassFactory_RemoteLockServer_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IClassFactory_RemoteLockServer_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IClassFactory_RemoteLockServer_Stub$handle() {
        return IClassFactory_RemoteLockServer_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IClassFactory_RemoteLockServer_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IClassFactory_RemoteLockServer_Stub$address() {
        return IClassFactory_RemoteLockServer_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IClassFactory_RemoteLockServer_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IClassFactory_RemoteLockServer_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IClassFactory_RemoteLockServer_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IClassFactory_RemoteLockServer_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec$layout() {
        return __MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec$segment() {
        return __MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec() {
        return __MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec$layout() {
        return __MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec$segment() {
        return __MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec() {
        return __MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IClassFactory_CreateInstance_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IClassFactory_CreateInstance_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IClassFactory_CreateInstance_Proxy(IClassFactory *This, IUnknown *pUnkOuter, const IID *const riid, void **ppvObject)
     * }
     */
    public static FunctionDescriptor IClassFactory_CreateInstance_Proxy$descriptor() {
        return IClassFactory_CreateInstance_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IClassFactory_CreateInstance_Proxy(IClassFactory *This, IUnknown *pUnkOuter, const IID *const riid, void **ppvObject)
     * }
     */
    public static MethodHandle IClassFactory_CreateInstance_Proxy$handle() {
        return IClassFactory_CreateInstance_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IClassFactory_CreateInstance_Proxy(IClassFactory *This, IUnknown *pUnkOuter, const IID *const riid, void **ppvObject)
     * }
     */
    public static MemorySegment IClassFactory_CreateInstance_Proxy$address() {
        return IClassFactory_CreateInstance_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IClassFactory_CreateInstance_Proxy(IClassFactory *This, IUnknown *pUnkOuter, const IID *const riid, void **ppvObject)
     * }
     */
    public static int IClassFactory_CreateInstance_Proxy(MemorySegment This, MemorySegment pUnkOuter, MemorySegment riid, MemorySegment ppvObject) {
        var mh$ = IClassFactory_CreateInstance_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IClassFactory_CreateInstance_Proxy", This, pUnkOuter, riid, ppvObject);
            }
            return (int)mh$.invokeExact(This, pUnkOuter, riid, ppvObject);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IClassFactory_CreateInstance_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IClassFactory_CreateInstance_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IClassFactory_CreateInstance_Stub(IClassFactory *This, const IID *const riid, IUnknown **ppvObject)
     * }
     */
    public static FunctionDescriptor IClassFactory_CreateInstance_Stub$descriptor() {
        return IClassFactory_CreateInstance_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IClassFactory_CreateInstance_Stub(IClassFactory *This, const IID *const riid, IUnknown **ppvObject)
     * }
     */
    public static MethodHandle IClassFactory_CreateInstance_Stub$handle() {
        return IClassFactory_CreateInstance_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IClassFactory_CreateInstance_Stub(IClassFactory *This, const IID *const riid, IUnknown **ppvObject)
     * }
     */
    public static MemorySegment IClassFactory_CreateInstance_Stub$address() {
        return IClassFactory_CreateInstance_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IClassFactory_CreateInstance_Stub(IClassFactory *This, const IID *const riid, IUnknown **ppvObject)
     * }
     */
    public static int IClassFactory_CreateInstance_Stub(MemorySegment This, MemorySegment riid, MemorySegment ppvObject) {
        var mh$ = IClassFactory_CreateInstance_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IClassFactory_CreateInstance_Stub", This, riid, ppvObject);
            }
            return (int)mh$.invokeExact(This, riid, ppvObject);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IClassFactory_LockServer_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IClassFactory_LockServer_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IClassFactory_LockServer_Proxy(IClassFactory *This, BOOL fLock)
     * }
     */
    public static FunctionDescriptor IClassFactory_LockServer_Proxy$descriptor() {
        return IClassFactory_LockServer_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IClassFactory_LockServer_Proxy(IClassFactory *This, BOOL fLock)
     * }
     */
    public static MethodHandle IClassFactory_LockServer_Proxy$handle() {
        return IClassFactory_LockServer_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IClassFactory_LockServer_Proxy(IClassFactory *This, BOOL fLock)
     * }
     */
    public static MemorySegment IClassFactory_LockServer_Proxy$address() {
        return IClassFactory_LockServer_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IClassFactory_LockServer_Proxy(IClassFactory *This, BOOL fLock)
     * }
     */
    public static int IClassFactory_LockServer_Proxy(MemorySegment This, int fLock) {
        var mh$ = IClassFactory_LockServer_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IClassFactory_LockServer_Proxy", This, fLock);
            }
            return (int)mh$.invokeExact(This, fLock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IClassFactory_LockServer_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IClassFactory_LockServer_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IClassFactory_LockServer_Stub(IClassFactory *This, BOOL fLock)
     * }
     */
    public static FunctionDescriptor IClassFactory_LockServer_Stub$descriptor() {
        return IClassFactory_LockServer_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IClassFactory_LockServer_Stub(IClassFactory *This, BOOL fLock)
     * }
     */
    public static MethodHandle IClassFactory_LockServer_Stub$handle() {
        return IClassFactory_LockServer_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IClassFactory_LockServer_Stub(IClassFactory *This, BOOL fLock)
     * }
     */
    public static MemorySegment IClassFactory_LockServer_Stub$address() {
        return IClassFactory_LockServer_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IClassFactory_LockServer_Stub(IClassFactory *This, BOOL fLock)
     * }
     */
    public static int IClassFactory_LockServer_Stub(MemorySegment This, int fLock) {
        var mh$ = IClassFactory_LockServer_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IClassFactory_LockServer_Stub", This, fLock);
            }
            return (int)mh$.invokeExact(This, fLock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IMarshal *LPMARSHAL
     * }
     */
    public static final AddressLayout LPMARSHAL = wgl_h.C_POINTER;

    private static class IID_IMarshal$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IMarshal").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMarshal
     * }
     */
    public static GroupLayout IID_IMarshal$layout() {
        return IID_IMarshal$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMarshal
     * }
     */
    public static MemorySegment IID_IMarshal() {
        return IID_IMarshal$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMarshal
     * }
     */
    public static void IID_IMarshal(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IMarshal$constants.SEGMENT, 0L, IID_IMarshal$constants.LAYOUT.byteSize());
    }

    private static class IID_INoMarshal$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_INoMarshal").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_INoMarshal
     * }
     */
    public static GroupLayout IID_INoMarshal$layout() {
        return IID_INoMarshal$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_INoMarshal
     * }
     */
    public static MemorySegment IID_INoMarshal() {
        return IID_INoMarshal$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_INoMarshal
     * }
     */
    public static void IID_INoMarshal(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_INoMarshal$constants.SEGMENT, 0L, IID_INoMarshal$constants.LAYOUT.byteSize());
    }

    private static class IID_IAgileObject$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IAgileObject").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAgileObject
     * }
     */
    public static GroupLayout IID_IAgileObject$layout() {
        return IID_IAgileObject$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAgileObject
     * }
     */
    public static MemorySegment IID_IAgileObject() {
        return IID_IAgileObject$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAgileObject
     * }
     */
    public static void IID_IAgileObject(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IAgileObject$constants.SEGMENT, 0L, IID_IAgileObject$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    private static final int ACTIVATIONTYPE_UNCATEGORIZED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagACTIVATIONTYPE.ACTIVATIONTYPE_UNCATEGORIZED = 0
     * }
     */
    public static int ACTIVATIONTYPE_UNCATEGORIZED() {
        return ACTIVATIONTYPE_UNCATEGORIZED;
    }
    private static final int ACTIVATIONTYPE_FROM_MONIKER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagACTIVATIONTYPE.ACTIVATIONTYPE_FROM_MONIKER = 1
     * }
     */
    public static int ACTIVATIONTYPE_FROM_MONIKER() {
        return ACTIVATIONTYPE_FROM_MONIKER;
    }
    private static final int ACTIVATIONTYPE_FROM_DATA = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagACTIVATIONTYPE.ACTIVATIONTYPE_FROM_DATA = 2
     * }
     */
    public static int ACTIVATIONTYPE_FROM_DATA() {
        return ACTIVATIONTYPE_FROM_DATA;
    }
    private static final int ACTIVATIONTYPE_FROM_STORAGE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagACTIVATIONTYPE.ACTIVATIONTYPE_FROM_STORAGE = 4
     * }
     */
    public static int ACTIVATIONTYPE_FROM_STORAGE() {
        return ACTIVATIONTYPE_FROM_STORAGE;
    }
    private static final int ACTIVATIONTYPE_FROM_STREAM = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagACTIVATIONTYPE.ACTIVATIONTYPE_FROM_STREAM = 8
     * }
     */
    public static int ACTIVATIONTYPE_FROM_STREAM() {
        return ACTIVATIONTYPE_FROM_STREAM;
    }
    private static final int ACTIVATIONTYPE_FROM_FILE = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagACTIVATIONTYPE.ACTIVATIONTYPE_FROM_FILE = 16
     * }
     */
    public static int ACTIVATIONTYPE_FROM_FILE() {
        return ACTIVATIONTYPE_FROM_FILE;
    }

    private static class IID_IActivationFilter$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IActivationFilter").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IActivationFilter
     * }
     */
    public static GroupLayout IID_IActivationFilter$layout() {
        return IID_IActivationFilter$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IActivationFilter
     * }
     */
    public static MemorySegment IID_IActivationFilter() {
        return IID_IActivationFilter$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IActivationFilter
     * }
     */
    public static void IID_IActivationFilter(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IActivationFilter$constants.SEGMENT, 0L, IID_IActivationFilter$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IMarshal2 *LPMARSHAL2
     * }
     */
    public static final AddressLayout LPMARSHAL2 = wgl_h.C_POINTER;

    private static class IID_IMarshal2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IMarshal2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMarshal2
     * }
     */
    public static GroupLayout IID_IMarshal2$layout() {
        return IID_IMarshal2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMarshal2
     * }
     */
    public static MemorySegment IID_IMarshal2() {
        return IID_IMarshal2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMarshal2
     * }
     */
    public static void IID_IMarshal2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IMarshal2$constants.SEGMENT, 0L, IID_IMarshal2$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IMalloc *LPMALLOC
     * }
     */
    public static final AddressLayout LPMALLOC = wgl_h.C_POINTER;

    private static class IID_IMalloc$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IMalloc").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMalloc
     * }
     */
    public static GroupLayout IID_IMalloc$layout() {
        return IID_IMalloc$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMalloc
     * }
     */
    public static MemorySegment IID_IMalloc() {
        return IID_IMalloc$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMalloc
     * }
     */
    public static void IID_IMalloc(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IMalloc$constants.SEGMENT, 0L, IID_IMalloc$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IStdMarshalInfo *LPSTDMARSHALINFO
     * }
     */
    public static final AddressLayout LPSTDMARSHALINFO = wgl_h.C_POINTER;

    private static class IID_IStdMarshalInfo$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IStdMarshalInfo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IStdMarshalInfo
     * }
     */
    public static GroupLayout IID_IStdMarshalInfo$layout() {
        return IID_IStdMarshalInfo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IStdMarshalInfo
     * }
     */
    public static MemorySegment IID_IStdMarshalInfo() {
        return IID_IStdMarshalInfo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IStdMarshalInfo
     * }
     */
    public static void IID_IStdMarshalInfo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IStdMarshalInfo$constants.SEGMENT, 0L, IID_IStdMarshalInfo$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IExternalConnection *LPEXTERNALCONNECTION
     * }
     */
    public static final AddressLayout LPEXTERNALCONNECTION = wgl_h.C_POINTER;
    private static final int EXTCONN_STRONG = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagEXTCONN.EXTCONN_STRONG = 1
     * }
     */
    public static int EXTCONN_STRONG() {
        return EXTCONN_STRONG;
    }
    private static final int EXTCONN_WEAK = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagEXTCONN.EXTCONN_WEAK = 2
     * }
     */
    public static int EXTCONN_WEAK() {
        return EXTCONN_WEAK;
    }
    private static final int EXTCONN_CALLABLE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagEXTCONN.EXTCONN_CALLABLE = 4
     * }
     */
    public static int EXTCONN_CALLABLE() {
        return EXTCONN_CALLABLE;
    }

    private static class IID_IExternalConnection$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IExternalConnection").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IExternalConnection
     * }
     */
    public static GroupLayout IID_IExternalConnection$layout() {
        return IID_IExternalConnection$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IExternalConnection
     * }
     */
    public static MemorySegment IID_IExternalConnection() {
        return IID_IExternalConnection$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IExternalConnection
     * }
     */
    public static void IID_IExternalConnection(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IExternalConnection$constants.SEGMENT, 0L, IID_IExternalConnection$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IMultiQI *LPMULTIQI
     * }
     */
    public static final AddressLayout LPMULTIQI = wgl_h.C_POINTER;

    private static class __MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IMultiQI$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IMultiQI").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMultiQI
     * }
     */
    public static GroupLayout IID_IMultiQI$layout() {
        return IID_IMultiQI$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMultiQI
     * }
     */
    public static MemorySegment IID_IMultiQI() {
        return IID_IMultiQI$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMultiQI
     * }
     */
    public static void IID_IMultiQI(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IMultiQI$constants.SEGMENT, 0L, IID_IMultiQI$constants.LAYOUT.byteSize());
    }

    private static class IID_AsyncIMultiQI$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_AsyncIMultiQI").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIMultiQI
     * }
     */
    public static GroupLayout IID_AsyncIMultiQI$layout() {
        return IID_AsyncIMultiQI$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIMultiQI
     * }
     */
    public static MemorySegment IID_AsyncIMultiQI() {
        return IID_AsyncIMultiQI$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIMultiQI
     * }
     */
    public static void IID_AsyncIMultiQI(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_AsyncIMultiQI$constants.SEGMENT, 0L, IID_AsyncIMultiQI$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IInternalUnknown$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IInternalUnknown").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternalUnknown
     * }
     */
    public static GroupLayout IID_IInternalUnknown$layout() {
        return IID_IInternalUnknown$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternalUnknown
     * }
     */
    public static MemorySegment IID_IInternalUnknown() {
        return IID_IInternalUnknown$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternalUnknown
     * }
     */
    public static void IID_IInternalUnknown(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternalUnknown$constants.SEGMENT, 0L, IID_IInternalUnknown$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IEnumUnknown *LPENUMUNKNOWN
     * }
     */
    public static final AddressLayout LPENUMUNKNOWN = wgl_h.C_POINTER;

    private static class IID_IEnumUnknown$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IEnumUnknown").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumUnknown
     * }
     */
    public static GroupLayout IID_IEnumUnknown$layout() {
        return IID_IEnumUnknown$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumUnknown
     * }
     */
    public static MemorySegment IID_IEnumUnknown() {
        return IID_IEnumUnknown$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumUnknown
     * }
     */
    public static void IID_IEnumUnknown(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IEnumUnknown$constants.SEGMENT, 0L, IID_IEnumUnknown$constants.LAYOUT.byteSize());
    }

    private static class IEnumUnknown_RemoteNext_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumUnknown_RemoteNext_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumUnknown_RemoteNext_Proxy(IEnumUnknown *This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumUnknown_RemoteNext_Proxy$descriptor() {
        return IEnumUnknown_RemoteNext_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumUnknown_RemoteNext_Proxy(IEnumUnknown *This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumUnknown_RemoteNext_Proxy$handle() {
        return IEnumUnknown_RemoteNext_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumUnknown_RemoteNext_Proxy(IEnumUnknown *This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumUnknown_RemoteNext_Proxy$address() {
        return IEnumUnknown_RemoteNext_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumUnknown_RemoteNext_Proxy(IEnumUnknown *This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumUnknown_RemoteNext_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumUnknown_RemoteNext_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumUnknown_RemoteNext_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumUnknown_RemoteNext_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumUnknown_RemoteNext_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IEnumUnknown_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IEnumUnknown_RemoteNext_Stub$descriptor() {
        return IEnumUnknown_RemoteNext_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IEnumUnknown_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IEnumUnknown_RemoteNext_Stub$handle() {
        return IEnumUnknown_RemoteNext_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IEnumUnknown_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IEnumUnknown_RemoteNext_Stub$address() {
        return IEnumUnknown_RemoteNext_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IEnumUnknown_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IEnumUnknown_RemoteNext_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IEnumUnknown_RemoteNext_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumUnknown_RemoteNext_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef IEnumString *LPENUMSTRING
     * }
     */
    public static final AddressLayout LPENUMSTRING = wgl_h.C_POINTER;

    private static class IID_IEnumString$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IEnumString").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumString
     * }
     */
    public static GroupLayout IID_IEnumString$layout() {
        return IID_IEnumString$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumString
     * }
     */
    public static MemorySegment IID_IEnumString() {
        return IID_IEnumString$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumString
     * }
     */
    public static void IID_IEnumString(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IEnumString$constants.SEGMENT, 0L, IID_IEnumString$constants.LAYOUT.byteSize());
    }

    private static class IEnumString_RemoteNext_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumString_RemoteNext_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumString_RemoteNext_Proxy(IEnumString *This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumString_RemoteNext_Proxy$descriptor() {
        return IEnumString_RemoteNext_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumString_RemoteNext_Proxy(IEnumString *This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumString_RemoteNext_Proxy$handle() {
        return IEnumString_RemoteNext_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumString_RemoteNext_Proxy(IEnumString *This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumString_RemoteNext_Proxy$address() {
        return IEnumString_RemoteNext_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumString_RemoteNext_Proxy(IEnumString *This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumString_RemoteNext_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumString_RemoteNext_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumString_RemoteNext_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumString_RemoteNext_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumString_RemoteNext_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IEnumString_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IEnumString_RemoteNext_Stub$descriptor() {
        return IEnumString_RemoteNext_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IEnumString_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IEnumString_RemoteNext_Stub$handle() {
        return IEnumString_RemoteNext_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IEnumString_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IEnumString_RemoteNext_Stub$address() {
        return IEnumString_RemoteNext_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IEnumString_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IEnumString_RemoteNext_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IEnumString_RemoteNext_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumString_RemoteNext_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IID_ISequentialStream$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_ISequentialStream").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISequentialStream
     * }
     */
    public static GroupLayout IID_ISequentialStream$layout() {
        return IID_ISequentialStream$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISequentialStream
     * }
     */
    public static MemorySegment IID_ISequentialStream() {
        return IID_ISequentialStream$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISequentialStream
     * }
     */
    public static void IID_ISequentialStream(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ISequentialStream$constants.SEGMENT, 0L, IID_ISequentialStream$constants.LAYOUT.byteSize());
    }

    private static class ISequentialStream_RemoteRead_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ISequentialStream_RemoteRead_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ISequentialStream_RemoteRead_Proxy(ISequentialStream *This, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static FunctionDescriptor ISequentialStream_RemoteRead_Proxy$descriptor() {
        return ISequentialStream_RemoteRead_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ISequentialStream_RemoteRead_Proxy(ISequentialStream *This, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static MethodHandle ISequentialStream_RemoteRead_Proxy$handle() {
        return ISequentialStream_RemoteRead_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ISequentialStream_RemoteRead_Proxy(ISequentialStream *This, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static MemorySegment ISequentialStream_RemoteRead_Proxy$address() {
        return ISequentialStream_RemoteRead_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ISequentialStream_RemoteRead_Proxy(ISequentialStream *This, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static int ISequentialStream_RemoteRead_Proxy(MemorySegment This, MemorySegment pv, int cb, MemorySegment pcbRead) {
        var mh$ = ISequentialStream_RemoteRead_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ISequentialStream_RemoteRead_Proxy", This, pv, cb, pcbRead);
            }
            return (int)mh$.invokeExact(This, pv, cb, pcbRead);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ISequentialStream_RemoteRead_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ISequentialStream_RemoteRead_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ISequentialStream_RemoteRead_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ISequentialStream_RemoteRead_Stub$descriptor() {
        return ISequentialStream_RemoteRead_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ISequentialStream_RemoteRead_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ISequentialStream_RemoteRead_Stub$handle() {
        return ISequentialStream_RemoteRead_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ISequentialStream_RemoteRead_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment ISequentialStream_RemoteRead_Stub$address() {
        return ISequentialStream_RemoteRead_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ISequentialStream_RemoteRead_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ISequentialStream_RemoteRead_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ISequentialStream_RemoteRead_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ISequentialStream_RemoteRead_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ISequentialStream_RemoteWrite_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ISequentialStream_RemoteWrite_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ISequentialStream_RemoteWrite_Proxy(ISequentialStream *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static FunctionDescriptor ISequentialStream_RemoteWrite_Proxy$descriptor() {
        return ISequentialStream_RemoteWrite_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ISequentialStream_RemoteWrite_Proxy(ISequentialStream *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MethodHandle ISequentialStream_RemoteWrite_Proxy$handle() {
        return ISequentialStream_RemoteWrite_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ISequentialStream_RemoteWrite_Proxy(ISequentialStream *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MemorySegment ISequentialStream_RemoteWrite_Proxy$address() {
        return ISequentialStream_RemoteWrite_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ISequentialStream_RemoteWrite_Proxy(ISequentialStream *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static int ISequentialStream_RemoteWrite_Proxy(MemorySegment This, MemorySegment pv, int cb, MemorySegment pcbWritten) {
        var mh$ = ISequentialStream_RemoteWrite_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ISequentialStream_RemoteWrite_Proxy", This, pv, cb, pcbWritten);
            }
            return (int)mh$.invokeExact(This, pv, cb, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ISequentialStream_RemoteWrite_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ISequentialStream_RemoteWrite_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ISequentialStream_RemoteWrite_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ISequentialStream_RemoteWrite_Stub$descriptor() {
        return ISequentialStream_RemoteWrite_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ISequentialStream_RemoteWrite_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ISequentialStream_RemoteWrite_Stub$handle() {
        return ISequentialStream_RemoteWrite_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ISequentialStream_RemoteWrite_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment ISequentialStream_RemoteWrite_Stub$address() {
        return ISequentialStream_RemoteWrite_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ISequentialStream_RemoteWrite_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ISequentialStream_RemoteWrite_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ISequentialStream_RemoteWrite_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ISequentialStream_RemoteWrite_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef IStream *LPSTREAM
     * }
     */
    public static final AddressLayout LPSTREAM = wgl_h.C_POINTER;
    private static final int STGTY_STORAGE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagSTGTY.STGTY_STORAGE = 1
     * }
     */
    public static int STGTY_STORAGE() {
        return STGTY_STORAGE;
    }
    private static final int STGTY_STREAM = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagSTGTY.STGTY_STREAM = 2
     * }
     */
    public static int STGTY_STREAM() {
        return STGTY_STREAM;
    }
    private static final int STGTY_LOCKBYTES = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagSTGTY.STGTY_LOCKBYTES = 3
     * }
     */
    public static int STGTY_LOCKBYTES() {
        return STGTY_LOCKBYTES;
    }
    private static final int STGTY_PROPERTY = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagSTGTY.STGTY_PROPERTY = 4
     * }
     */
    public static int STGTY_PROPERTY() {
        return STGTY_PROPERTY;
    }
    private static final int STREAM_SEEK_SET = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagSTREAM_SEEK.STREAM_SEEK_SET = 0
     * }
     */
    public static int STREAM_SEEK_SET() {
        return STREAM_SEEK_SET;
    }
    private static final int STREAM_SEEK_CUR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagSTREAM_SEEK.STREAM_SEEK_CUR = 1
     * }
     */
    public static int STREAM_SEEK_CUR() {
        return STREAM_SEEK_CUR;
    }
    private static final int STREAM_SEEK_END = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagSTREAM_SEEK.STREAM_SEEK_END = 2
     * }
     */
    public static int STREAM_SEEK_END() {
        return STREAM_SEEK_END;
    }
    private static final int LOCK_WRITE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagLOCKTYPE.LOCK_WRITE = 1
     * }
     */
    public static int LOCK_WRITE() {
        return LOCK_WRITE;
    }
    private static final int LOCK_EXCLUSIVE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagLOCKTYPE.LOCK_EXCLUSIVE = 2
     * }
     */
    public static int LOCK_EXCLUSIVE() {
        return LOCK_EXCLUSIVE;
    }
    private static final int LOCK_ONLYONCE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagLOCKTYPE.LOCK_ONLYONCE = 4
     * }
     */
    public static int LOCK_ONLYONCE() {
        return LOCK_ONLYONCE;
    }

    private static class IID_IStream$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IStream").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IStream
     * }
     */
    public static GroupLayout IID_IStream$layout() {
        return IID_IStream$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IStream
     * }
     */
    public static MemorySegment IID_IStream() {
        return IID_IStream$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IStream
     * }
     */
    public static void IID_IStream(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IStream$constants.SEGMENT, 0L, IID_IStream$constants.LAYOUT.byteSize());
    }

    private static class IStream_RemoteSeek_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            _LARGE_INTEGER.layout(),
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IStream_RemoteSeek_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStream_RemoteSeek_Proxy(IStream *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition)
     * }
     */
    public static FunctionDescriptor IStream_RemoteSeek_Proxy$descriptor() {
        return IStream_RemoteSeek_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStream_RemoteSeek_Proxy(IStream *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition)
     * }
     */
    public static MethodHandle IStream_RemoteSeek_Proxy$handle() {
        return IStream_RemoteSeek_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IStream_RemoteSeek_Proxy(IStream *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition)
     * }
     */
    public static MemorySegment IStream_RemoteSeek_Proxy$address() {
        return IStream_RemoteSeek_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IStream_RemoteSeek_Proxy(IStream *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition)
     * }
     */
    public static int IStream_RemoteSeek_Proxy(MemorySegment This, MemorySegment dlibMove, int dwOrigin, MemorySegment plibNewPosition) {
        var mh$ = IStream_RemoteSeek_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStream_RemoteSeek_Proxy", This, dlibMove, dwOrigin, plibNewPosition);
            }
            return (int)mh$.invokeExact(This, dlibMove, dwOrigin, plibNewPosition);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStream_RemoteSeek_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IStream_RemoteSeek_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IStream_RemoteSeek_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IStream_RemoteSeek_Stub$descriptor() {
        return IStream_RemoteSeek_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IStream_RemoteSeek_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IStream_RemoteSeek_Stub$handle() {
        return IStream_RemoteSeek_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IStream_RemoteSeek_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IStream_RemoteSeek_Stub$address() {
        return IStream_RemoteSeek_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IStream_RemoteSeek_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IStream_RemoteSeek_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IStream_RemoteSeek_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStream_RemoteSeek_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStream_RemoteCopyTo_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            _ULARGE_INTEGER.layout(),
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IStream_RemoteCopyTo_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStream_RemoteCopyTo_Proxy(IStream *This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten)
     * }
     */
    public static FunctionDescriptor IStream_RemoteCopyTo_Proxy$descriptor() {
        return IStream_RemoteCopyTo_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStream_RemoteCopyTo_Proxy(IStream *This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten)
     * }
     */
    public static MethodHandle IStream_RemoteCopyTo_Proxy$handle() {
        return IStream_RemoteCopyTo_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IStream_RemoteCopyTo_Proxy(IStream *This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten)
     * }
     */
    public static MemorySegment IStream_RemoteCopyTo_Proxy$address() {
        return IStream_RemoteCopyTo_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IStream_RemoteCopyTo_Proxy(IStream *This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten)
     * }
     */
    public static int IStream_RemoteCopyTo_Proxy(MemorySegment This, MemorySegment pstm, MemorySegment cb, MemorySegment pcbRead, MemorySegment pcbWritten) {
        var mh$ = IStream_RemoteCopyTo_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStream_RemoteCopyTo_Proxy", This, pstm, cb, pcbRead, pcbWritten);
            }
            return (int)mh$.invokeExact(This, pstm, cb, pcbRead, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStream_RemoteCopyTo_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IStream_RemoteCopyTo_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IStream_RemoteCopyTo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IStream_RemoteCopyTo_Stub$descriptor() {
        return IStream_RemoteCopyTo_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IStream_RemoteCopyTo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IStream_RemoteCopyTo_Stub$handle() {
        return IStream_RemoteCopyTo_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IStream_RemoteCopyTo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IStream_RemoteCopyTo_Stub$address() {
        return IStream_RemoteCopyTo_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IStream_RemoteCopyTo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IStream_RemoteCopyTo_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IStream_RemoteCopyTo_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStream_RemoteCopyTo_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef ULONG RPCOLEDATAREP
     * }
     */
    public static final OfInt RPCOLEDATAREP = wgl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef RPCOLEMESSAGE *PRPCOLEMESSAGE
     * }
     */
    public static final AddressLayout PRPCOLEMESSAGE = wgl_h.C_POINTER;

    private static class IID_IRpcChannelBuffer$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IRpcChannelBuffer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcChannelBuffer
     * }
     */
    public static GroupLayout IID_IRpcChannelBuffer$layout() {
        return IID_IRpcChannelBuffer$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcChannelBuffer
     * }
     */
    public static MemorySegment IID_IRpcChannelBuffer() {
        return IID_IRpcChannelBuffer$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcChannelBuffer
     * }
     */
    public static void IID_IRpcChannelBuffer(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IRpcChannelBuffer$constants.SEGMENT, 0L, IID_IRpcChannelBuffer$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IRpcChannelBuffer2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IRpcChannelBuffer2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcChannelBuffer2
     * }
     */
    public static GroupLayout IID_IRpcChannelBuffer2$layout() {
        return IID_IRpcChannelBuffer2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcChannelBuffer2
     * }
     */
    public static MemorySegment IID_IRpcChannelBuffer2() {
        return IID_IRpcChannelBuffer2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcChannelBuffer2
     * }
     */
    public static void IID_IRpcChannelBuffer2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IRpcChannelBuffer2$constants.SEGMENT, 0L, IID_IRpcChannelBuffer2$constants.LAYOUT.byteSize());
    }

    private static class IID_IAsyncRpcChannelBuffer$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IAsyncRpcChannelBuffer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAsyncRpcChannelBuffer
     * }
     */
    public static GroupLayout IID_IAsyncRpcChannelBuffer$layout() {
        return IID_IAsyncRpcChannelBuffer$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAsyncRpcChannelBuffer
     * }
     */
    public static MemorySegment IID_IAsyncRpcChannelBuffer() {
        return IID_IAsyncRpcChannelBuffer$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAsyncRpcChannelBuffer
     * }
     */
    public static void IID_IAsyncRpcChannelBuffer(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IAsyncRpcChannelBuffer$constants.SEGMENT, 0L, IID_IAsyncRpcChannelBuffer$constants.LAYOUT.byteSize());
    }

    private static class IID_IRpcChannelBuffer3$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IRpcChannelBuffer3").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcChannelBuffer3
     * }
     */
    public static GroupLayout IID_IRpcChannelBuffer3$layout() {
        return IID_IRpcChannelBuffer3$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcChannelBuffer3
     * }
     */
    public static MemorySegment IID_IRpcChannelBuffer3() {
        return IID_IRpcChannelBuffer3$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcChannelBuffer3
     * }
     */
    public static void IID_IRpcChannelBuffer3(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IRpcChannelBuffer3$constants.SEGMENT, 0L, IID_IRpcChannelBuffer3$constants.LAYOUT.byteSize());
    }

    private static class IID_IRpcSyntaxNegotiate$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IRpcSyntaxNegotiate").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcSyntaxNegotiate
     * }
     */
    public static GroupLayout IID_IRpcSyntaxNegotiate$layout() {
        return IID_IRpcSyntaxNegotiate$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcSyntaxNegotiate
     * }
     */
    public static MemorySegment IID_IRpcSyntaxNegotiate() {
        return IID_IRpcSyntaxNegotiate$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcSyntaxNegotiate
     * }
     */
    public static void IID_IRpcSyntaxNegotiate(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IRpcSyntaxNegotiate$constants.SEGMENT, 0L, IID_IRpcSyntaxNegotiate$constants.LAYOUT.byteSize());
    }

    private static class IID_IRpcProxyBuffer$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IRpcProxyBuffer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcProxyBuffer
     * }
     */
    public static GroupLayout IID_IRpcProxyBuffer$layout() {
        return IID_IRpcProxyBuffer$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcProxyBuffer
     * }
     */
    public static MemorySegment IID_IRpcProxyBuffer() {
        return IID_IRpcProxyBuffer$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcProxyBuffer
     * }
     */
    public static void IID_IRpcProxyBuffer(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IRpcProxyBuffer$constants.SEGMENT, 0L, IID_IRpcProxyBuffer$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IRpcStubBuffer$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IRpcStubBuffer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcStubBuffer
     * }
     */
    public static GroupLayout IID_IRpcStubBuffer$layout() {
        return IID_IRpcStubBuffer$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcStubBuffer
     * }
     */
    public static MemorySegment IID_IRpcStubBuffer() {
        return IID_IRpcStubBuffer$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcStubBuffer
     * }
     */
    public static void IID_IRpcStubBuffer(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IRpcStubBuffer$constants.SEGMENT, 0L, IID_IRpcStubBuffer$constants.LAYOUT.byteSize());
    }

    private static class IID_IPSFactoryBuffer$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IPSFactoryBuffer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPSFactoryBuffer
     * }
     */
    public static GroupLayout IID_IPSFactoryBuffer$layout() {
        return IID_IPSFactoryBuffer$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPSFactoryBuffer
     * }
     */
    public static MemorySegment IID_IPSFactoryBuffer() {
        return IID_IPSFactoryBuffer$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPSFactoryBuffer
     * }
     */
    public static void IID_IPSFactoryBuffer(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IPSFactoryBuffer$constants.SEGMENT, 0L, IID_IPSFactoryBuffer$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IChannelHook$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IChannelHook").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IChannelHook
     * }
     */
    public static GroupLayout IID_IChannelHook$layout() {
        return IID_IChannelHook$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IChannelHook
     * }
     */
    public static MemorySegment IID_IChannelHook() {
        return IID_IChannelHook$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IChannelHook
     * }
     */
    public static void IID_IChannelHook(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IChannelHook$constants.SEGMENT, 0L, IID_IChannelHook$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef SOLE_AUTHENTICATION_SERVICE *PSOLE_AUTHENTICATION_SERVICE
     * }
     */
    public static final AddressLayout PSOLE_AUTHENTICATION_SERVICE = wgl_h.C_POINTER;
    private static final int EOAC_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagEOLE_AUTHENTICATION_CAPABILITIES.EOAC_NONE = 0
     * }
     */
    public static int EOAC_NONE() {
        return EOAC_NONE;
    }
    private static final int EOAC_MUTUAL_AUTH = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagEOLE_AUTHENTICATION_CAPABILITIES.EOAC_MUTUAL_AUTH = 1
     * }
     */
    public static int EOAC_MUTUAL_AUTH() {
        return EOAC_MUTUAL_AUTH;
    }
    private static final int EOAC_STATIC_CLOAKING = (int)32L;
    /**
     * {@snippet lang=c :
     * enum tagEOLE_AUTHENTICATION_CAPABILITIES.EOAC_STATIC_CLOAKING = 32
     * }
     */
    public static int EOAC_STATIC_CLOAKING() {
        return EOAC_STATIC_CLOAKING;
    }
    private static final int EOAC_DYNAMIC_CLOAKING = (int)64L;
    /**
     * {@snippet lang=c :
     * enum tagEOLE_AUTHENTICATION_CAPABILITIES.EOAC_DYNAMIC_CLOAKING = 64
     * }
     */
    public static int EOAC_DYNAMIC_CLOAKING() {
        return EOAC_DYNAMIC_CLOAKING;
    }
    private static final int EOAC_ANY_AUTHORITY = (int)128L;
    /**
     * {@snippet lang=c :
     * enum tagEOLE_AUTHENTICATION_CAPABILITIES.EOAC_ANY_AUTHORITY = 128
     * }
     */
    public static int EOAC_ANY_AUTHORITY() {
        return EOAC_ANY_AUTHORITY;
    }
    private static final int EOAC_MAKE_FULLSIC = (int)256L;
    /**
     * {@snippet lang=c :
     * enum tagEOLE_AUTHENTICATION_CAPABILITIES.EOAC_MAKE_FULLSIC = 256
     * }
     */
    public static int EOAC_MAKE_FULLSIC() {
        return EOAC_MAKE_FULLSIC;
    }
    private static final int EOAC_DEFAULT = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum tagEOLE_AUTHENTICATION_CAPABILITIES.EOAC_DEFAULT = 2048
     * }
     */
    public static int EOAC_DEFAULT() {
        return EOAC_DEFAULT;
    }
    private static final int EOAC_SECURE_REFS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagEOLE_AUTHENTICATION_CAPABILITIES.EOAC_SECURE_REFS = 2
     * }
     */
    public static int EOAC_SECURE_REFS() {
        return EOAC_SECURE_REFS;
    }
    private static final int EOAC_ACCESS_CONTROL = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagEOLE_AUTHENTICATION_CAPABILITIES.EOAC_ACCESS_CONTROL = 4
     * }
     */
    public static int EOAC_ACCESS_CONTROL() {
        return EOAC_ACCESS_CONTROL;
    }
    private static final int EOAC_APPID = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagEOLE_AUTHENTICATION_CAPABILITIES.EOAC_APPID = 8
     * }
     */
    public static int EOAC_APPID() {
        return EOAC_APPID;
    }
    private static final int EOAC_DYNAMIC = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagEOLE_AUTHENTICATION_CAPABILITIES.EOAC_DYNAMIC = 16
     * }
     */
    public static int EOAC_DYNAMIC() {
        return EOAC_DYNAMIC;
    }
    private static final int EOAC_REQUIRE_FULLSIC = (int)512L;
    /**
     * {@snippet lang=c :
     * enum tagEOLE_AUTHENTICATION_CAPABILITIES.EOAC_REQUIRE_FULLSIC = 512
     * }
     */
    public static int EOAC_REQUIRE_FULLSIC() {
        return EOAC_REQUIRE_FULLSIC;
    }
    private static final int EOAC_AUTO_IMPERSONATE = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum tagEOLE_AUTHENTICATION_CAPABILITIES.EOAC_AUTO_IMPERSONATE = 1024
     * }
     */
    public static int EOAC_AUTO_IMPERSONATE() {
        return EOAC_AUTO_IMPERSONATE;
    }
    private static final int EOAC_DISABLE_AAA = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum tagEOLE_AUTHENTICATION_CAPABILITIES.EOAC_DISABLE_AAA = 4096
     * }
     */
    public static int EOAC_DISABLE_AAA() {
        return EOAC_DISABLE_AAA;
    }
    private static final int EOAC_NO_CUSTOM_MARSHAL = (int)8192L;
    /**
     * {@snippet lang=c :
     * enum tagEOLE_AUTHENTICATION_CAPABILITIES.EOAC_NO_CUSTOM_MARSHAL = 8192
     * }
     */
    public static int EOAC_NO_CUSTOM_MARSHAL() {
        return EOAC_NO_CUSTOM_MARSHAL;
    }
    private static final int EOAC_RESERVED1 = (int)16384L;
    /**
     * {@snippet lang=c :
     * enum tagEOLE_AUTHENTICATION_CAPABILITIES.EOAC_RESERVED1 = 16384
     * }
     */
    public static int EOAC_RESERVED1() {
        return EOAC_RESERVED1;
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagSOLE_AUTHENTICATION_INFO {
     *     DWORD dwAuthnSvc;
     *     DWORD dwAuthzSvc;
     *     void *pAuthInfo;
     * } *PSOLE_AUTHENTICATION_INFO
     * }
     */
    public static final AddressLayout PSOLE_AUTHENTICATION_INFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagSOLE_AUTHENTICATION_LIST {
     *     DWORD cAuthInfo;
     *     SOLE_AUTHENTICATION_INFO *aAuthInfo;
     * } *PSOLE_AUTHENTICATION_LIST
     * }
     */
    public static final AddressLayout PSOLE_AUTHENTICATION_LIST = wgl_h.C_POINTER;

    private static class IID_IClientSecurity$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IClientSecurity").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IClientSecurity
     * }
     */
    public static GroupLayout IID_IClientSecurity$layout() {
        return IID_IClientSecurity$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IClientSecurity
     * }
     */
    public static MemorySegment IID_IClientSecurity() {
        return IID_IClientSecurity$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IClientSecurity
     * }
     */
    public static void IID_IClientSecurity(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IClientSecurity$constants.SEGMENT, 0L, IID_IClientSecurity$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IServerSecurity$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IServerSecurity").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IServerSecurity
     * }
     */
    public static GroupLayout IID_IServerSecurity$layout() {
        return IID_IServerSecurity$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IServerSecurity
     * }
     */
    public static MemorySegment IID_IServerSecurity() {
        return IID_IServerSecurity$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IServerSecurity
     * }
     */
    public static void IID_IServerSecurity(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IServerSecurity$constants.SEGMENT, 0L, IID_IServerSecurity$constants.LAYOUT.byteSize());
    }
    private static final int COMBND_RPCTIMEOUT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagRPCOPT_PROPERTIES.COMBND_RPCTIMEOUT = 1
     * }
     */
    public static int COMBND_RPCTIMEOUT() {
        return COMBND_RPCTIMEOUT;
    }
    private static final int COMBND_SERVER_LOCALITY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagRPCOPT_PROPERTIES.COMBND_SERVER_LOCALITY = 2
     * }
     */
    public static int COMBND_SERVER_LOCALITY() {
        return COMBND_SERVER_LOCALITY;
    }
    private static final int COMBND_RESERVED1 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagRPCOPT_PROPERTIES.COMBND_RESERVED1 = 4
     * }
     */
    public static int COMBND_RESERVED1() {
        return COMBND_RESERVED1;
    }
    private static final int COMBND_RESERVED2 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum tagRPCOPT_PROPERTIES.COMBND_RESERVED2 = 5
     * }
     */
    public static int COMBND_RESERVED2() {
        return COMBND_RESERVED2;
    }
    private static final int COMBND_RESERVED3 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagRPCOPT_PROPERTIES.COMBND_RESERVED3 = 8
     * }
     */
    public static int COMBND_RESERVED3() {
        return COMBND_RESERVED3;
    }
    private static final int COMBND_RESERVED4 = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagRPCOPT_PROPERTIES.COMBND_RESERVED4 = 16
     * }
     */
    public static int COMBND_RESERVED4() {
        return COMBND_RESERVED4;
    }
    private static final int SERVER_LOCALITY_PROCESS_LOCAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagRPCOPT_SERVER_LOCALITY_VALUES.SERVER_LOCALITY_PROCESS_LOCAL = 0
     * }
     */
    public static int SERVER_LOCALITY_PROCESS_LOCAL() {
        return SERVER_LOCALITY_PROCESS_LOCAL;
    }
    private static final int SERVER_LOCALITY_MACHINE_LOCAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagRPCOPT_SERVER_LOCALITY_VALUES.SERVER_LOCALITY_MACHINE_LOCAL = 1
     * }
     */
    public static int SERVER_LOCALITY_MACHINE_LOCAL() {
        return SERVER_LOCALITY_MACHINE_LOCAL;
    }
    private static final int SERVER_LOCALITY_REMOTE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagRPCOPT_SERVER_LOCALITY_VALUES.SERVER_LOCALITY_REMOTE = 2
     * }
     */
    public static int SERVER_LOCALITY_REMOTE() {
        return SERVER_LOCALITY_REMOTE;
    }

    private static class __MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IRpcOptions$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IRpcOptions").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcOptions
     * }
     */
    public static GroupLayout IID_IRpcOptions$layout() {
        return IID_IRpcOptions$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcOptions
     * }
     */
    public static MemorySegment IID_IRpcOptions() {
        return IID_IRpcOptions$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcOptions
     * }
     */
    public static void IID_IRpcOptions(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IRpcOptions$constants.SEGMENT, 0L, IID_IRpcOptions$constants.LAYOUT.byteSize());
    }
    private static final int COMGLB_EXCEPTION_HANDLING = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_PROPERTIES.COMGLB_EXCEPTION_HANDLING = 1
     * }
     */
    public static int COMGLB_EXCEPTION_HANDLING() {
        return COMGLB_EXCEPTION_HANDLING;
    }
    private static final int COMGLB_APPID = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_PROPERTIES.COMGLB_APPID = 2
     * }
     */
    public static int COMGLB_APPID() {
        return COMGLB_APPID;
    }
    private static final int COMGLB_RPC_THREADPOOL_SETTING = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_PROPERTIES.COMGLB_RPC_THREADPOOL_SETTING = 3
     * }
     */
    public static int COMGLB_RPC_THREADPOOL_SETTING() {
        return COMGLB_RPC_THREADPOOL_SETTING;
    }
    private static final int COMGLB_RO_SETTINGS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_PROPERTIES.COMGLB_RO_SETTINGS = 4
     * }
     */
    public static int COMGLB_RO_SETTINGS() {
        return COMGLB_RO_SETTINGS;
    }
    private static final int COMGLB_UNMARSHALING_POLICY = (int)5L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_PROPERTIES.COMGLB_UNMARSHALING_POLICY = 5
     * }
     */
    public static int COMGLB_UNMARSHALING_POLICY() {
        return COMGLB_UNMARSHALING_POLICY;
    }
    private static final int COMGLB_PROPERTIES_RESERVED1 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_PROPERTIES.COMGLB_PROPERTIES_RESERVED1 = 6
     * }
     */
    public static int COMGLB_PROPERTIES_RESERVED1() {
        return COMGLB_PROPERTIES_RESERVED1;
    }
    private static final int COMGLB_PROPERTIES_RESERVED2 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_PROPERTIES.COMGLB_PROPERTIES_RESERVED2 = 7
     * }
     */
    public static int COMGLB_PROPERTIES_RESERVED2() {
        return COMGLB_PROPERTIES_RESERVED2;
    }
    private static final int COMGLB_PROPERTIES_RESERVED3 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_PROPERTIES.COMGLB_PROPERTIES_RESERVED3 = 8
     * }
     */
    public static int COMGLB_PROPERTIES_RESERVED3() {
        return COMGLB_PROPERTIES_RESERVED3;
    }
    private static final int COMGLB_EXCEPTION_HANDLE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_EH_VALUES.COMGLB_EXCEPTION_HANDLE = 0
     * }
     */
    public static int COMGLB_EXCEPTION_HANDLE() {
        return COMGLB_EXCEPTION_HANDLE;
    }
    private static final int COMGLB_EXCEPTION_DONOT_HANDLE_FATAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_EH_VALUES.COMGLB_EXCEPTION_DONOT_HANDLE_FATAL = 1
     * }
     */
    public static int COMGLB_EXCEPTION_DONOT_HANDLE_FATAL() {
        return COMGLB_EXCEPTION_DONOT_HANDLE_FATAL;
    }
    private static final int COMGLB_EXCEPTION_DONOT_HANDLE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_EH_VALUES.COMGLB_EXCEPTION_DONOT_HANDLE = 1
     * }
     */
    public static int COMGLB_EXCEPTION_DONOT_HANDLE() {
        return COMGLB_EXCEPTION_DONOT_HANDLE;
    }
    private static final int COMGLB_EXCEPTION_DONOT_HANDLE_ANY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_EH_VALUES.COMGLB_EXCEPTION_DONOT_HANDLE_ANY = 2
     * }
     */
    public static int COMGLB_EXCEPTION_DONOT_HANDLE_ANY() {
        return COMGLB_EXCEPTION_DONOT_HANDLE_ANY;
    }
    private static final int COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_RPCTP_VALUES.COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL = 0
     * }
     */
    public static int COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL() {
        return COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL;
    }
    private static final int COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_RPCTP_VALUES.COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL = 1
     * }
     */
    public static int COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL() {
        return COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL;
    }
    private static final int COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_RO_FLAGS.COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES = 1
     * }
     */
    public static int COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES() {
        return COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES;
    }
    private static final int COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_RO_FLAGS.COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES = 2
     * }
     */
    public static int COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES() {
        return COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES;
    }
    private static final int COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_RO_FLAGS.COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES = 4
     * }
     */
    public static int COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES() {
        return COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES;
    }
    private static final int COMGLB_FAST_RUNDOWN = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_RO_FLAGS.COMGLB_FAST_RUNDOWN = 8
     * }
     */
    public static int COMGLB_FAST_RUNDOWN() {
        return COMGLB_FAST_RUNDOWN;
    }
    private static final int COMGLB_RESERVED1 = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_RO_FLAGS.COMGLB_RESERVED1 = 16
     * }
     */
    public static int COMGLB_RESERVED1() {
        return COMGLB_RESERVED1;
    }
    private static final int COMGLB_RESERVED2 = (int)32L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_RO_FLAGS.COMGLB_RESERVED2 = 32
     * }
     */
    public static int COMGLB_RESERVED2() {
        return COMGLB_RESERVED2;
    }
    private static final int COMGLB_RESERVED3 = (int)64L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_RO_FLAGS.COMGLB_RESERVED3 = 64
     * }
     */
    public static int COMGLB_RESERVED3() {
        return COMGLB_RESERVED3;
    }
    private static final int COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES = (int)128L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_RO_FLAGS.COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES = 128
     * }
     */
    public static int COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES() {
        return COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES;
    }
    private static final int COMGLB_RESERVED4 = (int)256L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_RO_FLAGS.COMGLB_RESERVED4 = 256
     * }
     */
    public static int COMGLB_RESERVED4() {
        return COMGLB_RESERVED4;
    }
    private static final int COMGLB_RESERVED5 = (int)512L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_RO_FLAGS.COMGLB_RESERVED5 = 512
     * }
     */
    public static int COMGLB_RESERVED5() {
        return COMGLB_RESERVED5;
    }
    private static final int COMGLB_RESERVED6 = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_RO_FLAGS.COMGLB_RESERVED6 = 1024
     * }
     */
    public static int COMGLB_RESERVED6() {
        return COMGLB_RESERVED6;
    }
    private static final int COMGLB_UNMARSHALING_POLICY_NORMAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_UNMARSHALING_POLICY_VALUES.COMGLB_UNMARSHALING_POLICY_NORMAL = 0
     * }
     */
    public static int COMGLB_UNMARSHALING_POLICY_NORMAL() {
        return COMGLB_UNMARSHALING_POLICY_NORMAL;
    }
    private static final int COMGLB_UNMARSHALING_POLICY_STRONG = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_UNMARSHALING_POLICY_VALUES.COMGLB_UNMARSHALING_POLICY_STRONG = 1
     * }
     */
    public static int COMGLB_UNMARSHALING_POLICY_STRONG() {
        return COMGLB_UNMARSHALING_POLICY_STRONG;
    }
    private static final int COMGLB_UNMARSHALING_POLICY_HYBRID = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_UNMARSHALING_POLICY_VALUES.COMGLB_UNMARSHALING_POLICY_HYBRID = 2
     * }
     */
    public static int COMGLB_UNMARSHALING_POLICY_HYBRID() {
        return COMGLB_UNMARSHALING_POLICY_HYBRID;
    }

    private static class __MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IGlobalOptions$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IGlobalOptions").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IGlobalOptions
     * }
     */
    public static GroupLayout IID_IGlobalOptions$layout() {
        return IID_IGlobalOptions$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IGlobalOptions
     * }
     */
    public static MemorySegment IID_IGlobalOptions() {
        return IID_IGlobalOptions$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IGlobalOptions
     * }
     */
    public static void IID_IGlobalOptions(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IGlobalOptions$constants.SEGMENT, 0L, IID_IGlobalOptions$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef ISurrogate *LPSURROGATE
     * }
     */
    public static final AddressLayout LPSURROGATE = wgl_h.C_POINTER;

    private static class IID_ISurrogate$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_ISurrogate").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISurrogate
     * }
     */
    public static GroupLayout IID_ISurrogate$layout() {
        return IID_ISurrogate$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISurrogate
     * }
     */
    public static MemorySegment IID_ISurrogate() {
        return IID_ISurrogate$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISurrogate
     * }
     */
    public static void IID_ISurrogate(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ISurrogate$constants.SEGMENT, 0L, IID_ISurrogate$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IGlobalInterfaceTable *LPGLOBALINTERFACETABLE
     * }
     */
    public static final AddressLayout LPGLOBALINTERFACETABLE = wgl_h.C_POINTER;

    private static class IID_IGlobalInterfaceTable$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IGlobalInterfaceTable").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IGlobalInterfaceTable
     * }
     */
    public static GroupLayout IID_IGlobalInterfaceTable$layout() {
        return IID_IGlobalInterfaceTable$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IGlobalInterfaceTable
     * }
     */
    public static MemorySegment IID_IGlobalInterfaceTable() {
        return IID_IGlobalInterfaceTable$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IGlobalInterfaceTable
     * }
     */
    public static void IID_IGlobalInterfaceTable(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IGlobalInterfaceTable$constants.SEGMENT, 0L, IID_IGlobalInterfaceTable$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_ISynchronize$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_ISynchronize").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISynchronize
     * }
     */
    public static GroupLayout IID_ISynchronize$layout() {
        return IID_ISynchronize$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISynchronize
     * }
     */
    public static MemorySegment IID_ISynchronize() {
        return IID_ISynchronize$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISynchronize
     * }
     */
    public static void IID_ISynchronize(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ISynchronize$constants.SEGMENT, 0L, IID_ISynchronize$constants.LAYOUT.byteSize());
    }

    private static class IID_ISynchronizeHandle$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_ISynchronizeHandle").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISynchronizeHandle
     * }
     */
    public static GroupLayout IID_ISynchronizeHandle$layout() {
        return IID_ISynchronizeHandle$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISynchronizeHandle
     * }
     */
    public static MemorySegment IID_ISynchronizeHandle() {
        return IID_ISynchronizeHandle$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISynchronizeHandle
     * }
     */
    public static void IID_ISynchronizeHandle(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ISynchronizeHandle$constants.SEGMENT, 0L, IID_ISynchronizeHandle$constants.LAYOUT.byteSize());
    }

    private static class IID_ISynchronizeEvent$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_ISynchronizeEvent").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISynchronizeEvent
     * }
     */
    public static GroupLayout IID_ISynchronizeEvent$layout() {
        return IID_ISynchronizeEvent$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISynchronizeEvent
     * }
     */
    public static MemorySegment IID_ISynchronizeEvent() {
        return IID_ISynchronizeEvent$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISynchronizeEvent
     * }
     */
    public static void IID_ISynchronizeEvent(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ISynchronizeEvent$constants.SEGMENT, 0L, IID_ISynchronizeEvent$constants.LAYOUT.byteSize());
    }

    private static class IID_ISynchronizeContainer$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_ISynchronizeContainer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISynchronizeContainer
     * }
     */
    public static GroupLayout IID_ISynchronizeContainer$layout() {
        return IID_ISynchronizeContainer$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISynchronizeContainer
     * }
     */
    public static MemorySegment IID_ISynchronizeContainer() {
        return IID_ISynchronizeContainer$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISynchronizeContainer
     * }
     */
    public static void IID_ISynchronizeContainer(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ISynchronizeContainer$constants.SEGMENT, 0L, IID_ISynchronizeContainer$constants.LAYOUT.byteSize());
    }

    private static class IID_ISynchronizeMutex$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_ISynchronizeMutex").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISynchronizeMutex
     * }
     */
    public static GroupLayout IID_ISynchronizeMutex$layout() {
        return IID_ISynchronizeMutex$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISynchronizeMutex
     * }
     */
    public static MemorySegment IID_ISynchronizeMutex() {
        return IID_ISynchronizeMutex$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISynchronizeMutex
     * }
     */
    public static void IID_ISynchronizeMutex(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ISynchronizeMutex$constants.SEGMENT, 0L, IID_ISynchronizeMutex$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef ICancelMethodCalls *LPCANCELMETHODCALLS
     * }
     */
    public static final AddressLayout LPCANCELMETHODCALLS = wgl_h.C_POINTER;

    private static class IID_ICancelMethodCalls$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_ICancelMethodCalls").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICancelMethodCalls
     * }
     */
    public static GroupLayout IID_ICancelMethodCalls$layout() {
        return IID_ICancelMethodCalls$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICancelMethodCalls
     * }
     */
    public static MemorySegment IID_ICancelMethodCalls() {
        return IID_ICancelMethodCalls$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICancelMethodCalls
     * }
     */
    public static void IID_ICancelMethodCalls(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ICancelMethodCalls$constants.SEGMENT, 0L, IID_ICancelMethodCalls$constants.LAYOUT.byteSize());
    }
    private static final int DCOM_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagDCOM_CALL_STATE.DCOM_NONE = 0
     * }
     */
    public static int DCOM_NONE() {
        return DCOM_NONE;
    }
    private static final int DCOM_CALL_COMPLETE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagDCOM_CALL_STATE.DCOM_CALL_COMPLETE = 1
     * }
     */
    public static int DCOM_CALL_COMPLETE() {
        return DCOM_CALL_COMPLETE;
    }
    private static final int DCOM_CALL_CANCELED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagDCOM_CALL_STATE.DCOM_CALL_CANCELED = 2
     * }
     */
    public static int DCOM_CALL_CANCELED() {
        return DCOM_CALL_CANCELED;
    }

    private static class IID_IAsyncManager$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IAsyncManager").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAsyncManager
     * }
     */
    public static GroupLayout IID_IAsyncManager$layout() {
        return IID_IAsyncManager$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAsyncManager
     * }
     */
    public static MemorySegment IID_IAsyncManager() {
        return IID_IAsyncManager$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAsyncManager
     * }
     */
    public static void IID_IAsyncManager(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IAsyncManager$constants.SEGMENT, 0L, IID_IAsyncManager$constants.LAYOUT.byteSize());
    }

    private static class IID_ICallFactory$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_ICallFactory").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICallFactory
     * }
     */
    public static GroupLayout IID_ICallFactory$layout() {
        return IID_ICallFactory$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICallFactory
     * }
     */
    public static MemorySegment IID_ICallFactory() {
        return IID_ICallFactory$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICallFactory
     * }
     */
    public static void IID_ICallFactory(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ICallFactory$constants.SEGMENT, 0L, IID_ICallFactory$constants.LAYOUT.byteSize());
    }

    private static class IID_IRpcHelper$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IRpcHelper").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcHelper
     * }
     */
    public static GroupLayout IID_IRpcHelper$layout() {
        return IID_IRpcHelper$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcHelper
     * }
     */
    public static MemorySegment IID_IRpcHelper() {
        return IID_IRpcHelper$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcHelper
     * }
     */
    public static void IID_IRpcHelper(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IRpcHelper$constants.SEGMENT, 0L, IID_IRpcHelper$constants.LAYOUT.byteSize());
    }

    private static class IID_IReleaseMarshalBuffers$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IReleaseMarshalBuffers").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IReleaseMarshalBuffers
     * }
     */
    public static GroupLayout IID_IReleaseMarshalBuffers$layout() {
        return IID_IReleaseMarshalBuffers$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IReleaseMarshalBuffers
     * }
     */
    public static MemorySegment IID_IReleaseMarshalBuffers() {
        return IID_IReleaseMarshalBuffers$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IReleaseMarshalBuffers
     * }
     */
    public static void IID_IReleaseMarshalBuffers(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IReleaseMarshalBuffers$constants.SEGMENT, 0L, IID_IReleaseMarshalBuffers$constants.LAYOUT.byteSize());
    }

    private static class IID_IWaitMultiple$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IWaitMultiple").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWaitMultiple
     * }
     */
    public static GroupLayout IID_IWaitMultiple$layout() {
        return IID_IWaitMultiple$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWaitMultiple
     * }
     */
    public static MemorySegment IID_IWaitMultiple() {
        return IID_IWaitMultiple$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWaitMultiple
     * }
     */
    public static void IID_IWaitMultiple(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IWaitMultiple$constants.SEGMENT, 0L, IID_IWaitMultiple$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IAddrTrackingControl *LPADDRTRACKINGCONTROL
     * }
     */
    public static final AddressLayout LPADDRTRACKINGCONTROL = wgl_h.C_POINTER;

    private static class IID_IAddrTrackingControl$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IAddrTrackingControl").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAddrTrackingControl
     * }
     */
    public static GroupLayout IID_IAddrTrackingControl$layout() {
        return IID_IAddrTrackingControl$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAddrTrackingControl
     * }
     */
    public static MemorySegment IID_IAddrTrackingControl() {
        return IID_IAddrTrackingControl$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAddrTrackingControl
     * }
     */
    public static void IID_IAddrTrackingControl(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IAddrTrackingControl$constants.SEGMENT, 0L, IID_IAddrTrackingControl$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IAddrExclusionControl *LPADDREXCLUSIONCONTROL
     * }
     */
    public static final AddressLayout LPADDREXCLUSIONCONTROL = wgl_h.C_POINTER;

    private static class IID_IAddrExclusionControl$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IAddrExclusionControl").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAddrExclusionControl
     * }
     */
    public static GroupLayout IID_IAddrExclusionControl$layout() {
        return IID_IAddrExclusionControl$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAddrExclusionControl
     * }
     */
    public static MemorySegment IID_IAddrExclusionControl() {
        return IID_IAddrExclusionControl$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAddrExclusionControl
     * }
     */
    public static void IID_IAddrExclusionControl(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IAddrExclusionControl$constants.SEGMENT, 0L, IID_IAddrExclusionControl$constants.LAYOUT.byteSize());
    }

    private static class IID_IPipeByte$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IPipeByte").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPipeByte
     * }
     */
    public static GroupLayout IID_IPipeByte$layout() {
        return IID_IPipeByte$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPipeByte
     * }
     */
    public static MemorySegment IID_IPipeByte() {
        return IID_IPipeByte$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPipeByte
     * }
     */
    public static void IID_IPipeByte(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IPipeByte$constants.SEGMENT, 0L, IID_IPipeByte$constants.LAYOUT.byteSize());
    }

    private static class IID_AsyncIPipeByte$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_AsyncIPipeByte").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIPipeByte
     * }
     */
    public static GroupLayout IID_AsyncIPipeByte$layout() {
        return IID_AsyncIPipeByte$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIPipeByte
     * }
     */
    public static MemorySegment IID_AsyncIPipeByte() {
        return IID_AsyncIPipeByte$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIPipeByte
     * }
     */
    public static void IID_AsyncIPipeByte(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_AsyncIPipeByte$constants.SEGMENT, 0L, IID_AsyncIPipeByte$constants.LAYOUT.byteSize());
    }

    private static class IID_IPipeLong$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IPipeLong").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPipeLong
     * }
     */
    public static GroupLayout IID_IPipeLong$layout() {
        return IID_IPipeLong$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPipeLong
     * }
     */
    public static MemorySegment IID_IPipeLong() {
        return IID_IPipeLong$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPipeLong
     * }
     */
    public static void IID_IPipeLong(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IPipeLong$constants.SEGMENT, 0L, IID_IPipeLong$constants.LAYOUT.byteSize());
    }

    private static class IID_AsyncIPipeLong$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_AsyncIPipeLong").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIPipeLong
     * }
     */
    public static GroupLayout IID_AsyncIPipeLong$layout() {
        return IID_AsyncIPipeLong$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIPipeLong
     * }
     */
    public static MemorySegment IID_AsyncIPipeLong() {
        return IID_AsyncIPipeLong$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIPipeLong
     * }
     */
    public static void IID_AsyncIPipeLong(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_AsyncIPipeLong$constants.SEGMENT, 0L, IID_AsyncIPipeLong$constants.LAYOUT.byteSize());
    }

    private static class IID_IPipeDouble$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IPipeDouble").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPipeDouble
     * }
     */
    public static GroupLayout IID_IPipeDouble$layout() {
        return IID_IPipeDouble$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPipeDouble
     * }
     */
    public static MemorySegment IID_IPipeDouble() {
        return IID_IPipeDouble$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPipeDouble
     * }
     */
    public static void IID_IPipeDouble(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IPipeDouble$constants.SEGMENT, 0L, IID_IPipeDouble$constants.LAYOUT.byteSize());
    }

    private static class IID_AsyncIPipeDouble$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_AsyncIPipeDouble").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIPipeDouble
     * }
     */
    public static GroupLayout IID_AsyncIPipeDouble$layout() {
        return IID_AsyncIPipeDouble$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIPipeDouble
     * }
     */
    public static MemorySegment IID_AsyncIPipeDouble() {
        return IID_AsyncIPipeDouble$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIPipeDouble
     * }
     */
    public static void IID_AsyncIPipeDouble(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_AsyncIPipeDouble$constants.SEGMENT, 0L, IID_AsyncIPipeDouble$constants.LAYOUT.byteSize());
    }
    private static final int APTTYPEQUALIFIER_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _APTTYPEQUALIFIER.APTTYPEQUALIFIER_NONE = 0
     * }
     */
    public static int APTTYPEQUALIFIER_NONE() {
        return APTTYPEQUALIFIER_NONE;
    }
    private static final int APTTYPEQUALIFIER_IMPLICIT_MTA = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _APTTYPEQUALIFIER.APTTYPEQUALIFIER_IMPLICIT_MTA = 1
     * }
     */
    public static int APTTYPEQUALIFIER_IMPLICIT_MTA() {
        return APTTYPEQUALIFIER_IMPLICIT_MTA;
    }
    private static final int APTTYPEQUALIFIER_NA_ON_MTA = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _APTTYPEQUALIFIER.APTTYPEQUALIFIER_NA_ON_MTA = 2
     * }
     */
    public static int APTTYPEQUALIFIER_NA_ON_MTA() {
        return APTTYPEQUALIFIER_NA_ON_MTA;
    }
    private static final int APTTYPEQUALIFIER_NA_ON_STA = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _APTTYPEQUALIFIER.APTTYPEQUALIFIER_NA_ON_STA = 3
     * }
     */
    public static int APTTYPEQUALIFIER_NA_ON_STA() {
        return APTTYPEQUALIFIER_NA_ON_STA;
    }
    private static final int APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _APTTYPEQUALIFIER.APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA = 4
     * }
     */
    public static int APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA() {
        return APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA;
    }
    private static final int APTTYPEQUALIFIER_NA_ON_MAINSTA = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _APTTYPEQUALIFIER.APTTYPEQUALIFIER_NA_ON_MAINSTA = 5
     * }
     */
    public static int APTTYPEQUALIFIER_NA_ON_MAINSTA() {
        return APTTYPEQUALIFIER_NA_ON_MAINSTA;
    }
    private static final int APTTYPEQUALIFIER_APPLICATION_STA = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _APTTYPEQUALIFIER.APTTYPEQUALIFIER_APPLICATION_STA = 6
     * }
     */
    public static int APTTYPEQUALIFIER_APPLICATION_STA() {
        return APTTYPEQUALIFIER_APPLICATION_STA;
    }
    private static final int APTTYPEQUALIFIER_RESERVED_1 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _APTTYPEQUALIFIER.APTTYPEQUALIFIER_RESERVED_1 = 7
     * }
     */
    public static int APTTYPEQUALIFIER_RESERVED_1() {
        return APTTYPEQUALIFIER_RESERVED_1;
    }
    private static final int APTTYPE_CURRENT = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum _APTTYPE.APTTYPE_CURRENT = -1
     * }
     */
    public static int APTTYPE_CURRENT() {
        return APTTYPE_CURRENT;
    }
    private static final int APTTYPE_STA = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _APTTYPE.APTTYPE_STA = 0
     * }
     */
    public static int APTTYPE_STA() {
        return APTTYPE_STA;
    }
    private static final int APTTYPE_MTA = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _APTTYPE.APTTYPE_MTA = 1
     * }
     */
    public static int APTTYPE_MTA() {
        return APTTYPE_MTA;
    }
    private static final int APTTYPE_NA = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _APTTYPE.APTTYPE_NA = 2
     * }
     */
    public static int APTTYPE_NA() {
        return APTTYPE_NA;
    }
    private static final int APTTYPE_MAINSTA = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _APTTYPE.APTTYPE_MAINSTA = 3
     * }
     */
    public static int APTTYPE_MAINSTA() {
        return APTTYPE_MAINSTA;
    }
    private static final int THDTYPE_BLOCKMESSAGES = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _THDTYPE.THDTYPE_BLOCKMESSAGES = 0
     * }
     */
    public static int THDTYPE_BLOCKMESSAGES() {
        return THDTYPE_BLOCKMESSAGES;
    }
    private static final int THDTYPE_PROCESSMESSAGES = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _THDTYPE.THDTYPE_PROCESSMESSAGES = 1
     * }
     */
    public static int THDTYPE_PROCESSMESSAGES() {
        return THDTYPE_PROCESSMESSAGES;
    }
    /**
     * {@snippet lang=c :
     * typedef DWORD APARTMENTID
     * }
     */
    public static final OfInt APARTMENTID = wgl_h.C_LONG;

    private static class __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IComThreadingInfo$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IComThreadingInfo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IComThreadingInfo
     * }
     */
    public static GroupLayout IID_IComThreadingInfo$layout() {
        return IID_IComThreadingInfo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IComThreadingInfo
     * }
     */
    public static MemorySegment IID_IComThreadingInfo() {
        return IID_IComThreadingInfo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IComThreadingInfo
     * }
     */
    public static void IID_IComThreadingInfo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IComThreadingInfo$constants.SEGMENT, 0L, IID_IComThreadingInfo$constants.LAYOUT.byteSize());
    }

    private static class IID_IProcessInitControl$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IProcessInitControl").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IProcessInitControl
     * }
     */
    public static GroupLayout IID_IProcessInitControl$layout() {
        return IID_IProcessInitControl$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IProcessInitControl
     * }
     */
    public static MemorySegment IID_IProcessInitControl() {
        return IID_IProcessInitControl$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IProcessInitControl
     * }
     */
    public static void IID_IProcessInitControl(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IProcessInitControl$constants.SEGMENT, 0L, IID_IProcessInitControl$constants.LAYOUT.byteSize());
    }

    private static class IID_IFastRundown$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IFastRundown").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IFastRundown
     * }
     */
    public static GroupLayout IID_IFastRundown$layout() {
        return IID_IFastRundown$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IFastRundown
     * }
     */
    public static MemorySegment IID_IFastRundown() {
        return IID_IFastRundown$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IFastRundown
     * }
     */
    public static void IID_IFastRundown(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IFastRundown$constants.SEGMENT, 0L, IID_IFastRundown$constants.LAYOUT.byteSize());
    }
    private static final int CO_MARSHALING_SOURCE_IS_APP_CONTAINER = (int)0L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_SOURCE_IS_APP_CONTAINER = 0
     * }
     */
    public static int CO_MARSHALING_SOURCE_IS_APP_CONTAINER() {
        return CO_MARSHALING_SOURCE_IS_APP_CONTAINER;
    }
    private static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_1 = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_1 = -2147483648
     * }
     */
    public static int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_1() {
        return CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_1;
    }
    private static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_2 = (int)-2147483647L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_2 = -2147483647
     * }
     */
    public static int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_2() {
        return CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_2;
    }
    private static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_3 = (int)-2147483646L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_3 = -2147483646
     * }
     */
    public static int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_3() {
        return CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_3;
    }
    private static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_4 = (int)-2147483645L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_4 = -2147483645
     * }
     */
    public static int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_4() {
        return CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_4;
    }
    private static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_5 = (int)-2147483644L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_5 = -2147483644
     * }
     */
    public static int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_5() {
        return CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_5;
    }
    private static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_6 = (int)-2147483643L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_6 = -2147483643
     * }
     */
    public static int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_6() {
        return CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_6;
    }
    private static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_7 = (int)-2147483642L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_7 = -2147483642
     * }
     */
    public static int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_7() {
        return CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_7;
    }
    private static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_8 = (int)-2147483641L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_8 = -2147483641
     * }
     */
    public static int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_8() {
        return CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_8;
    }
    private static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_9 = (int)-2147483640L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_9 = -2147483640
     * }
     */
    public static int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_9() {
        return CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_9;
    }
    private static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_10 = (int)-2147483639L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_10 = -2147483639
     * }
     */
    public static int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_10() {
        return CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_10;
    }
    private static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_11 = (int)-2147483638L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_11 = -2147483638
     * }
     */
    public static int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_11() {
        return CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_11;
    }
    private static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_12 = (int)-2147483637L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_12 = -2147483637
     * }
     */
    public static int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_12() {
        return CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_12;
    }
    private static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_13 = (int)-2147483636L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_13 = -2147483636
     * }
     */
    public static int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_13() {
        return CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_13;
    }
    private static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_14 = (int)-2147483635L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_14 = -2147483635
     * }
     */
    public static int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_14() {
        return CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_14;
    }
    private static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_15 = (int)-2147483634L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_15 = -2147483634
     * }
     */
    public static int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_15() {
        return CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_15;
    }
    private static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_16 = (int)-2147483633L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_16 = -2147483633
     * }
     */
    public static int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_16() {
        return CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_16;
    }
    private static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_17 = (int)-2147483632L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_17 = -2147483632
     * }
     */
    public static int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_17() {
        return CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_17;
    }
    private static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_18 = (int)-2147483631L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_18 = -2147483631
     * }
     */
    public static int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_18() {
        return CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_18;
    }

    private static class __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IMarshalingStream$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IMarshalingStream").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMarshalingStream
     * }
     */
    public static GroupLayout IID_IMarshalingStream$layout() {
        return IID_IMarshalingStream$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMarshalingStream
     * }
     */
    public static MemorySegment IID_IMarshalingStream() {
        return IID_IMarshalingStream$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMarshalingStream
     * }
     */
    public static void IID_IMarshalingStream(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IMarshalingStream$constants.SEGMENT, 0L, IID_IMarshalingStream$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IAgileReference$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IAgileReference").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAgileReference
     * }
     */
    public static GroupLayout IID_IAgileReference$layout() {
        return IID_IAgileReference$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAgileReference
     * }
     */
    public static MemorySegment IID_IAgileReference() {
        return IID_IAgileReference$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAgileReference
     * }
     */
    public static void IID_IAgileReference(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IAgileReference$constants.SEGMENT, 0L, IID_IAgileReference$constants.LAYOUT.byteSize());
    }

    private static class IID_ICallbackWithNoReentrancyToApplicationSTA$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_ICallbackWithNoReentrancyToApplicationSTA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID IID_ICallbackWithNoReentrancyToApplicationSTA
     * }
     */
    public static GroupLayout IID_ICallbackWithNoReentrancyToApplicationSTA$layout() {
        return IID_ICallbackWithNoReentrancyToApplicationSTA$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID IID_ICallbackWithNoReentrancyToApplicationSTA
     * }
     */
    public static MemorySegment IID_ICallbackWithNoReentrancyToApplicationSTA() {
        return IID_ICallbackWithNoReentrancyToApplicationSTA$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID IID_ICallbackWithNoReentrancyToApplicationSTA
     * }
     */
    public static void IID_ICallbackWithNoReentrancyToApplicationSTA(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ICallbackWithNoReentrancyToApplicationSTA$constants.SEGMENT, 0L, IID_ICallbackWithNoReentrancyToApplicationSTA$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IEnumUnknown_Next_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumUnknown_Next_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumUnknown_Next_Proxy(IEnumUnknown *This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumUnknown_Next_Proxy$descriptor() {
        return IEnumUnknown_Next_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumUnknown_Next_Proxy(IEnumUnknown *This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumUnknown_Next_Proxy$handle() {
        return IEnumUnknown_Next_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumUnknown_Next_Proxy(IEnumUnknown *This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumUnknown_Next_Proxy$address() {
        return IEnumUnknown_Next_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumUnknown_Next_Proxy(IEnumUnknown *This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumUnknown_Next_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumUnknown_Next_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumUnknown_Next_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumUnknown_Next_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumUnknown_Next_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumUnknown_Next_Stub(IEnumUnknown *This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumUnknown_Next_Stub$descriptor() {
        return IEnumUnknown_Next_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumUnknown_Next_Stub(IEnumUnknown *This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumUnknown_Next_Stub$handle() {
        return IEnumUnknown_Next_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumUnknown_Next_Stub(IEnumUnknown *This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumUnknown_Next_Stub$address() {
        return IEnumUnknown_Next_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumUnknown_Next_Stub(IEnumUnknown *This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumUnknown_Next_Stub(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumUnknown_Next_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumUnknown_Next_Stub", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumString_Next_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumString_Next_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumString_Next_Proxy(IEnumString *This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumString_Next_Proxy$descriptor() {
        return IEnumString_Next_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumString_Next_Proxy(IEnumString *This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumString_Next_Proxy$handle() {
        return IEnumString_Next_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumString_Next_Proxy(IEnumString *This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumString_Next_Proxy$address() {
        return IEnumString_Next_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumString_Next_Proxy(IEnumString *This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumString_Next_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumString_Next_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumString_Next_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumString_Next_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumString_Next_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumString_Next_Stub(IEnumString *This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumString_Next_Stub$descriptor() {
        return IEnumString_Next_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumString_Next_Stub(IEnumString *This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumString_Next_Stub$handle() {
        return IEnumString_Next_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumString_Next_Stub(IEnumString *This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumString_Next_Stub$address() {
        return IEnumString_Next_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumString_Next_Stub(IEnumString *This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumString_Next_Stub(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumString_Next_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumString_Next_Stub", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ISequentialStream_Read_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ISequentialStream_Read_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ISequentialStream_Read_Proxy(ISequentialStream *This, void *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static FunctionDescriptor ISequentialStream_Read_Proxy$descriptor() {
        return ISequentialStream_Read_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ISequentialStream_Read_Proxy(ISequentialStream *This, void *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static MethodHandle ISequentialStream_Read_Proxy$handle() {
        return ISequentialStream_Read_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ISequentialStream_Read_Proxy(ISequentialStream *This, void *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static MemorySegment ISequentialStream_Read_Proxy$address() {
        return ISequentialStream_Read_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ISequentialStream_Read_Proxy(ISequentialStream *This, void *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static int ISequentialStream_Read_Proxy(MemorySegment This, MemorySegment pv, int cb, MemorySegment pcbRead) {
        var mh$ = ISequentialStream_Read_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ISequentialStream_Read_Proxy", This, pv, cb, pcbRead);
            }
            return (int)mh$.invokeExact(This, pv, cb, pcbRead);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ISequentialStream_Read_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ISequentialStream_Read_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ISequentialStream_Read_Stub(ISequentialStream *This, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static FunctionDescriptor ISequentialStream_Read_Stub$descriptor() {
        return ISequentialStream_Read_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ISequentialStream_Read_Stub(ISequentialStream *This, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static MethodHandle ISequentialStream_Read_Stub$handle() {
        return ISequentialStream_Read_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ISequentialStream_Read_Stub(ISequentialStream *This, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static MemorySegment ISequentialStream_Read_Stub$address() {
        return ISequentialStream_Read_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ISequentialStream_Read_Stub(ISequentialStream *This, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static int ISequentialStream_Read_Stub(MemorySegment This, MemorySegment pv, int cb, MemorySegment pcbRead) {
        var mh$ = ISequentialStream_Read_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ISequentialStream_Read_Stub", This, pv, cb, pcbRead);
            }
            return (int)mh$.invokeExact(This, pv, cb, pcbRead);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ISequentialStream_Write_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ISequentialStream_Write_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ISequentialStream_Write_Proxy(ISequentialStream *This, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static FunctionDescriptor ISequentialStream_Write_Proxy$descriptor() {
        return ISequentialStream_Write_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ISequentialStream_Write_Proxy(ISequentialStream *This, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MethodHandle ISequentialStream_Write_Proxy$handle() {
        return ISequentialStream_Write_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ISequentialStream_Write_Proxy(ISequentialStream *This, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MemorySegment ISequentialStream_Write_Proxy$address() {
        return ISequentialStream_Write_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ISequentialStream_Write_Proxy(ISequentialStream *This, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static int ISequentialStream_Write_Proxy(MemorySegment This, MemorySegment pv, int cb, MemorySegment pcbWritten) {
        var mh$ = ISequentialStream_Write_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ISequentialStream_Write_Proxy", This, pv, cb, pcbWritten);
            }
            return (int)mh$.invokeExact(This, pv, cb, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ISequentialStream_Write_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ISequentialStream_Write_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ISequentialStream_Write_Stub(ISequentialStream *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static FunctionDescriptor ISequentialStream_Write_Stub$descriptor() {
        return ISequentialStream_Write_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ISequentialStream_Write_Stub(ISequentialStream *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MethodHandle ISequentialStream_Write_Stub$handle() {
        return ISequentialStream_Write_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ISequentialStream_Write_Stub(ISequentialStream *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MemorySegment ISequentialStream_Write_Stub$address() {
        return ISequentialStream_Write_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ISequentialStream_Write_Stub(ISequentialStream *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static int ISequentialStream_Write_Stub(MemorySegment This, MemorySegment pv, int cb, MemorySegment pcbWritten) {
        var mh$ = ISequentialStream_Write_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ISequentialStream_Write_Stub", This, pv, cb, pcbWritten);
            }
            return (int)mh$.invokeExact(This, pv, cb, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStream_Seek_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            _LARGE_INTEGER.layout(),
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IStream_Seek_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStream_Seek_Proxy(IStream *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition)
     * }
     */
    public static FunctionDescriptor IStream_Seek_Proxy$descriptor() {
        return IStream_Seek_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStream_Seek_Proxy(IStream *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition)
     * }
     */
    public static MethodHandle IStream_Seek_Proxy$handle() {
        return IStream_Seek_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IStream_Seek_Proxy(IStream *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition)
     * }
     */
    public static MemorySegment IStream_Seek_Proxy$address() {
        return IStream_Seek_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IStream_Seek_Proxy(IStream *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition)
     * }
     */
    public static int IStream_Seek_Proxy(MemorySegment This, MemorySegment dlibMove, int dwOrigin, MemorySegment plibNewPosition) {
        var mh$ = IStream_Seek_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStream_Seek_Proxy", This, dlibMove, dwOrigin, plibNewPosition);
            }
            return (int)mh$.invokeExact(This, dlibMove, dwOrigin, plibNewPosition);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStream_Seek_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            _LARGE_INTEGER.layout(),
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IStream_Seek_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStream_Seek_Stub(IStream *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition)
     * }
     */
    public static FunctionDescriptor IStream_Seek_Stub$descriptor() {
        return IStream_Seek_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStream_Seek_Stub(IStream *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition)
     * }
     */
    public static MethodHandle IStream_Seek_Stub$handle() {
        return IStream_Seek_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IStream_Seek_Stub(IStream *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition)
     * }
     */
    public static MemorySegment IStream_Seek_Stub$address() {
        return IStream_Seek_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IStream_Seek_Stub(IStream *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition)
     * }
     */
    public static int IStream_Seek_Stub(MemorySegment This, MemorySegment dlibMove, int dwOrigin, MemorySegment plibNewPosition) {
        var mh$ = IStream_Seek_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStream_Seek_Stub", This, dlibMove, dwOrigin, plibNewPosition);
            }
            return (int)mh$.invokeExact(This, dlibMove, dwOrigin, plibNewPosition);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStream_CopyTo_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            _ULARGE_INTEGER.layout(),
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IStream_CopyTo_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStream_CopyTo_Proxy(IStream *This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten)
     * }
     */
    public static FunctionDescriptor IStream_CopyTo_Proxy$descriptor() {
        return IStream_CopyTo_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStream_CopyTo_Proxy(IStream *This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten)
     * }
     */
    public static MethodHandle IStream_CopyTo_Proxy$handle() {
        return IStream_CopyTo_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IStream_CopyTo_Proxy(IStream *This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten)
     * }
     */
    public static MemorySegment IStream_CopyTo_Proxy$address() {
        return IStream_CopyTo_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IStream_CopyTo_Proxy(IStream *This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten)
     * }
     */
    public static int IStream_CopyTo_Proxy(MemorySegment This, MemorySegment pstm, MemorySegment cb, MemorySegment pcbRead, MemorySegment pcbWritten) {
        var mh$ = IStream_CopyTo_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStream_CopyTo_Proxy", This, pstm, cb, pcbRead, pcbWritten);
            }
            return (int)mh$.invokeExact(This, pstm, cb, pcbRead, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStream_CopyTo_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            _ULARGE_INTEGER.layout(),
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IStream_CopyTo_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStream_CopyTo_Stub(IStream *This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten)
     * }
     */
    public static FunctionDescriptor IStream_CopyTo_Stub$descriptor() {
        return IStream_CopyTo_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStream_CopyTo_Stub(IStream *This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten)
     * }
     */
    public static MethodHandle IStream_CopyTo_Stub$handle() {
        return IStream_CopyTo_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IStream_CopyTo_Stub(IStream *This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten)
     * }
     */
    public static MemorySegment IStream_CopyTo_Stub$address() {
        return IStream_CopyTo_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IStream_CopyTo_Stub(IStream *This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten)
     * }
     */
    public static int IStream_CopyTo_Stub(MemorySegment This, MemorySegment pstm, MemorySegment cb, MemorySegment pcbRead, MemorySegment pcbWritten) {
        var mh$ = IStream_CopyTo_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStream_CopyTo_Stub", This, pstm, cb, pcbRead, pcbWritten);
            }
            return (int)mh$.invokeExact(This, pstm, cb, pcbRead, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GUID_NULL$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("GUID_NULL").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID GUID_NULL
     * }
     */
    public static GroupLayout GUID_NULL$layout() {
        return GUID_NULL$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID GUID_NULL
     * }
     */
    public static MemorySegment GUID_NULL() {
        return GUID_NULL$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID GUID_NULL
     * }
     */
    public static void GUID_NULL(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_NULL$constants.SEGMENT, 0L, GUID_NULL$constants.LAYOUT.byteSize());
    }

    private static class CATID_MARSHALER$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CATID_MARSHALER").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CATID_MARSHALER
     * }
     */
    public static GroupLayout CATID_MARSHALER$layout() {
        return CATID_MARSHALER$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CATID_MARSHALER
     * }
     */
    public static MemorySegment CATID_MARSHALER() {
        return CATID_MARSHALER$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CATID_MARSHALER
     * }
     */
    public static void CATID_MARSHALER(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CATID_MARSHALER$constants.SEGMENT, 0L, CATID_MARSHALER$constants.LAYOUT.byteSize());
    }

    private static class IID_IRpcChannel$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IRpcChannel").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcChannel
     * }
     */
    public static GroupLayout IID_IRpcChannel$layout() {
        return IID_IRpcChannel$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcChannel
     * }
     */
    public static MemorySegment IID_IRpcChannel() {
        return IID_IRpcChannel$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcChannel
     * }
     */
    public static void IID_IRpcChannel(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IRpcChannel$constants.SEGMENT, 0L, IID_IRpcChannel$constants.LAYOUT.byteSize());
    }

    private static class IID_IRpcStub$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IRpcStub").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcStub
     * }
     */
    public static GroupLayout IID_IRpcStub$layout() {
        return IID_IRpcStub$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcStub
     * }
     */
    public static MemorySegment IID_IRpcStub() {
        return IID_IRpcStub$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcStub
     * }
     */
    public static void IID_IRpcStub(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IRpcStub$constants.SEGMENT, 0L, IID_IRpcStub$constants.LAYOUT.byteSize());
    }

    private static class IID_IStubManager$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IStubManager").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IStubManager
     * }
     */
    public static GroupLayout IID_IStubManager$layout() {
        return IID_IStubManager$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IStubManager
     * }
     */
    public static MemorySegment IID_IStubManager() {
        return IID_IStubManager$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IStubManager
     * }
     */
    public static void IID_IStubManager(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IStubManager$constants.SEGMENT, 0L, IID_IStubManager$constants.LAYOUT.byteSize());
    }

    private static class IID_IRpcProxy$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IRpcProxy").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcProxy
     * }
     */
    public static GroupLayout IID_IRpcProxy$layout() {
        return IID_IRpcProxy$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcProxy
     * }
     */
    public static MemorySegment IID_IRpcProxy() {
        return IID_IRpcProxy$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcProxy
     * }
     */
    public static void IID_IRpcProxy(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IRpcProxy$constants.SEGMENT, 0L, IID_IRpcProxy$constants.LAYOUT.byteSize());
    }

    private static class IID_IProxyManager$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IProxyManager").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IProxyManager
     * }
     */
    public static GroupLayout IID_IProxyManager$layout() {
        return IID_IProxyManager$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IProxyManager
     * }
     */
    public static MemorySegment IID_IProxyManager() {
        return IID_IProxyManager$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IProxyManager
     * }
     */
    public static void IID_IProxyManager(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IProxyManager$constants.SEGMENT, 0L, IID_IProxyManager$constants.LAYOUT.byteSize());
    }

    private static class IID_IPSFactory$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IPSFactory").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPSFactory
     * }
     */
    public static GroupLayout IID_IPSFactory$layout() {
        return IID_IPSFactory$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPSFactory
     * }
     */
    public static MemorySegment IID_IPSFactory() {
        return IID_IPSFactory$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPSFactory
     * }
     */
    public static void IID_IPSFactory(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IPSFactory$constants.SEGMENT, 0L, IID_IPSFactory$constants.LAYOUT.byteSize());
    }

    private static class IID_IInternalMoniker$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IInternalMoniker").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternalMoniker
     * }
     */
    public static GroupLayout IID_IInternalMoniker$layout() {
        return IID_IInternalMoniker$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternalMoniker
     * }
     */
    public static MemorySegment IID_IInternalMoniker() {
        return IID_IInternalMoniker$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternalMoniker
     * }
     */
    public static void IID_IInternalMoniker(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternalMoniker$constants.SEGMENT, 0L, IID_IInternalMoniker$constants.LAYOUT.byteSize());
    }

    private static class IID_IDfReserved1$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IDfReserved1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDfReserved1
     * }
     */
    public static GroupLayout IID_IDfReserved1$layout() {
        return IID_IDfReserved1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDfReserved1
     * }
     */
    public static MemorySegment IID_IDfReserved1() {
        return IID_IDfReserved1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDfReserved1
     * }
     */
    public static void IID_IDfReserved1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IDfReserved1$constants.SEGMENT, 0L, IID_IDfReserved1$constants.LAYOUT.byteSize());
    }

    private static class IID_IDfReserved2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IDfReserved2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDfReserved2
     * }
     */
    public static GroupLayout IID_IDfReserved2$layout() {
        return IID_IDfReserved2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDfReserved2
     * }
     */
    public static MemorySegment IID_IDfReserved2() {
        return IID_IDfReserved2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDfReserved2
     * }
     */
    public static void IID_IDfReserved2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IDfReserved2$constants.SEGMENT, 0L, IID_IDfReserved2$constants.LAYOUT.byteSize());
    }

    private static class IID_IDfReserved3$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IDfReserved3").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDfReserved3
     * }
     */
    public static GroupLayout IID_IDfReserved3$layout() {
        return IID_IDfReserved3$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDfReserved3
     * }
     */
    public static MemorySegment IID_IDfReserved3() {
        return IID_IDfReserved3$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDfReserved3
     * }
     */
    public static void IID_IDfReserved3(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IDfReserved3$constants.SEGMENT, 0L, IID_IDfReserved3$constants.LAYOUT.byteSize());
    }

    private static class CLSID_StdMarshal$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_StdMarshal").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_StdMarshal
     * }
     */
    public static GroupLayout CLSID_StdMarshal$layout() {
        return CLSID_StdMarshal$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_StdMarshal
     * }
     */
    public static MemorySegment CLSID_StdMarshal() {
        return CLSID_StdMarshal$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_StdMarshal
     * }
     */
    public static void CLSID_StdMarshal(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_StdMarshal$constants.SEGMENT, 0L, CLSID_StdMarshal$constants.LAYOUT.byteSize());
    }

    private static class CLSID_AggStdMarshal$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_AggStdMarshal").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_AggStdMarshal
     * }
     */
    public static GroupLayout CLSID_AggStdMarshal$layout() {
        return CLSID_AggStdMarshal$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_AggStdMarshal
     * }
     */
    public static MemorySegment CLSID_AggStdMarshal() {
        return CLSID_AggStdMarshal$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_AggStdMarshal
     * }
     */
    public static void CLSID_AggStdMarshal(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_AggStdMarshal$constants.SEGMENT, 0L, CLSID_AggStdMarshal$constants.LAYOUT.byteSize());
    }

    private static class CLSID_StdAsyncActManager$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_StdAsyncActManager").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_StdAsyncActManager
     * }
     */
    public static GroupLayout CLSID_StdAsyncActManager$layout() {
        return CLSID_StdAsyncActManager$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_StdAsyncActManager
     * }
     */
    public static MemorySegment CLSID_StdAsyncActManager() {
        return CLSID_StdAsyncActManager$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_StdAsyncActManager
     * }
     */
    public static void CLSID_StdAsyncActManager(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_StdAsyncActManager$constants.SEGMENT, 0L, CLSID_StdAsyncActManager$constants.LAYOUT.byteSize());
    }

    private static class IID_IStub$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IStub").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IStub
     * }
     */
    public static GroupLayout IID_IStub$layout() {
        return IID_IStub$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IStub
     * }
     */
    public static MemorySegment IID_IStub() {
        return IID_IStub$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IStub
     * }
     */
    public static void IID_IStub(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IStub$constants.SEGMENT, 0L, IID_IStub$constants.LAYOUT.byteSize());
    }

    private static class IID_IProxy$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IProxy").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IProxy
     * }
     */
    public static GroupLayout IID_IProxy$layout() {
        return IID_IProxy$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IProxy
     * }
     */
    public static MemorySegment IID_IProxy() {
        return IID_IProxy$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IProxy
     * }
     */
    public static void IID_IProxy(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IProxy$constants.SEGMENT, 0L, IID_IProxy$constants.LAYOUT.byteSize());
    }

    private static class IID_IEnumGeneric$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IEnumGeneric").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumGeneric
     * }
     */
    public static GroupLayout IID_IEnumGeneric$layout() {
        return IID_IEnumGeneric$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumGeneric
     * }
     */
    public static MemorySegment IID_IEnumGeneric() {
        return IID_IEnumGeneric$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumGeneric
     * }
     */
    public static void IID_IEnumGeneric(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IEnumGeneric$constants.SEGMENT, 0L, IID_IEnumGeneric$constants.LAYOUT.byteSize());
    }

    private static class IID_IEnumHolder$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IEnumHolder").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumHolder
     * }
     */
    public static GroupLayout IID_IEnumHolder$layout() {
        return IID_IEnumHolder$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumHolder
     * }
     */
    public static MemorySegment IID_IEnumHolder() {
        return IID_IEnumHolder$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumHolder
     * }
     */
    public static void IID_IEnumHolder(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IEnumHolder$constants.SEGMENT, 0L, IID_IEnumHolder$constants.LAYOUT.byteSize());
    }

    private static class IID_IEnumCallback$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IEnumCallback").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumCallback
     * }
     */
    public static GroupLayout IID_IEnumCallback$layout() {
        return IID_IEnumCallback$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumCallback
     * }
     */
    public static MemorySegment IID_IEnumCallback() {
        return IID_IEnumCallback$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumCallback
     * }
     */
    public static void IID_IEnumCallback(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IEnumCallback$constants.SEGMENT, 0L, IID_IEnumCallback$constants.LAYOUT.byteSize());
    }

    private static class IID_IOleManager$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IOleManager").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleManager
     * }
     */
    public static GroupLayout IID_IOleManager$layout() {
        return IID_IOleManager$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleManager
     * }
     */
    public static MemorySegment IID_IOleManager() {
        return IID_IOleManager$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleManager
     * }
     */
    public static void IID_IOleManager(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IOleManager$constants.SEGMENT, 0L, IID_IOleManager$constants.LAYOUT.byteSize());
    }

    private static class IID_IOlePresObj$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IOlePresObj").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOlePresObj
     * }
     */
    public static GroupLayout IID_IOlePresObj$layout() {
        return IID_IOlePresObj$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOlePresObj
     * }
     */
    public static MemorySegment IID_IOlePresObj() {
        return IID_IOlePresObj$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOlePresObj
     * }
     */
    public static void IID_IOlePresObj(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IOlePresObj$constants.SEGMENT, 0L, IID_IOlePresObj$constants.LAYOUT.byteSize());
    }

    private static class IID_IDebug$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IDebug").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDebug
     * }
     */
    public static GroupLayout IID_IDebug$layout() {
        return IID_IDebug$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDebug
     * }
     */
    public static MemorySegment IID_IDebug() {
        return IID_IDebug$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDebug
     * }
     */
    public static void IID_IDebug(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IDebug$constants.SEGMENT, 0L, IID_IDebug$constants.LAYOUT.byteSize());
    }

    private static class IID_IDebugStream$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IDebugStream").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDebugStream
     * }
     */
    public static GroupLayout IID_IDebugStream$layout() {
        return IID_IDebugStream$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDebugStream
     * }
     */
    public static MemorySegment IID_IDebugStream() {
        return IID_IDebugStream$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDebugStream
     * }
     */
    public static void IID_IDebugStream(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IDebugStream$constants.SEGMENT, 0L, IID_IDebugStream$constants.LAYOUT.byteSize());
    }

    private static class CLSID_PSGenObject$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_PSGenObject").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSGenObject
     * }
     */
    public static GroupLayout CLSID_PSGenObject$layout() {
        return CLSID_PSGenObject$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSGenObject
     * }
     */
    public static MemorySegment CLSID_PSGenObject() {
        return CLSID_PSGenObject$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSGenObject
     * }
     */
    public static void CLSID_PSGenObject(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_PSGenObject$constants.SEGMENT, 0L, CLSID_PSGenObject$constants.LAYOUT.byteSize());
    }

    private static class CLSID_PSClientSite$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_PSClientSite").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSClientSite
     * }
     */
    public static GroupLayout CLSID_PSClientSite$layout() {
        return CLSID_PSClientSite$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSClientSite
     * }
     */
    public static MemorySegment CLSID_PSClientSite() {
        return CLSID_PSClientSite$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSClientSite
     * }
     */
    public static void CLSID_PSClientSite(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_PSClientSite$constants.SEGMENT, 0L, CLSID_PSClientSite$constants.LAYOUT.byteSize());
    }

    private static class CLSID_PSClassObject$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_PSClassObject").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSClassObject
     * }
     */
    public static GroupLayout CLSID_PSClassObject$layout() {
        return CLSID_PSClassObject$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSClassObject
     * }
     */
    public static MemorySegment CLSID_PSClassObject() {
        return CLSID_PSClassObject$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSClassObject
     * }
     */
    public static void CLSID_PSClassObject(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_PSClassObject$constants.SEGMENT, 0L, CLSID_PSClassObject$constants.LAYOUT.byteSize());
    }

    private static class CLSID_PSInPlaceActive$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_PSInPlaceActive").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSInPlaceActive
     * }
     */
    public static GroupLayout CLSID_PSInPlaceActive$layout() {
        return CLSID_PSInPlaceActive$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSInPlaceActive
     * }
     */
    public static MemorySegment CLSID_PSInPlaceActive() {
        return CLSID_PSInPlaceActive$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSInPlaceActive
     * }
     */
    public static void CLSID_PSInPlaceActive(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_PSInPlaceActive$constants.SEGMENT, 0L, CLSID_PSInPlaceActive$constants.LAYOUT.byteSize());
    }

    private static class CLSID_PSInPlaceFrame$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_PSInPlaceFrame").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSInPlaceFrame
     * }
     */
    public static GroupLayout CLSID_PSInPlaceFrame$layout() {
        return CLSID_PSInPlaceFrame$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSInPlaceFrame
     * }
     */
    public static MemorySegment CLSID_PSInPlaceFrame() {
        return CLSID_PSInPlaceFrame$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSInPlaceFrame
     * }
     */
    public static void CLSID_PSInPlaceFrame(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_PSInPlaceFrame$constants.SEGMENT, 0L, CLSID_PSInPlaceFrame$constants.LAYOUT.byteSize());
    }

    private static class CLSID_PSDragDrop$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_PSDragDrop").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSDragDrop
     * }
     */
    public static GroupLayout CLSID_PSDragDrop$layout() {
        return CLSID_PSDragDrop$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSDragDrop
     * }
     */
    public static MemorySegment CLSID_PSDragDrop() {
        return CLSID_PSDragDrop$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSDragDrop
     * }
     */
    public static void CLSID_PSDragDrop(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_PSDragDrop$constants.SEGMENT, 0L, CLSID_PSDragDrop$constants.LAYOUT.byteSize());
    }

    private static class CLSID_PSBindCtx$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_PSBindCtx").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSBindCtx
     * }
     */
    public static GroupLayout CLSID_PSBindCtx$layout() {
        return CLSID_PSBindCtx$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSBindCtx
     * }
     */
    public static MemorySegment CLSID_PSBindCtx() {
        return CLSID_PSBindCtx$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSBindCtx
     * }
     */
    public static void CLSID_PSBindCtx(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_PSBindCtx$constants.SEGMENT, 0L, CLSID_PSBindCtx$constants.LAYOUT.byteSize());
    }

    private static class CLSID_PSEnumerators$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_PSEnumerators").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSEnumerators
     * }
     */
    public static GroupLayout CLSID_PSEnumerators$layout() {
        return CLSID_PSEnumerators$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSEnumerators
     * }
     */
    public static MemorySegment CLSID_PSEnumerators() {
        return CLSID_PSEnumerators$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSEnumerators
     * }
     */
    public static void CLSID_PSEnumerators(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_PSEnumerators$constants.SEGMENT, 0L, CLSID_PSEnumerators$constants.LAYOUT.byteSize());
    }

    private static class CLSID_StaticMetafile$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_StaticMetafile").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_StaticMetafile
     * }
     */
    public static GroupLayout CLSID_StaticMetafile$layout() {
        return CLSID_StaticMetafile$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_StaticMetafile
     * }
     */
    public static MemorySegment CLSID_StaticMetafile() {
        return CLSID_StaticMetafile$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_StaticMetafile
     * }
     */
    public static void CLSID_StaticMetafile(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_StaticMetafile$constants.SEGMENT, 0L, CLSID_StaticMetafile$constants.LAYOUT.byteSize());
    }

    private static class CLSID_StaticDib$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_StaticDib").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_StaticDib
     * }
     */
    public static GroupLayout CLSID_StaticDib$layout() {
        return CLSID_StaticDib$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_StaticDib
     * }
     */
    public static MemorySegment CLSID_StaticDib() {
        return CLSID_StaticDib$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_StaticDib
     * }
     */
    public static void CLSID_StaticDib(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_StaticDib$constants.SEGMENT, 0L, CLSID_StaticDib$constants.LAYOUT.byteSize());
    }

    private static class CID_CDfsVolume$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CID_CDfsVolume").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CID_CDfsVolume
     * }
     */
    public static GroupLayout CID_CDfsVolume$layout() {
        return CID_CDfsVolume$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CID_CDfsVolume
     * }
     */
    public static MemorySegment CID_CDfsVolume() {
        return CID_CDfsVolume$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CID_CDfsVolume
     * }
     */
    public static void CID_CDfsVolume(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CID_CDfsVolume$constants.SEGMENT, 0L, CID_CDfsVolume$constants.LAYOUT.byteSize());
    }

    private static class CLSID_DCOMAccessControl$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_DCOMAccessControl").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_DCOMAccessControl
     * }
     */
    public static GroupLayout CLSID_DCOMAccessControl$layout() {
        return CLSID_DCOMAccessControl$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_DCOMAccessControl
     * }
     */
    public static MemorySegment CLSID_DCOMAccessControl() {
        return CLSID_DCOMAccessControl$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_DCOMAccessControl
     * }
     */
    public static void CLSID_DCOMAccessControl(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_DCOMAccessControl$constants.SEGMENT, 0L, CLSID_DCOMAccessControl$constants.LAYOUT.byteSize());
    }

    private static class CLSID_GlobalOptions$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_GlobalOptions").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_GlobalOptions
     * }
     */
    public static GroupLayout CLSID_GlobalOptions$layout() {
        return CLSID_GlobalOptions$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_GlobalOptions
     * }
     */
    public static MemorySegment CLSID_GlobalOptions() {
        return CLSID_GlobalOptions$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_GlobalOptions
     * }
     */
    public static void CLSID_GlobalOptions(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_GlobalOptions$constants.SEGMENT, 0L, CLSID_GlobalOptions$constants.LAYOUT.byteSize());
    }

    private static class CLSID_StdGlobalInterfaceTable$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_StdGlobalInterfaceTable").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_StdGlobalInterfaceTable
     * }
     */
    public static GroupLayout CLSID_StdGlobalInterfaceTable$layout() {
        return CLSID_StdGlobalInterfaceTable$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_StdGlobalInterfaceTable
     * }
     */
    public static MemorySegment CLSID_StdGlobalInterfaceTable() {
        return CLSID_StdGlobalInterfaceTable$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_StdGlobalInterfaceTable
     * }
     */
    public static void CLSID_StdGlobalInterfaceTable(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_StdGlobalInterfaceTable$constants.SEGMENT, 0L, CLSID_StdGlobalInterfaceTable$constants.LAYOUT.byteSize());
    }

    private static class CLSID_ComBinding$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_ComBinding").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_ComBinding
     * }
     */
    public static GroupLayout CLSID_ComBinding$layout() {
        return CLSID_ComBinding$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_ComBinding
     * }
     */
    public static MemorySegment CLSID_ComBinding() {
        return CLSID_ComBinding$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_ComBinding
     * }
     */
    public static void CLSID_ComBinding(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_ComBinding$constants.SEGMENT, 0L, CLSID_ComBinding$constants.LAYOUT.byteSize());
    }

    private static class CLSID_StdEvent$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_StdEvent").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_StdEvent
     * }
     */
    public static GroupLayout CLSID_StdEvent$layout() {
        return CLSID_StdEvent$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_StdEvent
     * }
     */
    public static MemorySegment CLSID_StdEvent() {
        return CLSID_StdEvent$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_StdEvent
     * }
     */
    public static void CLSID_StdEvent(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_StdEvent$constants.SEGMENT, 0L, CLSID_StdEvent$constants.LAYOUT.byteSize());
    }

    private static class CLSID_ManualResetEvent$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_ManualResetEvent").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_ManualResetEvent
     * }
     */
    public static GroupLayout CLSID_ManualResetEvent$layout() {
        return CLSID_ManualResetEvent$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_ManualResetEvent
     * }
     */
    public static MemorySegment CLSID_ManualResetEvent() {
        return CLSID_ManualResetEvent$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_ManualResetEvent
     * }
     */
    public static void CLSID_ManualResetEvent(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_ManualResetEvent$constants.SEGMENT, 0L, CLSID_ManualResetEvent$constants.LAYOUT.byteSize());
    }

    private static class CLSID_SynchronizeContainer$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_SynchronizeContainer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_SynchronizeContainer
     * }
     */
    public static GroupLayout CLSID_SynchronizeContainer$layout() {
        return CLSID_SynchronizeContainer$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_SynchronizeContainer
     * }
     */
    public static MemorySegment CLSID_SynchronizeContainer() {
        return CLSID_SynchronizeContainer$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_SynchronizeContainer
     * }
     */
    public static void CLSID_SynchronizeContainer(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_SynchronizeContainer$constants.SEGMENT, 0L, CLSID_SynchronizeContainer$constants.LAYOUT.byteSize());
    }

    private static class CLSID_AddrControl$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_AddrControl").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_AddrControl
     * }
     */
    public static GroupLayout CLSID_AddrControl$layout() {
        return CLSID_AddrControl$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_AddrControl
     * }
     */
    public static MemorySegment CLSID_AddrControl() {
        return CLSID_AddrControl$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_AddrControl
     * }
     */
    public static void CLSID_AddrControl(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_AddrControl$constants.SEGMENT, 0L, CLSID_AddrControl$constants.LAYOUT.byteSize());
    }

    private static class CLSID_ContextSwitcher$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_ContextSwitcher").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_ContextSwitcher
     * }
     */
    public static GroupLayout CLSID_ContextSwitcher$layout() {
        return CLSID_ContextSwitcher$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_ContextSwitcher
     * }
     */
    public static MemorySegment CLSID_ContextSwitcher() {
        return CLSID_ContextSwitcher$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_ContextSwitcher
     * }
     */
    public static void CLSID_ContextSwitcher(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_ContextSwitcher$constants.SEGMENT, 0L, CLSID_ContextSwitcher$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDFormKrnl$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_CCDFormKrnl").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDFormKrnl
     * }
     */
    public static GroupLayout CLSID_CCDFormKrnl$layout() {
        return CLSID_CCDFormKrnl$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDFormKrnl
     * }
     */
    public static MemorySegment CLSID_CCDFormKrnl() {
        return CLSID_CCDFormKrnl$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDFormKrnl
     * }
     */
    public static void CLSID_CCDFormKrnl(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDFormKrnl$constants.SEGMENT, 0L, CLSID_CCDFormKrnl$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDPropertyPage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_CCDPropertyPage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDPropertyPage
     * }
     */
    public static GroupLayout CLSID_CCDPropertyPage$layout() {
        return CLSID_CCDPropertyPage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDPropertyPage
     * }
     */
    public static MemorySegment CLSID_CCDPropertyPage() {
        return CLSID_CCDPropertyPage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDPropertyPage
     * }
     */
    public static void CLSID_CCDPropertyPage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDPropertyPage$constants.SEGMENT, 0L, CLSID_CCDPropertyPage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDFormDialog$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_CCDFormDialog").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDFormDialog
     * }
     */
    public static GroupLayout CLSID_CCDFormDialog$layout() {
        return CLSID_CCDFormDialog$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDFormDialog
     * }
     */
    public static MemorySegment CLSID_CCDFormDialog() {
        return CLSID_CCDFormDialog$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDFormDialog
     * }
     */
    public static void CLSID_CCDFormDialog(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDFormDialog$constants.SEGMENT, 0L, CLSID_CCDFormDialog$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDCommandButton$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_CCDCommandButton").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDCommandButton
     * }
     */
    public static GroupLayout CLSID_CCDCommandButton$layout() {
        return CLSID_CCDCommandButton$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDCommandButton
     * }
     */
    public static MemorySegment CLSID_CCDCommandButton() {
        return CLSID_CCDCommandButton$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDCommandButton
     * }
     */
    public static void CLSID_CCDCommandButton(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDCommandButton$constants.SEGMENT, 0L, CLSID_CCDCommandButton$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDComboBox$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_CCDComboBox").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDComboBox
     * }
     */
    public static GroupLayout CLSID_CCDComboBox$layout() {
        return CLSID_CCDComboBox$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDComboBox
     * }
     */
    public static MemorySegment CLSID_CCDComboBox() {
        return CLSID_CCDComboBox$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDComboBox
     * }
     */
    public static void CLSID_CCDComboBox(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDComboBox$constants.SEGMENT, 0L, CLSID_CCDComboBox$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDTextBox$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_CCDTextBox").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDTextBox
     * }
     */
    public static GroupLayout CLSID_CCDTextBox$layout() {
        return CLSID_CCDTextBox$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDTextBox
     * }
     */
    public static MemorySegment CLSID_CCDTextBox() {
        return CLSID_CCDTextBox$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDTextBox
     * }
     */
    public static void CLSID_CCDTextBox(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDTextBox$constants.SEGMENT, 0L, CLSID_CCDTextBox$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDCheckBox$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_CCDCheckBox").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDCheckBox
     * }
     */
    public static GroupLayout CLSID_CCDCheckBox$layout() {
        return CLSID_CCDCheckBox$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDCheckBox
     * }
     */
    public static MemorySegment CLSID_CCDCheckBox() {
        return CLSID_CCDCheckBox$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDCheckBox
     * }
     */
    public static void CLSID_CCDCheckBox(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDCheckBox$constants.SEGMENT, 0L, CLSID_CCDCheckBox$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDLabel$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_CCDLabel").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDLabel
     * }
     */
    public static GroupLayout CLSID_CCDLabel$layout() {
        return CLSID_CCDLabel$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDLabel
     * }
     */
    public static MemorySegment CLSID_CCDLabel() {
        return CLSID_CCDLabel$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDLabel
     * }
     */
    public static void CLSID_CCDLabel(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDLabel$constants.SEGMENT, 0L, CLSID_CCDLabel$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDOptionButton$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_CCDOptionButton").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDOptionButton
     * }
     */
    public static GroupLayout CLSID_CCDOptionButton$layout() {
        return CLSID_CCDOptionButton$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDOptionButton
     * }
     */
    public static MemorySegment CLSID_CCDOptionButton() {
        return CLSID_CCDOptionButton$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDOptionButton
     * }
     */
    public static void CLSID_CCDOptionButton(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDOptionButton$constants.SEGMENT, 0L, CLSID_CCDOptionButton$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDListBox$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_CCDListBox").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDListBox
     * }
     */
    public static GroupLayout CLSID_CCDListBox$layout() {
        return CLSID_CCDListBox$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDListBox
     * }
     */
    public static MemorySegment CLSID_CCDListBox() {
        return CLSID_CCDListBox$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDListBox
     * }
     */
    public static void CLSID_CCDListBox(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDListBox$constants.SEGMENT, 0L, CLSID_CCDListBox$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDScrollBar$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_CCDScrollBar").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDScrollBar
     * }
     */
    public static GroupLayout CLSID_CCDScrollBar$layout() {
        return CLSID_CCDScrollBar$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDScrollBar
     * }
     */
    public static MemorySegment CLSID_CCDScrollBar() {
        return CLSID_CCDScrollBar$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDScrollBar
     * }
     */
    public static void CLSID_CCDScrollBar(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDScrollBar$constants.SEGMENT, 0L, CLSID_CCDScrollBar$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDGroupBox$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_CCDGroupBox").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDGroupBox
     * }
     */
    public static GroupLayout CLSID_CCDGroupBox$layout() {
        return CLSID_CCDGroupBox$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDGroupBox
     * }
     */
    public static MemorySegment CLSID_CCDGroupBox() {
        return CLSID_CCDGroupBox$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDGroupBox
     * }
     */
    public static void CLSID_CCDGroupBox(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDGroupBox$constants.SEGMENT, 0L, CLSID_CCDGroupBox$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDGeneralPropertyPage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_CCDGeneralPropertyPage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDGeneralPropertyPage
     * }
     */
    public static GroupLayout CLSID_CCDGeneralPropertyPage$layout() {
        return CLSID_CCDGeneralPropertyPage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDGeneralPropertyPage
     * }
     */
    public static MemorySegment CLSID_CCDGeneralPropertyPage() {
        return CLSID_CCDGeneralPropertyPage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDGeneralPropertyPage
     * }
     */
    public static void CLSID_CCDGeneralPropertyPage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDGeneralPropertyPage$constants.SEGMENT, 0L, CLSID_CCDGeneralPropertyPage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDGenericPropertyPage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_CCDGenericPropertyPage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDGenericPropertyPage
     * }
     */
    public static GroupLayout CLSID_CCDGenericPropertyPage$layout() {
        return CLSID_CCDGenericPropertyPage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDGenericPropertyPage
     * }
     */
    public static MemorySegment CLSID_CCDGenericPropertyPage() {
        return CLSID_CCDGenericPropertyPage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDGenericPropertyPage
     * }
     */
    public static void CLSID_CCDGenericPropertyPage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDGenericPropertyPage$constants.SEGMENT, 0L, CLSID_CCDGenericPropertyPage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDFontPropertyPage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_CCDFontPropertyPage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDFontPropertyPage
     * }
     */
    public static GroupLayout CLSID_CCDFontPropertyPage$layout() {
        return CLSID_CCDFontPropertyPage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDFontPropertyPage
     * }
     */
    public static MemorySegment CLSID_CCDFontPropertyPage() {
        return CLSID_CCDFontPropertyPage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDFontPropertyPage
     * }
     */
    public static void CLSID_CCDFontPropertyPage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDFontPropertyPage$constants.SEGMENT, 0L, CLSID_CCDFontPropertyPage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDColorPropertyPage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_CCDColorPropertyPage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDColorPropertyPage
     * }
     */
    public static GroupLayout CLSID_CCDColorPropertyPage$layout() {
        return CLSID_CCDColorPropertyPage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDColorPropertyPage
     * }
     */
    public static MemorySegment CLSID_CCDColorPropertyPage() {
        return CLSID_CCDColorPropertyPage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDColorPropertyPage
     * }
     */
    public static void CLSID_CCDColorPropertyPage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDColorPropertyPage$constants.SEGMENT, 0L, CLSID_CCDColorPropertyPage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDLabelPropertyPage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_CCDLabelPropertyPage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDLabelPropertyPage
     * }
     */
    public static GroupLayout CLSID_CCDLabelPropertyPage$layout() {
        return CLSID_CCDLabelPropertyPage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDLabelPropertyPage
     * }
     */
    public static MemorySegment CLSID_CCDLabelPropertyPage() {
        return CLSID_CCDLabelPropertyPage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDLabelPropertyPage
     * }
     */
    public static void CLSID_CCDLabelPropertyPage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDLabelPropertyPage$constants.SEGMENT, 0L, CLSID_CCDLabelPropertyPage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDCheckBoxPropertyPage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_CCDCheckBoxPropertyPage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDCheckBoxPropertyPage
     * }
     */
    public static GroupLayout CLSID_CCDCheckBoxPropertyPage$layout() {
        return CLSID_CCDCheckBoxPropertyPage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDCheckBoxPropertyPage
     * }
     */
    public static MemorySegment CLSID_CCDCheckBoxPropertyPage() {
        return CLSID_CCDCheckBoxPropertyPage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDCheckBoxPropertyPage
     * }
     */
    public static void CLSID_CCDCheckBoxPropertyPage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDCheckBoxPropertyPage$constants.SEGMENT, 0L, CLSID_CCDCheckBoxPropertyPage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDTextBoxPropertyPage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_CCDTextBoxPropertyPage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDTextBoxPropertyPage
     * }
     */
    public static GroupLayout CLSID_CCDTextBoxPropertyPage$layout() {
        return CLSID_CCDTextBoxPropertyPage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDTextBoxPropertyPage
     * }
     */
    public static MemorySegment CLSID_CCDTextBoxPropertyPage() {
        return CLSID_CCDTextBoxPropertyPage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDTextBoxPropertyPage
     * }
     */
    public static void CLSID_CCDTextBoxPropertyPage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDTextBoxPropertyPage$constants.SEGMENT, 0L, CLSID_CCDTextBoxPropertyPage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDOptionButtonPropertyPage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_CCDOptionButtonPropertyPage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDOptionButtonPropertyPage
     * }
     */
    public static GroupLayout CLSID_CCDOptionButtonPropertyPage$layout() {
        return CLSID_CCDOptionButtonPropertyPage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDOptionButtonPropertyPage
     * }
     */
    public static MemorySegment CLSID_CCDOptionButtonPropertyPage() {
        return CLSID_CCDOptionButtonPropertyPage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDOptionButtonPropertyPage
     * }
     */
    public static void CLSID_CCDOptionButtonPropertyPage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDOptionButtonPropertyPage$constants.SEGMENT, 0L, CLSID_CCDOptionButtonPropertyPage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDListBoxPropertyPage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_CCDListBoxPropertyPage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDListBoxPropertyPage
     * }
     */
    public static GroupLayout CLSID_CCDListBoxPropertyPage$layout() {
        return CLSID_CCDListBoxPropertyPage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDListBoxPropertyPage
     * }
     */
    public static MemorySegment CLSID_CCDListBoxPropertyPage() {
        return CLSID_CCDListBoxPropertyPage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDListBoxPropertyPage
     * }
     */
    public static void CLSID_CCDListBoxPropertyPage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDListBoxPropertyPage$constants.SEGMENT, 0L, CLSID_CCDListBoxPropertyPage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDCommandButtonPropertyPage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_CCDCommandButtonPropertyPage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDCommandButtonPropertyPage
     * }
     */
    public static GroupLayout CLSID_CCDCommandButtonPropertyPage$layout() {
        return CLSID_CCDCommandButtonPropertyPage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDCommandButtonPropertyPage
     * }
     */
    public static MemorySegment CLSID_CCDCommandButtonPropertyPage() {
        return CLSID_CCDCommandButtonPropertyPage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDCommandButtonPropertyPage
     * }
     */
    public static void CLSID_CCDCommandButtonPropertyPage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDCommandButtonPropertyPage$constants.SEGMENT, 0L, CLSID_CCDCommandButtonPropertyPage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDComboBoxPropertyPage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_CCDComboBoxPropertyPage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDComboBoxPropertyPage
     * }
     */
    public static GroupLayout CLSID_CCDComboBoxPropertyPage$layout() {
        return CLSID_CCDComboBoxPropertyPage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDComboBoxPropertyPage
     * }
     */
    public static MemorySegment CLSID_CCDComboBoxPropertyPage() {
        return CLSID_CCDComboBoxPropertyPage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDComboBoxPropertyPage
     * }
     */
    public static void CLSID_CCDComboBoxPropertyPage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDComboBoxPropertyPage$constants.SEGMENT, 0L, CLSID_CCDComboBoxPropertyPage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDScrollBarPropertyPage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_CCDScrollBarPropertyPage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDScrollBarPropertyPage
     * }
     */
    public static GroupLayout CLSID_CCDScrollBarPropertyPage$layout() {
        return CLSID_CCDScrollBarPropertyPage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDScrollBarPropertyPage
     * }
     */
    public static MemorySegment CLSID_CCDScrollBarPropertyPage() {
        return CLSID_CCDScrollBarPropertyPage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDScrollBarPropertyPage
     * }
     */
    public static void CLSID_CCDScrollBarPropertyPage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDScrollBarPropertyPage$constants.SEGMENT, 0L, CLSID_CCDScrollBarPropertyPage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDGroupBoxPropertyPage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_CCDGroupBoxPropertyPage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDGroupBoxPropertyPage
     * }
     */
    public static GroupLayout CLSID_CCDGroupBoxPropertyPage$layout() {
        return CLSID_CCDGroupBoxPropertyPage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDGroupBoxPropertyPage
     * }
     */
    public static MemorySegment CLSID_CCDGroupBoxPropertyPage() {
        return CLSID_CCDGroupBoxPropertyPage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDGroupBoxPropertyPage
     * }
     */
    public static void CLSID_CCDGroupBoxPropertyPage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDGroupBoxPropertyPage$constants.SEGMENT, 0L, CLSID_CCDGroupBoxPropertyPage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDXObjectPropertyPage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_CCDXObjectPropertyPage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDXObjectPropertyPage
     * }
     */
    public static GroupLayout CLSID_CCDXObjectPropertyPage$layout() {
        return CLSID_CCDXObjectPropertyPage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDXObjectPropertyPage
     * }
     */
    public static MemorySegment CLSID_CCDXObjectPropertyPage() {
        return CLSID_CCDXObjectPropertyPage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDXObjectPropertyPage
     * }
     */
    public static void CLSID_CCDXObjectPropertyPage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDXObjectPropertyPage$constants.SEGMENT, 0L, CLSID_CCDXObjectPropertyPage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CStdPropertyFrame$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_CStdPropertyFrame").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CStdPropertyFrame
     * }
     */
    public static GroupLayout CLSID_CStdPropertyFrame$layout() {
        return CLSID_CStdPropertyFrame$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CStdPropertyFrame
     * }
     */
    public static MemorySegment CLSID_CStdPropertyFrame() {
        return CLSID_CStdPropertyFrame$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CStdPropertyFrame
     * }
     */
    public static void CLSID_CStdPropertyFrame(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CStdPropertyFrame$constants.SEGMENT, 0L, CLSID_CStdPropertyFrame$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CFormPropertyPage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_CFormPropertyPage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CFormPropertyPage
     * }
     */
    public static GroupLayout CLSID_CFormPropertyPage$layout() {
        return CLSID_CFormPropertyPage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CFormPropertyPage
     * }
     */
    public static MemorySegment CLSID_CFormPropertyPage() {
        return CLSID_CFormPropertyPage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CFormPropertyPage
     * }
     */
    public static void CLSID_CFormPropertyPage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CFormPropertyPage$constants.SEGMENT, 0L, CLSID_CFormPropertyPage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CGridPropertyPage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_CGridPropertyPage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CGridPropertyPage
     * }
     */
    public static GroupLayout CLSID_CGridPropertyPage$layout() {
        return CLSID_CGridPropertyPage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CGridPropertyPage
     * }
     */
    public static MemorySegment CLSID_CGridPropertyPage() {
        return CLSID_CGridPropertyPage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CGridPropertyPage
     * }
     */
    public static void CLSID_CGridPropertyPage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CGridPropertyPage$constants.SEGMENT, 0L, CLSID_CGridPropertyPage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CWSJArticlePage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_CWSJArticlePage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CWSJArticlePage
     * }
     */
    public static GroupLayout CLSID_CWSJArticlePage$layout() {
        return CLSID_CWSJArticlePage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CWSJArticlePage
     * }
     */
    public static MemorySegment CLSID_CWSJArticlePage() {
        return CLSID_CWSJArticlePage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CWSJArticlePage
     * }
     */
    public static void CLSID_CWSJArticlePage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CWSJArticlePage$constants.SEGMENT, 0L, CLSID_CWSJArticlePage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CSystemPage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_CSystemPage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CSystemPage
     * }
     */
    public static GroupLayout CLSID_CSystemPage$layout() {
        return CLSID_CSystemPage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CSystemPage
     * }
     */
    public static MemorySegment CLSID_CSystemPage() {
        return CLSID_CSystemPage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CSystemPage
     * }
     */
    public static void CLSID_CSystemPage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CSystemPage$constants.SEGMENT, 0L, CLSID_CSystemPage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_IdentityUnmarshal$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_IdentityUnmarshal").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_IdentityUnmarshal
     * }
     */
    public static GroupLayout CLSID_IdentityUnmarshal$layout() {
        return CLSID_IdentityUnmarshal$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_IdentityUnmarshal
     * }
     */
    public static MemorySegment CLSID_IdentityUnmarshal() {
        return CLSID_IdentityUnmarshal$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_IdentityUnmarshal
     * }
     */
    public static void CLSID_IdentityUnmarshal(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_IdentityUnmarshal$constants.SEGMENT, 0L, CLSID_IdentityUnmarshal$constants.LAYOUT.byteSize());
    }

    private static class CLSID_InProcFreeMarshaler$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_InProcFreeMarshaler").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_InProcFreeMarshaler
     * }
     */
    public static GroupLayout CLSID_InProcFreeMarshaler$layout() {
        return CLSID_InProcFreeMarshaler$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_InProcFreeMarshaler
     * }
     */
    public static MemorySegment CLSID_InProcFreeMarshaler() {
        return CLSID_InProcFreeMarshaler$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_InProcFreeMarshaler
     * }
     */
    public static void CLSID_InProcFreeMarshaler(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_InProcFreeMarshaler$constants.SEGMENT, 0L, CLSID_InProcFreeMarshaler$constants.LAYOUT.byteSize());
    }

    private static class CLSID_Picture_Metafile$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_Picture_Metafile").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_Picture_Metafile
     * }
     */
    public static GroupLayout CLSID_Picture_Metafile$layout() {
        return CLSID_Picture_Metafile$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_Picture_Metafile
     * }
     */
    public static MemorySegment CLSID_Picture_Metafile() {
        return CLSID_Picture_Metafile$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_Picture_Metafile
     * }
     */
    public static void CLSID_Picture_Metafile(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_Picture_Metafile$constants.SEGMENT, 0L, CLSID_Picture_Metafile$constants.LAYOUT.byteSize());
    }

    private static class CLSID_Picture_EnhMetafile$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_Picture_EnhMetafile").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_Picture_EnhMetafile
     * }
     */
    public static GroupLayout CLSID_Picture_EnhMetafile$layout() {
        return CLSID_Picture_EnhMetafile$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_Picture_EnhMetafile
     * }
     */
    public static MemorySegment CLSID_Picture_EnhMetafile() {
        return CLSID_Picture_EnhMetafile$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_Picture_EnhMetafile
     * }
     */
    public static void CLSID_Picture_EnhMetafile(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_Picture_EnhMetafile$constants.SEGMENT, 0L, CLSID_Picture_EnhMetafile$constants.LAYOUT.byteSize());
    }

    private static class CLSID_Picture_Dib$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_Picture_Dib").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_Picture_Dib
     * }
     */
    public static GroupLayout CLSID_Picture_Dib$layout() {
        return CLSID_Picture_Dib$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_Picture_Dib
     * }
     */
    public static MemorySegment CLSID_Picture_Dib() {
        return CLSID_Picture_Dib$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_Picture_Dib
     * }
     */
    public static void CLSID_Picture_Dib(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_Picture_Dib$constants.SEGMENT, 0L, CLSID_Picture_Dib$constants.LAYOUT.byteSize());
    }

    private static class GUID_TRISTATE$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("GUID_TRISTATE").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_TRISTATE
     * }
     */
    public static GroupLayout GUID_TRISTATE$layout() {
        return GUID_TRISTATE$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_TRISTATE
     * }
     */
    public static MemorySegment GUID_TRISTATE() {
        return GUID_TRISTATE$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_TRISTATE
     * }
     */
    public static void GUID_TRISTATE(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_TRISTATE$constants.SEGMENT, 0L, GUID_TRISTATE$constants.LAYOUT.byteSize());
    }

    private static class CoGetMalloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoGetMalloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetMalloc(DWORD dwMemContext, LPMALLOC *ppMalloc)
     * }
     */
    public static FunctionDescriptor CoGetMalloc$descriptor() {
        return CoGetMalloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetMalloc(DWORD dwMemContext, LPMALLOC *ppMalloc)
     * }
     */
    public static MethodHandle CoGetMalloc$handle() {
        return CoGetMalloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoGetMalloc(DWORD dwMemContext, LPMALLOC *ppMalloc)
     * }
     */
    public static MemorySegment CoGetMalloc$address() {
        return CoGetMalloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetMalloc(DWORD dwMemContext, LPMALLOC *ppMalloc)
     * }
     */
    public static int CoGetMalloc(int dwMemContext, MemorySegment ppMalloc) {
        var mh$ = CoGetMalloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetMalloc", dwMemContext, ppMalloc);
            }
            return (int)mh$.invokeExact(dwMemContext, ppMalloc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateStreamOnHGlobal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CreateStreamOnHGlobal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateStreamOnHGlobal(HGLOBAL hGlobal, BOOL fDeleteOnRelease, LPSTREAM *ppstm)
     * }
     */
    public static FunctionDescriptor CreateStreamOnHGlobal$descriptor() {
        return CreateStreamOnHGlobal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateStreamOnHGlobal(HGLOBAL hGlobal, BOOL fDeleteOnRelease, LPSTREAM *ppstm)
     * }
     */
    public static MethodHandle CreateStreamOnHGlobal$handle() {
        return CreateStreamOnHGlobal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CreateStreamOnHGlobal(HGLOBAL hGlobal, BOOL fDeleteOnRelease, LPSTREAM *ppstm)
     * }
     */
    public static MemorySegment CreateStreamOnHGlobal$address() {
        return CreateStreamOnHGlobal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CreateStreamOnHGlobal(HGLOBAL hGlobal, BOOL fDeleteOnRelease, LPSTREAM *ppstm)
     * }
     */
    public static int CreateStreamOnHGlobal(MemorySegment hGlobal, int fDeleteOnRelease, MemorySegment ppstm) {
        var mh$ = CreateStreamOnHGlobal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateStreamOnHGlobal", hGlobal, fDeleteOnRelease, ppstm);
            }
            return (int)mh$.invokeExact(hGlobal, fDeleteOnRelease, ppstm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetHGlobalFromStream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetHGlobalFromStream");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT GetHGlobalFromStream(LPSTREAM pstm, HGLOBAL *phglobal)
     * }
     */
    public static FunctionDescriptor GetHGlobalFromStream$descriptor() {
        return GetHGlobalFromStream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT GetHGlobalFromStream(LPSTREAM pstm, HGLOBAL *phglobal)
     * }
     */
    public static MethodHandle GetHGlobalFromStream$handle() {
        return GetHGlobalFromStream.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT GetHGlobalFromStream(LPSTREAM pstm, HGLOBAL *phglobal)
     * }
     */
    public static MemorySegment GetHGlobalFromStream$address() {
        return GetHGlobalFromStream.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT GetHGlobalFromStream(LPSTREAM pstm, HGLOBAL *phglobal)
     * }
     */
    public static int GetHGlobalFromStream(MemorySegment pstm, MemorySegment phglobal) {
        var mh$ = GetHGlobalFromStream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetHGlobalFromStream", pstm, phglobal);
            }
            return (int)mh$.invokeExact(pstm, phglobal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoUninitialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoUninitialize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void CoUninitialize()
     * }
     */
    public static FunctionDescriptor CoUninitialize$descriptor() {
        return CoUninitialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void CoUninitialize()
     * }
     */
    public static MethodHandle CoUninitialize$handle() {
        return CoUninitialize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void CoUninitialize()
     * }
     */
    public static MemorySegment CoUninitialize$address() {
        return CoUninitialize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void CoUninitialize()
     * }
     */
    public static void CoUninitialize() {
        var mh$ = CoUninitialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoUninitialize");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetCurrentProcess {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoGetCurrentProcess");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern DWORD CoGetCurrentProcess()
     * }
     */
    public static FunctionDescriptor CoGetCurrentProcess$descriptor() {
        return CoGetCurrentProcess.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern DWORD CoGetCurrentProcess()
     * }
     */
    public static MethodHandle CoGetCurrentProcess$handle() {
        return CoGetCurrentProcess.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern DWORD CoGetCurrentProcess()
     * }
     */
    public static MemorySegment CoGetCurrentProcess$address() {
        return CoGetCurrentProcess.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern DWORD CoGetCurrentProcess()
     * }
     */
    public static int CoGetCurrentProcess() {
        var mh$ = CoGetCurrentProcess.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetCurrentProcess");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInitializeEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoInitializeEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInitializeEx(LPVOID pvReserved, DWORD dwCoInit)
     * }
     */
    public static FunctionDescriptor CoInitializeEx$descriptor() {
        return CoInitializeEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInitializeEx(LPVOID pvReserved, DWORD dwCoInit)
     * }
     */
    public static MethodHandle CoInitializeEx$handle() {
        return CoInitializeEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInitializeEx(LPVOID pvReserved, DWORD dwCoInit)
     * }
     */
    public static MemorySegment CoInitializeEx$address() {
        return CoInitializeEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInitializeEx(LPVOID pvReserved, DWORD dwCoInit)
     * }
     */
    public static int CoInitializeEx(MemorySegment pvReserved, int dwCoInit) {
        var mh$ = CoInitializeEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInitializeEx", pvReserved, dwCoInit);
            }
            return (int)mh$.invokeExact(pvReserved, dwCoInit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetCallerTID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoGetCallerTID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetCallerTID(LPDWORD lpdwTID)
     * }
     */
    public static FunctionDescriptor CoGetCallerTID$descriptor() {
        return CoGetCallerTID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetCallerTID(LPDWORD lpdwTID)
     * }
     */
    public static MethodHandle CoGetCallerTID$handle() {
        return CoGetCallerTID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoGetCallerTID(LPDWORD lpdwTID)
     * }
     */
    public static MemorySegment CoGetCallerTID$address() {
        return CoGetCallerTID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetCallerTID(LPDWORD lpdwTID)
     * }
     */
    public static int CoGetCallerTID(MemorySegment lpdwTID) {
        var mh$ = CoGetCallerTID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetCallerTID", lpdwTID);
            }
            return (int)mh$.invokeExact(lpdwTID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetCurrentLogicalThreadId {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoGetCurrentLogicalThreadId");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetCurrentLogicalThreadId(GUID *pguid)
     * }
     */
    public static FunctionDescriptor CoGetCurrentLogicalThreadId$descriptor() {
        return CoGetCurrentLogicalThreadId.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetCurrentLogicalThreadId(GUID *pguid)
     * }
     */
    public static MethodHandle CoGetCurrentLogicalThreadId$handle() {
        return CoGetCurrentLogicalThreadId.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoGetCurrentLogicalThreadId(GUID *pguid)
     * }
     */
    public static MemorySegment CoGetCurrentLogicalThreadId$address() {
        return CoGetCurrentLogicalThreadId.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetCurrentLogicalThreadId(GUID *pguid)
     * }
     */
    public static int CoGetCurrentLogicalThreadId(MemorySegment pguid) {
        var mh$ = CoGetCurrentLogicalThreadId.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetCurrentLogicalThreadId", pguid);
            }
            return (int)mh$.invokeExact(pguid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetContextToken {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoGetContextToken");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetContextToken(ULONG_PTR *pToken)
     * }
     */
    public static FunctionDescriptor CoGetContextToken$descriptor() {
        return CoGetContextToken.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetContextToken(ULONG_PTR *pToken)
     * }
     */
    public static MethodHandle CoGetContextToken$handle() {
        return CoGetContextToken.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoGetContextToken(ULONG_PTR *pToken)
     * }
     */
    public static MemorySegment CoGetContextToken$address() {
        return CoGetContextToken.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetContextToken(ULONG_PTR *pToken)
     * }
     */
    public static int CoGetContextToken(MemorySegment pToken) {
        var mh$ = CoGetContextToken.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetContextToken", pToken);
            }
            return (int)mh$.invokeExact(pToken);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetDefaultContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoGetDefaultContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetDefaultContext(APTTYPE aptType, const IID *const riid, void **ppv)
     * }
     */
    public static FunctionDescriptor CoGetDefaultContext$descriptor() {
        return CoGetDefaultContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetDefaultContext(APTTYPE aptType, const IID *const riid, void **ppv)
     * }
     */
    public static MethodHandle CoGetDefaultContext$handle() {
        return CoGetDefaultContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoGetDefaultContext(APTTYPE aptType, const IID *const riid, void **ppv)
     * }
     */
    public static MemorySegment CoGetDefaultContext$address() {
        return CoGetDefaultContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetDefaultContext(APTTYPE aptType, const IID *const riid, void **ppv)
     * }
     */
    public static int CoGetDefaultContext(int aptType, MemorySegment riid, MemorySegment ppv) {
        var mh$ = CoGetDefaultContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetDefaultContext", aptType, riid, ppv);
            }
            return (int)mh$.invokeExact(aptType, riid, ppv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetApartmentType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoGetApartmentType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetApartmentType(APTTYPE *pAptType, APTTYPEQUALIFIER *pAptQualifier)
     * }
     */
    public static FunctionDescriptor CoGetApartmentType$descriptor() {
        return CoGetApartmentType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetApartmentType(APTTYPE *pAptType, APTTYPEQUALIFIER *pAptQualifier)
     * }
     */
    public static MethodHandle CoGetApartmentType$handle() {
        return CoGetApartmentType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoGetApartmentType(APTTYPE *pAptType, APTTYPEQUALIFIER *pAptQualifier)
     * }
     */
    public static MemorySegment CoGetApartmentType$address() {
        return CoGetApartmentType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetApartmentType(APTTYPE *pAptType, APTTYPEQUALIFIER *pAptQualifier)
     * }
     */
    public static int CoGetApartmentType(MemorySegment pAptType, MemorySegment pAptQualifier) {
        var mh$ = CoGetApartmentType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetApartmentType", pAptType, pAptQualifier);
            }
            return (int)mh$.invokeExact(pAptType, pAptQualifier);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagServerInformation {
     *     DWORD dwServerPid;
     *     DWORD dwServerTid;
     *     UINT64 ui64ServerAddress;
     * } *PServerInformation
     * }
     */
    public static final AddressLayout PServerInformation = wgl_h.C_POINTER;

    private static class CoDecodeProxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoDecodeProxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoDecodeProxy(DWORD dwClientPid, UINT64 ui64ProxyAddress, PServerInformation pServerInformation)
     * }
     */
    public static FunctionDescriptor CoDecodeProxy$descriptor() {
        return CoDecodeProxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoDecodeProxy(DWORD dwClientPid, UINT64 ui64ProxyAddress, PServerInformation pServerInformation)
     * }
     */
    public static MethodHandle CoDecodeProxy$handle() {
        return CoDecodeProxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoDecodeProxy(DWORD dwClientPid, UINT64 ui64ProxyAddress, PServerInformation pServerInformation)
     * }
     */
    public static MemorySegment CoDecodeProxy$address() {
        return CoDecodeProxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoDecodeProxy(DWORD dwClientPid, UINT64 ui64ProxyAddress, PServerInformation pServerInformation)
     * }
     */
    public static int CoDecodeProxy(int dwClientPid, long ui64ProxyAddress, MemorySegment pServerInformation) {
        var mh$ = CoDecodeProxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoDecodeProxy", dwClientPid, ui64ProxyAddress, pServerInformation);
            }
            return (int)mh$.invokeExact(dwClientPid, ui64ProxyAddress, pServerInformation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct CO_MTA_USAGE_COOKIE__ {
     *     int unused;
     * } *CO_MTA_USAGE_COOKIE
     * }
     */
    public static final AddressLayout CO_MTA_USAGE_COOKIE = wgl_h.C_POINTER;

    private static class CoIncrementMTAUsage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoIncrementMTAUsage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoIncrementMTAUsage(CO_MTA_USAGE_COOKIE *pCookie)
     * }
     */
    public static FunctionDescriptor CoIncrementMTAUsage$descriptor() {
        return CoIncrementMTAUsage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoIncrementMTAUsage(CO_MTA_USAGE_COOKIE *pCookie)
     * }
     */
    public static MethodHandle CoIncrementMTAUsage$handle() {
        return CoIncrementMTAUsage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoIncrementMTAUsage(CO_MTA_USAGE_COOKIE *pCookie)
     * }
     */
    public static MemorySegment CoIncrementMTAUsage$address() {
        return CoIncrementMTAUsage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoIncrementMTAUsage(CO_MTA_USAGE_COOKIE *pCookie)
     * }
     */
    public static int CoIncrementMTAUsage(MemorySegment pCookie) {
        var mh$ = CoIncrementMTAUsage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoIncrementMTAUsage", pCookie);
            }
            return (int)mh$.invokeExact(pCookie);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoDecrementMTAUsage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoDecrementMTAUsage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoDecrementMTAUsage(CO_MTA_USAGE_COOKIE Cookie)
     * }
     */
    public static FunctionDescriptor CoDecrementMTAUsage$descriptor() {
        return CoDecrementMTAUsage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoDecrementMTAUsage(CO_MTA_USAGE_COOKIE Cookie)
     * }
     */
    public static MethodHandle CoDecrementMTAUsage$handle() {
        return CoDecrementMTAUsage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoDecrementMTAUsage(CO_MTA_USAGE_COOKIE Cookie)
     * }
     */
    public static MemorySegment CoDecrementMTAUsage$address() {
        return CoDecrementMTAUsage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoDecrementMTAUsage(CO_MTA_USAGE_COOKIE Cookie)
     * }
     */
    public static int CoDecrementMTAUsage(MemorySegment Cookie) {
        var mh$ = CoDecrementMTAUsage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoDecrementMTAUsage", Cookie);
            }
            return (int)mh$.invokeExact(Cookie);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoAllowUnmarshalerCLSID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoAllowUnmarshalerCLSID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoAllowUnmarshalerCLSID(const IID *const clsid)
     * }
     */
    public static FunctionDescriptor CoAllowUnmarshalerCLSID$descriptor() {
        return CoAllowUnmarshalerCLSID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoAllowUnmarshalerCLSID(const IID *const clsid)
     * }
     */
    public static MethodHandle CoAllowUnmarshalerCLSID$handle() {
        return CoAllowUnmarshalerCLSID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoAllowUnmarshalerCLSID(const IID *const clsid)
     * }
     */
    public static MemorySegment CoAllowUnmarshalerCLSID$address() {
        return CoAllowUnmarshalerCLSID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoAllowUnmarshalerCLSID(const IID *const clsid)
     * }
     */
    public static int CoAllowUnmarshalerCLSID(MemorySegment clsid) {
        var mh$ = CoAllowUnmarshalerCLSID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoAllowUnmarshalerCLSID", clsid);
            }
            return (int)mh$.invokeExact(clsid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetObjectContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoGetObjectContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetObjectContext(const IID *const riid, LPVOID *ppv)
     * }
     */
    public static FunctionDescriptor CoGetObjectContext$descriptor() {
        return CoGetObjectContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetObjectContext(const IID *const riid, LPVOID *ppv)
     * }
     */
    public static MethodHandle CoGetObjectContext$handle() {
        return CoGetObjectContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoGetObjectContext(const IID *const riid, LPVOID *ppv)
     * }
     */
    public static MemorySegment CoGetObjectContext$address() {
        return CoGetObjectContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetObjectContext(const IID *const riid, LPVOID *ppv)
     * }
     */
    public static int CoGetObjectContext(MemorySegment riid, MemorySegment ppv) {
        var mh$ = CoGetObjectContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetObjectContext", riid, ppv);
            }
            return (int)mh$.invokeExact(riid, ppv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetClassObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoGetClassObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetClassObject(const IID *const rclsid, DWORD dwClsContext, LPVOID pvReserved, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static FunctionDescriptor CoGetClassObject$descriptor() {
        return CoGetClassObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetClassObject(const IID *const rclsid, DWORD dwClsContext, LPVOID pvReserved, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static MethodHandle CoGetClassObject$handle() {
        return CoGetClassObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoGetClassObject(const IID *const rclsid, DWORD dwClsContext, LPVOID pvReserved, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static MemorySegment CoGetClassObject$address() {
        return CoGetClassObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetClassObject(const IID *const rclsid, DWORD dwClsContext, LPVOID pvReserved, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static int CoGetClassObject(MemorySegment rclsid, int dwClsContext, MemorySegment pvReserved, MemorySegment riid, MemorySegment ppv) {
        var mh$ = CoGetClassObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetClassObject", rclsid, dwClsContext, pvReserved, riid, ppv);
            }
            return (int)mh$.invokeExact(rclsid, dwClsContext, pvReserved, riid, ppv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoRegisterClassObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoRegisterClassObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterClassObject(const IID *const rclsid, LPUNKNOWN pUnk, DWORD dwClsContext, DWORD flags, LPDWORD lpdwRegister)
     * }
     */
    public static FunctionDescriptor CoRegisterClassObject$descriptor() {
        return CoRegisterClassObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterClassObject(const IID *const rclsid, LPUNKNOWN pUnk, DWORD dwClsContext, DWORD flags, LPDWORD lpdwRegister)
     * }
     */
    public static MethodHandle CoRegisterClassObject$handle() {
        return CoRegisterClassObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterClassObject(const IID *const rclsid, LPUNKNOWN pUnk, DWORD dwClsContext, DWORD flags, LPDWORD lpdwRegister)
     * }
     */
    public static MemorySegment CoRegisterClassObject$address() {
        return CoRegisterClassObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoRegisterClassObject(const IID *const rclsid, LPUNKNOWN pUnk, DWORD dwClsContext, DWORD flags, LPDWORD lpdwRegister)
     * }
     */
    public static int CoRegisterClassObject(MemorySegment rclsid, MemorySegment pUnk, int dwClsContext, int flags, MemorySegment lpdwRegister) {
        var mh$ = CoRegisterClassObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoRegisterClassObject", rclsid, pUnk, dwClsContext, flags, lpdwRegister);
            }
            return (int)mh$.invokeExact(rclsid, pUnk, dwClsContext, flags, lpdwRegister);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoRevokeClassObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoRevokeClassObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoRevokeClassObject(DWORD dwRegister)
     * }
     */
    public static FunctionDescriptor CoRevokeClassObject$descriptor() {
        return CoRevokeClassObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoRevokeClassObject(DWORD dwRegister)
     * }
     */
    public static MethodHandle CoRevokeClassObject$handle() {
        return CoRevokeClassObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoRevokeClassObject(DWORD dwRegister)
     * }
     */
    public static MemorySegment CoRevokeClassObject$address() {
        return CoRevokeClassObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoRevokeClassObject(DWORD dwRegister)
     * }
     */
    public static int CoRevokeClassObject(int dwRegister) {
        var mh$ = CoRevokeClassObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoRevokeClassObject", dwRegister);
            }
            return (int)mh$.invokeExact(dwRegister);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoResumeClassObjects {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoResumeClassObjects");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoResumeClassObjects()
     * }
     */
    public static FunctionDescriptor CoResumeClassObjects$descriptor() {
        return CoResumeClassObjects.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoResumeClassObjects()
     * }
     */
    public static MethodHandle CoResumeClassObjects$handle() {
        return CoResumeClassObjects.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoResumeClassObjects()
     * }
     */
    public static MemorySegment CoResumeClassObjects$address() {
        return CoResumeClassObjects.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoResumeClassObjects()
     * }
     */
    public static int CoResumeClassObjects() {
        var mh$ = CoResumeClassObjects.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoResumeClassObjects");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoSuspendClassObjects {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoSuspendClassObjects");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoSuspendClassObjects()
     * }
     */
    public static FunctionDescriptor CoSuspendClassObjects$descriptor() {
        return CoSuspendClassObjects.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoSuspendClassObjects()
     * }
     */
    public static MethodHandle CoSuspendClassObjects$handle() {
        return CoSuspendClassObjects.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoSuspendClassObjects()
     * }
     */
    public static MemorySegment CoSuspendClassObjects$address() {
        return CoSuspendClassObjects.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoSuspendClassObjects()
     * }
     */
    public static int CoSuspendClassObjects() {
        var mh$ = CoSuspendClassObjects.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoSuspendClassObjects");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoAddRefServerProcess {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoAddRefServerProcess");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ULONG CoAddRefServerProcess()
     * }
     */
    public static FunctionDescriptor CoAddRefServerProcess$descriptor() {
        return CoAddRefServerProcess.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ULONG CoAddRefServerProcess()
     * }
     */
    public static MethodHandle CoAddRefServerProcess$handle() {
        return CoAddRefServerProcess.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ULONG CoAddRefServerProcess()
     * }
     */
    public static MemorySegment CoAddRefServerProcess$address() {
        return CoAddRefServerProcess.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ULONG CoAddRefServerProcess()
     * }
     */
    public static int CoAddRefServerProcess() {
        var mh$ = CoAddRefServerProcess.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoAddRefServerProcess");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoReleaseServerProcess {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoReleaseServerProcess");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ULONG CoReleaseServerProcess()
     * }
     */
    public static FunctionDescriptor CoReleaseServerProcess$descriptor() {
        return CoReleaseServerProcess.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ULONG CoReleaseServerProcess()
     * }
     */
    public static MethodHandle CoReleaseServerProcess$handle() {
        return CoReleaseServerProcess.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ULONG CoReleaseServerProcess()
     * }
     */
    public static MemorySegment CoReleaseServerProcess$address() {
        return CoReleaseServerProcess.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ULONG CoReleaseServerProcess()
     * }
     */
    public static int CoReleaseServerProcess() {
        var mh$ = CoReleaseServerProcess.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoReleaseServerProcess");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetPSClsid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoGetPSClsid");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetPSClsid(const IID *const riid, CLSID *pClsid)
     * }
     */
    public static FunctionDescriptor CoGetPSClsid$descriptor() {
        return CoGetPSClsid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetPSClsid(const IID *const riid, CLSID *pClsid)
     * }
     */
    public static MethodHandle CoGetPSClsid$handle() {
        return CoGetPSClsid.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoGetPSClsid(const IID *const riid, CLSID *pClsid)
     * }
     */
    public static MemorySegment CoGetPSClsid$address() {
        return CoGetPSClsid.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetPSClsid(const IID *const riid, CLSID *pClsid)
     * }
     */
    public static int CoGetPSClsid(MemorySegment riid, MemorySegment pClsid) {
        var mh$ = CoGetPSClsid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetPSClsid", riid, pClsid);
            }
            return (int)mh$.invokeExact(riid, pClsid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoRegisterPSClsid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoRegisterPSClsid");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterPSClsid(const IID *const riid, const IID *const rclsid)
     * }
     */
    public static FunctionDescriptor CoRegisterPSClsid$descriptor() {
        return CoRegisterPSClsid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterPSClsid(const IID *const riid, const IID *const rclsid)
     * }
     */
    public static MethodHandle CoRegisterPSClsid$handle() {
        return CoRegisterPSClsid.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterPSClsid(const IID *const riid, const IID *const rclsid)
     * }
     */
    public static MemorySegment CoRegisterPSClsid$address() {
        return CoRegisterPSClsid.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoRegisterPSClsid(const IID *const riid, const IID *const rclsid)
     * }
     */
    public static int CoRegisterPSClsid(MemorySegment riid, MemorySegment rclsid) {
        var mh$ = CoRegisterPSClsid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoRegisterPSClsid", riid, rclsid);
            }
            return (int)mh$.invokeExact(riid, rclsid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoRegisterSurrogate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoRegisterSurrogate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterSurrogate(LPSURROGATE pSurrogate)
     * }
     */
    public static FunctionDescriptor CoRegisterSurrogate$descriptor() {
        return CoRegisterSurrogate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterSurrogate(LPSURROGATE pSurrogate)
     * }
     */
    public static MethodHandle CoRegisterSurrogate$handle() {
        return CoRegisterSurrogate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterSurrogate(LPSURROGATE pSurrogate)
     * }
     */
    public static MemorySegment CoRegisterSurrogate$address() {
        return CoRegisterSurrogate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoRegisterSurrogate(LPSURROGATE pSurrogate)
     * }
     */
    public static int CoRegisterSurrogate(MemorySegment pSurrogate) {
        var mh$ = CoRegisterSurrogate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoRegisterSurrogate", pSurrogate);
            }
            return (int)mh$.invokeExact(pSurrogate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetMarshalSizeMax {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoGetMarshalSizeMax");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetMarshalSizeMax(ULONG *pulSize, const IID *const riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags)
     * }
     */
    public static FunctionDescriptor CoGetMarshalSizeMax$descriptor() {
        return CoGetMarshalSizeMax.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetMarshalSizeMax(ULONG *pulSize, const IID *const riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags)
     * }
     */
    public static MethodHandle CoGetMarshalSizeMax$handle() {
        return CoGetMarshalSizeMax.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoGetMarshalSizeMax(ULONG *pulSize, const IID *const riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags)
     * }
     */
    public static MemorySegment CoGetMarshalSizeMax$address() {
        return CoGetMarshalSizeMax.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetMarshalSizeMax(ULONG *pulSize, const IID *const riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags)
     * }
     */
    public static int CoGetMarshalSizeMax(MemorySegment pulSize, MemorySegment riid, MemorySegment pUnk, int dwDestContext, MemorySegment pvDestContext, int mshlflags) {
        var mh$ = CoGetMarshalSizeMax.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetMarshalSizeMax", pulSize, riid, pUnk, dwDestContext, pvDestContext, mshlflags);
            }
            return (int)mh$.invokeExact(pulSize, riid, pUnk, dwDestContext, pvDestContext, mshlflags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoMarshalInterface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoMarshalInterface");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoMarshalInterface(LPSTREAM pStm, const IID *const riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags)
     * }
     */
    public static FunctionDescriptor CoMarshalInterface$descriptor() {
        return CoMarshalInterface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoMarshalInterface(LPSTREAM pStm, const IID *const riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags)
     * }
     */
    public static MethodHandle CoMarshalInterface$handle() {
        return CoMarshalInterface.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoMarshalInterface(LPSTREAM pStm, const IID *const riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags)
     * }
     */
    public static MemorySegment CoMarshalInterface$address() {
        return CoMarshalInterface.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoMarshalInterface(LPSTREAM pStm, const IID *const riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags)
     * }
     */
    public static int CoMarshalInterface(MemorySegment pStm, MemorySegment riid, MemorySegment pUnk, int dwDestContext, MemorySegment pvDestContext, int mshlflags) {
        var mh$ = CoMarshalInterface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoMarshalInterface", pStm, riid, pUnk, dwDestContext, pvDestContext, mshlflags);
            }
            return (int)mh$.invokeExact(pStm, riid, pUnk, dwDestContext, pvDestContext, mshlflags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoUnmarshalInterface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoUnmarshalInterface");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoUnmarshalInterface(LPSTREAM pStm, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static FunctionDescriptor CoUnmarshalInterface$descriptor() {
        return CoUnmarshalInterface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoUnmarshalInterface(LPSTREAM pStm, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static MethodHandle CoUnmarshalInterface$handle() {
        return CoUnmarshalInterface.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoUnmarshalInterface(LPSTREAM pStm, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static MemorySegment CoUnmarshalInterface$address() {
        return CoUnmarshalInterface.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoUnmarshalInterface(LPSTREAM pStm, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static int CoUnmarshalInterface(MemorySegment pStm, MemorySegment riid, MemorySegment ppv) {
        var mh$ = CoUnmarshalInterface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoUnmarshalInterface", pStm, riid, ppv);
            }
            return (int)mh$.invokeExact(pStm, riid, ppv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoMarshalHresult {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoMarshalHresult");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoMarshalHresult(LPSTREAM pstm, HRESULT hresult)
     * }
     */
    public static FunctionDescriptor CoMarshalHresult$descriptor() {
        return CoMarshalHresult.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoMarshalHresult(LPSTREAM pstm, HRESULT hresult)
     * }
     */
    public static MethodHandle CoMarshalHresult$handle() {
        return CoMarshalHresult.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoMarshalHresult(LPSTREAM pstm, HRESULT hresult)
     * }
     */
    public static MemorySegment CoMarshalHresult$address() {
        return CoMarshalHresult.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoMarshalHresult(LPSTREAM pstm, HRESULT hresult)
     * }
     */
    public static int CoMarshalHresult(MemorySegment pstm, int hresult) {
        var mh$ = CoMarshalHresult.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoMarshalHresult", pstm, hresult);
            }
            return (int)mh$.invokeExact(pstm, hresult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoUnmarshalHresult {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoUnmarshalHresult");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoUnmarshalHresult(LPSTREAM pstm, HRESULT *phresult)
     * }
     */
    public static FunctionDescriptor CoUnmarshalHresult$descriptor() {
        return CoUnmarshalHresult.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoUnmarshalHresult(LPSTREAM pstm, HRESULT *phresult)
     * }
     */
    public static MethodHandle CoUnmarshalHresult$handle() {
        return CoUnmarshalHresult.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoUnmarshalHresult(LPSTREAM pstm, HRESULT *phresult)
     * }
     */
    public static MemorySegment CoUnmarshalHresult$address() {
        return CoUnmarshalHresult.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoUnmarshalHresult(LPSTREAM pstm, HRESULT *phresult)
     * }
     */
    public static int CoUnmarshalHresult(MemorySegment pstm, MemorySegment phresult) {
        var mh$ = CoUnmarshalHresult.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoUnmarshalHresult", pstm, phresult);
            }
            return (int)mh$.invokeExact(pstm, phresult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoReleaseMarshalData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoReleaseMarshalData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoReleaseMarshalData(LPSTREAM pStm)
     * }
     */
    public static FunctionDescriptor CoReleaseMarshalData$descriptor() {
        return CoReleaseMarshalData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoReleaseMarshalData(LPSTREAM pStm)
     * }
     */
    public static MethodHandle CoReleaseMarshalData$handle() {
        return CoReleaseMarshalData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoReleaseMarshalData(LPSTREAM pStm)
     * }
     */
    public static MemorySegment CoReleaseMarshalData$address() {
        return CoReleaseMarshalData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoReleaseMarshalData(LPSTREAM pStm)
     * }
     */
    public static int CoReleaseMarshalData(MemorySegment pStm) {
        var mh$ = CoReleaseMarshalData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoReleaseMarshalData", pStm);
            }
            return (int)mh$.invokeExact(pStm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoDisconnectObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoDisconnectObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoDisconnectObject(LPUNKNOWN pUnk, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor CoDisconnectObject$descriptor() {
        return CoDisconnectObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoDisconnectObject(LPUNKNOWN pUnk, DWORD dwReserved)
     * }
     */
    public static MethodHandle CoDisconnectObject$handle() {
        return CoDisconnectObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoDisconnectObject(LPUNKNOWN pUnk, DWORD dwReserved)
     * }
     */
    public static MemorySegment CoDisconnectObject$address() {
        return CoDisconnectObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoDisconnectObject(LPUNKNOWN pUnk, DWORD dwReserved)
     * }
     */
    public static int CoDisconnectObject(MemorySegment pUnk, int dwReserved) {
        var mh$ = CoDisconnectObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoDisconnectObject", pUnk, dwReserved);
            }
            return (int)mh$.invokeExact(pUnk, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoLockObjectExternal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoLockObjectExternal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoLockObjectExternal(LPUNKNOWN pUnk, BOOL fLock, BOOL fLastUnlockReleases)
     * }
     */
    public static FunctionDescriptor CoLockObjectExternal$descriptor() {
        return CoLockObjectExternal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoLockObjectExternal(LPUNKNOWN pUnk, BOOL fLock, BOOL fLastUnlockReleases)
     * }
     */
    public static MethodHandle CoLockObjectExternal$handle() {
        return CoLockObjectExternal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoLockObjectExternal(LPUNKNOWN pUnk, BOOL fLock, BOOL fLastUnlockReleases)
     * }
     */
    public static MemorySegment CoLockObjectExternal$address() {
        return CoLockObjectExternal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoLockObjectExternal(LPUNKNOWN pUnk, BOOL fLock, BOOL fLastUnlockReleases)
     * }
     */
    public static int CoLockObjectExternal(MemorySegment pUnk, int fLock, int fLastUnlockReleases) {
        var mh$ = CoLockObjectExternal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoLockObjectExternal", pUnk, fLock, fLastUnlockReleases);
            }
            return (int)mh$.invokeExact(pUnk, fLock, fLastUnlockReleases);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetStandardMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoGetStandardMarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetStandardMarshal(const IID *const riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags, LPMARSHAL *ppMarshal)
     * }
     */
    public static FunctionDescriptor CoGetStandardMarshal$descriptor() {
        return CoGetStandardMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetStandardMarshal(const IID *const riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags, LPMARSHAL *ppMarshal)
     * }
     */
    public static MethodHandle CoGetStandardMarshal$handle() {
        return CoGetStandardMarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoGetStandardMarshal(const IID *const riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags, LPMARSHAL *ppMarshal)
     * }
     */
    public static MemorySegment CoGetStandardMarshal$address() {
        return CoGetStandardMarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetStandardMarshal(const IID *const riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags, LPMARSHAL *ppMarshal)
     * }
     */
    public static int CoGetStandardMarshal(MemorySegment riid, MemorySegment pUnk, int dwDestContext, MemorySegment pvDestContext, int mshlflags, MemorySegment ppMarshal) {
        var mh$ = CoGetStandardMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetStandardMarshal", riid, pUnk, dwDestContext, pvDestContext, mshlflags, ppMarshal);
            }
            return (int)mh$.invokeExact(riid, pUnk, dwDestContext, pvDestContext, mshlflags, ppMarshal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetStdMarshalEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoGetStdMarshalEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetStdMarshalEx(LPUNKNOWN pUnkOuter, DWORD smexflags, LPUNKNOWN *ppUnkInner)
     * }
     */
    public static FunctionDescriptor CoGetStdMarshalEx$descriptor() {
        return CoGetStdMarshalEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetStdMarshalEx(LPUNKNOWN pUnkOuter, DWORD smexflags, LPUNKNOWN *ppUnkInner)
     * }
     */
    public static MethodHandle CoGetStdMarshalEx$handle() {
        return CoGetStdMarshalEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoGetStdMarshalEx(LPUNKNOWN pUnkOuter, DWORD smexflags, LPUNKNOWN *ppUnkInner)
     * }
     */
    public static MemorySegment CoGetStdMarshalEx$address() {
        return CoGetStdMarshalEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetStdMarshalEx(LPUNKNOWN pUnkOuter, DWORD smexflags, LPUNKNOWN *ppUnkInner)
     * }
     */
    public static int CoGetStdMarshalEx(MemorySegment pUnkOuter, int smexflags, MemorySegment ppUnkInner) {
        var mh$ = CoGetStdMarshalEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetStdMarshalEx", pUnkOuter, smexflags, ppUnkInner);
            }
            return (int)mh$.invokeExact(pUnkOuter, smexflags, ppUnkInner);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int SMEXF_SERVER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagSTDMSHLFLAGS.SMEXF_SERVER = 1
     * }
     */
    public static int SMEXF_SERVER() {
        return SMEXF_SERVER;
    }
    private static final int SMEXF_HANDLER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagSTDMSHLFLAGS.SMEXF_HANDLER = 2
     * }
     */
    public static int SMEXF_HANDLER() {
        return SMEXF_HANDLER;
    }

    private static class CoIsHandlerConnected {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoIsHandlerConnected");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BOOL CoIsHandlerConnected(LPUNKNOWN pUnk)
     * }
     */
    public static FunctionDescriptor CoIsHandlerConnected$descriptor() {
        return CoIsHandlerConnected.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BOOL CoIsHandlerConnected(LPUNKNOWN pUnk)
     * }
     */
    public static MethodHandle CoIsHandlerConnected$handle() {
        return CoIsHandlerConnected.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern BOOL CoIsHandlerConnected(LPUNKNOWN pUnk)
     * }
     */
    public static MemorySegment CoIsHandlerConnected$address() {
        return CoIsHandlerConnected.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern BOOL CoIsHandlerConnected(LPUNKNOWN pUnk)
     * }
     */
    public static int CoIsHandlerConnected(MemorySegment pUnk) {
        var mh$ = CoIsHandlerConnected.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoIsHandlerConnected", pUnk);
            }
            return (int)mh$.invokeExact(pUnk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoMarshalInterThreadInterfaceInStream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoMarshalInterThreadInterfaceInStream");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoMarshalInterThreadInterfaceInStream(const IID *const riid, LPUNKNOWN pUnk, LPSTREAM *ppStm)
     * }
     */
    public static FunctionDescriptor CoMarshalInterThreadInterfaceInStream$descriptor() {
        return CoMarshalInterThreadInterfaceInStream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoMarshalInterThreadInterfaceInStream(const IID *const riid, LPUNKNOWN pUnk, LPSTREAM *ppStm)
     * }
     */
    public static MethodHandle CoMarshalInterThreadInterfaceInStream$handle() {
        return CoMarshalInterThreadInterfaceInStream.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoMarshalInterThreadInterfaceInStream(const IID *const riid, LPUNKNOWN pUnk, LPSTREAM *ppStm)
     * }
     */
    public static MemorySegment CoMarshalInterThreadInterfaceInStream$address() {
        return CoMarshalInterThreadInterfaceInStream.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoMarshalInterThreadInterfaceInStream(const IID *const riid, LPUNKNOWN pUnk, LPSTREAM *ppStm)
     * }
     */
    public static int CoMarshalInterThreadInterfaceInStream(MemorySegment riid, MemorySegment pUnk, MemorySegment ppStm) {
        var mh$ = CoMarshalInterThreadInterfaceInStream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoMarshalInterThreadInterfaceInStream", riid, pUnk, ppStm);
            }
            return (int)mh$.invokeExact(riid, pUnk, ppStm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetInterfaceAndReleaseStream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoGetInterfaceAndReleaseStream");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetInterfaceAndReleaseStream(LPSTREAM pStm, const IID *const iid, LPVOID *ppv)
     * }
     */
    public static FunctionDescriptor CoGetInterfaceAndReleaseStream$descriptor() {
        return CoGetInterfaceAndReleaseStream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetInterfaceAndReleaseStream(LPSTREAM pStm, const IID *const iid, LPVOID *ppv)
     * }
     */
    public static MethodHandle CoGetInterfaceAndReleaseStream$handle() {
        return CoGetInterfaceAndReleaseStream.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoGetInterfaceAndReleaseStream(LPSTREAM pStm, const IID *const iid, LPVOID *ppv)
     * }
     */
    public static MemorySegment CoGetInterfaceAndReleaseStream$address() {
        return CoGetInterfaceAndReleaseStream.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetInterfaceAndReleaseStream(LPSTREAM pStm, const IID *const iid, LPVOID *ppv)
     * }
     */
    public static int CoGetInterfaceAndReleaseStream(MemorySegment pStm, MemorySegment iid, MemorySegment ppv) {
        var mh$ = CoGetInterfaceAndReleaseStream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetInterfaceAndReleaseStream", pStm, iid, ppv);
            }
            return (int)mh$.invokeExact(pStm, iid, ppv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoCreateFreeThreadedMarshaler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoCreateFreeThreadedMarshaler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoCreateFreeThreadedMarshaler(LPUNKNOWN punkOuter, LPUNKNOWN *ppunkMarshal)
     * }
     */
    public static FunctionDescriptor CoCreateFreeThreadedMarshaler$descriptor() {
        return CoCreateFreeThreadedMarshaler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoCreateFreeThreadedMarshaler(LPUNKNOWN punkOuter, LPUNKNOWN *ppunkMarshal)
     * }
     */
    public static MethodHandle CoCreateFreeThreadedMarshaler$handle() {
        return CoCreateFreeThreadedMarshaler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoCreateFreeThreadedMarshaler(LPUNKNOWN punkOuter, LPUNKNOWN *ppunkMarshal)
     * }
     */
    public static MemorySegment CoCreateFreeThreadedMarshaler$address() {
        return CoCreateFreeThreadedMarshaler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoCreateFreeThreadedMarshaler(LPUNKNOWN punkOuter, LPUNKNOWN *ppunkMarshal)
     * }
     */
    public static int CoCreateFreeThreadedMarshaler(MemorySegment punkOuter, MemorySegment ppunkMarshal) {
        var mh$ = CoCreateFreeThreadedMarshaler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoCreateFreeThreadedMarshaler", punkOuter, ppunkMarshal);
            }
            return (int)mh$.invokeExact(punkOuter, ppunkMarshal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoFreeUnusedLibraries {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoFreeUnusedLibraries");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void CoFreeUnusedLibraries()
     * }
     */
    public static FunctionDescriptor CoFreeUnusedLibraries$descriptor() {
        return CoFreeUnusedLibraries.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void CoFreeUnusedLibraries()
     * }
     */
    public static MethodHandle CoFreeUnusedLibraries$handle() {
        return CoFreeUnusedLibraries.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void CoFreeUnusedLibraries()
     * }
     */
    public static MemorySegment CoFreeUnusedLibraries$address() {
        return CoFreeUnusedLibraries.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void CoFreeUnusedLibraries()
     * }
     */
    public static void CoFreeUnusedLibraries() {
        var mh$ = CoFreeUnusedLibraries.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoFreeUnusedLibraries");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoFreeUnusedLibrariesEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoFreeUnusedLibrariesEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void CoFreeUnusedLibrariesEx(DWORD dwUnloadDelay, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor CoFreeUnusedLibrariesEx$descriptor() {
        return CoFreeUnusedLibrariesEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void CoFreeUnusedLibrariesEx(DWORD dwUnloadDelay, DWORD dwReserved)
     * }
     */
    public static MethodHandle CoFreeUnusedLibrariesEx$handle() {
        return CoFreeUnusedLibrariesEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void CoFreeUnusedLibrariesEx(DWORD dwUnloadDelay, DWORD dwReserved)
     * }
     */
    public static MemorySegment CoFreeUnusedLibrariesEx$address() {
        return CoFreeUnusedLibrariesEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void CoFreeUnusedLibrariesEx(DWORD dwUnloadDelay, DWORD dwReserved)
     * }
     */
    public static void CoFreeUnusedLibrariesEx(int dwUnloadDelay, int dwReserved) {
        var mh$ = CoFreeUnusedLibrariesEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoFreeUnusedLibrariesEx", dwUnloadDelay, dwReserved);
            }
            mh$.invokeExact(dwUnloadDelay, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoDisconnectContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoDisconnectContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoDisconnectContext(DWORD dwTimeout)
     * }
     */
    public static FunctionDescriptor CoDisconnectContext$descriptor() {
        return CoDisconnectContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoDisconnectContext(DWORD dwTimeout)
     * }
     */
    public static MethodHandle CoDisconnectContext$handle() {
        return CoDisconnectContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoDisconnectContext(DWORD dwTimeout)
     * }
     */
    public static MemorySegment CoDisconnectContext$address() {
        return CoDisconnectContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoDisconnectContext(DWORD dwTimeout)
     * }
     */
    public static int CoDisconnectContext(int dwTimeout) {
        var mh$ = CoDisconnectContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoDisconnectContext", dwTimeout);
            }
            return (int)mh$.invokeExact(dwTimeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInitializeSecurity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoInitializeSecurity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInitializeSecurity(PSECURITY_DESCRIPTOR pSecDesc, LONG cAuthSvc, SOLE_AUTHENTICATION_SERVICE *asAuthSvc, void *pReserved1, DWORD dwAuthnLevel, DWORD dwImpLevel, void *pAuthList, DWORD dwCapabilities, void *pReserved3)
     * }
     */
    public static FunctionDescriptor CoInitializeSecurity$descriptor() {
        return CoInitializeSecurity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInitializeSecurity(PSECURITY_DESCRIPTOR pSecDesc, LONG cAuthSvc, SOLE_AUTHENTICATION_SERVICE *asAuthSvc, void *pReserved1, DWORD dwAuthnLevel, DWORD dwImpLevel, void *pAuthList, DWORD dwCapabilities, void *pReserved3)
     * }
     */
    public static MethodHandle CoInitializeSecurity$handle() {
        return CoInitializeSecurity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInitializeSecurity(PSECURITY_DESCRIPTOR pSecDesc, LONG cAuthSvc, SOLE_AUTHENTICATION_SERVICE *asAuthSvc, void *pReserved1, DWORD dwAuthnLevel, DWORD dwImpLevel, void *pAuthList, DWORD dwCapabilities, void *pReserved3)
     * }
     */
    public static MemorySegment CoInitializeSecurity$address() {
        return CoInitializeSecurity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInitializeSecurity(PSECURITY_DESCRIPTOR pSecDesc, LONG cAuthSvc, SOLE_AUTHENTICATION_SERVICE *asAuthSvc, void *pReserved1, DWORD dwAuthnLevel, DWORD dwImpLevel, void *pAuthList, DWORD dwCapabilities, void *pReserved3)
     * }
     */
    public static int CoInitializeSecurity(MemorySegment pSecDesc, int cAuthSvc, MemorySegment asAuthSvc, MemorySegment pReserved1, int dwAuthnLevel, int dwImpLevel, MemorySegment pAuthList, int dwCapabilities, MemorySegment pReserved3) {
        var mh$ = CoInitializeSecurity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInitializeSecurity", pSecDesc, cAuthSvc, asAuthSvc, pReserved1, dwAuthnLevel, dwImpLevel, pAuthList, dwCapabilities, pReserved3);
            }
            return (int)mh$.invokeExact(pSecDesc, cAuthSvc, asAuthSvc, pReserved1, dwAuthnLevel, dwImpLevel, pAuthList, dwCapabilities, pReserved3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetCallContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoGetCallContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetCallContext(const IID *const riid, void **ppInterface)
     * }
     */
    public static FunctionDescriptor CoGetCallContext$descriptor() {
        return CoGetCallContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetCallContext(const IID *const riid, void **ppInterface)
     * }
     */
    public static MethodHandle CoGetCallContext$handle() {
        return CoGetCallContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoGetCallContext(const IID *const riid, void **ppInterface)
     * }
     */
    public static MemorySegment CoGetCallContext$address() {
        return CoGetCallContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetCallContext(const IID *const riid, void **ppInterface)
     * }
     */
    public static int CoGetCallContext(MemorySegment riid, MemorySegment ppInterface) {
        var mh$ = CoGetCallContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetCallContext", riid, ppInterface);
            }
            return (int)mh$.invokeExact(riid, ppInterface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoQueryProxyBlanket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoQueryProxyBlanket");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoQueryProxyBlanket(IUnknown *pProxy, DWORD *pwAuthnSvc, DWORD *pAuthzSvc, LPOLESTR *pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, RPC_AUTH_IDENTITY_HANDLE *pAuthInfo, DWORD *pCapabilites)
     * }
     */
    public static FunctionDescriptor CoQueryProxyBlanket$descriptor() {
        return CoQueryProxyBlanket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoQueryProxyBlanket(IUnknown *pProxy, DWORD *pwAuthnSvc, DWORD *pAuthzSvc, LPOLESTR *pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, RPC_AUTH_IDENTITY_HANDLE *pAuthInfo, DWORD *pCapabilites)
     * }
     */
    public static MethodHandle CoQueryProxyBlanket$handle() {
        return CoQueryProxyBlanket.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoQueryProxyBlanket(IUnknown *pProxy, DWORD *pwAuthnSvc, DWORD *pAuthzSvc, LPOLESTR *pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, RPC_AUTH_IDENTITY_HANDLE *pAuthInfo, DWORD *pCapabilites)
     * }
     */
    public static MemorySegment CoQueryProxyBlanket$address() {
        return CoQueryProxyBlanket.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoQueryProxyBlanket(IUnknown *pProxy, DWORD *pwAuthnSvc, DWORD *pAuthzSvc, LPOLESTR *pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, RPC_AUTH_IDENTITY_HANDLE *pAuthInfo, DWORD *pCapabilites)
     * }
     */
    public static int CoQueryProxyBlanket(MemorySegment pProxy, MemorySegment pwAuthnSvc, MemorySegment pAuthzSvc, MemorySegment pServerPrincName, MemorySegment pAuthnLevel, MemorySegment pImpLevel, MemorySegment pAuthInfo, MemorySegment pCapabilites) {
        var mh$ = CoQueryProxyBlanket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoQueryProxyBlanket", pProxy, pwAuthnSvc, pAuthzSvc, pServerPrincName, pAuthnLevel, pImpLevel, pAuthInfo, pCapabilites);
            }
            return (int)mh$.invokeExact(pProxy, pwAuthnSvc, pAuthzSvc, pServerPrincName, pAuthnLevel, pImpLevel, pAuthInfo, pCapabilites);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoSetProxyBlanket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoSetProxyBlanket");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoSetProxyBlanket(IUnknown *pProxy, DWORD dwAuthnSvc, DWORD dwAuthzSvc, OLECHAR *pServerPrincName, DWORD dwAuthnLevel, DWORD dwImpLevel, RPC_AUTH_IDENTITY_HANDLE pAuthInfo, DWORD dwCapabilities)
     * }
     */
    public static FunctionDescriptor CoSetProxyBlanket$descriptor() {
        return CoSetProxyBlanket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoSetProxyBlanket(IUnknown *pProxy, DWORD dwAuthnSvc, DWORD dwAuthzSvc, OLECHAR *pServerPrincName, DWORD dwAuthnLevel, DWORD dwImpLevel, RPC_AUTH_IDENTITY_HANDLE pAuthInfo, DWORD dwCapabilities)
     * }
     */
    public static MethodHandle CoSetProxyBlanket$handle() {
        return CoSetProxyBlanket.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoSetProxyBlanket(IUnknown *pProxy, DWORD dwAuthnSvc, DWORD dwAuthzSvc, OLECHAR *pServerPrincName, DWORD dwAuthnLevel, DWORD dwImpLevel, RPC_AUTH_IDENTITY_HANDLE pAuthInfo, DWORD dwCapabilities)
     * }
     */
    public static MemorySegment CoSetProxyBlanket$address() {
        return CoSetProxyBlanket.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoSetProxyBlanket(IUnknown *pProxy, DWORD dwAuthnSvc, DWORD dwAuthzSvc, OLECHAR *pServerPrincName, DWORD dwAuthnLevel, DWORD dwImpLevel, RPC_AUTH_IDENTITY_HANDLE pAuthInfo, DWORD dwCapabilities)
     * }
     */
    public static int CoSetProxyBlanket(MemorySegment pProxy, int dwAuthnSvc, int dwAuthzSvc, MemorySegment pServerPrincName, int dwAuthnLevel, int dwImpLevel, MemorySegment pAuthInfo, int dwCapabilities) {
        var mh$ = CoSetProxyBlanket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoSetProxyBlanket", pProxy, dwAuthnSvc, dwAuthzSvc, pServerPrincName, dwAuthnLevel, dwImpLevel, pAuthInfo, dwCapabilities);
            }
            return (int)mh$.invokeExact(pProxy, dwAuthnSvc, dwAuthzSvc, pServerPrincName, dwAuthnLevel, dwImpLevel, pAuthInfo, dwCapabilities);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoCopyProxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoCopyProxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoCopyProxy(IUnknown *pProxy, IUnknown **ppCopy)
     * }
     */
    public static FunctionDescriptor CoCopyProxy$descriptor() {
        return CoCopyProxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoCopyProxy(IUnknown *pProxy, IUnknown **ppCopy)
     * }
     */
    public static MethodHandle CoCopyProxy$handle() {
        return CoCopyProxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoCopyProxy(IUnknown *pProxy, IUnknown **ppCopy)
     * }
     */
    public static MemorySegment CoCopyProxy$address() {
        return CoCopyProxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoCopyProxy(IUnknown *pProxy, IUnknown **ppCopy)
     * }
     */
    public static int CoCopyProxy(MemorySegment pProxy, MemorySegment ppCopy) {
        var mh$ = CoCopyProxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoCopyProxy", pProxy, ppCopy);
            }
            return (int)mh$.invokeExact(pProxy, ppCopy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoQueryClientBlanket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoQueryClientBlanket");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoQueryClientBlanket(DWORD *pAuthnSvc, DWORD *pAuthzSvc, LPOLESTR *pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, RPC_AUTHZ_HANDLE *pPrivs, DWORD *pCapabilities)
     * }
     */
    public static FunctionDescriptor CoQueryClientBlanket$descriptor() {
        return CoQueryClientBlanket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoQueryClientBlanket(DWORD *pAuthnSvc, DWORD *pAuthzSvc, LPOLESTR *pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, RPC_AUTHZ_HANDLE *pPrivs, DWORD *pCapabilities)
     * }
     */
    public static MethodHandle CoQueryClientBlanket$handle() {
        return CoQueryClientBlanket.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoQueryClientBlanket(DWORD *pAuthnSvc, DWORD *pAuthzSvc, LPOLESTR *pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, RPC_AUTHZ_HANDLE *pPrivs, DWORD *pCapabilities)
     * }
     */
    public static MemorySegment CoQueryClientBlanket$address() {
        return CoQueryClientBlanket.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoQueryClientBlanket(DWORD *pAuthnSvc, DWORD *pAuthzSvc, LPOLESTR *pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, RPC_AUTHZ_HANDLE *pPrivs, DWORD *pCapabilities)
     * }
     */
    public static int CoQueryClientBlanket(MemorySegment pAuthnSvc, MemorySegment pAuthzSvc, MemorySegment pServerPrincName, MemorySegment pAuthnLevel, MemorySegment pImpLevel, MemorySegment pPrivs, MemorySegment pCapabilities) {
        var mh$ = CoQueryClientBlanket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoQueryClientBlanket", pAuthnSvc, pAuthzSvc, pServerPrincName, pAuthnLevel, pImpLevel, pPrivs, pCapabilities);
            }
            return (int)mh$.invokeExact(pAuthnSvc, pAuthzSvc, pServerPrincName, pAuthnLevel, pImpLevel, pPrivs, pCapabilities);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoImpersonateClient {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoImpersonateClient");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoImpersonateClient()
     * }
     */
    public static FunctionDescriptor CoImpersonateClient$descriptor() {
        return CoImpersonateClient.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoImpersonateClient()
     * }
     */
    public static MethodHandle CoImpersonateClient$handle() {
        return CoImpersonateClient.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoImpersonateClient()
     * }
     */
    public static MemorySegment CoImpersonateClient$address() {
        return CoImpersonateClient.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoImpersonateClient()
     * }
     */
    public static int CoImpersonateClient() {
        var mh$ = CoImpersonateClient.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoImpersonateClient");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoRevertToSelf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoRevertToSelf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoRevertToSelf()
     * }
     */
    public static FunctionDescriptor CoRevertToSelf$descriptor() {
        return CoRevertToSelf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoRevertToSelf()
     * }
     */
    public static MethodHandle CoRevertToSelf$handle() {
        return CoRevertToSelf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoRevertToSelf()
     * }
     */
    public static MemorySegment CoRevertToSelf$address() {
        return CoRevertToSelf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoRevertToSelf()
     * }
     */
    public static int CoRevertToSelf() {
        var mh$ = CoRevertToSelf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoRevertToSelf");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoQueryAuthenticationServices {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoQueryAuthenticationServices");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoQueryAuthenticationServices(DWORD *pcAuthSvc, SOLE_AUTHENTICATION_SERVICE **asAuthSvc)
     * }
     */
    public static FunctionDescriptor CoQueryAuthenticationServices$descriptor() {
        return CoQueryAuthenticationServices.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoQueryAuthenticationServices(DWORD *pcAuthSvc, SOLE_AUTHENTICATION_SERVICE **asAuthSvc)
     * }
     */
    public static MethodHandle CoQueryAuthenticationServices$handle() {
        return CoQueryAuthenticationServices.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoQueryAuthenticationServices(DWORD *pcAuthSvc, SOLE_AUTHENTICATION_SERVICE **asAuthSvc)
     * }
     */
    public static MemorySegment CoQueryAuthenticationServices$address() {
        return CoQueryAuthenticationServices.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoQueryAuthenticationServices(DWORD *pcAuthSvc, SOLE_AUTHENTICATION_SERVICE **asAuthSvc)
     * }
     */
    public static int CoQueryAuthenticationServices(MemorySegment pcAuthSvc, MemorySegment asAuthSvc) {
        var mh$ = CoQueryAuthenticationServices.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoQueryAuthenticationServices", pcAuthSvc, asAuthSvc);
            }
            return (int)mh$.invokeExact(pcAuthSvc, asAuthSvc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoSwitchCallContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoSwitchCallContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoSwitchCallContext(IUnknown *pNewObject, IUnknown **ppOldObject)
     * }
     */
    public static FunctionDescriptor CoSwitchCallContext$descriptor() {
        return CoSwitchCallContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoSwitchCallContext(IUnknown *pNewObject, IUnknown **ppOldObject)
     * }
     */
    public static MethodHandle CoSwitchCallContext$handle() {
        return CoSwitchCallContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoSwitchCallContext(IUnknown *pNewObject, IUnknown **ppOldObject)
     * }
     */
    public static MemorySegment CoSwitchCallContext$address() {
        return CoSwitchCallContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoSwitchCallContext(IUnknown *pNewObject, IUnknown **ppOldObject)
     * }
     */
    public static int CoSwitchCallContext(MemorySegment pNewObject, MemorySegment ppOldObject) {
        var mh$ = CoSwitchCallContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoSwitchCallContext", pNewObject, ppOldObject);
            }
            return (int)mh$.invokeExact(pNewObject, ppOldObject);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoCreateInstance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoCreateInstance");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static FunctionDescriptor CoCreateInstance$descriptor() {
        return CoCreateInstance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static MethodHandle CoCreateInstance$handle() {
        return CoCreateInstance.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static MemorySegment CoCreateInstance$address() {
        return CoCreateInstance.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static int CoCreateInstance(MemorySegment rclsid, MemorySegment pUnkOuter, int dwClsContext, MemorySegment riid, MemorySegment ppv) {
        var mh$ = CoCreateInstance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoCreateInstance", rclsid, pUnkOuter, dwClsContext, riid, ppv);
            }
            return (int)mh$.invokeExact(rclsid, pUnkOuter, dwClsContext, riid, ppv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoCreateInstanceEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoCreateInstanceEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoCreateInstanceEx(const IID *const Clsid, IUnknown *punkOuter, DWORD dwClsCtx, COSERVERINFO *pServerInfo, DWORD dwCount, MULTI_QI *pResults)
     * }
     */
    public static FunctionDescriptor CoCreateInstanceEx$descriptor() {
        return CoCreateInstanceEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoCreateInstanceEx(const IID *const Clsid, IUnknown *punkOuter, DWORD dwClsCtx, COSERVERINFO *pServerInfo, DWORD dwCount, MULTI_QI *pResults)
     * }
     */
    public static MethodHandle CoCreateInstanceEx$handle() {
        return CoCreateInstanceEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoCreateInstanceEx(const IID *const Clsid, IUnknown *punkOuter, DWORD dwClsCtx, COSERVERINFO *pServerInfo, DWORD dwCount, MULTI_QI *pResults)
     * }
     */
    public static MemorySegment CoCreateInstanceEx$address() {
        return CoCreateInstanceEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoCreateInstanceEx(const IID *const Clsid, IUnknown *punkOuter, DWORD dwClsCtx, COSERVERINFO *pServerInfo, DWORD dwCount, MULTI_QI *pResults)
     * }
     */
    public static int CoCreateInstanceEx(MemorySegment Clsid, MemorySegment punkOuter, int dwClsCtx, MemorySegment pServerInfo, int dwCount, MemorySegment pResults) {
        var mh$ = CoCreateInstanceEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoCreateInstanceEx", Clsid, punkOuter, dwClsCtx, pServerInfo, dwCount, pResults);
            }
            return (int)mh$.invokeExact(Clsid, punkOuter, dwClsCtx, pServerInfo, dwCount, pResults);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoCreateInstanceFromApp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoCreateInstanceFromApp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoCreateInstanceFromApp(const IID *const Clsid, IUnknown *punkOuter, DWORD dwClsCtx, PVOID reserved, DWORD dwCount, MULTI_QI *pResults)
     * }
     */
    public static FunctionDescriptor CoCreateInstanceFromApp$descriptor() {
        return CoCreateInstanceFromApp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoCreateInstanceFromApp(const IID *const Clsid, IUnknown *punkOuter, DWORD dwClsCtx, PVOID reserved, DWORD dwCount, MULTI_QI *pResults)
     * }
     */
    public static MethodHandle CoCreateInstanceFromApp$handle() {
        return CoCreateInstanceFromApp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoCreateInstanceFromApp(const IID *const Clsid, IUnknown *punkOuter, DWORD dwClsCtx, PVOID reserved, DWORD dwCount, MULTI_QI *pResults)
     * }
     */
    public static MemorySegment CoCreateInstanceFromApp$address() {
        return CoCreateInstanceFromApp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoCreateInstanceFromApp(const IID *const Clsid, IUnknown *punkOuter, DWORD dwClsCtx, PVOID reserved, DWORD dwCount, MULTI_QI *pResults)
     * }
     */
    public static int CoCreateInstanceFromApp(MemorySegment Clsid, MemorySegment punkOuter, int dwClsCtx, MemorySegment reserved, int dwCount, MemorySegment pResults) {
        var mh$ = CoCreateInstanceFromApp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoCreateInstanceFromApp", Clsid, punkOuter, dwClsCtx, reserved, dwCount, pResults);
            }
            return (int)mh$.invokeExact(Clsid, punkOuter, dwClsCtx, reserved, dwCount, pResults);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoRegisterActivationFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoRegisterActivationFilter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterActivationFilter(IActivationFilter *pActivationFilter)
     * }
     */
    public static FunctionDescriptor CoRegisterActivationFilter$descriptor() {
        return CoRegisterActivationFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterActivationFilter(IActivationFilter *pActivationFilter)
     * }
     */
    public static MethodHandle CoRegisterActivationFilter$handle() {
        return CoRegisterActivationFilter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterActivationFilter(IActivationFilter *pActivationFilter)
     * }
     */
    public static MemorySegment CoRegisterActivationFilter$address() {
        return CoRegisterActivationFilter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoRegisterActivationFilter(IActivationFilter *pActivationFilter)
     * }
     */
    public static int CoRegisterActivationFilter(MemorySegment pActivationFilter) {
        var mh$ = CoRegisterActivationFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoRegisterActivationFilter", pActivationFilter);
            }
            return (int)mh$.invokeExact(pActivationFilter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetCancelObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoGetCancelObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetCancelObject(DWORD dwThreadId, const IID *const iid, void **ppUnk)
     * }
     */
    public static FunctionDescriptor CoGetCancelObject$descriptor() {
        return CoGetCancelObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetCancelObject(DWORD dwThreadId, const IID *const iid, void **ppUnk)
     * }
     */
    public static MethodHandle CoGetCancelObject$handle() {
        return CoGetCancelObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoGetCancelObject(DWORD dwThreadId, const IID *const iid, void **ppUnk)
     * }
     */
    public static MemorySegment CoGetCancelObject$address() {
        return CoGetCancelObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetCancelObject(DWORD dwThreadId, const IID *const iid, void **ppUnk)
     * }
     */
    public static int CoGetCancelObject(int dwThreadId, MemorySegment iid, MemorySegment ppUnk) {
        var mh$ = CoGetCancelObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetCancelObject", dwThreadId, iid, ppUnk);
            }
            return (int)mh$.invokeExact(dwThreadId, iid, ppUnk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoSetCancelObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoSetCancelObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoSetCancelObject(IUnknown *pUnk)
     * }
     */
    public static FunctionDescriptor CoSetCancelObject$descriptor() {
        return CoSetCancelObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoSetCancelObject(IUnknown *pUnk)
     * }
     */
    public static MethodHandle CoSetCancelObject$handle() {
        return CoSetCancelObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoSetCancelObject(IUnknown *pUnk)
     * }
     */
    public static MemorySegment CoSetCancelObject$address() {
        return CoSetCancelObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoSetCancelObject(IUnknown *pUnk)
     * }
     */
    public static int CoSetCancelObject(MemorySegment pUnk) {
        var mh$ = CoSetCancelObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoSetCancelObject", pUnk);
            }
            return (int)mh$.invokeExact(pUnk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoCancelCall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoCancelCall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoCancelCall(DWORD dwThreadId, ULONG ulTimeout)
     * }
     */
    public static FunctionDescriptor CoCancelCall$descriptor() {
        return CoCancelCall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoCancelCall(DWORD dwThreadId, ULONG ulTimeout)
     * }
     */
    public static MethodHandle CoCancelCall$handle() {
        return CoCancelCall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoCancelCall(DWORD dwThreadId, ULONG ulTimeout)
     * }
     */
    public static MemorySegment CoCancelCall$address() {
        return CoCancelCall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoCancelCall(DWORD dwThreadId, ULONG ulTimeout)
     * }
     */
    public static int CoCancelCall(int dwThreadId, int ulTimeout) {
        var mh$ = CoCancelCall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoCancelCall", dwThreadId, ulTimeout);
            }
            return (int)mh$.invokeExact(dwThreadId, ulTimeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoTestCancel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoTestCancel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoTestCancel()
     * }
     */
    public static FunctionDescriptor CoTestCancel$descriptor() {
        return CoTestCancel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoTestCancel()
     * }
     */
    public static MethodHandle CoTestCancel$handle() {
        return CoTestCancel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoTestCancel()
     * }
     */
    public static MemorySegment CoTestCancel$address() {
        return CoTestCancel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoTestCancel()
     * }
     */
    public static int CoTestCancel() {
        var mh$ = CoTestCancel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoTestCancel");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoEnableCallCancellation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoEnableCallCancellation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoEnableCallCancellation(LPVOID pReserved)
     * }
     */
    public static FunctionDescriptor CoEnableCallCancellation$descriptor() {
        return CoEnableCallCancellation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoEnableCallCancellation(LPVOID pReserved)
     * }
     */
    public static MethodHandle CoEnableCallCancellation$handle() {
        return CoEnableCallCancellation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoEnableCallCancellation(LPVOID pReserved)
     * }
     */
    public static MemorySegment CoEnableCallCancellation$address() {
        return CoEnableCallCancellation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoEnableCallCancellation(LPVOID pReserved)
     * }
     */
    public static int CoEnableCallCancellation(MemorySegment pReserved) {
        var mh$ = CoEnableCallCancellation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoEnableCallCancellation", pReserved);
            }
            return (int)mh$.invokeExact(pReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoDisableCallCancellation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoDisableCallCancellation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoDisableCallCancellation(LPVOID pReserved)
     * }
     */
    public static FunctionDescriptor CoDisableCallCancellation$descriptor() {
        return CoDisableCallCancellation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoDisableCallCancellation(LPVOID pReserved)
     * }
     */
    public static MethodHandle CoDisableCallCancellation$handle() {
        return CoDisableCallCancellation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoDisableCallCancellation(LPVOID pReserved)
     * }
     */
    public static MemorySegment CoDisableCallCancellation$address() {
        return CoDisableCallCancellation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoDisableCallCancellation(LPVOID pReserved)
     * }
     */
    public static int CoDisableCallCancellation(MemorySegment pReserved) {
        var mh$ = CoDisableCallCancellation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoDisableCallCancellation", pReserved);
            }
            return (int)mh$.invokeExact(pReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StringFromCLSID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("StringFromCLSID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StringFromCLSID(const IID *const rclsid, LPOLESTR *lplpsz)
     * }
     */
    public static FunctionDescriptor StringFromCLSID$descriptor() {
        return StringFromCLSID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StringFromCLSID(const IID *const rclsid, LPOLESTR *lplpsz)
     * }
     */
    public static MethodHandle StringFromCLSID$handle() {
        return StringFromCLSID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT StringFromCLSID(const IID *const rclsid, LPOLESTR *lplpsz)
     * }
     */
    public static MemorySegment StringFromCLSID$address() {
        return StringFromCLSID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT StringFromCLSID(const IID *const rclsid, LPOLESTR *lplpsz)
     * }
     */
    public static int StringFromCLSID(MemorySegment rclsid, MemorySegment lplpsz) {
        var mh$ = StringFromCLSID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StringFromCLSID", rclsid, lplpsz);
            }
            return (int)mh$.invokeExact(rclsid, lplpsz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLSIDFromString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CLSIDFromString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CLSIDFromString(LPCOLESTR lpsz, LPCLSID pclsid)
     * }
     */
    public static FunctionDescriptor CLSIDFromString$descriptor() {
        return CLSIDFromString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CLSIDFromString(LPCOLESTR lpsz, LPCLSID pclsid)
     * }
     */
    public static MethodHandle CLSIDFromString$handle() {
        return CLSIDFromString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CLSIDFromString(LPCOLESTR lpsz, LPCLSID pclsid)
     * }
     */
    public static MemorySegment CLSIDFromString$address() {
        return CLSIDFromString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CLSIDFromString(LPCOLESTR lpsz, LPCLSID pclsid)
     * }
     */
    public static int CLSIDFromString(MemorySegment lpsz, MemorySegment pclsid) {
        var mh$ = CLSIDFromString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLSIDFromString", lpsz, pclsid);
            }
            return (int)mh$.invokeExact(lpsz, pclsid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StringFromIID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("StringFromIID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StringFromIID(const IID *const rclsid, LPOLESTR *lplpsz)
     * }
     */
    public static FunctionDescriptor StringFromIID$descriptor() {
        return StringFromIID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StringFromIID(const IID *const rclsid, LPOLESTR *lplpsz)
     * }
     */
    public static MethodHandle StringFromIID$handle() {
        return StringFromIID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT StringFromIID(const IID *const rclsid, LPOLESTR *lplpsz)
     * }
     */
    public static MemorySegment StringFromIID$address() {
        return StringFromIID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT StringFromIID(const IID *const rclsid, LPOLESTR *lplpsz)
     * }
     */
    public static int StringFromIID(MemorySegment rclsid, MemorySegment lplpsz) {
        var mh$ = StringFromIID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StringFromIID", rclsid, lplpsz);
            }
            return (int)mh$.invokeExact(rclsid, lplpsz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IIDFromString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IIDFromString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT IIDFromString(LPCOLESTR lpsz, LPIID lpiid)
     * }
     */
    public static FunctionDescriptor IIDFromString$descriptor() {
        return IIDFromString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT IIDFromString(LPCOLESTR lpsz, LPIID lpiid)
     * }
     */
    public static MethodHandle IIDFromString$handle() {
        return IIDFromString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT IIDFromString(LPCOLESTR lpsz, LPIID lpiid)
     * }
     */
    public static MemorySegment IIDFromString$address() {
        return IIDFromString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT IIDFromString(LPCOLESTR lpsz, LPIID lpiid)
     * }
     */
    public static int IIDFromString(MemorySegment lpsz, MemorySegment lpiid) {
        var mh$ = IIDFromString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IIDFromString", lpsz, lpiid);
            }
            return (int)mh$.invokeExact(lpsz, lpiid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ProgIDFromCLSID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ProgIDFromCLSID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT ProgIDFromCLSID(const IID *const clsid, LPOLESTR *lplpszProgID)
     * }
     */
    public static FunctionDescriptor ProgIDFromCLSID$descriptor() {
        return ProgIDFromCLSID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT ProgIDFromCLSID(const IID *const clsid, LPOLESTR *lplpszProgID)
     * }
     */
    public static MethodHandle ProgIDFromCLSID$handle() {
        return ProgIDFromCLSID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT ProgIDFromCLSID(const IID *const clsid, LPOLESTR *lplpszProgID)
     * }
     */
    public static MemorySegment ProgIDFromCLSID$address() {
        return ProgIDFromCLSID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT ProgIDFromCLSID(const IID *const clsid, LPOLESTR *lplpszProgID)
     * }
     */
    public static int ProgIDFromCLSID(MemorySegment clsid, MemorySegment lplpszProgID) {
        var mh$ = ProgIDFromCLSID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ProgIDFromCLSID", clsid, lplpszProgID);
            }
            return (int)mh$.invokeExact(clsid, lplpszProgID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLSIDFromProgID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CLSIDFromProgID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CLSIDFromProgID(LPCOLESTR lpszProgID, LPCLSID lpclsid)
     * }
     */
    public static FunctionDescriptor CLSIDFromProgID$descriptor() {
        return CLSIDFromProgID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CLSIDFromProgID(LPCOLESTR lpszProgID, LPCLSID lpclsid)
     * }
     */
    public static MethodHandle CLSIDFromProgID$handle() {
        return CLSIDFromProgID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CLSIDFromProgID(LPCOLESTR lpszProgID, LPCLSID lpclsid)
     * }
     */
    public static MemorySegment CLSIDFromProgID$address() {
        return CLSIDFromProgID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CLSIDFromProgID(LPCOLESTR lpszProgID, LPCLSID lpclsid)
     * }
     */
    public static int CLSIDFromProgID(MemorySegment lpszProgID, MemorySegment lpclsid) {
        var mh$ = CLSIDFromProgID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLSIDFromProgID", lpszProgID, lpclsid);
            }
            return (int)mh$.invokeExact(lpszProgID, lpclsid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StringFromGUID2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("StringFromGUID2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int StringFromGUID2(const GUID *const rguid, LPOLESTR lpsz, int cchMax)
     * }
     */
    public static FunctionDescriptor StringFromGUID2$descriptor() {
        return StringFromGUID2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int StringFromGUID2(const GUID *const rguid, LPOLESTR lpsz, int cchMax)
     * }
     */
    public static MethodHandle StringFromGUID2$handle() {
        return StringFromGUID2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int StringFromGUID2(const GUID *const rguid, LPOLESTR lpsz, int cchMax)
     * }
     */
    public static MemorySegment StringFromGUID2$address() {
        return StringFromGUID2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int StringFromGUID2(const GUID *const rguid, LPOLESTR lpsz, int cchMax)
     * }
     */
    public static int StringFromGUID2(MemorySegment rguid, MemorySegment lpsz, int cchMax) {
        var mh$ = StringFromGUID2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StringFromGUID2", rguid, lpsz, cchMax);
            }
            return (int)mh$.invokeExact(rguid, lpsz, cchMax);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoCreateGuid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoCreateGuid");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoCreateGuid(GUID *pguid)
     * }
     */
    public static FunctionDescriptor CoCreateGuid$descriptor() {
        return CoCreateGuid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoCreateGuid(GUID *pguid)
     * }
     */
    public static MethodHandle CoCreateGuid$handle() {
        return CoCreateGuid.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoCreateGuid(GUID *pguid)
     * }
     */
    public static MemorySegment CoCreateGuid$address() {
        return CoCreateGuid.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoCreateGuid(GUID *pguid)
     * }
     */
    public static int CoCreateGuid(MemorySegment pguid) {
        var mh$ = CoCreateGuid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoCreateGuid", pguid);
            }
            return (int)mh$.invokeExact(pguid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PropVariantCopy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("PropVariantCopy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT PropVariantCopy(PROPVARIANT *pvarDest, const PROPVARIANT *pvarSrc)
     * }
     */
    public static FunctionDescriptor PropVariantCopy$descriptor() {
        return PropVariantCopy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT PropVariantCopy(PROPVARIANT *pvarDest, const PROPVARIANT *pvarSrc)
     * }
     */
    public static MethodHandle PropVariantCopy$handle() {
        return PropVariantCopy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT PropVariantCopy(PROPVARIANT *pvarDest, const PROPVARIANT *pvarSrc)
     * }
     */
    public static MemorySegment PropVariantCopy$address() {
        return PropVariantCopy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT PropVariantCopy(PROPVARIANT *pvarDest, const PROPVARIANT *pvarSrc)
     * }
     */
    public static int PropVariantCopy(MemorySegment pvarDest, MemorySegment pvarSrc) {
        var mh$ = PropVariantCopy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PropVariantCopy", pvarDest, pvarSrc);
            }
            return (int)mh$.invokeExact(pvarDest, pvarSrc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PropVariantClear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("PropVariantClear");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT PropVariantClear(PROPVARIANT *pvar)
     * }
     */
    public static FunctionDescriptor PropVariantClear$descriptor() {
        return PropVariantClear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT PropVariantClear(PROPVARIANT *pvar)
     * }
     */
    public static MethodHandle PropVariantClear$handle() {
        return PropVariantClear.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT PropVariantClear(PROPVARIANT *pvar)
     * }
     */
    public static MemorySegment PropVariantClear$address() {
        return PropVariantClear.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT PropVariantClear(PROPVARIANT *pvar)
     * }
     */
    public static int PropVariantClear(MemorySegment pvar) {
        var mh$ = PropVariantClear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PropVariantClear", pvar);
            }
            return (int)mh$.invokeExact(pvar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FreePropVariantArray {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("FreePropVariantArray");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT FreePropVariantArray(ULONG cVariants, PROPVARIANT *rgvars)
     * }
     */
    public static FunctionDescriptor FreePropVariantArray$descriptor() {
        return FreePropVariantArray.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT FreePropVariantArray(ULONG cVariants, PROPVARIANT *rgvars)
     * }
     */
    public static MethodHandle FreePropVariantArray$handle() {
        return FreePropVariantArray.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT FreePropVariantArray(ULONG cVariants, PROPVARIANT *rgvars)
     * }
     */
    public static MemorySegment FreePropVariantArray$address() {
        return FreePropVariantArray.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT FreePropVariantArray(ULONG cVariants, PROPVARIANT *rgvars)
     * }
     */
    public static int FreePropVariantArray(int cVariants, MemorySegment rgvars) {
        var mh$ = FreePropVariantArray.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FreePropVariantArray", cVariants, rgvars);
            }
            return (int)mh$.invokeExact(cVariants, rgvars);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoWaitForMultipleHandles {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoWaitForMultipleHandles");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoWaitForMultipleHandles(DWORD dwFlags, DWORD dwTimeout, ULONG cHandles, LPHANDLE pHandles, LPDWORD lpdwindex)
     * }
     */
    public static FunctionDescriptor CoWaitForMultipleHandles$descriptor() {
        return CoWaitForMultipleHandles.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoWaitForMultipleHandles(DWORD dwFlags, DWORD dwTimeout, ULONG cHandles, LPHANDLE pHandles, LPDWORD lpdwindex)
     * }
     */
    public static MethodHandle CoWaitForMultipleHandles$handle() {
        return CoWaitForMultipleHandles.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoWaitForMultipleHandles(DWORD dwFlags, DWORD dwTimeout, ULONG cHandles, LPHANDLE pHandles, LPDWORD lpdwindex)
     * }
     */
    public static MemorySegment CoWaitForMultipleHandles$address() {
        return CoWaitForMultipleHandles.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoWaitForMultipleHandles(DWORD dwFlags, DWORD dwTimeout, ULONG cHandles, LPHANDLE pHandles, LPDWORD lpdwindex)
     * }
     */
    public static int CoWaitForMultipleHandles(int dwFlags, int dwTimeout, int cHandles, MemorySegment pHandles, MemorySegment lpdwindex) {
        var mh$ = CoWaitForMultipleHandles.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoWaitForMultipleHandles", dwFlags, dwTimeout, cHandles, pHandles, lpdwindex);
            }
            return (int)mh$.invokeExact(dwFlags, dwTimeout, cHandles, pHandles, lpdwindex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int COWAIT_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagCOWAIT_FLAGS.COWAIT_DEFAULT = 0
     * }
     */
    public static int COWAIT_DEFAULT() {
        return COWAIT_DEFAULT;
    }
    private static final int COWAIT_WAITALL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagCOWAIT_FLAGS.COWAIT_WAITALL = 1
     * }
     */
    public static int COWAIT_WAITALL() {
        return COWAIT_WAITALL;
    }
    private static final int COWAIT_ALERTABLE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagCOWAIT_FLAGS.COWAIT_ALERTABLE = 2
     * }
     */
    public static int COWAIT_ALERTABLE() {
        return COWAIT_ALERTABLE;
    }
    private static final int COWAIT_INPUTAVAILABLE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagCOWAIT_FLAGS.COWAIT_INPUTAVAILABLE = 4
     * }
     */
    public static int COWAIT_INPUTAVAILABLE() {
        return COWAIT_INPUTAVAILABLE;
    }
    private static final int COWAIT_DISPATCH_CALLS = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagCOWAIT_FLAGS.COWAIT_DISPATCH_CALLS = 8
     * }
     */
    public static int COWAIT_DISPATCH_CALLS() {
        return COWAIT_DISPATCH_CALLS;
    }
    private static final int COWAIT_DISPATCH_WINDOW_MESSAGES = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagCOWAIT_FLAGS.COWAIT_DISPATCH_WINDOW_MESSAGES = 16
     * }
     */
    public static int COWAIT_DISPATCH_WINDOW_MESSAGES() {
        return COWAIT_DISPATCH_WINDOW_MESSAGES;
    }
    private static final int CWMO_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum CWMO_FLAGS.CWMO_DEFAULT = 0
     * }
     */
    public static int CWMO_DEFAULT() {
        return CWMO_DEFAULT;
    }
    private static final int CWMO_DISPATCH_CALLS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum CWMO_FLAGS.CWMO_DISPATCH_CALLS = 1
     * }
     */
    public static int CWMO_DISPATCH_CALLS() {
        return CWMO_DISPATCH_CALLS;
    }
    private static final int CWMO_DISPATCH_WINDOW_MESSAGES = (int)2L;
    /**
     * {@snippet lang=c :
     * enum CWMO_FLAGS.CWMO_DISPATCH_WINDOW_MESSAGES = 2
     * }
     */
    public static int CWMO_DISPATCH_WINDOW_MESSAGES() {
        return CWMO_DISPATCH_WINDOW_MESSAGES;
    }

    private static class CoWaitForMultipleObjects {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoWaitForMultipleObjects");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoWaitForMultipleObjects(DWORD dwFlags, DWORD dwTimeout, ULONG cHandles, const HANDLE *pHandles, LPDWORD lpdwindex)
     * }
     */
    public static FunctionDescriptor CoWaitForMultipleObjects$descriptor() {
        return CoWaitForMultipleObjects.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoWaitForMultipleObjects(DWORD dwFlags, DWORD dwTimeout, ULONG cHandles, const HANDLE *pHandles, LPDWORD lpdwindex)
     * }
     */
    public static MethodHandle CoWaitForMultipleObjects$handle() {
        return CoWaitForMultipleObjects.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoWaitForMultipleObjects(DWORD dwFlags, DWORD dwTimeout, ULONG cHandles, const HANDLE *pHandles, LPDWORD lpdwindex)
     * }
     */
    public static MemorySegment CoWaitForMultipleObjects$address() {
        return CoWaitForMultipleObjects.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoWaitForMultipleObjects(DWORD dwFlags, DWORD dwTimeout, ULONG cHandles, const HANDLE *pHandles, LPDWORD lpdwindex)
     * }
     */
    public static int CoWaitForMultipleObjects(int dwFlags, int dwTimeout, int cHandles, MemorySegment pHandles, MemorySegment lpdwindex) {
        var mh$ = CoWaitForMultipleObjects.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoWaitForMultipleObjects", dwFlags, dwTimeout, cHandles, pHandles, lpdwindex);
            }
            return (int)mh$.invokeExact(dwFlags, dwTimeout, cHandles, pHandles, lpdwindex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetTreatAsClass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoGetTreatAsClass");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetTreatAsClass(const IID *const clsidOld, LPCLSID pClsidNew)
     * }
     */
    public static FunctionDescriptor CoGetTreatAsClass$descriptor() {
        return CoGetTreatAsClass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetTreatAsClass(const IID *const clsidOld, LPCLSID pClsidNew)
     * }
     */
    public static MethodHandle CoGetTreatAsClass$handle() {
        return CoGetTreatAsClass.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoGetTreatAsClass(const IID *const clsidOld, LPCLSID pClsidNew)
     * }
     */
    public static MemorySegment CoGetTreatAsClass$address() {
        return CoGetTreatAsClass.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetTreatAsClass(const IID *const clsidOld, LPCLSID pClsidNew)
     * }
     */
    public static int CoGetTreatAsClass(MemorySegment clsidOld, MemorySegment pClsidNew) {
        var mh$ = CoGetTreatAsClass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetTreatAsClass", clsidOld, pClsidNew);
            }
            return (int)mh$.invokeExact(clsidOld, pClsidNew);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInvalidateRemoteMachineBindings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoInvalidateRemoteMachineBindings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInvalidateRemoteMachineBindings(LPOLESTR pszMachineName)
     * }
     */
    public static FunctionDescriptor CoInvalidateRemoteMachineBindings$descriptor() {
        return CoInvalidateRemoteMachineBindings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInvalidateRemoteMachineBindings(LPOLESTR pszMachineName)
     * }
     */
    public static MethodHandle CoInvalidateRemoteMachineBindings$handle() {
        return CoInvalidateRemoteMachineBindings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInvalidateRemoteMachineBindings(LPOLESTR pszMachineName)
     * }
     */
    public static MemorySegment CoInvalidateRemoteMachineBindings$address() {
        return CoInvalidateRemoteMachineBindings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInvalidateRemoteMachineBindings(LPOLESTR pszMachineName)
     * }
     */
    public static int CoInvalidateRemoteMachineBindings(MemorySegment pszMachineName) {
        var mh$ = CoInvalidateRemoteMachineBindings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInvalidateRemoteMachineBindings", pszMachineName);
            }
            return (int)mh$.invokeExact(pszMachineName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int AGILEREFERENCE_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum AgileReferenceOptions.AGILEREFERENCE_DEFAULT = 0
     * }
     */
    public static int AGILEREFERENCE_DEFAULT() {
        return AGILEREFERENCE_DEFAULT;
    }
    private static final int AGILEREFERENCE_DELAYEDMARSHAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum AgileReferenceOptions.AGILEREFERENCE_DELAYEDMARSHAL = 1
     * }
     */
    public static int AGILEREFERENCE_DELAYEDMARSHAL() {
        return AGILEREFERENCE_DELAYEDMARSHAL;
    }

    private static class RoGetAgileReference {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RoGetAgileReference");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT RoGetAgileReference(enum AgileReferenceOptions options, const IID *const riid, IUnknown *pUnk, IAgileReference **ppAgileReference)
     * }
     */
    public static FunctionDescriptor RoGetAgileReference$descriptor() {
        return RoGetAgileReference.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT RoGetAgileReference(enum AgileReferenceOptions options, const IID *const riid, IUnknown *pUnk, IAgileReference **ppAgileReference)
     * }
     */
    public static MethodHandle RoGetAgileReference$handle() {
        return RoGetAgileReference.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT RoGetAgileReference(enum AgileReferenceOptions options, const IID *const riid, IUnknown *pUnk, IAgileReference **ppAgileReference)
     * }
     */
    public static MemorySegment RoGetAgileReference$address() {
        return RoGetAgileReference.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT RoGetAgileReference(enum AgileReferenceOptions options, const IID *const riid, IUnknown *pUnk, IAgileReference **ppAgileReference)
     * }
     */
    public static int RoGetAgileReference(int options, MemorySegment riid, MemorySegment pUnk, MemorySegment ppAgileReference) {
        var mh$ = RoGetAgileReference.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RoGetAgileReference", options, riid, pUnk, ppAgileReference);
            }
            return (int)mh$.invokeExact(options, riid, pUnk, ppAgileReference);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DllGetClassObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DllGetClassObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT DllGetClassObject(const IID *const rclsid, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static FunctionDescriptor DllGetClassObject$descriptor() {
        return DllGetClassObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT DllGetClassObject(const IID *const rclsid, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static MethodHandle DllGetClassObject$handle() {
        return DllGetClassObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT DllGetClassObject(const IID *const rclsid, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static MemorySegment DllGetClassObject$address() {
        return DllGetClassObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT DllGetClassObject(const IID *const rclsid, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static int DllGetClassObject(MemorySegment rclsid, MemorySegment riid, MemorySegment ppv) {
        var mh$ = DllGetClassObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DllGetClassObject", rclsid, riid, ppv);
            }
            return (int)mh$.invokeExact(rclsid, riid, ppv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DllCanUnloadNow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DllCanUnloadNow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT DllCanUnloadNow()
     * }
     */
    public static FunctionDescriptor DllCanUnloadNow$descriptor() {
        return DllCanUnloadNow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT DllCanUnloadNow()
     * }
     */
    public static MethodHandle DllCanUnloadNow$handle() {
        return DllCanUnloadNow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT DllCanUnloadNow()
     * }
     */
    public static MemorySegment DllCanUnloadNow$address() {
        return DllCanUnloadNow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT DllCanUnloadNow()
     * }
     */
    public static int DllCanUnloadNow() {
        var mh$ = DllCanUnloadNow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DllCanUnloadNow");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoTaskMemAlloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoTaskMemAlloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LPVOID CoTaskMemAlloc(SIZE_T cb)
     * }
     */
    public static FunctionDescriptor CoTaskMemAlloc$descriptor() {
        return CoTaskMemAlloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LPVOID CoTaskMemAlloc(SIZE_T cb)
     * }
     */
    public static MethodHandle CoTaskMemAlloc$handle() {
        return CoTaskMemAlloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LPVOID CoTaskMemAlloc(SIZE_T cb)
     * }
     */
    public static MemorySegment CoTaskMemAlloc$address() {
        return CoTaskMemAlloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LPVOID CoTaskMemAlloc(SIZE_T cb)
     * }
     */
    public static MemorySegment CoTaskMemAlloc(long cb) {
        var mh$ = CoTaskMemAlloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoTaskMemAlloc", cb);
            }
            return (MemorySegment)mh$.invokeExact(cb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoTaskMemRealloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoTaskMemRealloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LPVOID CoTaskMemRealloc(LPVOID pv, SIZE_T cb)
     * }
     */
    public static FunctionDescriptor CoTaskMemRealloc$descriptor() {
        return CoTaskMemRealloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LPVOID CoTaskMemRealloc(LPVOID pv, SIZE_T cb)
     * }
     */
    public static MethodHandle CoTaskMemRealloc$handle() {
        return CoTaskMemRealloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LPVOID CoTaskMemRealloc(LPVOID pv, SIZE_T cb)
     * }
     */
    public static MemorySegment CoTaskMemRealloc$address() {
        return CoTaskMemRealloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LPVOID CoTaskMemRealloc(LPVOID pv, SIZE_T cb)
     * }
     */
    public static MemorySegment CoTaskMemRealloc(MemorySegment pv, long cb) {
        var mh$ = CoTaskMemRealloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoTaskMemRealloc", pv, cb);
            }
            return (MemorySegment)mh$.invokeExact(pv, cb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoTaskMemFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoTaskMemFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void CoTaskMemFree(LPVOID pv)
     * }
     */
    public static FunctionDescriptor CoTaskMemFree$descriptor() {
        return CoTaskMemFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void CoTaskMemFree(LPVOID pv)
     * }
     */
    public static MethodHandle CoTaskMemFree$handle() {
        return CoTaskMemFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void CoTaskMemFree(LPVOID pv)
     * }
     */
    public static MemorySegment CoTaskMemFree$address() {
        return CoTaskMemFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void CoTaskMemFree(LPVOID pv)
     * }
     */
    public static void CoTaskMemFree(MemorySegment pv) {
        var mh$ = CoTaskMemFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoTaskMemFree", pv);
            }
            mh$.invokeExact(pv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoFileTimeNow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoFileTimeNow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoFileTimeNow(FILETIME *lpFileTime)
     * }
     */
    public static FunctionDescriptor CoFileTimeNow$descriptor() {
        return CoFileTimeNow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoFileTimeNow(FILETIME *lpFileTime)
     * }
     */
    public static MethodHandle CoFileTimeNow$handle() {
        return CoFileTimeNow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoFileTimeNow(FILETIME *lpFileTime)
     * }
     */
    public static MemorySegment CoFileTimeNow$address() {
        return CoFileTimeNow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoFileTimeNow(FILETIME *lpFileTime)
     * }
     */
    public static int CoFileTimeNow(MemorySegment lpFileTime) {
        var mh$ = CoFileTimeNow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoFileTimeNow", lpFileTime);
            }
            return (int)mh$.invokeExact(lpFileTime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLSIDFromProgIDEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CLSIDFromProgIDEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CLSIDFromProgIDEx(LPCOLESTR lpszProgID, LPCLSID lpclsid)
     * }
     */
    public static FunctionDescriptor CLSIDFromProgIDEx$descriptor() {
        return CLSIDFromProgIDEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CLSIDFromProgIDEx(LPCOLESTR lpszProgID, LPCLSID lpclsid)
     * }
     */
    public static MethodHandle CLSIDFromProgIDEx$handle() {
        return CLSIDFromProgIDEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CLSIDFromProgIDEx(LPCOLESTR lpszProgID, LPCLSID lpclsid)
     * }
     */
    public static MemorySegment CLSIDFromProgIDEx$address() {
        return CLSIDFromProgIDEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CLSIDFromProgIDEx(LPCOLESTR lpszProgID, LPCLSID lpclsid)
     * }
     */
    public static int CLSIDFromProgIDEx(MemorySegment lpszProgID, MemorySegment lpclsid) {
        var mh$ = CLSIDFromProgIDEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLSIDFromProgIDEx", lpszProgID, lpclsid);
            }
            return (int)mh$.invokeExact(lpszProgID, lpclsid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct CO_DEVICE_CATALOG_COOKIE__ {
     *     int unused;
     * } *CO_DEVICE_CATALOG_COOKIE
     * }
     */
    public static final AddressLayout CO_DEVICE_CATALOG_COOKIE = wgl_h.C_POINTER;

    private static class CoRegisterDeviceCatalog {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoRegisterDeviceCatalog");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterDeviceCatalog(PCWSTR deviceInstanceId, CO_DEVICE_CATALOG_COOKIE *cookie)
     * }
     */
    public static FunctionDescriptor CoRegisterDeviceCatalog$descriptor() {
        return CoRegisterDeviceCatalog.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterDeviceCatalog(PCWSTR deviceInstanceId, CO_DEVICE_CATALOG_COOKIE *cookie)
     * }
     */
    public static MethodHandle CoRegisterDeviceCatalog$handle() {
        return CoRegisterDeviceCatalog.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterDeviceCatalog(PCWSTR deviceInstanceId, CO_DEVICE_CATALOG_COOKIE *cookie)
     * }
     */
    public static MemorySegment CoRegisterDeviceCatalog$address() {
        return CoRegisterDeviceCatalog.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoRegisterDeviceCatalog(PCWSTR deviceInstanceId, CO_DEVICE_CATALOG_COOKIE *cookie)
     * }
     */
    public static int CoRegisterDeviceCatalog(MemorySegment deviceInstanceId, MemorySegment cookie) {
        var mh$ = CoRegisterDeviceCatalog.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoRegisterDeviceCatalog", deviceInstanceId, cookie);
            }
            return (int)mh$.invokeExact(deviceInstanceId, cookie);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoRevokeDeviceCatalog {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoRevokeDeviceCatalog");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoRevokeDeviceCatalog(CO_DEVICE_CATALOG_COOKIE cookie)
     * }
     */
    public static FunctionDescriptor CoRevokeDeviceCatalog$descriptor() {
        return CoRevokeDeviceCatalog.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoRevokeDeviceCatalog(CO_DEVICE_CATALOG_COOKIE cookie)
     * }
     */
    public static MethodHandle CoRevokeDeviceCatalog$handle() {
        return CoRevokeDeviceCatalog.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoRevokeDeviceCatalog(CO_DEVICE_CATALOG_COOKIE cookie)
     * }
     */
    public static MemorySegment CoRevokeDeviceCatalog$address() {
        return CoRevokeDeviceCatalog.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoRevokeDeviceCatalog(CO_DEVICE_CATALOG_COOKIE cookie)
     * }
     */
    public static int CoRevokeDeviceCatalog(MemorySegment cookie) {
        var mh$ = CoRevokeDeviceCatalog.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoRevokeDeviceCatalog", cookie);
            }
            return (int)mh$.invokeExact(cookie);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$layout() {
        return __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$segment() {
        return __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec() {
        return __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$layout() {
        return __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$segment() {
        return __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec() {
        return __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$layout() {
        return __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$segment() {
        return __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec() {
        return __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$layout() {
        return __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$segment() {
        return __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec() {
        return __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$layout() {
        return __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$segment() {
        return __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec() {
        return __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$layout() {
        return __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$segment() {
        return __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec() {
        return __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$layout() {
        return __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$segment() {
        return __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec() {
        return __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$layout() {
        return __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$segment() {
        return __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec() {
        return __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0053_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0053_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0053_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0053_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0053_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0053_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0053_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0053_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0053_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0053_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0053_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0053_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0053_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0053_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0053_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0053_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0053_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0053_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0053_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0053_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0053_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0053_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0053_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0053_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0053_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0053_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0053_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0053_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0053_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0053_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0053_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0053_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IMallocSpy *LPMALLOCSPY
     * }
     */
    public static final AddressLayout LPMALLOCSPY = wgl_h.C_POINTER;

    private static class IID_IMallocSpy$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IMallocSpy").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMallocSpy
     * }
     */
    public static GroupLayout IID_IMallocSpy$layout() {
        return IID_IMallocSpy$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMallocSpy
     * }
     */
    public static MemorySegment IID_IMallocSpy() {
        return IID_IMallocSpy$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMallocSpy
     * }
     */
    public static void IID_IMallocSpy(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IMallocSpy$constants.SEGMENT, 0L, IID_IMallocSpy$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0054_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0054_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0054_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0054_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0054_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0054_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0054_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0054_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0054_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0054_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0054_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0054_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0054_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0054_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0054_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0054_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0054_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0054_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0054_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0054_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0054_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0054_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0054_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0054_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0054_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0054_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0054_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0054_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0054_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0054_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0054_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0054_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IBindCtx *LPBC
     * }
     */
    public static final AddressLayout LPBC = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef IBindCtx *LPBINDCTX
     * }
     */
    public static final AddressLayout LPBINDCTX = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagBIND_OPTS {
     *     DWORD cbStruct;
     *     DWORD grfFlags;
     *     DWORD grfMode;
     *     DWORD dwTickCountDeadline;
     * } *LPBIND_OPTS
     * }
     */
    public static final AddressLayout LPBIND_OPTS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagBIND_OPTS2 {
     *     DWORD cbStruct;
     *     DWORD grfFlags;
     *     DWORD grfMode;
     *     DWORD dwTickCountDeadline;
     *     DWORD dwTrackFlags;
     *     DWORD dwClassContext;
     *     LCID locale;
     *     COSERVERINFO *pServerInfo;
     * } *LPBIND_OPTS2
     * }
     */
    public static final AddressLayout LPBIND_OPTS2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagBIND_OPTS3 {
     *     DWORD cbStruct;
     *     DWORD grfFlags;
     *     DWORD grfMode;
     *     DWORD dwTickCountDeadline;
     *     DWORD dwTrackFlags;
     *     DWORD dwClassContext;
     *     LCID locale;
     *     COSERVERINFO *pServerInfo;
     *     HWND hwnd;
     * } *LPBIND_OPTS3
     * }
     */
    public static final AddressLayout LPBIND_OPTS3 = wgl_h.C_POINTER;
    private static final int BIND_MAYBOTHERUSER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagBIND_FLAGS.BIND_MAYBOTHERUSER = 1
     * }
     */
    public static int BIND_MAYBOTHERUSER() {
        return BIND_MAYBOTHERUSER;
    }
    private static final int BIND_JUSTTESTEXISTENCE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagBIND_FLAGS.BIND_JUSTTESTEXISTENCE = 2
     * }
     */
    public static int BIND_JUSTTESTEXISTENCE() {
        return BIND_JUSTTESTEXISTENCE;
    }

    private static class IID_IBindCtx$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IBindCtx").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindCtx
     * }
     */
    public static GroupLayout IID_IBindCtx$layout() {
        return IID_IBindCtx$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindCtx
     * }
     */
    public static MemorySegment IID_IBindCtx() {
        return IID_IBindCtx$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindCtx
     * }
     */
    public static void IID_IBindCtx(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IBindCtx$constants.SEGMENT, 0L, IID_IBindCtx$constants.LAYOUT.byteSize());
    }

    private static class IBindCtx_RemoteSetBindOptions_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IBindCtx_RemoteSetBindOptions_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_RemoteSetBindOptions_Proxy(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static FunctionDescriptor IBindCtx_RemoteSetBindOptions_Proxy$descriptor() {
        return IBindCtx_RemoteSetBindOptions_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_RemoteSetBindOptions_Proxy(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static MethodHandle IBindCtx_RemoteSetBindOptions_Proxy$handle() {
        return IBindCtx_RemoteSetBindOptions_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_RemoteSetBindOptions_Proxy(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static MemorySegment IBindCtx_RemoteSetBindOptions_Proxy$address() {
        return IBindCtx_RemoteSetBindOptions_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBindCtx_RemoteSetBindOptions_Proxy(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static int IBindCtx_RemoteSetBindOptions_Proxy(MemorySegment This, MemorySegment pbindopts) {
        var mh$ = IBindCtx_RemoteSetBindOptions_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindCtx_RemoteSetBindOptions_Proxy", This, pbindopts);
            }
            return (int)mh$.invokeExact(This, pbindopts);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindCtx_RemoteSetBindOptions_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IBindCtx_RemoteSetBindOptions_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IBindCtx_RemoteSetBindOptions_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IBindCtx_RemoteSetBindOptions_Stub$descriptor() {
        return IBindCtx_RemoteSetBindOptions_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IBindCtx_RemoteSetBindOptions_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IBindCtx_RemoteSetBindOptions_Stub$handle() {
        return IBindCtx_RemoteSetBindOptions_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IBindCtx_RemoteSetBindOptions_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IBindCtx_RemoteSetBindOptions_Stub$address() {
        return IBindCtx_RemoteSetBindOptions_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IBindCtx_RemoteSetBindOptions_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IBindCtx_RemoteSetBindOptions_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IBindCtx_RemoteSetBindOptions_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindCtx_RemoteSetBindOptions_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindCtx_RemoteGetBindOptions_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IBindCtx_RemoteGetBindOptions_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_RemoteGetBindOptions_Proxy(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static FunctionDescriptor IBindCtx_RemoteGetBindOptions_Proxy$descriptor() {
        return IBindCtx_RemoteGetBindOptions_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_RemoteGetBindOptions_Proxy(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static MethodHandle IBindCtx_RemoteGetBindOptions_Proxy$handle() {
        return IBindCtx_RemoteGetBindOptions_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_RemoteGetBindOptions_Proxy(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static MemorySegment IBindCtx_RemoteGetBindOptions_Proxy$address() {
        return IBindCtx_RemoteGetBindOptions_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBindCtx_RemoteGetBindOptions_Proxy(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static int IBindCtx_RemoteGetBindOptions_Proxy(MemorySegment This, MemorySegment pbindopts) {
        var mh$ = IBindCtx_RemoteGetBindOptions_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindCtx_RemoteGetBindOptions_Proxy", This, pbindopts);
            }
            return (int)mh$.invokeExact(This, pbindopts);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindCtx_RemoteGetBindOptions_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IBindCtx_RemoteGetBindOptions_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IBindCtx_RemoteGetBindOptions_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IBindCtx_RemoteGetBindOptions_Stub$descriptor() {
        return IBindCtx_RemoteGetBindOptions_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IBindCtx_RemoteGetBindOptions_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IBindCtx_RemoteGetBindOptions_Stub$handle() {
        return IBindCtx_RemoteGetBindOptions_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IBindCtx_RemoteGetBindOptions_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IBindCtx_RemoteGetBindOptions_Stub$address() {
        return IBindCtx_RemoteGetBindOptions_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IBindCtx_RemoteGetBindOptions_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IBindCtx_RemoteGetBindOptions_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IBindCtx_RemoteGetBindOptions_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindCtx_RemoteGetBindOptions_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef IEnumMoniker *LPENUMMONIKER
     * }
     */
    public static final AddressLayout LPENUMMONIKER = wgl_h.C_POINTER;

    private static class IID_IEnumMoniker$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IEnumMoniker").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumMoniker
     * }
     */
    public static GroupLayout IID_IEnumMoniker$layout() {
        return IID_IEnumMoniker$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumMoniker
     * }
     */
    public static MemorySegment IID_IEnumMoniker() {
        return IID_IEnumMoniker$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumMoniker
     * }
     */
    public static void IID_IEnumMoniker(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IEnumMoniker$constants.SEGMENT, 0L, IID_IEnumMoniker$constants.LAYOUT.byteSize());
    }

    private static class IEnumMoniker_RemoteNext_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumMoniker_RemoteNext_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumMoniker_RemoteNext_Proxy(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumMoniker_RemoteNext_Proxy$descriptor() {
        return IEnumMoniker_RemoteNext_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumMoniker_RemoteNext_Proxy(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumMoniker_RemoteNext_Proxy$handle() {
        return IEnumMoniker_RemoteNext_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumMoniker_RemoteNext_Proxy(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumMoniker_RemoteNext_Proxy$address() {
        return IEnumMoniker_RemoteNext_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumMoniker_RemoteNext_Proxy(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumMoniker_RemoteNext_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumMoniker_RemoteNext_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumMoniker_RemoteNext_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumMoniker_RemoteNext_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumMoniker_RemoteNext_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IEnumMoniker_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IEnumMoniker_RemoteNext_Stub$descriptor() {
        return IEnumMoniker_RemoteNext_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IEnumMoniker_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IEnumMoniker_RemoteNext_Stub$handle() {
        return IEnumMoniker_RemoteNext_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IEnumMoniker_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IEnumMoniker_RemoteNext_Stub$address() {
        return IEnumMoniker_RemoteNext_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IEnumMoniker_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IEnumMoniker_RemoteNext_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IEnumMoniker_RemoteNext_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumMoniker_RemoteNext_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0056_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0056_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IRunnableObject *LPRUNNABLEOBJECT
     * }
     */
    public static final AddressLayout LPRUNNABLEOBJECT = wgl_h.C_POINTER;

    private static class IID_IRunnableObject$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IRunnableObject").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRunnableObject
     * }
     */
    public static GroupLayout IID_IRunnableObject$layout() {
        return IID_IRunnableObject$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRunnableObject
     * }
     */
    public static MemorySegment IID_IRunnableObject() {
        return IID_IRunnableObject$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRunnableObject
     * }
     */
    public static void IID_IRunnableObject(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IRunnableObject$constants.SEGMENT, 0L, IID_IRunnableObject$constants.LAYOUT.byteSize());
    }

    private static class IRunnableObject_RemoteIsRunning_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IRunnableObject_RemoteIsRunning_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IRunnableObject_RemoteIsRunning_Proxy(IRunnableObject *This)
     * }
     */
    public static FunctionDescriptor IRunnableObject_RemoteIsRunning_Proxy$descriptor() {
        return IRunnableObject_RemoteIsRunning_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IRunnableObject_RemoteIsRunning_Proxy(IRunnableObject *This)
     * }
     */
    public static MethodHandle IRunnableObject_RemoteIsRunning_Proxy$handle() {
        return IRunnableObject_RemoteIsRunning_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IRunnableObject_RemoteIsRunning_Proxy(IRunnableObject *This)
     * }
     */
    public static MemorySegment IRunnableObject_RemoteIsRunning_Proxy$address() {
        return IRunnableObject_RemoteIsRunning_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IRunnableObject_RemoteIsRunning_Proxy(IRunnableObject *This)
     * }
     */
    public static int IRunnableObject_RemoteIsRunning_Proxy(MemorySegment This) {
        var mh$ = IRunnableObject_RemoteIsRunning_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IRunnableObject_RemoteIsRunning_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IRunnableObject_RemoteIsRunning_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IRunnableObject_RemoteIsRunning_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IRunnableObject_RemoteIsRunning_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IRunnableObject_RemoteIsRunning_Stub$descriptor() {
        return IRunnableObject_RemoteIsRunning_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IRunnableObject_RemoteIsRunning_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IRunnableObject_RemoteIsRunning_Stub$handle() {
        return IRunnableObject_RemoteIsRunning_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IRunnableObject_RemoteIsRunning_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IRunnableObject_RemoteIsRunning_Stub$address() {
        return IRunnableObject_RemoteIsRunning_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IRunnableObject_RemoteIsRunning_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IRunnableObject_RemoteIsRunning_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IRunnableObject_RemoteIsRunning_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IRunnableObject_RemoteIsRunning_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef IRunningObjectTable *LPRUNNINGOBJECTTABLE
     * }
     */
    public static final AddressLayout LPRUNNINGOBJECTTABLE = wgl_h.C_POINTER;

    private static class IID_IRunningObjectTable$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IRunningObjectTable").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRunningObjectTable
     * }
     */
    public static GroupLayout IID_IRunningObjectTable$layout() {
        return IID_IRunningObjectTable$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRunningObjectTable
     * }
     */
    public static MemorySegment IID_IRunningObjectTable() {
        return IID_IRunningObjectTable$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRunningObjectTable
     * }
     */
    public static void IID_IRunningObjectTable(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IRunningObjectTable$constants.SEGMENT, 0L, IID_IRunningObjectTable$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0058_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0058_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IPersist *LPPERSIST
     * }
     */
    public static final AddressLayout LPPERSIST = wgl_h.C_POINTER;

    private static class IID_IPersist$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IPersist").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersist
     * }
     */
    public static GroupLayout IID_IPersist$layout() {
        return IID_IPersist$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersist
     * }
     */
    public static MemorySegment IID_IPersist() {
        return IID_IPersist$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersist
     * }
     */
    public static void IID_IPersist(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IPersist$constants.SEGMENT, 0L, IID_IPersist$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IPersistStream *LPPERSISTSTREAM
     * }
     */
    public static final AddressLayout LPPERSISTSTREAM = wgl_h.C_POINTER;

    private static class IID_IPersistStream$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IPersistStream").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersistStream
     * }
     */
    public static GroupLayout IID_IPersistStream$layout() {
        return IID_IPersistStream$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersistStream
     * }
     */
    public static MemorySegment IID_IPersistStream() {
        return IID_IPersistStream$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersistStream
     * }
     */
    public static void IID_IPersistStream(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IPersistStream$constants.SEGMENT, 0L, IID_IPersistStream$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IMoniker *LPMONIKER
     * }
     */
    public static final AddressLayout LPMONIKER = wgl_h.C_POINTER;
    private static final int MKSYS_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagMKSYS.MKSYS_NONE = 0
     * }
     */
    public static int MKSYS_NONE() {
        return MKSYS_NONE;
    }
    private static final int MKSYS_GENERICCOMPOSITE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagMKSYS.MKSYS_GENERICCOMPOSITE = 1
     * }
     */
    public static int MKSYS_GENERICCOMPOSITE() {
        return MKSYS_GENERICCOMPOSITE;
    }
    private static final int MKSYS_FILEMONIKER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagMKSYS.MKSYS_FILEMONIKER = 2
     * }
     */
    public static int MKSYS_FILEMONIKER() {
        return MKSYS_FILEMONIKER;
    }
    private static final int MKSYS_ANTIMONIKER = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagMKSYS.MKSYS_ANTIMONIKER = 3
     * }
     */
    public static int MKSYS_ANTIMONIKER() {
        return MKSYS_ANTIMONIKER;
    }
    private static final int MKSYS_ITEMMONIKER = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagMKSYS.MKSYS_ITEMMONIKER = 4
     * }
     */
    public static int MKSYS_ITEMMONIKER() {
        return MKSYS_ITEMMONIKER;
    }
    private static final int MKSYS_POINTERMONIKER = (int)5L;
    /**
     * {@snippet lang=c :
     * enum tagMKSYS.MKSYS_POINTERMONIKER = 5
     * }
     */
    public static int MKSYS_POINTERMONIKER() {
        return MKSYS_POINTERMONIKER;
    }
    private static final int MKSYS_CLASSMONIKER = (int)7L;
    /**
     * {@snippet lang=c :
     * enum tagMKSYS.MKSYS_CLASSMONIKER = 7
     * }
     */
    public static int MKSYS_CLASSMONIKER() {
        return MKSYS_CLASSMONIKER;
    }
    private static final int MKSYS_OBJREFMONIKER = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagMKSYS.MKSYS_OBJREFMONIKER = 8
     * }
     */
    public static int MKSYS_OBJREFMONIKER() {
        return MKSYS_OBJREFMONIKER;
    }
    private static final int MKSYS_SESSIONMONIKER = (int)9L;
    /**
     * {@snippet lang=c :
     * enum tagMKSYS.MKSYS_SESSIONMONIKER = 9
     * }
     */
    public static int MKSYS_SESSIONMONIKER() {
        return MKSYS_SESSIONMONIKER;
    }
    private static final int MKSYS_LUAMONIKER = (int)10L;
    /**
     * {@snippet lang=c :
     * enum tagMKSYS.MKSYS_LUAMONIKER = 10
     * }
     */
    public static int MKSYS_LUAMONIKER() {
        return MKSYS_LUAMONIKER;
    }
    private static final int MKRREDUCE_ONE = (int)196608L;
    /**
     * {@snippet lang=c :
     * enum tagMKREDUCE.MKRREDUCE_ONE = 196608
     * }
     */
    public static int MKRREDUCE_ONE() {
        return MKRREDUCE_ONE;
    }
    private static final int MKRREDUCE_TOUSER = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum tagMKREDUCE.MKRREDUCE_TOUSER = 131072
     * }
     */
    public static int MKRREDUCE_TOUSER() {
        return MKRREDUCE_TOUSER;
    }
    private static final int MKRREDUCE_THROUGHUSER = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum tagMKREDUCE.MKRREDUCE_THROUGHUSER = 65536
     * }
     */
    public static int MKRREDUCE_THROUGHUSER() {
        return MKRREDUCE_THROUGHUSER;
    }
    private static final int MKRREDUCE_ALL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagMKREDUCE.MKRREDUCE_ALL = 0
     * }
     */
    public static int MKRREDUCE_ALL() {
        return MKRREDUCE_ALL;
    }

    private static class IID_IMoniker$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IMoniker").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMoniker
     * }
     */
    public static GroupLayout IID_IMoniker$layout() {
        return IID_IMoniker$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMoniker
     * }
     */
    public static MemorySegment IID_IMoniker() {
        return IID_IMoniker$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMoniker
     * }
     */
    public static void IID_IMoniker(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IMoniker$constants.SEGMENT, 0L, IID_IMoniker$constants.LAYOUT.byteSize());
    }

    private static class IMoniker_RemoteBindToObject_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IMoniker_RemoteBindToObject_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IMoniker_RemoteBindToObject_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riidResult, IUnknown **ppvResult)
     * }
     */
    public static FunctionDescriptor IMoniker_RemoteBindToObject_Proxy$descriptor() {
        return IMoniker_RemoteBindToObject_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IMoniker_RemoteBindToObject_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riidResult, IUnknown **ppvResult)
     * }
     */
    public static MethodHandle IMoniker_RemoteBindToObject_Proxy$handle() {
        return IMoniker_RemoteBindToObject_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IMoniker_RemoteBindToObject_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riidResult, IUnknown **ppvResult)
     * }
     */
    public static MemorySegment IMoniker_RemoteBindToObject_Proxy$address() {
        return IMoniker_RemoteBindToObject_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IMoniker_RemoteBindToObject_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riidResult, IUnknown **ppvResult)
     * }
     */
    public static int IMoniker_RemoteBindToObject_Proxy(MemorySegment This, MemorySegment pbc, MemorySegment pmkToLeft, MemorySegment riidResult, MemorySegment ppvResult) {
        var mh$ = IMoniker_RemoteBindToObject_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IMoniker_RemoteBindToObject_Proxy", This, pbc, pmkToLeft, riidResult, ppvResult);
            }
            return (int)mh$.invokeExact(This, pbc, pmkToLeft, riidResult, ppvResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IMoniker_RemoteBindToObject_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IMoniker_RemoteBindToObject_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IMoniker_RemoteBindToObject_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IMoniker_RemoteBindToObject_Stub$descriptor() {
        return IMoniker_RemoteBindToObject_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IMoniker_RemoteBindToObject_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IMoniker_RemoteBindToObject_Stub$handle() {
        return IMoniker_RemoteBindToObject_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IMoniker_RemoteBindToObject_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IMoniker_RemoteBindToObject_Stub$address() {
        return IMoniker_RemoteBindToObject_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IMoniker_RemoteBindToObject_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IMoniker_RemoteBindToObject_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IMoniker_RemoteBindToObject_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IMoniker_RemoteBindToObject_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IMoniker_RemoteBindToStorage_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IMoniker_RemoteBindToStorage_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IMoniker_RemoteBindToStorage_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static FunctionDescriptor IMoniker_RemoteBindToStorage_Proxy$descriptor() {
        return IMoniker_RemoteBindToStorage_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IMoniker_RemoteBindToStorage_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static MethodHandle IMoniker_RemoteBindToStorage_Proxy$handle() {
        return IMoniker_RemoteBindToStorage_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IMoniker_RemoteBindToStorage_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static MemorySegment IMoniker_RemoteBindToStorage_Proxy$address() {
        return IMoniker_RemoteBindToStorage_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IMoniker_RemoteBindToStorage_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static int IMoniker_RemoteBindToStorage_Proxy(MemorySegment This, MemorySegment pbc, MemorySegment pmkToLeft, MemorySegment riid, MemorySegment ppvObj) {
        var mh$ = IMoniker_RemoteBindToStorage_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IMoniker_RemoteBindToStorage_Proxy", This, pbc, pmkToLeft, riid, ppvObj);
            }
            return (int)mh$.invokeExact(This, pbc, pmkToLeft, riid, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IMoniker_RemoteBindToStorage_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IMoniker_RemoteBindToStorage_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IMoniker_RemoteBindToStorage_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IMoniker_RemoteBindToStorage_Stub$descriptor() {
        return IMoniker_RemoteBindToStorage_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IMoniker_RemoteBindToStorage_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IMoniker_RemoteBindToStorage_Stub$handle() {
        return IMoniker_RemoteBindToStorage_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IMoniker_RemoteBindToStorage_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IMoniker_RemoteBindToStorage_Stub$address() {
        return IMoniker_RemoteBindToStorage_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IMoniker_RemoteBindToStorage_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IMoniker_RemoteBindToStorage_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IMoniker_RemoteBindToStorage_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IMoniker_RemoteBindToStorage_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_objidl_0000_0061_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0061_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0061_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0061_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0061_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0061_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0061_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0061_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0061_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0061_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0061_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0061_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0061_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0061_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0061_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0061_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0061_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0061_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0061_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0061_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0061_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0061_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0061_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0061_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0061_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0061_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0061_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0061_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0061_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0061_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0061_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0061_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IROTData$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IROTData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IROTData
     * }
     */
    public static GroupLayout IID_IROTData$layout() {
        return IID_IROTData$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IROTData
     * }
     */
    public static MemorySegment IID_IROTData() {
        return IID_IROTData$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IROTData
     * }
     */
    public static void IID_IROTData(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IROTData$constants.SEGMENT, 0L, IID_IROTData$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0062_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0062_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0062_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0062_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0062_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0062_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0062_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0062_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0062_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0062_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0062_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0062_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0062_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0062_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0062_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0062_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0062_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0062_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0062_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0062_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0062_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0062_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0062_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0062_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0062_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0062_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0062_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0062_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0062_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0062_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0062_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0062_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IEnumSTATSTG *LPENUMSTATSTG
     * }
     */
    public static final AddressLayout LPENUMSTATSTG = wgl_h.C_POINTER;

    private static class IID_IEnumSTATSTG$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IEnumSTATSTG").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumSTATSTG
     * }
     */
    public static GroupLayout IID_IEnumSTATSTG$layout() {
        return IID_IEnumSTATSTG$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumSTATSTG
     * }
     */
    public static MemorySegment IID_IEnumSTATSTG() {
        return IID_IEnumSTATSTG$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumSTATSTG
     * }
     */
    public static void IID_IEnumSTATSTG(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IEnumSTATSTG$constants.SEGMENT, 0L, IID_IEnumSTATSTG$constants.LAYOUT.byteSize());
    }

    private static class IEnumSTATSTG_RemoteNext_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumSTATSTG_RemoteNext_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATSTG_RemoteNext_Proxy(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumSTATSTG_RemoteNext_Proxy$descriptor() {
        return IEnumSTATSTG_RemoteNext_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATSTG_RemoteNext_Proxy(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumSTATSTG_RemoteNext_Proxy$handle() {
        return IEnumSTATSTG_RemoteNext_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATSTG_RemoteNext_Proxy(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumSTATSTG_RemoteNext_Proxy$address() {
        return IEnumSTATSTG_RemoteNext_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumSTATSTG_RemoteNext_Proxy(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumSTATSTG_RemoteNext_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumSTATSTG_RemoteNext_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATSTG_RemoteNext_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumSTATSTG_RemoteNext_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumSTATSTG_RemoteNext_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IEnumSTATSTG_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IEnumSTATSTG_RemoteNext_Stub$descriptor() {
        return IEnumSTATSTG_RemoteNext_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IEnumSTATSTG_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IEnumSTATSTG_RemoteNext_Stub$handle() {
        return IEnumSTATSTG_RemoteNext_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IEnumSTATSTG_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IEnumSTATSTG_RemoteNext_Stub$address() {
        return IEnumSTATSTG_RemoteNext_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IEnumSTATSTG_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IEnumSTATSTG_RemoteNext_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IEnumSTATSTG_RemoteNext_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATSTG_RemoteNext_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef IStorage *LPSTORAGE
     * }
     */
    public static final AddressLayout LPSTORAGE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef RemSNB *wireSNB
     * }
     */
    public static final AddressLayout wireSNB = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPOLESTR *SNB
     * }
     */
    public static final AddressLayout SNB = wgl_h.C_POINTER;

    private static class IID_IStorage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IStorage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IStorage
     * }
     */
    public static GroupLayout IID_IStorage$layout() {
        return IID_IStorage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IStorage
     * }
     */
    public static MemorySegment IID_IStorage() {
        return IID_IStorage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IStorage
     * }
     */
    public static void IID_IStorage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IStorage$constants.SEGMENT, 0L, IID_IStorage$constants.LAYOUT.byteSize());
    }

    private static class IStorage_RemoteOpenStream_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IStorage_RemoteOpenStream_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStorage_RemoteOpenStream_Proxy(IStorage *This, const OLECHAR *pwcsName, ULONG cbReserved1, byte *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm)
     * }
     */
    public static FunctionDescriptor IStorage_RemoteOpenStream_Proxy$descriptor() {
        return IStorage_RemoteOpenStream_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStorage_RemoteOpenStream_Proxy(IStorage *This, const OLECHAR *pwcsName, ULONG cbReserved1, byte *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm)
     * }
     */
    public static MethodHandle IStorage_RemoteOpenStream_Proxy$handle() {
        return IStorage_RemoteOpenStream_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IStorage_RemoteOpenStream_Proxy(IStorage *This, const OLECHAR *pwcsName, ULONG cbReserved1, byte *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm)
     * }
     */
    public static MemorySegment IStorage_RemoteOpenStream_Proxy$address() {
        return IStorage_RemoteOpenStream_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IStorage_RemoteOpenStream_Proxy(IStorage *This, const OLECHAR *pwcsName, ULONG cbReserved1, byte *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm)
     * }
     */
    public static int IStorage_RemoteOpenStream_Proxy(MemorySegment This, MemorySegment pwcsName, int cbReserved1, MemorySegment reserved1, int grfMode, int reserved2, MemorySegment ppstm) {
        var mh$ = IStorage_RemoteOpenStream_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStorage_RemoteOpenStream_Proxy", This, pwcsName, cbReserved1, reserved1, grfMode, reserved2, ppstm);
            }
            return (int)mh$.invokeExact(This, pwcsName, cbReserved1, reserved1, grfMode, reserved2, ppstm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStorage_RemoteOpenStream_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IStorage_RemoteOpenStream_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IStorage_RemoteOpenStream_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IStorage_RemoteOpenStream_Stub$descriptor() {
        return IStorage_RemoteOpenStream_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IStorage_RemoteOpenStream_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IStorage_RemoteOpenStream_Stub$handle() {
        return IStorage_RemoteOpenStream_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IStorage_RemoteOpenStream_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IStorage_RemoteOpenStream_Stub$address() {
        return IStorage_RemoteOpenStream_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IStorage_RemoteOpenStream_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IStorage_RemoteOpenStream_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IStorage_RemoteOpenStream_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStorage_RemoteOpenStream_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStorage_RemoteCopyTo_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IStorage_RemoteCopyTo_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStorage_RemoteCopyTo_Proxy(IStorage *This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest)
     * }
     */
    public static FunctionDescriptor IStorage_RemoteCopyTo_Proxy$descriptor() {
        return IStorage_RemoteCopyTo_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStorage_RemoteCopyTo_Proxy(IStorage *This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest)
     * }
     */
    public static MethodHandle IStorage_RemoteCopyTo_Proxy$handle() {
        return IStorage_RemoteCopyTo_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IStorage_RemoteCopyTo_Proxy(IStorage *This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest)
     * }
     */
    public static MemorySegment IStorage_RemoteCopyTo_Proxy$address() {
        return IStorage_RemoteCopyTo_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IStorage_RemoteCopyTo_Proxy(IStorage *This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest)
     * }
     */
    public static int IStorage_RemoteCopyTo_Proxy(MemorySegment This, int ciidExclude, MemorySegment rgiidExclude, MemorySegment snbExclude, MemorySegment pstgDest) {
        var mh$ = IStorage_RemoteCopyTo_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStorage_RemoteCopyTo_Proxy", This, ciidExclude, rgiidExclude, snbExclude, pstgDest);
            }
            return (int)mh$.invokeExact(This, ciidExclude, rgiidExclude, snbExclude, pstgDest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStorage_RemoteCopyTo_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IStorage_RemoteCopyTo_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IStorage_RemoteCopyTo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IStorage_RemoteCopyTo_Stub$descriptor() {
        return IStorage_RemoteCopyTo_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IStorage_RemoteCopyTo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IStorage_RemoteCopyTo_Stub$handle() {
        return IStorage_RemoteCopyTo_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IStorage_RemoteCopyTo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IStorage_RemoteCopyTo_Stub$address() {
        return IStorage_RemoteCopyTo_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IStorage_RemoteCopyTo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IStorage_RemoteCopyTo_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IStorage_RemoteCopyTo_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStorage_RemoteCopyTo_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStorage_RemoteEnumElements_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IStorage_RemoteEnumElements_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStorage_RemoteEnumElements_Proxy(IStorage *This, DWORD reserved1, ULONG cbReserved2, byte *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum)
     * }
     */
    public static FunctionDescriptor IStorage_RemoteEnumElements_Proxy$descriptor() {
        return IStorage_RemoteEnumElements_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStorage_RemoteEnumElements_Proxy(IStorage *This, DWORD reserved1, ULONG cbReserved2, byte *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum)
     * }
     */
    public static MethodHandle IStorage_RemoteEnumElements_Proxy$handle() {
        return IStorage_RemoteEnumElements_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IStorage_RemoteEnumElements_Proxy(IStorage *This, DWORD reserved1, ULONG cbReserved2, byte *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum)
     * }
     */
    public static MemorySegment IStorage_RemoteEnumElements_Proxy$address() {
        return IStorage_RemoteEnumElements_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IStorage_RemoteEnumElements_Proxy(IStorage *This, DWORD reserved1, ULONG cbReserved2, byte *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum)
     * }
     */
    public static int IStorage_RemoteEnumElements_Proxy(MemorySegment This, int reserved1, int cbReserved2, MemorySegment reserved2, int reserved3, MemorySegment ppenum) {
        var mh$ = IStorage_RemoteEnumElements_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStorage_RemoteEnumElements_Proxy", This, reserved1, cbReserved2, reserved2, reserved3, ppenum);
            }
            return (int)mh$.invokeExact(This, reserved1, cbReserved2, reserved2, reserved3, ppenum);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStorage_RemoteEnumElements_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IStorage_RemoteEnumElements_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IStorage_RemoteEnumElements_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IStorage_RemoteEnumElements_Stub$descriptor() {
        return IStorage_RemoteEnumElements_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IStorage_RemoteEnumElements_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IStorage_RemoteEnumElements_Stub$handle() {
        return IStorage_RemoteEnumElements_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IStorage_RemoteEnumElements_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IStorage_RemoteEnumElements_Stub$address() {
        return IStorage_RemoteEnumElements_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IStorage_RemoteEnumElements_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IStorage_RemoteEnumElements_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IStorage_RemoteEnumElements_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStorage_RemoteEnumElements_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0064_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0064_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0064_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0064_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0064_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0064_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IPersistFile *LPPERSISTFILE
     * }
     */
    public static final AddressLayout LPPERSISTFILE = wgl_h.C_POINTER;

    private static class IID_IPersistFile$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IPersistFile").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersistFile
     * }
     */
    public static GroupLayout IID_IPersistFile$layout() {
        return IID_IPersistFile$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersistFile
     * }
     */
    public static MemorySegment IID_IPersistFile() {
        return IID_IPersistFile$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersistFile
     * }
     */
    public static void IID_IPersistFile(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IPersistFile$constants.SEGMENT, 0L, IID_IPersistFile$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IPersistStorage *LPPERSISTSTORAGE
     * }
     */
    public static final AddressLayout LPPERSISTSTORAGE = wgl_h.C_POINTER;

    private static class IID_IPersistStorage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IPersistStorage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersistStorage
     * }
     */
    public static GroupLayout IID_IPersistStorage$layout() {
        return IID_IPersistStorage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersistStorage
     * }
     */
    public static MemorySegment IID_IPersistStorage() {
        return IID_IPersistStorage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersistStorage
     * }
     */
    public static void IID_IPersistStorage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IPersistStorage$constants.SEGMENT, 0L, IID_IPersistStorage$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0066_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0066_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0066_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0066_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0066_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0066_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef ILockBytes *LPLOCKBYTES
     * }
     */
    public static final AddressLayout LPLOCKBYTES = wgl_h.C_POINTER;

    private static class IID_ILockBytes$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_ILockBytes").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ILockBytes
     * }
     */
    public static GroupLayout IID_ILockBytes$layout() {
        return IID_ILockBytes$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ILockBytes
     * }
     */
    public static MemorySegment IID_ILockBytes() {
        return IID_ILockBytes$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ILockBytes
     * }
     */
    public static void IID_ILockBytes(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ILockBytes$constants.SEGMENT, 0L, IID_ILockBytes$constants.LAYOUT.byteSize());
    }

    private static class ILockBytes_RemoteReadAt_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            _ULARGE_INTEGER.layout(),
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ILockBytes_RemoteReadAt_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_RemoteReadAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static FunctionDescriptor ILockBytes_RemoteReadAt_Proxy$descriptor() {
        return ILockBytes_RemoteReadAt_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_RemoteReadAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static MethodHandle ILockBytes_RemoteReadAt_Proxy$handle() {
        return ILockBytes_RemoteReadAt_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_RemoteReadAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static MemorySegment ILockBytes_RemoteReadAt_Proxy$address() {
        return ILockBytes_RemoteReadAt_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ILockBytes_RemoteReadAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static int ILockBytes_RemoteReadAt_Proxy(MemorySegment This, MemorySegment ulOffset, MemorySegment pv, int cb, MemorySegment pcbRead) {
        var mh$ = ILockBytes_RemoteReadAt_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ILockBytes_RemoteReadAt_Proxy", This, ulOffset, pv, cb, pcbRead);
            }
            return (int)mh$.invokeExact(This, ulOffset, pv, cb, pcbRead);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ILockBytes_RemoteReadAt_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ILockBytes_RemoteReadAt_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ILockBytes_RemoteReadAt_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ILockBytes_RemoteReadAt_Stub$descriptor() {
        return ILockBytes_RemoteReadAt_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ILockBytes_RemoteReadAt_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ILockBytes_RemoteReadAt_Stub$handle() {
        return ILockBytes_RemoteReadAt_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ILockBytes_RemoteReadAt_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment ILockBytes_RemoteReadAt_Stub$address() {
        return ILockBytes_RemoteReadAt_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ILockBytes_RemoteReadAt_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ILockBytes_RemoteReadAt_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ILockBytes_RemoteReadAt_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ILockBytes_RemoteReadAt_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ILockBytes_RemoteWriteAt_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            _ULARGE_INTEGER.layout(),
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ILockBytes_RemoteWriteAt_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_RemoteWriteAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static FunctionDescriptor ILockBytes_RemoteWriteAt_Proxy$descriptor() {
        return ILockBytes_RemoteWriteAt_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_RemoteWriteAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MethodHandle ILockBytes_RemoteWriteAt_Proxy$handle() {
        return ILockBytes_RemoteWriteAt_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_RemoteWriteAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MemorySegment ILockBytes_RemoteWriteAt_Proxy$address() {
        return ILockBytes_RemoteWriteAt_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ILockBytes_RemoteWriteAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static int ILockBytes_RemoteWriteAt_Proxy(MemorySegment This, MemorySegment ulOffset, MemorySegment pv, int cb, MemorySegment pcbWritten) {
        var mh$ = ILockBytes_RemoteWriteAt_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ILockBytes_RemoteWriteAt_Proxy", This, ulOffset, pv, cb, pcbWritten);
            }
            return (int)mh$.invokeExact(This, ulOffset, pv, cb, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ILockBytes_RemoteWriteAt_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ILockBytes_RemoteWriteAt_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ILockBytes_RemoteWriteAt_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ILockBytes_RemoteWriteAt_Stub$descriptor() {
        return ILockBytes_RemoteWriteAt_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ILockBytes_RemoteWriteAt_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ILockBytes_RemoteWriteAt_Stub$handle() {
        return ILockBytes_RemoteWriteAt_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ILockBytes_RemoteWriteAt_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment ILockBytes_RemoteWriteAt_Stub$address() {
        return ILockBytes_RemoteWriteAt_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ILockBytes_RemoteWriteAt_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ILockBytes_RemoteWriteAt_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ILockBytes_RemoteWriteAt_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ILockBytes_RemoteWriteAt_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef IEnumFORMATETC *LPENUMFORMATETC
     * }
     */
    public static final AddressLayout LPENUMFORMATETC = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef CLIPFORMAT *LPCLIPFORMAT
     * }
     */
    public static final AddressLayout LPCLIPFORMAT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagFORMATETC {
     *     CLIPFORMAT cfFormat;
     *     DVTARGETDEVICE *ptd;
     *     DWORD dwAspect;
     *     LONG lindex;
     *     DWORD tymed;
     * } *LPFORMATETC
     * }
     */
    public static final AddressLayout LPFORMATETC = wgl_h.C_POINTER;

    private static class IID_IEnumFORMATETC$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IEnumFORMATETC").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumFORMATETC
     * }
     */
    public static GroupLayout IID_IEnumFORMATETC$layout() {
        return IID_IEnumFORMATETC$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumFORMATETC
     * }
     */
    public static MemorySegment IID_IEnumFORMATETC() {
        return IID_IEnumFORMATETC$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumFORMATETC
     * }
     */
    public static void IID_IEnumFORMATETC(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IEnumFORMATETC$constants.SEGMENT, 0L, IID_IEnumFORMATETC$constants.LAYOUT.byteSize());
    }

    private static class IEnumFORMATETC_RemoteNext_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumFORMATETC_RemoteNext_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumFORMATETC_RemoteNext_Proxy(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumFORMATETC_RemoteNext_Proxy$descriptor() {
        return IEnumFORMATETC_RemoteNext_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumFORMATETC_RemoteNext_Proxy(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumFORMATETC_RemoteNext_Proxy$handle() {
        return IEnumFORMATETC_RemoteNext_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumFORMATETC_RemoteNext_Proxy(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumFORMATETC_RemoteNext_Proxy$address() {
        return IEnumFORMATETC_RemoteNext_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumFORMATETC_RemoteNext_Proxy(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumFORMATETC_RemoteNext_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumFORMATETC_RemoteNext_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumFORMATETC_RemoteNext_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumFORMATETC_RemoteNext_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumFORMATETC_RemoteNext_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IEnumFORMATETC_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IEnumFORMATETC_RemoteNext_Stub$descriptor() {
        return IEnumFORMATETC_RemoteNext_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IEnumFORMATETC_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IEnumFORMATETC_RemoteNext_Stub$handle() {
        return IEnumFORMATETC_RemoteNext_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IEnumFORMATETC_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IEnumFORMATETC_RemoteNext_Stub$address() {
        return IEnumFORMATETC_RemoteNext_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IEnumFORMATETC_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IEnumFORMATETC_RemoteNext_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IEnumFORMATETC_RemoteNext_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumFORMATETC_RemoteNext_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef IEnumSTATDATA *LPENUMSTATDATA
     * }
     */
    public static final AddressLayout LPENUMSTATDATA = wgl_h.C_POINTER;
    private static final int ADVF_NODATA = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagADVF.ADVF_NODATA = 1
     * }
     */
    public static int ADVF_NODATA() {
        return ADVF_NODATA;
    }
    private static final int ADVF_PRIMEFIRST = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagADVF.ADVF_PRIMEFIRST = 2
     * }
     */
    public static int ADVF_PRIMEFIRST() {
        return ADVF_PRIMEFIRST;
    }
    private static final int ADVF_ONLYONCE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagADVF.ADVF_ONLYONCE = 4
     * }
     */
    public static int ADVF_ONLYONCE() {
        return ADVF_ONLYONCE;
    }
    private static final int ADVF_DATAONSTOP = (int)64L;
    /**
     * {@snippet lang=c :
     * enum tagADVF.ADVF_DATAONSTOP = 64
     * }
     */
    public static int ADVF_DATAONSTOP() {
        return ADVF_DATAONSTOP;
    }
    private static final int ADVFCACHE_NOHANDLER = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagADVF.ADVFCACHE_NOHANDLER = 8
     * }
     */
    public static int ADVFCACHE_NOHANDLER() {
        return ADVFCACHE_NOHANDLER;
    }
    private static final int ADVFCACHE_FORCEBUILTIN = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagADVF.ADVFCACHE_FORCEBUILTIN = 16
     * }
     */
    public static int ADVFCACHE_FORCEBUILTIN() {
        return ADVFCACHE_FORCEBUILTIN;
    }
    private static final int ADVFCACHE_ONSAVE = (int)32L;
    /**
     * {@snippet lang=c :
     * enum tagADVF.ADVFCACHE_ONSAVE = 32
     * }
     */
    public static int ADVFCACHE_ONSAVE() {
        return ADVFCACHE_ONSAVE;
    }
    /**
     * {@snippet lang=c :
     * typedef STATDATA *LPSTATDATA
     * }
     */
    public static final AddressLayout LPSTATDATA = wgl_h.C_POINTER;

    private static class IID_IEnumSTATDATA$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IEnumSTATDATA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumSTATDATA
     * }
     */
    public static GroupLayout IID_IEnumSTATDATA$layout() {
        return IID_IEnumSTATDATA$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumSTATDATA
     * }
     */
    public static MemorySegment IID_IEnumSTATDATA() {
        return IID_IEnumSTATDATA$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumSTATDATA
     * }
     */
    public static void IID_IEnumSTATDATA(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IEnumSTATDATA$constants.SEGMENT, 0L, IID_IEnumSTATDATA$constants.LAYOUT.byteSize());
    }

    private static class IEnumSTATDATA_RemoteNext_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumSTATDATA_RemoteNext_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATDATA_RemoteNext_Proxy(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumSTATDATA_RemoteNext_Proxy$descriptor() {
        return IEnumSTATDATA_RemoteNext_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATDATA_RemoteNext_Proxy(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumSTATDATA_RemoteNext_Proxy$handle() {
        return IEnumSTATDATA_RemoteNext_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATDATA_RemoteNext_Proxy(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumSTATDATA_RemoteNext_Proxy$address() {
        return IEnumSTATDATA_RemoteNext_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumSTATDATA_RemoteNext_Proxy(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumSTATDATA_RemoteNext_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumSTATDATA_RemoteNext_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATDATA_RemoteNext_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumSTATDATA_RemoteNext_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumSTATDATA_RemoteNext_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IEnumSTATDATA_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IEnumSTATDATA_RemoteNext_Stub$descriptor() {
        return IEnumSTATDATA_RemoteNext_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IEnumSTATDATA_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IEnumSTATDATA_RemoteNext_Stub$handle() {
        return IEnumSTATDATA_RemoteNext_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IEnumSTATDATA_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IEnumSTATDATA_RemoteNext_Stub$address() {
        return IEnumSTATDATA_RemoteNext_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IEnumSTATDATA_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IEnumSTATDATA_RemoteNext_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IEnumSTATDATA_RemoteNext_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATDATA_RemoteNext_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef IRootStorage *LPROOTSTORAGE
     * }
     */
    public static final AddressLayout LPROOTSTORAGE = wgl_h.C_POINTER;

    private static class IID_IRootStorage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IRootStorage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRootStorage
     * }
     */
    public static GroupLayout IID_IRootStorage$layout() {
        return IID_IRootStorage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRootStorage
     * }
     */
    public static MemorySegment IID_IRootStorage() {
        return IID_IRootStorage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRootStorage
     * }
     */
    public static void IID_IRootStorage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IRootStorage$constants.SEGMENT, 0L, IID_IRootStorage$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IAdviseSink *LPADVISESINK
     * }
     */
    public static final AddressLayout LPADVISESINK = wgl_h.C_POINTER;
    private static final int TYMED_HGLOBAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagTYMED.TYMED_HGLOBAL = 1
     * }
     */
    public static int TYMED_HGLOBAL() {
        return TYMED_HGLOBAL;
    }
    private static final int TYMED_FILE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagTYMED.TYMED_FILE = 2
     * }
     */
    public static int TYMED_FILE() {
        return TYMED_FILE;
    }
    private static final int TYMED_ISTREAM = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagTYMED.TYMED_ISTREAM = 4
     * }
     */
    public static int TYMED_ISTREAM() {
        return TYMED_ISTREAM;
    }
    private static final int TYMED_ISTORAGE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagTYMED.TYMED_ISTORAGE = 8
     * }
     */
    public static int TYMED_ISTORAGE() {
        return TYMED_ISTORAGE;
    }
    private static final int TYMED_GDI = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagTYMED.TYMED_GDI = 16
     * }
     */
    public static int TYMED_GDI() {
        return TYMED_GDI;
    }
    private static final int TYMED_MFPICT = (int)32L;
    /**
     * {@snippet lang=c :
     * enum tagTYMED.TYMED_MFPICT = 32
     * }
     */
    public static int TYMED_MFPICT() {
        return TYMED_MFPICT;
    }
    private static final int TYMED_ENHMF = (int)64L;
    /**
     * {@snippet lang=c :
     * enum tagTYMED.TYMED_ENHMF = 64
     * }
     */
    public static int TYMED_ENHMF() {
        return TYMED_ENHMF;
    }
    private static final int TYMED_NULL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagTYMED.TYMED_NULL = 0
     * }
     */
    public static int TYMED_NULL() {
        return TYMED_NULL;
    }
    /**
     * {@snippet lang=c :
     * typedef userSTGMEDIUM *wireSTGMEDIUM
     * }
     */
    public static final AddressLayout wireSTGMEDIUM = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef userSTGMEDIUM *wireASYNC_STGMEDIUM
     * }
     */
    public static final AddressLayout wireASYNC_STGMEDIUM = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef STGMEDIUM *LPSTGMEDIUM
     * }
     */
    public static final AddressLayout LPSTGMEDIUM = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef userFLAG_STGMEDIUM *wireFLAG_STGMEDIUM
     * }
     */
    public static final AddressLayout wireFLAG_STGMEDIUM = wgl_h.C_POINTER;

    private static class IID_IAdviseSink$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IAdviseSink").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAdviseSink
     * }
     */
    public static GroupLayout IID_IAdviseSink$layout() {
        return IID_IAdviseSink$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAdviseSink
     * }
     */
    public static MemorySegment IID_IAdviseSink() {
        return IID_IAdviseSink$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAdviseSink
     * }
     */
    public static void IID_IAdviseSink(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IAdviseSink$constants.SEGMENT, 0L, IID_IAdviseSink$constants.LAYOUT.byteSize());
    }

    private static class IAdviseSink_RemoteOnDataChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IAdviseSink_RemoteOnDataChange_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnDataChange_Proxy(IAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static FunctionDescriptor IAdviseSink_RemoteOnDataChange_Proxy$descriptor() {
        return IAdviseSink_RemoteOnDataChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnDataChange_Proxy(IAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static MethodHandle IAdviseSink_RemoteOnDataChange_Proxy$handle() {
        return IAdviseSink_RemoteOnDataChange_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnDataChange_Proxy(IAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static MemorySegment IAdviseSink_RemoteOnDataChange_Proxy$address() {
        return IAdviseSink_RemoteOnDataChange_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnDataChange_Proxy(IAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static int IAdviseSink_RemoteOnDataChange_Proxy(MemorySegment This, MemorySegment pFormatetc, MemorySegment pStgmed) {
        var mh$ = IAdviseSink_RemoteOnDataChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_RemoteOnDataChange_Proxy", This, pFormatetc, pStgmed);
            }
            return (int)mh$.invokeExact(This, pFormatetc, pStgmed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_RemoteOnDataChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IAdviseSink_RemoteOnDataChange_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnDataChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IAdviseSink_RemoteOnDataChange_Stub$descriptor() {
        return IAdviseSink_RemoteOnDataChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnDataChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IAdviseSink_RemoteOnDataChange_Stub$handle() {
        return IAdviseSink_RemoteOnDataChange_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnDataChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IAdviseSink_RemoteOnDataChange_Stub$address() {
        return IAdviseSink_RemoteOnDataChange_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnDataChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IAdviseSink_RemoteOnDataChange_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IAdviseSink_RemoteOnDataChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_RemoteOnDataChange_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_RemoteOnViewChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IAdviseSink_RemoteOnViewChange_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnViewChange_Proxy(IAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static FunctionDescriptor IAdviseSink_RemoteOnViewChange_Proxy$descriptor() {
        return IAdviseSink_RemoteOnViewChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnViewChange_Proxy(IAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static MethodHandle IAdviseSink_RemoteOnViewChange_Proxy$handle() {
        return IAdviseSink_RemoteOnViewChange_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnViewChange_Proxy(IAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static MemorySegment IAdviseSink_RemoteOnViewChange_Proxy$address() {
        return IAdviseSink_RemoteOnViewChange_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnViewChange_Proxy(IAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static int IAdviseSink_RemoteOnViewChange_Proxy(MemorySegment This, int dwAspect, int lindex) {
        var mh$ = IAdviseSink_RemoteOnViewChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_RemoteOnViewChange_Proxy", This, dwAspect, lindex);
            }
            return (int)mh$.invokeExact(This, dwAspect, lindex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_RemoteOnViewChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IAdviseSink_RemoteOnViewChange_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnViewChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IAdviseSink_RemoteOnViewChange_Stub$descriptor() {
        return IAdviseSink_RemoteOnViewChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnViewChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IAdviseSink_RemoteOnViewChange_Stub$handle() {
        return IAdviseSink_RemoteOnViewChange_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnViewChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IAdviseSink_RemoteOnViewChange_Stub$address() {
        return IAdviseSink_RemoteOnViewChange_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnViewChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IAdviseSink_RemoteOnViewChange_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IAdviseSink_RemoteOnViewChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_RemoteOnViewChange_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_RemoteOnRename_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IAdviseSink_RemoteOnRename_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnRename_Proxy(IAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor IAdviseSink_RemoteOnRename_Proxy$descriptor() {
        return IAdviseSink_RemoteOnRename_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnRename_Proxy(IAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static MethodHandle IAdviseSink_RemoteOnRename_Proxy$handle() {
        return IAdviseSink_RemoteOnRename_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnRename_Proxy(IAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static MemorySegment IAdviseSink_RemoteOnRename_Proxy$address() {
        return IAdviseSink_RemoteOnRename_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnRename_Proxy(IAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static int IAdviseSink_RemoteOnRename_Proxy(MemorySegment This, MemorySegment pmk) {
        var mh$ = IAdviseSink_RemoteOnRename_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_RemoteOnRename_Proxy", This, pmk);
            }
            return (int)mh$.invokeExact(This, pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_RemoteOnRename_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IAdviseSink_RemoteOnRename_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnRename_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IAdviseSink_RemoteOnRename_Stub$descriptor() {
        return IAdviseSink_RemoteOnRename_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnRename_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IAdviseSink_RemoteOnRename_Stub$handle() {
        return IAdviseSink_RemoteOnRename_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnRename_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IAdviseSink_RemoteOnRename_Stub$address() {
        return IAdviseSink_RemoteOnRename_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnRename_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IAdviseSink_RemoteOnRename_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IAdviseSink_RemoteOnRename_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_RemoteOnRename_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_RemoteOnSave_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IAdviseSink_RemoteOnSave_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnSave_Proxy(IAdviseSink *This)
     * }
     */
    public static FunctionDescriptor IAdviseSink_RemoteOnSave_Proxy$descriptor() {
        return IAdviseSink_RemoteOnSave_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnSave_Proxy(IAdviseSink *This)
     * }
     */
    public static MethodHandle IAdviseSink_RemoteOnSave_Proxy$handle() {
        return IAdviseSink_RemoteOnSave_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnSave_Proxy(IAdviseSink *This)
     * }
     */
    public static MemorySegment IAdviseSink_RemoteOnSave_Proxy$address() {
        return IAdviseSink_RemoteOnSave_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnSave_Proxy(IAdviseSink *This)
     * }
     */
    public static int IAdviseSink_RemoteOnSave_Proxy(MemorySegment This) {
        var mh$ = IAdviseSink_RemoteOnSave_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_RemoteOnSave_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_RemoteOnSave_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IAdviseSink_RemoteOnSave_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnSave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IAdviseSink_RemoteOnSave_Stub$descriptor() {
        return IAdviseSink_RemoteOnSave_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnSave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IAdviseSink_RemoteOnSave_Stub$handle() {
        return IAdviseSink_RemoteOnSave_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnSave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IAdviseSink_RemoteOnSave_Stub$address() {
        return IAdviseSink_RemoteOnSave_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnSave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IAdviseSink_RemoteOnSave_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IAdviseSink_RemoteOnSave_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_RemoteOnSave_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_RemoteOnClose_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IAdviseSink_RemoteOnClose_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnClose_Proxy(IAdviseSink *This)
     * }
     */
    public static FunctionDescriptor IAdviseSink_RemoteOnClose_Proxy$descriptor() {
        return IAdviseSink_RemoteOnClose_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnClose_Proxy(IAdviseSink *This)
     * }
     */
    public static MethodHandle IAdviseSink_RemoteOnClose_Proxy$handle() {
        return IAdviseSink_RemoteOnClose_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnClose_Proxy(IAdviseSink *This)
     * }
     */
    public static MemorySegment IAdviseSink_RemoteOnClose_Proxy$address() {
        return IAdviseSink_RemoteOnClose_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnClose_Proxy(IAdviseSink *This)
     * }
     */
    public static int IAdviseSink_RemoteOnClose_Proxy(MemorySegment This) {
        var mh$ = IAdviseSink_RemoteOnClose_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_RemoteOnClose_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_RemoteOnClose_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IAdviseSink_RemoteOnClose_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnClose_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IAdviseSink_RemoteOnClose_Stub$descriptor() {
        return IAdviseSink_RemoteOnClose_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnClose_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IAdviseSink_RemoteOnClose_Stub$handle() {
        return IAdviseSink_RemoteOnClose_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnClose_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IAdviseSink_RemoteOnClose_Stub$address() {
        return IAdviseSink_RemoteOnClose_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnClose_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IAdviseSink_RemoteOnClose_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IAdviseSink_RemoteOnClose_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_RemoteOnClose_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IID_AsyncIAdviseSink$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_AsyncIAdviseSink").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIAdviseSink
     * }
     */
    public static GroupLayout IID_AsyncIAdviseSink$layout() {
        return IID_AsyncIAdviseSink$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIAdviseSink
     * }
     */
    public static MemorySegment IID_AsyncIAdviseSink() {
        return IID_AsyncIAdviseSink$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIAdviseSink
     * }
     */
    public static void IID_AsyncIAdviseSink(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_AsyncIAdviseSink$constants.SEGMENT, 0L, IID_AsyncIAdviseSink$constants.LAYOUT.byteSize());
    }

    private static class AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy(AsyncIAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy$descriptor() {
        return AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy(AsyncIAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy$handle() {
        return AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy(AsyncIAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy$address() {
        return AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy(AsyncIAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static int AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy(MemorySegment This, MemorySegment pFormatetc, MemorySegment pStgmed) {
        var mh$ = AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy", This, pFormatetc, pStgmed);
            }
            return (int)mh$.invokeExact(This, pFormatetc, pStgmed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub$descriptor() {
        return AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub$handle() {
        return AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub$address() {
        return AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy$descriptor() {
        return AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy$handle() {
        return AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy$address() {
        return AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub$descriptor() {
        return AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub$handle() {
        return AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub$address() {
        return AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy$descriptor() {
        return AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy$handle() {
        return AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy$address() {
        return AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static int AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy(MemorySegment This, int dwAspect, int lindex) {
        var mh$ = AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy", This, dwAspect, lindex);
            }
            return (int)mh$.invokeExact(This, dwAspect, lindex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub$descriptor() {
        return AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub$handle() {
        return AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub$address() {
        return AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy$descriptor() {
        return AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy$handle() {
        return AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy$address() {
        return AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub$descriptor() {
        return AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub$handle() {
        return AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub$address() {
        return AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_RemoteOnRename_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Begin_RemoteOnRename_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnRename_Proxy(AsyncIAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_RemoteOnRename_Proxy$descriptor() {
        return AsyncIAdviseSink_Begin_RemoteOnRename_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnRename_Proxy(AsyncIAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_RemoteOnRename_Proxy$handle() {
        return AsyncIAdviseSink_Begin_RemoteOnRename_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnRename_Proxy(AsyncIAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_RemoteOnRename_Proxy$address() {
        return AsyncIAdviseSink_Begin_RemoteOnRename_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnRename_Proxy(AsyncIAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static int AsyncIAdviseSink_Begin_RemoteOnRename_Proxy(MemorySegment This, MemorySegment pmk) {
        var mh$ = AsyncIAdviseSink_Begin_RemoteOnRename_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_RemoteOnRename_Proxy", This, pmk);
            }
            return (int)mh$.invokeExact(This, pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_RemoteOnRename_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Begin_RemoteOnRename_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnRename_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_RemoteOnRename_Stub$descriptor() {
        return AsyncIAdviseSink_Begin_RemoteOnRename_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnRename_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_RemoteOnRename_Stub$handle() {
        return AsyncIAdviseSink_Begin_RemoteOnRename_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnRename_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_RemoteOnRename_Stub$address() {
        return AsyncIAdviseSink_Begin_RemoteOnRename_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnRename_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void AsyncIAdviseSink_Begin_RemoteOnRename_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = AsyncIAdviseSink_Begin_RemoteOnRename_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_RemoteOnRename_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_RemoteOnRename_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Finish_RemoteOnRename_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnRename_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_RemoteOnRename_Proxy$descriptor() {
        return AsyncIAdviseSink_Finish_RemoteOnRename_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnRename_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_RemoteOnRename_Proxy$handle() {
        return AsyncIAdviseSink_Finish_RemoteOnRename_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnRename_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_RemoteOnRename_Proxy$address() {
        return AsyncIAdviseSink_Finish_RemoteOnRename_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnRename_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Finish_RemoteOnRename_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_RemoteOnRename_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_RemoteOnRename_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_RemoteOnRename_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Finish_RemoteOnRename_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnRename_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_RemoteOnRename_Stub$descriptor() {
        return AsyncIAdviseSink_Finish_RemoteOnRename_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnRename_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_RemoteOnRename_Stub$handle() {
        return AsyncIAdviseSink_Finish_RemoteOnRename_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnRename_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_RemoteOnRename_Stub$address() {
        return AsyncIAdviseSink_Finish_RemoteOnRename_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnRename_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void AsyncIAdviseSink_Finish_RemoteOnRename_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = AsyncIAdviseSink_Finish_RemoteOnRename_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_RemoteOnRename_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_RemoteOnSave_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Begin_RemoteOnSave_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_RemoteOnSave_Proxy$descriptor() {
        return AsyncIAdviseSink_Begin_RemoteOnSave_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_RemoteOnSave_Proxy$handle() {
        return AsyncIAdviseSink_Begin_RemoteOnSave_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_RemoteOnSave_Proxy$address() {
        return AsyncIAdviseSink_Begin_RemoteOnSave_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Begin_RemoteOnSave_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Begin_RemoteOnSave_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_RemoteOnSave_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_RemoteOnSave_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Begin_RemoteOnSave_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnSave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_RemoteOnSave_Stub$descriptor() {
        return AsyncIAdviseSink_Begin_RemoteOnSave_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnSave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_RemoteOnSave_Stub$handle() {
        return AsyncIAdviseSink_Begin_RemoteOnSave_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnSave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_RemoteOnSave_Stub$address() {
        return AsyncIAdviseSink_Begin_RemoteOnSave_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnSave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void AsyncIAdviseSink_Begin_RemoteOnSave_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = AsyncIAdviseSink_Begin_RemoteOnSave_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_RemoteOnSave_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_RemoteOnSave_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Finish_RemoteOnSave_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_RemoteOnSave_Proxy$descriptor() {
        return AsyncIAdviseSink_Finish_RemoteOnSave_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_RemoteOnSave_Proxy$handle() {
        return AsyncIAdviseSink_Finish_RemoteOnSave_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_RemoteOnSave_Proxy$address() {
        return AsyncIAdviseSink_Finish_RemoteOnSave_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Finish_RemoteOnSave_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_RemoteOnSave_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_RemoteOnSave_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_RemoteOnSave_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Finish_RemoteOnSave_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnSave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_RemoteOnSave_Stub$descriptor() {
        return AsyncIAdviseSink_Finish_RemoteOnSave_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnSave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_RemoteOnSave_Stub$handle() {
        return AsyncIAdviseSink_Finish_RemoteOnSave_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnSave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_RemoteOnSave_Stub$address() {
        return AsyncIAdviseSink_Finish_RemoteOnSave_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnSave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void AsyncIAdviseSink_Finish_RemoteOnSave_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = AsyncIAdviseSink_Finish_RemoteOnSave_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_RemoteOnSave_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_RemoteOnClose_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Begin_RemoteOnClose_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_RemoteOnClose_Proxy$descriptor() {
        return AsyncIAdviseSink_Begin_RemoteOnClose_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_RemoteOnClose_Proxy$handle() {
        return AsyncIAdviseSink_Begin_RemoteOnClose_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_RemoteOnClose_Proxy$address() {
        return AsyncIAdviseSink_Begin_RemoteOnClose_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Begin_RemoteOnClose_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Begin_RemoteOnClose_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_RemoteOnClose_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_RemoteOnClose_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Begin_RemoteOnClose_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnClose_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_RemoteOnClose_Stub$descriptor() {
        return AsyncIAdviseSink_Begin_RemoteOnClose_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnClose_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_RemoteOnClose_Stub$handle() {
        return AsyncIAdviseSink_Begin_RemoteOnClose_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnClose_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_RemoteOnClose_Stub$address() {
        return AsyncIAdviseSink_Begin_RemoteOnClose_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnClose_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void AsyncIAdviseSink_Begin_RemoteOnClose_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = AsyncIAdviseSink_Begin_RemoteOnClose_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_RemoteOnClose_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_RemoteOnClose_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Finish_RemoteOnClose_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_RemoteOnClose_Proxy$descriptor() {
        return AsyncIAdviseSink_Finish_RemoteOnClose_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_RemoteOnClose_Proxy$handle() {
        return AsyncIAdviseSink_Finish_RemoteOnClose_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_RemoteOnClose_Proxy$address() {
        return AsyncIAdviseSink_Finish_RemoteOnClose_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Finish_RemoteOnClose_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_RemoteOnClose_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_RemoteOnClose_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_RemoteOnClose_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Finish_RemoteOnClose_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnClose_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_RemoteOnClose_Stub$descriptor() {
        return AsyncIAdviseSink_Finish_RemoteOnClose_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnClose_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_RemoteOnClose_Stub$handle() {
        return AsyncIAdviseSink_Finish_RemoteOnClose_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnClose_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_RemoteOnClose_Stub$address() {
        return AsyncIAdviseSink_Finish_RemoteOnClose_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnClose_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void AsyncIAdviseSink_Finish_RemoteOnClose_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = AsyncIAdviseSink_Finish_RemoteOnClose_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_RemoteOnClose_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_objidl_0000_0071_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0071_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0071_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0071_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0071_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0071_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0071_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0071_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0071_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0071_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0071_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0071_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0071_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0071_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0071_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0071_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0071_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0071_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0071_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0071_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0071_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0071_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0071_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0071_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0071_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0071_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0071_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0071_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0071_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0071_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0071_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0071_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IAdviseSink2 *LPADVISESINK2
     * }
     */
    public static final AddressLayout LPADVISESINK2 = wgl_h.C_POINTER;

    private static class IID_IAdviseSink2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IAdviseSink2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAdviseSink2
     * }
     */
    public static GroupLayout IID_IAdviseSink2$layout() {
        return IID_IAdviseSink2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAdviseSink2
     * }
     */
    public static MemorySegment IID_IAdviseSink2() {
        return IID_IAdviseSink2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAdviseSink2
     * }
     */
    public static void IID_IAdviseSink2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IAdviseSink2$constants.SEGMENT, 0L, IID_IAdviseSink2$constants.LAYOUT.byteSize());
    }

    private static class IAdviseSink2_RemoteOnLinkSrcChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IAdviseSink2_RemoteOnLinkSrcChange_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink2_RemoteOnLinkSrcChange_Proxy(IAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor IAdviseSink2_RemoteOnLinkSrcChange_Proxy$descriptor() {
        return IAdviseSink2_RemoteOnLinkSrcChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink2_RemoteOnLinkSrcChange_Proxy(IAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static MethodHandle IAdviseSink2_RemoteOnLinkSrcChange_Proxy$handle() {
        return IAdviseSink2_RemoteOnLinkSrcChange_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink2_RemoteOnLinkSrcChange_Proxy(IAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static MemorySegment IAdviseSink2_RemoteOnLinkSrcChange_Proxy$address() {
        return IAdviseSink2_RemoteOnLinkSrcChange_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IAdviseSink2_RemoteOnLinkSrcChange_Proxy(IAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static int IAdviseSink2_RemoteOnLinkSrcChange_Proxy(MemorySegment This, MemorySegment pmk) {
        var mh$ = IAdviseSink2_RemoteOnLinkSrcChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink2_RemoteOnLinkSrcChange_Proxy", This, pmk);
            }
            return (int)mh$.invokeExact(This, pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink2_RemoteOnLinkSrcChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IAdviseSink2_RemoteOnLinkSrcChange_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IAdviseSink2_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IAdviseSink2_RemoteOnLinkSrcChange_Stub$descriptor() {
        return IAdviseSink2_RemoteOnLinkSrcChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IAdviseSink2_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IAdviseSink2_RemoteOnLinkSrcChange_Stub$handle() {
        return IAdviseSink2_RemoteOnLinkSrcChange_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IAdviseSink2_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IAdviseSink2_RemoteOnLinkSrcChange_Stub$address() {
        return IAdviseSink2_RemoteOnLinkSrcChange_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IAdviseSink2_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IAdviseSink2_RemoteOnLinkSrcChange_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IAdviseSink2_RemoteOnLinkSrcChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink2_RemoteOnLinkSrcChange_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IID_AsyncIAdviseSink2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_AsyncIAdviseSink2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIAdviseSink2
     * }
     */
    public static GroupLayout IID_AsyncIAdviseSink2$layout() {
        return IID_AsyncIAdviseSink2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIAdviseSink2
     * }
     */
    public static MemorySegment IID_AsyncIAdviseSink2() {
        return IID_AsyncIAdviseSink2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIAdviseSink2
     * }
     */
    public static void IID_AsyncIAdviseSink2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_AsyncIAdviseSink2$constants.SEGMENT, 0L, IID_AsyncIAdviseSink2$constants.LAYOUT.byteSize());
    }

    private static class AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy$descriptor() {
        return AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static MethodHandle AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy$handle() {
        return AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static MemorySegment AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy$address() {
        return AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static int AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy(MemorySegment This, MemorySegment pmk) {
        var mh$ = AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy", This, pmk);
            }
            return (int)mh$.invokeExact(This, pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub$descriptor() {
        return AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub$handle() {
        return AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub$address() {
        return AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy$descriptor() {
        return AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy$handle() {
        return AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy$address() {
        return AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This)
     * }
     */
    public static int AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub$descriptor() {
        return AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub$handle() {
        return AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub$address() {
        return AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_objidl_0000_0072_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0072_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0072_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0072_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0072_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0072_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0072_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0072_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0072_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0072_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0072_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0072_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0072_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0072_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0072_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0072_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0072_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0072_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0072_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0072_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0072_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0072_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0072_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0072_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0072_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0072_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0072_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0072_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0072_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0072_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0072_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0072_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IDataObject *LPDATAOBJECT
     * }
     */
    public static final AddressLayout LPDATAOBJECT = wgl_h.C_POINTER;
    private static final int DATADIR_GET = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagDATADIR.DATADIR_GET = 1
     * }
     */
    public static int DATADIR_GET() {
        return DATADIR_GET;
    }
    private static final int DATADIR_SET = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagDATADIR.DATADIR_SET = 2
     * }
     */
    public static int DATADIR_SET() {
        return DATADIR_SET;
    }

    private static class IID_IDataObject$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IDataObject").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDataObject
     * }
     */
    public static GroupLayout IID_IDataObject$layout() {
        return IID_IDataObject$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDataObject
     * }
     */
    public static MemorySegment IID_IDataObject() {
        return IID_IDataObject$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDataObject
     * }
     */
    public static void IID_IDataObject(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IDataObject$constants.SEGMENT, 0L, IID_IDataObject$constants.LAYOUT.byteSize());
    }

    private static class IDataObject_RemoteGetData_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IDataObject_RemoteGetData_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IDataObject_RemoteGetData_Proxy(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static FunctionDescriptor IDataObject_RemoteGetData_Proxy$descriptor() {
        return IDataObject_RemoteGetData_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IDataObject_RemoteGetData_Proxy(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static MethodHandle IDataObject_RemoteGetData_Proxy$handle() {
        return IDataObject_RemoteGetData_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IDataObject_RemoteGetData_Proxy(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static MemorySegment IDataObject_RemoteGetData_Proxy$address() {
        return IDataObject_RemoteGetData_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IDataObject_RemoteGetData_Proxy(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static int IDataObject_RemoteGetData_Proxy(MemorySegment This, MemorySegment pformatetcIn, MemorySegment pRemoteMedium) {
        var mh$ = IDataObject_RemoteGetData_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDataObject_RemoteGetData_Proxy", This, pformatetcIn, pRemoteMedium);
            }
            return (int)mh$.invokeExact(This, pformatetcIn, pRemoteMedium);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDataObject_RemoteGetData_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IDataObject_RemoteGetData_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IDataObject_RemoteGetData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IDataObject_RemoteGetData_Stub$descriptor() {
        return IDataObject_RemoteGetData_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IDataObject_RemoteGetData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IDataObject_RemoteGetData_Stub$handle() {
        return IDataObject_RemoteGetData_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IDataObject_RemoteGetData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IDataObject_RemoteGetData_Stub$address() {
        return IDataObject_RemoteGetData_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IDataObject_RemoteGetData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IDataObject_RemoteGetData_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IDataObject_RemoteGetData_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDataObject_RemoteGetData_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDataObject_RemoteGetDataHere_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IDataObject_RemoteGetDataHere_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IDataObject_RemoteGetDataHere_Proxy(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static FunctionDescriptor IDataObject_RemoteGetDataHere_Proxy$descriptor() {
        return IDataObject_RemoteGetDataHere_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IDataObject_RemoteGetDataHere_Proxy(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static MethodHandle IDataObject_RemoteGetDataHere_Proxy$handle() {
        return IDataObject_RemoteGetDataHere_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IDataObject_RemoteGetDataHere_Proxy(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static MemorySegment IDataObject_RemoteGetDataHere_Proxy$address() {
        return IDataObject_RemoteGetDataHere_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IDataObject_RemoteGetDataHere_Proxy(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static int IDataObject_RemoteGetDataHere_Proxy(MemorySegment This, MemorySegment pformatetc, MemorySegment pRemoteMedium) {
        var mh$ = IDataObject_RemoteGetDataHere_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDataObject_RemoteGetDataHere_Proxy", This, pformatetc, pRemoteMedium);
            }
            return (int)mh$.invokeExact(This, pformatetc, pRemoteMedium);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDataObject_RemoteGetDataHere_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IDataObject_RemoteGetDataHere_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IDataObject_RemoteGetDataHere_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IDataObject_RemoteGetDataHere_Stub$descriptor() {
        return IDataObject_RemoteGetDataHere_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IDataObject_RemoteGetDataHere_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IDataObject_RemoteGetDataHere_Stub$handle() {
        return IDataObject_RemoteGetDataHere_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IDataObject_RemoteGetDataHere_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IDataObject_RemoteGetDataHere_Stub$address() {
        return IDataObject_RemoteGetDataHere_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IDataObject_RemoteGetDataHere_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IDataObject_RemoteGetDataHere_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IDataObject_RemoteGetDataHere_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDataObject_RemoteGetDataHere_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDataObject_RemoteSetData_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IDataObject_RemoteSetData_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IDataObject_RemoteSetData_Proxy(IDataObject *This, FORMATETC *pformatetc, FLAG_STGMEDIUM *pmedium, BOOL fRelease)
     * }
     */
    public static FunctionDescriptor IDataObject_RemoteSetData_Proxy$descriptor() {
        return IDataObject_RemoteSetData_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IDataObject_RemoteSetData_Proxy(IDataObject *This, FORMATETC *pformatetc, FLAG_STGMEDIUM *pmedium, BOOL fRelease)
     * }
     */
    public static MethodHandle IDataObject_RemoteSetData_Proxy$handle() {
        return IDataObject_RemoteSetData_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IDataObject_RemoteSetData_Proxy(IDataObject *This, FORMATETC *pformatetc, FLAG_STGMEDIUM *pmedium, BOOL fRelease)
     * }
     */
    public static MemorySegment IDataObject_RemoteSetData_Proxy$address() {
        return IDataObject_RemoteSetData_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IDataObject_RemoteSetData_Proxy(IDataObject *This, FORMATETC *pformatetc, FLAG_STGMEDIUM *pmedium, BOOL fRelease)
     * }
     */
    public static int IDataObject_RemoteSetData_Proxy(MemorySegment This, MemorySegment pformatetc, MemorySegment pmedium, int fRelease) {
        var mh$ = IDataObject_RemoteSetData_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDataObject_RemoteSetData_Proxy", This, pformatetc, pmedium, fRelease);
            }
            return (int)mh$.invokeExact(This, pformatetc, pmedium, fRelease);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDataObject_RemoteSetData_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IDataObject_RemoteSetData_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IDataObject_RemoteSetData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IDataObject_RemoteSetData_Stub$descriptor() {
        return IDataObject_RemoteSetData_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IDataObject_RemoteSetData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IDataObject_RemoteSetData_Stub$handle() {
        return IDataObject_RemoteSetData_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IDataObject_RemoteSetData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IDataObject_RemoteSetData_Stub$address() {
        return IDataObject_RemoteSetData_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IDataObject_RemoteSetData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IDataObject_RemoteSetData_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IDataObject_RemoteSetData_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDataObject_RemoteSetData_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0073_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0073_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0073_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0073_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0073_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0073_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IDataAdviseHolder *LPDATAADVISEHOLDER
     * }
     */
    public static final AddressLayout LPDATAADVISEHOLDER = wgl_h.C_POINTER;

    private static class IID_IDataAdviseHolder$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IDataAdviseHolder").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDataAdviseHolder
     * }
     */
    public static GroupLayout IID_IDataAdviseHolder$layout() {
        return IID_IDataAdviseHolder$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDataAdviseHolder
     * }
     */
    public static MemorySegment IID_IDataAdviseHolder() {
        return IID_IDataAdviseHolder$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDataAdviseHolder
     * }
     */
    public static void IID_IDataAdviseHolder(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IDataAdviseHolder$constants.SEGMENT, 0L, IID_IDataAdviseHolder$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IMessageFilter *LPMESSAGEFILTER
     * }
     */
    public static final AddressLayout LPMESSAGEFILTER = wgl_h.C_POINTER;
    private static final int CALLTYPE_TOPLEVEL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagCALLTYPE.CALLTYPE_TOPLEVEL = 1
     * }
     */
    public static int CALLTYPE_TOPLEVEL() {
        return CALLTYPE_TOPLEVEL;
    }
    private static final int CALLTYPE_NESTED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagCALLTYPE.CALLTYPE_NESTED = 2
     * }
     */
    public static int CALLTYPE_NESTED() {
        return CALLTYPE_NESTED;
    }
    private static final int CALLTYPE_ASYNC = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagCALLTYPE.CALLTYPE_ASYNC = 3
     * }
     */
    public static int CALLTYPE_ASYNC() {
        return CALLTYPE_ASYNC;
    }
    private static final int CALLTYPE_TOPLEVEL_CALLPENDING = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagCALLTYPE.CALLTYPE_TOPLEVEL_CALLPENDING = 4
     * }
     */
    public static int CALLTYPE_TOPLEVEL_CALLPENDING() {
        return CALLTYPE_TOPLEVEL_CALLPENDING;
    }
    private static final int CALLTYPE_ASYNC_CALLPENDING = (int)5L;
    /**
     * {@snippet lang=c :
     * enum tagCALLTYPE.CALLTYPE_ASYNC_CALLPENDING = 5
     * }
     */
    public static int CALLTYPE_ASYNC_CALLPENDING() {
        return CALLTYPE_ASYNC_CALLPENDING;
    }
    private static final int SERVERCALL_ISHANDLED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagSERVERCALL.SERVERCALL_ISHANDLED = 0
     * }
     */
    public static int SERVERCALL_ISHANDLED() {
        return SERVERCALL_ISHANDLED;
    }
    private static final int SERVERCALL_REJECTED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagSERVERCALL.SERVERCALL_REJECTED = 1
     * }
     */
    public static int SERVERCALL_REJECTED() {
        return SERVERCALL_REJECTED;
    }
    private static final int SERVERCALL_RETRYLATER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagSERVERCALL.SERVERCALL_RETRYLATER = 2
     * }
     */
    public static int SERVERCALL_RETRYLATER() {
        return SERVERCALL_RETRYLATER;
    }
    private static final int PENDINGTYPE_TOPLEVEL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagPENDINGTYPE.PENDINGTYPE_TOPLEVEL = 1
     * }
     */
    public static int PENDINGTYPE_TOPLEVEL() {
        return PENDINGTYPE_TOPLEVEL;
    }
    private static final int PENDINGTYPE_NESTED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagPENDINGTYPE.PENDINGTYPE_NESTED = 2
     * }
     */
    public static int PENDINGTYPE_NESTED() {
        return PENDINGTYPE_NESTED;
    }
    private static final int PENDINGMSG_CANCELCALL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagPENDINGMSG.PENDINGMSG_CANCELCALL = 0
     * }
     */
    public static int PENDINGMSG_CANCELCALL() {
        return PENDINGMSG_CANCELCALL;
    }
    private static final int PENDINGMSG_WAITNOPROCESS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagPENDINGMSG.PENDINGMSG_WAITNOPROCESS = 1
     * }
     */
    public static int PENDINGMSG_WAITNOPROCESS() {
        return PENDINGMSG_WAITNOPROCESS;
    }
    private static final int PENDINGMSG_WAITDEFPROCESS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagPENDINGMSG.PENDINGMSG_WAITDEFPROCESS = 2
     * }
     */
    public static int PENDINGMSG_WAITDEFPROCESS() {
        return PENDINGMSG_WAITDEFPROCESS;
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagINTERFACEINFO {
     *     IUnknown *pUnk;
     *     IID iid;
     *     WORD wMethod;
     * } *LPINTERFACEINFO
     * }
     */
    public static final AddressLayout LPINTERFACEINFO = wgl_h.C_POINTER;

    private static class IID_IMessageFilter$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IMessageFilter").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMessageFilter
     * }
     */
    public static GroupLayout IID_IMessageFilter$layout() {
        return IID_IMessageFilter$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMessageFilter
     * }
     */
    public static MemorySegment IID_IMessageFilter() {
        return IID_IMessageFilter$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMessageFilter
     * }
     */
    public static void IID_IMessageFilter(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IMessageFilter$constants.SEGMENT, 0L, IID_IMessageFilter$constants.LAYOUT.byteSize());
    }

    private static class FMTID_SummaryInformation$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("FMTID_SummaryInformation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_SummaryInformation
     * }
     */
    public static GroupLayout FMTID_SummaryInformation$layout() {
        return FMTID_SummaryInformation$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_SummaryInformation
     * }
     */
    public static MemorySegment FMTID_SummaryInformation() {
        return FMTID_SummaryInformation$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_SummaryInformation
     * }
     */
    public static void FMTID_SummaryInformation(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, FMTID_SummaryInformation$constants.SEGMENT, 0L, FMTID_SummaryInformation$constants.LAYOUT.byteSize());
    }

    private static class FMTID_DocSummaryInformation$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("FMTID_DocSummaryInformation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_DocSummaryInformation
     * }
     */
    public static GroupLayout FMTID_DocSummaryInformation$layout() {
        return FMTID_DocSummaryInformation$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_DocSummaryInformation
     * }
     */
    public static MemorySegment FMTID_DocSummaryInformation() {
        return FMTID_DocSummaryInformation$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_DocSummaryInformation
     * }
     */
    public static void FMTID_DocSummaryInformation(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, FMTID_DocSummaryInformation$constants.SEGMENT, 0L, FMTID_DocSummaryInformation$constants.LAYOUT.byteSize());
    }

    private static class FMTID_UserDefinedProperties$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("FMTID_UserDefinedProperties").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_UserDefinedProperties
     * }
     */
    public static GroupLayout FMTID_UserDefinedProperties$layout() {
        return FMTID_UserDefinedProperties$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_UserDefinedProperties
     * }
     */
    public static MemorySegment FMTID_UserDefinedProperties() {
        return FMTID_UserDefinedProperties$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_UserDefinedProperties
     * }
     */
    public static void FMTID_UserDefinedProperties(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, FMTID_UserDefinedProperties$constants.SEGMENT, 0L, FMTID_UserDefinedProperties$constants.LAYOUT.byteSize());
    }

    private static class FMTID_DiscardableInformation$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("FMTID_DiscardableInformation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_DiscardableInformation
     * }
     */
    public static GroupLayout FMTID_DiscardableInformation$layout() {
        return FMTID_DiscardableInformation$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_DiscardableInformation
     * }
     */
    public static MemorySegment FMTID_DiscardableInformation() {
        return FMTID_DiscardableInformation$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_DiscardableInformation
     * }
     */
    public static void FMTID_DiscardableInformation(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, FMTID_DiscardableInformation$constants.SEGMENT, 0L, FMTID_DiscardableInformation$constants.LAYOUT.byteSize());
    }

    private static class FMTID_ImageSummaryInformation$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("FMTID_ImageSummaryInformation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_ImageSummaryInformation
     * }
     */
    public static GroupLayout FMTID_ImageSummaryInformation$layout() {
        return FMTID_ImageSummaryInformation$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_ImageSummaryInformation
     * }
     */
    public static MemorySegment FMTID_ImageSummaryInformation() {
        return FMTID_ImageSummaryInformation$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_ImageSummaryInformation
     * }
     */
    public static void FMTID_ImageSummaryInformation(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, FMTID_ImageSummaryInformation$constants.SEGMENT, 0L, FMTID_ImageSummaryInformation$constants.LAYOUT.byteSize());
    }

    private static class FMTID_AudioSummaryInformation$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("FMTID_AudioSummaryInformation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_AudioSummaryInformation
     * }
     */
    public static GroupLayout FMTID_AudioSummaryInformation$layout() {
        return FMTID_AudioSummaryInformation$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_AudioSummaryInformation
     * }
     */
    public static MemorySegment FMTID_AudioSummaryInformation() {
        return FMTID_AudioSummaryInformation$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_AudioSummaryInformation
     * }
     */
    public static void FMTID_AudioSummaryInformation(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, FMTID_AudioSummaryInformation$constants.SEGMENT, 0L, FMTID_AudioSummaryInformation$constants.LAYOUT.byteSize());
    }

    private static class FMTID_VideoSummaryInformation$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("FMTID_VideoSummaryInformation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_VideoSummaryInformation
     * }
     */
    public static GroupLayout FMTID_VideoSummaryInformation$layout() {
        return FMTID_VideoSummaryInformation$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_VideoSummaryInformation
     * }
     */
    public static MemorySegment FMTID_VideoSummaryInformation() {
        return FMTID_VideoSummaryInformation$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_VideoSummaryInformation
     * }
     */
    public static void FMTID_VideoSummaryInformation(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, FMTID_VideoSummaryInformation$constants.SEGMENT, 0L, FMTID_VideoSummaryInformation$constants.LAYOUT.byteSize());
    }

    private static class FMTID_MediaFileSummaryInformation$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("FMTID_MediaFileSummaryInformation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_MediaFileSummaryInformation
     * }
     */
    public static GroupLayout FMTID_MediaFileSummaryInformation$layout() {
        return FMTID_MediaFileSummaryInformation$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_MediaFileSummaryInformation
     * }
     */
    public static MemorySegment FMTID_MediaFileSummaryInformation() {
        return FMTID_MediaFileSummaryInformation$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_MediaFileSummaryInformation
     * }
     */
    public static void FMTID_MediaFileSummaryInformation(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, FMTID_MediaFileSummaryInformation$constants.SEGMENT, 0L, FMTID_MediaFileSummaryInformation$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0075_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0075_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0075_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0075_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0075_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0075_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IClassActivator$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IClassActivator").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IClassActivator
     * }
     */
    public static GroupLayout IID_IClassActivator$layout() {
        return IID_IClassActivator$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IClassActivator
     * }
     */
    public static MemorySegment IID_IClassActivator() {
        return IID_IClassActivator$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IClassActivator
     * }
     */
    public static void IID_IClassActivator(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IClassActivator$constants.SEGMENT, 0L, IID_IClassActivator$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0076_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0076_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0076_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0076_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0076_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0076_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0076_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0076_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0076_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0076_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0076_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0076_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0076_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0076_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0076_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0076_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0076_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0076_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0076_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0076_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0076_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0076_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0076_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0076_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0076_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0076_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0076_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0076_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0076_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0076_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0076_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0076_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IFillLockBytes$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IFillLockBytes").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IFillLockBytes
     * }
     */
    public static GroupLayout IID_IFillLockBytes$layout() {
        return IID_IFillLockBytes$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IFillLockBytes
     * }
     */
    public static MemorySegment IID_IFillLockBytes() {
        return IID_IFillLockBytes$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IFillLockBytes
     * }
     */
    public static void IID_IFillLockBytes(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IFillLockBytes$constants.SEGMENT, 0L, IID_IFillLockBytes$constants.LAYOUT.byteSize());
    }

    private static class IFillLockBytes_RemoteFillAppend_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IFillLockBytes_RemoteFillAppend_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_RemoteFillAppend_Proxy(IFillLockBytes *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static FunctionDescriptor IFillLockBytes_RemoteFillAppend_Proxy$descriptor() {
        return IFillLockBytes_RemoteFillAppend_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_RemoteFillAppend_Proxy(IFillLockBytes *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MethodHandle IFillLockBytes_RemoteFillAppend_Proxy$handle() {
        return IFillLockBytes_RemoteFillAppend_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_RemoteFillAppend_Proxy(IFillLockBytes *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MemorySegment IFillLockBytes_RemoteFillAppend_Proxy$address() {
        return IFillLockBytes_RemoteFillAppend_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_RemoteFillAppend_Proxy(IFillLockBytes *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static int IFillLockBytes_RemoteFillAppend_Proxy(MemorySegment This, MemorySegment pv, int cb, MemorySegment pcbWritten) {
        var mh$ = IFillLockBytes_RemoteFillAppend_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IFillLockBytes_RemoteFillAppend_Proxy", This, pv, cb, pcbWritten);
            }
            return (int)mh$.invokeExact(This, pv, cb, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IFillLockBytes_RemoteFillAppend_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IFillLockBytes_RemoteFillAppend_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IFillLockBytes_RemoteFillAppend_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IFillLockBytes_RemoteFillAppend_Stub$descriptor() {
        return IFillLockBytes_RemoteFillAppend_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IFillLockBytes_RemoteFillAppend_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IFillLockBytes_RemoteFillAppend_Stub$handle() {
        return IFillLockBytes_RemoteFillAppend_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IFillLockBytes_RemoteFillAppend_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IFillLockBytes_RemoteFillAppend_Stub$address() {
        return IFillLockBytes_RemoteFillAppend_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IFillLockBytes_RemoteFillAppend_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IFillLockBytes_RemoteFillAppend_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IFillLockBytes_RemoteFillAppend_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IFillLockBytes_RemoteFillAppend_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IFillLockBytes_RemoteFillAt_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            _ULARGE_INTEGER.layout(),
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IFillLockBytes_RemoteFillAt_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_RemoteFillAt_Proxy(IFillLockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static FunctionDescriptor IFillLockBytes_RemoteFillAt_Proxy$descriptor() {
        return IFillLockBytes_RemoteFillAt_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_RemoteFillAt_Proxy(IFillLockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MethodHandle IFillLockBytes_RemoteFillAt_Proxy$handle() {
        return IFillLockBytes_RemoteFillAt_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_RemoteFillAt_Proxy(IFillLockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MemorySegment IFillLockBytes_RemoteFillAt_Proxy$address() {
        return IFillLockBytes_RemoteFillAt_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_RemoteFillAt_Proxy(IFillLockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static int IFillLockBytes_RemoteFillAt_Proxy(MemorySegment This, MemorySegment ulOffset, MemorySegment pv, int cb, MemorySegment pcbWritten) {
        var mh$ = IFillLockBytes_RemoteFillAt_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IFillLockBytes_RemoteFillAt_Proxy", This, ulOffset, pv, cb, pcbWritten);
            }
            return (int)mh$.invokeExact(This, ulOffset, pv, cb, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IFillLockBytes_RemoteFillAt_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IFillLockBytes_RemoteFillAt_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IFillLockBytes_RemoteFillAt_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IFillLockBytes_RemoteFillAt_Stub$descriptor() {
        return IFillLockBytes_RemoteFillAt_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IFillLockBytes_RemoteFillAt_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IFillLockBytes_RemoteFillAt_Stub$handle() {
        return IFillLockBytes_RemoteFillAt_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IFillLockBytes_RemoteFillAt_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IFillLockBytes_RemoteFillAt_Stub$address() {
        return IFillLockBytes_RemoteFillAt_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IFillLockBytes_RemoteFillAt_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IFillLockBytes_RemoteFillAt_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IFillLockBytes_RemoteFillAt_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IFillLockBytes_RemoteFillAt_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0077_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0077_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0077_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0077_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0077_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0077_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IProgressNotify$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IProgressNotify").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IProgressNotify
     * }
     */
    public static GroupLayout IID_IProgressNotify$layout() {
        return IID_IProgressNotify$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IProgressNotify
     * }
     */
    public static MemorySegment IID_IProgressNotify() {
        return IID_IProgressNotify$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IProgressNotify
     * }
     */
    public static void IID_IProgressNotify(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IProgressNotify$constants.SEGMENT, 0L, IID_IProgressNotify$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0078_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0078_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0078_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0078_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0078_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0078_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_ILayoutStorage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_ILayoutStorage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ILayoutStorage
     * }
     */
    public static GroupLayout IID_ILayoutStorage$layout() {
        return IID_ILayoutStorage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ILayoutStorage
     * }
     */
    public static MemorySegment IID_ILayoutStorage() {
        return IID_ILayoutStorage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ILayoutStorage
     * }
     */
    public static void IID_ILayoutStorage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ILayoutStorage$constants.SEGMENT, 0L, IID_ILayoutStorage$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0079_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0079_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0079_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0079_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0079_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0079_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IBlockingLock$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IBlockingLock").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBlockingLock
     * }
     */
    public static GroupLayout IID_IBlockingLock$layout() {
        return IID_IBlockingLock$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBlockingLock
     * }
     */
    public static MemorySegment IID_IBlockingLock() {
        return IID_IBlockingLock$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBlockingLock
     * }
     */
    public static void IID_IBlockingLock(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IBlockingLock$constants.SEGMENT, 0L, IID_IBlockingLock$constants.LAYOUT.byteSize());
    }

    private static class IID_ITimeAndNoticeControl$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_ITimeAndNoticeControl").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITimeAndNoticeControl
     * }
     */
    public static GroupLayout IID_ITimeAndNoticeControl$layout() {
        return IID_ITimeAndNoticeControl$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITimeAndNoticeControl
     * }
     */
    public static MemorySegment IID_ITimeAndNoticeControl() {
        return IID_ITimeAndNoticeControl$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITimeAndNoticeControl
     * }
     */
    public static void IID_ITimeAndNoticeControl(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ITimeAndNoticeControl$constants.SEGMENT, 0L, IID_ITimeAndNoticeControl$constants.LAYOUT.byteSize());
    }

    private static class IID_IOplockStorage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IOplockStorage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOplockStorage
     * }
     */
    public static GroupLayout IID_IOplockStorage$layout() {
        return IID_IOplockStorage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOplockStorage
     * }
     */
    public static MemorySegment IID_IOplockStorage() {
        return IID_IOplockStorage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOplockStorage
     * }
     */
    public static void IID_IOplockStorage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IOplockStorage$constants.SEGMENT, 0L, IID_IOplockStorage$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0082_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0082_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0082_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0082_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0082_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0082_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0082_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0082_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0082_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0082_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0082_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0082_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0082_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0082_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0082_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0082_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0082_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0082_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0082_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0082_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0082_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0082_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0082_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0082_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0082_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0082_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0082_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0082_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0082_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0082_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0082_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0082_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IDirectWriterLock$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IDirectWriterLock").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDirectWriterLock
     * }
     */
    public static GroupLayout IID_IDirectWriterLock$layout() {
        return IID_IDirectWriterLock$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDirectWriterLock
     * }
     */
    public static MemorySegment IID_IDirectWriterLock() {
        return IID_IDirectWriterLock$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDirectWriterLock
     * }
     */
    public static void IID_IDirectWriterLock(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IDirectWriterLock$constants.SEGMENT, 0L, IID_IDirectWriterLock$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0083_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0083_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0083_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0083_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0083_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0083_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0083_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0083_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0083_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0083_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0083_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0083_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0083_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0083_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0083_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0083_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0083_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0083_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0083_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0083_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0083_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0083_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0083_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0083_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0083_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0083_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0083_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0083_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0083_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0083_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0083_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0083_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IUrlMon$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IUrlMon").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUrlMon
     * }
     */
    public static GroupLayout IID_IUrlMon$layout() {
        return IID_IUrlMon$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUrlMon
     * }
     */
    public static MemorySegment IID_IUrlMon() {
        return IID_IUrlMon$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUrlMon
     * }
     */
    public static void IID_IUrlMon(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IUrlMon$constants.SEGMENT, 0L, IID_IUrlMon$constants.LAYOUT.byteSize());
    }

    private static class IID_IForegroundTransfer$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IForegroundTransfer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IForegroundTransfer
     * }
     */
    public static GroupLayout IID_IForegroundTransfer$layout() {
        return IID_IForegroundTransfer$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IForegroundTransfer
     * }
     */
    public static MemorySegment IID_IForegroundTransfer() {
        return IID_IForegroundTransfer$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IForegroundTransfer
     * }
     */
    public static void IID_IForegroundTransfer(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IForegroundTransfer$constants.SEGMENT, 0L, IID_IForegroundTransfer$constants.LAYOUT.byteSize());
    }

    private static class IID_IThumbnailExtractor$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IThumbnailExtractor").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IThumbnailExtractor
     * }
     */
    public static GroupLayout IID_IThumbnailExtractor$layout() {
        return IID_IThumbnailExtractor$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IThumbnailExtractor
     * }
     */
    public static MemorySegment IID_IThumbnailExtractor() {
        return IID_IThumbnailExtractor$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IThumbnailExtractor
     * }
     */
    public static void IID_IThumbnailExtractor(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IThumbnailExtractor$constants.SEGMENT, 0L, IID_IThumbnailExtractor$constants.LAYOUT.byteSize());
    }

    private static class IID_IDummyHICONIncluder$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IDummyHICONIncluder").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDummyHICONIncluder
     * }
     */
    public static GroupLayout IID_IDummyHICONIncluder$layout() {
        return IID_IDummyHICONIncluder$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDummyHICONIncluder
     * }
     */
    public static MemorySegment IID_IDummyHICONIncluder() {
        return IID_IDummyHICONIncluder$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDummyHICONIncluder
     * }
     */
    public static void IID_IDummyHICONIncluder(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IDummyHICONIncluder$constants.SEGMENT, 0L, IID_IDummyHICONIncluder$constants.LAYOUT.byteSize());
    }
    private static final int ServerApplication = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagApplicationType.ServerApplication = 0
     * }
     */
    public static int ServerApplication() {
        return ServerApplication;
    }
    private static final int LibraryApplication = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagApplicationType.LibraryApplication = 1
     * }
     */
    public static int LibraryApplication() {
        return LibraryApplication;
    }
    private static final int IdleShutdown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagShutdownType.IdleShutdown = 0
     * }
     */
    public static int IdleShutdown() {
        return IdleShutdown;
    }
    private static final int ForcedShutdown = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagShutdownType.ForcedShutdown = 1
     * }
     */
    public static int ForcedShutdown() {
        return ForcedShutdown;
    }

    private static class __MIDL_itf_objidl_0000_0087_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0087_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0087_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0087_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0087_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0087_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0087_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0087_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0087_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0087_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0087_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0087_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0087_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0087_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0087_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0087_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0087_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0087_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0087_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0087_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0087_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0087_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0087_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0087_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0087_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0087_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0087_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0087_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0087_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0087_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0087_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0087_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IProcessLock$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IProcessLock").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IProcessLock
     * }
     */
    public static GroupLayout IID_IProcessLock$layout() {
        return IID_IProcessLock$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IProcessLock
     * }
     */
    public static MemorySegment IID_IProcessLock() {
        return IID_IProcessLock$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IProcessLock
     * }
     */
    public static void IID_IProcessLock(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IProcessLock$constants.SEGMENT, 0L, IID_IProcessLock$constants.LAYOUT.byteSize());
    }
}

