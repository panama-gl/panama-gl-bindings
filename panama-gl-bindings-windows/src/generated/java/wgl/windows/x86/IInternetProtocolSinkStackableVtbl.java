// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class IInternetProtocolSinkStackableVtbl {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("SwitchSink"),
        Constants$root.C_POINTER$LAYOUT.withName("CommitSwitch"),
        Constants$root.C_POINTER$LAYOUT.withName("RollbackSwitch")
    ).withName("IInternetProtocolSinkStackableVtbl");
    public static MemoryLayout $LAYOUT() {
        return IInternetProtocolSinkStackableVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        IInternetProtocolSinkStackableVtbl.QueryInterface$FUNC
    );
    public interface QueryInterface {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(QueryInterface fi, MemorySession session) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IInternetProtocolSinkStackableVtbl.QueryInterface$FUNC, session);
        }
        static QueryInterface ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IInternetProtocolSinkStackableVtbl.QueryInterface$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IInternetProtocolSinkStackableVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IInternetProtocolSinkStackableVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IInternetProtocolSinkStackableVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IInternetProtocolSinkStackableVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetProtocolSinkStackableVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment, MemorySession session) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), session);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        IInternetProtocolSinkStackableVtbl.AddRef$FUNC
    );
    public interface AddRef {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(AddRef fi, MemorySession session) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IInternetProtocolSinkStackableVtbl.AddRef$FUNC, session);
        }
        static AddRef ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IInternetProtocolSinkStackableVtbl.AddRef$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IInternetProtocolSinkStackableVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IInternetProtocolSinkStackableVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IInternetProtocolSinkStackableVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IInternetProtocolSinkStackableVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetProtocolSinkStackableVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment, MemorySession session) {
        return AddRef.ofAddress(AddRef$get(segment), session);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        IInternetProtocolSinkStackableVtbl.Release$FUNC
    );
    public interface Release {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Release fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Release.class, fi, IInternetProtocolSinkStackableVtbl.Release$FUNC, session);
        }
        static Release ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IInternetProtocolSinkStackableVtbl.Release$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IInternetProtocolSinkStackableVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IInternetProtocolSinkStackableVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IInternetProtocolSinkStackableVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IInternetProtocolSinkStackableVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetProtocolSinkStackableVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment, MemorySession session) {
        return Release.ofAddress(Release$get(segment), session);
    }
    static final FunctionDescriptor SwitchSink$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SwitchSink$MH = RuntimeHelper.downcallHandle(
        IInternetProtocolSinkStackableVtbl.SwitchSink$FUNC
    );
    public interface SwitchSink {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(SwitchSink fi, MemorySession session) {
            return RuntimeHelper.upcallStub(SwitchSink.class, fi, IInternetProtocolSinkStackableVtbl.SwitchSink$FUNC, session);
        }
        static SwitchSink ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IInternetProtocolSinkStackableVtbl.SwitchSink$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SwitchSink$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SwitchSink"));
    public static VarHandle SwitchSink$VH() {
        return IInternetProtocolSinkStackableVtbl.SwitchSink$VH;
    }
    public static MemoryAddress SwitchSink$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IInternetProtocolSinkStackableVtbl.SwitchSink$VH.get(seg);
    }
    public static void SwitchSink$set( MemorySegment seg, MemoryAddress x) {
        IInternetProtocolSinkStackableVtbl.SwitchSink$VH.set(seg, x);
    }
    public static MemoryAddress SwitchSink$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IInternetProtocolSinkStackableVtbl.SwitchSink$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SwitchSink$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetProtocolSinkStackableVtbl.SwitchSink$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SwitchSink SwitchSink (MemorySegment segment, MemorySession session) {
        return SwitchSink.ofAddress(SwitchSink$get(segment), session);
    }
    static final FunctionDescriptor CommitSwitch$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CommitSwitch$MH = RuntimeHelper.downcallHandle(
        IInternetProtocolSinkStackableVtbl.CommitSwitch$FUNC
    );
    public interface CommitSwitch {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(CommitSwitch fi, MemorySession session) {
            return RuntimeHelper.upcallStub(CommitSwitch.class, fi, IInternetProtocolSinkStackableVtbl.CommitSwitch$FUNC, session);
        }
        static CommitSwitch ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IInternetProtocolSinkStackableVtbl.CommitSwitch$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CommitSwitch$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CommitSwitch"));
    public static VarHandle CommitSwitch$VH() {
        return IInternetProtocolSinkStackableVtbl.CommitSwitch$VH;
    }
    public static MemoryAddress CommitSwitch$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IInternetProtocolSinkStackableVtbl.CommitSwitch$VH.get(seg);
    }
    public static void CommitSwitch$set( MemorySegment seg, MemoryAddress x) {
        IInternetProtocolSinkStackableVtbl.CommitSwitch$VH.set(seg, x);
    }
    public static MemoryAddress CommitSwitch$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IInternetProtocolSinkStackableVtbl.CommitSwitch$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CommitSwitch$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetProtocolSinkStackableVtbl.CommitSwitch$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CommitSwitch CommitSwitch (MemorySegment segment, MemorySession session) {
        return CommitSwitch.ofAddress(CommitSwitch$get(segment), session);
    }
    static final FunctionDescriptor RollbackSwitch$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RollbackSwitch$MH = RuntimeHelper.downcallHandle(
        IInternetProtocolSinkStackableVtbl.RollbackSwitch$FUNC
    );
    public interface RollbackSwitch {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(RollbackSwitch fi, MemorySession session) {
            return RuntimeHelper.upcallStub(RollbackSwitch.class, fi, IInternetProtocolSinkStackableVtbl.RollbackSwitch$FUNC, session);
        }
        static RollbackSwitch ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IInternetProtocolSinkStackableVtbl.RollbackSwitch$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle RollbackSwitch$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RollbackSwitch"));
    public static VarHandle RollbackSwitch$VH() {
        return IInternetProtocolSinkStackableVtbl.RollbackSwitch$VH;
    }
    public static MemoryAddress RollbackSwitch$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IInternetProtocolSinkStackableVtbl.RollbackSwitch$VH.get(seg);
    }
    public static void RollbackSwitch$set( MemorySegment seg, MemoryAddress x) {
        IInternetProtocolSinkStackableVtbl.RollbackSwitch$VH.set(seg, x);
    }
    public static MemoryAddress RollbackSwitch$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IInternetProtocolSinkStackableVtbl.RollbackSwitch$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RollbackSwitch$set(MemorySegment seg, long index, MemoryAddress x) {
        IInternetProtocolSinkStackableVtbl.RollbackSwitch$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RollbackSwitch RollbackSwitch (MemorySegment segment, MemorySession session) {
        return RollbackSwitch.ofAddress(RollbackSwitch$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


