// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _PROCESSOR_NUMBER {
 *     WORD Group;
 *     BYTE Number;
 *     BYTE Reserved;
 * }
 * }
 */
public class _PROCESSOR_NUMBER {

    _PROCESSOR_NUMBER() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_SHORT.withName("Group"),
        wgl_h.C_CHAR.withName("Number"),
        wgl_h.C_CHAR.withName("Reserved")
    ).withName("_PROCESSOR_NUMBER");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfShort Group$LAYOUT = (OfShort)$LAYOUT.select(groupElement("Group"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD Group
     * }
     */
    public static final OfShort Group$layout() {
        return Group$LAYOUT;
    }

    private static final long Group$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD Group
     * }
     */
    public static final long Group$offset() {
        return Group$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD Group
     * }
     */
    public static short Group(MemorySegment struct) {
        return struct.get(Group$LAYOUT, Group$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD Group
     * }
     */
    public static void Group(MemorySegment struct, short fieldValue) {
        struct.set(Group$LAYOUT, Group$OFFSET, fieldValue);
    }

    private static final OfByte Number$LAYOUT = (OfByte)$LAYOUT.select(groupElement("Number"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE Number
     * }
     */
    public static final OfByte Number$layout() {
        return Number$LAYOUT;
    }

    private static final long Number$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE Number
     * }
     */
    public static final long Number$offset() {
        return Number$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE Number
     * }
     */
    public static byte Number(MemorySegment struct) {
        return struct.get(Number$LAYOUT, Number$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE Number
     * }
     */
    public static void Number(MemorySegment struct, byte fieldValue) {
        struct.set(Number$LAYOUT, Number$OFFSET, fieldValue);
    }

    private static final OfByte Reserved$LAYOUT = (OfByte)$LAYOUT.select(groupElement("Reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE Reserved
     * }
     */
    public static final OfByte Reserved$layout() {
        return Reserved$LAYOUT;
    }

    private static final long Reserved$OFFSET = 3;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE Reserved
     * }
     */
    public static final long Reserved$offset() {
        return Reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE Reserved
     * }
     */
    public static byte Reserved(MemorySegment struct) {
        return struct.get(Reserved$LAYOUT, Reserved$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE Reserved
     * }
     */
    public static void Reserved(MemorySegment struct, byte fieldValue) {
        struct.set(Reserved$LAYOUT, Reserved$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

