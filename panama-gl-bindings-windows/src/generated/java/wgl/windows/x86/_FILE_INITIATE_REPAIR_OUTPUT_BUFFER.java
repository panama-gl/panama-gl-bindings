// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _FILE_INITIATE_REPAIR_OUTPUT_BUFFER {
 *     DWORDLONG Hint1;
 *     DWORDLONG Hint2;
 *     CLSN Clsn;
 *     DWORD Status;
 * }
 * }
 */
public class _FILE_INITIATE_REPAIR_OUTPUT_BUFFER {

    _FILE_INITIATE_REPAIR_OUTPUT_BUFFER() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG_LONG.withName("Hint1"),
        wgl_h.C_LONG_LONG.withName("Hint2"),
        wgl_h.C_LONG_LONG.withName("Clsn"),
        wgl_h.C_LONG.withName("Status"),
        MemoryLayout.paddingLayout(4)
    ).withName("_FILE_INITIATE_REPAIR_OUTPUT_BUFFER");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong Hint1$LAYOUT = (OfLong)$LAYOUT.select(groupElement("Hint1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG Hint1
     * }
     */
    public static final OfLong Hint1$layout() {
        return Hint1$LAYOUT;
    }

    private static final long Hint1$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG Hint1
     * }
     */
    public static final long Hint1$offset() {
        return Hint1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG Hint1
     * }
     */
    public static long Hint1(MemorySegment struct) {
        return struct.get(Hint1$LAYOUT, Hint1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG Hint1
     * }
     */
    public static void Hint1(MemorySegment struct, long fieldValue) {
        struct.set(Hint1$LAYOUT, Hint1$OFFSET, fieldValue);
    }

    private static final OfLong Hint2$LAYOUT = (OfLong)$LAYOUT.select(groupElement("Hint2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG Hint2
     * }
     */
    public static final OfLong Hint2$layout() {
        return Hint2$LAYOUT;
    }

    private static final long Hint2$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG Hint2
     * }
     */
    public static final long Hint2$offset() {
        return Hint2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG Hint2
     * }
     */
    public static long Hint2(MemorySegment struct) {
        return struct.get(Hint2$LAYOUT, Hint2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG Hint2
     * }
     */
    public static void Hint2(MemorySegment struct, long fieldValue) {
        struct.set(Hint2$LAYOUT, Hint2$OFFSET, fieldValue);
    }

    private static final OfLong Clsn$LAYOUT = (OfLong)$LAYOUT.select(groupElement("Clsn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CLSN Clsn
     * }
     */
    public static final OfLong Clsn$layout() {
        return Clsn$LAYOUT;
    }

    private static final long Clsn$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CLSN Clsn
     * }
     */
    public static final long Clsn$offset() {
        return Clsn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CLSN Clsn
     * }
     */
    public static long Clsn(MemorySegment struct) {
        return struct.get(Clsn$LAYOUT, Clsn$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CLSN Clsn
     * }
     */
    public static void Clsn(MemorySegment struct, long fieldValue) {
        struct.set(Clsn$LAYOUT, Clsn$OFFSET, fieldValue);
    }

    private static final OfInt Status$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Status"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Status
     * }
     */
    public static final OfInt Status$layout() {
        return Status$LAYOUT;
    }

    private static final long Status$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Status
     * }
     */
    public static final long Status$offset() {
        return Status$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Status
     * }
     */
    public static int Status(MemorySegment struct) {
        return struct.get(Status$LAYOUT, Status$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Status
     * }
     */
    public static void Status(MemorySegment struct, int fieldValue) {
        struct.set(Status$LAYOUT, Status$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

