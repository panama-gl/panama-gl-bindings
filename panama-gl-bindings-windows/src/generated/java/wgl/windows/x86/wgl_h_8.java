// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class wgl_h_8 extends wgl_h_7 {

    public static int NCBSEND() {
        return (int)20L;
    }
    public static int NCBRECV() {
        return (int)21L;
    }
    public static int NCBRECVANY() {
        return (int)22L;
    }
    public static int NCBCHAINSEND() {
        return (int)23L;
    }
    public static int NCBDGSEND() {
        return (int)32L;
    }
    public static int NCBDGRECV() {
        return (int)33L;
    }
    public static int NCBDGSENDBC() {
        return (int)34L;
    }
    public static int NCBDGRECVBC() {
        return (int)35L;
    }
    public static int NCBADDNAME() {
        return (int)48L;
    }
    public static int NCBDELNAME() {
        return (int)49L;
    }
    public static int NCBRESET() {
        return (int)50L;
    }
    public static int NCBASTAT() {
        return (int)51L;
    }
    public static int NCBSSTAT() {
        return (int)52L;
    }
    public static int NCBCANCEL() {
        return (int)53L;
    }
    public static int NCBADDGRNAME() {
        return (int)54L;
    }
    public static int NCBENUM() {
        return (int)55L;
    }
    public static int NCBUNLINK() {
        return (int)112L;
    }
    public static int NCBSENDNA() {
        return (int)113L;
    }
    public static int NCBCHAINSENDNA() {
        return (int)114L;
    }
    public static int NCBLANSTALERT() {
        return (int)115L;
    }
    public static int NCBACTION() {
        return (int)119L;
    }
    public static int NCBFINDNAME() {
        return (int)120L;
    }
    public static int NCBTRACE() {
        return (int)121L;
    }
    public static int ASYNCH() {
        return (int)128L;
    }
    public static int NRC_GOODRET() {
        return (int)0L;
    }
    public static int NRC_BUFLEN() {
        return (int)1L;
    }
    public static int NRC_ILLCMD() {
        return (int)3L;
    }
    public static int NRC_CMDTMO() {
        return (int)5L;
    }
    public static int NRC_INCOMP() {
        return (int)6L;
    }
    public static int NRC_BADDR() {
        return (int)7L;
    }
    public static int NRC_SNUMOUT() {
        return (int)8L;
    }
    public static int NRC_NORES() {
        return (int)9L;
    }
    public static int NRC_SCLOSED() {
        return (int)10L;
    }
    public static int NRC_CMDCAN() {
        return (int)11L;
    }
    public static int NRC_DUPNAME() {
        return (int)13L;
    }
    public static int NRC_NAMTFUL() {
        return (int)14L;
    }
    public static int NRC_ACTSES() {
        return (int)15L;
    }
    public static int NRC_LOCTFUL() {
        return (int)17L;
    }
    public static int NRC_REMTFUL() {
        return (int)18L;
    }
    public static int NRC_ILLNN() {
        return (int)19L;
    }
    public static int NRC_NOCALL() {
        return (int)20L;
    }
    public static int NRC_NOWILD() {
        return (int)21L;
    }
    public static int NRC_INUSE() {
        return (int)22L;
    }
    public static int NRC_NAMERR() {
        return (int)23L;
    }
    public static int NRC_SABORT() {
        return (int)24L;
    }
    public static int NRC_NAMCONF() {
        return (int)25L;
    }
    public static int NRC_IFBUSY() {
        return (int)33L;
    }
    public static int NRC_TOOMANY() {
        return (int)34L;
    }
    public static int NRC_BRIDGE() {
        return (int)35L;
    }
    public static int NRC_CANOCCR() {
        return (int)36L;
    }
    public static int NRC_CANCEL() {
        return (int)38L;
    }
    public static int NRC_DUPENV() {
        return (int)48L;
    }
    public static int NRC_ENVNOTDEF() {
        return (int)52L;
    }
    public static int NRC_OSRESNOTAV() {
        return (int)53L;
    }
    public static int NRC_MAXAPPS() {
        return (int)54L;
    }
    public static int NRC_NOSAPS() {
        return (int)55L;
    }
    public static int NRC_NORESOURCES() {
        return (int)56L;
    }
    public static int NRC_INVADDRESS() {
        return (int)57L;
    }
    public static int NRC_INVDDID() {
        return (int)59L;
    }
    public static int NRC_LOCKFAIL() {
        return (int)60L;
    }
    public static int NRC_OPENERR() {
        return (int)63L;
    }
    public static int NRC_SYSTEM() {
        return (int)64L;
    }
    public static int NRC_PENDING() {
        return (int)255L;
    }
    public static int RPC_C_BINDING_INFINITE_TIMEOUT() {
        return (int)10L;
    }
    public static int RPC_C_BINDING_MIN_TIMEOUT() {
        return (int)0L;
    }
    public static int RPC_C_BINDING_DEFAULT_TIMEOUT() {
        return (int)5L;
    }
    public static int RPC_C_BINDING_MAX_TIMEOUT() {
        return (int)9L;
    }
    public static int RPC_C_LISTEN_MAX_CALLS_DEFAULT() {
        return (int)1234L;
    }
    public static int RPC_C_PROTSEQ_MAX_REQS_DEFAULT() {
        return (int)10L;
    }
    public static int RPC_C_BIND_TO_ALL_NICS() {
        return (int)1L;
    }
    public static int RPC_C_USE_INTERNET_PORT() {
        return (int)1L;
    }
    public static int RPC_C_USE_INTRANET_PORT() {
        return (int)2L;
    }
    public static int RPC_C_DONT_FAIL() {
        return (int)4L;
    }
    public static int RPC_C_RPCHTTP_USE_LOAD_BALANCE() {
        return (int)8L;
    }
    public static int RPC_C_OPT_BINDING_NONCAUSAL() {
        return (int)9L;
    }
    public static int RPC_C_OPT_SECURITY_CALLBACK() {
        return (int)10L;
    }
    public static int RPC_C_OPT_UNIQUE_BINDING() {
        return (int)11L;
    }
    public static int RPC_C_OPT_TRANS_SEND_BUFFER_SIZE() {
        return (int)5L;
    }
    public static int RPC_C_OPT_CALL_TIMEOUT() {
        return (int)12L;
    }
    public static int RPC_C_OPT_DONT_LINGER() {
        return (int)13L;
    }
    public static int RPC_C_OPT_TRUST_PEER() {
        return (int)14L;
    }
    public static int RPC_C_OPT_ASYNC_BLOCK() {
        return (int)15L;
    }
    public static int RPC_C_OPT_OPTIMIZE_TIME() {
        return (int)16L;
    }
    public static int RPC_C_OPT_MAX_OPTIONS() {
        return (int)17L;
    }
    public static int RPC_C_FULL_CERT_CHAIN() {
        return (int)1L;
    }
    public static int RPC_C_STATS_CALLS_IN() {
        return (int)0L;
    }
    public static int RPC_C_STATS_CALLS_OUT() {
        return (int)1L;
    }
    public static int RPC_C_STATS_PKTS_IN() {
        return (int)2L;
    }
    public static int RPC_C_STATS_PKTS_OUT() {
        return (int)3L;
    }
    public static int RPC_C_AUTHN_LEVEL_DEFAULT() {
        return (int)0L;
    }
    public static int RPC_C_AUTHN_LEVEL_NONE() {
        return (int)1L;
    }
    public static int RPC_C_AUTHN_LEVEL_CONNECT() {
        return (int)2L;
    }
    public static int RPC_C_AUTHN_LEVEL_CALL() {
        return (int)3L;
    }
    public static int RPC_C_AUTHN_LEVEL_PKT() {
        return (int)4L;
    }
    public static int RPC_C_AUTHN_LEVEL_PKT_INTEGRITY() {
        return (int)5L;
    }
    public static int RPC_C_AUTHN_LEVEL_PKT_PRIVACY() {
        return (int)6L;
    }
    public static int RPC_C_IMP_LEVEL_DEFAULT() {
        return (int)0L;
    }
    public static int RPC_C_IMP_LEVEL_ANONYMOUS() {
        return (int)1L;
    }
    public static int RPC_C_IMP_LEVEL_IDENTIFY() {
        return (int)2L;
    }
    public static int RPC_C_IMP_LEVEL_IMPERSONATE() {
        return (int)3L;
    }
    public static int RPC_C_IMP_LEVEL_DELEGATE() {
        return (int)4L;
    }
    public static int RPC_C_QOS_IDENTITY_STATIC() {
        return (int)0L;
    }
    public static int RPC_C_QOS_IDENTITY_DYNAMIC() {
        return (int)1L;
    }
    public static int RPC_C_QOS_CAPABILITIES_DEFAULT() {
        return (int)0L;
    }
    public static int RPC_C_QOS_CAPABILITIES_MUTUAL_AUTH() {
        return (int)1L;
    }
    public static int RPC_C_QOS_CAPABILITIES_MAKE_FULLSIC() {
        return (int)2L;
    }
    public static int RPC_C_QOS_CAPABILITIES_ANY_AUTHORITY() {
        return (int)4L;
    }
    public static int RPC_C_QOS_CAPABILITIES_IGNORE_DELEGATE_FAILURE() {
        return (int)8L;
    }
    public static int RPC_C_QOS_CAPABILITIES_LOCAL_MA_HINT() {
        return (int)16L;
    }
    public static int RPC_C_QOS_CAPABILITIES_SCHANNEL_FULL_AUTH_IDENTITY() {
        return (int)32L;
    }
    public static int RPC_C_AUTHN_NONE() {
        return (int)0L;
    }
    public static int RPC_C_AUTHN_DCE_PRIVATE() {
        return (int)1L;
    }
    public static int RPC_C_AUTHN_DCE_PUBLIC() {
        return (int)2L;
    }
    public static int RPC_C_AUTHN_DEC_PUBLIC() {
        return (int)4L;
    }
    public static int RPC_C_AUTHN_GSS_NEGOTIATE() {
        return (int)9L;
    }
    public static int RPC_C_AUTHN_WINNT() {
        return (int)10L;
    }
    public static int RPC_C_AUTHN_GSS_SCHANNEL() {
        return (int)14L;
    }
    public static int RPC_C_AUTHN_GSS_KERBEROS() {
        return (int)16L;
    }
    public static int RPC_C_AUTHN_DPA() {
        return (int)17L;
    }
    public static int RPC_C_AUTHN_MSN() {
        return (int)18L;
    }
    public static int RPC_C_AUTHN_DIGEST() {
        return (int)21L;
    }
    public static int RPC_C_AUTHN_KERNEL() {
        return (int)20L;
    }
    public static int RPC_C_AUTHN_NEGO_EXTENDER() {
        return (int)30L;
    }
    public static int RPC_C_AUTHN_PKU2U() {
        return (int)31L;
    }
    public static int RPC_C_AUTHN_LIVE_SSP() {
        return (int)32L;
    }
    public static int RPC_C_AUTHN_LIVEXP_SSP() {
        return (int)35L;
    }
    public static int RPC_C_AUTHN_CLOUD_AP() {
        return (int)36L;
    }
    public static int RPC_C_AUTHN_MSONLINE() {
        return (int)82L;
    }
    public static int RPC_C_AUTHN_MQ() {
        return (int)100L;
    }
    public static int SEC_WINNT_AUTH_IDENTITY_ANSI() {
        return (int)1L;
    }
    public static int SEC_WINNT_AUTH_IDENTITY_UNICODE() {
        return (int)2L;
    }
    public static int RPC_C_AUTHN_INFO_TYPE_HTTP() {
        return (int)1L;
    }
    public static int RPC_C_HTTP_AUTHN_TARGET_SERVER() {
        return (int)1L;
    }
    public static int RPC_C_HTTP_AUTHN_TARGET_PROXY() {
        return (int)2L;
    }
    public static int RPC_C_HTTP_AUTHN_SCHEME_BASIC() {
        return (int)1L;
    }
    public static int RPC_C_HTTP_AUTHN_SCHEME_NTLM() {
        return (int)2L;
    }
    public static int RPC_C_HTTP_AUTHN_SCHEME_PASSPORT() {
        return (int)4L;
    }
    public static int RPC_C_HTTP_AUTHN_SCHEME_DIGEST() {
        return (int)8L;
    }
    public static int RPC_C_HTTP_AUTHN_SCHEME_NEGOTIATE() {
        return (int)16L;
    }
    public static int RPC_C_HTTP_AUTHN_SCHEME_CERT() {
        return (int)65536L;
    }
    public static int RPC_C_HTTP_FLAG_USE_SSL() {
        return (int)1L;
    }
    public static int RPC_C_HTTP_FLAG_USE_FIRST_AUTH_SCHEME() {
        return (int)2L;
    }
    public static int RPC_C_HTTP_FLAG_IGNORE_CERT_CN_INVALID() {
        return (int)8L;
    }
    public static int RPC_C_HTTP_FLAG_ENABLE_CERT_REVOCATION_CHECK() {
        return (int)16L;
    }
    public static int RPC_C_AUTHZ_NONE() {
        return (int)0L;
    }
    public static int RPC_C_AUTHZ_NAME() {
        return (int)1L;
    }
    public static int RPC_C_AUTHZ_DCE() {
        return (int)2L;
    }
    public static int DCE_C_ERROR_STRING_LEN() {
        return (int)256L;
    }
    public static int RPC_C_EP_ALL_ELTS() {
        return (int)0L;
    }
    public static int RPC_C_EP_MATCH_BY_IF() {
        return (int)1L;
    }
    public static int RPC_C_EP_MATCH_BY_OBJ() {
        return (int)2L;
    }
    public static int RPC_C_EP_MATCH_BY_BOTH() {
        return (int)3L;
    }
    public static int RPC_C_VERS_ALL() {
        return (int)1L;
    }
    public static int RPC_C_VERS_COMPATIBLE() {
        return (int)2L;
    }
    public static int RPC_C_VERS_EXACT() {
        return (int)3L;
    }
    public static int RPC_C_VERS_MAJOR_ONLY() {
        return (int)4L;
    }
    public static int RPC_C_VERS_UPTO() {
        return (int)5L;
    }
    public static int RPC_C_MGMT_INQ_IF_IDS() {
        return (int)0L;
    }
    public static int RPC_C_MGMT_INQ_PRINC_NAME() {
        return (int)1L;
    }
    public static int RPC_C_MGMT_INQ_STATS() {
        return (int)2L;
    }
    public static int RPC_C_MGMT_IS_SERVER_LISTEN() {
        return (int)3L;
    }
    public static int RPC_C_MGMT_STOP_SERVER_LISTEN() {
        return (int)4L;
    }
    public static int RPC_C_PARM_MAX_PACKET_LENGTH() {
        return (int)1L;
    }
    public static int RPC_C_PARM_BUFFER_LENGTH() {
        return (int)2L;
    }
    public static int RPC_IF_AUTOLISTEN() {
        return (int)1L;
    }
    public static int RPC_IF_OLE() {
        return (int)2L;
    }
    public static int RPC_IF_ALLOW_UNKNOWN_AUTHORITY() {
        return (int)4L;
    }
    public static int RPC_IF_ALLOW_SECURE_ONLY() {
        return (int)8L;
    }
    public static int RPC_IF_ALLOW_CALLBACKS_WITH_NO_AUTH() {
        return (int)16L;
    }
    public static int RPC_IF_ALLOW_LOCAL_ONLY() {
        return (int)32L;
    }
    public static int RPC_IF_SEC_NO_CACHE() {
        return (int)64L;
    }
    public static int RPC_IF_SEC_CACHE_PER_PROC() {
        return (int)128L;
    }
    public static int RPC_IF_ASYNC_CALLBACK() {
        return (int)256L;
    }
    public static int RPC_FW_IF_FLAG_DCOM() {
        return (int)1L;
    }
    public static int RPC_NCA_FLAGS_DEFAULT() {
        return (int)0L;
    }
    public static int RPC_NCA_FLAGS_IDEMPOTENT() {
        return (int)1L;
    }
    public static int RPC_NCA_FLAGS_BROADCAST() {
        return (int)2L;
    }
    public static int RPC_NCA_FLAGS_MAYBE() {
        return (int)4L;
    }
    public static int RPC_BUFFER_COMPLETE() {
        return (int)4096L;
    }
    public static int RPC_BUFFER_PARTIAL() {
        return (int)8192L;
    }
    public static int RPC_BUFFER_EXTRA() {
        return (int)16384L;
    }
    public static int RPC_BUFFER_ASYNC() {
        return (int)32768L;
    }
    public static int RPC_BUFFER_NONOTIFY() {
        return (int)65536L;
    }
    public static int RPC_FLAGS_VALID_BIT() {
        return (int)32768L;
    }
    public static int NT351_INTERFACE_SIZE() {
        return (int)64L;
    }
    public static int RPC_INTERFACE_HAS_PIPES() {
        return (int)1L;
    }
    public static int RPC_SYSTEM_HANDLE_FREE_UNRETRIEVED() {
        return (int)1L;
    }
    public static int RPC_SYSTEM_HANDLE_FREE_RETRIEVED() {
        return (int)2L;
    }
    public static int RPC_SYSTEM_HANDLE_FREE_ALL() {
        return (int)3L;
    }
    public static int RPC_SYSTEM_HANDLE_FREE_ERROR_ON_CLOSE() {
        return (int)4L;
    }
    public static int TRANSPORT_TYPE_CN() {
        return (int)1L;
    }
    public static int TRANSPORT_TYPE_DG() {
        return (int)2L;
    }
    public static int TRANSPORT_TYPE_LPC() {
        return (int)4L;
    }
    public static int TRANSPORT_TYPE_WMSG() {
        return (int)8L;
    }
    public static int RPC_P_ADDR_FORMAT_TCP_IPV4() {
        return (int)1L;
    }
    public static int RPC_P_ADDR_FORMAT_TCP_IPV6() {
        return (int)2L;
    }
    public static int RPC_PROXY_CONNECTION_TYPE_IN_PROXY() {
        return (int)0L;
    }
    public static int RPC_PROXY_CONNECTION_TYPE_OUT_PROXY() {
        return (int)1L;
    }
    public static int RPC_C_OPT_PRIVATE_SUPPRESS_WAKE() {
        return (int)1L;
    }
    public static int RPC_C_OPT_PRIVATE_DO_NOT_DISTURB() {
        return (int)2L;
    }
    public static int RPC_C_OPT_PRIVATE_BREAK_ON_SUSPEND() {
        return (int)3L;
    }
    public static int RPC_C_NS_SYNTAX_DEFAULT() {
        return (int)0L;
    }
    public static int RPC_C_NS_SYNTAX_DCE() {
        return (int)3L;
    }
    public static int RPC_C_PROFILE_DEFAULT_ELT() {
        return (int)0L;
    }
    public static int RPC_C_PROFILE_ALL_ELT() {
        return (int)1L;
    }
    public static int RPC_C_PROFILE_MATCH_BY_IF() {
        return (int)2L;
    }
    public static int RPC_C_PROFILE_MATCH_BY_MBR() {
        return (int)3L;
    }
    public static int RPC_C_PROFILE_MATCH_BY_BOTH() {
        return (int)4L;
    }
    public static int RPC_C_NOTIFY_ON_SEND_COMPLETE() {
        return (int)1L;
    }
    public static int MaxNumberOfEEInfoParams() {
        return (int)4L;
    }
    public static int RPC_EEINFO_VERSION() {
        return (int)1L;
    }
    public static int EEInfoPreviousRecordsMissing() {
        return (int)1L;
    }
    public static int EEInfoNextRecordsMissing() {
        return (int)2L;
    }
    public static int EEInfoUseFileTime() {
        return (int)4L;
    }
    public static int EEInfoGCCOM() {
        return (int)11L;
    }
    public static int EEInfoGCFRS() {
        return (int)12L;
    }
    public static int RPC_CALL_STATUS_CANCELLED() {
        return (int)1L;
    }
    public static int RPC_CALL_STATUS_DISCONNECTED() {
        return (int)2L;
    }
    public static int ABM_NEW() {
        return (int)0L;
    }
    public static int ABM_REMOVE() {
        return (int)1L;
    }
    public static int ABM_QUERYPOS() {
        return (int)2L;
    }
    public static int ABM_SETPOS() {
        return (int)3L;
    }
    public static int ABM_GETSTATE() {
        return (int)4L;
    }
    public static int ABM_GETTASKBARPOS() {
        return (int)5L;
    }
    public static int ABM_ACTIVATE() {
        return (int)6L;
    }
    public static int ABM_GETAUTOHIDEBAR() {
        return (int)7L;
    }
    public static int ABM_SETAUTOHIDEBAR() {
        return (int)8L;
    }
    public static int ABM_WINDOWPOSCHANGED() {
        return (int)9L;
    }
    public static int ABM_SETSTATE() {
        return (int)10L;
    }
    public static int ABM_GETAUTOHIDEBAREX() {
        return (int)11L;
    }
    public static int ABM_SETAUTOHIDEBAREX() {
        return (int)12L;
    }
    public static int ABN_STATECHANGE() {
        return (int)0L;
    }
    public static int ABN_POSCHANGED() {
        return (int)1L;
    }
    public static int ABN_FULLSCREENAPP() {
        return (int)2L;
    }
    public static int ABN_WINDOWARRANGE() {
        return (int)3L;
    }
    public static int ABS_AUTOHIDE() {
        return (int)1L;
    }
    public static int ABS_ALWAYSONTOP() {
        return (int)2L;
    }
    public static int ABE_LEFT() {
        return (int)0L;
    }
    public static int ABE_TOP() {
        return (int)1L;
    }
    public static int ABE_RIGHT() {
        return (int)2L;
    }
    public static int ABE_BOTTOM() {
        return (int)3L;
    }
    public static int FO_MOVE() {
        return (int)1L;
    }
    public static int FO_COPY() {
        return (int)2L;
    }
    public static int FO_DELETE() {
        return (int)3L;
    }
    public static int FO_RENAME() {
        return (int)4L;
    }
    public static int FOF_MULTIDESTFILES() {
        return (int)1L;
    }
    public static int FOF_CONFIRMMOUSE() {
        return (int)2L;
    }
    public static int FOF_SILENT() {
        return (int)4L;
    }
    public static int FOF_RENAMEONCOLLISION() {
        return (int)8L;
    }
    public static int FOF_NOCONFIRMATION() {
        return (int)16L;
    }
    public static int FOF_WANTMAPPINGHANDLE() {
        return (int)32L;
    }
    public static int FOF_ALLOWUNDO() {
        return (int)64L;
    }
    public static int FOF_FILESONLY() {
        return (int)128L;
    }
    public static int FOF_SIMPLEPROGRESS() {
        return (int)256L;
    }
    public static int FOF_NOCONFIRMMKDIR() {
        return (int)512L;
    }
    public static int FOF_NOERRORUI() {
        return (int)1024L;
    }
    public static int FOF_NOCOPYSECURITYATTRIBS() {
        return (int)2048L;
    }
    public static int FOF_NORECURSION() {
        return (int)4096L;
    }
    public static int FOF_NO_CONNECTED_ELEMENTS() {
        return (int)8192L;
    }
    public static int FOF_WANTNUKEWARNING() {
        return (int)16384L;
    }
    public static int FOF_NORECURSEREPARSE() {
        return (int)32768L;
    }
    public static int PO_DELETE() {
        return (int)19L;
    }
    public static int PO_RENAME() {
        return (int)20L;
    }
    public static int PO_PORTCHANGE() {
        return (int)32L;
    }
    public static int PO_REN_PORT() {
        return (int)52L;
    }
    public static int SE_ERR_FNF() {
        return (int)2L;
    }
    public static int SE_ERR_PNF() {
        return (int)3L;
    }
    public static int SE_ERR_ACCESSDENIED() {
        return (int)5L;
    }
    public static int SE_ERR_OOM() {
        return (int)8L;
    }
    public static int SE_ERR_DLLNOTFOUND() {
        return (int)32L;
    }
    public static int SE_ERR_SHARE() {
        return (int)26L;
    }
    public static int SE_ERR_ASSOCINCOMPLETE() {
        return (int)27L;
    }
    public static int SE_ERR_DDETIMEOUT() {
        return (int)28L;
    }
    public static int SE_ERR_DDEFAIL() {
        return (int)29L;
    }
    public static int SE_ERR_DDEBUSY() {
        return (int)30L;
    }
    public static int SE_ERR_NOASSOC() {
        return (int)31L;
    }
    public static int SEE_MASK_DEFAULT() {
        return (int)0L;
    }
    public static int SEE_MASK_CLASSNAME() {
        return (int)1L;
    }
    public static int SEE_MASK_CLASSKEY() {
        return (int)3L;
    }
    public static int SEE_MASK_IDLIST() {
        return (int)4L;
    }
    public static int SEE_MASK_INVOKEIDLIST() {
        return (int)12L;
    }
    public static int SEE_MASK_HOTKEY() {
        return (int)32L;
    }
    public static int SEE_MASK_NOCLOSEPROCESS() {
        return (int)64L;
    }
    public static int SEE_MASK_CONNECTNETDRV() {
        return (int)128L;
    }
    public static int SEE_MASK_NOASYNC() {
        return (int)256L;
    }
    public static int SEE_MASK_DOENVSUBST() {
        return (int)512L;
    }
    public static int SEE_MASK_FLAG_NO_UI() {
        return (int)1024L;
    }
    public static int SEE_MASK_UNICODE() {
        return (int)16384L;
    }
    public static int SEE_MASK_NO_CONSOLE() {
        return (int)32768L;
    }
    public static int SEE_MASK_ASYNCOK() {
        return (int)1048576L;
    }
    public static int SEE_MASK_HMONITOR() {
        return (int)2097152L;
    }
    public static int SEE_MASK_NOZONECHECKS() {
        return (int)8388608L;
    }
    public static int SEE_MASK_NOQUERYCLASSSTORE() {
        return (int)16777216L;
    }
    public static int SEE_MASK_WAITFORINPUTIDLE() {
        return (int)33554432L;
    }
    public static int SEE_MASK_FLAG_LOG_USAGE() {
        return (int)67108864L;
    }
    public static int SEE_MASK_FLAG_HINST_IS_SITE() {
        return (int)134217728L;
    }
    public static int SHERB_NOCONFIRMATION() {
        return (int)1L;
    }
    public static int SHERB_NOPROGRESSUI() {
        return (int)2L;
    }
    public static int SHERB_NOSOUND() {
        return (int)4L;
    }
    public static int NINF_KEY() {
        return (int)1L;
    }
    public static int NIM_ADD() {
        return (int)0L;
    }
    public static int NIM_MODIFY() {
        return (int)1L;
    }
    public static int NIM_DELETE() {
        return (int)2L;
    }
    public static int NIM_SETFOCUS() {
        return (int)3L;
    }
    public static int NIM_SETVERSION() {
        return (int)4L;
    }
    public static int NOTIFYICON_VERSION() {
        return (int)3L;
    }
    public static int NOTIFYICON_VERSION_4() {
        return (int)4L;
    }
    public static int NIF_MESSAGE() {
        return (int)1L;
    }
    public static int NIF_ICON() {
        return (int)2L;
    }
    public static int NIF_TIP() {
        return (int)4L;
    }
    public static int NIF_STATE() {
        return (int)8L;
    }
    public static int NIF_INFO() {
        return (int)16L;
    }
    public static int NIF_GUID() {
        return (int)32L;
    }
    public static int NIF_REALTIME() {
        return (int)64L;
    }
    public static int NIF_SHOWTIP() {
        return (int)128L;
    }
    public static int NIS_HIDDEN() {
        return (int)1L;
    }
    public static int NIS_SHAREDICON() {
        return (int)2L;
    }
    public static int NIIF_NONE() {
        return (int)0L;
    }
    public static int NIIF_INFO() {
        return (int)1L;
    }
    public static int NIIF_WARNING() {
        return (int)2L;
    }
    public static int NIIF_ERROR() {
        return (int)3L;
    }
    public static int NIIF_USER() {
        return (int)4L;
    }
    public static int NIIF_ICON_MASK() {
        return (int)15L;
    }
    public static int NIIF_NOSOUND() {
        return (int)16L;
    }
    public static int NIIF_LARGE_ICON() {
        return (int)32L;
    }
    public static int NIIF_RESPECT_QUIET_TIME() {
        return (int)128L;
    }
    public static int SHGFI_ICON() {
        return (int)256L;
    }
    public static int SHGFI_DISPLAYNAME() {
        return (int)512L;
    }
    public static int SHGFI_TYPENAME() {
        return (int)1024L;
    }
    public static int SHGFI_ATTRIBUTES() {
        return (int)2048L;
    }
    public static int SHGFI_ICONLOCATION() {
        return (int)4096L;
    }
    public static int SHGFI_EXETYPE() {
        return (int)8192L;
    }
    public static int SHGFI_SYSICONINDEX() {
        return (int)16384L;
    }
    public static int SHGFI_LINKOVERLAY() {
        return (int)32768L;
    }
    public static int SHGFI_SELECTED() {
        return (int)65536L;
    }
    public static int SHGFI_ATTR_SPECIFIED() {
        return (int)131072L;
    }
    public static int SHGFI_LARGEICON() {
        return (int)0L;
    }
    public static int SHGFI_SMALLICON() {
        return (int)1L;
    }
    public static int SHGFI_OPENICON() {
        return (int)2L;
    }
    public static int SHGFI_SHELLICONSIZE() {
        return (int)4L;
    }
    public static int SHGFI_PIDL() {
        return (int)8L;
    }
    public static int SHGFI_USEFILEATTRIBUTES() {
        return (int)16L;
    }
    public static int SHGFI_ADDOVERLAYS() {
        return (int)32L;
    }
    public static int SHGFI_OVERLAYINDEX() {
        return (int)64L;
    }
    public static int SHGSI_ICONLOCATION() {
        return (int)0L;
    }
    public static int SHGNLI_PIDL() {
        return (int)1L;
    }
    public static int SHGNLI_PREFIXNAME() {
        return (int)2L;
    }
    public static int SHGNLI_NOUNIQUE() {
        return (int)4L;
    }
    public static int SHGNLI_NOLNK() {
        return (int)8L;
    }
    public static int SHGNLI_NOLOCNAME() {
        return (int)16L;
    }
    public static int SHGNLI_USEURLEXT() {
        return (int)32L;
    }
    public static int PRINTACTION_OPEN() {
        return (int)0L;
    }
    public static int PRINTACTION_PROPERTIES() {
        return (int)1L;
    }
    public static int PRINTACTION_NETINSTALL() {
        return (int)2L;
    }
    public static int PRINTACTION_NETINSTALLLINK() {
        return (int)3L;
    }
    public static int PRINTACTION_TESTPAGE() {
        return (int)4L;
    }
    public static int PRINTACTION_OPENNETPRN() {
        return (int)5L;
    }
    public static int PRINTACTION_DOCUMENTDEFAULTS() {
        return (int)6L;
    }
    public static int PRINTACTION_SERVERPROPERTIES() {
        return (int)7L;
    }
    public static int PRINT_PROP_FORCE_NAME() {
        return (int)1L;
    }
    public static int OFFLINE_STATUS_LOCAL() {
        return (int)1L;
    }
    public static int OFFLINE_STATUS_REMOTE() {
        return (int)2L;
    }
    public static int OFFLINE_STATUS_INCOMPLETE() {
        return (int)4L;
    }
    public static int SHIL_LARGE() {
        return (int)0L;
    }
    public static int SHIL_SMALL() {
        return (int)1L;
    }
    public static int SHIL_EXTRALARGE() {
        return (int)2L;
    }
    public static int SHIL_SYSSMALL() {
        return (int)3L;
    }
    public static int SHIL_JUMBO() {
        return (int)4L;
    }
    public static int PERF_DATA_VERSION() {
        return (int)1L;
    }
    public static int PERF_DATA_REVISION() {
        return (int)1L;
    }
    public static int PERF_SIZE_DWORD() {
        return (int)0L;
    }
    public static int PERF_SIZE_LARGE() {
        return (int)256L;
    }
    public static int PERF_SIZE_ZERO() {
        return (int)512L;
    }
    public static int PERF_SIZE_VARIABLE_LEN() {
        return (int)768L;
    }
    public static int PERF_TYPE_NUMBER() {
        return (int)0L;
    }
    public static int PERF_TYPE_COUNTER() {
        return (int)1024L;
    }
    public static int PERF_TYPE_TEXT() {
        return (int)2048L;
    }
    public static int PERF_TYPE_ZERO() {
        return (int)3072L;
    }
    public static int PERF_NUMBER_HEX() {
        return (int)0L;
    }
    public static int PERF_NUMBER_DECIMAL() {
        return (int)65536L;
    }
    public static int PERF_NUMBER_DEC_1000() {
        return (int)131072L;
    }
    public static int PERF_COUNTER_VALUE() {
        return (int)0L;
    }
    public static int PERF_COUNTER_RATE() {
        return (int)65536L;
    }
    public static int PERF_COUNTER_FRACTION() {
        return (int)131072L;
    }
    public static int PERF_COUNTER_BASE() {
        return (int)196608L;
    }
    public static int PERF_COUNTER_ELAPSED() {
        return (int)262144L;
    }
    public static int PERF_COUNTER_QUEUELEN() {
        return (int)327680L;
    }
    public static int PERF_COUNTER_HISTOGRAM() {
        return (int)393216L;
    }
    public static int PERF_COUNTER_PRECISION() {
        return (int)458752L;
    }
    public static int PERF_TEXT_UNICODE() {
        return (int)0L;
    }
    public static int PERF_TEXT_ASCII() {
        return (int)65536L;
    }
    public static int PERF_TIMER_TICK() {
        return (int)0L;
    }
    public static int PERF_TIMER_100NS() {
        return (int)1048576L;
    }
    public static int PERF_OBJECT_TIMER() {
        return (int)2097152L;
    }
    public static int PERF_DELTA_COUNTER() {
        return (int)4194304L;
    }
    public static int PERF_DELTA_BASE() {
        return (int)8388608L;
    }
    public static int PERF_INVERSE_COUNTER() {
        return (int)16777216L;
    }
    public static int PERF_MULTI_COUNTER() {
        return (int)33554432L;
    }
    public static int PERF_DISPLAY_NO_SUFFIX() {
        return (int)0L;
    }
    public static int PERF_DISPLAY_PER_SEC() {
        return (int)268435456L;
    }
    public static int PERF_DISPLAY_PERCENT() {
        return (int)536870912L;
    }
    public static int PERF_DISPLAY_SECONDS() {
        return (int)805306368L;
    }
    public static int PERF_DISPLAY_NOSHOW() {
        return (int)1073741824L;
    }
    public static int PERF_DETAIL_NOVICE() {
        return (int)100L;
    }
    public static int PERF_DETAIL_ADVANCED() {
        return (int)200L;
    }
    public static int PERF_DETAIL_EXPERT() {
        return (int)300L;
    }
    public static int PERF_DETAIL_WIZARD() {
        return (int)400L;
    }
    public static int WINPERF_LOG_NONE() {
        return (int)0L;
    }
    public static int WINPERF_LOG_USER() {
        return (int)1L;
    }
    public static int WINPERF_LOG_DEBUG() {
        return (int)2L;
    }
    public static int WINPERF_LOG_VERBOSE() {
        return (int)3L;
    }
    public static int FD_SETSIZE() {
        return (int)64L;
    }
    public static int IOCPARM_MASK() {
        return (int)127L;
    }
    public static int IOC_VOID() {
        return (int)536870912L;
    }
    public static int IOC_OUT() {
        return (int)1073741824L;
    }
    public static int IPPROTO_IP() {
        return (int)0L;
    }
    public static int IPPROTO_ICMP() {
        return (int)1L;
    }
    public static int IPPROTO_IGMP() {
        return (int)2L;
    }
    public static int IPPROTO_GGP() {
        return (int)3L;
    }
    public static int IPPROTO_TCP() {
        return (int)6L;
    }
    public static int IPPROTO_PUP() {
        return (int)12L;
    }
    public static int IPPROTO_UDP() {
        return (int)17L;
    }
    public static int IPPROTO_IDP() {
        return (int)22L;
    }
    public static int IPPROTO_ND() {
        return (int)77L;
    }
    public static int IPPROTO_RAW() {
        return (int)255L;
    }
    public static int IPPROTO_MAX() {
        return (int)256L;
    }
    public static int IPPORT_ECHO() {
        return (int)7L;
    }
    public static int IPPORT_DISCARD() {
        return (int)9L;
    }
    public static int IPPORT_SYSTAT() {
        return (int)11L;
    }
    public static int IPPORT_DAYTIME() {
        return (int)13L;
    }
    public static int IPPORT_NETSTAT() {
        return (int)15L;
    }
    public static int IPPORT_FTP() {
        return (int)21L;
    }
    public static int IPPORT_TELNET() {
        return (int)23L;
    }
    public static int IPPORT_SMTP() {
        return (int)25L;
    }
    public static int IPPORT_TIMESERVER() {
        return (int)37L;
    }
    public static int IPPORT_NAMESERVER() {
        return (int)42L;
    }
    public static int IPPORT_WHOIS() {
        return (int)43L;
    }
    public static int IPPORT_MTP() {
        return (int)57L;
    }
    public static int IPPORT_TFTP() {
        return (int)69L;
    }
    public static int IPPORT_RJE() {
        return (int)77L;
    }
    public static int IPPORT_FINGER() {
        return (int)79L;
    }
    public static int IPPORT_TTYLINK() {
        return (int)87L;
    }
    public static int IPPORT_SUPDUP() {
        return (int)95L;
    }
    public static int IPPORT_EXECSERVER() {
        return (int)512L;
    }
    public static int IPPORT_LOGINSERVER() {
        return (int)513L;
    }
    public static int IPPORT_CMDSERVER() {
        return (int)514L;
    }
    public static int IPPORT_EFSSERVER() {
        return (int)520L;
    }
    public static int IPPORT_BIFFUDP() {
        return (int)512L;
    }
    public static int IPPORT_WHOSERVER() {
        return (int)513L;
    }
    public static int IPPORT_ROUTESERVER() {
        return (int)520L;
    }
    public static int IPPORT_RESERVED() {
        return (int)1024L;
    }
    public static int IMPLINK_IP() {
        return (int)155L;
    }
    public static int IMPLINK_LOWEXPER() {
        return (int)156L;
    }
    public static int IMPLINK_HIGHEXPER() {
        return (int)158L;
    }
    public static int IN_CLASSA_NSHIFT() {
        return (int)24L;
    }
    public static int IN_CLASSA_HOST() {
        return (int)16777215L;
    }
    public static int IN_CLASSA_MAX() {
        return (int)128L;
    }
    public static int IN_CLASSB_NSHIFT() {
        return (int)16L;
    }
    public static int IN_CLASSB_HOST() {
        return (int)65535L;
    }
    public static int IN_CLASSB_MAX() {
        return (int)65536L;
    }
    public static int IN_CLASSC_NSHIFT() {
        return (int)8L;
    }
    public static int IN_CLASSC_HOST() {
        return (int)255L;
    }
    public static int INADDR_LOOPBACK() {
        return (int)2130706433L;
    }
    public static int WSADESCRIPTION_LEN() {
        return (int)256L;
    }
    public static int WSASYS_STATUS_LEN() {
        return (int)128L;
    }
    public static int IP_OPTIONS() {
        return (int)1L;
    }
    public static int IP_MULTICAST_IF() {
        return (int)2L;
    }
    public static int IP_MULTICAST_TTL() {
        return (int)3L;
    }
    public static int IP_MULTICAST_LOOP() {
        return (int)4L;
    }
    public static int IP_ADD_MEMBERSHIP() {
        return (int)5L;
    }
    public static int IP_DROP_MEMBERSHIP() {
        return (int)6L;
    }
    public static int IP_TTL() {
        return (int)7L;
    }
    public static int IP_TOS() {
        return (int)8L;
    }
    public static int IP_DONTFRAGMENT() {
        return (int)9L;
    }
    public static int IP_DEFAULT_MULTICAST_TTL() {
        return (int)1L;
    }
    public static int IP_DEFAULT_MULTICAST_LOOP() {
        return (int)1L;
    }
    public static int IP_MAX_MEMBERSHIPS() {
        return (int)20L;
    }
    public static int SOCK_STREAM() {
        return (int)1L;
    }
    public static int SOCK_DGRAM() {
        return (int)2L;
    }
    public static int SOCK_RAW() {
        return (int)3L;
    }
    public static int SOCK_RDM() {
        return (int)4L;
    }
    public static int SOCK_SEQPACKET() {
        return (int)5L;
    }
    public static int SO_DEBUG() {
        return (int)1L;
    }
    public static int SO_ACCEPTCONN() {
        return (int)2L;
    }
    public static int SO_REUSEADDR() {
        return (int)4L;
    }
    public static int SO_KEEPALIVE() {
        return (int)8L;
    }
    public static int SO_DONTROUTE() {
        return (int)16L;
    }
    public static int SO_BROADCAST() {
        return (int)32L;
    }
    public static int SO_USELOOPBACK() {
        return (int)64L;
    }
    public static int SO_LINGER() {
        return (int)128L;
    }
    public static int SO_OOBINLINE() {
        return (int)256L;
    }
    public static int SO_SNDBUF() {
        return (int)4097L;
    }
    public static int SO_RCVBUF() {
        return (int)4098L;
    }
    public static int SO_SNDLOWAT() {
        return (int)4099L;
    }
    public static int SO_RCVLOWAT() {
        return (int)4100L;
    }
    public static int SO_SNDTIMEO() {
        return (int)4101L;
    }
    public static int SO_RCVTIMEO() {
        return (int)4102L;
    }
    public static int SO_ERROR() {
        return (int)4103L;
    }
    public static int SO_TYPE() {
        return (int)4104L;
    }
    public static int SO_CONNDATA() {
        return (int)28672L;
    }
    public static int SO_CONNOPT() {
        return (int)28673L;
    }
    public static int SO_DISCDATA() {
        return (int)28674L;
    }
    public static int SO_DISCOPT() {
        return (int)28675L;
    }
    public static int SO_CONNDATALEN() {
        return (int)28676L;
    }
    public static int SO_CONNOPTLEN() {
        return (int)28677L;
    }
    public static int SO_DISCDATALEN() {
        return (int)28678L;
    }
    public static int SO_DISCOPTLEN() {
        return (int)28679L;
    }
    public static int SO_OPENTYPE() {
        return (int)28680L;
    }
    public static int SO_SYNCHRONOUS_ALERT() {
        return (int)16L;
    }
    public static int SO_SYNCHRONOUS_NONALERT() {
        return (int)32L;
    }
    public static int SO_MAXDG() {
        return (int)28681L;
    }
    public static int SO_MAXPATHDG() {
        return (int)28682L;
    }
    public static int SO_UPDATE_ACCEPT_CONTEXT() {
        return (int)28683L;
    }
    public static int SO_CONNECT_TIME() {
        return (int)28684L;
    }
    public static int TCP_NODELAY() {
        return (int)1L;
    }
    public static int TCP_BSDURGENT() {
        return (int)28672L;
    }
    public static int AF_UNSPEC() {
        return (int)0L;
    }
    public static int AF_UNIX() {
        return (int)1L;
    }
    public static int AF_INET() {
        return (int)2L;
    }
    public static int AF_IMPLINK() {
        return (int)3L;
    }
    public static int AF_PUP() {
        return (int)4L;
    }
    public static int AF_CHAOS() {
        return (int)5L;
    }
    public static int AF_IPX() {
        return (int)6L;
    }
    public static int AF_NS() {
        return (int)6L;
    }
    public static int AF_ISO() {
        return (int)7L;
    }
    public static int AF_ECMA() {
        return (int)8L;
    }
    public static int AF_DATAKIT() {
        return (int)9L;
    }
    public static int AF_CCITT() {
        return (int)10L;
    }
    public static int AF_SNA() {
        return (int)11L;
    }
    public static int AF_DECnet() {
        return (int)12L;
    }
    public static int AF_DLI() {
        return (int)13L;
    }
    public static int AF_LAT() {
        return (int)14L;
    }
    public static int AF_HYLINK() {
        return (int)15L;
    }
    public static int AF_APPLETALK() {
        return (int)16L;
    }
    public static int AF_NETBIOS() {
        return (int)17L;
    }
    public static int AF_VOICEVIEW() {
        return (int)18L;
    }
    public static int AF_FIREFOX() {
        return (int)19L;
    }
    public static int AF_UNKNOWN1() {
        return (int)20L;
    }
    public static int AF_BAN() {
        return (int)21L;
    }
    public static int AF_MAX() {
        return (int)22L;
    }
    public static int SOL_SOCKET() {
        return (int)65535L;
    }
    public static int SOMAXCONN() {
        return (int)5L;
    }
    public static int MSG_OOB() {
        return (int)1L;
    }
    public static int MSG_PEEK() {
        return (int)2L;
    }
    public static int MSG_DONTROUTE() {
        return (int)4L;
    }
    public static int MSG_MAXIOVLEN() {
        return (int)16L;
    }
    public static int MSG_PARTIAL() {
        return (int)32768L;
    }
    public static int MAXGETHOSTSTRUCT() {
        return (int)1024L;
    }
    public static int FD_READ() {
        return (int)1L;
    }
    public static int FD_WRITE() {
        return (int)2L;
    }
    public static int FD_OOB() {
        return (int)4L;
    }
    public static int FD_ACCEPT() {
        return (int)8L;
    }
    public static int FD_CONNECT() {
        return (int)16L;
    }
    public static int FD_CLOSE() {
        return (int)32L;
    }
    public static int TF_DISCONNECT() {
        return (int)1L;
    }
    public static int TF_REUSE_SOCKET() {
        return (int)2L;
    }
    public static int TF_WRITE_BEHIND() {
        return (int)4L;
    }
    public static int ALG_SID_RSA_ANY() {
        return (int)0L;
    }
    public static int ALG_SID_RSA_PKCS() {
        return (int)1L;
    }
    public static int ALG_SID_RSA_MSATWORK() {
        return (int)2L;
    }
    public static int ALG_SID_RSA_ENTRUST() {
        return (int)3L;
    }
    public static int ALG_SID_RSA_PGP() {
        return (int)4L;
    }
    public static int ALG_SID_DSS_ANY() {
        return (int)0L;
    }
    public static int ALG_SID_DSS_PKCS() {
        return (int)1L;
    }
    public static int ALG_SID_DSS_DMS() {
        return (int)2L;
    }
    public static int ALG_SID_ECDSA() {
        return (int)3L;
    }
    public static int ALG_SID_DES() {
        return (int)1L;
    }
    public static int ALG_SID_3DES() {
        return (int)3L;
    }
    public static int ALG_SID_DESX() {
        return (int)4L;
    }
    public static int ALG_SID_IDEA() {
        return (int)5L;
    }
    public static int ALG_SID_CAST() {
        return (int)6L;
    }
    public static int ALG_SID_SAFERSK64() {
        return (int)7L;
    }
    public static int ALG_SID_SAFERSK128() {
        return (int)8L;
    }
    public static int ALG_SID_3DES_112() {
        return (int)9L;
    }
    public static int ALG_SID_CYLINK_MEK() {
        return (int)12L;
    }
    public static int ALG_SID_RC5() {
        return (int)13L;
    }
    public static int ALG_SID_AES_128() {
        return (int)14L;
    }
    public static int ALG_SID_AES_192() {
        return (int)15L;
    }
    public static int ALG_SID_AES_256() {
        return (int)16L;
    }
    public static int ALG_SID_AES() {
        return (int)17L;
    }
    public static int ALG_SID_SKIPJACK() {
        return (int)10L;
    }
    public static int ALG_SID_TEK() {
        return (int)11L;
    }
    public static int CRYPT_MODE_CBCI() {
        return (int)6L;
    }
    public static int CRYPT_MODE_CFBP() {
        return (int)7L;
    }
    public static int CRYPT_MODE_OFBP() {
        return (int)8L;
    }
    public static int CRYPT_MODE_CBCOFM() {
        return (int)9L;
    }
    public static int CRYPT_MODE_CBCOFMI() {
        return (int)10L;
    }
    public static int ALG_SID_RC2() {
        return (int)2L;
    }
    public static int ALG_SID_RC4() {
        return (int)1L;
    }
    public static int ALG_SID_SEAL() {
        return (int)2L;
    }
    public static int ALG_SID_DH_SANDF() {
        return (int)1L;
    }
    public static int ALG_SID_DH_EPHEM() {
        return (int)2L;
    }
    public static int ALG_SID_AGREED_KEY_ANY() {
        return (int)3L;
    }
    public static int ALG_SID_KEA() {
        return (int)4L;
    }
    public static int ALG_SID_ECDH() {
        return (int)5L;
    }
    public static int ALG_SID_ECDH_EPHEM() {
        return (int)6L;
    }
    public static int ALG_SID_MD2() {
        return (int)1L;
    }
    public static int ALG_SID_MD4() {
        return (int)2L;
    }
    public static int ALG_SID_MD5() {
        return (int)3L;
    }
    public static int ALG_SID_SHA() {
        return (int)4L;
    }
    public static int ALG_SID_SHA1() {
        return (int)4L;
    }
    public static int ALG_SID_MAC() {
        return (int)5L;
    }
    public static int ALG_SID_RIPEMD() {
        return (int)6L;
    }
    public static int ALG_SID_RIPEMD160() {
        return (int)7L;
    }
    public static int ALG_SID_SSL3SHAMD5() {
        return (int)8L;
    }
    public static int ALG_SID_HMAC() {
        return (int)9L;
    }
    public static int ALG_SID_TLS1PRF() {
        return (int)10L;
    }
    public static int ALG_SID_HASH_REPLACE_OWF() {
        return (int)11L;
    }
    public static int ALG_SID_SHA_256() {
        return (int)12L;
    }
    public static int ALG_SID_SHA_384() {
        return (int)13L;
    }
    public static int ALG_SID_SHA_512() {
        return (int)14L;
    }
    public static int ALG_SID_SSL3_MASTER() {
        return (int)1L;
    }
    public static int ALG_SID_SCHANNEL_MASTER_HASH() {
        return (int)2L;
    }
    public static int ALG_SID_SCHANNEL_MAC_KEY() {
        return (int)3L;
    }
    public static int ALG_SID_PCT1_MASTER() {
        return (int)4L;
    }
    public static int ALG_SID_SSL2_MASTER() {
        return (int)5L;
    }
    public static int ALG_SID_TLS1_MASTER() {
        return (int)6L;
    }
    public static int ALG_SID_SCHANNEL_ENC_KEY() {
        return (int)7L;
    }
    public static int ALG_SID_ECMQV() {
        return (int)1L;
    }
    public static int ALG_SID_EXAMPLE() {
        return (int)80L;
    }
    public static int CRYPT_NEWKEYSET() {
        return (int)8L;
    }
    public static int CRYPT_DELETEKEYSET() {
        return (int)16L;
    }
    public static int CRYPT_MACHINE_KEYSET() {
        return (int)32L;
    }
    public static int CRYPT_SILENT() {
        return (int)64L;
    }
    public static int CRYPT_DEFAULT_CONTAINER_OPTIONAL() {
        return (int)128L;
    }
    public static int CRYPT_EXPORTABLE() {
        return (int)1L;
    }
    public static int CRYPT_USER_PROTECTED() {
        return (int)2L;
    }
    public static int CRYPT_CREATE_SALT() {
        return (int)4L;
    }
    public static int CRYPT_UPDATE_KEY() {
        return (int)8L;
    }
    public static int CRYPT_NO_SALT() {
        return (int)16L;
    }
    public static int CRYPT_PREGEN() {
        return (int)64L;
    }
    public static int CRYPT_RECIPIENT() {
        return (int)16L;
    }
    public static int CRYPT_INITIATOR() {
        return (int)64L;
    }
    public static int CRYPT_ONLINE() {
        return (int)128L;
    }
    public static int CRYPT_SF() {
        return (int)256L;
    }
    public static int CRYPT_CREATE_IV() {
        return (int)512L;
    }
    public static int CRYPT_KEK() {
        return (int)1024L;
    }
    public static int CRYPT_DATA_KEY() {
        return (int)2048L;
    }
    public static int CRYPT_VOLATILE() {
        return (int)4096L;
    }
    public static int CRYPT_SGCKEY() {
        return (int)8192L;
    }
    public static int CRYPT_USER_PROTECTED_STRONG() {
        return (int)1048576L;
    }
    public static int CRYPT_ARCHIVABLE() {
        return (int)16384L;
    }
    public static int CRYPT_FORCE_KEY_PROTECTION_HIGH() {
        return (int)32768L;
    }
    public static int RSA1024BIT_KEY() {
        return (int)67108864L;
    }
    public static int CRYPT_SERVER() {
        return (int)1024L;
    }
    public static int CRYPT_Y_ONLY() {
        return (int)1L;
    }
    public static int CRYPT_SSL2_FALLBACK() {
        return (int)2L;
    }
    public static int CRYPT_DESTROYKEY() {
        return (int)4L;
    }
    public static int CRYPT_OAEP() {
        return (int)64L;
    }
    public static int CRYPT_BLOB_VER3() {
        return (int)128L;
    }
    public static int CRYPT_IPSEC_HMAC_KEY() {
        return (int)256L;
    }
    public static int CRYPT_DECRYPT_RSA_NO_PADDING_CHECK() {
        return (int)32L;
    }
    public static int CRYPT_SECRETDIGEST() {
        return (int)1L;
    }
    public static int CRYPT_OWF_REPL_LM_HASH() {
        return (int)1L;
    }
    public static int CRYPT_LITTLE_ENDIAN() {
        return (int)1L;
    }
    public static int CRYPT_NOHASHOID() {
        return (int)1L;
    }
    public static int CRYPT_TYPE2_FORMAT() {
        return (int)2L;
    }
    public static int CRYPT_X931_FORMAT() {
        return (int)4L;
    }
    public static int CRYPT_MACHINE_DEFAULT() {
        return (int)1L;
    }
    public static int CRYPT_USER_DEFAULT() {
        return (int)2L;
    }
    public static int CRYPT_DELETE_DEFAULT() {
        return (int)4L;
    }
    public static int SIMPLEBLOB() {
        return (int)1L;
    }
    public static int PUBLICKEYBLOB() {
        return (int)6L;
    }
    public static int PRIVATEKEYBLOB() {
        return (int)7L;
    }
    public static int PLAINTEXTKEYBLOB() {
        return (int)8L;
    }
    public static int OPAQUEKEYBLOB() {
        return (int)9L;
    }
    public static int PUBLICKEYBLOBEX() {
        return (int)10L;
    }
    public static int SYMMETRICWRAPKEYBLOB() {
        return (int)11L;
    }
    public static int KEYSTATEBLOB() {
        return (int)12L;
    }
    public static int AT_KEYEXCHANGE() {
        return (int)1L;
    }
    public static int AT_SIGNATURE() {
        return (int)2L;
    }
    public static int CRYPT_USERDATA() {
        return (int)1L;
    }
    public static int KP_IV() {
        return (int)1L;
    }
    public static int KP_SALT() {
        return (int)2L;
    }
    public static int KP_PADDING() {
        return (int)3L;
    }
    public static int KP_MODE() {
        return (int)4L;
    }
    public static int KP_MODE_BITS() {
        return (int)5L;
    }
    public static int KP_PERMISSIONS() {
        return (int)6L;
    }
    public static int KP_ALGID() {
        return (int)7L;
    }
    public static int KP_BLOCKLEN() {
        return (int)8L;
    }
    public static int KP_KEYLEN() {
        return (int)9L;
    }
    public static int KP_SALT_EX() {
        return (int)10L;
    }
    public static int KP_P() {
        return (int)11L;
    }
    public static int KP_G() {
        return (int)12L;
    }
    public static int KP_Q() {
        return (int)13L;
    }
    public static int KP_X() {
        return (int)14L;
    }
    public static int KP_Y() {
        return (int)15L;
    }
    public static int KP_RA() {
        return (int)16L;
    }
    public static int KP_RB() {
        return (int)17L;
    }
    public static int KP_INFO() {
        return (int)18L;
    }
    public static int KP_EFFECTIVE_KEYLEN() {
        return (int)19L;
    }
    public static int KP_SCHANNEL_ALG() {
        return (int)20L;
    }
    public static int KP_CLIENT_RANDOM() {
        return (int)21L;
    }
    public static int KP_SERVER_RANDOM() {
        return (int)22L;
    }
    public static int KP_RP() {
        return (int)23L;
    }
    public static int KP_PRECOMP_MD5() {
        return (int)24L;
    }
    public static int KP_PRECOMP_SHA() {
        return (int)25L;
    }
    public static int KP_CERTIFICATE() {
        return (int)26L;
    }
    public static int KP_CLEAR_KEY() {
        return (int)27L;
    }
    public static int KP_PUB_EX_LEN() {
        return (int)28L;
    }
    public static int KP_PUB_EX_VAL() {
        return (int)29L;
    }
    public static int KP_KEYVAL() {
        return (int)30L;
    }
    public static int KP_ADMIN_PIN() {
        return (int)31L;
    }
    public static int KP_KEYEXCHANGE_PIN() {
        return (int)32L;
    }
    public static int KP_SIGNATURE_PIN() {
        return (int)33L;
    }
    public static int KP_PREHASH() {
        return (int)34L;
    }
    public static int KP_ROUNDS() {
        return (int)35L;
    }
    public static int KP_OAEP_PARAMS() {
        return (int)36L;
    }
    public static int KP_CMS_KEY_INFO() {
        return (int)37L;
    }
    public static int KP_CMS_DH_KEY_INFO() {
        return (int)38L;
    }
    public static int KP_PUB_PARAMS() {
        return (int)39L;
    }
    public static int KP_VERIFY_PARAMS() {
        return (int)40L;
    }
    public static int KP_HIGHEST_VERSION() {
        return (int)41L;
    }
    public static int KP_GET_USE_COUNT() {
        return (int)42L;
    }
    public static int KP_PIN_ID() {
        return (int)43L;
    }
    public static int KP_PIN_INFO() {
        return (int)44L;
    }
    public static int PKCS5_PADDING() {
        return (int)1L;
    }
    public static int RANDOM_PADDING() {
        return (int)2L;
    }
    public static int ZERO_PADDING() {
        return (int)3L;
    }
    public static int CRYPT_MODE_CBC() {
        return (int)1L;
    }
    public static int CRYPT_MODE_ECB() {
        return (int)2L;
    }
    public static int CRYPT_MODE_OFB() {
        return (int)3L;
    }
    public static int CRYPT_MODE_CFB() {
        return (int)4L;
    }
    public static int CRYPT_MODE_CTS() {
        return (int)5L;
    }
    public static int CRYPT_ENCRYPT() {
        return (int)1L;
    }
    public static int CRYPT_DECRYPT() {
        return (int)2L;
    }
    public static int CRYPT_EXPORT() {
        return (int)4L;
    }
    public static int CRYPT_READ() {
        return (int)8L;
    }
    public static int CRYPT_WRITE() {
        return (int)16L;
    }
    public static int CRYPT_MAC() {
        return (int)32L;
    }
    public static int CRYPT_EXPORT_KEY() {
        return (int)64L;
    }
    public static int CRYPT_IMPORT_KEY() {
        return (int)128L;
    }
    public static int CRYPT_ARCHIVE() {
        return (int)256L;
    }
    public static int HP_ALGID() {
        return (int)1L;
    }
    public static int HP_HASHVAL() {
        return (int)2L;
    }
    public static int HP_HASHSIZE() {
        return (int)4L;
    }
    public static int HP_HMAC_INFO() {
        return (int)5L;
    }
    public static int HP_TLS1PRF_LABEL() {
        return (int)6L;
    }
    public static int HP_TLS1PRF_SEED() {
        return (int)7L;
    }
    public static int PP_ENUMALGS() {
        return (int)1L;
    }
    public static int PP_ENUMCONTAINERS() {
        return (int)2L;
    }
    public static int PP_IMPTYPE() {
        return (int)3L;
    }
    public static int PP_NAME() {
        return (int)4L;
    }
    public static int PP_VERSION() {
        return (int)5L;
    }
    public static int PP_CONTAINER() {
        return (int)6L;
    }
    public static int PP_CHANGE_PASSWORD() {
        return (int)7L;
    }
    public static int PP_KEYSET_SEC_DESCR() {
        return (int)8L;
    }
    public static int PP_CERTCHAIN() {
        return (int)9L;
    }
    public static int PP_KEY_TYPE_SUBTYPE() {
        return (int)10L;
    }
    public static int PP_PROVTYPE() {
        return (int)16L;
    }
    public static int PP_KEYSTORAGE() {
        return (int)17L;
    }
    public static int PP_APPLI_CERT() {
        return (int)18L;
    }
    public static int PP_SYM_KEYSIZE() {
        return (int)19L;
    }
    public static int PP_SESSION_KEYSIZE() {
        return (int)20L;
    }
    public static int PP_UI_PROMPT() {
        return (int)21L;
    }
    public static int PP_ENUMALGS_EX() {
        return (int)22L;
    }
    public static int PP_ENUMMANDROOTS() {
        return (int)25L;
    }
    public static int PP_ENUMELECTROOTS() {
        return (int)26L;
    }
    public static int PP_KEYSET_TYPE() {
        return (int)27L;
    }
    public static int PP_ADMIN_PIN() {
        return (int)31L;
    }
    public static int PP_KEYEXCHANGE_PIN() {
        return (int)32L;
    }
    public static int PP_SIGNATURE_PIN() {
        return (int)33L;
    }
    public static int PP_SIG_KEYSIZE_INC() {
        return (int)34L;
    }
    public static int PP_KEYX_KEYSIZE_INC() {
        return (int)35L;
    }
    public static int PP_UNIQUE_CONTAINER() {
        return (int)36L;
    }
    public static int PP_SGC_INFO() {
        return (int)37L;
    }
    public static int PP_USE_HARDWARE_RNG() {
        return (int)38L;
    }
    public static int PP_KEYSPEC() {
        return (int)39L;
    }
    public static int PP_ENUMEX_SIGNING_PROT() {
        return (int)40L;
    }
    public static int PP_CRYPT_COUNT_KEY_USE() {
        return (int)41L;
    }
    public static int PP_USER_CERTSTORE() {
        return (int)42L;
    }
    public static int PP_SMARTCARD_READER() {
        return (int)43L;
    }
    public static int PP_SMARTCARD_GUID() {
        return (int)45L;
    }
    public static int PP_ROOT_CERTSTORE() {
        return (int)46L;
    }
    public static int PP_SMARTCARD_READER_ICON() {
        return (int)47L;
    }
    public static int CRYPT_FIRST() {
        return (int)1L;
    }
    public static int CRYPT_NEXT() {
        return (int)2L;
    }
    public static int CRYPT_SGC_ENUM() {
        return (int)4L;
    }
    public static int CRYPT_IMPL_HARDWARE() {
        return (int)1L;
    }
    public static int CRYPT_IMPL_SOFTWARE() {
        return (int)2L;
    }
    public static int CRYPT_IMPL_MIXED() {
        return (int)3L;
    }
    public static int CRYPT_IMPL_UNKNOWN() {
        return (int)4L;
    }
    public static int CRYPT_IMPL_REMOVABLE() {
        return (int)8L;
    }
    public static int CRYPT_SEC_DESCR() {
        return (int)1L;
    }
    public static int CRYPT_PSTORE() {
        return (int)2L;
    }
    public static int CRYPT_UI_PROMPT() {
        return (int)4L;
    }
    public static int CRYPT_FLAG_PCT1() {
        return (int)1L;
    }
    public static int CRYPT_FLAG_SSL2() {
        return (int)2L;
    }
    public static int CRYPT_FLAG_SSL3() {
        return (int)4L;
    }
    public static int CRYPT_FLAG_TLS1() {
        return (int)8L;
    }
    public static int CRYPT_FLAG_IPSEC() {
        return (int)16L;
    }
    public static int CRYPT_FLAG_SIGNING() {
        return (int)32L;
    }
    public static int CRYPT_SGC() {
        return (int)1L;
    }
    public static int CRYPT_FASTSGC() {
        return (int)2L;
    }
    public static int PP_CLIENT_HWND() {
        return (int)1L;
    }
    public static int PP_CONTEXT_INFO() {
        return (int)11L;
    }
    public static int PP_KEYEXCHANGE_KEYSIZE() {
        return (int)12L;
    }
    public static int PP_SIGNATURE_KEYSIZE() {
        return (int)13L;
    }
    public static int PP_KEYEXCHANGE_ALG() {
        return (int)14L;
    }
    public static int PP_SIGNATURE_ALG() {
        return (int)15L;
    }
    public static int PP_DELETEKEY() {
        return (int)24L;
    }
    public static int PP_PIN_PROMPT_STRING() {
        return (int)44L;
    }
    public static int PP_SECURE_KEYEXCHANGE_PIN() {
        return (int)47L;
    }
    public static int PP_SECURE_SIGNATURE_PIN() {
        return (int)48L;
    }
    public static int PP_DISMISS_PIN_UI_SEC() {
        return (int)49L;
    }
    public static int PROV_RSA_FULL() {
        return (int)1L;
    }
    public static int PROV_RSA_SIG() {
        return (int)2L;
    }
    public static int PROV_DSS() {
        return (int)3L;
    }
    public static int PROV_FORTEZZA() {
        return (int)4L;
    }
    public static int PROV_MS_EXCHANGE() {
        return (int)5L;
    }
    public static int PROV_SSL() {
        return (int)6L;
    }
    public static int PROV_RSA_SCHANNEL() {
        return (int)12L;
    }
    public static int PROV_DSS_DH() {
        return (int)13L;
    }
    public static int PROV_EC_ECDSA_SIG() {
        return (int)14L;
    }
    public static int PROV_EC_ECNRA_SIG() {
        return (int)15L;
    }
    public static int PROV_EC_ECDSA_FULL() {
        return (int)16L;
    }
    public static int PROV_EC_ECNRA_FULL() {
        return (int)17L;
    }
    public static int PROV_DH_SCHANNEL() {
        return (int)18L;
    }
    public static int PROV_SPYRUS_LYNKS() {
        return (int)20L;
    }
    public static int PROV_RNG() {
        return (int)21L;
    }
    public static int PROV_INTEL_SEC() {
        return (int)22L;
    }
    public static int PROV_REPLACE_OWF() {
        return (int)23L;
    }
    public static int PROV_RSA_AES() {
        return (int)24L;
    }
    public static int MAXUIDLEN() {
        return (int)64L;
    }
    public static int cPRIV_KEY_CACHE_MAX_ITEMS_DEFAULT() {
        return (int)20L;
    }
    public static int cPRIV_KEY_CACHE_PURGE_INTERVAL_SECONDS_DEFAULT() {
        return (int)86400L;
    }
    public static int CUR_BLOB_VERSION() {
        return (int)2L;
    }
    public static int SCHANNEL_MAC_KEY() {
        return (int)0L;
    }
    public static int SCHANNEL_ENC_KEY() {
        return (int)1L;
    }
    public static int INTERNATIONAL_USAGE() {
        return (int)1L;
    }
    public static int BCRYPT_OBJECT_ALIGNMENT() {
        return (int)16L;
    }
    public static int KDF_HASH_ALGORITHM() {
        return (int)0L;
    }
    public static int KDF_SECRET_PREPEND() {
        return (int)1L;
    }
    public static int KDF_SECRET_APPEND() {
        return (int)2L;
    }
    public static int KDF_HMAC_KEY() {
        return (int)3L;
    }
    public static int KDF_TLS_PRF_LABEL() {
        return (int)4L;
    }
    public static int KDF_TLS_PRF_SEED() {
        return (int)5L;
    }
    public static int KDF_SECRET_HANDLE() {
        return (int)6L;
    }
    public static int KDF_TLS_PRF_PROTOCOL() {
        return (int)7L;
    }
    public static int KDF_ALGORITHMID() {
        return (int)8L;
    }
    public static int KDF_PARTYUINFO() {
        return (int)9L;
    }
    public static int KDF_PARTYVINFO() {
        return (int)10L;
    }
    public static int KDF_SUPPPUBINFO() {
        return (int)11L;
    }
    public static int KDF_SUPPPRIVINFO() {
        return (int)12L;
    }
    public static int KDF_LABEL() {
        return (int)13L;
    }
    public static int KDF_CONTEXT() {
        return (int)14L;
    }
    public static int KDF_SALT() {
        return (int)15L;
    }
    public static int KDF_ITERATION_COUNT() {
        return (int)16L;
    }
    public static int KDF_GENERIC_PARAMETER() {
        return (int)17L;
    }
    public static int KDF_KEYBITLENGTH() {
        return (int)18L;
    }
    public static int KDF_HKDF_SALT() {
        return (int)19L;
    }
    public static int KDF_HKDF_INFO() {
        return (int)20L;
    }
    public static int KDF_USE_SECRET_AS_HMAC_KEY_FLAG() {
        return (int)1L;
    }
    public static int BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO_VERSION() {
        return (int)1L;
    }
    public static int BCRYPT_AUTH_MODE_CHAIN_CALLS_FLAG() {
        return (int)1L;
    }
    public static int BCRYPT_AUTH_MODE_IN_PROGRESS_FLAG() {
        return (int)2L;
    }
    public static int BCRYPT_SUPPORTED_PAD_ROUTER() {
        return (int)1L;
    }
    public static int BCRYPT_SUPPORTED_PAD_PKCS1_ENC() {
        return (int)2L;
    }
    public static int BCRYPT_SUPPORTED_PAD_PKCS1_SIG() {
        return (int)4L;
    }
    public static int BCRYPT_SUPPORTED_PAD_OAEP() {
        return (int)8L;
    }
    public static int BCRYPT_SUPPORTED_PAD_PSS() {
        return (int)16L;
    }
    public static int BCRYPT_PROV_DISPATCH() {
        return (int)1L;
    }
    public static int BCRYPT_BLOCK_PADDING() {
        return (int)1L;
    }
    public static int BCRYPT_PAD_NONE() {
        return (int)1L;
    }
    public static int BCRYPT_PAD_PKCS1() {
        return (int)2L;
    }
    public static int BCRYPT_PAD_OAEP() {
        return (int)4L;
    }
    public static int BCRYPT_PAD_PSS() {
        return (int)8L;
    }
    public static int BCRYPT_PAD_PKCS1_OPTIONAL_HASH_OID() {
        return (int)16L;
    }
    public static int BCRYPTBUFFER_VERSION() {
        return (int)0L;
    }
    public static int BCRYPT_RSAPUBLIC_MAGIC() {
        return (int)826364754L;
    }
    public static int BCRYPT_RSAPRIVATE_MAGIC() {
        return (int)843141970L;
    }
    public static int BCRYPT_RSAFULLPRIVATE_MAGIC() {
        return (int)859919186L;
    }
    public static int BCRYPT_ECDH_PUBLIC_P256_MAGIC() {
        return (int)827016005L;
    }
    public static int BCRYPT_ECDH_PRIVATE_P256_MAGIC() {
        return (int)843793221L;
    }
    public static int BCRYPT_ECDH_PUBLIC_P384_MAGIC() {
        return (int)860570437L;
    }
    public static int BCRYPT_ECDH_PRIVATE_P384_MAGIC() {
        return (int)877347653L;
    }
    public static int BCRYPT_ECDH_PUBLIC_P521_MAGIC() {
        return (int)894124869L;
    }
    public static int BCRYPT_ECDH_PRIVATE_P521_MAGIC() {
        return (int)910902085L;
    }
    public static int BCRYPT_ECDH_PUBLIC_GENERIC_MAGIC() {
        return (int)1347109701L;
    }
    public static int BCRYPT_ECDH_PRIVATE_GENERIC_MAGIC() {
        return (int)1447772997L;
    }
    public static int BCRYPT_ECDSA_PUBLIC_P256_MAGIC() {
        return (int)827540293L;
    }
    public static int BCRYPT_ECDSA_PRIVATE_P256_MAGIC() {
        return (int)844317509L;
    }
    public static int BCRYPT_ECDSA_PUBLIC_P384_MAGIC() {
        return (int)861094725L;
    }
    public static int BCRYPT_ECDSA_PRIVATE_P384_MAGIC() {
        return (int)877871941L;
    }
    public static int BCRYPT_ECDSA_PUBLIC_P521_MAGIC() {
        return (int)894649157L;
    }
    public static int BCRYPT_ECDSA_PRIVATE_P521_MAGIC() {
        return (int)911426373L;
    }
    public static int BCRYPT_ECDSA_PUBLIC_GENERIC_MAGIC() {
        return (int)1346650949L;
    }
    public static int BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC() {
        return (int)1447314245L;
    }
    public static int BCRYPT_ECC_FULLKEY_BLOB_V1() {
        return (int)1L;
    }
    public static int BCRYPT_DH_PUBLIC_MAGIC() {
        return (int)1112557636L;
    }
    public static int BCRYPT_DH_PRIVATE_MAGIC() {
        return (int)1448101956L;
    }
    public static int BCRYPT_DH_PARAMETERS_MAGIC() {
        return (int)1297107012L;
    }
    public static int BCRYPT_DSA_PUBLIC_MAGIC() {
        return (int)1112560452L;
    }
    public static int BCRYPT_DSA_PRIVATE_MAGIC() {
        return (int)1448104772L;
    }
    public static int BCRYPT_DSA_PUBLIC_MAGIC_V2() {
        return (int)843206724L;
    }
    public static int BCRYPT_DSA_PRIVATE_MAGIC_V2() {
        return (int)844517444L;
    }
    public static int BCRYPT_KEY_DATA_BLOB_MAGIC() {
        return (int)1296188491L;
    }
    public static int BCRYPT_KEY_DATA_BLOB_VERSION1() {
        return (int)1L;
    }
    public static int BCRYPT_DSA_PARAMETERS_MAGIC() {
        return (int)1297109828L;
    }
    public static int BCRYPT_DSA_PARAMETERS_MAGIC_V2() {
        return (int)843927620L;
    }
    public static int BCRYPT_ECC_PARAMETERS_MAGIC() {
        return (int)1346585413L;
    }
    public static int BCRYPT_CIPHER_INTERFACE() {
        return (int)1L;
    }
    public static int BCRYPT_HASH_INTERFACE() {
        return (int)2L;
    }
    public static int BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE() {
        return (int)3L;
    }
    public static int BCRYPT_SECRET_AGREEMENT_INTERFACE() {
        return (int)4L;
    }
    public static int BCRYPT_SIGNATURE_INTERFACE() {
        return (int)5L;
    }
    public static int BCRYPT_RNG_INTERFACE() {
        return (int)6L;
    }
    public static int BCRYPT_KEY_DERIVATION_INTERFACE() {
        return (int)7L;
    }
    public static int BCRYPT_ALG_HANDLE_HMAC_FLAG() {
        return (int)8L;
    }
    public static int BCRYPT_HASH_REUSABLE_FLAG() {
        return (int)32L;
    }
    public static int BCRYPT_CAPI_AES_FLAG() {
        return (int)16L;
    }
    public static int BCRYPT_MULTI_FLAG() {
        return (int)64L;
    }
    public static int BCRYPT_TLS_CBC_HMAC_VERIFY_FLAG() {
        return (int)4L;
    }
    public static int BCRYPT_BUFFERS_LOCKED_FLAG() {
        return (int)64L;
    }
    public static int BCRYPT_EXTENDED_KEYSIZE() {
        return (int)128L;
    }
    public static int BCRYPT_ENABLE_INCOMPATIBLE_FIPS_CHECKS() {
        return (int)256L;
    }
    public static int BCRYPT_CIPHER_OPERATION() {
        return (int)1L;
    }
    public static int BCRYPT_HASH_OPERATION() {
        return (int)2L;
    }
    public static int BCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION() {
        return (int)4L;
    }
    public static int BCRYPT_SECRET_AGREEMENT_OPERATION() {
        return (int)8L;
    }
    public static int BCRYPT_SIGNATURE_OPERATION() {
        return (int)16L;
    }
    public static int BCRYPT_RNG_OPERATION() {
        return (int)32L;
    }
    public static int BCRYPT_KEY_DERIVATION_OPERATION() {
        return (int)64L;
    }
    public static int BCRYPT_PUBLIC_KEY_FLAG() {
        return (int)1L;
    }
    public static int BCRYPT_PRIVATE_KEY_FLAG() {
        return (int)2L;
    }
    public static int BCRYPT_NO_KEY_VALIDATION() {
        return (int)8L;
    }
    public static int BCRYPT_RNG_USE_ENTROPY_IN_BUFFER() {
        return (int)1L;
    }
    public static int BCRYPT_USE_SYSTEM_PREFERRED_RNG() {
        return (int)2L;
    }
    public static int BCRYPT_HASH_INTERFACE_MAJORVERSION_2() {
        return (int)2L;
    }
    public static int NCRYPT_MAX_KEY_NAME_LENGTH() {
        return (int)512L;
    }
    public static int NCRYPT_MAX_ALG_ID_LENGTH() {
        return (int)512L;
    }
    public static int NCRYPT_KEY_STORAGE_INTERFACE() {
        return (int)65537L;
    }
    public static int NCRYPT_SCHANNEL_INTERFACE() {
        return (int)65538L;
    }
    public static int NCRYPT_SCHANNEL_SIGNATURE_INTERFACE() {
        return (int)65539L;
    }
    public static int NCRYPT_KEY_PROTECTION_INTERFACE() {
        return (int)65540L;
    }
    public static int NCRYPTBUFFER_VERSION() {
        return (int)0L;
    }
    public static int NCRYPTBUFFER_EMPTY() {
        return (int)0L;
    }
    public static int NCRYPTBUFFER_DATA() {
        return (int)1L;
    }
    public static int NCRYPTBUFFER_PROTECTION_DESCRIPTOR_STRING() {
        return (int)3L;
    }
    public static int NCRYPTBUFFER_PROTECTION_FLAGS() {
        return (int)4L;
    }
    public static int NCRYPTBUFFER_SSL_CLIENT_RANDOM() {
        return (int)20L;
    }
    public static int NCRYPTBUFFER_SSL_SERVER_RANDOM() {
        return (int)21L;
    }
    public static int NCRYPTBUFFER_SSL_HIGHEST_VERSION() {
        return (int)22L;
    }
    public static int NCRYPTBUFFER_SSL_CLEAR_KEY() {
        return (int)23L;
    }
    public static int NCRYPTBUFFER_SSL_KEY_ARG_DATA() {
        return (int)24L;
    }
    public static int NCRYPTBUFFER_SSL_SESSION_HASH() {
        return (int)25L;
    }
    public static int NCRYPTBUFFER_PKCS_OID() {
        return (int)40L;
    }
    public static int NCRYPTBUFFER_PKCS_ALG_OID() {
        return (int)41L;
    }
    public static int NCRYPTBUFFER_PKCS_ALG_PARAM() {
        return (int)42L;
    }
    public static int NCRYPTBUFFER_PKCS_ALG_ID() {
        return (int)43L;
    }
    public static int NCRYPTBUFFER_PKCS_ATTRS() {
        return (int)44L;
    }
    public static int NCRYPTBUFFER_PKCS_KEY_NAME() {
        return (int)45L;
    }
    public static int NCRYPTBUFFER_PKCS_SECRET() {
        return (int)46L;
    }
    public static int NCRYPTBUFFER_CERT_BLOB() {
        return (int)47L;
    }
    public static int NCRYPTBUFFER_CLAIM_IDBINDING_NONCE() {
        return (int)48L;
    }
    public static int NCRYPTBUFFER_CLAIM_KEYATTESTATION_NONCE() {
        return (int)49L;
    }
    public static int NCRYPTBUFFER_KEY_PROPERTY_FLAGS() {
        return (int)50L;
    }
    public static int NCRYPTBUFFER_ATTESTATIONSTATEMENT_BLOB() {
        return (int)51L;
    }
    public static int NCRYPTBUFFER_ATTESTATION_CLAIM_TYPE() {
        return (int)52L;
    }
    public static int NCRYPTBUFFER_ATTESTATION_CLAIM_CHALLENGE_REQUIRED() {
        return (int)53L;
    }
    public static int NCRYPTBUFFER_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS() {
        return (int)54L;
    }
    public static int NCRYPTBUFFER_ECC_CURVE_NAME() {
        return (int)60L;
    }
    public static int NCRYPTBUFFER_ECC_PARAMETERS() {
        return (int)61L;
    }
    public static int NCRYPTBUFFER_TPM_SEAL_PASSWORD() {
        return (int)70L;
    }
    public static int NCRYPTBUFFER_TPM_SEAL_POLICYINFO() {
        return (int)71L;
    }
    public static int NCRYPTBUFFER_TPM_SEAL_TICKET() {
        return (int)72L;
    }
    public static int NCRYPTBUFFER_TPM_SEAL_NO_DA_PROTECTION() {
        return (int)73L;
    }
    public static int NCRYPTBUFFER_TPM_PLATFORM_CLAIM_PCR_MASK() {
        return (int)80L;
    }
    public static int NCRYPTBUFFER_TPM_PLATFORM_CLAIM_NONCE() {
        return (int)81L;
    }
    public static int NCRYPTBUFFER_TPM_PLATFORM_CLAIM_STATIC_CREATE() {
        return (int)82L;
    }
    public static int NCRYPT_CIPHER_NO_PADDING_FLAG() {
        return (int)0L;
    }
    public static int NCRYPT_CIPHER_BLOCK_PADDING_FLAG() {
        return (int)1L;
    }
    public static int NCRYPT_CIPHER_OTHER_PADDING_FLAG() {
        return (int)2L;
    }
    public static int NCRYPT_PLATFORM_ATTEST_MAGIC() {
        return (int)1146110288L;
    }
    public static int NCRYPT_KEY_ATTEST_MAGIC() {
        return (int)1146110283L;
    }
    public static int NCRYPT_CLAIM_AUTHORITY_ONLY() {
        return (int)1L;
    }
    public static int NCRYPT_CLAIM_SUBJECT_ONLY() {
        return (int)2L;
    }
    public static int NCRYPT_CLAIM_WEB_AUTH_SUBJECT_ONLY() {
        return (int)258L;
    }
    public static int NCRYPT_CLAIM_AUTHORITY_AND_SUBJECT() {
        return (int)3L;
    }
    public static int NCRYPT_CLAIM_VSM_KEY_ATTESTATION_STATEMENT() {
        return (int)4L;
    }
    public static int NCRYPT_CLAIM_UNKNOWN() {
        return (int)4096L;
    }
    public static int NCRYPT_CLAIM_PLATFORM() {
        return (int)65536L;
    }
    public static int NCRYPT_ISOLATED_KEY_FLAG_CREATED_IN_ISOLATION() {
        return (int)1L;
    }
    public static int NCRYPT_ISOLATED_KEY_FLAG_IMPORT_ONLY() {
        return (int)2L;
    }
    public static int NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES_V0() {
        return (int)0L;
    }
    public static int NCRYPT_VSM_KEY_ATTESTATION_STATEMENT_V0() {
        return (int)0L;
    }
    public static int NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS_V0() {
        return (int)0L;
    }
    public static int NCRYPT_EXPORTED_ISOLATED_KEY_HEADER_V0() {
        return (int)0L;
    }
    public static int NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT_V0() {
        return (int)0L;
    }
    public static int NCRYPT_NO_PADDING_FLAG() {
        return (int)1L;
    }
    public static int NCRYPT_PAD_PKCS1_FLAG() {
        return (int)2L;
    }
    public static int NCRYPT_PAD_OAEP_FLAG() {
        return (int)4L;
    }
    public static int NCRYPT_PAD_PSS_FLAG() {
        return (int)8L;
    }
    public static int NCRYPT_PAD_CIPHER_FLAG() {
        return (int)16L;
    }
    public static int NCRYPT_ATTESTATION_FLAG() {
        return (int)32L;
    }
    public static int NCRYPT_SEALING_FLAG() {
        return (int)256L;
    }
    public static int NCRYPT_REGISTER_NOTIFY_FLAG() {
        return (int)1L;
    }
    public static int NCRYPT_UNREGISTER_NOTIFY_FLAG() {
        return (int)2L;
    }
    public static int NCRYPT_MACHINE_KEY_FLAG() {
        return (int)32L;
    }
    public static int NCRYPT_SILENT_FLAG() {
        return (int)64L;
    }
}


