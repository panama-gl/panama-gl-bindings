// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ICreateTypeInfo2Vtbl {
 *     HRESULT (*QueryInterface)(ICreateTypeInfo2 *, const IID *const, void **) __attribute__((stdcall));
 *     ULONG (*AddRef)(ICreateTypeInfo2 *) __attribute__((stdcall));
 *     ULONG (*Release)(ICreateTypeInfo2 *) __attribute__((stdcall));
 *     HRESULT (*SetGuid)(ICreateTypeInfo2 *, const GUID *const) __attribute__((stdcall));
 *     HRESULT (*SetTypeFlags)(ICreateTypeInfo2 *, UINT) __attribute__((stdcall));
 *     HRESULT (*SetDocString)(ICreateTypeInfo2 *, LPOLESTR) __attribute__((stdcall));
 *     HRESULT (*SetHelpContext)(ICreateTypeInfo2 *, DWORD) __attribute__((stdcall));
 *     HRESULT (*SetVersion)(ICreateTypeInfo2 *, WORD, WORD) __attribute__((stdcall));
 *     HRESULT (*AddRefTypeInfo)(ICreateTypeInfo2 *, ITypeInfo *, HREFTYPE *) __attribute__((stdcall));
 *     HRESULT (*AddFuncDesc)(ICreateTypeInfo2 *, UINT, FUNCDESC *) __attribute__((stdcall));
 *     HRESULT (*AddImplType)(ICreateTypeInfo2 *, UINT, HREFTYPE) __attribute__((stdcall));
 *     HRESULT (*SetImplTypeFlags)(ICreateTypeInfo2 *, UINT, INT) __attribute__((stdcall));
 *     HRESULT (*SetAlignment)(ICreateTypeInfo2 *, WORD) __attribute__((stdcall));
 *     HRESULT (*SetSchema)(ICreateTypeInfo2 *, LPOLESTR) __attribute__((stdcall));
 *     HRESULT (*AddVarDesc)(ICreateTypeInfo2 *, UINT, VARDESC *) __attribute__((stdcall));
 *     HRESULT (*SetFuncAndParamNames)(ICreateTypeInfo2 *, UINT, LPOLESTR *, UINT) __attribute__((stdcall));
 *     HRESULT (*SetVarName)(ICreateTypeInfo2 *, UINT, LPOLESTR) __attribute__((stdcall));
 *     HRESULT (*SetTypeDescAlias)(ICreateTypeInfo2 *, TYPEDESC *) __attribute__((stdcall));
 *     HRESULT (*DefineFuncAsDllEntry)(ICreateTypeInfo2 *, UINT, LPOLESTR, LPOLESTR) __attribute__((stdcall));
 *     HRESULT (*SetFuncDocString)(ICreateTypeInfo2 *, UINT, LPOLESTR) __attribute__((stdcall));
 *     HRESULT (*SetVarDocString)(ICreateTypeInfo2 *, UINT, LPOLESTR) __attribute__((stdcall));
 *     HRESULT (*SetFuncHelpContext)(ICreateTypeInfo2 *, UINT, DWORD) __attribute__((stdcall));
 *     HRESULT (*SetVarHelpContext)(ICreateTypeInfo2 *, UINT, DWORD) __attribute__((stdcall));
 *     HRESULT (*SetMops)(ICreateTypeInfo2 *, UINT, BSTR) __attribute__((stdcall));
 *     HRESULT (*SetTypeIdldesc)(ICreateTypeInfo2 *, IDLDESC *) __attribute__((stdcall));
 *     HRESULT (*LayOut)(ICreateTypeInfo2 *) __attribute__((stdcall));
 *     HRESULT (*DeleteFuncDesc)(ICreateTypeInfo2 *, UINT) __attribute__((stdcall));
 *     HRESULT (*DeleteFuncDescByMemId)(ICreateTypeInfo2 *, MEMBERID, INVOKEKIND) __attribute__((stdcall));
 *     HRESULT (*DeleteVarDesc)(ICreateTypeInfo2 *, UINT) __attribute__((stdcall));
 *     HRESULT (*DeleteVarDescByMemId)(ICreateTypeInfo2 *, MEMBERID) __attribute__((stdcall));
 *     HRESULT (*DeleteImplType)(ICreateTypeInfo2 *, UINT) __attribute__((stdcall));
 *     HRESULT (*SetCustData)(ICreateTypeInfo2 *, const GUID *const, VARIANT *) __attribute__((stdcall));
 *     HRESULT (*SetFuncCustData)(ICreateTypeInfo2 *, UINT, const GUID *const, VARIANT *) __attribute__((stdcall));
 *     HRESULT (*SetParamCustData)(ICreateTypeInfo2 *, UINT, UINT, const GUID *const, VARIANT *) __attribute__((stdcall));
 *     HRESULT (*SetVarCustData)(ICreateTypeInfo2 *, UINT, const GUID *const, VARIANT *) __attribute__((stdcall));
 *     HRESULT (*SetImplTypeCustData)(ICreateTypeInfo2 *, UINT, const GUID *const, VARIANT *) __attribute__((stdcall));
 *     HRESULT (*SetHelpStringContext)(ICreateTypeInfo2 *, ULONG) __attribute__((stdcall));
 *     HRESULT (*SetFuncHelpStringContext)(ICreateTypeInfo2 *, UINT, ULONG) __attribute__((stdcall));
 *     HRESULT (*SetVarHelpStringContext)(ICreateTypeInfo2 *, UINT, ULONG) __attribute__((stdcall));
 *     HRESULT (*Invalidate)(ICreateTypeInfo2 *) __attribute__((stdcall));
 *     HRESULT (*SetName)(ICreateTypeInfo2 *, LPOLESTR) __attribute__((stdcall));
 * }
 * }
 */
public class ICreateTypeInfo2Vtbl {

    ICreateTypeInfo2Vtbl() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("QueryInterface"),
        wgl_h.C_POINTER.withName("AddRef"),
        wgl_h.C_POINTER.withName("Release"),
        wgl_h.C_POINTER.withName("SetGuid"),
        wgl_h.C_POINTER.withName("SetTypeFlags"),
        wgl_h.C_POINTER.withName("SetDocString"),
        wgl_h.C_POINTER.withName("SetHelpContext"),
        wgl_h.C_POINTER.withName("SetVersion"),
        wgl_h.C_POINTER.withName("AddRefTypeInfo"),
        wgl_h.C_POINTER.withName("AddFuncDesc"),
        wgl_h.C_POINTER.withName("AddImplType"),
        wgl_h.C_POINTER.withName("SetImplTypeFlags"),
        wgl_h.C_POINTER.withName("SetAlignment"),
        wgl_h.C_POINTER.withName("SetSchema"),
        wgl_h.C_POINTER.withName("AddVarDesc"),
        wgl_h.C_POINTER.withName("SetFuncAndParamNames"),
        wgl_h.C_POINTER.withName("SetVarName"),
        wgl_h.C_POINTER.withName("SetTypeDescAlias"),
        wgl_h.C_POINTER.withName("DefineFuncAsDllEntry"),
        wgl_h.C_POINTER.withName("SetFuncDocString"),
        wgl_h.C_POINTER.withName("SetVarDocString"),
        wgl_h.C_POINTER.withName("SetFuncHelpContext"),
        wgl_h.C_POINTER.withName("SetVarHelpContext"),
        wgl_h.C_POINTER.withName("SetMops"),
        wgl_h.C_POINTER.withName("SetTypeIdldesc"),
        wgl_h.C_POINTER.withName("LayOut"),
        wgl_h.C_POINTER.withName("DeleteFuncDesc"),
        wgl_h.C_POINTER.withName("DeleteFuncDescByMemId"),
        wgl_h.C_POINTER.withName("DeleteVarDesc"),
        wgl_h.C_POINTER.withName("DeleteVarDescByMemId"),
        wgl_h.C_POINTER.withName("DeleteImplType"),
        wgl_h.C_POINTER.withName("SetCustData"),
        wgl_h.C_POINTER.withName("SetFuncCustData"),
        wgl_h.C_POINTER.withName("SetParamCustData"),
        wgl_h.C_POINTER.withName("SetVarCustData"),
        wgl_h.C_POINTER.withName("SetImplTypeCustData"),
        wgl_h.C_POINTER.withName("SetHelpStringContext"),
        wgl_h.C_POINTER.withName("SetFuncHelpStringContext"),
        wgl_h.C_POINTER.withName("SetVarHelpStringContext"),
        wgl_h.C_POINTER.withName("Invalidate"),
        wgl_h.C_POINTER.withName("SetName")
    ).withName("ICreateTypeInfo2Vtbl");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(ICreateTypeInfo2 *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static class QueryInterface {

        QueryInterface() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(QueryInterface.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(QueryInterface.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout QueryInterface$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("QueryInterface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(ICreateTypeInfo2 *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout QueryInterface$layout() {
        return QueryInterface$LAYOUT;
    }

    private static final long QueryInterface$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(ICreateTypeInfo2 *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final long QueryInterface$offset() {
        return QueryInterface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(ICreateTypeInfo2 *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment QueryInterface(MemorySegment struct) {
        return struct.get(QueryInterface$LAYOUT, QueryInterface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(ICreateTypeInfo2 *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static void QueryInterface(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(QueryInterface$LAYOUT, QueryInterface$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*AddRef)(ICreateTypeInfo2 *) __attribute__((stdcall))
     * }
     */
    public static class AddRef {

        AddRef() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(AddRef.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(AddRef.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout AddRef$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("AddRef"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(ICreateTypeInfo2 *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout AddRef$layout() {
        return AddRef$LAYOUT;
    }

    private static final long AddRef$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(ICreateTypeInfo2 *) __attribute__((stdcall))
     * }
     */
    public static final long AddRef$offset() {
        return AddRef$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(ICreateTypeInfo2 *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment AddRef(MemorySegment struct) {
        return struct.get(AddRef$LAYOUT, AddRef$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(ICreateTypeInfo2 *) __attribute__((stdcall))
     * }
     */
    public static void AddRef(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(AddRef$LAYOUT, AddRef$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*Release)(ICreateTypeInfo2 *) __attribute__((stdcall))
     * }
     */
    public static class Release {

        Release() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Release.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Release.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Release$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Release"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*Release)(ICreateTypeInfo2 *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Release$layout() {
        return Release$LAYOUT;
    }

    private static final long Release$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*Release)(ICreateTypeInfo2 *) __attribute__((stdcall))
     * }
     */
    public static final long Release$offset() {
        return Release$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(ICreateTypeInfo2 *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Release(MemorySegment struct) {
        return struct.get(Release$LAYOUT, Release$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(ICreateTypeInfo2 *) __attribute__((stdcall))
     * }
     */
    public static void Release(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Release$LAYOUT, Release$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetGuid)(ICreateTypeInfo2 *, const GUID *const) __attribute__((stdcall))
     * }
     */
    public static class SetGuid {

        SetGuid() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetGuid.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetGuid.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetGuid$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetGuid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetGuid)(ICreateTypeInfo2 *, const GUID *const) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetGuid$layout() {
        return SetGuid$LAYOUT;
    }

    private static final long SetGuid$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetGuid)(ICreateTypeInfo2 *, const GUID *const) __attribute__((stdcall))
     * }
     */
    public static final long SetGuid$offset() {
        return SetGuid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetGuid)(ICreateTypeInfo2 *, const GUID *const) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetGuid(MemorySegment struct) {
        return struct.get(SetGuid$LAYOUT, SetGuid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetGuid)(ICreateTypeInfo2 *, const GUID *const) __attribute__((stdcall))
     * }
     */
    public static void SetGuid(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetGuid$LAYOUT, SetGuid$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetTypeFlags)(ICreateTypeInfo2 *, UINT) __attribute__((stdcall))
     * }
     */
    public static class SetTypeFlags {

        SetTypeFlags() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetTypeFlags.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetTypeFlags.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetTypeFlags$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetTypeFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetTypeFlags)(ICreateTypeInfo2 *, UINT) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetTypeFlags$layout() {
        return SetTypeFlags$LAYOUT;
    }

    private static final long SetTypeFlags$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetTypeFlags)(ICreateTypeInfo2 *, UINT) __attribute__((stdcall))
     * }
     */
    public static final long SetTypeFlags$offset() {
        return SetTypeFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetTypeFlags)(ICreateTypeInfo2 *, UINT) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetTypeFlags(MemorySegment struct) {
        return struct.get(SetTypeFlags$LAYOUT, SetTypeFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetTypeFlags)(ICreateTypeInfo2 *, UINT) __attribute__((stdcall))
     * }
     */
    public static void SetTypeFlags(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetTypeFlags$LAYOUT, SetTypeFlags$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetDocString)(ICreateTypeInfo2 *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static class SetDocString {

        SetDocString() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetDocString.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetDocString.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetDocString$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetDocString"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetDocString)(ICreateTypeInfo2 *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetDocString$layout() {
        return SetDocString$LAYOUT;
    }

    private static final long SetDocString$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetDocString)(ICreateTypeInfo2 *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static final long SetDocString$offset() {
        return SetDocString$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetDocString)(ICreateTypeInfo2 *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetDocString(MemorySegment struct) {
        return struct.get(SetDocString$LAYOUT, SetDocString$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetDocString)(ICreateTypeInfo2 *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static void SetDocString(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetDocString$LAYOUT, SetDocString$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetHelpContext)(ICreateTypeInfo2 *, DWORD) __attribute__((stdcall))
     * }
     */
    public static class SetHelpContext {

        SetHelpContext() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetHelpContext.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetHelpContext.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetHelpContext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetHelpContext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetHelpContext)(ICreateTypeInfo2 *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetHelpContext$layout() {
        return SetHelpContext$LAYOUT;
    }

    private static final long SetHelpContext$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetHelpContext)(ICreateTypeInfo2 *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final long SetHelpContext$offset() {
        return SetHelpContext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetHelpContext)(ICreateTypeInfo2 *, DWORD) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetHelpContext(MemorySegment struct) {
        return struct.get(SetHelpContext$LAYOUT, SetHelpContext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetHelpContext)(ICreateTypeInfo2 *, DWORD) __attribute__((stdcall))
     * }
     */
    public static void SetHelpContext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetHelpContext$LAYOUT, SetHelpContext$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetVersion)(ICreateTypeInfo2 *, WORD, WORD) __attribute__((stdcall))
     * }
     */
    public static class SetVersion {

        SetVersion() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, short _x1, short _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_SHORT,
            wgl_h.C_SHORT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetVersion.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetVersion.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, short _x1, short _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetVersion$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetVersion)(ICreateTypeInfo2 *, WORD, WORD) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetVersion$layout() {
        return SetVersion$LAYOUT;
    }

    private static final long SetVersion$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetVersion)(ICreateTypeInfo2 *, WORD, WORD) __attribute__((stdcall))
     * }
     */
    public static final long SetVersion$offset() {
        return SetVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetVersion)(ICreateTypeInfo2 *, WORD, WORD) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetVersion(MemorySegment struct) {
        return struct.get(SetVersion$LAYOUT, SetVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetVersion)(ICreateTypeInfo2 *, WORD, WORD) __attribute__((stdcall))
     * }
     */
    public static void SetVersion(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetVersion$LAYOUT, SetVersion$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*AddRefTypeInfo)(ICreateTypeInfo2 *, ITypeInfo *, HREFTYPE *) __attribute__((stdcall))
     * }
     */
    public static class AddRefTypeInfo {

        AddRefTypeInfo() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(AddRefTypeInfo.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(AddRefTypeInfo.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout AddRefTypeInfo$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("AddRefTypeInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*AddRefTypeInfo)(ICreateTypeInfo2 *, ITypeInfo *, HREFTYPE *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout AddRefTypeInfo$layout() {
        return AddRefTypeInfo$LAYOUT;
    }

    private static final long AddRefTypeInfo$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*AddRefTypeInfo)(ICreateTypeInfo2 *, ITypeInfo *, HREFTYPE *) __attribute__((stdcall))
     * }
     */
    public static final long AddRefTypeInfo$offset() {
        return AddRefTypeInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*AddRefTypeInfo)(ICreateTypeInfo2 *, ITypeInfo *, HREFTYPE *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment AddRefTypeInfo(MemorySegment struct) {
        return struct.get(AddRefTypeInfo$LAYOUT, AddRefTypeInfo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*AddRefTypeInfo)(ICreateTypeInfo2 *, ITypeInfo *, HREFTYPE *) __attribute__((stdcall))
     * }
     */
    public static void AddRefTypeInfo(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(AddRefTypeInfo$LAYOUT, AddRefTypeInfo$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*AddFuncDesc)(ICreateTypeInfo2 *, UINT, FUNCDESC *) __attribute__((stdcall))
     * }
     */
    public static class AddFuncDesc {

        AddFuncDesc() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(AddFuncDesc.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(AddFuncDesc.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout AddFuncDesc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("AddFuncDesc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*AddFuncDesc)(ICreateTypeInfo2 *, UINT, FUNCDESC *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout AddFuncDesc$layout() {
        return AddFuncDesc$LAYOUT;
    }

    private static final long AddFuncDesc$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*AddFuncDesc)(ICreateTypeInfo2 *, UINT, FUNCDESC *) __attribute__((stdcall))
     * }
     */
    public static final long AddFuncDesc$offset() {
        return AddFuncDesc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*AddFuncDesc)(ICreateTypeInfo2 *, UINT, FUNCDESC *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment AddFuncDesc(MemorySegment struct) {
        return struct.get(AddFuncDesc$LAYOUT, AddFuncDesc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*AddFuncDesc)(ICreateTypeInfo2 *, UINT, FUNCDESC *) __attribute__((stdcall))
     * }
     */
    public static void AddFuncDesc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(AddFuncDesc$LAYOUT, AddFuncDesc$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*AddImplType)(ICreateTypeInfo2 *, UINT, HREFTYPE) __attribute__((stdcall))
     * }
     */
    public static class AddImplType {

        AddImplType() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(AddImplType.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(AddImplType.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout AddImplType$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("AddImplType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*AddImplType)(ICreateTypeInfo2 *, UINT, HREFTYPE) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout AddImplType$layout() {
        return AddImplType$LAYOUT;
    }

    private static final long AddImplType$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*AddImplType)(ICreateTypeInfo2 *, UINT, HREFTYPE) __attribute__((stdcall))
     * }
     */
    public static final long AddImplType$offset() {
        return AddImplType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*AddImplType)(ICreateTypeInfo2 *, UINT, HREFTYPE) __attribute__((stdcall))
     * }
     */
    public static MemorySegment AddImplType(MemorySegment struct) {
        return struct.get(AddImplType$LAYOUT, AddImplType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*AddImplType)(ICreateTypeInfo2 *, UINT, HREFTYPE) __attribute__((stdcall))
     * }
     */
    public static void AddImplType(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(AddImplType$LAYOUT, AddImplType$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetImplTypeFlags)(ICreateTypeInfo2 *, UINT, INT) __attribute__((stdcall))
     * }
     */
    public static class SetImplTypeFlags {

        SetImplTypeFlags() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetImplTypeFlags.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetImplTypeFlags.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetImplTypeFlags$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetImplTypeFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetImplTypeFlags)(ICreateTypeInfo2 *, UINT, INT) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetImplTypeFlags$layout() {
        return SetImplTypeFlags$LAYOUT;
    }

    private static final long SetImplTypeFlags$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetImplTypeFlags)(ICreateTypeInfo2 *, UINT, INT) __attribute__((stdcall))
     * }
     */
    public static final long SetImplTypeFlags$offset() {
        return SetImplTypeFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetImplTypeFlags)(ICreateTypeInfo2 *, UINT, INT) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetImplTypeFlags(MemorySegment struct) {
        return struct.get(SetImplTypeFlags$LAYOUT, SetImplTypeFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetImplTypeFlags)(ICreateTypeInfo2 *, UINT, INT) __attribute__((stdcall))
     * }
     */
    public static void SetImplTypeFlags(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetImplTypeFlags$LAYOUT, SetImplTypeFlags$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetAlignment)(ICreateTypeInfo2 *, WORD) __attribute__((stdcall))
     * }
     */
    public static class SetAlignment {

        SetAlignment() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, short _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_SHORT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetAlignment.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetAlignment.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, short _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetAlignment$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetAlignment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetAlignment)(ICreateTypeInfo2 *, WORD) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetAlignment$layout() {
        return SetAlignment$LAYOUT;
    }

    private static final long SetAlignment$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetAlignment)(ICreateTypeInfo2 *, WORD) __attribute__((stdcall))
     * }
     */
    public static final long SetAlignment$offset() {
        return SetAlignment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetAlignment)(ICreateTypeInfo2 *, WORD) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetAlignment(MemorySegment struct) {
        return struct.get(SetAlignment$LAYOUT, SetAlignment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetAlignment)(ICreateTypeInfo2 *, WORD) __attribute__((stdcall))
     * }
     */
    public static void SetAlignment(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetAlignment$LAYOUT, SetAlignment$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetSchema)(ICreateTypeInfo2 *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static class SetSchema {

        SetSchema() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetSchema.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetSchema.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetSchema$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetSchema"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetSchema)(ICreateTypeInfo2 *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetSchema$layout() {
        return SetSchema$LAYOUT;
    }

    private static final long SetSchema$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetSchema)(ICreateTypeInfo2 *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static final long SetSchema$offset() {
        return SetSchema$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetSchema)(ICreateTypeInfo2 *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetSchema(MemorySegment struct) {
        return struct.get(SetSchema$LAYOUT, SetSchema$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetSchema)(ICreateTypeInfo2 *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static void SetSchema(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetSchema$LAYOUT, SetSchema$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*AddVarDesc)(ICreateTypeInfo2 *, UINT, VARDESC *) __attribute__((stdcall))
     * }
     */
    public static class AddVarDesc {

        AddVarDesc() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(AddVarDesc.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(AddVarDesc.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout AddVarDesc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("AddVarDesc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*AddVarDesc)(ICreateTypeInfo2 *, UINT, VARDESC *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout AddVarDesc$layout() {
        return AddVarDesc$LAYOUT;
    }

    private static final long AddVarDesc$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*AddVarDesc)(ICreateTypeInfo2 *, UINT, VARDESC *) __attribute__((stdcall))
     * }
     */
    public static final long AddVarDesc$offset() {
        return AddVarDesc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*AddVarDesc)(ICreateTypeInfo2 *, UINT, VARDESC *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment AddVarDesc(MemorySegment struct) {
        return struct.get(AddVarDesc$LAYOUT, AddVarDesc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*AddVarDesc)(ICreateTypeInfo2 *, UINT, VARDESC *) __attribute__((stdcall))
     * }
     */
    public static void AddVarDesc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(AddVarDesc$LAYOUT, AddVarDesc$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetFuncAndParamNames)(ICreateTypeInfo2 *, UINT, LPOLESTR *, UINT) __attribute__((stdcall))
     * }
     */
    public static class SetFuncAndParamNames {

        SetFuncAndParamNames() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2, int _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetFuncAndParamNames.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetFuncAndParamNames.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, int _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetFuncAndParamNames$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetFuncAndParamNames"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetFuncAndParamNames)(ICreateTypeInfo2 *, UINT, LPOLESTR *, UINT) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetFuncAndParamNames$layout() {
        return SetFuncAndParamNames$LAYOUT;
    }

    private static final long SetFuncAndParamNames$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetFuncAndParamNames)(ICreateTypeInfo2 *, UINT, LPOLESTR *, UINT) __attribute__((stdcall))
     * }
     */
    public static final long SetFuncAndParamNames$offset() {
        return SetFuncAndParamNames$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetFuncAndParamNames)(ICreateTypeInfo2 *, UINT, LPOLESTR *, UINT) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetFuncAndParamNames(MemorySegment struct) {
        return struct.get(SetFuncAndParamNames$LAYOUT, SetFuncAndParamNames$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetFuncAndParamNames)(ICreateTypeInfo2 *, UINT, LPOLESTR *, UINT) __attribute__((stdcall))
     * }
     */
    public static void SetFuncAndParamNames(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetFuncAndParamNames$LAYOUT, SetFuncAndParamNames$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetVarName)(ICreateTypeInfo2 *, UINT, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static class SetVarName {

        SetVarName() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetVarName.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetVarName.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetVarName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetVarName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetVarName)(ICreateTypeInfo2 *, UINT, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetVarName$layout() {
        return SetVarName$LAYOUT;
    }

    private static final long SetVarName$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetVarName)(ICreateTypeInfo2 *, UINT, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static final long SetVarName$offset() {
        return SetVarName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetVarName)(ICreateTypeInfo2 *, UINT, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetVarName(MemorySegment struct) {
        return struct.get(SetVarName$LAYOUT, SetVarName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetVarName)(ICreateTypeInfo2 *, UINT, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static void SetVarName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetVarName$LAYOUT, SetVarName$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetTypeDescAlias)(ICreateTypeInfo2 *, TYPEDESC *) __attribute__((stdcall))
     * }
     */
    public static class SetTypeDescAlias {

        SetTypeDescAlias() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetTypeDescAlias.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetTypeDescAlias.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetTypeDescAlias$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetTypeDescAlias"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetTypeDescAlias)(ICreateTypeInfo2 *, TYPEDESC *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetTypeDescAlias$layout() {
        return SetTypeDescAlias$LAYOUT;
    }

    private static final long SetTypeDescAlias$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetTypeDescAlias)(ICreateTypeInfo2 *, TYPEDESC *) __attribute__((stdcall))
     * }
     */
    public static final long SetTypeDescAlias$offset() {
        return SetTypeDescAlias$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetTypeDescAlias)(ICreateTypeInfo2 *, TYPEDESC *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetTypeDescAlias(MemorySegment struct) {
        return struct.get(SetTypeDescAlias$LAYOUT, SetTypeDescAlias$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetTypeDescAlias)(ICreateTypeInfo2 *, TYPEDESC *) __attribute__((stdcall))
     * }
     */
    public static void SetTypeDescAlias(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetTypeDescAlias$LAYOUT, SetTypeDescAlias$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*DefineFuncAsDllEntry)(ICreateTypeInfo2 *, UINT, LPOLESTR, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static class DefineFuncAsDllEntry {

        DefineFuncAsDllEntry() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(DefineFuncAsDllEntry.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(DefineFuncAsDllEntry.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout DefineFuncAsDllEntry$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("DefineFuncAsDllEntry"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*DefineFuncAsDllEntry)(ICreateTypeInfo2 *, UINT, LPOLESTR, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout DefineFuncAsDllEntry$layout() {
        return DefineFuncAsDllEntry$LAYOUT;
    }

    private static final long DefineFuncAsDllEntry$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*DefineFuncAsDllEntry)(ICreateTypeInfo2 *, UINT, LPOLESTR, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static final long DefineFuncAsDllEntry$offset() {
        return DefineFuncAsDllEntry$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*DefineFuncAsDllEntry)(ICreateTypeInfo2 *, UINT, LPOLESTR, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static MemorySegment DefineFuncAsDllEntry(MemorySegment struct) {
        return struct.get(DefineFuncAsDllEntry$LAYOUT, DefineFuncAsDllEntry$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*DefineFuncAsDllEntry)(ICreateTypeInfo2 *, UINT, LPOLESTR, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static void DefineFuncAsDllEntry(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(DefineFuncAsDllEntry$LAYOUT, DefineFuncAsDllEntry$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetFuncDocString)(ICreateTypeInfo2 *, UINT, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static class SetFuncDocString {

        SetFuncDocString() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetFuncDocString.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetFuncDocString.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetFuncDocString$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetFuncDocString"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetFuncDocString)(ICreateTypeInfo2 *, UINT, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetFuncDocString$layout() {
        return SetFuncDocString$LAYOUT;
    }

    private static final long SetFuncDocString$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetFuncDocString)(ICreateTypeInfo2 *, UINT, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static final long SetFuncDocString$offset() {
        return SetFuncDocString$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetFuncDocString)(ICreateTypeInfo2 *, UINT, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetFuncDocString(MemorySegment struct) {
        return struct.get(SetFuncDocString$LAYOUT, SetFuncDocString$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetFuncDocString)(ICreateTypeInfo2 *, UINT, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static void SetFuncDocString(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetFuncDocString$LAYOUT, SetFuncDocString$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetVarDocString)(ICreateTypeInfo2 *, UINT, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static class SetVarDocString {

        SetVarDocString() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetVarDocString.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetVarDocString.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetVarDocString$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetVarDocString"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetVarDocString)(ICreateTypeInfo2 *, UINT, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetVarDocString$layout() {
        return SetVarDocString$LAYOUT;
    }

    private static final long SetVarDocString$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetVarDocString)(ICreateTypeInfo2 *, UINT, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static final long SetVarDocString$offset() {
        return SetVarDocString$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetVarDocString)(ICreateTypeInfo2 *, UINT, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetVarDocString(MemorySegment struct) {
        return struct.get(SetVarDocString$LAYOUT, SetVarDocString$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetVarDocString)(ICreateTypeInfo2 *, UINT, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static void SetVarDocString(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetVarDocString$LAYOUT, SetVarDocString$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetFuncHelpContext)(ICreateTypeInfo2 *, UINT, DWORD) __attribute__((stdcall))
     * }
     */
    public static class SetFuncHelpContext {

        SetFuncHelpContext() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetFuncHelpContext.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetFuncHelpContext.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetFuncHelpContext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetFuncHelpContext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetFuncHelpContext)(ICreateTypeInfo2 *, UINT, DWORD) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetFuncHelpContext$layout() {
        return SetFuncHelpContext$LAYOUT;
    }

    private static final long SetFuncHelpContext$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetFuncHelpContext)(ICreateTypeInfo2 *, UINT, DWORD) __attribute__((stdcall))
     * }
     */
    public static final long SetFuncHelpContext$offset() {
        return SetFuncHelpContext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetFuncHelpContext)(ICreateTypeInfo2 *, UINT, DWORD) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetFuncHelpContext(MemorySegment struct) {
        return struct.get(SetFuncHelpContext$LAYOUT, SetFuncHelpContext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetFuncHelpContext)(ICreateTypeInfo2 *, UINT, DWORD) __attribute__((stdcall))
     * }
     */
    public static void SetFuncHelpContext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetFuncHelpContext$LAYOUT, SetFuncHelpContext$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetVarHelpContext)(ICreateTypeInfo2 *, UINT, DWORD) __attribute__((stdcall))
     * }
     */
    public static class SetVarHelpContext {

        SetVarHelpContext() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetVarHelpContext.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetVarHelpContext.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetVarHelpContext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetVarHelpContext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetVarHelpContext)(ICreateTypeInfo2 *, UINT, DWORD) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetVarHelpContext$layout() {
        return SetVarHelpContext$LAYOUT;
    }

    private static final long SetVarHelpContext$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetVarHelpContext)(ICreateTypeInfo2 *, UINT, DWORD) __attribute__((stdcall))
     * }
     */
    public static final long SetVarHelpContext$offset() {
        return SetVarHelpContext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetVarHelpContext)(ICreateTypeInfo2 *, UINT, DWORD) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetVarHelpContext(MemorySegment struct) {
        return struct.get(SetVarHelpContext$LAYOUT, SetVarHelpContext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetVarHelpContext)(ICreateTypeInfo2 *, UINT, DWORD) __attribute__((stdcall))
     * }
     */
    public static void SetVarHelpContext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetVarHelpContext$LAYOUT, SetVarHelpContext$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetMops)(ICreateTypeInfo2 *, UINT, BSTR) __attribute__((stdcall))
     * }
     */
    public static class SetMops {

        SetMops() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetMops.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetMops.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetMops$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetMops"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetMops)(ICreateTypeInfo2 *, UINT, BSTR) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetMops$layout() {
        return SetMops$LAYOUT;
    }

    private static final long SetMops$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetMops)(ICreateTypeInfo2 *, UINT, BSTR) __attribute__((stdcall))
     * }
     */
    public static final long SetMops$offset() {
        return SetMops$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetMops)(ICreateTypeInfo2 *, UINT, BSTR) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetMops(MemorySegment struct) {
        return struct.get(SetMops$LAYOUT, SetMops$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetMops)(ICreateTypeInfo2 *, UINT, BSTR) __attribute__((stdcall))
     * }
     */
    public static void SetMops(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetMops$LAYOUT, SetMops$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetTypeIdldesc)(ICreateTypeInfo2 *, IDLDESC *) __attribute__((stdcall))
     * }
     */
    public static class SetTypeIdldesc {

        SetTypeIdldesc() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetTypeIdldesc.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetTypeIdldesc.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetTypeIdldesc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetTypeIdldesc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetTypeIdldesc)(ICreateTypeInfo2 *, IDLDESC *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetTypeIdldesc$layout() {
        return SetTypeIdldesc$LAYOUT;
    }

    private static final long SetTypeIdldesc$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetTypeIdldesc)(ICreateTypeInfo2 *, IDLDESC *) __attribute__((stdcall))
     * }
     */
    public static final long SetTypeIdldesc$offset() {
        return SetTypeIdldesc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetTypeIdldesc)(ICreateTypeInfo2 *, IDLDESC *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetTypeIdldesc(MemorySegment struct) {
        return struct.get(SetTypeIdldesc$LAYOUT, SetTypeIdldesc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetTypeIdldesc)(ICreateTypeInfo2 *, IDLDESC *) __attribute__((stdcall))
     * }
     */
    public static void SetTypeIdldesc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetTypeIdldesc$LAYOUT, SetTypeIdldesc$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*LayOut)(ICreateTypeInfo2 *) __attribute__((stdcall))
     * }
     */
    public static class LayOut {

        LayOut() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(LayOut.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(LayOut.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout LayOut$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("LayOut"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*LayOut)(ICreateTypeInfo2 *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout LayOut$layout() {
        return LayOut$LAYOUT;
    }

    private static final long LayOut$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*LayOut)(ICreateTypeInfo2 *) __attribute__((stdcall))
     * }
     */
    public static final long LayOut$offset() {
        return LayOut$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*LayOut)(ICreateTypeInfo2 *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment LayOut(MemorySegment struct) {
        return struct.get(LayOut$LAYOUT, LayOut$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*LayOut)(ICreateTypeInfo2 *) __attribute__((stdcall))
     * }
     */
    public static void LayOut(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(LayOut$LAYOUT, LayOut$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*DeleteFuncDesc)(ICreateTypeInfo2 *, UINT) __attribute__((stdcall))
     * }
     */
    public static class DeleteFuncDesc {

        DeleteFuncDesc() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(DeleteFuncDesc.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(DeleteFuncDesc.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout DeleteFuncDesc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("DeleteFuncDesc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*DeleteFuncDesc)(ICreateTypeInfo2 *, UINT) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout DeleteFuncDesc$layout() {
        return DeleteFuncDesc$LAYOUT;
    }

    private static final long DeleteFuncDesc$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*DeleteFuncDesc)(ICreateTypeInfo2 *, UINT) __attribute__((stdcall))
     * }
     */
    public static final long DeleteFuncDesc$offset() {
        return DeleteFuncDesc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*DeleteFuncDesc)(ICreateTypeInfo2 *, UINT) __attribute__((stdcall))
     * }
     */
    public static MemorySegment DeleteFuncDesc(MemorySegment struct) {
        return struct.get(DeleteFuncDesc$LAYOUT, DeleteFuncDesc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*DeleteFuncDesc)(ICreateTypeInfo2 *, UINT) __attribute__((stdcall))
     * }
     */
    public static void DeleteFuncDesc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(DeleteFuncDesc$LAYOUT, DeleteFuncDesc$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*DeleteFuncDescByMemId)(ICreateTypeInfo2 *, MEMBERID, INVOKEKIND) __attribute__((stdcall))
     * }
     */
    public static class DeleteFuncDescByMemId {

        DeleteFuncDescByMemId() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(DeleteFuncDescByMemId.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(DeleteFuncDescByMemId.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout DeleteFuncDescByMemId$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("DeleteFuncDescByMemId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*DeleteFuncDescByMemId)(ICreateTypeInfo2 *, MEMBERID, INVOKEKIND) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout DeleteFuncDescByMemId$layout() {
        return DeleteFuncDescByMemId$LAYOUT;
    }

    private static final long DeleteFuncDescByMemId$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*DeleteFuncDescByMemId)(ICreateTypeInfo2 *, MEMBERID, INVOKEKIND) __attribute__((stdcall))
     * }
     */
    public static final long DeleteFuncDescByMemId$offset() {
        return DeleteFuncDescByMemId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*DeleteFuncDescByMemId)(ICreateTypeInfo2 *, MEMBERID, INVOKEKIND) __attribute__((stdcall))
     * }
     */
    public static MemorySegment DeleteFuncDescByMemId(MemorySegment struct) {
        return struct.get(DeleteFuncDescByMemId$LAYOUT, DeleteFuncDescByMemId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*DeleteFuncDescByMemId)(ICreateTypeInfo2 *, MEMBERID, INVOKEKIND) __attribute__((stdcall))
     * }
     */
    public static void DeleteFuncDescByMemId(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(DeleteFuncDescByMemId$LAYOUT, DeleteFuncDescByMemId$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*DeleteVarDesc)(ICreateTypeInfo2 *, UINT) __attribute__((stdcall))
     * }
     */
    public static class DeleteVarDesc {

        DeleteVarDesc() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(DeleteVarDesc.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(DeleteVarDesc.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout DeleteVarDesc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("DeleteVarDesc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*DeleteVarDesc)(ICreateTypeInfo2 *, UINT) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout DeleteVarDesc$layout() {
        return DeleteVarDesc$LAYOUT;
    }

    private static final long DeleteVarDesc$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*DeleteVarDesc)(ICreateTypeInfo2 *, UINT) __attribute__((stdcall))
     * }
     */
    public static final long DeleteVarDesc$offset() {
        return DeleteVarDesc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*DeleteVarDesc)(ICreateTypeInfo2 *, UINT) __attribute__((stdcall))
     * }
     */
    public static MemorySegment DeleteVarDesc(MemorySegment struct) {
        return struct.get(DeleteVarDesc$LAYOUT, DeleteVarDesc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*DeleteVarDesc)(ICreateTypeInfo2 *, UINT) __attribute__((stdcall))
     * }
     */
    public static void DeleteVarDesc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(DeleteVarDesc$LAYOUT, DeleteVarDesc$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*DeleteVarDescByMemId)(ICreateTypeInfo2 *, MEMBERID) __attribute__((stdcall))
     * }
     */
    public static class DeleteVarDescByMemId {

        DeleteVarDescByMemId() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(DeleteVarDescByMemId.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(DeleteVarDescByMemId.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout DeleteVarDescByMemId$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("DeleteVarDescByMemId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*DeleteVarDescByMemId)(ICreateTypeInfo2 *, MEMBERID) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout DeleteVarDescByMemId$layout() {
        return DeleteVarDescByMemId$LAYOUT;
    }

    private static final long DeleteVarDescByMemId$OFFSET = 232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*DeleteVarDescByMemId)(ICreateTypeInfo2 *, MEMBERID) __attribute__((stdcall))
     * }
     */
    public static final long DeleteVarDescByMemId$offset() {
        return DeleteVarDescByMemId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*DeleteVarDescByMemId)(ICreateTypeInfo2 *, MEMBERID) __attribute__((stdcall))
     * }
     */
    public static MemorySegment DeleteVarDescByMemId(MemorySegment struct) {
        return struct.get(DeleteVarDescByMemId$LAYOUT, DeleteVarDescByMemId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*DeleteVarDescByMemId)(ICreateTypeInfo2 *, MEMBERID) __attribute__((stdcall))
     * }
     */
    public static void DeleteVarDescByMemId(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(DeleteVarDescByMemId$LAYOUT, DeleteVarDescByMemId$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*DeleteImplType)(ICreateTypeInfo2 *, UINT) __attribute__((stdcall))
     * }
     */
    public static class DeleteImplType {

        DeleteImplType() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(DeleteImplType.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(DeleteImplType.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout DeleteImplType$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("DeleteImplType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*DeleteImplType)(ICreateTypeInfo2 *, UINT) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout DeleteImplType$layout() {
        return DeleteImplType$LAYOUT;
    }

    private static final long DeleteImplType$OFFSET = 240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*DeleteImplType)(ICreateTypeInfo2 *, UINT) __attribute__((stdcall))
     * }
     */
    public static final long DeleteImplType$offset() {
        return DeleteImplType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*DeleteImplType)(ICreateTypeInfo2 *, UINT) __attribute__((stdcall))
     * }
     */
    public static MemorySegment DeleteImplType(MemorySegment struct) {
        return struct.get(DeleteImplType$LAYOUT, DeleteImplType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*DeleteImplType)(ICreateTypeInfo2 *, UINT) __attribute__((stdcall))
     * }
     */
    public static void DeleteImplType(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(DeleteImplType$LAYOUT, DeleteImplType$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetCustData)(ICreateTypeInfo2 *, const GUID *const, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static class SetCustData {

        SetCustData() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetCustData.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetCustData.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetCustData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetCustData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetCustData)(ICreateTypeInfo2 *, const GUID *const, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetCustData$layout() {
        return SetCustData$LAYOUT;
    }

    private static final long SetCustData$OFFSET = 248;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetCustData)(ICreateTypeInfo2 *, const GUID *const, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static final long SetCustData$offset() {
        return SetCustData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetCustData)(ICreateTypeInfo2 *, const GUID *const, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetCustData(MemorySegment struct) {
        return struct.get(SetCustData$LAYOUT, SetCustData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetCustData)(ICreateTypeInfo2 *, const GUID *const, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static void SetCustData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetCustData$LAYOUT, SetCustData$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetFuncCustData)(ICreateTypeInfo2 *, UINT, const GUID *const, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static class SetFuncCustData {

        SetFuncCustData() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetFuncCustData.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetFuncCustData.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetFuncCustData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetFuncCustData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetFuncCustData)(ICreateTypeInfo2 *, UINT, const GUID *const, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetFuncCustData$layout() {
        return SetFuncCustData$LAYOUT;
    }

    private static final long SetFuncCustData$OFFSET = 256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetFuncCustData)(ICreateTypeInfo2 *, UINT, const GUID *const, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static final long SetFuncCustData$offset() {
        return SetFuncCustData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetFuncCustData)(ICreateTypeInfo2 *, UINT, const GUID *const, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetFuncCustData(MemorySegment struct) {
        return struct.get(SetFuncCustData$LAYOUT, SetFuncCustData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetFuncCustData)(ICreateTypeInfo2 *, UINT, const GUID *const, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static void SetFuncCustData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetFuncCustData$LAYOUT, SetFuncCustData$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetParamCustData)(ICreateTypeInfo2 *, UINT, UINT, const GUID *const, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static class SetParamCustData {

        SetParamCustData() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, int _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetParamCustData.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetParamCustData.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetParamCustData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetParamCustData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetParamCustData)(ICreateTypeInfo2 *, UINT, UINT, const GUID *const, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetParamCustData$layout() {
        return SetParamCustData$LAYOUT;
    }

    private static final long SetParamCustData$OFFSET = 264;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetParamCustData)(ICreateTypeInfo2 *, UINT, UINT, const GUID *const, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static final long SetParamCustData$offset() {
        return SetParamCustData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetParamCustData)(ICreateTypeInfo2 *, UINT, UINT, const GUID *const, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetParamCustData(MemorySegment struct) {
        return struct.get(SetParamCustData$LAYOUT, SetParamCustData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetParamCustData)(ICreateTypeInfo2 *, UINT, UINT, const GUID *const, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static void SetParamCustData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetParamCustData$LAYOUT, SetParamCustData$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetVarCustData)(ICreateTypeInfo2 *, UINT, const GUID *const, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static class SetVarCustData {

        SetVarCustData() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetVarCustData.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetVarCustData.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetVarCustData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetVarCustData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetVarCustData)(ICreateTypeInfo2 *, UINT, const GUID *const, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetVarCustData$layout() {
        return SetVarCustData$LAYOUT;
    }

    private static final long SetVarCustData$OFFSET = 272;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetVarCustData)(ICreateTypeInfo2 *, UINT, const GUID *const, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static final long SetVarCustData$offset() {
        return SetVarCustData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetVarCustData)(ICreateTypeInfo2 *, UINT, const GUID *const, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetVarCustData(MemorySegment struct) {
        return struct.get(SetVarCustData$LAYOUT, SetVarCustData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetVarCustData)(ICreateTypeInfo2 *, UINT, const GUID *const, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static void SetVarCustData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetVarCustData$LAYOUT, SetVarCustData$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetImplTypeCustData)(ICreateTypeInfo2 *, UINT, const GUID *const, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static class SetImplTypeCustData {

        SetImplTypeCustData() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetImplTypeCustData.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetImplTypeCustData.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetImplTypeCustData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetImplTypeCustData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetImplTypeCustData)(ICreateTypeInfo2 *, UINT, const GUID *const, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetImplTypeCustData$layout() {
        return SetImplTypeCustData$LAYOUT;
    }

    private static final long SetImplTypeCustData$OFFSET = 280;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetImplTypeCustData)(ICreateTypeInfo2 *, UINT, const GUID *const, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static final long SetImplTypeCustData$offset() {
        return SetImplTypeCustData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetImplTypeCustData)(ICreateTypeInfo2 *, UINT, const GUID *const, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetImplTypeCustData(MemorySegment struct) {
        return struct.get(SetImplTypeCustData$LAYOUT, SetImplTypeCustData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetImplTypeCustData)(ICreateTypeInfo2 *, UINT, const GUID *const, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static void SetImplTypeCustData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetImplTypeCustData$LAYOUT, SetImplTypeCustData$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetHelpStringContext)(ICreateTypeInfo2 *, ULONG) __attribute__((stdcall))
     * }
     */
    public static class SetHelpStringContext {

        SetHelpStringContext() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetHelpStringContext.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetHelpStringContext.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetHelpStringContext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetHelpStringContext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetHelpStringContext)(ICreateTypeInfo2 *, ULONG) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetHelpStringContext$layout() {
        return SetHelpStringContext$LAYOUT;
    }

    private static final long SetHelpStringContext$OFFSET = 288;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetHelpStringContext)(ICreateTypeInfo2 *, ULONG) __attribute__((stdcall))
     * }
     */
    public static final long SetHelpStringContext$offset() {
        return SetHelpStringContext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetHelpStringContext)(ICreateTypeInfo2 *, ULONG) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetHelpStringContext(MemorySegment struct) {
        return struct.get(SetHelpStringContext$LAYOUT, SetHelpStringContext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetHelpStringContext)(ICreateTypeInfo2 *, ULONG) __attribute__((stdcall))
     * }
     */
    public static void SetHelpStringContext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetHelpStringContext$LAYOUT, SetHelpStringContext$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetFuncHelpStringContext)(ICreateTypeInfo2 *, UINT, ULONG) __attribute__((stdcall))
     * }
     */
    public static class SetFuncHelpStringContext {

        SetFuncHelpStringContext() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetFuncHelpStringContext.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetFuncHelpStringContext.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetFuncHelpStringContext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetFuncHelpStringContext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetFuncHelpStringContext)(ICreateTypeInfo2 *, UINT, ULONG) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetFuncHelpStringContext$layout() {
        return SetFuncHelpStringContext$LAYOUT;
    }

    private static final long SetFuncHelpStringContext$OFFSET = 296;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetFuncHelpStringContext)(ICreateTypeInfo2 *, UINT, ULONG) __attribute__((stdcall))
     * }
     */
    public static final long SetFuncHelpStringContext$offset() {
        return SetFuncHelpStringContext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetFuncHelpStringContext)(ICreateTypeInfo2 *, UINT, ULONG) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetFuncHelpStringContext(MemorySegment struct) {
        return struct.get(SetFuncHelpStringContext$LAYOUT, SetFuncHelpStringContext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetFuncHelpStringContext)(ICreateTypeInfo2 *, UINT, ULONG) __attribute__((stdcall))
     * }
     */
    public static void SetFuncHelpStringContext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetFuncHelpStringContext$LAYOUT, SetFuncHelpStringContext$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetVarHelpStringContext)(ICreateTypeInfo2 *, UINT, ULONG) __attribute__((stdcall))
     * }
     */
    public static class SetVarHelpStringContext {

        SetVarHelpStringContext() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetVarHelpStringContext.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetVarHelpStringContext.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetVarHelpStringContext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetVarHelpStringContext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetVarHelpStringContext)(ICreateTypeInfo2 *, UINT, ULONG) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetVarHelpStringContext$layout() {
        return SetVarHelpStringContext$LAYOUT;
    }

    private static final long SetVarHelpStringContext$OFFSET = 304;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetVarHelpStringContext)(ICreateTypeInfo2 *, UINT, ULONG) __attribute__((stdcall))
     * }
     */
    public static final long SetVarHelpStringContext$offset() {
        return SetVarHelpStringContext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetVarHelpStringContext)(ICreateTypeInfo2 *, UINT, ULONG) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetVarHelpStringContext(MemorySegment struct) {
        return struct.get(SetVarHelpStringContext$LAYOUT, SetVarHelpStringContext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetVarHelpStringContext)(ICreateTypeInfo2 *, UINT, ULONG) __attribute__((stdcall))
     * }
     */
    public static void SetVarHelpStringContext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetVarHelpStringContext$LAYOUT, SetVarHelpStringContext$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*Invalidate)(ICreateTypeInfo2 *) __attribute__((stdcall))
     * }
     */
    public static class Invalidate {

        Invalidate() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Invalidate.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Invalidate.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Invalidate$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Invalidate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*Invalidate)(ICreateTypeInfo2 *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Invalidate$layout() {
        return Invalidate$LAYOUT;
    }

    private static final long Invalidate$OFFSET = 312;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*Invalidate)(ICreateTypeInfo2 *) __attribute__((stdcall))
     * }
     */
    public static final long Invalidate$offset() {
        return Invalidate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*Invalidate)(ICreateTypeInfo2 *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Invalidate(MemorySegment struct) {
        return struct.get(Invalidate$LAYOUT, Invalidate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*Invalidate)(ICreateTypeInfo2 *) __attribute__((stdcall))
     * }
     */
    public static void Invalidate(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Invalidate$LAYOUT, Invalidate$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetName)(ICreateTypeInfo2 *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static class SetName {

        SetName() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetName.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetName.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetName)(ICreateTypeInfo2 *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetName$layout() {
        return SetName$LAYOUT;
    }

    private static final long SetName$OFFSET = 320;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetName)(ICreateTypeInfo2 *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static final long SetName$offset() {
        return SetName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetName)(ICreateTypeInfo2 *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetName(MemorySegment struct) {
        return struct.get(SetName$LAYOUT, SetName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetName)(ICreateTypeInfo2 *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static void SetName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetName$LAYOUT, SetName$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

