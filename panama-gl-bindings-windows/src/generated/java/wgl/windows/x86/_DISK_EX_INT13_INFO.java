// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _DISK_EX_INT13_INFO {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("ExBufferSize"),
        Constants$root.C_SHORT$LAYOUT.withName("ExFlags"),
        Constants$root.C_LONG$LAYOUT.withName("ExCylinders"),
        Constants$root.C_LONG$LAYOUT.withName("ExHeads"),
        Constants$root.C_LONG$LAYOUT.withName("ExSectorsPerTrack"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("ExSectorsPerDrive"),
        Constants$root.C_SHORT$LAYOUT.withName("ExSectorSize"),
        Constants$root.C_SHORT$LAYOUT.withName("ExReserved"),
        MemoryLayout.paddingLayout(32)
    ).withName("_DISK_EX_INT13_INFO");
    public static MemoryLayout $LAYOUT() {
        return _DISK_EX_INT13_INFO.$struct$LAYOUT;
    }
    static final VarHandle ExBufferSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ExBufferSize"));
    public static VarHandle ExBufferSize$VH() {
        return _DISK_EX_INT13_INFO.ExBufferSize$VH;
    }
    public static short ExBufferSize$get(MemorySegment seg) {
        return (short)_DISK_EX_INT13_INFO.ExBufferSize$VH.get(seg);
    }
    public static void ExBufferSize$set( MemorySegment seg, short x) {
        _DISK_EX_INT13_INFO.ExBufferSize$VH.set(seg, x);
    }
    public static short ExBufferSize$get(MemorySegment seg, long index) {
        return (short)_DISK_EX_INT13_INFO.ExBufferSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ExBufferSize$set(MemorySegment seg, long index, short x) {
        _DISK_EX_INT13_INFO.ExBufferSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ExFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ExFlags"));
    public static VarHandle ExFlags$VH() {
        return _DISK_EX_INT13_INFO.ExFlags$VH;
    }
    public static short ExFlags$get(MemorySegment seg) {
        return (short)_DISK_EX_INT13_INFO.ExFlags$VH.get(seg);
    }
    public static void ExFlags$set( MemorySegment seg, short x) {
        _DISK_EX_INT13_INFO.ExFlags$VH.set(seg, x);
    }
    public static short ExFlags$get(MemorySegment seg, long index) {
        return (short)_DISK_EX_INT13_INFO.ExFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ExFlags$set(MemorySegment seg, long index, short x) {
        _DISK_EX_INT13_INFO.ExFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ExCylinders$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ExCylinders"));
    public static VarHandle ExCylinders$VH() {
        return _DISK_EX_INT13_INFO.ExCylinders$VH;
    }
    public static int ExCylinders$get(MemorySegment seg) {
        return (int)_DISK_EX_INT13_INFO.ExCylinders$VH.get(seg);
    }
    public static void ExCylinders$set( MemorySegment seg, int x) {
        _DISK_EX_INT13_INFO.ExCylinders$VH.set(seg, x);
    }
    public static int ExCylinders$get(MemorySegment seg, long index) {
        return (int)_DISK_EX_INT13_INFO.ExCylinders$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ExCylinders$set(MemorySegment seg, long index, int x) {
        _DISK_EX_INT13_INFO.ExCylinders$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ExHeads$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ExHeads"));
    public static VarHandle ExHeads$VH() {
        return _DISK_EX_INT13_INFO.ExHeads$VH;
    }
    public static int ExHeads$get(MemorySegment seg) {
        return (int)_DISK_EX_INT13_INFO.ExHeads$VH.get(seg);
    }
    public static void ExHeads$set( MemorySegment seg, int x) {
        _DISK_EX_INT13_INFO.ExHeads$VH.set(seg, x);
    }
    public static int ExHeads$get(MemorySegment seg, long index) {
        return (int)_DISK_EX_INT13_INFO.ExHeads$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ExHeads$set(MemorySegment seg, long index, int x) {
        _DISK_EX_INT13_INFO.ExHeads$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ExSectorsPerTrack$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ExSectorsPerTrack"));
    public static VarHandle ExSectorsPerTrack$VH() {
        return _DISK_EX_INT13_INFO.ExSectorsPerTrack$VH;
    }
    public static int ExSectorsPerTrack$get(MemorySegment seg) {
        return (int)_DISK_EX_INT13_INFO.ExSectorsPerTrack$VH.get(seg);
    }
    public static void ExSectorsPerTrack$set( MemorySegment seg, int x) {
        _DISK_EX_INT13_INFO.ExSectorsPerTrack$VH.set(seg, x);
    }
    public static int ExSectorsPerTrack$get(MemorySegment seg, long index) {
        return (int)_DISK_EX_INT13_INFO.ExSectorsPerTrack$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ExSectorsPerTrack$set(MemorySegment seg, long index, int x) {
        _DISK_EX_INT13_INFO.ExSectorsPerTrack$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ExSectorsPerDrive$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ExSectorsPerDrive"));
    public static VarHandle ExSectorsPerDrive$VH() {
        return _DISK_EX_INT13_INFO.ExSectorsPerDrive$VH;
    }
    public static long ExSectorsPerDrive$get(MemorySegment seg) {
        return (long)_DISK_EX_INT13_INFO.ExSectorsPerDrive$VH.get(seg);
    }
    public static void ExSectorsPerDrive$set( MemorySegment seg, long x) {
        _DISK_EX_INT13_INFO.ExSectorsPerDrive$VH.set(seg, x);
    }
    public static long ExSectorsPerDrive$get(MemorySegment seg, long index) {
        return (long)_DISK_EX_INT13_INFO.ExSectorsPerDrive$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ExSectorsPerDrive$set(MemorySegment seg, long index, long x) {
        _DISK_EX_INT13_INFO.ExSectorsPerDrive$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ExSectorSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ExSectorSize"));
    public static VarHandle ExSectorSize$VH() {
        return _DISK_EX_INT13_INFO.ExSectorSize$VH;
    }
    public static short ExSectorSize$get(MemorySegment seg) {
        return (short)_DISK_EX_INT13_INFO.ExSectorSize$VH.get(seg);
    }
    public static void ExSectorSize$set( MemorySegment seg, short x) {
        _DISK_EX_INT13_INFO.ExSectorSize$VH.set(seg, x);
    }
    public static short ExSectorSize$get(MemorySegment seg, long index) {
        return (short)_DISK_EX_INT13_INFO.ExSectorSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ExSectorSize$set(MemorySegment seg, long index, short x) {
        _DISK_EX_INT13_INFO.ExSectorSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ExReserved$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ExReserved"));
    public static VarHandle ExReserved$VH() {
        return _DISK_EX_INT13_INFO.ExReserved$VH;
    }
    public static short ExReserved$get(MemorySegment seg) {
        return (short)_DISK_EX_INT13_INFO.ExReserved$VH.get(seg);
    }
    public static void ExReserved$set( MemorySegment seg, short x) {
        _DISK_EX_INT13_INFO.ExReserved$VH.set(seg, x);
    }
    public static short ExReserved$get(MemorySegment seg, long index) {
        return (short)_DISK_EX_INT13_INFO.ExReserved$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ExReserved$set(MemorySegment seg, long index, short x) {
        _DISK_EX_INT13_INFO.ExReserved$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


