// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _NCRYPT_KEY_BLOB_HEADER {
 *     ULONG cbSize;
 *     ULONG dwMagic;
 *     ULONG cbAlgName;
 *     ULONG cbKeyData;
 * }
 * }
 */
public class _NCRYPT_KEY_BLOB_HEADER {

    _NCRYPT_KEY_BLOB_HEADER() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("cbSize"),
        wgl_h.C_LONG.withName("dwMagic"),
        wgl_h.C_LONG.withName("cbAlgName"),
        wgl_h.C_LONG.withName("cbKeyData")
    ).withName("_NCRYPT_KEY_BLOB_HEADER");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt cbSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG cbSize
     * }
     */
    public static final OfInt cbSize$layout() {
        return cbSize$LAYOUT;
    }

    private static final long cbSize$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG cbSize
     * }
     */
    public static final long cbSize$offset() {
        return cbSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG cbSize
     * }
     */
    public static int cbSize(MemorySegment struct) {
        return struct.get(cbSize$LAYOUT, cbSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG cbSize
     * }
     */
    public static void cbSize(MemorySegment struct, int fieldValue) {
        struct.set(cbSize$LAYOUT, cbSize$OFFSET, fieldValue);
    }

    private static final OfInt dwMagic$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwMagic"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG dwMagic
     * }
     */
    public static final OfInt dwMagic$layout() {
        return dwMagic$LAYOUT;
    }

    private static final long dwMagic$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG dwMagic
     * }
     */
    public static final long dwMagic$offset() {
        return dwMagic$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG dwMagic
     * }
     */
    public static int dwMagic(MemorySegment struct) {
        return struct.get(dwMagic$LAYOUT, dwMagic$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG dwMagic
     * }
     */
    public static void dwMagic(MemorySegment struct, int fieldValue) {
        struct.set(dwMagic$LAYOUT, dwMagic$OFFSET, fieldValue);
    }

    private static final OfInt cbAlgName$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbAlgName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG cbAlgName
     * }
     */
    public static final OfInt cbAlgName$layout() {
        return cbAlgName$LAYOUT;
    }

    private static final long cbAlgName$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG cbAlgName
     * }
     */
    public static final long cbAlgName$offset() {
        return cbAlgName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG cbAlgName
     * }
     */
    public static int cbAlgName(MemorySegment struct) {
        return struct.get(cbAlgName$LAYOUT, cbAlgName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG cbAlgName
     * }
     */
    public static void cbAlgName(MemorySegment struct, int fieldValue) {
        struct.set(cbAlgName$LAYOUT, cbAlgName$OFFSET, fieldValue);
    }

    private static final OfInt cbKeyData$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbKeyData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG cbKeyData
     * }
     */
    public static final OfInt cbKeyData$layout() {
        return cbKeyData$LAYOUT;
    }

    private static final long cbKeyData$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG cbKeyData
     * }
     */
    public static final long cbKeyData$offset() {
        return cbKeyData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG cbKeyData
     * }
     */
    public static int cbKeyData(MemorySegment struct) {
        return struct.get(cbKeyData$LAYOUT, cbKeyData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG cbKeyData
     * }
     */
    public static void cbKeyData(MemorySegment struct, int fieldValue) {
        struct.set(cbKeyData$LAYOUT, cbKeyData$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

