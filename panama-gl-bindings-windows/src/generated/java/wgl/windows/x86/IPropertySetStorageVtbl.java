// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class IPropertySetStorageVtbl {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("Create"),
        Constants$root.C_POINTER$LAYOUT.withName("Open"),
        Constants$root.C_POINTER$LAYOUT.withName("Delete"),
        Constants$root.C_POINTER$LAYOUT.withName("Enum")
    ).withName("IPropertySetStorageVtbl");
    public static MemoryLayout $LAYOUT() {
        return IPropertySetStorageVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        IPropertySetStorageVtbl.QueryInterface$FUNC
    );
    public interface QueryInterface {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(QueryInterface fi, MemorySession session) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IPropertySetStorageVtbl.QueryInterface$FUNC, session);
        }
        static QueryInterface ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IPropertySetStorageVtbl.QueryInterface$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IPropertySetStorageVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IPropertySetStorageVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IPropertySetStorageVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IPropertySetStorageVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IPropertySetStorageVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment, MemorySession session) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), session);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        IPropertySetStorageVtbl.AddRef$FUNC
    );
    public interface AddRef {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(AddRef fi, MemorySession session) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IPropertySetStorageVtbl.AddRef$FUNC, session);
        }
        static AddRef ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IPropertySetStorageVtbl.AddRef$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IPropertySetStorageVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IPropertySetStorageVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IPropertySetStorageVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IPropertySetStorageVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IPropertySetStorageVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment, MemorySession session) {
        return AddRef.ofAddress(AddRef$get(segment), session);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        IPropertySetStorageVtbl.Release$FUNC
    );
    public interface Release {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Release fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Release.class, fi, IPropertySetStorageVtbl.Release$FUNC, session);
        }
        static Release ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IPropertySetStorageVtbl.Release$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IPropertySetStorageVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IPropertySetStorageVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IPropertySetStorageVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IPropertySetStorageVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IPropertySetStorageVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment, MemorySession session) {
        return Release.ofAddress(Release$get(segment), session);
    }
    static final FunctionDescriptor Create$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Create$MH = RuntimeHelper.downcallHandle(
        IPropertySetStorageVtbl.Create$FUNC
    );
    public interface Create {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, int _x3, int _x4, java.lang.foreign.MemoryAddress _x5);
        static MemorySegment allocate(Create fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Create.class, fi, IPropertySetStorageVtbl.Create$FUNC, session);
        }
        static Create ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, int __x3, int __x4, java.lang.foreign.MemoryAddress __x5) -> {
                try {
                    return (int)IPropertySetStorageVtbl.Create$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, __x3, __x4, (java.lang.foreign.Addressable)__x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Create$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Create"));
    public static VarHandle Create$VH() {
        return IPropertySetStorageVtbl.Create$VH;
    }
    public static MemoryAddress Create$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IPropertySetStorageVtbl.Create$VH.get(seg);
    }
    public static void Create$set( MemorySegment seg, MemoryAddress x) {
        IPropertySetStorageVtbl.Create$VH.set(seg, x);
    }
    public static MemoryAddress Create$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IPropertySetStorageVtbl.Create$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Create$set(MemorySegment seg, long index, MemoryAddress x) {
        IPropertySetStorageVtbl.Create$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Create Create (MemorySegment segment, MemorySession session) {
        return Create.ofAddress(Create$get(segment), session);
    }
    static final FunctionDescriptor Open$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Open$MH = RuntimeHelper.downcallHandle(
        IPropertySetStorageVtbl.Open$FUNC
    );
    public interface Open {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(Open fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Open.class, fi, IPropertySetStorageVtbl.Open$FUNC, session);
        }
        static Open ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)IPropertySetStorageVtbl.Open$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Open$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Open"));
    public static VarHandle Open$VH() {
        return IPropertySetStorageVtbl.Open$VH;
    }
    public static MemoryAddress Open$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IPropertySetStorageVtbl.Open$VH.get(seg);
    }
    public static void Open$set( MemorySegment seg, MemoryAddress x) {
        IPropertySetStorageVtbl.Open$VH.set(seg, x);
    }
    public static MemoryAddress Open$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IPropertySetStorageVtbl.Open$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Open$set(MemorySegment seg, long index, MemoryAddress x) {
        IPropertySetStorageVtbl.Open$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Open Open (MemorySegment segment, MemorySession session) {
        return Open.ofAddress(Open$get(segment), session);
    }
    static final FunctionDescriptor Delete$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Delete$MH = RuntimeHelper.downcallHandle(
        IPropertySetStorageVtbl.Delete$FUNC
    );
    public interface Delete {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(Delete fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Delete.class, fi, IPropertySetStorageVtbl.Delete$FUNC, session);
        }
        static Delete ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IPropertySetStorageVtbl.Delete$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Delete$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Delete"));
    public static VarHandle Delete$VH() {
        return IPropertySetStorageVtbl.Delete$VH;
    }
    public static MemoryAddress Delete$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IPropertySetStorageVtbl.Delete$VH.get(seg);
    }
    public static void Delete$set( MemorySegment seg, MemoryAddress x) {
        IPropertySetStorageVtbl.Delete$VH.set(seg, x);
    }
    public static MemoryAddress Delete$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IPropertySetStorageVtbl.Delete$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Delete$set(MemorySegment seg, long index, MemoryAddress x) {
        IPropertySetStorageVtbl.Delete$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Delete Delete (MemorySegment segment, MemorySession session) {
        return Delete.ofAddress(Delete$get(segment), session);
    }
    static final FunctionDescriptor Enum$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Enum$MH = RuntimeHelper.downcallHandle(
        IPropertySetStorageVtbl.Enum$FUNC
    );
    public interface Enum {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(Enum fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Enum.class, fi, IPropertySetStorageVtbl.Enum$FUNC, session);
        }
        static Enum ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IPropertySetStorageVtbl.Enum$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Enum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Enum"));
    public static VarHandle Enum$VH() {
        return IPropertySetStorageVtbl.Enum$VH;
    }
    public static MemoryAddress Enum$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IPropertySetStorageVtbl.Enum$VH.get(seg);
    }
    public static void Enum$set( MemorySegment seg, MemoryAddress x) {
        IPropertySetStorageVtbl.Enum$VH.set(seg, x);
    }
    public static MemoryAddress Enum$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IPropertySetStorageVtbl.Enum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Enum$set(MemorySegment seg, long index, MemoryAddress x) {
        IPropertySetStorageVtbl.Enum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Enum Enum (MemorySegment segment, MemorySession session) {
        return Enum.ofAddress(Enum$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


