// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct IUriBuilderVtbl {
 *     HRESULT (*QueryInterface)(IUriBuilder *, const IID *const, void **) __attribute__((stdcall));
 *     ULONG (*AddRef)(IUriBuilder *) __attribute__((stdcall));
 *     ULONG (*Release)(IUriBuilder *) __attribute__((stdcall));
 *     HRESULT (*CreateUriSimple)(IUriBuilder *, DWORD, DWORD_PTR, IUri **) __attribute__((stdcall));
 *     HRESULT (*CreateUri)(IUriBuilder *, DWORD, DWORD, DWORD_PTR, IUri **) __attribute__((stdcall));
 *     HRESULT (*CreateUriWithFlags)(IUriBuilder *, DWORD, DWORD, DWORD, DWORD_PTR, IUri **) __attribute__((stdcall));
 *     HRESULT (*GetIUri)(IUriBuilder *, IUri **) __attribute__((stdcall));
 *     HRESULT (*SetIUri)(IUriBuilder *, IUri *) __attribute__((stdcall));
 *     HRESULT (*GetFragment)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall));
 *     HRESULT (*GetHost)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall));
 *     HRESULT (*GetPassword)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall));
 *     HRESULT (*GetPath)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall));
 *     HRESULT (*GetPort)(IUriBuilder *, BOOL *, DWORD *) __attribute__((stdcall));
 *     HRESULT (*GetQuery)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall));
 *     HRESULT (*GetSchemeName)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall));
 *     HRESULT (*GetUserNameA)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall));
 *     HRESULT (*SetFragment)(IUriBuilder *, LPCWSTR) __attribute__((stdcall));
 *     HRESULT (*SetHost)(IUriBuilder *, LPCWSTR) __attribute__((stdcall));
 *     HRESULT (*SetPassword)(IUriBuilder *, LPCWSTR) __attribute__((stdcall));
 *     HRESULT (*SetPath)(IUriBuilder *, LPCWSTR) __attribute__((stdcall));
 *     HRESULT (*SetPortA)(IUriBuilder *, BOOL, DWORD) __attribute__((stdcall));
 *     HRESULT (*SetQuery)(IUriBuilder *, LPCWSTR) __attribute__((stdcall));
 *     HRESULT (*SetSchemeName)(IUriBuilder *, LPCWSTR) __attribute__((stdcall));
 *     HRESULT (*SetUserName)(IUriBuilder *, LPCWSTR) __attribute__((stdcall));
 *     HRESULT (*RemoveProperties)(IUriBuilder *, DWORD) __attribute__((stdcall));
 *     HRESULT (*HasBeenModified)(IUriBuilder *, BOOL *) __attribute__((stdcall));
 * }
 * }
 */
public class IUriBuilderVtbl {

    IUriBuilderVtbl() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("QueryInterface"),
        wgl_h.C_POINTER.withName("AddRef"),
        wgl_h.C_POINTER.withName("Release"),
        wgl_h.C_POINTER.withName("CreateUriSimple"),
        wgl_h.C_POINTER.withName("CreateUri"),
        wgl_h.C_POINTER.withName("CreateUriWithFlags"),
        wgl_h.C_POINTER.withName("GetIUri"),
        wgl_h.C_POINTER.withName("SetIUri"),
        wgl_h.C_POINTER.withName("GetFragment"),
        wgl_h.C_POINTER.withName("GetHost"),
        wgl_h.C_POINTER.withName("GetPassword"),
        wgl_h.C_POINTER.withName("GetPath"),
        wgl_h.C_POINTER.withName("GetPort"),
        wgl_h.C_POINTER.withName("GetQuery"),
        wgl_h.C_POINTER.withName("GetSchemeName"),
        wgl_h.C_POINTER.withName("GetUserNameA"),
        wgl_h.C_POINTER.withName("SetFragment"),
        wgl_h.C_POINTER.withName("SetHost"),
        wgl_h.C_POINTER.withName("SetPassword"),
        wgl_h.C_POINTER.withName("SetPath"),
        wgl_h.C_POINTER.withName("SetPortA"),
        wgl_h.C_POINTER.withName("SetQuery"),
        wgl_h.C_POINTER.withName("SetSchemeName"),
        wgl_h.C_POINTER.withName("SetUserName"),
        wgl_h.C_POINTER.withName("RemoveProperties"),
        wgl_h.C_POINTER.withName("HasBeenModified")
    ).withName("IUriBuilderVtbl");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IUriBuilder *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static class QueryInterface {

        QueryInterface() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(QueryInterface.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(QueryInterface.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout QueryInterface$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("QueryInterface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IUriBuilder *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout QueryInterface$layout() {
        return QueryInterface$LAYOUT;
    }

    private static final long QueryInterface$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IUriBuilder *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final long QueryInterface$offset() {
        return QueryInterface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IUriBuilder *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment QueryInterface(MemorySegment struct) {
        return struct.get(QueryInterface$LAYOUT, QueryInterface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IUriBuilder *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static void QueryInterface(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(QueryInterface$LAYOUT, QueryInterface$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*AddRef)(IUriBuilder *) __attribute__((stdcall))
     * }
     */
    public static class AddRef {

        AddRef() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(AddRef.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(AddRef.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout AddRef$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("AddRef"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IUriBuilder *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout AddRef$layout() {
        return AddRef$LAYOUT;
    }

    private static final long AddRef$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IUriBuilder *) __attribute__((stdcall))
     * }
     */
    public static final long AddRef$offset() {
        return AddRef$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IUriBuilder *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment AddRef(MemorySegment struct) {
        return struct.get(AddRef$LAYOUT, AddRef$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IUriBuilder *) __attribute__((stdcall))
     * }
     */
    public static void AddRef(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(AddRef$LAYOUT, AddRef$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*Release)(IUriBuilder *) __attribute__((stdcall))
     * }
     */
    public static class Release {

        Release() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Release.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Release.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Release$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Release"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IUriBuilder *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Release$layout() {
        return Release$LAYOUT;
    }

    private static final long Release$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IUriBuilder *) __attribute__((stdcall))
     * }
     */
    public static final long Release$offset() {
        return Release$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IUriBuilder *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Release(MemorySegment struct) {
        return struct.get(Release$LAYOUT, Release$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IUriBuilder *) __attribute__((stdcall))
     * }
     */
    public static void Release(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Release$LAYOUT, Release$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*CreateUriSimple)(IUriBuilder *, DWORD, DWORD_PTR, IUri **) __attribute__((stdcall))
     * }
     */
    public static class CreateUriSimple {

        CreateUriSimple() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, long _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(CreateUriSimple.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(CreateUriSimple.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, long _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout CreateUriSimple$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("CreateUriSimple"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*CreateUriSimple)(IUriBuilder *, DWORD, DWORD_PTR, IUri **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout CreateUriSimple$layout() {
        return CreateUriSimple$LAYOUT;
    }

    private static final long CreateUriSimple$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*CreateUriSimple)(IUriBuilder *, DWORD, DWORD_PTR, IUri **) __attribute__((stdcall))
     * }
     */
    public static final long CreateUriSimple$offset() {
        return CreateUriSimple$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*CreateUriSimple)(IUriBuilder *, DWORD, DWORD_PTR, IUri **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment CreateUriSimple(MemorySegment struct) {
        return struct.get(CreateUriSimple$LAYOUT, CreateUriSimple$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*CreateUriSimple)(IUriBuilder *, DWORD, DWORD_PTR, IUri **) __attribute__((stdcall))
     * }
     */
    public static void CreateUriSimple(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(CreateUriSimple$LAYOUT, CreateUriSimple$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*CreateUri)(IUriBuilder *, DWORD, DWORD, DWORD_PTR, IUri **) __attribute__((stdcall))
     * }
     */
    public static class CreateUri {

        CreateUri() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, int _x2, long _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(CreateUri.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(CreateUri.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2, long _x3, MemorySegment _x4) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout CreateUri$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("CreateUri"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*CreateUri)(IUriBuilder *, DWORD, DWORD, DWORD_PTR, IUri **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout CreateUri$layout() {
        return CreateUri$LAYOUT;
    }

    private static final long CreateUri$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*CreateUri)(IUriBuilder *, DWORD, DWORD, DWORD_PTR, IUri **) __attribute__((stdcall))
     * }
     */
    public static final long CreateUri$offset() {
        return CreateUri$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*CreateUri)(IUriBuilder *, DWORD, DWORD, DWORD_PTR, IUri **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment CreateUri(MemorySegment struct) {
        return struct.get(CreateUri$LAYOUT, CreateUri$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*CreateUri)(IUriBuilder *, DWORD, DWORD, DWORD_PTR, IUri **) __attribute__((stdcall))
     * }
     */
    public static void CreateUri(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(CreateUri$LAYOUT, CreateUri$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*CreateUriWithFlags)(IUriBuilder *, DWORD, DWORD, DWORD, DWORD_PTR, IUri **) __attribute__((stdcall))
     * }
     */
    public static class CreateUriWithFlags {

        CreateUriWithFlags() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, int _x2, int _x3, long _x4, MemorySegment _x5);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(CreateUriWithFlags.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(CreateUriWithFlags.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2, int _x3, long _x4, MemorySegment _x5) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout CreateUriWithFlags$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("CreateUriWithFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*CreateUriWithFlags)(IUriBuilder *, DWORD, DWORD, DWORD, DWORD_PTR, IUri **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout CreateUriWithFlags$layout() {
        return CreateUriWithFlags$LAYOUT;
    }

    private static final long CreateUriWithFlags$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*CreateUriWithFlags)(IUriBuilder *, DWORD, DWORD, DWORD, DWORD_PTR, IUri **) __attribute__((stdcall))
     * }
     */
    public static final long CreateUriWithFlags$offset() {
        return CreateUriWithFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*CreateUriWithFlags)(IUriBuilder *, DWORD, DWORD, DWORD, DWORD_PTR, IUri **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment CreateUriWithFlags(MemorySegment struct) {
        return struct.get(CreateUriWithFlags$LAYOUT, CreateUriWithFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*CreateUriWithFlags)(IUriBuilder *, DWORD, DWORD, DWORD, DWORD_PTR, IUri **) __attribute__((stdcall))
     * }
     */
    public static void CreateUriWithFlags(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(CreateUriWithFlags$LAYOUT, CreateUriWithFlags$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetIUri)(IUriBuilder *, IUri **) __attribute__((stdcall))
     * }
     */
    public static class GetIUri {

        GetIUri() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetIUri.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetIUri.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetIUri$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetIUri"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetIUri)(IUriBuilder *, IUri **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetIUri$layout() {
        return GetIUri$LAYOUT;
    }

    private static final long GetIUri$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetIUri)(IUriBuilder *, IUri **) __attribute__((stdcall))
     * }
     */
    public static final long GetIUri$offset() {
        return GetIUri$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetIUri)(IUriBuilder *, IUri **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetIUri(MemorySegment struct) {
        return struct.get(GetIUri$LAYOUT, GetIUri$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetIUri)(IUriBuilder *, IUri **) __attribute__((stdcall))
     * }
     */
    public static void GetIUri(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetIUri$LAYOUT, GetIUri$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetIUri)(IUriBuilder *, IUri *) __attribute__((stdcall))
     * }
     */
    public static class SetIUri {

        SetIUri() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetIUri.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetIUri.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetIUri$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetIUri"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetIUri)(IUriBuilder *, IUri *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetIUri$layout() {
        return SetIUri$LAYOUT;
    }

    private static final long SetIUri$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetIUri)(IUriBuilder *, IUri *) __attribute__((stdcall))
     * }
     */
    public static final long SetIUri$offset() {
        return SetIUri$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetIUri)(IUriBuilder *, IUri *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetIUri(MemorySegment struct) {
        return struct.get(SetIUri$LAYOUT, SetIUri$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetIUri)(IUriBuilder *, IUri *) __attribute__((stdcall))
     * }
     */
    public static void SetIUri(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetIUri$LAYOUT, SetIUri$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetFragment)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall))
     * }
     */
    public static class GetFragment {

        GetFragment() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetFragment.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetFragment.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetFragment$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetFragment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetFragment)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetFragment$layout() {
        return GetFragment$LAYOUT;
    }

    private static final long GetFragment$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetFragment)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall))
     * }
     */
    public static final long GetFragment$offset() {
        return GetFragment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetFragment)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetFragment(MemorySegment struct) {
        return struct.get(GetFragment$LAYOUT, GetFragment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetFragment)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall))
     * }
     */
    public static void GetFragment(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetFragment$LAYOUT, GetFragment$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetHost)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall))
     * }
     */
    public static class GetHost {

        GetHost() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetHost.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetHost.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetHost$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetHost"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetHost)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetHost$layout() {
        return GetHost$LAYOUT;
    }

    private static final long GetHost$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetHost)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall))
     * }
     */
    public static final long GetHost$offset() {
        return GetHost$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetHost)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetHost(MemorySegment struct) {
        return struct.get(GetHost$LAYOUT, GetHost$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetHost)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall))
     * }
     */
    public static void GetHost(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetHost$LAYOUT, GetHost$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetPassword)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall))
     * }
     */
    public static class GetPassword {

        GetPassword() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetPassword.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetPassword.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetPassword$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetPassword"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetPassword)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetPassword$layout() {
        return GetPassword$LAYOUT;
    }

    private static final long GetPassword$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetPassword)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall))
     * }
     */
    public static final long GetPassword$offset() {
        return GetPassword$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetPassword)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetPassword(MemorySegment struct) {
        return struct.get(GetPassword$LAYOUT, GetPassword$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetPassword)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall))
     * }
     */
    public static void GetPassword(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetPassword$LAYOUT, GetPassword$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetPath)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall))
     * }
     */
    public static class GetPath {

        GetPath() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetPath.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetPath.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetPath$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetPath"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetPath)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetPath$layout() {
        return GetPath$LAYOUT;
    }

    private static final long GetPath$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetPath)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall))
     * }
     */
    public static final long GetPath$offset() {
        return GetPath$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetPath)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetPath(MemorySegment struct) {
        return struct.get(GetPath$LAYOUT, GetPath$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetPath)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall))
     * }
     */
    public static void GetPath(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetPath$LAYOUT, GetPath$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetPort)(IUriBuilder *, BOOL *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static class GetPort {

        GetPort() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetPort.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetPort.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetPort$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetPort"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetPort)(IUriBuilder *, BOOL *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetPort$layout() {
        return GetPort$LAYOUT;
    }

    private static final long GetPort$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetPort)(IUriBuilder *, BOOL *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static final long GetPort$offset() {
        return GetPort$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetPort)(IUriBuilder *, BOOL *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetPort(MemorySegment struct) {
        return struct.get(GetPort$LAYOUT, GetPort$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetPort)(IUriBuilder *, BOOL *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static void GetPort(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetPort$LAYOUT, GetPort$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetQuery)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall))
     * }
     */
    public static class GetQuery {

        GetQuery() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetQuery.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetQuery.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetQuery$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetQuery"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetQuery)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetQuery$layout() {
        return GetQuery$LAYOUT;
    }

    private static final long GetQuery$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetQuery)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall))
     * }
     */
    public static final long GetQuery$offset() {
        return GetQuery$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetQuery)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetQuery(MemorySegment struct) {
        return struct.get(GetQuery$LAYOUT, GetQuery$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetQuery)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall))
     * }
     */
    public static void GetQuery(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetQuery$LAYOUT, GetQuery$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetSchemeName)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall))
     * }
     */
    public static class GetSchemeName {

        GetSchemeName() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetSchemeName.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetSchemeName.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetSchemeName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetSchemeName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetSchemeName)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetSchemeName$layout() {
        return GetSchemeName$LAYOUT;
    }

    private static final long GetSchemeName$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetSchemeName)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall))
     * }
     */
    public static final long GetSchemeName$offset() {
        return GetSchemeName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetSchemeName)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetSchemeName(MemorySegment struct) {
        return struct.get(GetSchemeName$LAYOUT, GetSchemeName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetSchemeName)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall))
     * }
     */
    public static void GetSchemeName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetSchemeName$LAYOUT, GetSchemeName$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetUserNameA)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall))
     * }
     */
    public static class GetUserNameA {

        GetUserNameA() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetUserNameA.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetUserNameA.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetUserNameA$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetUserNameA"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetUserNameA)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetUserNameA$layout() {
        return GetUserNameA$LAYOUT;
    }

    private static final long GetUserNameA$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetUserNameA)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall))
     * }
     */
    public static final long GetUserNameA$offset() {
        return GetUserNameA$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetUserNameA)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetUserNameA(MemorySegment struct) {
        return struct.get(GetUserNameA$LAYOUT, GetUserNameA$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetUserNameA)(IUriBuilder *, DWORD *, LPCWSTR *) __attribute__((stdcall))
     * }
     */
    public static void GetUserNameA(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetUserNameA$LAYOUT, GetUserNameA$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetFragment)(IUriBuilder *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static class SetFragment {

        SetFragment() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetFragment.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetFragment.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetFragment$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetFragment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetFragment)(IUriBuilder *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetFragment$layout() {
        return SetFragment$LAYOUT;
    }

    private static final long SetFragment$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetFragment)(IUriBuilder *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static final long SetFragment$offset() {
        return SetFragment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetFragment)(IUriBuilder *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetFragment(MemorySegment struct) {
        return struct.get(SetFragment$LAYOUT, SetFragment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetFragment)(IUriBuilder *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static void SetFragment(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetFragment$LAYOUT, SetFragment$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetHost)(IUriBuilder *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static class SetHost {

        SetHost() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetHost.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetHost.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetHost$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetHost"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetHost)(IUriBuilder *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetHost$layout() {
        return SetHost$LAYOUT;
    }

    private static final long SetHost$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetHost)(IUriBuilder *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static final long SetHost$offset() {
        return SetHost$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetHost)(IUriBuilder *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetHost(MemorySegment struct) {
        return struct.get(SetHost$LAYOUT, SetHost$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetHost)(IUriBuilder *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static void SetHost(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetHost$LAYOUT, SetHost$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetPassword)(IUriBuilder *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static class SetPassword {

        SetPassword() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetPassword.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetPassword.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetPassword$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetPassword"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetPassword)(IUriBuilder *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetPassword$layout() {
        return SetPassword$LAYOUT;
    }

    private static final long SetPassword$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetPassword)(IUriBuilder *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static final long SetPassword$offset() {
        return SetPassword$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetPassword)(IUriBuilder *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetPassword(MemorySegment struct) {
        return struct.get(SetPassword$LAYOUT, SetPassword$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetPassword)(IUriBuilder *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static void SetPassword(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetPassword$LAYOUT, SetPassword$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetPath)(IUriBuilder *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static class SetPath {

        SetPath() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetPath.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetPath.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetPath$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetPath"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetPath)(IUriBuilder *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetPath$layout() {
        return SetPath$LAYOUT;
    }

    private static final long SetPath$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetPath)(IUriBuilder *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static final long SetPath$offset() {
        return SetPath$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetPath)(IUriBuilder *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetPath(MemorySegment struct) {
        return struct.get(SetPath$LAYOUT, SetPath$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetPath)(IUriBuilder *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static void SetPath(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetPath$LAYOUT, SetPath$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetPortA)(IUriBuilder *, BOOL, DWORD) __attribute__((stdcall))
     * }
     */
    public static class SetPortA {

        SetPortA() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetPortA.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetPortA.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetPortA$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetPortA"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetPortA)(IUriBuilder *, BOOL, DWORD) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetPortA$layout() {
        return SetPortA$LAYOUT;
    }

    private static final long SetPortA$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetPortA)(IUriBuilder *, BOOL, DWORD) __attribute__((stdcall))
     * }
     */
    public static final long SetPortA$offset() {
        return SetPortA$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetPortA)(IUriBuilder *, BOOL, DWORD) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetPortA(MemorySegment struct) {
        return struct.get(SetPortA$LAYOUT, SetPortA$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetPortA)(IUriBuilder *, BOOL, DWORD) __attribute__((stdcall))
     * }
     */
    public static void SetPortA(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetPortA$LAYOUT, SetPortA$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetQuery)(IUriBuilder *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static class SetQuery {

        SetQuery() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetQuery.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetQuery.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetQuery$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetQuery"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetQuery)(IUriBuilder *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetQuery$layout() {
        return SetQuery$LAYOUT;
    }

    private static final long SetQuery$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetQuery)(IUriBuilder *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static final long SetQuery$offset() {
        return SetQuery$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetQuery)(IUriBuilder *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetQuery(MemorySegment struct) {
        return struct.get(SetQuery$LAYOUT, SetQuery$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetQuery)(IUriBuilder *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static void SetQuery(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetQuery$LAYOUT, SetQuery$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetSchemeName)(IUriBuilder *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static class SetSchemeName {

        SetSchemeName() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetSchemeName.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetSchemeName.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetSchemeName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetSchemeName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetSchemeName)(IUriBuilder *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetSchemeName$layout() {
        return SetSchemeName$LAYOUT;
    }

    private static final long SetSchemeName$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetSchemeName)(IUriBuilder *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static final long SetSchemeName$offset() {
        return SetSchemeName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetSchemeName)(IUriBuilder *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetSchemeName(MemorySegment struct) {
        return struct.get(SetSchemeName$LAYOUT, SetSchemeName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetSchemeName)(IUriBuilder *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static void SetSchemeName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetSchemeName$LAYOUT, SetSchemeName$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetUserName)(IUriBuilder *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static class SetUserName {

        SetUserName() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetUserName.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetUserName.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetUserName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetUserName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetUserName)(IUriBuilder *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetUserName$layout() {
        return SetUserName$LAYOUT;
    }

    private static final long SetUserName$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetUserName)(IUriBuilder *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static final long SetUserName$offset() {
        return SetUserName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetUserName)(IUriBuilder *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetUserName(MemorySegment struct) {
        return struct.get(SetUserName$LAYOUT, SetUserName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetUserName)(IUriBuilder *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static void SetUserName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetUserName$LAYOUT, SetUserName$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*RemoveProperties)(IUriBuilder *, DWORD) __attribute__((stdcall))
     * }
     */
    public static class RemoveProperties {

        RemoveProperties() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(RemoveProperties.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(RemoveProperties.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout RemoveProperties$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("RemoveProperties"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*RemoveProperties)(IUriBuilder *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout RemoveProperties$layout() {
        return RemoveProperties$LAYOUT;
    }

    private static final long RemoveProperties$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*RemoveProperties)(IUriBuilder *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final long RemoveProperties$offset() {
        return RemoveProperties$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*RemoveProperties)(IUriBuilder *, DWORD) __attribute__((stdcall))
     * }
     */
    public static MemorySegment RemoveProperties(MemorySegment struct) {
        return struct.get(RemoveProperties$LAYOUT, RemoveProperties$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*RemoveProperties)(IUriBuilder *, DWORD) __attribute__((stdcall))
     * }
     */
    public static void RemoveProperties(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(RemoveProperties$LAYOUT, RemoveProperties$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*HasBeenModified)(IUriBuilder *, BOOL *) __attribute__((stdcall))
     * }
     */
    public static class HasBeenModified {

        HasBeenModified() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(HasBeenModified.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(HasBeenModified.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout HasBeenModified$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("HasBeenModified"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*HasBeenModified)(IUriBuilder *, BOOL *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout HasBeenModified$layout() {
        return HasBeenModified$LAYOUT;
    }

    private static final long HasBeenModified$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*HasBeenModified)(IUriBuilder *, BOOL *) __attribute__((stdcall))
     * }
     */
    public static final long HasBeenModified$offset() {
        return HasBeenModified$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*HasBeenModified)(IUriBuilder *, BOOL *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment HasBeenModified(MemorySegment struct) {
        return struct.get(HasBeenModified$LAYOUT, HasBeenModified$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*HasBeenModified)(IUriBuilder *, BOOL *) __attribute__((stdcall))
     * }
     */
    public static void HasBeenModified(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(HasBeenModified$LAYOUT, HasBeenModified$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

