// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _CERT_LOGOTYPE_INFO {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("dwLogotypeInfoChoice"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.unionLayout(
            Constants$root.C_POINTER$LAYOUT.withName("pLogotypeDirectInfo"),
            Constants$root.C_POINTER$LAYOUT.withName("pLogotypeIndirectInfo")
        ).withName("$anon$0")
    ).withName("_CERT_LOGOTYPE_INFO");
    public static MemoryLayout $LAYOUT() {
        return _CERT_LOGOTYPE_INFO.$struct$LAYOUT;
    }
    static final VarHandle dwLogotypeInfoChoice$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwLogotypeInfoChoice"));
    public static VarHandle dwLogotypeInfoChoice$VH() {
        return _CERT_LOGOTYPE_INFO.dwLogotypeInfoChoice$VH;
    }
    public static int dwLogotypeInfoChoice$get(MemorySegment seg) {
        return (int)_CERT_LOGOTYPE_INFO.dwLogotypeInfoChoice$VH.get(seg);
    }
    public static void dwLogotypeInfoChoice$set( MemorySegment seg, int x) {
        _CERT_LOGOTYPE_INFO.dwLogotypeInfoChoice$VH.set(seg, x);
    }
    public static int dwLogotypeInfoChoice$get(MemorySegment seg, long index) {
        return (int)_CERT_LOGOTYPE_INFO.dwLogotypeInfoChoice$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwLogotypeInfoChoice$set(MemorySegment seg, long index, int x) {
        _CERT_LOGOTYPE_INFO.dwLogotypeInfoChoice$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pLogotypeDirectInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("pLogotypeDirectInfo"));
    public static VarHandle pLogotypeDirectInfo$VH() {
        return _CERT_LOGOTYPE_INFO.pLogotypeDirectInfo$VH;
    }
    public static MemoryAddress pLogotypeDirectInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_CERT_LOGOTYPE_INFO.pLogotypeDirectInfo$VH.get(seg);
    }
    public static void pLogotypeDirectInfo$set( MemorySegment seg, MemoryAddress x) {
        _CERT_LOGOTYPE_INFO.pLogotypeDirectInfo$VH.set(seg, x);
    }
    public static MemoryAddress pLogotypeDirectInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_CERT_LOGOTYPE_INFO.pLogotypeDirectInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pLogotypeDirectInfo$set(MemorySegment seg, long index, MemoryAddress x) {
        _CERT_LOGOTYPE_INFO.pLogotypeDirectInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pLogotypeIndirectInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("pLogotypeIndirectInfo"));
    public static VarHandle pLogotypeIndirectInfo$VH() {
        return _CERT_LOGOTYPE_INFO.pLogotypeIndirectInfo$VH;
    }
    public static MemoryAddress pLogotypeIndirectInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_CERT_LOGOTYPE_INFO.pLogotypeIndirectInfo$VH.get(seg);
    }
    public static void pLogotypeIndirectInfo$set( MemorySegment seg, MemoryAddress x) {
        _CERT_LOGOTYPE_INFO.pLogotypeIndirectInfo$VH.set(seg, x);
    }
    public static MemoryAddress pLogotypeIndirectInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_CERT_LOGOTYPE_INFO.pLogotypeIndirectInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pLogotypeIndirectInfo$set(MemorySegment seg, long index, MemoryAddress x) {
        _CERT_LOGOTYPE_INFO.pLogotypeIndirectInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


