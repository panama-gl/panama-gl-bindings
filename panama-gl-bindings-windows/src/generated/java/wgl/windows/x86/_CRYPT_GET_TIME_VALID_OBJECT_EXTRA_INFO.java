// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO {
 *     DWORD cbSize;
 *     int iDeltaCrlIndicator;
 *     LPFILETIME pftCacheResync;
 *     LPFILETIME pLastSyncTime;
 *     LPFILETIME pMaxAgeTime;
 *     PCERT_REVOCATION_CHAIN_PARA pChainPara;
 *     PCRYPT_INTEGER_BLOB pDeltaCrlIndicator;
 * }
 * }
 */
public class _CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO {

    _CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("cbSize"),
        wgl_h.C_INT.withName("iDeltaCrlIndicator"),
        wgl_h.C_POINTER.withName("pftCacheResync"),
        wgl_h.C_POINTER.withName("pLastSyncTime"),
        wgl_h.C_POINTER.withName("pMaxAgeTime"),
        wgl_h.C_POINTER.withName("pChainPara"),
        wgl_h.C_POINTER.withName("pDeltaCrlIndicator")
    ).withName("_CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt cbSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static final OfInt cbSize$layout() {
        return cbSize$LAYOUT;
    }

    private static final long cbSize$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static final long cbSize$offset() {
        return cbSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static int cbSize(MemorySegment struct) {
        return struct.get(cbSize$LAYOUT, cbSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static void cbSize(MemorySegment struct, int fieldValue) {
        struct.set(cbSize$LAYOUT, cbSize$OFFSET, fieldValue);
    }

    private static final OfInt iDeltaCrlIndicator$LAYOUT = (OfInt)$LAYOUT.select(groupElement("iDeltaCrlIndicator"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int iDeltaCrlIndicator
     * }
     */
    public static final OfInt iDeltaCrlIndicator$layout() {
        return iDeltaCrlIndicator$LAYOUT;
    }

    private static final long iDeltaCrlIndicator$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int iDeltaCrlIndicator
     * }
     */
    public static final long iDeltaCrlIndicator$offset() {
        return iDeltaCrlIndicator$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int iDeltaCrlIndicator
     * }
     */
    public static int iDeltaCrlIndicator(MemorySegment struct) {
        return struct.get(iDeltaCrlIndicator$LAYOUT, iDeltaCrlIndicator$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int iDeltaCrlIndicator
     * }
     */
    public static void iDeltaCrlIndicator(MemorySegment struct, int fieldValue) {
        struct.set(iDeltaCrlIndicator$LAYOUT, iDeltaCrlIndicator$OFFSET, fieldValue);
    }

    private static final AddressLayout pftCacheResync$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pftCacheResync"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPFILETIME pftCacheResync
     * }
     */
    public static final AddressLayout pftCacheResync$layout() {
        return pftCacheResync$LAYOUT;
    }

    private static final long pftCacheResync$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPFILETIME pftCacheResync
     * }
     */
    public static final long pftCacheResync$offset() {
        return pftCacheResync$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPFILETIME pftCacheResync
     * }
     */
    public static MemorySegment pftCacheResync(MemorySegment struct) {
        return struct.get(pftCacheResync$LAYOUT, pftCacheResync$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPFILETIME pftCacheResync
     * }
     */
    public static void pftCacheResync(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pftCacheResync$LAYOUT, pftCacheResync$OFFSET, fieldValue);
    }

    private static final AddressLayout pLastSyncTime$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pLastSyncTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPFILETIME pLastSyncTime
     * }
     */
    public static final AddressLayout pLastSyncTime$layout() {
        return pLastSyncTime$LAYOUT;
    }

    private static final long pLastSyncTime$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPFILETIME pLastSyncTime
     * }
     */
    public static final long pLastSyncTime$offset() {
        return pLastSyncTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPFILETIME pLastSyncTime
     * }
     */
    public static MemorySegment pLastSyncTime(MemorySegment struct) {
        return struct.get(pLastSyncTime$LAYOUT, pLastSyncTime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPFILETIME pLastSyncTime
     * }
     */
    public static void pLastSyncTime(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pLastSyncTime$LAYOUT, pLastSyncTime$OFFSET, fieldValue);
    }

    private static final AddressLayout pMaxAgeTime$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pMaxAgeTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPFILETIME pMaxAgeTime
     * }
     */
    public static final AddressLayout pMaxAgeTime$layout() {
        return pMaxAgeTime$LAYOUT;
    }

    private static final long pMaxAgeTime$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPFILETIME pMaxAgeTime
     * }
     */
    public static final long pMaxAgeTime$offset() {
        return pMaxAgeTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPFILETIME pMaxAgeTime
     * }
     */
    public static MemorySegment pMaxAgeTime(MemorySegment struct) {
        return struct.get(pMaxAgeTime$LAYOUT, pMaxAgeTime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPFILETIME pMaxAgeTime
     * }
     */
    public static void pMaxAgeTime(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pMaxAgeTime$LAYOUT, pMaxAgeTime$OFFSET, fieldValue);
    }

    private static final AddressLayout pChainPara$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pChainPara"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PCERT_REVOCATION_CHAIN_PARA pChainPara
     * }
     */
    public static final AddressLayout pChainPara$layout() {
        return pChainPara$LAYOUT;
    }

    private static final long pChainPara$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PCERT_REVOCATION_CHAIN_PARA pChainPara
     * }
     */
    public static final long pChainPara$offset() {
        return pChainPara$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PCERT_REVOCATION_CHAIN_PARA pChainPara
     * }
     */
    public static MemorySegment pChainPara(MemorySegment struct) {
        return struct.get(pChainPara$LAYOUT, pChainPara$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PCERT_REVOCATION_CHAIN_PARA pChainPara
     * }
     */
    public static void pChainPara(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pChainPara$LAYOUT, pChainPara$OFFSET, fieldValue);
    }

    private static final AddressLayout pDeltaCrlIndicator$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pDeltaCrlIndicator"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PCRYPT_INTEGER_BLOB pDeltaCrlIndicator
     * }
     */
    public static final AddressLayout pDeltaCrlIndicator$layout() {
        return pDeltaCrlIndicator$LAYOUT;
    }

    private static final long pDeltaCrlIndicator$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PCRYPT_INTEGER_BLOB pDeltaCrlIndicator
     * }
     */
    public static final long pDeltaCrlIndicator$offset() {
        return pDeltaCrlIndicator$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PCRYPT_INTEGER_BLOB pDeltaCrlIndicator
     * }
     */
    public static MemorySegment pDeltaCrlIndicator(MemorySegment struct) {
        return struct.get(pDeltaCrlIndicator$LAYOUT, pDeltaCrlIndicator$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PCRYPT_INTEGER_BLOB pDeltaCrlIndicator
     * }
     */
    public static void pDeltaCrlIndicator(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pDeltaCrlIndicator$LAYOUT, pDeltaCrlIndicator$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

