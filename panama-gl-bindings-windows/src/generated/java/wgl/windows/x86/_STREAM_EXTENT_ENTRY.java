// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _STREAM_EXTENT_ENTRY {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Flags"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("ExtentCount"),
                MemoryLayout.paddingLayout(32),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("StartingVcn"),
                MemoryLayout.sequenceLayout(1, MemoryLayout.structLayout(
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                            Constants$root.C_LONG$LAYOUT.withName("HighPart")
                        ).withName("$anon$0"),
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                            Constants$root.C_LONG$LAYOUT.withName("HighPart")
                        ).withName("u"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                    ).withName("NextVcn"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                            Constants$root.C_LONG$LAYOUT.withName("HighPart")
                        ).withName("$anon$0"),
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                            Constants$root.C_LONG$LAYOUT.withName("HighPart")
                        ).withName("u"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                    ).withName("Lcn")
                )).withName("Extents")
            ).withName("RetrievalPointers")
        ).withName("ExtentInformation")
    ).withName("_STREAM_EXTENT_ENTRY");
    public static MemoryLayout $LAYOUT() {
        return _STREAM_EXTENT_ENTRY.$struct$LAYOUT;
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return _STREAM_EXTENT_ENTRY.Flags$VH;
    }
    public static int Flags$get(MemorySegment seg) {
        return (int)_STREAM_EXTENT_ENTRY.Flags$VH.get(seg);
    }
    public static void Flags$set( MemorySegment seg, int x) {
        _STREAM_EXTENT_ENTRY.Flags$VH.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)_STREAM_EXTENT_ENTRY.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        _STREAM_EXTENT_ENTRY.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static class ExtentInformation {

        static final  GroupLayout ExtentInformation$union$LAYOUT = MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("ExtentCount"),
                MemoryLayout.paddingLayout(32),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("StartingVcn"),
                MemoryLayout.sequenceLayout(1, MemoryLayout.structLayout(
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                            Constants$root.C_LONG$LAYOUT.withName("HighPart")
                        ).withName("$anon$0"),
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                            Constants$root.C_LONG$LAYOUT.withName("HighPart")
                        ).withName("u"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                    ).withName("NextVcn"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                            Constants$root.C_LONG$LAYOUT.withName("HighPart")
                        ).withName("$anon$0"),
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                            Constants$root.C_LONG$LAYOUT.withName("HighPart")
                        ).withName("u"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                    ).withName("Lcn")
                )).withName("Extents")
            ).withName("RetrievalPointers")
        );
        public static MemoryLayout $LAYOUT() {
            return ExtentInformation.ExtentInformation$union$LAYOUT;
        }
        public static MemorySegment RetrievalPointers$slice(MemorySegment seg) {
            return seg.asSlice(0, 32);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
    }

    public static MemorySegment ExtentInformation$slice(MemorySegment seg) {
        return seg.asSlice(8, 32);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


