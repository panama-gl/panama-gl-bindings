// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _STREAM_EXTENT_ENTRY {
 *     DWORD Flags;
 *     union {
 *         RETRIEVAL_POINTERS_BUFFER RetrievalPointers;
 *     } ExtentInformation;
 * }
 * }
 */
public class _STREAM_EXTENT_ENTRY {

    _STREAM_EXTENT_ENTRY() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("Flags"),
        MemoryLayout.paddingLayout(4),
        _STREAM_EXTENT_ENTRY.ExtentInformation.layout().withName("ExtentInformation")
    ).withName("_STREAM_EXTENT_ENTRY");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt Flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Flags
     * }
     */
    public static final OfInt Flags$layout() {
        return Flags$LAYOUT;
    }

    private static final long Flags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Flags
     * }
     */
    public static final long Flags$offset() {
        return Flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Flags
     * }
     */
    public static int Flags(MemorySegment struct) {
        return struct.get(Flags$LAYOUT, Flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Flags
     * }
     */
    public static void Flags(MemorySegment struct, int fieldValue) {
        struct.set(Flags$LAYOUT, Flags$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * union {
     *     RETRIEVAL_POINTERS_BUFFER RetrievalPointers;
     * }
     * }
     */
    public static class ExtentInformation {

        ExtentInformation() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
            RETRIEVAL_POINTERS_BUFFER.layout().withName("RetrievalPointers")
        ).withName("$anon$14721:5");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final GroupLayout RetrievalPointers$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("RetrievalPointers"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * RETRIEVAL_POINTERS_BUFFER RetrievalPointers
         * }
         */
        public static final GroupLayout RetrievalPointers$layout() {
            return RetrievalPointers$LAYOUT;
        }

        private static final long RetrievalPointers$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * RETRIEVAL_POINTERS_BUFFER RetrievalPointers
         * }
         */
        public static final long RetrievalPointers$offset() {
            return RetrievalPointers$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * RETRIEVAL_POINTERS_BUFFER RetrievalPointers
         * }
         */
        public static MemorySegment RetrievalPointers(MemorySegment union) {
            return union.asSlice(RetrievalPointers$OFFSET, RetrievalPointers$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * RETRIEVAL_POINTERS_BUFFER RetrievalPointers
         * }
         */
        public static void RetrievalPointers(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, RetrievalPointers$OFFSET, RetrievalPointers$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout ExtentInformation$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ExtentInformation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union {
     *     RETRIEVAL_POINTERS_BUFFER RetrievalPointers;
     * } ExtentInformation
     * }
     */
    public static final GroupLayout ExtentInformation$layout() {
        return ExtentInformation$LAYOUT;
    }

    private static final long ExtentInformation$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union {
     *     RETRIEVAL_POINTERS_BUFFER RetrievalPointers;
     * } ExtentInformation
     * }
     */
    public static final long ExtentInformation$offset() {
        return ExtentInformation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union {
     *     RETRIEVAL_POINTERS_BUFFER RetrievalPointers;
     * } ExtentInformation
     * }
     */
    public static MemorySegment ExtentInformation(MemorySegment struct) {
        return struct.asSlice(ExtentInformation$OFFSET, ExtentInformation$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union {
     *     RETRIEVAL_POINTERS_BUFFER RetrievalPointers;
     * } ExtentInformation
     * }
     */
    public static void ExtentInformation(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ExtentInformation$OFFSET, ExtentInformation$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

