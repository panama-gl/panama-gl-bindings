// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _CTL_VERIFY_USAGE_STATUS {
 *     DWORD cbSize;
 *     DWORD dwError;
 *     DWORD dwFlags;
 *     PCCTL_CONTEXT *ppCtl;
 *     DWORD dwCtlEntryIndex;
 *     PCCERT_CONTEXT *ppSigner;
 *     DWORD dwSignerIndex;
 * }
 * }
 */
public class _CTL_VERIFY_USAGE_STATUS {

    _CTL_VERIFY_USAGE_STATUS() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("cbSize"),
        wgl_h.C_LONG.withName("dwError"),
        wgl_h.C_LONG.withName("dwFlags"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_POINTER.withName("ppCtl"),
        wgl_h.C_LONG.withName("dwCtlEntryIndex"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_POINTER.withName("ppSigner"),
        wgl_h.C_LONG.withName("dwSignerIndex"),
        MemoryLayout.paddingLayout(4)
    ).withName("_CTL_VERIFY_USAGE_STATUS");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt cbSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static final OfInt cbSize$layout() {
        return cbSize$LAYOUT;
    }

    private static final long cbSize$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static final long cbSize$offset() {
        return cbSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static int cbSize(MemorySegment struct) {
        return struct.get(cbSize$LAYOUT, cbSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static void cbSize(MemorySegment struct, int fieldValue) {
        struct.set(cbSize$LAYOUT, cbSize$OFFSET, fieldValue);
    }

    private static final OfInt dwError$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwError"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwError
     * }
     */
    public static final OfInt dwError$layout() {
        return dwError$LAYOUT;
    }

    private static final long dwError$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwError
     * }
     */
    public static final long dwError$offset() {
        return dwError$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwError
     * }
     */
    public static int dwError(MemorySegment struct) {
        return struct.get(dwError$LAYOUT, dwError$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwError
     * }
     */
    public static void dwError(MemorySegment struct, int fieldValue) {
        struct.set(dwError$LAYOUT, dwError$OFFSET, fieldValue);
    }

    private static final OfInt dwFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwFlags
     * }
     */
    public static final OfInt dwFlags$layout() {
        return dwFlags$LAYOUT;
    }

    private static final long dwFlags$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwFlags
     * }
     */
    public static final long dwFlags$offset() {
        return dwFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwFlags
     * }
     */
    public static int dwFlags(MemorySegment struct) {
        return struct.get(dwFlags$LAYOUT, dwFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwFlags
     * }
     */
    public static void dwFlags(MemorySegment struct, int fieldValue) {
        struct.set(dwFlags$LAYOUT, dwFlags$OFFSET, fieldValue);
    }

    private static final AddressLayout ppCtl$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ppCtl"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PCCTL_CONTEXT *ppCtl
     * }
     */
    public static final AddressLayout ppCtl$layout() {
        return ppCtl$LAYOUT;
    }

    private static final long ppCtl$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PCCTL_CONTEXT *ppCtl
     * }
     */
    public static final long ppCtl$offset() {
        return ppCtl$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PCCTL_CONTEXT *ppCtl
     * }
     */
    public static MemorySegment ppCtl(MemorySegment struct) {
        return struct.get(ppCtl$LAYOUT, ppCtl$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PCCTL_CONTEXT *ppCtl
     * }
     */
    public static void ppCtl(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ppCtl$LAYOUT, ppCtl$OFFSET, fieldValue);
    }

    private static final OfInt dwCtlEntryIndex$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwCtlEntryIndex"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwCtlEntryIndex
     * }
     */
    public static final OfInt dwCtlEntryIndex$layout() {
        return dwCtlEntryIndex$LAYOUT;
    }

    private static final long dwCtlEntryIndex$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwCtlEntryIndex
     * }
     */
    public static final long dwCtlEntryIndex$offset() {
        return dwCtlEntryIndex$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwCtlEntryIndex
     * }
     */
    public static int dwCtlEntryIndex(MemorySegment struct) {
        return struct.get(dwCtlEntryIndex$LAYOUT, dwCtlEntryIndex$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwCtlEntryIndex
     * }
     */
    public static void dwCtlEntryIndex(MemorySegment struct, int fieldValue) {
        struct.set(dwCtlEntryIndex$LAYOUT, dwCtlEntryIndex$OFFSET, fieldValue);
    }

    private static final AddressLayout ppSigner$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ppSigner"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PCCERT_CONTEXT *ppSigner
     * }
     */
    public static final AddressLayout ppSigner$layout() {
        return ppSigner$LAYOUT;
    }

    private static final long ppSigner$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PCCERT_CONTEXT *ppSigner
     * }
     */
    public static final long ppSigner$offset() {
        return ppSigner$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PCCERT_CONTEXT *ppSigner
     * }
     */
    public static MemorySegment ppSigner(MemorySegment struct) {
        return struct.get(ppSigner$LAYOUT, ppSigner$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PCCERT_CONTEXT *ppSigner
     * }
     */
    public static void ppSigner(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ppSigner$LAYOUT, ppSigner$OFFSET, fieldValue);
    }

    private static final OfInt dwSignerIndex$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwSignerIndex"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwSignerIndex
     * }
     */
    public static final OfInt dwSignerIndex$layout() {
        return dwSignerIndex$LAYOUT;
    }

    private static final long dwSignerIndex$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwSignerIndex
     * }
     */
    public static final long dwSignerIndex$offset() {
        return dwSignerIndex$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwSignerIndex
     * }
     */
    public static int dwSignerIndex(MemorySegment struct) {
        return struct.get(dwSignerIndex$LAYOUT, dwSignerIndex$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwSignerIndex
     * }
     */
    public static void dwSignerIndex(MemorySegment struct, int fieldValue) {
        struct.set(dwSignerIndex$LAYOUT, dwSignerIndex$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

