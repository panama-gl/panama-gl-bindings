// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct IStorageVtbl {
 *     HRESULT (*QueryInterface)(IStorage *, const IID *const, void **) __attribute__((stdcall));
 *     ULONG (*AddRef)(IStorage *) __attribute__((stdcall));
 *     ULONG (*Release)(IStorage *) __attribute__((stdcall));
 *     HRESULT (*CreateStream)(IStorage *, const OLECHAR *, DWORD, DWORD, DWORD, IStream **) __attribute__((stdcall));
 *     HRESULT (*OpenStream)(IStorage *, const OLECHAR *, void *, DWORD, DWORD, IStream **) __attribute__((stdcall));
 *     HRESULT (*CreateStorage)(IStorage *, const OLECHAR *, DWORD, DWORD, DWORD, IStorage **) __attribute__((stdcall));
 *     HRESULT (*OpenStorage)(IStorage *, const OLECHAR *, IStorage *, DWORD, SNB, DWORD, IStorage **) __attribute__((stdcall));
 *     HRESULT (*CopyTo)(IStorage *, DWORD, const IID *, SNB, IStorage *) __attribute__((stdcall));
 *     HRESULT (*MoveElementTo)(IStorage *, const OLECHAR *, IStorage *, const OLECHAR *, DWORD) __attribute__((stdcall));
 *     HRESULT (*Commit)(IStorage *, DWORD) __attribute__((stdcall));
 *     HRESULT (*Revert)(IStorage *) __attribute__((stdcall));
 *     HRESULT (*EnumElements)(IStorage *, DWORD, void *, DWORD, IEnumSTATSTG **) __attribute__((stdcall));
 *     HRESULT (*DestroyElement)(IStorage *, const OLECHAR *) __attribute__((stdcall));
 *     HRESULT (*RenameElement)(IStorage *, const OLECHAR *, const OLECHAR *) __attribute__((stdcall));
 *     HRESULT (*SetElementTimes)(IStorage *, const OLECHAR *, const FILETIME *, const FILETIME *, const FILETIME *) __attribute__((stdcall));
 *     HRESULT (*SetClass)(IStorage *, const IID *const) __attribute__((stdcall));
 *     HRESULT (*SetStateBits)(IStorage *, DWORD, DWORD) __attribute__((stdcall));
 *     HRESULT (*Stat)(IStorage *, STATSTG *, DWORD) __attribute__((stdcall));
 * }
 * }
 */
public class IStorageVtbl {

    IStorageVtbl() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("QueryInterface"),
        wgl_h.C_POINTER.withName("AddRef"),
        wgl_h.C_POINTER.withName("Release"),
        wgl_h.C_POINTER.withName("CreateStream"),
        wgl_h.C_POINTER.withName("OpenStream"),
        wgl_h.C_POINTER.withName("CreateStorage"),
        wgl_h.C_POINTER.withName("OpenStorage"),
        wgl_h.C_POINTER.withName("CopyTo"),
        wgl_h.C_POINTER.withName("MoveElementTo"),
        wgl_h.C_POINTER.withName("Commit"),
        wgl_h.C_POINTER.withName("Revert"),
        wgl_h.C_POINTER.withName("EnumElements"),
        wgl_h.C_POINTER.withName("DestroyElement"),
        wgl_h.C_POINTER.withName("RenameElement"),
        wgl_h.C_POINTER.withName("SetElementTimes"),
        wgl_h.C_POINTER.withName("SetClass"),
        wgl_h.C_POINTER.withName("SetStateBits"),
        wgl_h.C_POINTER.withName("Stat")
    ).withName("IStorageVtbl");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IStorage *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static class QueryInterface {

        QueryInterface() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(QueryInterface.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(QueryInterface.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout QueryInterface$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("QueryInterface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IStorage *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout QueryInterface$layout() {
        return QueryInterface$LAYOUT;
    }

    private static final long QueryInterface$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IStorage *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final long QueryInterface$offset() {
        return QueryInterface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IStorage *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment QueryInterface(MemorySegment struct) {
        return struct.get(QueryInterface$LAYOUT, QueryInterface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IStorage *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static void QueryInterface(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(QueryInterface$LAYOUT, QueryInterface$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*AddRef)(IStorage *) __attribute__((stdcall))
     * }
     */
    public static class AddRef {

        AddRef() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(AddRef.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(AddRef.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout AddRef$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("AddRef"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IStorage *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout AddRef$layout() {
        return AddRef$LAYOUT;
    }

    private static final long AddRef$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IStorage *) __attribute__((stdcall))
     * }
     */
    public static final long AddRef$offset() {
        return AddRef$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IStorage *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment AddRef(MemorySegment struct) {
        return struct.get(AddRef$LAYOUT, AddRef$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IStorage *) __attribute__((stdcall))
     * }
     */
    public static void AddRef(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(AddRef$LAYOUT, AddRef$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*Release)(IStorage *) __attribute__((stdcall))
     * }
     */
    public static class Release {

        Release() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Release.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Release.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Release$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Release"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IStorage *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Release$layout() {
        return Release$LAYOUT;
    }

    private static final long Release$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IStorage *) __attribute__((stdcall))
     * }
     */
    public static final long Release$offset() {
        return Release$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IStorage *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Release(MemorySegment struct) {
        return struct.get(Release$LAYOUT, Release$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IStorage *) __attribute__((stdcall))
     * }
     */
    public static void Release(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Release$LAYOUT, Release$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*CreateStream)(IStorage *, const OLECHAR *, DWORD, DWORD, DWORD, IStream **) __attribute__((stdcall))
     * }
     */
    public static class CreateStream {

        CreateStream() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, int _x2, int _x3, int _x4, MemorySegment _x5);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(CreateStream.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(CreateStream.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, int _x3, int _x4, MemorySegment _x5) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout CreateStream$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("CreateStream"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*CreateStream)(IStorage *, const OLECHAR *, DWORD, DWORD, DWORD, IStream **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout CreateStream$layout() {
        return CreateStream$LAYOUT;
    }

    private static final long CreateStream$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*CreateStream)(IStorage *, const OLECHAR *, DWORD, DWORD, DWORD, IStream **) __attribute__((stdcall))
     * }
     */
    public static final long CreateStream$offset() {
        return CreateStream$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*CreateStream)(IStorage *, const OLECHAR *, DWORD, DWORD, DWORD, IStream **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment CreateStream(MemorySegment struct) {
        return struct.get(CreateStream$LAYOUT, CreateStream$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*CreateStream)(IStorage *, const OLECHAR *, DWORD, DWORD, DWORD, IStream **) __attribute__((stdcall))
     * }
     */
    public static void CreateStream(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(CreateStream$LAYOUT, CreateStream$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*OpenStream)(IStorage *, const OLECHAR *, void *, DWORD, DWORD, IStream **) __attribute__((stdcall))
     * }
     */
    public static class OpenStream {

        OpenStream() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, int _x3, int _x4, MemorySegment _x5);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(OpenStream.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(OpenStream.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, int _x3, int _x4, MemorySegment _x5) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout OpenStream$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("OpenStream"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*OpenStream)(IStorage *, const OLECHAR *, void *, DWORD, DWORD, IStream **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout OpenStream$layout() {
        return OpenStream$LAYOUT;
    }

    private static final long OpenStream$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*OpenStream)(IStorage *, const OLECHAR *, void *, DWORD, DWORD, IStream **) __attribute__((stdcall))
     * }
     */
    public static final long OpenStream$offset() {
        return OpenStream$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*OpenStream)(IStorage *, const OLECHAR *, void *, DWORD, DWORD, IStream **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment OpenStream(MemorySegment struct) {
        return struct.get(OpenStream$LAYOUT, OpenStream$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*OpenStream)(IStorage *, const OLECHAR *, void *, DWORD, DWORD, IStream **) __attribute__((stdcall))
     * }
     */
    public static void OpenStream(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(OpenStream$LAYOUT, OpenStream$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*CreateStorage)(IStorage *, const OLECHAR *, DWORD, DWORD, DWORD, IStorage **) __attribute__((stdcall))
     * }
     */
    public static class CreateStorage {

        CreateStorage() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, int _x2, int _x3, int _x4, MemorySegment _x5);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(CreateStorage.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(CreateStorage.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, int _x3, int _x4, MemorySegment _x5) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout CreateStorage$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("CreateStorage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*CreateStorage)(IStorage *, const OLECHAR *, DWORD, DWORD, DWORD, IStorage **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout CreateStorage$layout() {
        return CreateStorage$LAYOUT;
    }

    private static final long CreateStorage$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*CreateStorage)(IStorage *, const OLECHAR *, DWORD, DWORD, DWORD, IStorage **) __attribute__((stdcall))
     * }
     */
    public static final long CreateStorage$offset() {
        return CreateStorage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*CreateStorage)(IStorage *, const OLECHAR *, DWORD, DWORD, DWORD, IStorage **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment CreateStorage(MemorySegment struct) {
        return struct.get(CreateStorage$LAYOUT, CreateStorage$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*CreateStorage)(IStorage *, const OLECHAR *, DWORD, DWORD, DWORD, IStorage **) __attribute__((stdcall))
     * }
     */
    public static void CreateStorage(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(CreateStorage$LAYOUT, CreateStorage$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*OpenStorage)(IStorage *, const OLECHAR *, IStorage *, DWORD, SNB, DWORD, IStorage **) __attribute__((stdcall))
     * }
     */
    public static class OpenStorage {

        OpenStorage() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, int _x3, MemorySegment _x4, int _x5, MemorySegment _x6);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(OpenStorage.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(OpenStorage.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, int _x3, MemorySegment _x4, int _x5, MemorySegment _x6) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5, _x6);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout OpenStorage$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("OpenStorage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*OpenStorage)(IStorage *, const OLECHAR *, IStorage *, DWORD, SNB, DWORD, IStorage **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout OpenStorage$layout() {
        return OpenStorage$LAYOUT;
    }

    private static final long OpenStorage$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*OpenStorage)(IStorage *, const OLECHAR *, IStorage *, DWORD, SNB, DWORD, IStorage **) __attribute__((stdcall))
     * }
     */
    public static final long OpenStorage$offset() {
        return OpenStorage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*OpenStorage)(IStorage *, const OLECHAR *, IStorage *, DWORD, SNB, DWORD, IStorage **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment OpenStorage(MemorySegment struct) {
        return struct.get(OpenStorage$LAYOUT, OpenStorage$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*OpenStorage)(IStorage *, const OLECHAR *, IStorage *, DWORD, SNB, DWORD, IStorage **) __attribute__((stdcall))
     * }
     */
    public static void OpenStorage(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(OpenStorage$LAYOUT, OpenStorage$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*CopyTo)(IStorage *, DWORD, const IID *, SNB, IStorage *) __attribute__((stdcall))
     * }
     */
    public static class CopyTo {

        CopyTo() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(CopyTo.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(CopyTo.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout CopyTo$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("CopyTo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*CopyTo)(IStorage *, DWORD, const IID *, SNB, IStorage *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout CopyTo$layout() {
        return CopyTo$LAYOUT;
    }

    private static final long CopyTo$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*CopyTo)(IStorage *, DWORD, const IID *, SNB, IStorage *) __attribute__((stdcall))
     * }
     */
    public static final long CopyTo$offset() {
        return CopyTo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*CopyTo)(IStorage *, DWORD, const IID *, SNB, IStorage *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment CopyTo(MemorySegment struct) {
        return struct.get(CopyTo$LAYOUT, CopyTo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*CopyTo)(IStorage *, DWORD, const IID *, SNB, IStorage *) __attribute__((stdcall))
     * }
     */
    public static void CopyTo(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(CopyTo$LAYOUT, CopyTo$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*MoveElementTo)(IStorage *, const OLECHAR *, IStorage *, const OLECHAR *, DWORD) __attribute__((stdcall))
     * }
     */
    public static class MoveElementTo {

        MoveElementTo() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, int _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(MoveElementTo.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(MoveElementTo.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, int _x4) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout MoveElementTo$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("MoveElementTo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*MoveElementTo)(IStorage *, const OLECHAR *, IStorage *, const OLECHAR *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout MoveElementTo$layout() {
        return MoveElementTo$LAYOUT;
    }

    private static final long MoveElementTo$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*MoveElementTo)(IStorage *, const OLECHAR *, IStorage *, const OLECHAR *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final long MoveElementTo$offset() {
        return MoveElementTo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*MoveElementTo)(IStorage *, const OLECHAR *, IStorage *, const OLECHAR *, DWORD) __attribute__((stdcall))
     * }
     */
    public static MemorySegment MoveElementTo(MemorySegment struct) {
        return struct.get(MoveElementTo$LAYOUT, MoveElementTo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*MoveElementTo)(IStorage *, const OLECHAR *, IStorage *, const OLECHAR *, DWORD) __attribute__((stdcall))
     * }
     */
    public static void MoveElementTo(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(MoveElementTo$LAYOUT, MoveElementTo$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*Commit)(IStorage *, DWORD) __attribute__((stdcall))
     * }
     */
    public static class Commit {

        Commit() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Commit.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Commit.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Commit$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Commit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*Commit)(IStorage *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Commit$layout() {
        return Commit$LAYOUT;
    }

    private static final long Commit$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*Commit)(IStorage *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final long Commit$offset() {
        return Commit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*Commit)(IStorage *, DWORD) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Commit(MemorySegment struct) {
        return struct.get(Commit$LAYOUT, Commit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*Commit)(IStorage *, DWORD) __attribute__((stdcall))
     * }
     */
    public static void Commit(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Commit$LAYOUT, Commit$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*Revert)(IStorage *) __attribute__((stdcall))
     * }
     */
    public static class Revert {

        Revert() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Revert.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Revert.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Revert$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Revert"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*Revert)(IStorage *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Revert$layout() {
        return Revert$LAYOUT;
    }

    private static final long Revert$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*Revert)(IStorage *) __attribute__((stdcall))
     * }
     */
    public static final long Revert$offset() {
        return Revert$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*Revert)(IStorage *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Revert(MemorySegment struct) {
        return struct.get(Revert$LAYOUT, Revert$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*Revert)(IStorage *) __attribute__((stdcall))
     * }
     */
    public static void Revert(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Revert$LAYOUT, Revert$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*EnumElements)(IStorage *, DWORD, void *, DWORD, IEnumSTATSTG **) __attribute__((stdcall))
     * }
     */
    public static class EnumElements {

        EnumElements() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2, int _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(EnumElements.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(EnumElements.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, int _x3, MemorySegment _x4) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout EnumElements$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("EnumElements"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*EnumElements)(IStorage *, DWORD, void *, DWORD, IEnumSTATSTG **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout EnumElements$layout() {
        return EnumElements$LAYOUT;
    }

    private static final long EnumElements$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*EnumElements)(IStorage *, DWORD, void *, DWORD, IEnumSTATSTG **) __attribute__((stdcall))
     * }
     */
    public static final long EnumElements$offset() {
        return EnumElements$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*EnumElements)(IStorage *, DWORD, void *, DWORD, IEnumSTATSTG **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment EnumElements(MemorySegment struct) {
        return struct.get(EnumElements$LAYOUT, EnumElements$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*EnumElements)(IStorage *, DWORD, void *, DWORD, IEnumSTATSTG **) __attribute__((stdcall))
     * }
     */
    public static void EnumElements(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(EnumElements$LAYOUT, EnumElements$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*DestroyElement)(IStorage *, const OLECHAR *) __attribute__((stdcall))
     * }
     */
    public static class DestroyElement {

        DestroyElement() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(DestroyElement.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(DestroyElement.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout DestroyElement$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("DestroyElement"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*DestroyElement)(IStorage *, const OLECHAR *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout DestroyElement$layout() {
        return DestroyElement$LAYOUT;
    }

    private static final long DestroyElement$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*DestroyElement)(IStorage *, const OLECHAR *) __attribute__((stdcall))
     * }
     */
    public static final long DestroyElement$offset() {
        return DestroyElement$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*DestroyElement)(IStorage *, const OLECHAR *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment DestroyElement(MemorySegment struct) {
        return struct.get(DestroyElement$LAYOUT, DestroyElement$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*DestroyElement)(IStorage *, const OLECHAR *) __attribute__((stdcall))
     * }
     */
    public static void DestroyElement(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(DestroyElement$LAYOUT, DestroyElement$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*RenameElement)(IStorage *, const OLECHAR *, const OLECHAR *) __attribute__((stdcall))
     * }
     */
    public static class RenameElement {

        RenameElement() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(RenameElement.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(RenameElement.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout RenameElement$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("RenameElement"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*RenameElement)(IStorage *, const OLECHAR *, const OLECHAR *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout RenameElement$layout() {
        return RenameElement$LAYOUT;
    }

    private static final long RenameElement$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*RenameElement)(IStorage *, const OLECHAR *, const OLECHAR *) __attribute__((stdcall))
     * }
     */
    public static final long RenameElement$offset() {
        return RenameElement$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*RenameElement)(IStorage *, const OLECHAR *, const OLECHAR *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment RenameElement(MemorySegment struct) {
        return struct.get(RenameElement$LAYOUT, RenameElement$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*RenameElement)(IStorage *, const OLECHAR *, const OLECHAR *) __attribute__((stdcall))
     * }
     */
    public static void RenameElement(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(RenameElement$LAYOUT, RenameElement$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetElementTimes)(IStorage *, const OLECHAR *, const FILETIME *, const FILETIME *, const FILETIME *) __attribute__((stdcall))
     * }
     */
    public static class SetElementTimes {

        SetElementTimes() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetElementTimes.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetElementTimes.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetElementTimes$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetElementTimes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetElementTimes)(IStorage *, const OLECHAR *, const FILETIME *, const FILETIME *, const FILETIME *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetElementTimes$layout() {
        return SetElementTimes$LAYOUT;
    }

    private static final long SetElementTimes$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetElementTimes)(IStorage *, const OLECHAR *, const FILETIME *, const FILETIME *, const FILETIME *) __attribute__((stdcall))
     * }
     */
    public static final long SetElementTimes$offset() {
        return SetElementTimes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetElementTimes)(IStorage *, const OLECHAR *, const FILETIME *, const FILETIME *, const FILETIME *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetElementTimes(MemorySegment struct) {
        return struct.get(SetElementTimes$LAYOUT, SetElementTimes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetElementTimes)(IStorage *, const OLECHAR *, const FILETIME *, const FILETIME *, const FILETIME *) __attribute__((stdcall))
     * }
     */
    public static void SetElementTimes(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetElementTimes$LAYOUT, SetElementTimes$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetClass)(IStorage *, const IID *const) __attribute__((stdcall))
     * }
     */
    public static class SetClass {

        SetClass() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetClass.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetClass.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetClass$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetClass"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetClass)(IStorage *, const IID *const) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetClass$layout() {
        return SetClass$LAYOUT;
    }

    private static final long SetClass$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetClass)(IStorage *, const IID *const) __attribute__((stdcall))
     * }
     */
    public static final long SetClass$offset() {
        return SetClass$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetClass)(IStorage *, const IID *const) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetClass(MemorySegment struct) {
        return struct.get(SetClass$LAYOUT, SetClass$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetClass)(IStorage *, const IID *const) __attribute__((stdcall))
     * }
     */
    public static void SetClass(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetClass$LAYOUT, SetClass$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetStateBits)(IStorage *, DWORD, DWORD) __attribute__((stdcall))
     * }
     */
    public static class SetStateBits {

        SetStateBits() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetStateBits.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetStateBits.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetStateBits$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetStateBits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetStateBits)(IStorage *, DWORD, DWORD) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetStateBits$layout() {
        return SetStateBits$LAYOUT;
    }

    private static final long SetStateBits$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetStateBits)(IStorage *, DWORD, DWORD) __attribute__((stdcall))
     * }
     */
    public static final long SetStateBits$offset() {
        return SetStateBits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetStateBits)(IStorage *, DWORD, DWORD) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetStateBits(MemorySegment struct) {
        return struct.get(SetStateBits$LAYOUT, SetStateBits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetStateBits)(IStorage *, DWORD, DWORD) __attribute__((stdcall))
     * }
     */
    public static void SetStateBits(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetStateBits$LAYOUT, SetStateBits$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*Stat)(IStorage *, STATSTG *, DWORD) __attribute__((stdcall))
     * }
     */
    public static class Stat {

        Stat() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Stat.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Stat.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Stat$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Stat"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*Stat)(IStorage *, STATSTG *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Stat$layout() {
        return Stat$LAYOUT;
    }

    private static final long Stat$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*Stat)(IStorage *, STATSTG *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final long Stat$offset() {
        return Stat$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*Stat)(IStorage *, STATSTG *, DWORD) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Stat(MemorySegment struct) {
        return struct.get(Stat$LAYOUT, Stat$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*Stat)(IStorage *, STATSTG *, DWORD) __attribute__((stdcall))
     * }
     */
    public static void Stat(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Stat$LAYOUT, Stat$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

