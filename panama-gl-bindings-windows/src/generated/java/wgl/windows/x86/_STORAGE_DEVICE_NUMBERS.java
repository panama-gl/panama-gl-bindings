// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _STORAGE_DEVICE_NUMBERS {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Version"),
        Constants$root.C_LONG$LAYOUT.withName("Size"),
        Constants$root.C_LONG$LAYOUT.withName("NumberOfDevices"),
        MemoryLayout.sequenceLayout(1, MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("DeviceType"),
            Constants$root.C_LONG$LAYOUT.withName("DeviceNumber"),
            Constants$root.C_LONG$LAYOUT.withName("PartitionNumber")
        ).withName("_STORAGE_DEVICE_NUMBER")).withName("Devices")
    ).withName("_STORAGE_DEVICE_NUMBERS");
    public static MemoryLayout $LAYOUT() {
        return _STORAGE_DEVICE_NUMBERS.$struct$LAYOUT;
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _STORAGE_DEVICE_NUMBERS.Version$VH;
    }
    public static int Version$get(MemorySegment seg) {
        return (int)_STORAGE_DEVICE_NUMBERS.Version$VH.get(seg);
    }
    public static void Version$set( MemorySegment seg, int x) {
        _STORAGE_DEVICE_NUMBERS.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)_STORAGE_DEVICE_NUMBERS.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        _STORAGE_DEVICE_NUMBERS.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Size"));
    public static VarHandle Size$VH() {
        return _STORAGE_DEVICE_NUMBERS.Size$VH;
    }
    public static int Size$get(MemorySegment seg) {
        return (int)_STORAGE_DEVICE_NUMBERS.Size$VH.get(seg);
    }
    public static void Size$set( MemorySegment seg, int x) {
        _STORAGE_DEVICE_NUMBERS.Size$VH.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)_STORAGE_DEVICE_NUMBERS.Size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        _STORAGE_DEVICE_NUMBERS.Size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NumberOfDevices$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NumberOfDevices"));
    public static VarHandle NumberOfDevices$VH() {
        return _STORAGE_DEVICE_NUMBERS.NumberOfDevices$VH;
    }
    public static int NumberOfDevices$get(MemorySegment seg) {
        return (int)_STORAGE_DEVICE_NUMBERS.NumberOfDevices$VH.get(seg);
    }
    public static void NumberOfDevices$set( MemorySegment seg, int x) {
        _STORAGE_DEVICE_NUMBERS.NumberOfDevices$VH.set(seg, x);
    }
    public static int NumberOfDevices$get(MemorySegment seg, long index) {
        return (int)_STORAGE_DEVICE_NUMBERS.NumberOfDevices$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NumberOfDevices$set(MemorySegment seg, long index, int x) {
        _STORAGE_DEVICE_NUMBERS.NumberOfDevices$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Devices$slice(MemorySegment seg) {
        return seg.asSlice(12, 12);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


