// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class tagSTATPROPSETSTG {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("Data1"),
            Constants$root.C_SHORT$LAYOUT.withName("Data2"),
            Constants$root.C_SHORT$LAYOUT.withName("Data3"),
            MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
        ).withName("fmtid"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("Data1"),
            Constants$root.C_SHORT$LAYOUT.withName("Data2"),
            Constants$root.C_SHORT$LAYOUT.withName("Data3"),
            MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
        ).withName("clsid"),
        Constants$root.C_LONG$LAYOUT.withName("grfFlags"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("dwLowDateTime"),
            Constants$root.C_LONG$LAYOUT.withName("dwHighDateTime")
        ).withName("mtime"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("dwLowDateTime"),
            Constants$root.C_LONG$LAYOUT.withName("dwHighDateTime")
        ).withName("ctime"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("dwLowDateTime"),
            Constants$root.C_LONG$LAYOUT.withName("dwHighDateTime")
        ).withName("atime"),
        Constants$root.C_LONG$LAYOUT.withName("dwOSVersion")
    ).withName("tagSTATPROPSETSTG");
    public static MemoryLayout $LAYOUT() {
        return tagSTATPROPSETSTG.$struct$LAYOUT;
    }
    public static MemorySegment fmtid$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment clsid$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    static final VarHandle grfFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("grfFlags"));
    public static VarHandle grfFlags$VH() {
        return tagSTATPROPSETSTG.grfFlags$VH;
    }
    public static int grfFlags$get(MemorySegment seg) {
        return (int)tagSTATPROPSETSTG.grfFlags$VH.get(seg);
    }
    public static void grfFlags$set( MemorySegment seg, int x) {
        tagSTATPROPSETSTG.grfFlags$VH.set(seg, x);
    }
    public static int grfFlags$get(MemorySegment seg, long index) {
        return (int)tagSTATPROPSETSTG.grfFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void grfFlags$set(MemorySegment seg, long index, int x) {
        tagSTATPROPSETSTG.grfFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment mtime$slice(MemorySegment seg) {
        return seg.asSlice(36, 8);
    }
    public static MemorySegment ctime$slice(MemorySegment seg) {
        return seg.asSlice(44, 8);
    }
    public static MemorySegment atime$slice(MemorySegment seg) {
        return seg.asSlice(52, 8);
    }
    static final VarHandle dwOSVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwOSVersion"));
    public static VarHandle dwOSVersion$VH() {
        return tagSTATPROPSETSTG.dwOSVersion$VH;
    }
    public static int dwOSVersion$get(MemorySegment seg) {
        return (int)tagSTATPROPSETSTG.dwOSVersion$VH.get(seg);
    }
    public static void dwOSVersion$set( MemorySegment seg, int x) {
        tagSTATPROPSETSTG.dwOSVersion$VH.set(seg, x);
    }
    public static int dwOSVersion$get(MemorySegment seg, long index) {
        return (int)tagSTATPROPSETSTG.dwOSVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwOSVersion$set(MemorySegment seg, long index, int x) {
        tagSTATPROPSETSTG.dwOSVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


