// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _RESOURCEMANAGER_BASIC_INFORMATION {
 *     GUID ResourceManagerId;
 *     DWORD DescriptionLength;
 *     WCHAR Description[1];
 * }
 * }
 */
public class _RESOURCEMANAGER_BASIC_INFORMATION {

    _RESOURCEMANAGER_BASIC_INFORMATION() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _GUID.layout().withName("ResourceManagerId"),
        wgl_h.C_LONG.withName("DescriptionLength"),
        MemoryLayout.sequenceLayout(1, wgl_h.C_SHORT).withName("Description"),
        MemoryLayout.paddingLayout(2)
    ).withName("_RESOURCEMANAGER_BASIC_INFORMATION");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout ResourceManagerId$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ResourceManagerId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GUID ResourceManagerId
     * }
     */
    public static final GroupLayout ResourceManagerId$layout() {
        return ResourceManagerId$LAYOUT;
    }

    private static final long ResourceManagerId$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GUID ResourceManagerId
     * }
     */
    public static final long ResourceManagerId$offset() {
        return ResourceManagerId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GUID ResourceManagerId
     * }
     */
    public static MemorySegment ResourceManagerId(MemorySegment struct) {
        return struct.asSlice(ResourceManagerId$OFFSET, ResourceManagerId$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GUID ResourceManagerId
     * }
     */
    public static void ResourceManagerId(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ResourceManagerId$OFFSET, ResourceManagerId$LAYOUT.byteSize());
    }

    private static final OfInt DescriptionLength$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DescriptionLength"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD DescriptionLength
     * }
     */
    public static final OfInt DescriptionLength$layout() {
        return DescriptionLength$LAYOUT;
    }

    private static final long DescriptionLength$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD DescriptionLength
     * }
     */
    public static final long DescriptionLength$offset() {
        return DescriptionLength$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD DescriptionLength
     * }
     */
    public static int DescriptionLength(MemorySegment struct) {
        return struct.get(DescriptionLength$LAYOUT, DescriptionLength$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD DescriptionLength
     * }
     */
    public static void DescriptionLength(MemorySegment struct, int fieldValue) {
        struct.set(DescriptionLength$LAYOUT, DescriptionLength$OFFSET, fieldValue);
    }

    private static final SequenceLayout Description$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("Description"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WCHAR Description[1]
     * }
     */
    public static final SequenceLayout Description$layout() {
        return Description$LAYOUT;
    }

    private static final long Description$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WCHAR Description[1]
     * }
     */
    public static final long Description$offset() {
        return Description$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WCHAR Description[1]
     * }
     */
    public static MemorySegment Description(MemorySegment struct) {
        return struct.asSlice(Description$OFFSET, Description$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WCHAR Description[1]
     * }
     */
    public static void Description(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Description$OFFSET, Description$LAYOUT.byteSize());
    }

    private static long[] Description$DIMS = { 1 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * WCHAR Description[1]
     * }
     */
    public static long[] Description$dimensions() {
        return Description$DIMS;
    }
    private static final VarHandle Description$ELEM_HANDLE = Description$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * WCHAR Description[1]
     * }
     */
    public static short Description(MemorySegment struct, long index0) {
        return (short)Description$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * WCHAR Description[1]
     * }
     */
    public static void Description(MemorySegment struct, long index0, short fieldValue) {
        Description$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

