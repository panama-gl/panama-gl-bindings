// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("cCNGHashAlgid"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("rgpwszCNGHashAlgid"),
        Constants$root.C_LONG$LAYOUT.withName("dwWeakIndex"),
        MemoryLayout.paddingLayout(32)
    ).withName("_CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO");
    public static MemoryLayout $LAYOUT() {
        return _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO.$struct$LAYOUT;
    }
    static final VarHandle cCNGHashAlgid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cCNGHashAlgid"));
    public static VarHandle cCNGHashAlgid$VH() {
        return _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO.cCNGHashAlgid$VH;
    }
    public static int cCNGHashAlgid$get(MemorySegment seg) {
        return (int)_CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO.cCNGHashAlgid$VH.get(seg);
    }
    public static void cCNGHashAlgid$set( MemorySegment seg, int x) {
        _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO.cCNGHashAlgid$VH.set(seg, x);
    }
    public static int cCNGHashAlgid$get(MemorySegment seg, long index) {
        return (int)_CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO.cCNGHashAlgid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cCNGHashAlgid$set(MemorySegment seg, long index, int x) {
        _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO.cCNGHashAlgid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rgpwszCNGHashAlgid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rgpwszCNGHashAlgid"));
    public static VarHandle rgpwszCNGHashAlgid$VH() {
        return _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO.rgpwszCNGHashAlgid$VH;
    }
    public static MemoryAddress rgpwszCNGHashAlgid$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO.rgpwszCNGHashAlgid$VH.get(seg);
    }
    public static void rgpwszCNGHashAlgid$set( MemorySegment seg, MemoryAddress x) {
        _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO.rgpwszCNGHashAlgid$VH.set(seg, x);
    }
    public static MemoryAddress rgpwszCNGHashAlgid$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO.rgpwszCNGHashAlgid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rgpwszCNGHashAlgid$set(MemorySegment seg, long index, MemoryAddress x) {
        _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO.rgpwszCNGHashAlgid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwWeakIndex$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwWeakIndex"));
    public static VarHandle dwWeakIndex$VH() {
        return _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO.dwWeakIndex$VH;
    }
    public static int dwWeakIndex$get(MemorySegment seg) {
        return (int)_CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO.dwWeakIndex$VH.get(seg);
    }
    public static void dwWeakIndex$set( MemorySegment seg, int x) {
        _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO.dwWeakIndex$VH.set(seg, x);
    }
    public static int dwWeakIndex$get(MemorySegment seg, long index) {
        return (int)_CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO.dwWeakIndex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwWeakIndex$set(MemorySegment seg, long index, int x) {
        _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO.dwWeakIndex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


