// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _CRYPT_PROVIDER_REF {
 *     ULONG dwInterface;
 *     PWSTR pszFunction;
 *     PWSTR pszProvider;
 *     ULONG cProperties;
 *     PCRYPT_PROPERTY_REF *rgpProperties;
 *     PCRYPT_IMAGE_REF pUM;
 *     PCRYPT_IMAGE_REF pKM;
 * }
 * }
 */
public class _CRYPT_PROVIDER_REF {

    _CRYPT_PROVIDER_REF() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("dwInterface"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_POINTER.withName("pszFunction"),
        wgl_h.C_POINTER.withName("pszProvider"),
        wgl_h.C_LONG.withName("cProperties"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_POINTER.withName("rgpProperties"),
        wgl_h.C_POINTER.withName("pUM"),
        wgl_h.C_POINTER.withName("pKM")
    ).withName("_CRYPT_PROVIDER_REF");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt dwInterface$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwInterface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG dwInterface
     * }
     */
    public static final OfInt dwInterface$layout() {
        return dwInterface$LAYOUT;
    }

    private static final long dwInterface$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG dwInterface
     * }
     */
    public static final long dwInterface$offset() {
        return dwInterface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG dwInterface
     * }
     */
    public static int dwInterface(MemorySegment struct) {
        return struct.get(dwInterface$LAYOUT, dwInterface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG dwInterface
     * }
     */
    public static void dwInterface(MemorySegment struct, int fieldValue) {
        struct.set(dwInterface$LAYOUT, dwInterface$OFFSET, fieldValue);
    }

    private static final AddressLayout pszFunction$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pszFunction"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PWSTR pszFunction
     * }
     */
    public static final AddressLayout pszFunction$layout() {
        return pszFunction$LAYOUT;
    }

    private static final long pszFunction$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PWSTR pszFunction
     * }
     */
    public static final long pszFunction$offset() {
        return pszFunction$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PWSTR pszFunction
     * }
     */
    public static MemorySegment pszFunction(MemorySegment struct) {
        return struct.get(pszFunction$LAYOUT, pszFunction$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PWSTR pszFunction
     * }
     */
    public static void pszFunction(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pszFunction$LAYOUT, pszFunction$OFFSET, fieldValue);
    }

    private static final AddressLayout pszProvider$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pszProvider"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PWSTR pszProvider
     * }
     */
    public static final AddressLayout pszProvider$layout() {
        return pszProvider$LAYOUT;
    }

    private static final long pszProvider$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PWSTR pszProvider
     * }
     */
    public static final long pszProvider$offset() {
        return pszProvider$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PWSTR pszProvider
     * }
     */
    public static MemorySegment pszProvider(MemorySegment struct) {
        return struct.get(pszProvider$LAYOUT, pszProvider$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PWSTR pszProvider
     * }
     */
    public static void pszProvider(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pszProvider$LAYOUT, pszProvider$OFFSET, fieldValue);
    }

    private static final OfInt cProperties$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cProperties"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG cProperties
     * }
     */
    public static final OfInt cProperties$layout() {
        return cProperties$LAYOUT;
    }

    private static final long cProperties$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG cProperties
     * }
     */
    public static final long cProperties$offset() {
        return cProperties$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG cProperties
     * }
     */
    public static int cProperties(MemorySegment struct) {
        return struct.get(cProperties$LAYOUT, cProperties$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG cProperties
     * }
     */
    public static void cProperties(MemorySegment struct, int fieldValue) {
        struct.set(cProperties$LAYOUT, cProperties$OFFSET, fieldValue);
    }

    private static final AddressLayout rgpProperties$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("rgpProperties"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PCRYPT_PROPERTY_REF *rgpProperties
     * }
     */
    public static final AddressLayout rgpProperties$layout() {
        return rgpProperties$LAYOUT;
    }

    private static final long rgpProperties$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PCRYPT_PROPERTY_REF *rgpProperties
     * }
     */
    public static final long rgpProperties$offset() {
        return rgpProperties$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PCRYPT_PROPERTY_REF *rgpProperties
     * }
     */
    public static MemorySegment rgpProperties(MemorySegment struct) {
        return struct.get(rgpProperties$LAYOUT, rgpProperties$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PCRYPT_PROPERTY_REF *rgpProperties
     * }
     */
    public static void rgpProperties(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(rgpProperties$LAYOUT, rgpProperties$OFFSET, fieldValue);
    }

    private static final AddressLayout pUM$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pUM"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PCRYPT_IMAGE_REF pUM
     * }
     */
    public static final AddressLayout pUM$layout() {
        return pUM$LAYOUT;
    }

    private static final long pUM$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PCRYPT_IMAGE_REF pUM
     * }
     */
    public static final long pUM$offset() {
        return pUM$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PCRYPT_IMAGE_REF pUM
     * }
     */
    public static MemorySegment pUM(MemorySegment struct) {
        return struct.get(pUM$LAYOUT, pUM$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PCRYPT_IMAGE_REF pUM
     * }
     */
    public static void pUM(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pUM$LAYOUT, pUM$OFFSET, fieldValue);
    }

    private static final AddressLayout pKM$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pKM"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PCRYPT_IMAGE_REF pKM
     * }
     */
    public static final AddressLayout pKM$layout() {
        return pKM$LAYOUT;
    }

    private static final long pKM$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PCRYPT_IMAGE_REF pKM
     * }
     */
    public static final long pKM$offset() {
        return pKM$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PCRYPT_IMAGE_REF pKM
     * }
     */
    public static MemorySegment pKM(MemorySegment struct) {
        return struct.get(pKM$LAYOUT, pKM$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PCRYPT_IMAGE_REF pKM
     * }
     */
    public static void pKM(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pKM$LAYOUT, pKM$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

