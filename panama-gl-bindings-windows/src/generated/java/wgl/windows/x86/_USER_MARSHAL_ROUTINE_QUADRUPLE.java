// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _USER_MARSHAL_ROUTINE_QUADRUPLE {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("pfnBufferSize"),
        Constants$root.C_POINTER$LAYOUT.withName("pfnMarshall"),
        Constants$root.C_POINTER$LAYOUT.withName("pfnUnmarshall"),
        Constants$root.C_POINTER$LAYOUT.withName("pfnFree")
    ).withName("_USER_MARSHAL_ROUTINE_QUADRUPLE");
    public static MemoryLayout $LAYOUT() {
        return _USER_MARSHAL_ROUTINE_QUADRUPLE.$struct$LAYOUT;
    }
    static final VarHandle pfnBufferSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pfnBufferSize"));
    public static VarHandle pfnBufferSize$VH() {
        return _USER_MARSHAL_ROUTINE_QUADRUPLE.pfnBufferSize$VH;
    }
    public static MemoryAddress pfnBufferSize$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_USER_MARSHAL_ROUTINE_QUADRUPLE.pfnBufferSize$VH.get(seg);
    }
    public static void pfnBufferSize$set( MemorySegment seg, MemoryAddress x) {
        _USER_MARSHAL_ROUTINE_QUADRUPLE.pfnBufferSize$VH.set(seg, x);
    }
    public static MemoryAddress pfnBufferSize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_USER_MARSHAL_ROUTINE_QUADRUPLE.pfnBufferSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnBufferSize$set(MemorySegment seg, long index, MemoryAddress x) {
        _USER_MARSHAL_ROUTINE_QUADRUPLE.pfnBufferSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static USER_MARSHAL_SIZING_ROUTINE pfnBufferSize (MemorySegment segment, MemorySession session) {
        return USER_MARSHAL_SIZING_ROUTINE.ofAddress(pfnBufferSize$get(segment), session);
    }
    static final VarHandle pfnMarshall$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pfnMarshall"));
    public static VarHandle pfnMarshall$VH() {
        return _USER_MARSHAL_ROUTINE_QUADRUPLE.pfnMarshall$VH;
    }
    public static MemoryAddress pfnMarshall$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_USER_MARSHAL_ROUTINE_QUADRUPLE.pfnMarshall$VH.get(seg);
    }
    public static void pfnMarshall$set( MemorySegment seg, MemoryAddress x) {
        _USER_MARSHAL_ROUTINE_QUADRUPLE.pfnMarshall$VH.set(seg, x);
    }
    public static MemoryAddress pfnMarshall$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_USER_MARSHAL_ROUTINE_QUADRUPLE.pfnMarshall$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnMarshall$set(MemorySegment seg, long index, MemoryAddress x) {
        _USER_MARSHAL_ROUTINE_QUADRUPLE.pfnMarshall$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static USER_MARSHAL_MARSHALLING_ROUTINE pfnMarshall (MemorySegment segment, MemorySession session) {
        return USER_MARSHAL_MARSHALLING_ROUTINE.ofAddress(pfnMarshall$get(segment), session);
    }
    static final VarHandle pfnUnmarshall$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pfnUnmarshall"));
    public static VarHandle pfnUnmarshall$VH() {
        return _USER_MARSHAL_ROUTINE_QUADRUPLE.pfnUnmarshall$VH;
    }
    public static MemoryAddress pfnUnmarshall$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_USER_MARSHAL_ROUTINE_QUADRUPLE.pfnUnmarshall$VH.get(seg);
    }
    public static void pfnUnmarshall$set( MemorySegment seg, MemoryAddress x) {
        _USER_MARSHAL_ROUTINE_QUADRUPLE.pfnUnmarshall$VH.set(seg, x);
    }
    public static MemoryAddress pfnUnmarshall$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_USER_MARSHAL_ROUTINE_QUADRUPLE.pfnUnmarshall$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnUnmarshall$set(MemorySegment seg, long index, MemoryAddress x) {
        _USER_MARSHAL_ROUTINE_QUADRUPLE.pfnUnmarshall$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static USER_MARSHAL_UNMARSHALLING_ROUTINE pfnUnmarshall (MemorySegment segment, MemorySession session) {
        return USER_MARSHAL_UNMARSHALLING_ROUTINE.ofAddress(pfnUnmarshall$get(segment), session);
    }
    static final VarHandle pfnFree$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pfnFree"));
    public static VarHandle pfnFree$VH() {
        return _USER_MARSHAL_ROUTINE_QUADRUPLE.pfnFree$VH;
    }
    public static MemoryAddress pfnFree$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_USER_MARSHAL_ROUTINE_QUADRUPLE.pfnFree$VH.get(seg);
    }
    public static void pfnFree$set( MemorySegment seg, MemoryAddress x) {
        _USER_MARSHAL_ROUTINE_QUADRUPLE.pfnFree$VH.set(seg, x);
    }
    public static MemoryAddress pfnFree$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_USER_MARSHAL_ROUTINE_QUADRUPLE.pfnFree$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnFree$set(MemorySegment seg, long index, MemoryAddress x) {
        _USER_MARSHAL_ROUTINE_QUADRUPLE.pfnFree$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static USER_MARSHAL_FREEING_ROUTINE pfnFree (MemorySegment segment, MemorySession session) {
        return USER_MARSHAL_FREEING_ROUTINE.ofAddress(pfnFree$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


