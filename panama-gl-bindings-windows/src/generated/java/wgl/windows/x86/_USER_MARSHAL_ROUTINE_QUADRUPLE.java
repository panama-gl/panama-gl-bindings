// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _USER_MARSHAL_ROUTINE_QUADRUPLE {
 *     USER_MARSHAL_SIZING_ROUTINE pfnBufferSize;
 *     USER_MARSHAL_MARSHALLING_ROUTINE pfnMarshall;
 *     USER_MARSHAL_UNMARSHALLING_ROUTINE pfnUnmarshall;
 *     USER_MARSHAL_FREEING_ROUTINE pfnFree;
 * }
 * }
 */
public class _USER_MARSHAL_ROUTINE_QUADRUPLE {

    _USER_MARSHAL_ROUTINE_QUADRUPLE() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("pfnBufferSize"),
        wgl_h.C_POINTER.withName("pfnMarshall"),
        wgl_h.C_POINTER.withName("pfnUnmarshall"),
        wgl_h.C_POINTER.withName("pfnFree")
    ).withName("_USER_MARSHAL_ROUTINE_QUADRUPLE");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout pfnBufferSize$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pfnBufferSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * USER_MARSHAL_SIZING_ROUTINE pfnBufferSize
     * }
     */
    public static final AddressLayout pfnBufferSize$layout() {
        return pfnBufferSize$LAYOUT;
    }

    private static final long pfnBufferSize$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * USER_MARSHAL_SIZING_ROUTINE pfnBufferSize
     * }
     */
    public static final long pfnBufferSize$offset() {
        return pfnBufferSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * USER_MARSHAL_SIZING_ROUTINE pfnBufferSize
     * }
     */
    public static MemorySegment pfnBufferSize(MemorySegment struct) {
        return struct.get(pfnBufferSize$LAYOUT, pfnBufferSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * USER_MARSHAL_SIZING_ROUTINE pfnBufferSize
     * }
     */
    public static void pfnBufferSize(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pfnBufferSize$LAYOUT, pfnBufferSize$OFFSET, fieldValue);
    }

    private static final AddressLayout pfnMarshall$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pfnMarshall"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * USER_MARSHAL_MARSHALLING_ROUTINE pfnMarshall
     * }
     */
    public static final AddressLayout pfnMarshall$layout() {
        return pfnMarshall$LAYOUT;
    }

    private static final long pfnMarshall$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * USER_MARSHAL_MARSHALLING_ROUTINE pfnMarshall
     * }
     */
    public static final long pfnMarshall$offset() {
        return pfnMarshall$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * USER_MARSHAL_MARSHALLING_ROUTINE pfnMarshall
     * }
     */
    public static MemorySegment pfnMarshall(MemorySegment struct) {
        return struct.get(pfnMarshall$LAYOUT, pfnMarshall$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * USER_MARSHAL_MARSHALLING_ROUTINE pfnMarshall
     * }
     */
    public static void pfnMarshall(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pfnMarshall$LAYOUT, pfnMarshall$OFFSET, fieldValue);
    }

    private static final AddressLayout pfnUnmarshall$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pfnUnmarshall"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * USER_MARSHAL_UNMARSHALLING_ROUTINE pfnUnmarshall
     * }
     */
    public static final AddressLayout pfnUnmarshall$layout() {
        return pfnUnmarshall$LAYOUT;
    }

    private static final long pfnUnmarshall$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * USER_MARSHAL_UNMARSHALLING_ROUTINE pfnUnmarshall
     * }
     */
    public static final long pfnUnmarshall$offset() {
        return pfnUnmarshall$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * USER_MARSHAL_UNMARSHALLING_ROUTINE pfnUnmarshall
     * }
     */
    public static MemorySegment pfnUnmarshall(MemorySegment struct) {
        return struct.get(pfnUnmarshall$LAYOUT, pfnUnmarshall$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * USER_MARSHAL_UNMARSHALLING_ROUTINE pfnUnmarshall
     * }
     */
    public static void pfnUnmarshall(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pfnUnmarshall$LAYOUT, pfnUnmarshall$OFFSET, fieldValue);
    }

    private static final AddressLayout pfnFree$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pfnFree"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * USER_MARSHAL_FREEING_ROUTINE pfnFree
     * }
     */
    public static final AddressLayout pfnFree$layout() {
        return pfnFree$LAYOUT;
    }

    private static final long pfnFree$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * USER_MARSHAL_FREEING_ROUTINE pfnFree
     * }
     */
    public static final long pfnFree$offset() {
        return pfnFree$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * USER_MARSHAL_FREEING_ROUTINE pfnFree
     * }
     */
    public static MemorySegment pfnFree(MemorySegment struct) {
        return struct.get(pfnFree$LAYOUT, pfnFree$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * USER_MARSHAL_FREEING_ROUTINE pfnFree
     * }
     */
    public static void pfnFree(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pfnFree$LAYOUT, pfnFree$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

