// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _REDIRECTION_FUNCTION_DESCRIPTOR {
 *     PCSTR DllName;
 *     PCSTR FunctionName;
 *     PVOID RedirectionTarget;
 * }
 * }
 */
public class _REDIRECTION_FUNCTION_DESCRIPTOR {

    _REDIRECTION_FUNCTION_DESCRIPTOR() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("DllName"),
        wgl_h.C_POINTER.withName("FunctionName"),
        wgl_h.C_POINTER.withName("RedirectionTarget")
    ).withName("_REDIRECTION_FUNCTION_DESCRIPTOR");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout DllName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("DllName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PCSTR DllName
     * }
     */
    public static final AddressLayout DllName$layout() {
        return DllName$LAYOUT;
    }

    private static final long DllName$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PCSTR DllName
     * }
     */
    public static final long DllName$offset() {
        return DllName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PCSTR DllName
     * }
     */
    public static MemorySegment DllName(MemorySegment struct) {
        return struct.get(DllName$LAYOUT, DllName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PCSTR DllName
     * }
     */
    public static void DllName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(DllName$LAYOUT, DllName$OFFSET, fieldValue);
    }

    private static final AddressLayout FunctionName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("FunctionName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PCSTR FunctionName
     * }
     */
    public static final AddressLayout FunctionName$layout() {
        return FunctionName$LAYOUT;
    }

    private static final long FunctionName$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PCSTR FunctionName
     * }
     */
    public static final long FunctionName$offset() {
        return FunctionName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PCSTR FunctionName
     * }
     */
    public static MemorySegment FunctionName(MemorySegment struct) {
        return struct.get(FunctionName$LAYOUT, FunctionName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PCSTR FunctionName
     * }
     */
    public static void FunctionName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(FunctionName$LAYOUT, FunctionName$OFFSET, fieldValue);
    }

    private static final AddressLayout RedirectionTarget$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("RedirectionTarget"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PVOID RedirectionTarget
     * }
     */
    public static final AddressLayout RedirectionTarget$layout() {
        return RedirectionTarget$LAYOUT;
    }

    private static final long RedirectionTarget$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PVOID RedirectionTarget
     * }
     */
    public static final long RedirectionTarget$offset() {
        return RedirectionTarget$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PVOID RedirectionTarget
     * }
     */
    public static MemorySegment RedirectionTarget(MemorySegment struct) {
        return struct.get(RedirectionTarget$LAYOUT, RedirectionTarget$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PVOID RedirectionTarget
     * }
     */
    public static void RedirectionTarget(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(RedirectionTarget$LAYOUT, RedirectionTarget$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

