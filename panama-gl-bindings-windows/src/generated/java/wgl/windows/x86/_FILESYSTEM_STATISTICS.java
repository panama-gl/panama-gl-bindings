// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _FILESYSTEM_STATISTICS {
 *     WORD FileSystemType;
 *     WORD Version;
 *     DWORD SizeOfCompleteStructure;
 *     DWORD UserFileReads;
 *     DWORD UserFileReadBytes;
 *     DWORD UserDiskReads;
 *     DWORD UserFileWrites;
 *     DWORD UserFileWriteBytes;
 *     DWORD UserDiskWrites;
 *     DWORD MetaDataReads;
 *     DWORD MetaDataReadBytes;
 *     DWORD MetaDataDiskReads;
 *     DWORD MetaDataWrites;
 *     DWORD MetaDataWriteBytes;
 *     DWORD MetaDataDiskWrites;
 * }
 * }
 */
public class _FILESYSTEM_STATISTICS {

    _FILESYSTEM_STATISTICS() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_SHORT.withName("FileSystemType"),
        wgl_h.C_SHORT.withName("Version"),
        wgl_h.C_LONG.withName("SizeOfCompleteStructure"),
        wgl_h.C_LONG.withName("UserFileReads"),
        wgl_h.C_LONG.withName("UserFileReadBytes"),
        wgl_h.C_LONG.withName("UserDiskReads"),
        wgl_h.C_LONG.withName("UserFileWrites"),
        wgl_h.C_LONG.withName("UserFileWriteBytes"),
        wgl_h.C_LONG.withName("UserDiskWrites"),
        wgl_h.C_LONG.withName("MetaDataReads"),
        wgl_h.C_LONG.withName("MetaDataReadBytes"),
        wgl_h.C_LONG.withName("MetaDataDiskReads"),
        wgl_h.C_LONG.withName("MetaDataWrites"),
        wgl_h.C_LONG.withName("MetaDataWriteBytes"),
        wgl_h.C_LONG.withName("MetaDataDiskWrites")
    ).withName("_FILESYSTEM_STATISTICS");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfShort FileSystemType$LAYOUT = (OfShort)$LAYOUT.select(groupElement("FileSystemType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD FileSystemType
     * }
     */
    public static final OfShort FileSystemType$layout() {
        return FileSystemType$LAYOUT;
    }

    private static final long FileSystemType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD FileSystemType
     * }
     */
    public static final long FileSystemType$offset() {
        return FileSystemType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD FileSystemType
     * }
     */
    public static short FileSystemType(MemorySegment struct) {
        return struct.get(FileSystemType$LAYOUT, FileSystemType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD FileSystemType
     * }
     */
    public static void FileSystemType(MemorySegment struct, short fieldValue) {
        struct.set(FileSystemType$LAYOUT, FileSystemType$OFFSET, fieldValue);
    }

    private static final OfShort Version$LAYOUT = (OfShort)$LAYOUT.select(groupElement("Version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD Version
     * }
     */
    public static final OfShort Version$layout() {
        return Version$LAYOUT;
    }

    private static final long Version$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD Version
     * }
     */
    public static final long Version$offset() {
        return Version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD Version
     * }
     */
    public static short Version(MemorySegment struct) {
        return struct.get(Version$LAYOUT, Version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD Version
     * }
     */
    public static void Version(MemorySegment struct, short fieldValue) {
        struct.set(Version$LAYOUT, Version$OFFSET, fieldValue);
    }

    private static final OfInt SizeOfCompleteStructure$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SizeOfCompleteStructure"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD SizeOfCompleteStructure
     * }
     */
    public static final OfInt SizeOfCompleteStructure$layout() {
        return SizeOfCompleteStructure$LAYOUT;
    }

    private static final long SizeOfCompleteStructure$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD SizeOfCompleteStructure
     * }
     */
    public static final long SizeOfCompleteStructure$offset() {
        return SizeOfCompleteStructure$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD SizeOfCompleteStructure
     * }
     */
    public static int SizeOfCompleteStructure(MemorySegment struct) {
        return struct.get(SizeOfCompleteStructure$LAYOUT, SizeOfCompleteStructure$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD SizeOfCompleteStructure
     * }
     */
    public static void SizeOfCompleteStructure(MemorySegment struct, int fieldValue) {
        struct.set(SizeOfCompleteStructure$LAYOUT, SizeOfCompleteStructure$OFFSET, fieldValue);
    }

    private static final OfInt UserFileReads$LAYOUT = (OfInt)$LAYOUT.select(groupElement("UserFileReads"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD UserFileReads
     * }
     */
    public static final OfInt UserFileReads$layout() {
        return UserFileReads$LAYOUT;
    }

    private static final long UserFileReads$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD UserFileReads
     * }
     */
    public static final long UserFileReads$offset() {
        return UserFileReads$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD UserFileReads
     * }
     */
    public static int UserFileReads(MemorySegment struct) {
        return struct.get(UserFileReads$LAYOUT, UserFileReads$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD UserFileReads
     * }
     */
    public static void UserFileReads(MemorySegment struct, int fieldValue) {
        struct.set(UserFileReads$LAYOUT, UserFileReads$OFFSET, fieldValue);
    }

    private static final OfInt UserFileReadBytes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("UserFileReadBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD UserFileReadBytes
     * }
     */
    public static final OfInt UserFileReadBytes$layout() {
        return UserFileReadBytes$LAYOUT;
    }

    private static final long UserFileReadBytes$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD UserFileReadBytes
     * }
     */
    public static final long UserFileReadBytes$offset() {
        return UserFileReadBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD UserFileReadBytes
     * }
     */
    public static int UserFileReadBytes(MemorySegment struct) {
        return struct.get(UserFileReadBytes$LAYOUT, UserFileReadBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD UserFileReadBytes
     * }
     */
    public static void UserFileReadBytes(MemorySegment struct, int fieldValue) {
        struct.set(UserFileReadBytes$LAYOUT, UserFileReadBytes$OFFSET, fieldValue);
    }

    private static final OfInt UserDiskReads$LAYOUT = (OfInt)$LAYOUT.select(groupElement("UserDiskReads"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD UserDiskReads
     * }
     */
    public static final OfInt UserDiskReads$layout() {
        return UserDiskReads$LAYOUT;
    }

    private static final long UserDiskReads$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD UserDiskReads
     * }
     */
    public static final long UserDiskReads$offset() {
        return UserDiskReads$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD UserDiskReads
     * }
     */
    public static int UserDiskReads(MemorySegment struct) {
        return struct.get(UserDiskReads$LAYOUT, UserDiskReads$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD UserDiskReads
     * }
     */
    public static void UserDiskReads(MemorySegment struct, int fieldValue) {
        struct.set(UserDiskReads$LAYOUT, UserDiskReads$OFFSET, fieldValue);
    }

    private static final OfInt UserFileWrites$LAYOUT = (OfInt)$LAYOUT.select(groupElement("UserFileWrites"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD UserFileWrites
     * }
     */
    public static final OfInt UserFileWrites$layout() {
        return UserFileWrites$LAYOUT;
    }

    private static final long UserFileWrites$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD UserFileWrites
     * }
     */
    public static final long UserFileWrites$offset() {
        return UserFileWrites$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD UserFileWrites
     * }
     */
    public static int UserFileWrites(MemorySegment struct) {
        return struct.get(UserFileWrites$LAYOUT, UserFileWrites$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD UserFileWrites
     * }
     */
    public static void UserFileWrites(MemorySegment struct, int fieldValue) {
        struct.set(UserFileWrites$LAYOUT, UserFileWrites$OFFSET, fieldValue);
    }

    private static final OfInt UserFileWriteBytes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("UserFileWriteBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD UserFileWriteBytes
     * }
     */
    public static final OfInt UserFileWriteBytes$layout() {
        return UserFileWriteBytes$LAYOUT;
    }

    private static final long UserFileWriteBytes$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD UserFileWriteBytes
     * }
     */
    public static final long UserFileWriteBytes$offset() {
        return UserFileWriteBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD UserFileWriteBytes
     * }
     */
    public static int UserFileWriteBytes(MemorySegment struct) {
        return struct.get(UserFileWriteBytes$LAYOUT, UserFileWriteBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD UserFileWriteBytes
     * }
     */
    public static void UserFileWriteBytes(MemorySegment struct, int fieldValue) {
        struct.set(UserFileWriteBytes$LAYOUT, UserFileWriteBytes$OFFSET, fieldValue);
    }

    private static final OfInt UserDiskWrites$LAYOUT = (OfInt)$LAYOUT.select(groupElement("UserDiskWrites"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD UserDiskWrites
     * }
     */
    public static final OfInt UserDiskWrites$layout() {
        return UserDiskWrites$LAYOUT;
    }

    private static final long UserDiskWrites$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD UserDiskWrites
     * }
     */
    public static final long UserDiskWrites$offset() {
        return UserDiskWrites$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD UserDiskWrites
     * }
     */
    public static int UserDiskWrites(MemorySegment struct) {
        return struct.get(UserDiskWrites$LAYOUT, UserDiskWrites$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD UserDiskWrites
     * }
     */
    public static void UserDiskWrites(MemorySegment struct, int fieldValue) {
        struct.set(UserDiskWrites$LAYOUT, UserDiskWrites$OFFSET, fieldValue);
    }

    private static final OfInt MetaDataReads$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MetaDataReads"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD MetaDataReads
     * }
     */
    public static final OfInt MetaDataReads$layout() {
        return MetaDataReads$LAYOUT;
    }

    private static final long MetaDataReads$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD MetaDataReads
     * }
     */
    public static final long MetaDataReads$offset() {
        return MetaDataReads$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD MetaDataReads
     * }
     */
    public static int MetaDataReads(MemorySegment struct) {
        return struct.get(MetaDataReads$LAYOUT, MetaDataReads$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD MetaDataReads
     * }
     */
    public static void MetaDataReads(MemorySegment struct, int fieldValue) {
        struct.set(MetaDataReads$LAYOUT, MetaDataReads$OFFSET, fieldValue);
    }

    private static final OfInt MetaDataReadBytes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MetaDataReadBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD MetaDataReadBytes
     * }
     */
    public static final OfInt MetaDataReadBytes$layout() {
        return MetaDataReadBytes$LAYOUT;
    }

    private static final long MetaDataReadBytes$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD MetaDataReadBytes
     * }
     */
    public static final long MetaDataReadBytes$offset() {
        return MetaDataReadBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD MetaDataReadBytes
     * }
     */
    public static int MetaDataReadBytes(MemorySegment struct) {
        return struct.get(MetaDataReadBytes$LAYOUT, MetaDataReadBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD MetaDataReadBytes
     * }
     */
    public static void MetaDataReadBytes(MemorySegment struct, int fieldValue) {
        struct.set(MetaDataReadBytes$LAYOUT, MetaDataReadBytes$OFFSET, fieldValue);
    }

    private static final OfInt MetaDataDiskReads$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MetaDataDiskReads"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD MetaDataDiskReads
     * }
     */
    public static final OfInt MetaDataDiskReads$layout() {
        return MetaDataDiskReads$LAYOUT;
    }

    private static final long MetaDataDiskReads$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD MetaDataDiskReads
     * }
     */
    public static final long MetaDataDiskReads$offset() {
        return MetaDataDiskReads$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD MetaDataDiskReads
     * }
     */
    public static int MetaDataDiskReads(MemorySegment struct) {
        return struct.get(MetaDataDiskReads$LAYOUT, MetaDataDiskReads$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD MetaDataDiskReads
     * }
     */
    public static void MetaDataDiskReads(MemorySegment struct, int fieldValue) {
        struct.set(MetaDataDiskReads$LAYOUT, MetaDataDiskReads$OFFSET, fieldValue);
    }

    private static final OfInt MetaDataWrites$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MetaDataWrites"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD MetaDataWrites
     * }
     */
    public static final OfInt MetaDataWrites$layout() {
        return MetaDataWrites$LAYOUT;
    }

    private static final long MetaDataWrites$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD MetaDataWrites
     * }
     */
    public static final long MetaDataWrites$offset() {
        return MetaDataWrites$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD MetaDataWrites
     * }
     */
    public static int MetaDataWrites(MemorySegment struct) {
        return struct.get(MetaDataWrites$LAYOUT, MetaDataWrites$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD MetaDataWrites
     * }
     */
    public static void MetaDataWrites(MemorySegment struct, int fieldValue) {
        struct.set(MetaDataWrites$LAYOUT, MetaDataWrites$OFFSET, fieldValue);
    }

    private static final OfInt MetaDataWriteBytes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MetaDataWriteBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD MetaDataWriteBytes
     * }
     */
    public static final OfInt MetaDataWriteBytes$layout() {
        return MetaDataWriteBytes$LAYOUT;
    }

    private static final long MetaDataWriteBytes$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD MetaDataWriteBytes
     * }
     */
    public static final long MetaDataWriteBytes$offset() {
        return MetaDataWriteBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD MetaDataWriteBytes
     * }
     */
    public static int MetaDataWriteBytes(MemorySegment struct) {
        return struct.get(MetaDataWriteBytes$LAYOUT, MetaDataWriteBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD MetaDataWriteBytes
     * }
     */
    public static void MetaDataWriteBytes(MemorySegment struct, int fieldValue) {
        struct.set(MetaDataWriteBytes$LAYOUT, MetaDataWriteBytes$OFFSET, fieldValue);
    }

    private static final OfInt MetaDataDiskWrites$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MetaDataDiskWrites"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD MetaDataDiskWrites
     * }
     */
    public static final OfInt MetaDataDiskWrites$layout() {
        return MetaDataDiskWrites$LAYOUT;
    }

    private static final long MetaDataDiskWrites$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD MetaDataDiskWrites
     * }
     */
    public static final long MetaDataDiskWrites$offset() {
        return MetaDataDiskWrites$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD MetaDataDiskWrites
     * }
     */
    public static int MetaDataDiskWrites(MemorySegment struct) {
        return struct.get(MetaDataDiskWrites$LAYOUT, MetaDataDiskWrites$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD MetaDataDiskWrites
     * }
     */
    public static void MetaDataDiskWrites(MemorySegment struct, int fieldValue) {
        struct.set(MetaDataDiskWrites$LAYOUT, MetaDataDiskWrites$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

