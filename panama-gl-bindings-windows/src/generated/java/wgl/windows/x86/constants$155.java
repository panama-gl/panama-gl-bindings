// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$155 {

    static final FunctionDescriptor SetUnhandledExceptionFilter$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetUnhandledExceptionFilter$MH = RuntimeHelper.downcallHandle(
        "SetUnhandledExceptionFilter",
        constants$155.SetUnhandledExceptionFilter$FUNC
    );
    static final FunctionDescriptor GetLastError$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT);
    static final MethodHandle GetLastError$MH = RuntimeHelper.downcallHandle(
        "GetLastError",
        constants$155.GetLastError$FUNC
    );
    static final FunctionDescriptor SetLastError$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetLastError$MH = RuntimeHelper.downcallHandle(
        "SetLastError",
        constants$155.SetLastError$FUNC
    );
    static final FunctionDescriptor GetErrorMode$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT);
    static final MethodHandle GetErrorMode$MH = RuntimeHelper.downcallHandle(
        "GetErrorMode",
        constants$155.GetErrorMode$FUNC
    );
    static final FunctionDescriptor SetErrorMode$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetErrorMode$MH = RuntimeHelper.downcallHandle(
        "SetErrorMode",
        constants$155.SetErrorMode$FUNC
    );
    static final FunctionDescriptor AddVectoredExceptionHandler$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddVectoredExceptionHandler$MH = RuntimeHelper.downcallHandle(
        "AddVectoredExceptionHandler",
        constants$155.AddVectoredExceptionHandler$FUNC
    );
}


