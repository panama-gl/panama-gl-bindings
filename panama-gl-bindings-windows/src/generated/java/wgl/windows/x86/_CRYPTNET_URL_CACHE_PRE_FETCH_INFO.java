// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _CRYPTNET_URL_CACHE_PRE_FETCH_INFO {
 *     DWORD cbSize;
 *     DWORD dwObjectType;
 *     DWORD dwError;
 *     DWORD dwReserved;
 *     FILETIME ThisUpdateTime;
 *     FILETIME NextUpdateTime;
 *     FILETIME PublishTime;
 * }
 * }
 */
public class _CRYPTNET_URL_CACHE_PRE_FETCH_INFO {

    _CRYPTNET_URL_CACHE_PRE_FETCH_INFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("cbSize"),
        wgl_h.C_LONG.withName("dwObjectType"),
        wgl_h.C_LONG.withName("dwError"),
        wgl_h.C_LONG.withName("dwReserved"),
        _FILETIME.layout().withName("ThisUpdateTime"),
        _FILETIME.layout().withName("NextUpdateTime"),
        _FILETIME.layout().withName("PublishTime")
    ).withName("_CRYPTNET_URL_CACHE_PRE_FETCH_INFO");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt cbSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static final OfInt cbSize$layout() {
        return cbSize$LAYOUT;
    }

    private static final long cbSize$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static final long cbSize$offset() {
        return cbSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static int cbSize(MemorySegment struct) {
        return struct.get(cbSize$LAYOUT, cbSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static void cbSize(MemorySegment struct, int fieldValue) {
        struct.set(cbSize$LAYOUT, cbSize$OFFSET, fieldValue);
    }

    private static final OfInt dwObjectType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwObjectType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwObjectType
     * }
     */
    public static final OfInt dwObjectType$layout() {
        return dwObjectType$LAYOUT;
    }

    private static final long dwObjectType$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwObjectType
     * }
     */
    public static final long dwObjectType$offset() {
        return dwObjectType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwObjectType
     * }
     */
    public static int dwObjectType(MemorySegment struct) {
        return struct.get(dwObjectType$LAYOUT, dwObjectType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwObjectType
     * }
     */
    public static void dwObjectType(MemorySegment struct, int fieldValue) {
        struct.set(dwObjectType$LAYOUT, dwObjectType$OFFSET, fieldValue);
    }

    private static final OfInt dwError$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwError"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwError
     * }
     */
    public static final OfInt dwError$layout() {
        return dwError$LAYOUT;
    }

    private static final long dwError$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwError
     * }
     */
    public static final long dwError$offset() {
        return dwError$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwError
     * }
     */
    public static int dwError(MemorySegment struct) {
        return struct.get(dwError$LAYOUT, dwError$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwError
     * }
     */
    public static void dwError(MemorySegment struct, int fieldValue) {
        struct.set(dwError$LAYOUT, dwError$OFFSET, fieldValue);
    }

    private static final OfInt dwReserved$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwReserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwReserved
     * }
     */
    public static final OfInt dwReserved$layout() {
        return dwReserved$LAYOUT;
    }

    private static final long dwReserved$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwReserved
     * }
     */
    public static final long dwReserved$offset() {
        return dwReserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwReserved
     * }
     */
    public static int dwReserved(MemorySegment struct) {
        return struct.get(dwReserved$LAYOUT, dwReserved$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwReserved
     * }
     */
    public static void dwReserved(MemorySegment struct, int fieldValue) {
        struct.set(dwReserved$LAYOUT, dwReserved$OFFSET, fieldValue);
    }

    private static final GroupLayout ThisUpdateTime$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ThisUpdateTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FILETIME ThisUpdateTime
     * }
     */
    public static final GroupLayout ThisUpdateTime$layout() {
        return ThisUpdateTime$LAYOUT;
    }

    private static final long ThisUpdateTime$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FILETIME ThisUpdateTime
     * }
     */
    public static final long ThisUpdateTime$offset() {
        return ThisUpdateTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FILETIME ThisUpdateTime
     * }
     */
    public static MemorySegment ThisUpdateTime(MemorySegment struct) {
        return struct.asSlice(ThisUpdateTime$OFFSET, ThisUpdateTime$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FILETIME ThisUpdateTime
     * }
     */
    public static void ThisUpdateTime(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ThisUpdateTime$OFFSET, ThisUpdateTime$LAYOUT.byteSize());
    }

    private static final GroupLayout NextUpdateTime$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("NextUpdateTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FILETIME NextUpdateTime
     * }
     */
    public static final GroupLayout NextUpdateTime$layout() {
        return NextUpdateTime$LAYOUT;
    }

    private static final long NextUpdateTime$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FILETIME NextUpdateTime
     * }
     */
    public static final long NextUpdateTime$offset() {
        return NextUpdateTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FILETIME NextUpdateTime
     * }
     */
    public static MemorySegment NextUpdateTime(MemorySegment struct) {
        return struct.asSlice(NextUpdateTime$OFFSET, NextUpdateTime$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FILETIME NextUpdateTime
     * }
     */
    public static void NextUpdateTime(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, NextUpdateTime$OFFSET, NextUpdateTime$LAYOUT.byteSize());
    }

    private static final GroupLayout PublishTime$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("PublishTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FILETIME PublishTime
     * }
     */
    public static final GroupLayout PublishTime$layout() {
        return PublishTime$LAYOUT;
    }

    private static final long PublishTime$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FILETIME PublishTime
     * }
     */
    public static final long PublishTime$offset() {
        return PublishTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FILETIME PublishTime
     * }
     */
    public static MemorySegment PublishTime(MemorySegment struct) {
        return struct.asSlice(PublishTime$OFFSET, PublishTime$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FILETIME PublishTime
     * }
     */
    public static void PublishTime(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, PublishTime$OFFSET, PublishTime$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

