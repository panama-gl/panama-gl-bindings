// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _CRYPTNET_URL_CACHE_PRE_FETCH_INFO {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("cbSize"),
        Constants$root.C_LONG$LAYOUT.withName("dwObjectType"),
        Constants$root.C_LONG$LAYOUT.withName("dwError"),
        Constants$root.C_LONG$LAYOUT.withName("dwReserved"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("dwLowDateTime"),
            Constants$root.C_LONG$LAYOUT.withName("dwHighDateTime")
        ).withName("ThisUpdateTime"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("dwLowDateTime"),
            Constants$root.C_LONG$LAYOUT.withName("dwHighDateTime")
        ).withName("NextUpdateTime"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("dwLowDateTime"),
            Constants$root.C_LONG$LAYOUT.withName("dwHighDateTime")
        ).withName("PublishTime")
    ).withName("_CRYPTNET_URL_CACHE_PRE_FETCH_INFO");
    public static MemoryLayout $LAYOUT() {
        return _CRYPTNET_URL_CACHE_PRE_FETCH_INFO.$struct$LAYOUT;
    }
    static final VarHandle cbSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbSize"));
    public static VarHandle cbSize$VH() {
        return _CRYPTNET_URL_CACHE_PRE_FETCH_INFO.cbSize$VH;
    }
    public static int cbSize$get(MemorySegment seg) {
        return (int)_CRYPTNET_URL_CACHE_PRE_FETCH_INFO.cbSize$VH.get(seg);
    }
    public static void cbSize$set( MemorySegment seg, int x) {
        _CRYPTNET_URL_CACHE_PRE_FETCH_INFO.cbSize$VH.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)_CRYPTNET_URL_CACHE_PRE_FETCH_INFO.cbSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        _CRYPTNET_URL_CACHE_PRE_FETCH_INFO.cbSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwObjectType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwObjectType"));
    public static VarHandle dwObjectType$VH() {
        return _CRYPTNET_URL_CACHE_PRE_FETCH_INFO.dwObjectType$VH;
    }
    public static int dwObjectType$get(MemorySegment seg) {
        return (int)_CRYPTNET_URL_CACHE_PRE_FETCH_INFO.dwObjectType$VH.get(seg);
    }
    public static void dwObjectType$set( MemorySegment seg, int x) {
        _CRYPTNET_URL_CACHE_PRE_FETCH_INFO.dwObjectType$VH.set(seg, x);
    }
    public static int dwObjectType$get(MemorySegment seg, long index) {
        return (int)_CRYPTNET_URL_CACHE_PRE_FETCH_INFO.dwObjectType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwObjectType$set(MemorySegment seg, long index, int x) {
        _CRYPTNET_URL_CACHE_PRE_FETCH_INFO.dwObjectType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwError$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwError"));
    public static VarHandle dwError$VH() {
        return _CRYPTNET_URL_CACHE_PRE_FETCH_INFO.dwError$VH;
    }
    public static int dwError$get(MemorySegment seg) {
        return (int)_CRYPTNET_URL_CACHE_PRE_FETCH_INFO.dwError$VH.get(seg);
    }
    public static void dwError$set( MemorySegment seg, int x) {
        _CRYPTNET_URL_CACHE_PRE_FETCH_INFO.dwError$VH.set(seg, x);
    }
    public static int dwError$get(MemorySegment seg, long index) {
        return (int)_CRYPTNET_URL_CACHE_PRE_FETCH_INFO.dwError$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwError$set(MemorySegment seg, long index, int x) {
        _CRYPTNET_URL_CACHE_PRE_FETCH_INFO.dwError$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwReserved$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwReserved"));
    public static VarHandle dwReserved$VH() {
        return _CRYPTNET_URL_CACHE_PRE_FETCH_INFO.dwReserved$VH;
    }
    public static int dwReserved$get(MemorySegment seg) {
        return (int)_CRYPTNET_URL_CACHE_PRE_FETCH_INFO.dwReserved$VH.get(seg);
    }
    public static void dwReserved$set( MemorySegment seg, int x) {
        _CRYPTNET_URL_CACHE_PRE_FETCH_INFO.dwReserved$VH.set(seg, x);
    }
    public static int dwReserved$get(MemorySegment seg, long index) {
        return (int)_CRYPTNET_URL_CACHE_PRE_FETCH_INFO.dwReserved$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwReserved$set(MemorySegment seg, long index, int x) {
        _CRYPTNET_URL_CACHE_PRE_FETCH_INFO.dwReserved$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ThisUpdateTime$slice(MemorySegment seg) {
        return seg.asSlice(16, 8);
    }
    public static MemorySegment NextUpdateTime$slice(MemorySegment seg) {
        return seg.asSlice(24, 8);
    }
    public static MemorySegment PublishTime$slice(MemorySegment seg) {
        return seg.asSlice(32, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


