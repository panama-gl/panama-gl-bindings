// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _GDI_OBJECT {
 *     DWORD ObjectType;
 *     union __MIDL_IAdviseSink_0002 {
 *         wireHBITMAP hBitmap;
 *         wireHPALETTE hPalette;
 *         wireHGLOBAL hGeneric;
 *     } u;
 * }
 * }
 */
public class _GDI_OBJECT {

    _GDI_OBJECT() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("ObjectType"),
        MemoryLayout.paddingLayout(4),
        _GDI_OBJECT.__MIDL_IAdviseSink_0002.layout().withName("u")
    ).withName("_GDI_OBJECT");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt ObjectType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ObjectType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD ObjectType
     * }
     */
    public static final OfInt ObjectType$layout() {
        return ObjectType$LAYOUT;
    }

    private static final long ObjectType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD ObjectType
     * }
     */
    public static final long ObjectType$offset() {
        return ObjectType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD ObjectType
     * }
     */
    public static int ObjectType(MemorySegment struct) {
        return struct.get(ObjectType$LAYOUT, ObjectType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD ObjectType
     * }
     */
    public static void ObjectType(MemorySegment struct, int fieldValue) {
        struct.set(ObjectType$LAYOUT, ObjectType$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * union __MIDL_IAdviseSink_0002 {
     *     wireHBITMAP hBitmap;
     *     wireHPALETTE hPalette;
     *     wireHGLOBAL hGeneric;
     * }
     * }
     */
    public static class __MIDL_IAdviseSink_0002 {

        __MIDL_IAdviseSink_0002() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
            wgl_h.C_POINTER.withName("hBitmap"),
            wgl_h.C_POINTER.withName("hPalette"),
            wgl_h.C_POINTER.withName("hGeneric")
        ).withName("__MIDL_IAdviseSink_0002");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final AddressLayout hBitmap$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hBitmap"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * wireHBITMAP hBitmap
         * }
         */
        public static final AddressLayout hBitmap$layout() {
            return hBitmap$LAYOUT;
        }

        private static final long hBitmap$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * wireHBITMAP hBitmap
         * }
         */
        public static final long hBitmap$offset() {
            return hBitmap$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * wireHBITMAP hBitmap
         * }
         */
        public static MemorySegment hBitmap(MemorySegment union) {
            return union.get(hBitmap$LAYOUT, hBitmap$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * wireHBITMAP hBitmap
         * }
         */
        public static void hBitmap(MemorySegment union, MemorySegment fieldValue) {
            union.set(hBitmap$LAYOUT, hBitmap$OFFSET, fieldValue);
        }

        private static final AddressLayout hPalette$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hPalette"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * wireHPALETTE hPalette
         * }
         */
        public static final AddressLayout hPalette$layout() {
            return hPalette$LAYOUT;
        }

        private static final long hPalette$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * wireHPALETTE hPalette
         * }
         */
        public static final long hPalette$offset() {
            return hPalette$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * wireHPALETTE hPalette
         * }
         */
        public static MemorySegment hPalette(MemorySegment union) {
            return union.get(hPalette$LAYOUT, hPalette$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * wireHPALETTE hPalette
         * }
         */
        public static void hPalette(MemorySegment union, MemorySegment fieldValue) {
            union.set(hPalette$LAYOUT, hPalette$OFFSET, fieldValue);
        }

        private static final AddressLayout hGeneric$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hGeneric"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * wireHGLOBAL hGeneric
         * }
         */
        public static final AddressLayout hGeneric$layout() {
            return hGeneric$LAYOUT;
        }

        private static final long hGeneric$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * wireHGLOBAL hGeneric
         * }
         */
        public static final long hGeneric$offset() {
            return hGeneric$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * wireHGLOBAL hGeneric
         * }
         */
        public static MemorySegment hGeneric(MemorySegment union) {
            return union.get(hGeneric$LAYOUT, hGeneric$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * wireHGLOBAL hGeneric
         * }
         */
        public static void hGeneric(MemorySegment union, MemorySegment fieldValue) {
            union.set(hGeneric$LAYOUT, hGeneric$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout u$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("u"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union __MIDL_IAdviseSink_0002 u
     * }
     */
    public static final GroupLayout u$layout() {
        return u$LAYOUT;
    }

    private static final long u$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union __MIDL_IAdviseSink_0002 u
     * }
     */
    public static final long u$offset() {
        return u$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union __MIDL_IAdviseSink_0002 u
     * }
     */
    public static MemorySegment u(MemorySegment struct) {
        return struct.asSlice(u$OFFSET, u$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union __MIDL_IAdviseSink_0002 u
     * }
     */
    public static void u(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, u$OFFSET, u$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

