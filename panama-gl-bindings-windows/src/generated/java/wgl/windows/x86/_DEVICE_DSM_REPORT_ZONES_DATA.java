// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _DEVICE_DSM_REPORT_ZONES_DATA {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Size"),
        Constants$root.C_LONG$LAYOUT.withName("ZoneCount"),
        Constants$root.C_LONG$LAYOUT.withName("Attributes"),
        Constants$root.C_LONG$LAYOUT.withName("Reserved0"),
        MemoryLayout.sequenceLayout(1, MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("Size"),
            Constants$root.C_LONG$LAYOUT.withName("ZoneType"),
            Constants$root.C_LONG$LAYOUT.withName("ZoneCondition"),
            Constants$root.C_CHAR$LAYOUT.withName("ResetWritePointerRecommend"),
            MemoryLayout.sequenceLayout(3, Constants$root.C_CHAR$LAYOUT).withName("Reserved0"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("ZoneSize"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("WritePointerOffset")
        ).withName("_STORAGE_ZONE_DESCRIPTOR")).withName("ZoneDescriptors")
    ).withName("_DEVICE_DSM_REPORT_ZONES_DATA");
    public static MemoryLayout $LAYOUT() {
        return _DEVICE_DSM_REPORT_ZONES_DATA.$struct$LAYOUT;
    }
    static final VarHandle Size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Size"));
    public static VarHandle Size$VH() {
        return _DEVICE_DSM_REPORT_ZONES_DATA.Size$VH;
    }
    public static int Size$get(MemorySegment seg) {
        return (int)_DEVICE_DSM_REPORT_ZONES_DATA.Size$VH.get(seg);
    }
    public static void Size$set( MemorySegment seg, int x) {
        _DEVICE_DSM_REPORT_ZONES_DATA.Size$VH.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)_DEVICE_DSM_REPORT_ZONES_DATA.Size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        _DEVICE_DSM_REPORT_ZONES_DATA.Size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ZoneCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ZoneCount"));
    public static VarHandle ZoneCount$VH() {
        return _DEVICE_DSM_REPORT_ZONES_DATA.ZoneCount$VH;
    }
    public static int ZoneCount$get(MemorySegment seg) {
        return (int)_DEVICE_DSM_REPORT_ZONES_DATA.ZoneCount$VH.get(seg);
    }
    public static void ZoneCount$set( MemorySegment seg, int x) {
        _DEVICE_DSM_REPORT_ZONES_DATA.ZoneCount$VH.set(seg, x);
    }
    public static int ZoneCount$get(MemorySegment seg, long index) {
        return (int)_DEVICE_DSM_REPORT_ZONES_DATA.ZoneCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ZoneCount$set(MemorySegment seg, long index, int x) {
        _DEVICE_DSM_REPORT_ZONES_DATA.ZoneCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Attributes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Attributes"));
    public static VarHandle Attributes$VH() {
        return _DEVICE_DSM_REPORT_ZONES_DATA.Attributes$VH;
    }
    public static int Attributes$get(MemorySegment seg) {
        return (int)_DEVICE_DSM_REPORT_ZONES_DATA.Attributes$VH.get(seg);
    }
    public static void Attributes$set( MemorySegment seg, int x) {
        _DEVICE_DSM_REPORT_ZONES_DATA.Attributes$VH.set(seg, x);
    }
    public static int Attributes$get(MemorySegment seg, long index) {
        return (int)_DEVICE_DSM_REPORT_ZONES_DATA.Attributes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Attributes$set(MemorySegment seg, long index, int x) {
        _DEVICE_DSM_REPORT_ZONES_DATA.Attributes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Reserved0$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Reserved0"));
    public static VarHandle Reserved0$VH() {
        return _DEVICE_DSM_REPORT_ZONES_DATA.Reserved0$VH;
    }
    public static int Reserved0$get(MemorySegment seg) {
        return (int)_DEVICE_DSM_REPORT_ZONES_DATA.Reserved0$VH.get(seg);
    }
    public static void Reserved0$set( MemorySegment seg, int x) {
        _DEVICE_DSM_REPORT_ZONES_DATA.Reserved0$VH.set(seg, x);
    }
    public static int Reserved0$get(MemorySegment seg, long index) {
        return (int)_DEVICE_DSM_REPORT_ZONES_DATA.Reserved0$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved0$set(MemorySegment seg, long index, int x) {
        _DEVICE_DSM_REPORT_ZONES_DATA.Reserved0$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ZoneDescriptors$slice(MemorySegment seg) {
        return seg.asSlice(16, 32);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


