// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class ITypeInfoVtbl {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTypeAttr"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTypeComp"),
        Constants$root.C_POINTER$LAYOUT.withName("GetFuncDesc"),
        Constants$root.C_POINTER$LAYOUT.withName("GetVarDesc"),
        Constants$root.C_POINTER$LAYOUT.withName("GetNames"),
        Constants$root.C_POINTER$LAYOUT.withName("GetRefTypeOfImplType"),
        Constants$root.C_POINTER$LAYOUT.withName("GetImplTypeFlags"),
        Constants$root.C_POINTER$LAYOUT.withName("GetIDsOfNames"),
        Constants$root.C_POINTER$LAYOUT.withName("Invoke"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDocumentation"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDllEntry"),
        Constants$root.C_POINTER$LAYOUT.withName("GetRefTypeInfo"),
        Constants$root.C_POINTER$LAYOUT.withName("AddressOfMember"),
        Constants$root.C_POINTER$LAYOUT.withName("CreateInstance"),
        Constants$root.C_POINTER$LAYOUT.withName("GetMops"),
        Constants$root.C_POINTER$LAYOUT.withName("GetContainingTypeLib"),
        Constants$root.C_POINTER$LAYOUT.withName("ReleaseTypeAttr"),
        Constants$root.C_POINTER$LAYOUT.withName("ReleaseFuncDesc"),
        Constants$root.C_POINTER$LAYOUT.withName("ReleaseVarDesc")
    ).withName("ITypeInfoVtbl");
    public static MemoryLayout $LAYOUT() {
        return ITypeInfoVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.QueryInterface$FUNC
    );
    public interface QueryInterface {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(QueryInterface fi, MemorySession session) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, ITypeInfoVtbl.QueryInterface$FUNC, session);
        }
        static QueryInterface ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)ITypeInfoVtbl.QueryInterface$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return ITypeInfoVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfoVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfoVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment, MemorySession session) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), session);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.AddRef$FUNC
    );
    public interface AddRef {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(AddRef fi, MemorySession session) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, ITypeInfoVtbl.AddRef$FUNC, session);
        }
        static AddRef ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)ITypeInfoVtbl.AddRef$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return ITypeInfoVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfoVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfoVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment, MemorySession session) {
        return AddRef.ofAddress(AddRef$get(segment), session);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.Release$FUNC
    );
    public interface Release {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Release fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Release.class, fi, ITypeInfoVtbl.Release$FUNC, session);
        }
        static Release ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)ITypeInfoVtbl.Release$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return ITypeInfoVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfoVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfoVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment, MemorySession session) {
        return Release.ofAddress(Release$get(segment), session);
    }
    static final FunctionDescriptor GetTypeAttr$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeAttr$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.GetTypeAttr$FUNC
    );
    public interface GetTypeAttr {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetTypeAttr fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetTypeAttr.class, fi, ITypeInfoVtbl.GetTypeAttr$FUNC, session);
        }
        static GetTypeAttr ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)ITypeInfoVtbl.GetTypeAttr$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeAttr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTypeAttr"));
    public static VarHandle GetTypeAttr$VH() {
        return ITypeInfoVtbl.GetTypeAttr$VH;
    }
    public static MemoryAddress GetTypeAttr$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.GetTypeAttr$VH.get(seg);
    }
    public static void GetTypeAttr$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfoVtbl.GetTypeAttr$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeAttr$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.GetTypeAttr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeAttr$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfoVtbl.GetTypeAttr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeAttr GetTypeAttr (MemorySegment segment, MemorySession session) {
        return GetTypeAttr.ofAddress(GetTypeAttr$get(segment), session);
    }
    static final FunctionDescriptor GetTypeComp$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeComp$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.GetTypeComp$FUNC
    );
    public interface GetTypeComp {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetTypeComp fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetTypeComp.class, fi, ITypeInfoVtbl.GetTypeComp$FUNC, session);
        }
        static GetTypeComp ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)ITypeInfoVtbl.GetTypeComp$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeComp$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTypeComp"));
    public static VarHandle GetTypeComp$VH() {
        return ITypeInfoVtbl.GetTypeComp$VH;
    }
    public static MemoryAddress GetTypeComp$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.GetTypeComp$VH.get(seg);
    }
    public static void GetTypeComp$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfoVtbl.GetTypeComp$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeComp$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.GetTypeComp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeComp$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfoVtbl.GetTypeComp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeComp GetTypeComp (MemorySegment segment, MemorySession session) {
        return GetTypeComp.ofAddress(GetTypeComp$get(segment), session);
    }
    static final FunctionDescriptor GetFuncDesc$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetFuncDesc$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.GetFuncDesc$FUNC
    );
    public interface GetFuncDesc {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(GetFuncDesc fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetFuncDesc.class, fi, ITypeInfoVtbl.GetFuncDesc$FUNC, session);
        }
        static GetFuncDesc ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)ITypeInfoVtbl.GetFuncDesc$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetFuncDesc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetFuncDesc"));
    public static VarHandle GetFuncDesc$VH() {
        return ITypeInfoVtbl.GetFuncDesc$VH;
    }
    public static MemoryAddress GetFuncDesc$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.GetFuncDesc$VH.get(seg);
    }
    public static void GetFuncDesc$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfoVtbl.GetFuncDesc$VH.set(seg, x);
    }
    public static MemoryAddress GetFuncDesc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.GetFuncDesc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetFuncDesc$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfoVtbl.GetFuncDesc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetFuncDesc GetFuncDesc (MemorySegment segment, MemorySession session) {
        return GetFuncDesc.ofAddress(GetFuncDesc$get(segment), session);
    }
    static final FunctionDescriptor GetVarDesc$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetVarDesc$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.GetVarDesc$FUNC
    );
    public interface GetVarDesc {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(GetVarDesc fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetVarDesc.class, fi, ITypeInfoVtbl.GetVarDesc$FUNC, session);
        }
        static GetVarDesc ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)ITypeInfoVtbl.GetVarDesc$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetVarDesc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetVarDesc"));
    public static VarHandle GetVarDesc$VH() {
        return ITypeInfoVtbl.GetVarDesc$VH;
    }
    public static MemoryAddress GetVarDesc$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.GetVarDesc$VH.get(seg);
    }
    public static void GetVarDesc$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfoVtbl.GetVarDesc$VH.set(seg, x);
    }
    public static MemoryAddress GetVarDesc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.GetVarDesc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetVarDesc$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfoVtbl.GetVarDesc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetVarDesc GetVarDesc (MemorySegment segment, MemorySession session) {
        return GetVarDesc.ofAddress(GetVarDesc$get(segment), session);
    }
    static final FunctionDescriptor GetNames$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetNames$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.GetNames$FUNC
    );
    public interface GetNames {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2, int _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(GetNames fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetNames.class, fi, ITypeInfoVtbl.GetNames$FUNC, session);
        }
        static GetNames ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2, int __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    return (int)ITypeInfoVtbl.GetNames$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2, __x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetNames$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetNames"));
    public static VarHandle GetNames$VH() {
        return ITypeInfoVtbl.GetNames$VH;
    }
    public static MemoryAddress GetNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.GetNames$VH.get(seg);
    }
    public static void GetNames$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfoVtbl.GetNames$VH.set(seg, x);
    }
    public static MemoryAddress GetNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.GetNames$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetNames$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfoVtbl.GetNames$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetNames GetNames (MemorySegment segment, MemorySession session) {
        return GetNames.ofAddress(GetNames$get(segment), session);
    }
    static final FunctionDescriptor GetRefTypeOfImplType$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetRefTypeOfImplType$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.GetRefTypeOfImplType$FUNC
    );
    public interface GetRefTypeOfImplType {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(GetRefTypeOfImplType fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetRefTypeOfImplType.class, fi, ITypeInfoVtbl.GetRefTypeOfImplType$FUNC, session);
        }
        static GetRefTypeOfImplType ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)ITypeInfoVtbl.GetRefTypeOfImplType$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetRefTypeOfImplType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetRefTypeOfImplType"));
    public static VarHandle GetRefTypeOfImplType$VH() {
        return ITypeInfoVtbl.GetRefTypeOfImplType$VH;
    }
    public static MemoryAddress GetRefTypeOfImplType$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.GetRefTypeOfImplType$VH.get(seg);
    }
    public static void GetRefTypeOfImplType$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfoVtbl.GetRefTypeOfImplType$VH.set(seg, x);
    }
    public static MemoryAddress GetRefTypeOfImplType$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.GetRefTypeOfImplType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetRefTypeOfImplType$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfoVtbl.GetRefTypeOfImplType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetRefTypeOfImplType GetRefTypeOfImplType (MemorySegment segment, MemorySession session) {
        return GetRefTypeOfImplType.ofAddress(GetRefTypeOfImplType$get(segment), session);
    }
    static final FunctionDescriptor GetImplTypeFlags$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetImplTypeFlags$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.GetImplTypeFlags$FUNC
    );
    public interface GetImplTypeFlags {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(GetImplTypeFlags fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetImplTypeFlags.class, fi, ITypeInfoVtbl.GetImplTypeFlags$FUNC, session);
        }
        static GetImplTypeFlags ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)ITypeInfoVtbl.GetImplTypeFlags$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetImplTypeFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetImplTypeFlags"));
    public static VarHandle GetImplTypeFlags$VH() {
        return ITypeInfoVtbl.GetImplTypeFlags$VH;
    }
    public static MemoryAddress GetImplTypeFlags$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.GetImplTypeFlags$VH.get(seg);
    }
    public static void GetImplTypeFlags$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfoVtbl.GetImplTypeFlags$VH.set(seg, x);
    }
    public static MemoryAddress GetImplTypeFlags$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.GetImplTypeFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetImplTypeFlags$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfoVtbl.GetImplTypeFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetImplTypeFlags GetImplTypeFlags (MemorySegment segment, MemorySession session) {
        return GetImplTypeFlags.ofAddress(GetImplTypeFlags$get(segment), session);
    }
    static final FunctionDescriptor GetIDsOfNames$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetIDsOfNames$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.GetIDsOfNames$FUNC
    );
    public interface GetIDsOfNames {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(GetIDsOfNames fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetIDsOfNames.class, fi, ITypeInfoVtbl.GetIDsOfNames$FUNC, session);
        }
        static GetIDsOfNames ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)ITypeInfoVtbl.GetIDsOfNames$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetIDsOfNames$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetIDsOfNames"));
    public static VarHandle GetIDsOfNames$VH() {
        return ITypeInfoVtbl.GetIDsOfNames$VH;
    }
    public static MemoryAddress GetIDsOfNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.GetIDsOfNames$VH.get(seg);
    }
    public static void GetIDsOfNames$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfoVtbl.GetIDsOfNames$VH.set(seg, x);
    }
    public static MemoryAddress GetIDsOfNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.GetIDsOfNames$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetIDsOfNames$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfoVtbl.GetIDsOfNames$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetIDsOfNames GetIDsOfNames (MemorySegment segment, MemorySession session) {
        return GetIDsOfNames.ofAddress(GetIDsOfNames$get(segment), session);
    }
    static final FunctionDescriptor Invoke$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Invoke$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.Invoke$FUNC
    );
    public interface Invoke {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2, short _x3, java.lang.foreign.MemoryAddress _x4, java.lang.foreign.MemoryAddress _x5, java.lang.foreign.MemoryAddress _x6, java.lang.foreign.MemoryAddress _x7);
        static MemorySegment allocate(Invoke fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Invoke.class, fi, ITypeInfoVtbl.Invoke$FUNC, session);
        }
        static Invoke ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2, short __x3, java.lang.foreign.MemoryAddress __x4, java.lang.foreign.MemoryAddress __x5, java.lang.foreign.MemoryAddress __x6, java.lang.foreign.MemoryAddress __x7) -> {
                try {
                    return (int)ITypeInfoVtbl.Invoke$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, __x3, (java.lang.foreign.Addressable)__x4, (java.lang.foreign.Addressable)__x5, (java.lang.foreign.Addressable)__x6, (java.lang.foreign.Addressable)__x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Invoke$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Invoke"));
    public static VarHandle Invoke$VH() {
        return ITypeInfoVtbl.Invoke$VH;
    }
    public static MemoryAddress Invoke$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.Invoke$VH.get(seg);
    }
    public static void Invoke$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfoVtbl.Invoke$VH.set(seg, x);
    }
    public static MemoryAddress Invoke$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.Invoke$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Invoke$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfoVtbl.Invoke$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Invoke Invoke (MemorySegment segment, MemorySession session) {
        return Invoke.ofAddress(Invoke$get(segment), session);
    }
    static final FunctionDescriptor GetDocumentation$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDocumentation$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.GetDocumentation$FUNC
    );
    public interface GetDocumentation {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4, java.lang.foreign.MemoryAddress _x5);
        static MemorySegment allocate(GetDocumentation fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetDocumentation.class, fi, ITypeInfoVtbl.GetDocumentation$FUNC, session);
        }
        static GetDocumentation ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4, java.lang.foreign.MemoryAddress __x5) -> {
                try {
                    return (int)ITypeInfoVtbl.GetDocumentation$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4, (java.lang.foreign.Addressable)__x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDocumentation$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDocumentation"));
    public static VarHandle GetDocumentation$VH() {
        return ITypeInfoVtbl.GetDocumentation$VH;
    }
    public static MemoryAddress GetDocumentation$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.GetDocumentation$VH.get(seg);
    }
    public static void GetDocumentation$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfoVtbl.GetDocumentation$VH.set(seg, x);
    }
    public static MemoryAddress GetDocumentation$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.GetDocumentation$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDocumentation$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfoVtbl.GetDocumentation$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDocumentation GetDocumentation (MemorySegment segment, MemorySession session) {
        return GetDocumentation.ofAddress(GetDocumentation$get(segment), session);
    }
    static final FunctionDescriptor GetDllEntry$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDllEntry$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.GetDllEntry$FUNC
    );
    public interface GetDllEntry {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4, java.lang.foreign.MemoryAddress _x5);
        static MemorySegment allocate(GetDllEntry fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetDllEntry.class, fi, ITypeInfoVtbl.GetDllEntry$FUNC, session);
        }
        static GetDllEntry ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4, java.lang.foreign.MemoryAddress __x5) -> {
                try {
                    return (int)ITypeInfoVtbl.GetDllEntry$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4, (java.lang.foreign.Addressable)__x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDllEntry$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDllEntry"));
    public static VarHandle GetDllEntry$VH() {
        return ITypeInfoVtbl.GetDllEntry$VH;
    }
    public static MemoryAddress GetDllEntry$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.GetDllEntry$VH.get(seg);
    }
    public static void GetDllEntry$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfoVtbl.GetDllEntry$VH.set(seg, x);
    }
    public static MemoryAddress GetDllEntry$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.GetDllEntry$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDllEntry$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfoVtbl.GetDllEntry$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDllEntry GetDllEntry (MemorySegment segment, MemorySession session) {
        return GetDllEntry.ofAddress(GetDllEntry$get(segment), session);
    }
    static final FunctionDescriptor GetRefTypeInfo$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetRefTypeInfo$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.GetRefTypeInfo$FUNC
    );
    public interface GetRefTypeInfo {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(GetRefTypeInfo fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetRefTypeInfo.class, fi, ITypeInfoVtbl.GetRefTypeInfo$FUNC, session);
        }
        static GetRefTypeInfo ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)ITypeInfoVtbl.GetRefTypeInfo$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetRefTypeInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetRefTypeInfo"));
    public static VarHandle GetRefTypeInfo$VH() {
        return ITypeInfoVtbl.GetRefTypeInfo$VH;
    }
    public static MemoryAddress GetRefTypeInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.GetRefTypeInfo$VH.get(seg);
    }
    public static void GetRefTypeInfo$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfoVtbl.GetRefTypeInfo$VH.set(seg, x);
    }
    public static MemoryAddress GetRefTypeInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.GetRefTypeInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetRefTypeInfo$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfoVtbl.GetRefTypeInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetRefTypeInfo GetRefTypeInfo (MemorySegment segment, MemorySession session) {
        return GetRefTypeInfo.ofAddress(GetRefTypeInfo$get(segment), session);
    }
    static final FunctionDescriptor AddressOfMember$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddressOfMember$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.AddressOfMember$FUNC
    );
    public interface AddressOfMember {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(AddressOfMember fi, MemorySession session) {
            return RuntimeHelper.upcallStub(AddressOfMember.class, fi, ITypeInfoVtbl.AddressOfMember$FUNC, session);
        }
        static AddressOfMember ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)ITypeInfoVtbl.AddressOfMember$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddressOfMember$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddressOfMember"));
    public static VarHandle AddressOfMember$VH() {
        return ITypeInfoVtbl.AddressOfMember$VH;
    }
    public static MemoryAddress AddressOfMember$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.AddressOfMember$VH.get(seg);
    }
    public static void AddressOfMember$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfoVtbl.AddressOfMember$VH.set(seg, x);
    }
    public static MemoryAddress AddressOfMember$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.AddressOfMember$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddressOfMember$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfoVtbl.AddressOfMember$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddressOfMember AddressOfMember (MemorySegment segment, MemorySession session) {
        return AddressOfMember.ofAddress(AddressOfMember$get(segment), session);
    }
    static final FunctionDescriptor CreateInstance$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CreateInstance$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.CreateInstance$FUNC
    );
    public interface CreateInstance {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(CreateInstance fi, MemorySession session) {
            return RuntimeHelper.upcallStub(CreateInstance.class, fi, ITypeInfoVtbl.CreateInstance$FUNC, session);
        }
        static CreateInstance ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)ITypeInfoVtbl.CreateInstance$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CreateInstance$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CreateInstance"));
    public static VarHandle CreateInstance$VH() {
        return ITypeInfoVtbl.CreateInstance$VH;
    }
    public static MemoryAddress CreateInstance$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.CreateInstance$VH.get(seg);
    }
    public static void CreateInstance$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfoVtbl.CreateInstance$VH.set(seg, x);
    }
    public static MemoryAddress CreateInstance$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.CreateInstance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateInstance$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfoVtbl.CreateInstance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateInstance CreateInstance (MemorySegment segment, MemorySession session) {
        return CreateInstance.ofAddress(CreateInstance$get(segment), session);
    }
    static final FunctionDescriptor GetMops$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetMops$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.GetMops$FUNC
    );
    public interface GetMops {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(GetMops fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetMops.class, fi, ITypeInfoVtbl.GetMops$FUNC, session);
        }
        static GetMops ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)ITypeInfoVtbl.GetMops$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetMops$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetMops"));
    public static VarHandle GetMops$VH() {
        return ITypeInfoVtbl.GetMops$VH;
    }
    public static MemoryAddress GetMops$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.GetMops$VH.get(seg);
    }
    public static void GetMops$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfoVtbl.GetMops$VH.set(seg, x);
    }
    public static MemoryAddress GetMops$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.GetMops$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetMops$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfoVtbl.GetMops$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetMops GetMops (MemorySegment segment, MemorySession session) {
        return GetMops.ofAddress(GetMops$get(segment), session);
    }
    static final FunctionDescriptor GetContainingTypeLib$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetContainingTypeLib$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.GetContainingTypeLib$FUNC
    );
    public interface GetContainingTypeLib {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(GetContainingTypeLib fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetContainingTypeLib.class, fi, ITypeInfoVtbl.GetContainingTypeLib$FUNC, session);
        }
        static GetContainingTypeLib ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)ITypeInfoVtbl.GetContainingTypeLib$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetContainingTypeLib$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetContainingTypeLib"));
    public static VarHandle GetContainingTypeLib$VH() {
        return ITypeInfoVtbl.GetContainingTypeLib$VH;
    }
    public static MemoryAddress GetContainingTypeLib$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.GetContainingTypeLib$VH.get(seg);
    }
    public static void GetContainingTypeLib$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfoVtbl.GetContainingTypeLib$VH.set(seg, x);
    }
    public static MemoryAddress GetContainingTypeLib$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.GetContainingTypeLib$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetContainingTypeLib$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfoVtbl.GetContainingTypeLib$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetContainingTypeLib GetContainingTypeLib (MemorySegment segment, MemorySession session) {
        return GetContainingTypeLib.ofAddress(GetContainingTypeLib$get(segment), session);
    }
    static final FunctionDescriptor ReleaseTypeAttr$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ReleaseTypeAttr$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.ReleaseTypeAttr$FUNC
    );
    public interface ReleaseTypeAttr {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(ReleaseTypeAttr fi, MemorySession session) {
            return RuntimeHelper.upcallStub(ReleaseTypeAttr.class, fi, ITypeInfoVtbl.ReleaseTypeAttr$FUNC, session);
        }
        static ReleaseTypeAttr ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    ITypeInfoVtbl.ReleaseTypeAttr$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ReleaseTypeAttr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ReleaseTypeAttr"));
    public static VarHandle ReleaseTypeAttr$VH() {
        return ITypeInfoVtbl.ReleaseTypeAttr$VH;
    }
    public static MemoryAddress ReleaseTypeAttr$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.ReleaseTypeAttr$VH.get(seg);
    }
    public static void ReleaseTypeAttr$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfoVtbl.ReleaseTypeAttr$VH.set(seg, x);
    }
    public static MemoryAddress ReleaseTypeAttr$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.ReleaseTypeAttr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ReleaseTypeAttr$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfoVtbl.ReleaseTypeAttr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReleaseTypeAttr ReleaseTypeAttr (MemorySegment segment, MemorySession session) {
        return ReleaseTypeAttr.ofAddress(ReleaseTypeAttr$get(segment), session);
    }
    static final FunctionDescriptor ReleaseFuncDesc$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ReleaseFuncDesc$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.ReleaseFuncDesc$FUNC
    );
    public interface ReleaseFuncDesc {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(ReleaseFuncDesc fi, MemorySession session) {
            return RuntimeHelper.upcallStub(ReleaseFuncDesc.class, fi, ITypeInfoVtbl.ReleaseFuncDesc$FUNC, session);
        }
        static ReleaseFuncDesc ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    ITypeInfoVtbl.ReleaseFuncDesc$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ReleaseFuncDesc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ReleaseFuncDesc"));
    public static VarHandle ReleaseFuncDesc$VH() {
        return ITypeInfoVtbl.ReleaseFuncDesc$VH;
    }
    public static MemoryAddress ReleaseFuncDesc$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.ReleaseFuncDesc$VH.get(seg);
    }
    public static void ReleaseFuncDesc$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfoVtbl.ReleaseFuncDesc$VH.set(seg, x);
    }
    public static MemoryAddress ReleaseFuncDesc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.ReleaseFuncDesc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ReleaseFuncDesc$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfoVtbl.ReleaseFuncDesc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReleaseFuncDesc ReleaseFuncDesc (MemorySegment segment, MemorySession session) {
        return ReleaseFuncDesc.ofAddress(ReleaseFuncDesc$get(segment), session);
    }
    static final FunctionDescriptor ReleaseVarDesc$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ReleaseVarDesc$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.ReleaseVarDesc$FUNC
    );
    public interface ReleaseVarDesc {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(ReleaseVarDesc fi, MemorySession session) {
            return RuntimeHelper.upcallStub(ReleaseVarDesc.class, fi, ITypeInfoVtbl.ReleaseVarDesc$FUNC, session);
        }
        static ReleaseVarDesc ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    ITypeInfoVtbl.ReleaseVarDesc$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ReleaseVarDesc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ReleaseVarDesc"));
    public static VarHandle ReleaseVarDesc$VH() {
        return ITypeInfoVtbl.ReleaseVarDesc$VH;
    }
    public static MemoryAddress ReleaseVarDesc$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.ReleaseVarDesc$VH.get(seg);
    }
    public static void ReleaseVarDesc$set( MemorySegment seg, MemoryAddress x) {
        ITypeInfoVtbl.ReleaseVarDesc$VH.set(seg, x);
    }
    public static MemoryAddress ReleaseVarDesc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeInfoVtbl.ReleaseVarDesc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ReleaseVarDesc$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeInfoVtbl.ReleaseVarDesc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReleaseVarDesc ReleaseVarDesc (MemorySegment segment, MemorySession session) {
        return ReleaseVarDesc.ofAddress(ReleaseVarDesc$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


