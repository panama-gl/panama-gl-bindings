// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _NOTIFYICONDATAA {
 *     DWORD cbSize;
 *     HWND hWnd;
 *     UINT uID;
 *     UINT uFlags;
 *     UINT uCallbackMessage;
 *     HICON hIcon;
 *     CHAR szTip[128];
 *     DWORD dwState;
 *     DWORD dwStateMask;
 *     CHAR szInfo[256];
 *     union {
 *         UINT uTimeout;
 *         UINT uVersion;
 *     };
 *     CHAR szInfoTitle[64];
 *     DWORD dwInfoFlags;
 *     GUID guidItem;
 *     HICON hBalloonIcon;
 * }
 * }
 */
public class _NOTIFYICONDATAA {

    _NOTIFYICONDATAA() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("cbSize"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_POINTER.withName("hWnd"),
        wgl_h.C_INT.withName("uID"),
        wgl_h.C_INT.withName("uFlags"),
        wgl_h.C_INT.withName("uCallbackMessage"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_POINTER.withName("hIcon"),
        MemoryLayout.sequenceLayout(128, wgl_h.C_CHAR).withName("szTip"),
        wgl_h.C_LONG.withName("dwState"),
        wgl_h.C_LONG.withName("dwStateMask"),
        MemoryLayout.sequenceLayout(256, wgl_h.C_CHAR).withName("szInfo"),
        MemoryLayout.unionLayout(
            wgl_h.C_INT.withName("uTimeout"),
            wgl_h.C_INT.withName("uVersion")
        ).withName("$anon$1026:5"),
        MemoryLayout.sequenceLayout(64, wgl_h.C_CHAR).withName("szInfoTitle"),
        wgl_h.C_LONG.withName("dwInfoFlags"),
        _GUID.layout().withName("guidItem"),
        wgl_h.C_POINTER.withName("hBalloonIcon")
    ).withName("_NOTIFYICONDATAA");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt cbSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static final OfInt cbSize$layout() {
        return cbSize$LAYOUT;
    }

    private static final long cbSize$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static final long cbSize$offset() {
        return cbSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static int cbSize(MemorySegment struct) {
        return struct.get(cbSize$LAYOUT, cbSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static void cbSize(MemorySegment struct, int fieldValue) {
        struct.set(cbSize$LAYOUT, cbSize$OFFSET, fieldValue);
    }

    private static final AddressLayout hWnd$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hWnd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HWND hWnd
     * }
     */
    public static final AddressLayout hWnd$layout() {
        return hWnd$LAYOUT;
    }

    private static final long hWnd$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HWND hWnd
     * }
     */
    public static final long hWnd$offset() {
        return hWnd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HWND hWnd
     * }
     */
    public static MemorySegment hWnd(MemorySegment struct) {
        return struct.get(hWnd$LAYOUT, hWnd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HWND hWnd
     * }
     */
    public static void hWnd(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hWnd$LAYOUT, hWnd$OFFSET, fieldValue);
    }

    private static final OfInt uID$LAYOUT = (OfInt)$LAYOUT.select(groupElement("uID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UINT uID
     * }
     */
    public static final OfInt uID$layout() {
        return uID$LAYOUT;
    }

    private static final long uID$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UINT uID
     * }
     */
    public static final long uID$offset() {
        return uID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UINT uID
     * }
     */
    public static int uID(MemorySegment struct) {
        return struct.get(uID$LAYOUT, uID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UINT uID
     * }
     */
    public static void uID(MemorySegment struct, int fieldValue) {
        struct.set(uID$LAYOUT, uID$OFFSET, fieldValue);
    }

    private static final OfInt uFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("uFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UINT uFlags
     * }
     */
    public static final OfInt uFlags$layout() {
        return uFlags$LAYOUT;
    }

    private static final long uFlags$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UINT uFlags
     * }
     */
    public static final long uFlags$offset() {
        return uFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UINT uFlags
     * }
     */
    public static int uFlags(MemorySegment struct) {
        return struct.get(uFlags$LAYOUT, uFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UINT uFlags
     * }
     */
    public static void uFlags(MemorySegment struct, int fieldValue) {
        struct.set(uFlags$LAYOUT, uFlags$OFFSET, fieldValue);
    }

    private static final OfInt uCallbackMessage$LAYOUT = (OfInt)$LAYOUT.select(groupElement("uCallbackMessage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UINT uCallbackMessage
     * }
     */
    public static final OfInt uCallbackMessage$layout() {
        return uCallbackMessage$LAYOUT;
    }

    private static final long uCallbackMessage$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UINT uCallbackMessage
     * }
     */
    public static final long uCallbackMessage$offset() {
        return uCallbackMessage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UINT uCallbackMessage
     * }
     */
    public static int uCallbackMessage(MemorySegment struct) {
        return struct.get(uCallbackMessage$LAYOUT, uCallbackMessage$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UINT uCallbackMessage
     * }
     */
    public static void uCallbackMessage(MemorySegment struct, int fieldValue) {
        struct.set(uCallbackMessage$LAYOUT, uCallbackMessage$OFFSET, fieldValue);
    }

    private static final AddressLayout hIcon$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hIcon"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HICON hIcon
     * }
     */
    public static final AddressLayout hIcon$layout() {
        return hIcon$LAYOUT;
    }

    private static final long hIcon$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HICON hIcon
     * }
     */
    public static final long hIcon$offset() {
        return hIcon$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HICON hIcon
     * }
     */
    public static MemorySegment hIcon(MemorySegment struct) {
        return struct.get(hIcon$LAYOUT, hIcon$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HICON hIcon
     * }
     */
    public static void hIcon(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hIcon$LAYOUT, hIcon$OFFSET, fieldValue);
    }

    private static final SequenceLayout szTip$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("szTip"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CHAR szTip[128]
     * }
     */
    public static final SequenceLayout szTip$layout() {
        return szTip$LAYOUT;
    }

    private static final long szTip$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CHAR szTip[128]
     * }
     */
    public static final long szTip$offset() {
        return szTip$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CHAR szTip[128]
     * }
     */
    public static MemorySegment szTip(MemorySegment struct) {
        return struct.asSlice(szTip$OFFSET, szTip$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CHAR szTip[128]
     * }
     */
    public static void szTip(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, szTip$OFFSET, szTip$LAYOUT.byteSize());
    }

    private static long[] szTip$DIMS = { 128 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * CHAR szTip[128]
     * }
     */
    public static long[] szTip$dimensions() {
        return szTip$DIMS;
    }
    private static final VarHandle szTip$ELEM_HANDLE = szTip$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * CHAR szTip[128]
     * }
     */
    public static byte szTip(MemorySegment struct, long index0) {
        return (byte)szTip$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * CHAR szTip[128]
     * }
     */
    public static void szTip(MemorySegment struct, long index0, byte fieldValue) {
        szTip$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt dwState$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwState"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwState
     * }
     */
    public static final OfInt dwState$layout() {
        return dwState$LAYOUT;
    }

    private static final long dwState$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwState
     * }
     */
    public static final long dwState$offset() {
        return dwState$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwState
     * }
     */
    public static int dwState(MemorySegment struct) {
        return struct.get(dwState$LAYOUT, dwState$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwState
     * }
     */
    public static void dwState(MemorySegment struct, int fieldValue) {
        struct.set(dwState$LAYOUT, dwState$OFFSET, fieldValue);
    }

    private static final OfInt dwStateMask$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwStateMask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwStateMask
     * }
     */
    public static final OfInt dwStateMask$layout() {
        return dwStateMask$LAYOUT;
    }

    private static final long dwStateMask$OFFSET = 172;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwStateMask
     * }
     */
    public static final long dwStateMask$offset() {
        return dwStateMask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwStateMask
     * }
     */
    public static int dwStateMask(MemorySegment struct) {
        return struct.get(dwStateMask$LAYOUT, dwStateMask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwStateMask
     * }
     */
    public static void dwStateMask(MemorySegment struct, int fieldValue) {
        struct.set(dwStateMask$LAYOUT, dwStateMask$OFFSET, fieldValue);
    }

    private static final SequenceLayout szInfo$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("szInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CHAR szInfo[256]
     * }
     */
    public static final SequenceLayout szInfo$layout() {
        return szInfo$LAYOUT;
    }

    private static final long szInfo$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CHAR szInfo[256]
     * }
     */
    public static final long szInfo$offset() {
        return szInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CHAR szInfo[256]
     * }
     */
    public static MemorySegment szInfo(MemorySegment struct) {
        return struct.asSlice(szInfo$OFFSET, szInfo$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CHAR szInfo[256]
     * }
     */
    public static void szInfo(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, szInfo$OFFSET, szInfo$LAYOUT.byteSize());
    }

    private static long[] szInfo$DIMS = { 256 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * CHAR szInfo[256]
     * }
     */
    public static long[] szInfo$dimensions() {
        return szInfo$DIMS;
    }
    private static final VarHandle szInfo$ELEM_HANDLE = szInfo$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * CHAR szInfo[256]
     * }
     */
    public static byte szInfo(MemorySegment struct, long index0) {
        return (byte)szInfo$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * CHAR szInfo[256]
     * }
     */
    public static void szInfo(MemorySegment struct, long index0, byte fieldValue) {
        szInfo$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt uTimeout$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$1026:5"), groupElement("uTimeout"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UINT uTimeout
     * }
     */
    public static final OfInt uTimeout$layout() {
        return uTimeout$LAYOUT;
    }

    private static final long uTimeout$OFFSET = 432;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UINT uTimeout
     * }
     */
    public static final long uTimeout$offset() {
        return uTimeout$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UINT uTimeout
     * }
     */
    public static int uTimeout(MemorySegment struct) {
        return struct.get(uTimeout$LAYOUT, uTimeout$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UINT uTimeout
     * }
     */
    public static void uTimeout(MemorySegment struct, int fieldValue) {
        struct.set(uTimeout$LAYOUT, uTimeout$OFFSET, fieldValue);
    }

    private static final OfInt uVersion$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$1026:5"), groupElement("uVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UINT uVersion
     * }
     */
    public static final OfInt uVersion$layout() {
        return uVersion$LAYOUT;
    }

    private static final long uVersion$OFFSET = 432;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UINT uVersion
     * }
     */
    public static final long uVersion$offset() {
        return uVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UINT uVersion
     * }
     */
    public static int uVersion(MemorySegment struct) {
        return struct.get(uVersion$LAYOUT, uVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UINT uVersion
     * }
     */
    public static void uVersion(MemorySegment struct, int fieldValue) {
        struct.set(uVersion$LAYOUT, uVersion$OFFSET, fieldValue);
    }

    private static final SequenceLayout szInfoTitle$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("szInfoTitle"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CHAR szInfoTitle[64]
     * }
     */
    public static final SequenceLayout szInfoTitle$layout() {
        return szInfoTitle$LAYOUT;
    }

    private static final long szInfoTitle$OFFSET = 436;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CHAR szInfoTitle[64]
     * }
     */
    public static final long szInfoTitle$offset() {
        return szInfoTitle$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CHAR szInfoTitle[64]
     * }
     */
    public static MemorySegment szInfoTitle(MemorySegment struct) {
        return struct.asSlice(szInfoTitle$OFFSET, szInfoTitle$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CHAR szInfoTitle[64]
     * }
     */
    public static void szInfoTitle(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, szInfoTitle$OFFSET, szInfoTitle$LAYOUT.byteSize());
    }

    private static long[] szInfoTitle$DIMS = { 64 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * CHAR szInfoTitle[64]
     * }
     */
    public static long[] szInfoTitle$dimensions() {
        return szInfoTitle$DIMS;
    }
    private static final VarHandle szInfoTitle$ELEM_HANDLE = szInfoTitle$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * CHAR szInfoTitle[64]
     * }
     */
    public static byte szInfoTitle(MemorySegment struct, long index0) {
        return (byte)szInfoTitle$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * CHAR szInfoTitle[64]
     * }
     */
    public static void szInfoTitle(MemorySegment struct, long index0, byte fieldValue) {
        szInfoTitle$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt dwInfoFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwInfoFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwInfoFlags
     * }
     */
    public static final OfInt dwInfoFlags$layout() {
        return dwInfoFlags$LAYOUT;
    }

    private static final long dwInfoFlags$OFFSET = 500;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwInfoFlags
     * }
     */
    public static final long dwInfoFlags$offset() {
        return dwInfoFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwInfoFlags
     * }
     */
    public static int dwInfoFlags(MemorySegment struct) {
        return struct.get(dwInfoFlags$LAYOUT, dwInfoFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwInfoFlags
     * }
     */
    public static void dwInfoFlags(MemorySegment struct, int fieldValue) {
        struct.set(dwInfoFlags$LAYOUT, dwInfoFlags$OFFSET, fieldValue);
    }

    private static final GroupLayout guidItem$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("guidItem"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GUID guidItem
     * }
     */
    public static final GroupLayout guidItem$layout() {
        return guidItem$LAYOUT;
    }

    private static final long guidItem$OFFSET = 504;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GUID guidItem
     * }
     */
    public static final long guidItem$offset() {
        return guidItem$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GUID guidItem
     * }
     */
    public static MemorySegment guidItem(MemorySegment struct) {
        return struct.asSlice(guidItem$OFFSET, guidItem$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GUID guidItem
     * }
     */
    public static void guidItem(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, guidItem$OFFSET, guidItem$LAYOUT.byteSize());
    }

    private static final AddressLayout hBalloonIcon$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hBalloonIcon"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HICON hBalloonIcon
     * }
     */
    public static final AddressLayout hBalloonIcon$layout() {
        return hBalloonIcon$LAYOUT;
    }

    private static final long hBalloonIcon$OFFSET = 520;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HICON hBalloonIcon
     * }
     */
    public static final long hBalloonIcon$offset() {
        return hBalloonIcon$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HICON hBalloonIcon
     * }
     */
    public static MemorySegment hBalloonIcon(MemorySegment struct) {
        return struct.get(hBalloonIcon$LAYOUT, hBalloonIcon$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HICON hBalloonIcon
     * }
     */
    public static void hBalloonIcon(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hBalloonIcon$LAYOUT, hBalloonIcon$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

