// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tagBIND_OPTS2 {
 *     DWORD cbStruct;
 *     DWORD grfFlags;
 *     DWORD grfMode;
 *     DWORD dwTickCountDeadline;
 *     DWORD dwTrackFlags;
 *     DWORD dwClassContext;
 *     LCID locale;
 *     COSERVERINFO *pServerInfo;
 * }
 * }
 */
public class tagBIND_OPTS2 {

    tagBIND_OPTS2() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("cbStruct"),
        wgl_h.C_LONG.withName("grfFlags"),
        wgl_h.C_LONG.withName("grfMode"),
        wgl_h.C_LONG.withName("dwTickCountDeadline"),
        wgl_h.C_LONG.withName("dwTrackFlags"),
        wgl_h.C_LONG.withName("dwClassContext"),
        wgl_h.C_LONG.withName("locale"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_POINTER.withName("pServerInfo")
    ).withName("tagBIND_OPTS2");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt cbStruct$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbStruct"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD cbStruct
     * }
     */
    public static final OfInt cbStruct$layout() {
        return cbStruct$LAYOUT;
    }

    private static final long cbStruct$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD cbStruct
     * }
     */
    public static final long cbStruct$offset() {
        return cbStruct$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD cbStruct
     * }
     */
    public static int cbStruct(MemorySegment struct) {
        return struct.get(cbStruct$LAYOUT, cbStruct$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD cbStruct
     * }
     */
    public static void cbStruct(MemorySegment struct, int fieldValue) {
        struct.set(cbStruct$LAYOUT, cbStruct$OFFSET, fieldValue);
    }

    private static final OfInt grfFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("grfFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD grfFlags
     * }
     */
    public static final OfInt grfFlags$layout() {
        return grfFlags$LAYOUT;
    }

    private static final long grfFlags$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD grfFlags
     * }
     */
    public static final long grfFlags$offset() {
        return grfFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD grfFlags
     * }
     */
    public static int grfFlags(MemorySegment struct) {
        return struct.get(grfFlags$LAYOUT, grfFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD grfFlags
     * }
     */
    public static void grfFlags(MemorySegment struct, int fieldValue) {
        struct.set(grfFlags$LAYOUT, grfFlags$OFFSET, fieldValue);
    }

    private static final OfInt grfMode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("grfMode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD grfMode
     * }
     */
    public static final OfInt grfMode$layout() {
        return grfMode$LAYOUT;
    }

    private static final long grfMode$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD grfMode
     * }
     */
    public static final long grfMode$offset() {
        return grfMode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD grfMode
     * }
     */
    public static int grfMode(MemorySegment struct) {
        return struct.get(grfMode$LAYOUT, grfMode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD grfMode
     * }
     */
    public static void grfMode(MemorySegment struct, int fieldValue) {
        struct.set(grfMode$LAYOUT, grfMode$OFFSET, fieldValue);
    }

    private static final OfInt dwTickCountDeadline$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwTickCountDeadline"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwTickCountDeadline
     * }
     */
    public static final OfInt dwTickCountDeadline$layout() {
        return dwTickCountDeadline$LAYOUT;
    }

    private static final long dwTickCountDeadline$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwTickCountDeadline
     * }
     */
    public static final long dwTickCountDeadline$offset() {
        return dwTickCountDeadline$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwTickCountDeadline
     * }
     */
    public static int dwTickCountDeadline(MemorySegment struct) {
        return struct.get(dwTickCountDeadline$LAYOUT, dwTickCountDeadline$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwTickCountDeadline
     * }
     */
    public static void dwTickCountDeadline(MemorySegment struct, int fieldValue) {
        struct.set(dwTickCountDeadline$LAYOUT, dwTickCountDeadline$OFFSET, fieldValue);
    }

    private static final OfInt dwTrackFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwTrackFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwTrackFlags
     * }
     */
    public static final OfInt dwTrackFlags$layout() {
        return dwTrackFlags$LAYOUT;
    }

    private static final long dwTrackFlags$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwTrackFlags
     * }
     */
    public static final long dwTrackFlags$offset() {
        return dwTrackFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwTrackFlags
     * }
     */
    public static int dwTrackFlags(MemorySegment struct) {
        return struct.get(dwTrackFlags$LAYOUT, dwTrackFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwTrackFlags
     * }
     */
    public static void dwTrackFlags(MemorySegment struct, int fieldValue) {
        struct.set(dwTrackFlags$LAYOUT, dwTrackFlags$OFFSET, fieldValue);
    }

    private static final OfInt dwClassContext$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwClassContext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwClassContext
     * }
     */
    public static final OfInt dwClassContext$layout() {
        return dwClassContext$LAYOUT;
    }

    private static final long dwClassContext$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwClassContext
     * }
     */
    public static final long dwClassContext$offset() {
        return dwClassContext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwClassContext
     * }
     */
    public static int dwClassContext(MemorySegment struct) {
        return struct.get(dwClassContext$LAYOUT, dwClassContext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwClassContext
     * }
     */
    public static void dwClassContext(MemorySegment struct, int fieldValue) {
        struct.set(dwClassContext$LAYOUT, dwClassContext$OFFSET, fieldValue);
    }

    private static final OfInt locale$LAYOUT = (OfInt)$LAYOUT.select(groupElement("locale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LCID locale
     * }
     */
    public static final OfInt locale$layout() {
        return locale$LAYOUT;
    }

    private static final long locale$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LCID locale
     * }
     */
    public static final long locale$offset() {
        return locale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LCID locale
     * }
     */
    public static int locale(MemorySegment struct) {
        return struct.get(locale$LAYOUT, locale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LCID locale
     * }
     */
    public static void locale(MemorySegment struct, int fieldValue) {
        struct.set(locale$LAYOUT, locale$OFFSET, fieldValue);
    }

    private static final AddressLayout pServerInfo$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pServerInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * COSERVERINFO *pServerInfo
     * }
     */
    public static final AddressLayout pServerInfo$layout() {
        return pServerInfo$LAYOUT;
    }

    private static final long pServerInfo$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * COSERVERINFO *pServerInfo
     * }
     */
    public static final long pServerInfo$offset() {
        return pServerInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * COSERVERINFO *pServerInfo
     * }
     */
    public static MemorySegment pServerInfo(MemorySegment struct) {
        return struct.get(pServerInfo$LAYOUT, pServerInfo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * COSERVERINFO *pServerInfo
     * }
     */
    public static void pServerInfo(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pServerInfo$LAYOUT, pServerInfo$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

