// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tagRPC_EE_INFO_PARAM {
 *     ExtendedErrorParamTypes ParameterType;
 *     union {
 *         LPSTR AnsiString;
 *         LPWSTR UnicodeString;
 *         long LVal;
 *         short SVal;
 *         ULONGLONG PVal;
 *         BinaryParam BVal;
 *     } u;
 * }
 * }
 */
public class tagRPC_EE_INFO_PARAM {

    tagRPC_EE_INFO_PARAM() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_INT.withName("ParameterType"),
        MemoryLayout.paddingLayout(4),
        tagRPC_EE_INFO_PARAM.u.layout().withName("u")
    ).withName("tagRPC_EE_INFO_PARAM");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt ParameterType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ParameterType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ExtendedErrorParamTypes ParameterType
     * }
     */
    public static final OfInt ParameterType$layout() {
        return ParameterType$LAYOUT;
    }

    private static final long ParameterType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ExtendedErrorParamTypes ParameterType
     * }
     */
    public static final long ParameterType$offset() {
        return ParameterType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ExtendedErrorParamTypes ParameterType
     * }
     */
    public static int ParameterType(MemorySegment struct) {
        return struct.get(ParameterType$LAYOUT, ParameterType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ExtendedErrorParamTypes ParameterType
     * }
     */
    public static void ParameterType(MemorySegment struct, int fieldValue) {
        struct.set(ParameterType$LAYOUT, ParameterType$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * union {
     *     LPSTR AnsiString;
     *     LPWSTR UnicodeString;
     *     long LVal;
     *     short SVal;
     *     ULONGLONG PVal;
     *     BinaryParam BVal;
     * }
     * }
     */
    public static class u {

        u() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
            wgl_h.C_POINTER.withName("AnsiString"),
            wgl_h.C_POINTER.withName("UnicodeString"),
            wgl_h.C_LONG.withName("LVal"),
            wgl_h.C_SHORT.withName("SVal"),
            wgl_h.C_LONG_LONG.withName("PVal"),
            tagBinaryParam.layout().withName("BVal")
        ).withName("$anon$262:5");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final AddressLayout AnsiString$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("AnsiString"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * LPSTR AnsiString
         * }
         */
        public static final AddressLayout AnsiString$layout() {
            return AnsiString$LAYOUT;
        }

        private static final long AnsiString$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * LPSTR AnsiString
         * }
         */
        public static final long AnsiString$offset() {
            return AnsiString$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * LPSTR AnsiString
         * }
         */
        public static MemorySegment AnsiString(MemorySegment union) {
            return union.get(AnsiString$LAYOUT, AnsiString$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * LPSTR AnsiString
         * }
         */
        public static void AnsiString(MemorySegment union, MemorySegment fieldValue) {
            union.set(AnsiString$LAYOUT, AnsiString$OFFSET, fieldValue);
        }

        private static final AddressLayout UnicodeString$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("UnicodeString"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * LPWSTR UnicodeString
         * }
         */
        public static final AddressLayout UnicodeString$layout() {
            return UnicodeString$LAYOUT;
        }

        private static final long UnicodeString$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * LPWSTR UnicodeString
         * }
         */
        public static final long UnicodeString$offset() {
            return UnicodeString$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * LPWSTR UnicodeString
         * }
         */
        public static MemorySegment UnicodeString(MemorySegment union) {
            return union.get(UnicodeString$LAYOUT, UnicodeString$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * LPWSTR UnicodeString
         * }
         */
        public static void UnicodeString(MemorySegment union, MemorySegment fieldValue) {
            union.set(UnicodeString$LAYOUT, UnicodeString$OFFSET, fieldValue);
        }

        private static final OfInt LVal$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LVal"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * long LVal
         * }
         */
        public static final OfInt LVal$layout() {
            return LVal$LAYOUT;
        }

        private static final long LVal$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * long LVal
         * }
         */
        public static final long LVal$offset() {
            return LVal$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * long LVal
         * }
         */
        public static int LVal(MemorySegment union) {
            return union.get(LVal$LAYOUT, LVal$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * long LVal
         * }
         */
        public static void LVal(MemorySegment union, int fieldValue) {
            union.set(LVal$LAYOUT, LVal$OFFSET, fieldValue);
        }

        private static final OfShort SVal$LAYOUT = (OfShort)$LAYOUT.select(groupElement("SVal"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * short SVal
         * }
         */
        public static final OfShort SVal$layout() {
            return SVal$LAYOUT;
        }

        private static final long SVal$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * short SVal
         * }
         */
        public static final long SVal$offset() {
            return SVal$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * short SVal
         * }
         */
        public static short SVal(MemorySegment union) {
            return union.get(SVal$LAYOUT, SVal$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * short SVal
         * }
         */
        public static void SVal(MemorySegment union, short fieldValue) {
            union.set(SVal$LAYOUT, SVal$OFFSET, fieldValue);
        }

        private static final OfLong PVal$LAYOUT = (OfLong)$LAYOUT.select(groupElement("PVal"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * ULONGLONG PVal
         * }
         */
        public static final OfLong PVal$layout() {
            return PVal$LAYOUT;
        }

        private static final long PVal$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * ULONGLONG PVal
         * }
         */
        public static final long PVal$offset() {
            return PVal$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * ULONGLONG PVal
         * }
         */
        public static long PVal(MemorySegment union) {
            return union.get(PVal$LAYOUT, PVal$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * ULONGLONG PVal
         * }
         */
        public static void PVal(MemorySegment union, long fieldValue) {
            union.set(PVal$LAYOUT, PVal$OFFSET, fieldValue);
        }

        private static final GroupLayout BVal$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("BVal"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * BinaryParam BVal
         * }
         */
        public static final GroupLayout BVal$layout() {
            return BVal$LAYOUT;
        }

        private static final long BVal$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * BinaryParam BVal
         * }
         */
        public static final long BVal$offset() {
            return BVal$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * BinaryParam BVal
         * }
         */
        public static MemorySegment BVal(MemorySegment union) {
            return union.asSlice(BVal$OFFSET, BVal$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * BinaryParam BVal
         * }
         */
        public static void BVal(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, BVal$OFFSET, BVal$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout u$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("u"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union {
     *     LPSTR AnsiString;
     *     LPWSTR UnicodeString;
     *     long LVal;
     *     short SVal;
     *     ULONGLONG PVal;
     *     BinaryParam BVal;
     * } u
     * }
     */
    public static final GroupLayout u$layout() {
        return u$LAYOUT;
    }

    private static final long u$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union {
     *     LPSTR AnsiString;
     *     LPWSTR UnicodeString;
     *     long LVal;
     *     short SVal;
     *     ULONGLONG PVal;
     *     BinaryParam BVal;
     * } u
     * }
     */
    public static final long u$offset() {
        return u$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union {
     *     LPSTR AnsiString;
     *     LPWSTR UnicodeString;
     *     long LVal;
     *     short SVal;
     *     ULONGLONG PVal;
     *     BinaryParam BVal;
     * } u
     * }
     */
    public static MemorySegment u(MemorySegment struct) {
        return struct.asSlice(u$OFFSET, u$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union {
     *     LPSTR AnsiString;
     *     LPWSTR UnicodeString;
     *     long LVal;
     *     short SVal;
     *     ULONGLONG PVal;
     *     BinaryParam BVal;
     * } u
     * }
     */
    public static void u(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, u$OFFSET, u$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

