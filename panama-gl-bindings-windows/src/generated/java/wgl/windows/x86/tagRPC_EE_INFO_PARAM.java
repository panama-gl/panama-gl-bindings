// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class tagRPC_EE_INFO_PARAM {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("ParameterType"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.unionLayout(
            Constants$root.C_POINTER$LAYOUT.withName("AnsiString"),
            Constants$root.C_POINTER$LAYOUT.withName("UnicodeString"),
            Constants$root.C_LONG$LAYOUT.withName("LVal"),
            Constants$root.C_SHORT$LAYOUT.withName("SVal"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("PVal"),
            MemoryLayout.structLayout(
                Constants$root.C_POINTER$LAYOUT.withName("Buffer"),
                Constants$root.C_SHORT$LAYOUT.withName("Size"),
                MemoryLayout.paddingLayout(48)
            ).withName("BVal")
        ).withName("u")
    ).withName("tagRPC_EE_INFO_PARAM");
    public static MemoryLayout $LAYOUT() {
        return tagRPC_EE_INFO_PARAM.$struct$LAYOUT;
    }
    static final VarHandle ParameterType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ParameterType"));
    public static VarHandle ParameterType$VH() {
        return tagRPC_EE_INFO_PARAM.ParameterType$VH;
    }
    public static int ParameterType$get(MemorySegment seg) {
        return (int)tagRPC_EE_INFO_PARAM.ParameterType$VH.get(seg);
    }
    public static void ParameterType$set( MemorySegment seg, int x) {
        tagRPC_EE_INFO_PARAM.ParameterType$VH.set(seg, x);
    }
    public static int ParameterType$get(MemorySegment seg, long index) {
        return (int)tagRPC_EE_INFO_PARAM.ParameterType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ParameterType$set(MemorySegment seg, long index, int x) {
        tagRPC_EE_INFO_PARAM.ParameterType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static class u {

        static final  GroupLayout u$union$LAYOUT = MemoryLayout.unionLayout(
            Constants$root.C_POINTER$LAYOUT.withName("AnsiString"),
            Constants$root.C_POINTER$LAYOUT.withName("UnicodeString"),
            Constants$root.C_LONG$LAYOUT.withName("LVal"),
            Constants$root.C_SHORT$LAYOUT.withName("SVal"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("PVal"),
            MemoryLayout.structLayout(
                Constants$root.C_POINTER$LAYOUT.withName("Buffer"),
                Constants$root.C_SHORT$LAYOUT.withName("Size"),
                MemoryLayout.paddingLayout(48)
            ).withName("BVal")
        );
        public static MemoryLayout $LAYOUT() {
            return u.u$union$LAYOUT;
        }
        static final VarHandle AnsiString$VH = u$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AnsiString"));
        public static VarHandle AnsiString$VH() {
            return u.AnsiString$VH;
        }
        public static MemoryAddress AnsiString$get(MemorySegment seg) {
            return (java.lang.foreign.MemoryAddress)u.AnsiString$VH.get(seg);
        }
        public static void AnsiString$set( MemorySegment seg, MemoryAddress x) {
            u.AnsiString$VH.set(seg, x);
        }
        public static MemoryAddress AnsiString$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemoryAddress)u.AnsiString$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void AnsiString$set(MemorySegment seg, long index, MemoryAddress x) {
            u.AnsiString$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle UnicodeString$VH = u$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("UnicodeString"));
        public static VarHandle UnicodeString$VH() {
            return u.UnicodeString$VH;
        }
        public static MemoryAddress UnicodeString$get(MemorySegment seg) {
            return (java.lang.foreign.MemoryAddress)u.UnicodeString$VH.get(seg);
        }
        public static void UnicodeString$set( MemorySegment seg, MemoryAddress x) {
            u.UnicodeString$VH.set(seg, x);
        }
        public static MemoryAddress UnicodeString$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemoryAddress)u.UnicodeString$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void UnicodeString$set(MemorySegment seg, long index, MemoryAddress x) {
            u.UnicodeString$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle LVal$VH = u$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LVal"));
        public static VarHandle LVal$VH() {
            return u.LVal$VH;
        }
        public static int LVal$get(MemorySegment seg) {
            return (int)u.LVal$VH.get(seg);
        }
        public static void LVal$set( MemorySegment seg, int x) {
            u.LVal$VH.set(seg, x);
        }
        public static int LVal$get(MemorySegment seg, long index) {
            return (int)u.LVal$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void LVal$set(MemorySegment seg, long index, int x) {
            u.LVal$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle SVal$VH = u$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SVal"));
        public static VarHandle SVal$VH() {
            return u.SVal$VH;
        }
        public static short SVal$get(MemorySegment seg) {
            return (short)u.SVal$VH.get(seg);
        }
        public static void SVal$set( MemorySegment seg, short x) {
            u.SVal$VH.set(seg, x);
        }
        public static short SVal$get(MemorySegment seg, long index) {
            return (short)u.SVal$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void SVal$set(MemorySegment seg, long index, short x) {
            u.SVal$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle PVal$VH = u$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PVal"));
        public static VarHandle PVal$VH() {
            return u.PVal$VH;
        }
        public static long PVal$get(MemorySegment seg) {
            return (long)u.PVal$VH.get(seg);
        }
        public static void PVal$set( MemorySegment seg, long x) {
            u.PVal$VH.set(seg, x);
        }
        public static long PVal$get(MemorySegment seg, long index) {
            return (long)u.PVal$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void PVal$set(MemorySegment seg, long index, long x) {
            u.PVal$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment BVal$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
    }

    public static MemorySegment u$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


