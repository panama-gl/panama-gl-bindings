// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _STORAGE_PHYSICAL_NODE_DATA {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("NodeId"),
        Constants$root.C_LONG$LAYOUT.withName("AdapterCount"),
        Constants$root.C_LONG$LAYOUT.withName("AdapterDataLength"),
        Constants$root.C_LONG$LAYOUT.withName("AdapterDataOffset"),
        Constants$root.C_LONG$LAYOUT.withName("DeviceCount"),
        Constants$root.C_LONG$LAYOUT.withName("DeviceDataLength"),
        Constants$root.C_LONG$LAYOUT.withName("DeviceDataOffset"),
        MemoryLayout.sequenceLayout(3, Constants$root.C_LONG$LAYOUT).withName("Reserved")
    ).withName("_STORAGE_PHYSICAL_NODE_DATA");
    public static MemoryLayout $LAYOUT() {
        return _STORAGE_PHYSICAL_NODE_DATA.$struct$LAYOUT;
    }
    static final VarHandle NodeId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NodeId"));
    public static VarHandle NodeId$VH() {
        return _STORAGE_PHYSICAL_NODE_DATA.NodeId$VH;
    }
    public static int NodeId$get(MemorySegment seg) {
        return (int)_STORAGE_PHYSICAL_NODE_DATA.NodeId$VH.get(seg);
    }
    public static void NodeId$set( MemorySegment seg, int x) {
        _STORAGE_PHYSICAL_NODE_DATA.NodeId$VH.set(seg, x);
    }
    public static int NodeId$get(MemorySegment seg, long index) {
        return (int)_STORAGE_PHYSICAL_NODE_DATA.NodeId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NodeId$set(MemorySegment seg, long index, int x) {
        _STORAGE_PHYSICAL_NODE_DATA.NodeId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AdapterCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AdapterCount"));
    public static VarHandle AdapterCount$VH() {
        return _STORAGE_PHYSICAL_NODE_DATA.AdapterCount$VH;
    }
    public static int AdapterCount$get(MemorySegment seg) {
        return (int)_STORAGE_PHYSICAL_NODE_DATA.AdapterCount$VH.get(seg);
    }
    public static void AdapterCount$set( MemorySegment seg, int x) {
        _STORAGE_PHYSICAL_NODE_DATA.AdapterCount$VH.set(seg, x);
    }
    public static int AdapterCount$get(MemorySegment seg, long index) {
        return (int)_STORAGE_PHYSICAL_NODE_DATA.AdapterCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AdapterCount$set(MemorySegment seg, long index, int x) {
        _STORAGE_PHYSICAL_NODE_DATA.AdapterCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AdapterDataLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AdapterDataLength"));
    public static VarHandle AdapterDataLength$VH() {
        return _STORAGE_PHYSICAL_NODE_DATA.AdapterDataLength$VH;
    }
    public static int AdapterDataLength$get(MemorySegment seg) {
        return (int)_STORAGE_PHYSICAL_NODE_DATA.AdapterDataLength$VH.get(seg);
    }
    public static void AdapterDataLength$set( MemorySegment seg, int x) {
        _STORAGE_PHYSICAL_NODE_DATA.AdapterDataLength$VH.set(seg, x);
    }
    public static int AdapterDataLength$get(MemorySegment seg, long index) {
        return (int)_STORAGE_PHYSICAL_NODE_DATA.AdapterDataLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AdapterDataLength$set(MemorySegment seg, long index, int x) {
        _STORAGE_PHYSICAL_NODE_DATA.AdapterDataLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AdapterDataOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AdapterDataOffset"));
    public static VarHandle AdapterDataOffset$VH() {
        return _STORAGE_PHYSICAL_NODE_DATA.AdapterDataOffset$VH;
    }
    public static int AdapterDataOffset$get(MemorySegment seg) {
        return (int)_STORAGE_PHYSICAL_NODE_DATA.AdapterDataOffset$VH.get(seg);
    }
    public static void AdapterDataOffset$set( MemorySegment seg, int x) {
        _STORAGE_PHYSICAL_NODE_DATA.AdapterDataOffset$VH.set(seg, x);
    }
    public static int AdapterDataOffset$get(MemorySegment seg, long index) {
        return (int)_STORAGE_PHYSICAL_NODE_DATA.AdapterDataOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AdapterDataOffset$set(MemorySegment seg, long index, int x) {
        _STORAGE_PHYSICAL_NODE_DATA.AdapterDataOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DeviceCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DeviceCount"));
    public static VarHandle DeviceCount$VH() {
        return _STORAGE_PHYSICAL_NODE_DATA.DeviceCount$VH;
    }
    public static int DeviceCount$get(MemorySegment seg) {
        return (int)_STORAGE_PHYSICAL_NODE_DATA.DeviceCount$VH.get(seg);
    }
    public static void DeviceCount$set( MemorySegment seg, int x) {
        _STORAGE_PHYSICAL_NODE_DATA.DeviceCount$VH.set(seg, x);
    }
    public static int DeviceCount$get(MemorySegment seg, long index) {
        return (int)_STORAGE_PHYSICAL_NODE_DATA.DeviceCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DeviceCount$set(MemorySegment seg, long index, int x) {
        _STORAGE_PHYSICAL_NODE_DATA.DeviceCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DeviceDataLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DeviceDataLength"));
    public static VarHandle DeviceDataLength$VH() {
        return _STORAGE_PHYSICAL_NODE_DATA.DeviceDataLength$VH;
    }
    public static int DeviceDataLength$get(MemorySegment seg) {
        return (int)_STORAGE_PHYSICAL_NODE_DATA.DeviceDataLength$VH.get(seg);
    }
    public static void DeviceDataLength$set( MemorySegment seg, int x) {
        _STORAGE_PHYSICAL_NODE_DATA.DeviceDataLength$VH.set(seg, x);
    }
    public static int DeviceDataLength$get(MemorySegment seg, long index) {
        return (int)_STORAGE_PHYSICAL_NODE_DATA.DeviceDataLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DeviceDataLength$set(MemorySegment seg, long index, int x) {
        _STORAGE_PHYSICAL_NODE_DATA.DeviceDataLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DeviceDataOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DeviceDataOffset"));
    public static VarHandle DeviceDataOffset$VH() {
        return _STORAGE_PHYSICAL_NODE_DATA.DeviceDataOffset$VH;
    }
    public static int DeviceDataOffset$get(MemorySegment seg) {
        return (int)_STORAGE_PHYSICAL_NODE_DATA.DeviceDataOffset$VH.get(seg);
    }
    public static void DeviceDataOffset$set( MemorySegment seg, int x) {
        _STORAGE_PHYSICAL_NODE_DATA.DeviceDataOffset$VH.set(seg, x);
    }
    public static int DeviceDataOffset$get(MemorySegment seg, long index) {
        return (int)_STORAGE_PHYSICAL_NODE_DATA.DeviceDataOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DeviceDataOffset$set(MemorySegment seg, long index, int x) {
        _STORAGE_PHYSICAL_NODE_DATA.DeviceDataOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Reserved$slice(MemorySegment seg) {
        return seg.asSlice(28, 12);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


