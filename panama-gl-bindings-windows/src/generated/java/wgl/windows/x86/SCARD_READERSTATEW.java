// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     LPCWSTR szReader;
 *     LPVOID pvUserData;
 *     DWORD dwCurrentState;
 *     DWORD dwEventState;
 *     DWORD cbAtr;
 *     BYTE rgbAtr[36];
 * }
 * }
 */
public class SCARD_READERSTATEW {

    SCARD_READERSTATEW() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("szReader"),
        wgl_h.C_POINTER.withName("pvUserData"),
        wgl_h.C_LONG.withName("dwCurrentState"),
        wgl_h.C_LONG.withName("dwEventState"),
        wgl_h.C_LONG.withName("cbAtr"),
        MemoryLayout.sequenceLayout(36, wgl_h.C_CHAR).withName("rgbAtr")
    ).withName("$anon$512:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout szReader$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("szReader"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPCWSTR szReader
     * }
     */
    public static final AddressLayout szReader$layout() {
        return szReader$LAYOUT;
    }

    private static final long szReader$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPCWSTR szReader
     * }
     */
    public static final long szReader$offset() {
        return szReader$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPCWSTR szReader
     * }
     */
    public static MemorySegment szReader(MemorySegment struct) {
        return struct.get(szReader$LAYOUT, szReader$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPCWSTR szReader
     * }
     */
    public static void szReader(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(szReader$LAYOUT, szReader$OFFSET, fieldValue);
    }

    private static final AddressLayout pvUserData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pvUserData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPVOID pvUserData
     * }
     */
    public static final AddressLayout pvUserData$layout() {
        return pvUserData$LAYOUT;
    }

    private static final long pvUserData$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPVOID pvUserData
     * }
     */
    public static final long pvUserData$offset() {
        return pvUserData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPVOID pvUserData
     * }
     */
    public static MemorySegment pvUserData(MemorySegment struct) {
        return struct.get(pvUserData$LAYOUT, pvUserData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPVOID pvUserData
     * }
     */
    public static void pvUserData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pvUserData$LAYOUT, pvUserData$OFFSET, fieldValue);
    }

    private static final OfInt dwCurrentState$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwCurrentState"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwCurrentState
     * }
     */
    public static final OfInt dwCurrentState$layout() {
        return dwCurrentState$LAYOUT;
    }

    private static final long dwCurrentState$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwCurrentState
     * }
     */
    public static final long dwCurrentState$offset() {
        return dwCurrentState$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwCurrentState
     * }
     */
    public static int dwCurrentState(MemorySegment struct) {
        return struct.get(dwCurrentState$LAYOUT, dwCurrentState$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwCurrentState
     * }
     */
    public static void dwCurrentState(MemorySegment struct, int fieldValue) {
        struct.set(dwCurrentState$LAYOUT, dwCurrentState$OFFSET, fieldValue);
    }

    private static final OfInt dwEventState$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwEventState"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwEventState
     * }
     */
    public static final OfInt dwEventState$layout() {
        return dwEventState$LAYOUT;
    }

    private static final long dwEventState$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwEventState
     * }
     */
    public static final long dwEventState$offset() {
        return dwEventState$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwEventState
     * }
     */
    public static int dwEventState(MemorySegment struct) {
        return struct.get(dwEventState$LAYOUT, dwEventState$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwEventState
     * }
     */
    public static void dwEventState(MemorySegment struct, int fieldValue) {
        struct.set(dwEventState$LAYOUT, dwEventState$OFFSET, fieldValue);
    }

    private static final OfInt cbAtr$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbAtr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD cbAtr
     * }
     */
    public static final OfInt cbAtr$layout() {
        return cbAtr$LAYOUT;
    }

    private static final long cbAtr$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD cbAtr
     * }
     */
    public static final long cbAtr$offset() {
        return cbAtr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD cbAtr
     * }
     */
    public static int cbAtr(MemorySegment struct) {
        return struct.get(cbAtr$LAYOUT, cbAtr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD cbAtr
     * }
     */
    public static void cbAtr(MemorySegment struct, int fieldValue) {
        struct.set(cbAtr$LAYOUT, cbAtr$OFFSET, fieldValue);
    }

    private static final SequenceLayout rgbAtr$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("rgbAtr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE rgbAtr[36]
     * }
     */
    public static final SequenceLayout rgbAtr$layout() {
        return rgbAtr$LAYOUT;
    }

    private static final long rgbAtr$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE rgbAtr[36]
     * }
     */
    public static final long rgbAtr$offset() {
        return rgbAtr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE rgbAtr[36]
     * }
     */
    public static MemorySegment rgbAtr(MemorySegment struct) {
        return struct.asSlice(rgbAtr$OFFSET, rgbAtr$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE rgbAtr[36]
     * }
     */
    public static void rgbAtr(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, rgbAtr$OFFSET, rgbAtr$LAYOUT.byteSize());
    }

    private static long[] rgbAtr$DIMS = { 36 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * BYTE rgbAtr[36]
     * }
     */
    public static long[] rgbAtr$dimensions() {
        return rgbAtr$DIMS;
    }
    private static final VarHandle rgbAtr$ELEM_HANDLE = rgbAtr$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * BYTE rgbAtr[36]
     * }
     */
    public static byte rgbAtr(MemorySegment struct, long index0) {
        return (byte)rgbAtr$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * BYTE rgbAtr[36]
     * }
     */
    public static void rgbAtr(MemorySegment struct, long index0, byte fieldValue) {
        rgbAtr$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

