// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _FILE_ZERO_DATA_INFORMATION {
 *     LARGE_INTEGER FileOffset;
 *     LARGE_INTEGER BeyondFinalZero;
 * }
 * }
 */
public class _FILE_ZERO_DATA_INFORMATION {

    _FILE_ZERO_DATA_INFORMATION() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _LARGE_INTEGER.layout().withName("FileOffset"),
        _LARGE_INTEGER.layout().withName("BeyondFinalZero")
    ).withName("_FILE_ZERO_DATA_INFORMATION");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout FileOffset$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("FileOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LARGE_INTEGER FileOffset
     * }
     */
    public static final GroupLayout FileOffset$layout() {
        return FileOffset$LAYOUT;
    }

    private static final long FileOffset$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LARGE_INTEGER FileOffset
     * }
     */
    public static final long FileOffset$offset() {
        return FileOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER FileOffset
     * }
     */
    public static MemorySegment FileOffset(MemorySegment struct) {
        return struct.asSlice(FileOffset$OFFSET, FileOffset$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER FileOffset
     * }
     */
    public static void FileOffset(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, FileOffset$OFFSET, FileOffset$LAYOUT.byteSize());
    }

    private static final GroupLayout BeyondFinalZero$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("BeyondFinalZero"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LARGE_INTEGER BeyondFinalZero
     * }
     */
    public static final GroupLayout BeyondFinalZero$layout() {
        return BeyondFinalZero$LAYOUT;
    }

    private static final long BeyondFinalZero$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LARGE_INTEGER BeyondFinalZero
     * }
     */
    public static final long BeyondFinalZero$offset() {
        return BeyondFinalZero$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER BeyondFinalZero
     * }
     */
    public static MemorySegment BeyondFinalZero(MemorySegment struct) {
        return struct.asSlice(BeyondFinalZero$OFFSET, BeyondFinalZero$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER BeyondFinalZero
     * }
     */
    public static void BeyondFinalZero(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, BeyondFinalZero$OFFSET, BeyondFinalZero$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

