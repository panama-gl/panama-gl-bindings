// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class IRunningObjectTableVtbl {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("Register"),
        Constants$root.C_POINTER$LAYOUT.withName("Revoke"),
        Constants$root.C_POINTER$LAYOUT.withName("IsRunning"),
        Constants$root.C_POINTER$LAYOUT.withName("GetObjectA"),
        Constants$root.C_POINTER$LAYOUT.withName("NoteChangeTime"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTimeOfLastChange"),
        Constants$root.C_POINTER$LAYOUT.withName("EnumRunning")
    ).withName("IRunningObjectTableVtbl");
    public static MemoryLayout $LAYOUT() {
        return IRunningObjectTableVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        IRunningObjectTableVtbl.QueryInterface$FUNC
    );
    public interface QueryInterface {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(QueryInterface fi, MemorySession session) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IRunningObjectTableVtbl.QueryInterface$FUNC, session);
        }
        static QueryInterface ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IRunningObjectTableVtbl.QueryInterface$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IRunningObjectTableVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IRunningObjectTableVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IRunningObjectTableVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IRunningObjectTableVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IRunningObjectTableVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment, MemorySession session) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), session);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        IRunningObjectTableVtbl.AddRef$FUNC
    );
    public interface AddRef {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(AddRef fi, MemorySession session) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IRunningObjectTableVtbl.AddRef$FUNC, session);
        }
        static AddRef ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IRunningObjectTableVtbl.AddRef$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IRunningObjectTableVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IRunningObjectTableVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IRunningObjectTableVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IRunningObjectTableVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IRunningObjectTableVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment, MemorySession session) {
        return AddRef.ofAddress(AddRef$get(segment), session);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        IRunningObjectTableVtbl.Release$FUNC
    );
    public interface Release {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Release fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Release.class, fi, IRunningObjectTableVtbl.Release$FUNC, session);
        }
        static Release ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IRunningObjectTableVtbl.Release$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IRunningObjectTableVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IRunningObjectTableVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IRunningObjectTableVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IRunningObjectTableVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IRunningObjectTableVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment, MemorySession session) {
        return Release.ofAddress(Release$get(segment), session);
    }
    static final FunctionDescriptor Register$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Register$MH = RuntimeHelper.downcallHandle(
        IRunningObjectTableVtbl.Register$FUNC
    );
    public interface Register {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(Register fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Register.class, fi, IRunningObjectTableVtbl.Register$FUNC, session);
        }
        static Register ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    return (int)IRunningObjectTableVtbl.Register$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Register$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Register"));
    public static VarHandle Register$VH() {
        return IRunningObjectTableVtbl.Register$VH;
    }
    public static MemoryAddress Register$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IRunningObjectTableVtbl.Register$VH.get(seg);
    }
    public static void Register$set( MemorySegment seg, MemoryAddress x) {
        IRunningObjectTableVtbl.Register$VH.set(seg, x);
    }
    public static MemoryAddress Register$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IRunningObjectTableVtbl.Register$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Register$set(MemorySegment seg, long index, MemoryAddress x) {
        IRunningObjectTableVtbl.Register$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Register Register (MemorySegment segment, MemorySession session) {
        return Register.ofAddress(Register$get(segment), session);
    }
    static final FunctionDescriptor Revoke$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Revoke$MH = RuntimeHelper.downcallHandle(
        IRunningObjectTableVtbl.Revoke$FUNC
    );
    public interface Revoke {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(Revoke fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Revoke.class, fi, IRunningObjectTableVtbl.Revoke$FUNC, session);
        }
        static Revoke ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    return (int)IRunningObjectTableVtbl.Revoke$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Revoke$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Revoke"));
    public static VarHandle Revoke$VH() {
        return IRunningObjectTableVtbl.Revoke$VH;
    }
    public static MemoryAddress Revoke$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IRunningObjectTableVtbl.Revoke$VH.get(seg);
    }
    public static void Revoke$set( MemorySegment seg, MemoryAddress x) {
        IRunningObjectTableVtbl.Revoke$VH.set(seg, x);
    }
    public static MemoryAddress Revoke$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IRunningObjectTableVtbl.Revoke$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Revoke$set(MemorySegment seg, long index, MemoryAddress x) {
        IRunningObjectTableVtbl.Revoke$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Revoke Revoke (MemorySegment segment, MemorySession session) {
        return Revoke.ofAddress(Revoke$get(segment), session);
    }
    static final FunctionDescriptor IsRunning$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle IsRunning$MH = RuntimeHelper.downcallHandle(
        IRunningObjectTableVtbl.IsRunning$FUNC
    );
    public interface IsRunning {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(IsRunning fi, MemorySession session) {
            return RuntimeHelper.upcallStub(IsRunning.class, fi, IRunningObjectTableVtbl.IsRunning$FUNC, session);
        }
        static IsRunning ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IRunningObjectTableVtbl.IsRunning$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle IsRunning$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("IsRunning"));
    public static VarHandle IsRunning$VH() {
        return IRunningObjectTableVtbl.IsRunning$VH;
    }
    public static MemoryAddress IsRunning$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IRunningObjectTableVtbl.IsRunning$VH.get(seg);
    }
    public static void IsRunning$set( MemorySegment seg, MemoryAddress x) {
        IRunningObjectTableVtbl.IsRunning$VH.set(seg, x);
    }
    public static MemoryAddress IsRunning$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IRunningObjectTableVtbl.IsRunning$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void IsRunning$set(MemorySegment seg, long index, MemoryAddress x) {
        IRunningObjectTableVtbl.IsRunning$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsRunning IsRunning (MemorySegment segment, MemorySession session) {
        return IsRunning.ofAddress(IsRunning$get(segment), session);
    }
    static final FunctionDescriptor GetObjectA$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetObjectA$MH = RuntimeHelper.downcallHandle(
        IRunningObjectTableVtbl.GetObjectA$FUNC
    );
    public interface GetObjectA {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(GetObjectA fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetObjectA.class, fi, IRunningObjectTableVtbl.GetObjectA$FUNC, session);
        }
        static GetObjectA ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IRunningObjectTableVtbl.GetObjectA$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetObjectA$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetObjectA"));
    public static VarHandle GetObjectA$VH() {
        return IRunningObjectTableVtbl.GetObjectA$VH;
    }
    public static MemoryAddress GetObjectA$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IRunningObjectTableVtbl.GetObjectA$VH.get(seg);
    }
    public static void GetObjectA$set( MemorySegment seg, MemoryAddress x) {
        IRunningObjectTableVtbl.GetObjectA$VH.set(seg, x);
    }
    public static MemoryAddress GetObjectA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IRunningObjectTableVtbl.GetObjectA$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetObjectA$set(MemorySegment seg, long index, MemoryAddress x) {
        IRunningObjectTableVtbl.GetObjectA$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetObjectA GetObjectA (MemorySegment segment, MemorySession session) {
        return GetObjectA.ofAddress(GetObjectA$get(segment), session);
    }
    static final FunctionDescriptor NoteChangeTime$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle NoteChangeTime$MH = RuntimeHelper.downcallHandle(
        IRunningObjectTableVtbl.NoteChangeTime$FUNC
    );
    public interface NoteChangeTime {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(NoteChangeTime fi, MemorySession session) {
            return RuntimeHelper.upcallStub(NoteChangeTime.class, fi, IRunningObjectTableVtbl.NoteChangeTime$FUNC, session);
        }
        static NoteChangeTime ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IRunningObjectTableVtbl.NoteChangeTime$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle NoteChangeTime$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NoteChangeTime"));
    public static VarHandle NoteChangeTime$VH() {
        return IRunningObjectTableVtbl.NoteChangeTime$VH;
    }
    public static MemoryAddress NoteChangeTime$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IRunningObjectTableVtbl.NoteChangeTime$VH.get(seg);
    }
    public static void NoteChangeTime$set( MemorySegment seg, MemoryAddress x) {
        IRunningObjectTableVtbl.NoteChangeTime$VH.set(seg, x);
    }
    public static MemoryAddress NoteChangeTime$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IRunningObjectTableVtbl.NoteChangeTime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NoteChangeTime$set(MemorySegment seg, long index, MemoryAddress x) {
        IRunningObjectTableVtbl.NoteChangeTime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static NoteChangeTime NoteChangeTime (MemorySegment segment, MemorySession session) {
        return NoteChangeTime.ofAddress(NoteChangeTime$get(segment), session);
    }
    static final FunctionDescriptor GetTimeOfLastChange$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTimeOfLastChange$MH = RuntimeHelper.downcallHandle(
        IRunningObjectTableVtbl.GetTimeOfLastChange$FUNC
    );
    public interface GetTimeOfLastChange {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(GetTimeOfLastChange fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetTimeOfLastChange.class, fi, IRunningObjectTableVtbl.GetTimeOfLastChange$FUNC, session);
        }
        static GetTimeOfLastChange ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IRunningObjectTableVtbl.GetTimeOfLastChange$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTimeOfLastChange$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTimeOfLastChange"));
    public static VarHandle GetTimeOfLastChange$VH() {
        return IRunningObjectTableVtbl.GetTimeOfLastChange$VH;
    }
    public static MemoryAddress GetTimeOfLastChange$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IRunningObjectTableVtbl.GetTimeOfLastChange$VH.get(seg);
    }
    public static void GetTimeOfLastChange$set( MemorySegment seg, MemoryAddress x) {
        IRunningObjectTableVtbl.GetTimeOfLastChange$VH.set(seg, x);
    }
    public static MemoryAddress GetTimeOfLastChange$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IRunningObjectTableVtbl.GetTimeOfLastChange$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTimeOfLastChange$set(MemorySegment seg, long index, MemoryAddress x) {
        IRunningObjectTableVtbl.GetTimeOfLastChange$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTimeOfLastChange GetTimeOfLastChange (MemorySegment segment, MemorySession session) {
        return GetTimeOfLastChange.ofAddress(GetTimeOfLastChange$get(segment), session);
    }
    static final FunctionDescriptor EnumRunning$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle EnumRunning$MH = RuntimeHelper.downcallHandle(
        IRunningObjectTableVtbl.EnumRunning$FUNC
    );
    public interface EnumRunning {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(EnumRunning fi, MemorySession session) {
            return RuntimeHelper.upcallStub(EnumRunning.class, fi, IRunningObjectTableVtbl.EnumRunning$FUNC, session);
        }
        static EnumRunning ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IRunningObjectTableVtbl.EnumRunning$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle EnumRunning$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EnumRunning"));
    public static VarHandle EnumRunning$VH() {
        return IRunningObjectTableVtbl.EnumRunning$VH;
    }
    public static MemoryAddress EnumRunning$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IRunningObjectTableVtbl.EnumRunning$VH.get(seg);
    }
    public static void EnumRunning$set( MemorySegment seg, MemoryAddress x) {
        IRunningObjectTableVtbl.EnumRunning$VH.set(seg, x);
    }
    public static MemoryAddress EnumRunning$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IRunningObjectTableVtbl.EnumRunning$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EnumRunning$set(MemorySegment seg, long index, MemoryAddress x) {
        IRunningObjectTableVtbl.EnumRunning$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static EnumRunning EnumRunning (MemorySegment segment, MemorySession session) {
        return EnumRunning.ofAddress(EnumRunning$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


