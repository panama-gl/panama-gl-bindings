// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _STORAGE_RPMB_DATA_FRAME {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(196, Constants$root.C_CHAR$LAYOUT).withName("Stuff"),
        MemoryLayout.sequenceLayout(32, Constants$root.C_CHAR$LAYOUT).withName("KeyOrMAC"),
        MemoryLayout.sequenceLayout(256, Constants$root.C_CHAR$LAYOUT).withName("Data"),
        MemoryLayout.sequenceLayout(16, Constants$root.C_CHAR$LAYOUT).withName("Nonce"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_CHAR$LAYOUT).withName("WriteCounter"),
        MemoryLayout.sequenceLayout(2, Constants$root.C_CHAR$LAYOUT).withName("Address"),
        MemoryLayout.sequenceLayout(2, Constants$root.C_CHAR$LAYOUT).withName("BlockCount"),
        MemoryLayout.sequenceLayout(2, Constants$root.C_CHAR$LAYOUT).withName("OperationResult"),
        MemoryLayout.sequenceLayout(2, Constants$root.C_CHAR$LAYOUT).withName("RequestOrResponseType")
    ).withName("_STORAGE_RPMB_DATA_FRAME");
    public static MemoryLayout $LAYOUT() {
        return _STORAGE_RPMB_DATA_FRAME.$struct$LAYOUT;
    }
    public static MemorySegment Stuff$slice(MemorySegment seg) {
        return seg.asSlice(0, 196);
    }
    public static MemorySegment KeyOrMAC$slice(MemorySegment seg) {
        return seg.asSlice(196, 32);
    }
    public static MemorySegment Data$slice(MemorySegment seg) {
        return seg.asSlice(228, 256);
    }
    public static MemorySegment Nonce$slice(MemorySegment seg) {
        return seg.asSlice(484, 16);
    }
    public static MemorySegment WriteCounter$slice(MemorySegment seg) {
        return seg.asSlice(500, 4);
    }
    public static MemorySegment Address$slice(MemorySegment seg) {
        return seg.asSlice(504, 2);
    }
    public static MemorySegment BlockCount$slice(MemorySegment seg) {
        return seg.asSlice(506, 2);
    }
    public static MemorySegment OperationResult$slice(MemorySegment seg) {
        return seg.asSlice(508, 2);
    }
    public static MemorySegment RequestOrResponseType$slice(MemorySegment seg) {
        return seg.asSlice(510, 2);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


