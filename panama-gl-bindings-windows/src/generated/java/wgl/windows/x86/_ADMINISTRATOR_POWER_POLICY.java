// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _ADMINISTRATOR_POWER_POLICY {
 *     SYSTEM_POWER_STATE MinSleep;
 *     SYSTEM_POWER_STATE MaxSleep;
 *     DWORD MinVideoTimeout;
 *     DWORD MaxVideoTimeout;
 *     DWORD MinSpindownTimeout;
 *     DWORD MaxSpindownTimeout;
 * }
 * }
 */
public class _ADMINISTRATOR_POWER_POLICY {

    _ADMINISTRATOR_POWER_POLICY() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_INT.withName("MinSleep"),
        wgl_h.C_INT.withName("MaxSleep"),
        wgl_h.C_LONG.withName("MinVideoTimeout"),
        wgl_h.C_LONG.withName("MaxVideoTimeout"),
        wgl_h.C_LONG.withName("MinSpindownTimeout"),
        wgl_h.C_LONG.withName("MaxSpindownTimeout")
    ).withName("_ADMINISTRATOR_POWER_POLICY");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt MinSleep$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MinSleep"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SYSTEM_POWER_STATE MinSleep
     * }
     */
    public static final OfInt MinSleep$layout() {
        return MinSleep$LAYOUT;
    }

    private static final long MinSleep$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SYSTEM_POWER_STATE MinSleep
     * }
     */
    public static final long MinSleep$offset() {
        return MinSleep$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SYSTEM_POWER_STATE MinSleep
     * }
     */
    public static int MinSleep(MemorySegment struct) {
        return struct.get(MinSleep$LAYOUT, MinSleep$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SYSTEM_POWER_STATE MinSleep
     * }
     */
    public static void MinSleep(MemorySegment struct, int fieldValue) {
        struct.set(MinSleep$LAYOUT, MinSleep$OFFSET, fieldValue);
    }

    private static final OfInt MaxSleep$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MaxSleep"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SYSTEM_POWER_STATE MaxSleep
     * }
     */
    public static final OfInt MaxSleep$layout() {
        return MaxSleep$LAYOUT;
    }

    private static final long MaxSleep$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SYSTEM_POWER_STATE MaxSleep
     * }
     */
    public static final long MaxSleep$offset() {
        return MaxSleep$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SYSTEM_POWER_STATE MaxSleep
     * }
     */
    public static int MaxSleep(MemorySegment struct) {
        return struct.get(MaxSleep$LAYOUT, MaxSleep$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SYSTEM_POWER_STATE MaxSleep
     * }
     */
    public static void MaxSleep(MemorySegment struct, int fieldValue) {
        struct.set(MaxSleep$LAYOUT, MaxSleep$OFFSET, fieldValue);
    }

    private static final OfInt MinVideoTimeout$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MinVideoTimeout"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD MinVideoTimeout
     * }
     */
    public static final OfInt MinVideoTimeout$layout() {
        return MinVideoTimeout$LAYOUT;
    }

    private static final long MinVideoTimeout$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD MinVideoTimeout
     * }
     */
    public static final long MinVideoTimeout$offset() {
        return MinVideoTimeout$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD MinVideoTimeout
     * }
     */
    public static int MinVideoTimeout(MemorySegment struct) {
        return struct.get(MinVideoTimeout$LAYOUT, MinVideoTimeout$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD MinVideoTimeout
     * }
     */
    public static void MinVideoTimeout(MemorySegment struct, int fieldValue) {
        struct.set(MinVideoTimeout$LAYOUT, MinVideoTimeout$OFFSET, fieldValue);
    }

    private static final OfInt MaxVideoTimeout$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MaxVideoTimeout"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD MaxVideoTimeout
     * }
     */
    public static final OfInt MaxVideoTimeout$layout() {
        return MaxVideoTimeout$LAYOUT;
    }

    private static final long MaxVideoTimeout$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD MaxVideoTimeout
     * }
     */
    public static final long MaxVideoTimeout$offset() {
        return MaxVideoTimeout$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD MaxVideoTimeout
     * }
     */
    public static int MaxVideoTimeout(MemorySegment struct) {
        return struct.get(MaxVideoTimeout$LAYOUT, MaxVideoTimeout$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD MaxVideoTimeout
     * }
     */
    public static void MaxVideoTimeout(MemorySegment struct, int fieldValue) {
        struct.set(MaxVideoTimeout$LAYOUT, MaxVideoTimeout$OFFSET, fieldValue);
    }

    private static final OfInt MinSpindownTimeout$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MinSpindownTimeout"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD MinSpindownTimeout
     * }
     */
    public static final OfInt MinSpindownTimeout$layout() {
        return MinSpindownTimeout$LAYOUT;
    }

    private static final long MinSpindownTimeout$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD MinSpindownTimeout
     * }
     */
    public static final long MinSpindownTimeout$offset() {
        return MinSpindownTimeout$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD MinSpindownTimeout
     * }
     */
    public static int MinSpindownTimeout(MemorySegment struct) {
        return struct.get(MinSpindownTimeout$LAYOUT, MinSpindownTimeout$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD MinSpindownTimeout
     * }
     */
    public static void MinSpindownTimeout(MemorySegment struct, int fieldValue) {
        struct.set(MinSpindownTimeout$LAYOUT, MinSpindownTimeout$OFFSET, fieldValue);
    }

    private static final OfInt MaxSpindownTimeout$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MaxSpindownTimeout"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD MaxSpindownTimeout
     * }
     */
    public static final OfInt MaxSpindownTimeout$layout() {
        return MaxSpindownTimeout$LAYOUT;
    }

    private static final long MaxSpindownTimeout$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD MaxSpindownTimeout
     * }
     */
    public static final long MaxSpindownTimeout$offset() {
        return MaxSpindownTimeout$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD MaxSpindownTimeout
     * }
     */
    public static int MaxSpindownTimeout(MemorySegment struct) {
        return struct.get(MaxSpindownTimeout$LAYOUT, MaxSpindownTimeout$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD MaxSpindownTimeout
     * }
     */
    public static void MaxSpindownTimeout(MemorySegment struct, int fieldValue) {
        struct.set(MaxSpindownTimeout$LAYOUT, MaxSpindownTimeout$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

