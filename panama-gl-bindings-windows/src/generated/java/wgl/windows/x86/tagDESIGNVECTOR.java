// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tagDESIGNVECTOR {
 *     DWORD dvReserved;
 *     DWORD dvNumAxes;
 *     LONG dvValues[16];
 * }
 * }
 */
public class tagDESIGNVECTOR {

    tagDESIGNVECTOR() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("dvReserved"),
        wgl_h.C_LONG.withName("dvNumAxes"),
        MemoryLayout.sequenceLayout(16, wgl_h.C_LONG).withName("dvValues")
    ).withName("tagDESIGNVECTOR");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt dvReserved$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dvReserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dvReserved
     * }
     */
    public static final OfInt dvReserved$layout() {
        return dvReserved$LAYOUT;
    }

    private static final long dvReserved$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dvReserved
     * }
     */
    public static final long dvReserved$offset() {
        return dvReserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dvReserved
     * }
     */
    public static int dvReserved(MemorySegment struct) {
        return struct.get(dvReserved$LAYOUT, dvReserved$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dvReserved
     * }
     */
    public static void dvReserved(MemorySegment struct, int fieldValue) {
        struct.set(dvReserved$LAYOUT, dvReserved$OFFSET, fieldValue);
    }

    private static final OfInt dvNumAxes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dvNumAxes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dvNumAxes
     * }
     */
    public static final OfInt dvNumAxes$layout() {
        return dvNumAxes$LAYOUT;
    }

    private static final long dvNumAxes$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dvNumAxes
     * }
     */
    public static final long dvNumAxes$offset() {
        return dvNumAxes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dvNumAxes
     * }
     */
    public static int dvNumAxes(MemorySegment struct) {
        return struct.get(dvNumAxes$LAYOUT, dvNumAxes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dvNumAxes
     * }
     */
    public static void dvNumAxes(MemorySegment struct, int fieldValue) {
        struct.set(dvNumAxes$LAYOUT, dvNumAxes$OFFSET, fieldValue);
    }

    private static final SequenceLayout dvValues$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("dvValues"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LONG dvValues[16]
     * }
     */
    public static final SequenceLayout dvValues$layout() {
        return dvValues$LAYOUT;
    }

    private static final long dvValues$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LONG dvValues[16]
     * }
     */
    public static final long dvValues$offset() {
        return dvValues$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LONG dvValues[16]
     * }
     */
    public static MemorySegment dvValues(MemorySegment struct) {
        return struct.asSlice(dvValues$OFFSET, dvValues$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LONG dvValues[16]
     * }
     */
    public static void dvValues(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, dvValues$OFFSET, dvValues$LAYOUT.byteSize());
    }

    private static long[] dvValues$DIMS = { 16 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * LONG dvValues[16]
     * }
     */
    public static long[] dvValues$dimensions() {
        return dvValues$DIMS;
    }
    private static final VarHandle dvValues$ELEM_HANDLE = dvValues$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * LONG dvValues[16]
     * }
     */
    public static int dvValues(MemorySegment struct, long index0) {
        return (int)dvValues$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * LONG dvValues[16]
     * }
     */
    public static void dvValues(MemorySegment struct, long index0, int fieldValue) {
        dvValues$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

