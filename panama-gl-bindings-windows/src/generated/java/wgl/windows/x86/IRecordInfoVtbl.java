// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct IRecordInfoVtbl {
 *     HRESULT (*QueryInterface)(IRecordInfo *, const IID *const, void **) __attribute__((stdcall));
 *     ULONG (*AddRef)(IRecordInfo *) __attribute__((stdcall));
 *     ULONG (*Release)(IRecordInfo *) __attribute__((stdcall));
 *     HRESULT (*RecordInit)(IRecordInfo *, PVOID) __attribute__((stdcall));
 *     HRESULT (*RecordClear)(IRecordInfo *, PVOID) __attribute__((stdcall));
 *     HRESULT (*RecordCopy)(IRecordInfo *, PVOID, PVOID) __attribute__((stdcall));
 *     HRESULT (*GetGuid)(IRecordInfo *, GUID *) __attribute__((stdcall));
 *     HRESULT (*GetName)(IRecordInfo *, BSTR *) __attribute__((stdcall));
 *     HRESULT (*GetSize)(IRecordInfo *, ULONG *) __attribute__((stdcall));
 *     HRESULT (*GetTypeInfo)(IRecordInfo *, ITypeInfo **) __attribute__((stdcall));
 *     HRESULT (*GetField)(IRecordInfo *, PVOID, LPCOLESTR, VARIANT *) __attribute__((stdcall));
 *     HRESULT (*GetFieldNoCopy)(IRecordInfo *, PVOID, LPCOLESTR, VARIANT *, PVOID *) __attribute__((stdcall));
 *     HRESULT (*PutField)(IRecordInfo *, ULONG, PVOID, LPCOLESTR, VARIANT *) __attribute__((stdcall));
 *     HRESULT (*PutFieldNoCopy)(IRecordInfo *, ULONG, PVOID, LPCOLESTR, VARIANT *) __attribute__((stdcall));
 *     HRESULT (*GetFieldNames)(IRecordInfo *, ULONG *, BSTR *) __attribute__((stdcall));
 *     BOOL (*IsMatchingType)(IRecordInfo *, IRecordInfo *) __attribute__((stdcall));
 *     PVOID (*RecordCreate)(IRecordInfo *) __attribute__((stdcall));
 *     HRESULT (*RecordCreateCopy)(IRecordInfo *, PVOID, PVOID *) __attribute__((stdcall));
 *     HRESULT (*RecordDestroy)(IRecordInfo *, PVOID) __attribute__((stdcall));
 * }
 * }
 */
public class IRecordInfoVtbl {

    IRecordInfoVtbl() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("QueryInterface"),
        wgl_h.C_POINTER.withName("AddRef"),
        wgl_h.C_POINTER.withName("Release"),
        wgl_h.C_POINTER.withName("RecordInit"),
        wgl_h.C_POINTER.withName("RecordClear"),
        wgl_h.C_POINTER.withName("RecordCopy"),
        wgl_h.C_POINTER.withName("GetGuid"),
        wgl_h.C_POINTER.withName("GetName"),
        wgl_h.C_POINTER.withName("GetSize"),
        wgl_h.C_POINTER.withName("GetTypeInfo"),
        wgl_h.C_POINTER.withName("GetField"),
        wgl_h.C_POINTER.withName("GetFieldNoCopy"),
        wgl_h.C_POINTER.withName("PutField"),
        wgl_h.C_POINTER.withName("PutFieldNoCopy"),
        wgl_h.C_POINTER.withName("GetFieldNames"),
        wgl_h.C_POINTER.withName("IsMatchingType"),
        wgl_h.C_POINTER.withName("RecordCreate"),
        wgl_h.C_POINTER.withName("RecordCreateCopy"),
        wgl_h.C_POINTER.withName("RecordDestroy")
    ).withName("IRecordInfoVtbl");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IRecordInfo *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static class QueryInterface {

        QueryInterface() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(QueryInterface.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(QueryInterface.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout QueryInterface$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("QueryInterface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IRecordInfo *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout QueryInterface$layout() {
        return QueryInterface$LAYOUT;
    }

    private static final long QueryInterface$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IRecordInfo *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final long QueryInterface$offset() {
        return QueryInterface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IRecordInfo *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment QueryInterface(MemorySegment struct) {
        return struct.get(QueryInterface$LAYOUT, QueryInterface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IRecordInfo *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static void QueryInterface(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(QueryInterface$LAYOUT, QueryInterface$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*AddRef)(IRecordInfo *) __attribute__((stdcall))
     * }
     */
    public static class AddRef {

        AddRef() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(AddRef.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(AddRef.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout AddRef$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("AddRef"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IRecordInfo *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout AddRef$layout() {
        return AddRef$LAYOUT;
    }

    private static final long AddRef$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IRecordInfo *) __attribute__((stdcall))
     * }
     */
    public static final long AddRef$offset() {
        return AddRef$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IRecordInfo *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment AddRef(MemorySegment struct) {
        return struct.get(AddRef$LAYOUT, AddRef$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IRecordInfo *) __attribute__((stdcall))
     * }
     */
    public static void AddRef(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(AddRef$LAYOUT, AddRef$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*Release)(IRecordInfo *) __attribute__((stdcall))
     * }
     */
    public static class Release {

        Release() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Release.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Release.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Release$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Release"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IRecordInfo *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Release$layout() {
        return Release$LAYOUT;
    }

    private static final long Release$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IRecordInfo *) __attribute__((stdcall))
     * }
     */
    public static final long Release$offset() {
        return Release$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IRecordInfo *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Release(MemorySegment struct) {
        return struct.get(Release$LAYOUT, Release$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IRecordInfo *) __attribute__((stdcall))
     * }
     */
    public static void Release(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Release$LAYOUT, Release$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*RecordInit)(IRecordInfo *, PVOID) __attribute__((stdcall))
     * }
     */
    public static class RecordInit {

        RecordInit() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(RecordInit.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(RecordInit.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout RecordInit$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("RecordInit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*RecordInit)(IRecordInfo *, PVOID) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout RecordInit$layout() {
        return RecordInit$LAYOUT;
    }

    private static final long RecordInit$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*RecordInit)(IRecordInfo *, PVOID) __attribute__((stdcall))
     * }
     */
    public static final long RecordInit$offset() {
        return RecordInit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*RecordInit)(IRecordInfo *, PVOID) __attribute__((stdcall))
     * }
     */
    public static MemorySegment RecordInit(MemorySegment struct) {
        return struct.get(RecordInit$LAYOUT, RecordInit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*RecordInit)(IRecordInfo *, PVOID) __attribute__((stdcall))
     * }
     */
    public static void RecordInit(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(RecordInit$LAYOUT, RecordInit$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*RecordClear)(IRecordInfo *, PVOID) __attribute__((stdcall))
     * }
     */
    public static class RecordClear {

        RecordClear() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(RecordClear.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(RecordClear.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout RecordClear$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("RecordClear"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*RecordClear)(IRecordInfo *, PVOID) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout RecordClear$layout() {
        return RecordClear$LAYOUT;
    }

    private static final long RecordClear$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*RecordClear)(IRecordInfo *, PVOID) __attribute__((stdcall))
     * }
     */
    public static final long RecordClear$offset() {
        return RecordClear$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*RecordClear)(IRecordInfo *, PVOID) __attribute__((stdcall))
     * }
     */
    public static MemorySegment RecordClear(MemorySegment struct) {
        return struct.get(RecordClear$LAYOUT, RecordClear$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*RecordClear)(IRecordInfo *, PVOID) __attribute__((stdcall))
     * }
     */
    public static void RecordClear(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(RecordClear$LAYOUT, RecordClear$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*RecordCopy)(IRecordInfo *, PVOID, PVOID) __attribute__((stdcall))
     * }
     */
    public static class RecordCopy {

        RecordCopy() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(RecordCopy.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(RecordCopy.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout RecordCopy$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("RecordCopy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*RecordCopy)(IRecordInfo *, PVOID, PVOID) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout RecordCopy$layout() {
        return RecordCopy$LAYOUT;
    }

    private static final long RecordCopy$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*RecordCopy)(IRecordInfo *, PVOID, PVOID) __attribute__((stdcall))
     * }
     */
    public static final long RecordCopy$offset() {
        return RecordCopy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*RecordCopy)(IRecordInfo *, PVOID, PVOID) __attribute__((stdcall))
     * }
     */
    public static MemorySegment RecordCopy(MemorySegment struct) {
        return struct.get(RecordCopy$LAYOUT, RecordCopy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*RecordCopy)(IRecordInfo *, PVOID, PVOID) __attribute__((stdcall))
     * }
     */
    public static void RecordCopy(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(RecordCopy$LAYOUT, RecordCopy$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetGuid)(IRecordInfo *, GUID *) __attribute__((stdcall))
     * }
     */
    public static class GetGuid {

        GetGuid() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetGuid.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetGuid.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetGuid$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetGuid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetGuid)(IRecordInfo *, GUID *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetGuid$layout() {
        return GetGuid$LAYOUT;
    }

    private static final long GetGuid$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetGuid)(IRecordInfo *, GUID *) __attribute__((stdcall))
     * }
     */
    public static final long GetGuid$offset() {
        return GetGuid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetGuid)(IRecordInfo *, GUID *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetGuid(MemorySegment struct) {
        return struct.get(GetGuid$LAYOUT, GetGuid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetGuid)(IRecordInfo *, GUID *) __attribute__((stdcall))
     * }
     */
    public static void GetGuid(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetGuid$LAYOUT, GetGuid$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetName)(IRecordInfo *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static class GetName {

        GetName() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetName.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetName.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetName)(IRecordInfo *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetName$layout() {
        return GetName$LAYOUT;
    }

    private static final long GetName$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetName)(IRecordInfo *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static final long GetName$offset() {
        return GetName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetName)(IRecordInfo *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetName(MemorySegment struct) {
        return struct.get(GetName$LAYOUT, GetName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetName)(IRecordInfo *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static void GetName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetName$LAYOUT, GetName$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetSize)(IRecordInfo *, ULONG *) __attribute__((stdcall))
     * }
     */
    public static class GetSize {

        GetSize() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetSize.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetSize.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetSize$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetSize)(IRecordInfo *, ULONG *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetSize$layout() {
        return GetSize$LAYOUT;
    }

    private static final long GetSize$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetSize)(IRecordInfo *, ULONG *) __attribute__((stdcall))
     * }
     */
    public static final long GetSize$offset() {
        return GetSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetSize)(IRecordInfo *, ULONG *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetSize(MemorySegment struct) {
        return struct.get(GetSize$LAYOUT, GetSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetSize)(IRecordInfo *, ULONG *) __attribute__((stdcall))
     * }
     */
    public static void GetSize(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetSize$LAYOUT, GetSize$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetTypeInfo)(IRecordInfo *, ITypeInfo **) __attribute__((stdcall))
     * }
     */
    public static class GetTypeInfo {

        GetTypeInfo() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetTypeInfo.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetTypeInfo.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetTypeInfo$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetTypeInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetTypeInfo)(IRecordInfo *, ITypeInfo **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetTypeInfo$layout() {
        return GetTypeInfo$LAYOUT;
    }

    private static final long GetTypeInfo$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetTypeInfo)(IRecordInfo *, ITypeInfo **) __attribute__((stdcall))
     * }
     */
    public static final long GetTypeInfo$offset() {
        return GetTypeInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetTypeInfo)(IRecordInfo *, ITypeInfo **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetTypeInfo(MemorySegment struct) {
        return struct.get(GetTypeInfo$LAYOUT, GetTypeInfo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetTypeInfo)(IRecordInfo *, ITypeInfo **) __attribute__((stdcall))
     * }
     */
    public static void GetTypeInfo(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetTypeInfo$LAYOUT, GetTypeInfo$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetField)(IRecordInfo *, PVOID, LPCOLESTR, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static class GetField {

        GetField() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetField.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetField.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetField$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetField"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetField)(IRecordInfo *, PVOID, LPCOLESTR, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetField$layout() {
        return GetField$LAYOUT;
    }

    private static final long GetField$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetField)(IRecordInfo *, PVOID, LPCOLESTR, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static final long GetField$offset() {
        return GetField$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetField)(IRecordInfo *, PVOID, LPCOLESTR, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetField(MemorySegment struct) {
        return struct.get(GetField$LAYOUT, GetField$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetField)(IRecordInfo *, PVOID, LPCOLESTR, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static void GetField(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetField$LAYOUT, GetField$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetFieldNoCopy)(IRecordInfo *, PVOID, LPCOLESTR, VARIANT *, PVOID *) __attribute__((stdcall))
     * }
     */
    public static class GetFieldNoCopy {

        GetFieldNoCopy() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetFieldNoCopy.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetFieldNoCopy.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetFieldNoCopy$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetFieldNoCopy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetFieldNoCopy)(IRecordInfo *, PVOID, LPCOLESTR, VARIANT *, PVOID *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetFieldNoCopy$layout() {
        return GetFieldNoCopy$LAYOUT;
    }

    private static final long GetFieldNoCopy$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetFieldNoCopy)(IRecordInfo *, PVOID, LPCOLESTR, VARIANT *, PVOID *) __attribute__((stdcall))
     * }
     */
    public static final long GetFieldNoCopy$offset() {
        return GetFieldNoCopy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetFieldNoCopy)(IRecordInfo *, PVOID, LPCOLESTR, VARIANT *, PVOID *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetFieldNoCopy(MemorySegment struct) {
        return struct.get(GetFieldNoCopy$LAYOUT, GetFieldNoCopy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetFieldNoCopy)(IRecordInfo *, PVOID, LPCOLESTR, VARIANT *, PVOID *) __attribute__((stdcall))
     * }
     */
    public static void GetFieldNoCopy(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetFieldNoCopy$LAYOUT, GetFieldNoCopy$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*PutField)(IRecordInfo *, ULONG, PVOID, LPCOLESTR, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static class PutField {

        PutField() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(PutField.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(PutField.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout PutField$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("PutField"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*PutField)(IRecordInfo *, ULONG, PVOID, LPCOLESTR, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout PutField$layout() {
        return PutField$LAYOUT;
    }

    private static final long PutField$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*PutField)(IRecordInfo *, ULONG, PVOID, LPCOLESTR, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static final long PutField$offset() {
        return PutField$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*PutField)(IRecordInfo *, ULONG, PVOID, LPCOLESTR, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment PutField(MemorySegment struct) {
        return struct.get(PutField$LAYOUT, PutField$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*PutField)(IRecordInfo *, ULONG, PVOID, LPCOLESTR, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static void PutField(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(PutField$LAYOUT, PutField$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*PutFieldNoCopy)(IRecordInfo *, ULONG, PVOID, LPCOLESTR, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static class PutFieldNoCopy {

        PutFieldNoCopy() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(PutFieldNoCopy.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(PutFieldNoCopy.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout PutFieldNoCopy$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("PutFieldNoCopy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*PutFieldNoCopy)(IRecordInfo *, ULONG, PVOID, LPCOLESTR, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout PutFieldNoCopy$layout() {
        return PutFieldNoCopy$LAYOUT;
    }

    private static final long PutFieldNoCopy$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*PutFieldNoCopy)(IRecordInfo *, ULONG, PVOID, LPCOLESTR, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static final long PutFieldNoCopy$offset() {
        return PutFieldNoCopy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*PutFieldNoCopy)(IRecordInfo *, ULONG, PVOID, LPCOLESTR, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment PutFieldNoCopy(MemorySegment struct) {
        return struct.get(PutFieldNoCopy$LAYOUT, PutFieldNoCopy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*PutFieldNoCopy)(IRecordInfo *, ULONG, PVOID, LPCOLESTR, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static void PutFieldNoCopy(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(PutFieldNoCopy$LAYOUT, PutFieldNoCopy$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetFieldNames)(IRecordInfo *, ULONG *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static class GetFieldNames {

        GetFieldNames() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetFieldNames.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetFieldNames.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetFieldNames$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetFieldNames"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetFieldNames)(IRecordInfo *, ULONG *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetFieldNames$layout() {
        return GetFieldNames$LAYOUT;
    }

    private static final long GetFieldNames$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetFieldNames)(IRecordInfo *, ULONG *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static final long GetFieldNames$offset() {
        return GetFieldNames$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetFieldNames)(IRecordInfo *, ULONG *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetFieldNames(MemorySegment struct) {
        return struct.get(GetFieldNames$LAYOUT, GetFieldNames$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetFieldNames)(IRecordInfo *, ULONG *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static void GetFieldNames(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetFieldNames$LAYOUT, GetFieldNames$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * BOOL (*IsMatchingType)(IRecordInfo *, IRecordInfo *) __attribute__((stdcall))
     * }
     */
    public static class IsMatchingType {

        IsMatchingType() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(IsMatchingType.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(IsMatchingType.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout IsMatchingType$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("IsMatchingType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOL (*IsMatchingType)(IRecordInfo *, IRecordInfo *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout IsMatchingType$layout() {
        return IsMatchingType$LAYOUT;
    }

    private static final long IsMatchingType$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOL (*IsMatchingType)(IRecordInfo *, IRecordInfo *) __attribute__((stdcall))
     * }
     */
    public static final long IsMatchingType$offset() {
        return IsMatchingType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOL (*IsMatchingType)(IRecordInfo *, IRecordInfo *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment IsMatchingType(MemorySegment struct) {
        return struct.get(IsMatchingType$LAYOUT, IsMatchingType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOL (*IsMatchingType)(IRecordInfo *, IRecordInfo *) __attribute__((stdcall))
     * }
     */
    public static void IsMatchingType(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(IsMatchingType$LAYOUT, IsMatchingType$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * PVOID (*RecordCreate)(IRecordInfo *) __attribute__((stdcall))
     * }
     */
    public static class RecordCreate {

        RecordCreate() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(RecordCreate.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(RecordCreate.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout RecordCreate$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("RecordCreate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PVOID (*RecordCreate)(IRecordInfo *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout RecordCreate$layout() {
        return RecordCreate$LAYOUT;
    }

    private static final long RecordCreate$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PVOID (*RecordCreate)(IRecordInfo *) __attribute__((stdcall))
     * }
     */
    public static final long RecordCreate$offset() {
        return RecordCreate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PVOID (*RecordCreate)(IRecordInfo *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment RecordCreate(MemorySegment struct) {
        return struct.get(RecordCreate$LAYOUT, RecordCreate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PVOID (*RecordCreate)(IRecordInfo *) __attribute__((stdcall))
     * }
     */
    public static void RecordCreate(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(RecordCreate$LAYOUT, RecordCreate$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*RecordCreateCopy)(IRecordInfo *, PVOID, PVOID *) __attribute__((stdcall))
     * }
     */
    public static class RecordCreateCopy {

        RecordCreateCopy() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(RecordCreateCopy.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(RecordCreateCopy.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout RecordCreateCopy$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("RecordCreateCopy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*RecordCreateCopy)(IRecordInfo *, PVOID, PVOID *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout RecordCreateCopy$layout() {
        return RecordCreateCopy$LAYOUT;
    }

    private static final long RecordCreateCopy$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*RecordCreateCopy)(IRecordInfo *, PVOID, PVOID *) __attribute__((stdcall))
     * }
     */
    public static final long RecordCreateCopy$offset() {
        return RecordCreateCopy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*RecordCreateCopy)(IRecordInfo *, PVOID, PVOID *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment RecordCreateCopy(MemorySegment struct) {
        return struct.get(RecordCreateCopy$LAYOUT, RecordCreateCopy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*RecordCreateCopy)(IRecordInfo *, PVOID, PVOID *) __attribute__((stdcall))
     * }
     */
    public static void RecordCreateCopy(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(RecordCreateCopy$LAYOUT, RecordCreateCopy$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*RecordDestroy)(IRecordInfo *, PVOID) __attribute__((stdcall))
     * }
     */
    public static class RecordDestroy {

        RecordDestroy() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(RecordDestroy.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(RecordDestroy.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout RecordDestroy$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("RecordDestroy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*RecordDestroy)(IRecordInfo *, PVOID) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout RecordDestroy$layout() {
        return RecordDestroy$LAYOUT;
    }

    private static final long RecordDestroy$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*RecordDestroy)(IRecordInfo *, PVOID) __attribute__((stdcall))
     * }
     */
    public static final long RecordDestroy$offset() {
        return RecordDestroy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*RecordDestroy)(IRecordInfo *, PVOID) __attribute__((stdcall))
     * }
     */
    public static MemorySegment RecordDestroy(MemorySegment struct) {
        return struct.get(RecordDestroy$LAYOUT, RecordDestroy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*RecordDestroy)(IRecordInfo *, PVOID) __attribute__((stdcall))
     * }
     */
    public static void RecordDestroy(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(RecordDestroy$LAYOUT, RecordDestroy$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

