// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct IBindStatusCallbackExVtbl {
 *     HRESULT (*QueryInterface)(IBindStatusCallbackEx *, const IID *const, void **) __attribute__((stdcall));
 *     ULONG (*AddRef)(IBindStatusCallbackEx *) __attribute__((stdcall));
 *     ULONG (*Release)(IBindStatusCallbackEx *) __attribute__((stdcall));
 *     HRESULT (*OnStartBinding)(IBindStatusCallbackEx *, DWORD, IBinding *) __attribute__((stdcall));
 *     HRESULT (*GetPriority)(IBindStatusCallbackEx *, LONG *) __attribute__((stdcall));
 *     HRESULT (*OnLowResource)(IBindStatusCallbackEx *, DWORD) __attribute__((stdcall));
 *     HRESULT (*OnProgress)(IBindStatusCallbackEx *, ULONG, ULONG, ULONG, LPCWSTR) __attribute__((stdcall));
 *     HRESULT (*OnStopBinding)(IBindStatusCallbackEx *, HRESULT, LPCWSTR) __attribute__((stdcall));
 *     HRESULT (*GetBindInfo)(IBindStatusCallbackEx *, DWORD *, BINDINFO *) __attribute__((stdcall));
 *     HRESULT (*OnDataAvailable)(IBindStatusCallbackEx *, DWORD, DWORD, FORMATETC *, STGMEDIUM *) __attribute__((stdcall));
 *     HRESULT (*OnObjectAvailable)(IBindStatusCallbackEx *, const IID *const, IUnknown *) __attribute__((stdcall));
 *     HRESULT (*GetBindInfoEx)(IBindStatusCallbackEx *, DWORD *, BINDINFO *, DWORD *, DWORD *) __attribute__((stdcall));
 * }
 * }
 */
public class IBindStatusCallbackExVtbl {

    IBindStatusCallbackExVtbl() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("QueryInterface"),
        wgl_h.C_POINTER.withName("AddRef"),
        wgl_h.C_POINTER.withName("Release"),
        wgl_h.C_POINTER.withName("OnStartBinding"),
        wgl_h.C_POINTER.withName("GetPriority"),
        wgl_h.C_POINTER.withName("OnLowResource"),
        wgl_h.C_POINTER.withName("OnProgress"),
        wgl_h.C_POINTER.withName("OnStopBinding"),
        wgl_h.C_POINTER.withName("GetBindInfo"),
        wgl_h.C_POINTER.withName("OnDataAvailable"),
        wgl_h.C_POINTER.withName("OnObjectAvailable"),
        wgl_h.C_POINTER.withName("GetBindInfoEx")
    ).withName("IBindStatusCallbackExVtbl");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IBindStatusCallbackEx *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static class QueryInterface {

        QueryInterface() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(QueryInterface.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(QueryInterface.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout QueryInterface$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("QueryInterface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IBindStatusCallbackEx *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout QueryInterface$layout() {
        return QueryInterface$LAYOUT;
    }

    private static final long QueryInterface$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IBindStatusCallbackEx *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final long QueryInterface$offset() {
        return QueryInterface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IBindStatusCallbackEx *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment QueryInterface(MemorySegment struct) {
        return struct.get(QueryInterface$LAYOUT, QueryInterface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IBindStatusCallbackEx *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static void QueryInterface(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(QueryInterface$LAYOUT, QueryInterface$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*AddRef)(IBindStatusCallbackEx *) __attribute__((stdcall))
     * }
     */
    public static class AddRef {

        AddRef() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(AddRef.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(AddRef.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout AddRef$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("AddRef"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IBindStatusCallbackEx *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout AddRef$layout() {
        return AddRef$LAYOUT;
    }

    private static final long AddRef$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IBindStatusCallbackEx *) __attribute__((stdcall))
     * }
     */
    public static final long AddRef$offset() {
        return AddRef$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IBindStatusCallbackEx *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment AddRef(MemorySegment struct) {
        return struct.get(AddRef$LAYOUT, AddRef$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IBindStatusCallbackEx *) __attribute__((stdcall))
     * }
     */
    public static void AddRef(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(AddRef$LAYOUT, AddRef$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*Release)(IBindStatusCallbackEx *) __attribute__((stdcall))
     * }
     */
    public static class Release {

        Release() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Release.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Release.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Release$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Release"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IBindStatusCallbackEx *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Release$layout() {
        return Release$LAYOUT;
    }

    private static final long Release$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IBindStatusCallbackEx *) __attribute__((stdcall))
     * }
     */
    public static final long Release$offset() {
        return Release$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IBindStatusCallbackEx *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Release(MemorySegment struct) {
        return struct.get(Release$LAYOUT, Release$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IBindStatusCallbackEx *) __attribute__((stdcall))
     * }
     */
    public static void Release(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Release$LAYOUT, Release$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*OnStartBinding)(IBindStatusCallbackEx *, DWORD, IBinding *) __attribute__((stdcall))
     * }
     */
    public static class OnStartBinding {

        OnStartBinding() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(OnStartBinding.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(OnStartBinding.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout OnStartBinding$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("OnStartBinding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*OnStartBinding)(IBindStatusCallbackEx *, DWORD, IBinding *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout OnStartBinding$layout() {
        return OnStartBinding$LAYOUT;
    }

    private static final long OnStartBinding$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*OnStartBinding)(IBindStatusCallbackEx *, DWORD, IBinding *) __attribute__((stdcall))
     * }
     */
    public static final long OnStartBinding$offset() {
        return OnStartBinding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*OnStartBinding)(IBindStatusCallbackEx *, DWORD, IBinding *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment OnStartBinding(MemorySegment struct) {
        return struct.get(OnStartBinding$LAYOUT, OnStartBinding$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*OnStartBinding)(IBindStatusCallbackEx *, DWORD, IBinding *) __attribute__((stdcall))
     * }
     */
    public static void OnStartBinding(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(OnStartBinding$LAYOUT, OnStartBinding$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetPriority)(IBindStatusCallbackEx *, LONG *) __attribute__((stdcall))
     * }
     */
    public static class GetPriority {

        GetPriority() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetPriority.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetPriority.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetPriority$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetPriority"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetPriority)(IBindStatusCallbackEx *, LONG *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetPriority$layout() {
        return GetPriority$LAYOUT;
    }

    private static final long GetPriority$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetPriority)(IBindStatusCallbackEx *, LONG *) __attribute__((stdcall))
     * }
     */
    public static final long GetPriority$offset() {
        return GetPriority$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetPriority)(IBindStatusCallbackEx *, LONG *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetPriority(MemorySegment struct) {
        return struct.get(GetPriority$LAYOUT, GetPriority$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetPriority)(IBindStatusCallbackEx *, LONG *) __attribute__((stdcall))
     * }
     */
    public static void GetPriority(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetPriority$LAYOUT, GetPriority$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*OnLowResource)(IBindStatusCallbackEx *, DWORD) __attribute__((stdcall))
     * }
     */
    public static class OnLowResource {

        OnLowResource() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(OnLowResource.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(OnLowResource.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout OnLowResource$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("OnLowResource"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*OnLowResource)(IBindStatusCallbackEx *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout OnLowResource$layout() {
        return OnLowResource$LAYOUT;
    }

    private static final long OnLowResource$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*OnLowResource)(IBindStatusCallbackEx *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final long OnLowResource$offset() {
        return OnLowResource$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*OnLowResource)(IBindStatusCallbackEx *, DWORD) __attribute__((stdcall))
     * }
     */
    public static MemorySegment OnLowResource(MemorySegment struct) {
        return struct.get(OnLowResource$LAYOUT, OnLowResource$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*OnLowResource)(IBindStatusCallbackEx *, DWORD) __attribute__((stdcall))
     * }
     */
    public static void OnLowResource(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(OnLowResource$LAYOUT, OnLowResource$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*OnProgress)(IBindStatusCallbackEx *, ULONG, ULONG, ULONG, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static class OnProgress {

        OnProgress() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, int _x2, int _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(OnProgress.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(OnProgress.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2, int _x3, MemorySegment _x4) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout OnProgress$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("OnProgress"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*OnProgress)(IBindStatusCallbackEx *, ULONG, ULONG, ULONG, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout OnProgress$layout() {
        return OnProgress$LAYOUT;
    }

    private static final long OnProgress$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*OnProgress)(IBindStatusCallbackEx *, ULONG, ULONG, ULONG, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static final long OnProgress$offset() {
        return OnProgress$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*OnProgress)(IBindStatusCallbackEx *, ULONG, ULONG, ULONG, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static MemorySegment OnProgress(MemorySegment struct) {
        return struct.get(OnProgress$LAYOUT, OnProgress$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*OnProgress)(IBindStatusCallbackEx *, ULONG, ULONG, ULONG, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static void OnProgress(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(OnProgress$LAYOUT, OnProgress$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*OnStopBinding)(IBindStatusCallbackEx *, HRESULT, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static class OnStopBinding {

        OnStopBinding() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(OnStopBinding.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(OnStopBinding.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout OnStopBinding$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("OnStopBinding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*OnStopBinding)(IBindStatusCallbackEx *, HRESULT, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout OnStopBinding$layout() {
        return OnStopBinding$LAYOUT;
    }

    private static final long OnStopBinding$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*OnStopBinding)(IBindStatusCallbackEx *, HRESULT, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static final long OnStopBinding$offset() {
        return OnStopBinding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*OnStopBinding)(IBindStatusCallbackEx *, HRESULT, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static MemorySegment OnStopBinding(MemorySegment struct) {
        return struct.get(OnStopBinding$LAYOUT, OnStopBinding$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*OnStopBinding)(IBindStatusCallbackEx *, HRESULT, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static void OnStopBinding(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(OnStopBinding$LAYOUT, OnStopBinding$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetBindInfo)(IBindStatusCallbackEx *, DWORD *, BINDINFO *) __attribute__((stdcall))
     * }
     */
    public static class GetBindInfo {

        GetBindInfo() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetBindInfo.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetBindInfo.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetBindInfo$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetBindInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetBindInfo)(IBindStatusCallbackEx *, DWORD *, BINDINFO *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetBindInfo$layout() {
        return GetBindInfo$LAYOUT;
    }

    private static final long GetBindInfo$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetBindInfo)(IBindStatusCallbackEx *, DWORD *, BINDINFO *) __attribute__((stdcall))
     * }
     */
    public static final long GetBindInfo$offset() {
        return GetBindInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetBindInfo)(IBindStatusCallbackEx *, DWORD *, BINDINFO *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetBindInfo(MemorySegment struct) {
        return struct.get(GetBindInfo$LAYOUT, GetBindInfo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetBindInfo)(IBindStatusCallbackEx *, DWORD *, BINDINFO *) __attribute__((stdcall))
     * }
     */
    public static void GetBindInfo(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetBindInfo$LAYOUT, GetBindInfo$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*OnDataAvailable)(IBindStatusCallbackEx *, DWORD, DWORD, FORMATETC *, STGMEDIUM *) __attribute__((stdcall))
     * }
     */
    public static class OnDataAvailable {

        OnDataAvailable() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, int _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(OnDataAvailable.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(OnDataAvailable.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout OnDataAvailable$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("OnDataAvailable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*OnDataAvailable)(IBindStatusCallbackEx *, DWORD, DWORD, FORMATETC *, STGMEDIUM *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout OnDataAvailable$layout() {
        return OnDataAvailable$LAYOUT;
    }

    private static final long OnDataAvailable$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*OnDataAvailable)(IBindStatusCallbackEx *, DWORD, DWORD, FORMATETC *, STGMEDIUM *) __attribute__((stdcall))
     * }
     */
    public static final long OnDataAvailable$offset() {
        return OnDataAvailable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*OnDataAvailable)(IBindStatusCallbackEx *, DWORD, DWORD, FORMATETC *, STGMEDIUM *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment OnDataAvailable(MemorySegment struct) {
        return struct.get(OnDataAvailable$LAYOUT, OnDataAvailable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*OnDataAvailable)(IBindStatusCallbackEx *, DWORD, DWORD, FORMATETC *, STGMEDIUM *) __attribute__((stdcall))
     * }
     */
    public static void OnDataAvailable(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(OnDataAvailable$LAYOUT, OnDataAvailable$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*OnObjectAvailable)(IBindStatusCallbackEx *, const IID *const, IUnknown *) __attribute__((stdcall))
     * }
     */
    public static class OnObjectAvailable {

        OnObjectAvailable() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(OnObjectAvailable.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(OnObjectAvailable.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout OnObjectAvailable$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("OnObjectAvailable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*OnObjectAvailable)(IBindStatusCallbackEx *, const IID *const, IUnknown *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout OnObjectAvailable$layout() {
        return OnObjectAvailable$LAYOUT;
    }

    private static final long OnObjectAvailable$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*OnObjectAvailable)(IBindStatusCallbackEx *, const IID *const, IUnknown *) __attribute__((stdcall))
     * }
     */
    public static final long OnObjectAvailable$offset() {
        return OnObjectAvailable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*OnObjectAvailable)(IBindStatusCallbackEx *, const IID *const, IUnknown *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment OnObjectAvailable(MemorySegment struct) {
        return struct.get(OnObjectAvailable$LAYOUT, OnObjectAvailable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*OnObjectAvailable)(IBindStatusCallbackEx *, const IID *const, IUnknown *) __attribute__((stdcall))
     * }
     */
    public static void OnObjectAvailable(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(OnObjectAvailable$LAYOUT, OnObjectAvailable$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetBindInfoEx)(IBindStatusCallbackEx *, DWORD *, BINDINFO *, DWORD *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static class GetBindInfoEx {

        GetBindInfoEx() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetBindInfoEx.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetBindInfoEx.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetBindInfoEx$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetBindInfoEx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetBindInfoEx)(IBindStatusCallbackEx *, DWORD *, BINDINFO *, DWORD *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetBindInfoEx$layout() {
        return GetBindInfoEx$LAYOUT;
    }

    private static final long GetBindInfoEx$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetBindInfoEx)(IBindStatusCallbackEx *, DWORD *, BINDINFO *, DWORD *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static final long GetBindInfoEx$offset() {
        return GetBindInfoEx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetBindInfoEx)(IBindStatusCallbackEx *, DWORD *, BINDINFO *, DWORD *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetBindInfoEx(MemorySegment struct) {
        return struct.get(GetBindInfoEx$LAYOUT, GetBindInfoEx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetBindInfoEx)(IBindStatusCallbackEx *, DWORD *, BINDINFO *, DWORD *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static void GetBindInfoEx(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetBindInfoEx$LAYOUT, GetBindInfoEx$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

