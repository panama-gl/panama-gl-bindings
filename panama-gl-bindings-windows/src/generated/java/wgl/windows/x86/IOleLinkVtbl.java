// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct IOleLinkVtbl {
 *     HRESULT (*QueryInterface)(IOleLink *, const IID *const, void **) __attribute__((stdcall));
 *     ULONG (*AddRef)(IOleLink *) __attribute__((stdcall));
 *     ULONG (*Release)(IOleLink *) __attribute__((stdcall));
 *     HRESULT (*SetUpdateOptions)(IOleLink *, DWORD) __attribute__((stdcall));
 *     HRESULT (*GetUpdateOptions)(IOleLink *, DWORD *) __attribute__((stdcall));
 *     HRESULT (*SetSourceMoniker)(IOleLink *, IMoniker *, const IID *const) __attribute__((stdcall));
 *     HRESULT (*GetSourceMoniker)(IOleLink *, IMoniker **) __attribute__((stdcall));
 *     HRESULT (*SetSourceDisplayName)(IOleLink *, LPCOLESTR) __attribute__((stdcall));
 *     HRESULT (*GetSourceDisplayName)(IOleLink *, LPOLESTR *) __attribute__((stdcall));
 *     HRESULT (*BindToSource)(IOleLink *, DWORD, IBindCtx *) __attribute__((stdcall));
 *     HRESULT (*BindIfRunning)(IOleLink *) __attribute__((stdcall));
 *     HRESULT (*GetBoundSource)(IOleLink *, IUnknown **) __attribute__((stdcall));
 *     HRESULT (*UnbindSource)(IOleLink *) __attribute__((stdcall));
 *     HRESULT (*Update)(IOleLink *, IBindCtx *) __attribute__((stdcall));
 * }
 * }
 */
public class IOleLinkVtbl {

    IOleLinkVtbl() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("QueryInterface"),
        wgl_h.C_POINTER.withName("AddRef"),
        wgl_h.C_POINTER.withName("Release"),
        wgl_h.C_POINTER.withName("SetUpdateOptions"),
        wgl_h.C_POINTER.withName("GetUpdateOptions"),
        wgl_h.C_POINTER.withName("SetSourceMoniker"),
        wgl_h.C_POINTER.withName("GetSourceMoniker"),
        wgl_h.C_POINTER.withName("SetSourceDisplayName"),
        wgl_h.C_POINTER.withName("GetSourceDisplayName"),
        wgl_h.C_POINTER.withName("BindToSource"),
        wgl_h.C_POINTER.withName("BindIfRunning"),
        wgl_h.C_POINTER.withName("GetBoundSource"),
        wgl_h.C_POINTER.withName("UnbindSource"),
        wgl_h.C_POINTER.withName("Update")
    ).withName("IOleLinkVtbl");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IOleLink *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static class QueryInterface {

        QueryInterface() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(QueryInterface.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(QueryInterface.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout QueryInterface$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("QueryInterface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IOleLink *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout QueryInterface$layout() {
        return QueryInterface$LAYOUT;
    }

    private static final long QueryInterface$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IOleLink *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final long QueryInterface$offset() {
        return QueryInterface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IOleLink *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment QueryInterface(MemorySegment struct) {
        return struct.get(QueryInterface$LAYOUT, QueryInterface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IOleLink *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static void QueryInterface(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(QueryInterface$LAYOUT, QueryInterface$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*AddRef)(IOleLink *) __attribute__((stdcall))
     * }
     */
    public static class AddRef {

        AddRef() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(AddRef.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(AddRef.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout AddRef$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("AddRef"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IOleLink *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout AddRef$layout() {
        return AddRef$LAYOUT;
    }

    private static final long AddRef$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IOleLink *) __attribute__((stdcall))
     * }
     */
    public static final long AddRef$offset() {
        return AddRef$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IOleLink *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment AddRef(MemorySegment struct) {
        return struct.get(AddRef$LAYOUT, AddRef$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IOleLink *) __attribute__((stdcall))
     * }
     */
    public static void AddRef(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(AddRef$LAYOUT, AddRef$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*Release)(IOleLink *) __attribute__((stdcall))
     * }
     */
    public static class Release {

        Release() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Release.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Release.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Release$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Release"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IOleLink *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Release$layout() {
        return Release$LAYOUT;
    }

    private static final long Release$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IOleLink *) __attribute__((stdcall))
     * }
     */
    public static final long Release$offset() {
        return Release$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IOleLink *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Release(MemorySegment struct) {
        return struct.get(Release$LAYOUT, Release$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IOleLink *) __attribute__((stdcall))
     * }
     */
    public static void Release(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Release$LAYOUT, Release$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetUpdateOptions)(IOleLink *, DWORD) __attribute__((stdcall))
     * }
     */
    public static class SetUpdateOptions {

        SetUpdateOptions() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetUpdateOptions.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetUpdateOptions.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetUpdateOptions$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetUpdateOptions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetUpdateOptions)(IOleLink *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetUpdateOptions$layout() {
        return SetUpdateOptions$LAYOUT;
    }

    private static final long SetUpdateOptions$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetUpdateOptions)(IOleLink *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final long SetUpdateOptions$offset() {
        return SetUpdateOptions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetUpdateOptions)(IOleLink *, DWORD) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetUpdateOptions(MemorySegment struct) {
        return struct.get(SetUpdateOptions$LAYOUT, SetUpdateOptions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetUpdateOptions)(IOleLink *, DWORD) __attribute__((stdcall))
     * }
     */
    public static void SetUpdateOptions(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetUpdateOptions$LAYOUT, SetUpdateOptions$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetUpdateOptions)(IOleLink *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static class GetUpdateOptions {

        GetUpdateOptions() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetUpdateOptions.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetUpdateOptions.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetUpdateOptions$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetUpdateOptions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetUpdateOptions)(IOleLink *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetUpdateOptions$layout() {
        return GetUpdateOptions$LAYOUT;
    }

    private static final long GetUpdateOptions$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetUpdateOptions)(IOleLink *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static final long GetUpdateOptions$offset() {
        return GetUpdateOptions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetUpdateOptions)(IOleLink *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetUpdateOptions(MemorySegment struct) {
        return struct.get(GetUpdateOptions$LAYOUT, GetUpdateOptions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetUpdateOptions)(IOleLink *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static void GetUpdateOptions(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetUpdateOptions$LAYOUT, GetUpdateOptions$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetSourceMoniker)(IOleLink *, IMoniker *, const IID *const) __attribute__((stdcall))
     * }
     */
    public static class SetSourceMoniker {

        SetSourceMoniker() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetSourceMoniker.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetSourceMoniker.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetSourceMoniker$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetSourceMoniker"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetSourceMoniker)(IOleLink *, IMoniker *, const IID *const) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetSourceMoniker$layout() {
        return SetSourceMoniker$LAYOUT;
    }

    private static final long SetSourceMoniker$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetSourceMoniker)(IOleLink *, IMoniker *, const IID *const) __attribute__((stdcall))
     * }
     */
    public static final long SetSourceMoniker$offset() {
        return SetSourceMoniker$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetSourceMoniker)(IOleLink *, IMoniker *, const IID *const) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetSourceMoniker(MemorySegment struct) {
        return struct.get(SetSourceMoniker$LAYOUT, SetSourceMoniker$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetSourceMoniker)(IOleLink *, IMoniker *, const IID *const) __attribute__((stdcall))
     * }
     */
    public static void SetSourceMoniker(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetSourceMoniker$LAYOUT, SetSourceMoniker$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetSourceMoniker)(IOleLink *, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static class GetSourceMoniker {

        GetSourceMoniker() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetSourceMoniker.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetSourceMoniker.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetSourceMoniker$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetSourceMoniker"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetSourceMoniker)(IOleLink *, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetSourceMoniker$layout() {
        return GetSourceMoniker$LAYOUT;
    }

    private static final long GetSourceMoniker$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetSourceMoniker)(IOleLink *, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static final long GetSourceMoniker$offset() {
        return GetSourceMoniker$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetSourceMoniker)(IOleLink *, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetSourceMoniker(MemorySegment struct) {
        return struct.get(GetSourceMoniker$LAYOUT, GetSourceMoniker$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetSourceMoniker)(IOleLink *, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static void GetSourceMoniker(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetSourceMoniker$LAYOUT, GetSourceMoniker$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetSourceDisplayName)(IOleLink *, LPCOLESTR) __attribute__((stdcall))
     * }
     */
    public static class SetSourceDisplayName {

        SetSourceDisplayName() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetSourceDisplayName.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetSourceDisplayName.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetSourceDisplayName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetSourceDisplayName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetSourceDisplayName)(IOleLink *, LPCOLESTR) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetSourceDisplayName$layout() {
        return SetSourceDisplayName$LAYOUT;
    }

    private static final long SetSourceDisplayName$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetSourceDisplayName)(IOleLink *, LPCOLESTR) __attribute__((stdcall))
     * }
     */
    public static final long SetSourceDisplayName$offset() {
        return SetSourceDisplayName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetSourceDisplayName)(IOleLink *, LPCOLESTR) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetSourceDisplayName(MemorySegment struct) {
        return struct.get(SetSourceDisplayName$LAYOUT, SetSourceDisplayName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetSourceDisplayName)(IOleLink *, LPCOLESTR) __attribute__((stdcall))
     * }
     */
    public static void SetSourceDisplayName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetSourceDisplayName$LAYOUT, SetSourceDisplayName$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetSourceDisplayName)(IOleLink *, LPOLESTR *) __attribute__((stdcall))
     * }
     */
    public static class GetSourceDisplayName {

        GetSourceDisplayName() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetSourceDisplayName.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetSourceDisplayName.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetSourceDisplayName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetSourceDisplayName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetSourceDisplayName)(IOleLink *, LPOLESTR *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetSourceDisplayName$layout() {
        return GetSourceDisplayName$LAYOUT;
    }

    private static final long GetSourceDisplayName$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetSourceDisplayName)(IOleLink *, LPOLESTR *) __attribute__((stdcall))
     * }
     */
    public static final long GetSourceDisplayName$offset() {
        return GetSourceDisplayName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetSourceDisplayName)(IOleLink *, LPOLESTR *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetSourceDisplayName(MemorySegment struct) {
        return struct.get(GetSourceDisplayName$LAYOUT, GetSourceDisplayName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetSourceDisplayName)(IOleLink *, LPOLESTR *) __attribute__((stdcall))
     * }
     */
    public static void GetSourceDisplayName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetSourceDisplayName$LAYOUT, GetSourceDisplayName$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*BindToSource)(IOleLink *, DWORD, IBindCtx *) __attribute__((stdcall))
     * }
     */
    public static class BindToSource {

        BindToSource() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(BindToSource.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(BindToSource.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout BindToSource$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("BindToSource"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*BindToSource)(IOleLink *, DWORD, IBindCtx *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout BindToSource$layout() {
        return BindToSource$LAYOUT;
    }

    private static final long BindToSource$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*BindToSource)(IOleLink *, DWORD, IBindCtx *) __attribute__((stdcall))
     * }
     */
    public static final long BindToSource$offset() {
        return BindToSource$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*BindToSource)(IOleLink *, DWORD, IBindCtx *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment BindToSource(MemorySegment struct) {
        return struct.get(BindToSource$LAYOUT, BindToSource$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*BindToSource)(IOleLink *, DWORD, IBindCtx *) __attribute__((stdcall))
     * }
     */
    public static void BindToSource(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(BindToSource$LAYOUT, BindToSource$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*BindIfRunning)(IOleLink *) __attribute__((stdcall))
     * }
     */
    public static class BindIfRunning {

        BindIfRunning() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(BindIfRunning.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(BindIfRunning.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout BindIfRunning$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("BindIfRunning"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*BindIfRunning)(IOleLink *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout BindIfRunning$layout() {
        return BindIfRunning$LAYOUT;
    }

    private static final long BindIfRunning$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*BindIfRunning)(IOleLink *) __attribute__((stdcall))
     * }
     */
    public static final long BindIfRunning$offset() {
        return BindIfRunning$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*BindIfRunning)(IOleLink *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment BindIfRunning(MemorySegment struct) {
        return struct.get(BindIfRunning$LAYOUT, BindIfRunning$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*BindIfRunning)(IOleLink *) __attribute__((stdcall))
     * }
     */
    public static void BindIfRunning(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(BindIfRunning$LAYOUT, BindIfRunning$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetBoundSource)(IOleLink *, IUnknown **) __attribute__((stdcall))
     * }
     */
    public static class GetBoundSource {

        GetBoundSource() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetBoundSource.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetBoundSource.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetBoundSource$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetBoundSource"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetBoundSource)(IOleLink *, IUnknown **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetBoundSource$layout() {
        return GetBoundSource$LAYOUT;
    }

    private static final long GetBoundSource$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetBoundSource)(IOleLink *, IUnknown **) __attribute__((stdcall))
     * }
     */
    public static final long GetBoundSource$offset() {
        return GetBoundSource$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetBoundSource)(IOleLink *, IUnknown **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetBoundSource(MemorySegment struct) {
        return struct.get(GetBoundSource$LAYOUT, GetBoundSource$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetBoundSource)(IOleLink *, IUnknown **) __attribute__((stdcall))
     * }
     */
    public static void GetBoundSource(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetBoundSource$LAYOUT, GetBoundSource$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*UnbindSource)(IOleLink *) __attribute__((stdcall))
     * }
     */
    public static class UnbindSource {

        UnbindSource() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(UnbindSource.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(UnbindSource.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout UnbindSource$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("UnbindSource"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*UnbindSource)(IOleLink *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout UnbindSource$layout() {
        return UnbindSource$LAYOUT;
    }

    private static final long UnbindSource$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*UnbindSource)(IOleLink *) __attribute__((stdcall))
     * }
     */
    public static final long UnbindSource$offset() {
        return UnbindSource$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*UnbindSource)(IOleLink *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment UnbindSource(MemorySegment struct) {
        return struct.get(UnbindSource$LAYOUT, UnbindSource$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*UnbindSource)(IOleLink *) __attribute__((stdcall))
     * }
     */
    public static void UnbindSource(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(UnbindSource$LAYOUT, UnbindSource$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*Update)(IOleLink *, IBindCtx *) __attribute__((stdcall))
     * }
     */
    public static class Update {

        Update() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Update.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Update.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Update$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Update"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*Update)(IOleLink *, IBindCtx *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Update$layout() {
        return Update$LAYOUT;
    }

    private static final long Update$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*Update)(IOleLink *, IBindCtx *) __attribute__((stdcall))
     * }
     */
    public static final long Update$offset() {
        return Update$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*Update)(IOleLink *, IBindCtx *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Update(MemorySegment struct) {
        return struct.get(Update$LAYOUT, Update$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*Update)(IOleLink *, IBindCtx *) __attribute__((stdcall))
     * }
     */
    public static void Update(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Update$LAYOUT, Update$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

