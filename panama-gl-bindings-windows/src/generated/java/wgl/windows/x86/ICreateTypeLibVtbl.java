// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ICreateTypeLibVtbl {
 *     HRESULT (*QueryInterface)(ICreateTypeLib *, const IID *const, void **) __attribute__((stdcall));
 *     ULONG (*AddRef)(ICreateTypeLib *) __attribute__((stdcall));
 *     ULONG (*Release)(ICreateTypeLib *) __attribute__((stdcall));
 *     HRESULT (*CreateTypeInfo)(ICreateTypeLib *, LPOLESTR, TYPEKIND, ICreateTypeInfo **) __attribute__((stdcall));
 *     HRESULT (*SetName)(ICreateTypeLib *, LPOLESTR) __attribute__((stdcall));
 *     HRESULT (*SetVersion)(ICreateTypeLib *, WORD, WORD) __attribute__((stdcall));
 *     HRESULT (*SetGuid)(ICreateTypeLib *, const GUID *const) __attribute__((stdcall));
 *     HRESULT (*SetDocString)(ICreateTypeLib *, LPOLESTR) __attribute__((stdcall));
 *     HRESULT (*SetHelpFileName)(ICreateTypeLib *, LPOLESTR) __attribute__((stdcall));
 *     HRESULT (*SetHelpContext)(ICreateTypeLib *, DWORD) __attribute__((stdcall));
 *     HRESULT (*SetLcid)(ICreateTypeLib *, LCID) __attribute__((stdcall));
 *     HRESULT (*SetLibFlags)(ICreateTypeLib *, UINT) __attribute__((stdcall));
 *     HRESULT (*SaveAllChanges)(ICreateTypeLib *) __attribute__((stdcall));
 * }
 * }
 */
public class ICreateTypeLibVtbl {

    ICreateTypeLibVtbl() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("QueryInterface"),
        wgl_h.C_POINTER.withName("AddRef"),
        wgl_h.C_POINTER.withName("Release"),
        wgl_h.C_POINTER.withName("CreateTypeInfo"),
        wgl_h.C_POINTER.withName("SetName"),
        wgl_h.C_POINTER.withName("SetVersion"),
        wgl_h.C_POINTER.withName("SetGuid"),
        wgl_h.C_POINTER.withName("SetDocString"),
        wgl_h.C_POINTER.withName("SetHelpFileName"),
        wgl_h.C_POINTER.withName("SetHelpContext"),
        wgl_h.C_POINTER.withName("SetLcid"),
        wgl_h.C_POINTER.withName("SetLibFlags"),
        wgl_h.C_POINTER.withName("SaveAllChanges")
    ).withName("ICreateTypeLibVtbl");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(ICreateTypeLib *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static class QueryInterface {

        QueryInterface() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(QueryInterface.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(QueryInterface.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout QueryInterface$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("QueryInterface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(ICreateTypeLib *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout QueryInterface$layout() {
        return QueryInterface$LAYOUT;
    }

    private static final long QueryInterface$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(ICreateTypeLib *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final long QueryInterface$offset() {
        return QueryInterface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(ICreateTypeLib *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment QueryInterface(MemorySegment struct) {
        return struct.get(QueryInterface$LAYOUT, QueryInterface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(ICreateTypeLib *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static void QueryInterface(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(QueryInterface$LAYOUT, QueryInterface$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*AddRef)(ICreateTypeLib *) __attribute__((stdcall))
     * }
     */
    public static class AddRef {

        AddRef() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(AddRef.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(AddRef.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout AddRef$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("AddRef"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(ICreateTypeLib *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout AddRef$layout() {
        return AddRef$LAYOUT;
    }

    private static final long AddRef$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(ICreateTypeLib *) __attribute__((stdcall))
     * }
     */
    public static final long AddRef$offset() {
        return AddRef$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(ICreateTypeLib *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment AddRef(MemorySegment struct) {
        return struct.get(AddRef$LAYOUT, AddRef$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(ICreateTypeLib *) __attribute__((stdcall))
     * }
     */
    public static void AddRef(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(AddRef$LAYOUT, AddRef$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*Release)(ICreateTypeLib *) __attribute__((stdcall))
     * }
     */
    public static class Release {

        Release() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Release.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Release.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Release$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Release"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*Release)(ICreateTypeLib *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Release$layout() {
        return Release$LAYOUT;
    }

    private static final long Release$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*Release)(ICreateTypeLib *) __attribute__((stdcall))
     * }
     */
    public static final long Release$offset() {
        return Release$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(ICreateTypeLib *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Release(MemorySegment struct) {
        return struct.get(Release$LAYOUT, Release$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(ICreateTypeLib *) __attribute__((stdcall))
     * }
     */
    public static void Release(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Release$LAYOUT, Release$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*CreateTypeInfo)(ICreateTypeLib *, LPOLESTR, TYPEKIND, ICreateTypeInfo **) __attribute__((stdcall))
     * }
     */
    public static class CreateTypeInfo {

        CreateTypeInfo() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(CreateTypeInfo.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(CreateTypeInfo.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout CreateTypeInfo$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("CreateTypeInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*CreateTypeInfo)(ICreateTypeLib *, LPOLESTR, TYPEKIND, ICreateTypeInfo **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout CreateTypeInfo$layout() {
        return CreateTypeInfo$LAYOUT;
    }

    private static final long CreateTypeInfo$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*CreateTypeInfo)(ICreateTypeLib *, LPOLESTR, TYPEKIND, ICreateTypeInfo **) __attribute__((stdcall))
     * }
     */
    public static final long CreateTypeInfo$offset() {
        return CreateTypeInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*CreateTypeInfo)(ICreateTypeLib *, LPOLESTR, TYPEKIND, ICreateTypeInfo **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment CreateTypeInfo(MemorySegment struct) {
        return struct.get(CreateTypeInfo$LAYOUT, CreateTypeInfo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*CreateTypeInfo)(ICreateTypeLib *, LPOLESTR, TYPEKIND, ICreateTypeInfo **) __attribute__((stdcall))
     * }
     */
    public static void CreateTypeInfo(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(CreateTypeInfo$LAYOUT, CreateTypeInfo$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetName)(ICreateTypeLib *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static class SetName {

        SetName() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetName.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetName.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetName)(ICreateTypeLib *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetName$layout() {
        return SetName$LAYOUT;
    }

    private static final long SetName$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetName)(ICreateTypeLib *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static final long SetName$offset() {
        return SetName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetName)(ICreateTypeLib *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetName(MemorySegment struct) {
        return struct.get(SetName$LAYOUT, SetName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetName)(ICreateTypeLib *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static void SetName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetName$LAYOUT, SetName$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetVersion)(ICreateTypeLib *, WORD, WORD) __attribute__((stdcall))
     * }
     */
    public static class SetVersion {

        SetVersion() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, short _x1, short _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_SHORT,
            wgl_h.C_SHORT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetVersion.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetVersion.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, short _x1, short _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetVersion$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetVersion)(ICreateTypeLib *, WORD, WORD) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetVersion$layout() {
        return SetVersion$LAYOUT;
    }

    private static final long SetVersion$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetVersion)(ICreateTypeLib *, WORD, WORD) __attribute__((stdcall))
     * }
     */
    public static final long SetVersion$offset() {
        return SetVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetVersion)(ICreateTypeLib *, WORD, WORD) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetVersion(MemorySegment struct) {
        return struct.get(SetVersion$LAYOUT, SetVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetVersion)(ICreateTypeLib *, WORD, WORD) __attribute__((stdcall))
     * }
     */
    public static void SetVersion(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetVersion$LAYOUT, SetVersion$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetGuid)(ICreateTypeLib *, const GUID *const) __attribute__((stdcall))
     * }
     */
    public static class SetGuid {

        SetGuid() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetGuid.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetGuid.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetGuid$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetGuid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetGuid)(ICreateTypeLib *, const GUID *const) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetGuid$layout() {
        return SetGuid$LAYOUT;
    }

    private static final long SetGuid$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetGuid)(ICreateTypeLib *, const GUID *const) __attribute__((stdcall))
     * }
     */
    public static final long SetGuid$offset() {
        return SetGuid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetGuid)(ICreateTypeLib *, const GUID *const) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetGuid(MemorySegment struct) {
        return struct.get(SetGuid$LAYOUT, SetGuid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetGuid)(ICreateTypeLib *, const GUID *const) __attribute__((stdcall))
     * }
     */
    public static void SetGuid(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetGuid$LAYOUT, SetGuid$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetDocString)(ICreateTypeLib *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static class SetDocString {

        SetDocString() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetDocString.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetDocString.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetDocString$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetDocString"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetDocString)(ICreateTypeLib *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetDocString$layout() {
        return SetDocString$LAYOUT;
    }

    private static final long SetDocString$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetDocString)(ICreateTypeLib *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static final long SetDocString$offset() {
        return SetDocString$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetDocString)(ICreateTypeLib *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetDocString(MemorySegment struct) {
        return struct.get(SetDocString$LAYOUT, SetDocString$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetDocString)(ICreateTypeLib *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static void SetDocString(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetDocString$LAYOUT, SetDocString$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetHelpFileName)(ICreateTypeLib *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static class SetHelpFileName {

        SetHelpFileName() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetHelpFileName.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetHelpFileName.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetHelpFileName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetHelpFileName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetHelpFileName)(ICreateTypeLib *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetHelpFileName$layout() {
        return SetHelpFileName$LAYOUT;
    }

    private static final long SetHelpFileName$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetHelpFileName)(ICreateTypeLib *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static final long SetHelpFileName$offset() {
        return SetHelpFileName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetHelpFileName)(ICreateTypeLib *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetHelpFileName(MemorySegment struct) {
        return struct.get(SetHelpFileName$LAYOUT, SetHelpFileName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetHelpFileName)(ICreateTypeLib *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static void SetHelpFileName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetHelpFileName$LAYOUT, SetHelpFileName$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetHelpContext)(ICreateTypeLib *, DWORD) __attribute__((stdcall))
     * }
     */
    public static class SetHelpContext {

        SetHelpContext() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetHelpContext.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetHelpContext.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetHelpContext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetHelpContext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetHelpContext)(ICreateTypeLib *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetHelpContext$layout() {
        return SetHelpContext$LAYOUT;
    }

    private static final long SetHelpContext$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetHelpContext)(ICreateTypeLib *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final long SetHelpContext$offset() {
        return SetHelpContext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetHelpContext)(ICreateTypeLib *, DWORD) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetHelpContext(MemorySegment struct) {
        return struct.get(SetHelpContext$LAYOUT, SetHelpContext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetHelpContext)(ICreateTypeLib *, DWORD) __attribute__((stdcall))
     * }
     */
    public static void SetHelpContext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetHelpContext$LAYOUT, SetHelpContext$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetLcid)(ICreateTypeLib *, LCID) __attribute__((stdcall))
     * }
     */
    public static class SetLcid {

        SetLcid() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetLcid.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetLcid.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetLcid$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetLcid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetLcid)(ICreateTypeLib *, LCID) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetLcid$layout() {
        return SetLcid$LAYOUT;
    }

    private static final long SetLcid$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetLcid)(ICreateTypeLib *, LCID) __attribute__((stdcall))
     * }
     */
    public static final long SetLcid$offset() {
        return SetLcid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetLcid)(ICreateTypeLib *, LCID) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetLcid(MemorySegment struct) {
        return struct.get(SetLcid$LAYOUT, SetLcid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetLcid)(ICreateTypeLib *, LCID) __attribute__((stdcall))
     * }
     */
    public static void SetLcid(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetLcid$LAYOUT, SetLcid$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetLibFlags)(ICreateTypeLib *, UINT) __attribute__((stdcall))
     * }
     */
    public static class SetLibFlags {

        SetLibFlags() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetLibFlags.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetLibFlags.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetLibFlags$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetLibFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetLibFlags)(ICreateTypeLib *, UINT) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetLibFlags$layout() {
        return SetLibFlags$LAYOUT;
    }

    private static final long SetLibFlags$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetLibFlags)(ICreateTypeLib *, UINT) __attribute__((stdcall))
     * }
     */
    public static final long SetLibFlags$offset() {
        return SetLibFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetLibFlags)(ICreateTypeLib *, UINT) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetLibFlags(MemorySegment struct) {
        return struct.get(SetLibFlags$LAYOUT, SetLibFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetLibFlags)(ICreateTypeLib *, UINT) __attribute__((stdcall))
     * }
     */
    public static void SetLibFlags(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetLibFlags$LAYOUT, SetLibFlags$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SaveAllChanges)(ICreateTypeLib *) __attribute__((stdcall))
     * }
     */
    public static class SaveAllChanges {

        SaveAllChanges() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SaveAllChanges.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SaveAllChanges.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SaveAllChanges$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SaveAllChanges"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SaveAllChanges)(ICreateTypeLib *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SaveAllChanges$layout() {
        return SaveAllChanges$LAYOUT;
    }

    private static final long SaveAllChanges$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SaveAllChanges)(ICreateTypeLib *) __attribute__((stdcall))
     * }
     */
    public static final long SaveAllChanges$offset() {
        return SaveAllChanges$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SaveAllChanges)(ICreateTypeLib *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SaveAllChanges(MemorySegment struct) {
        return struct.get(SaveAllChanges$LAYOUT, SaveAllChanges$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SaveAllChanges)(ICreateTypeLib *) __attribute__((stdcall))
     * }
     */
    public static void SaveAllChanges(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SaveAllChanges$LAYOUT, SaveAllChanges$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

