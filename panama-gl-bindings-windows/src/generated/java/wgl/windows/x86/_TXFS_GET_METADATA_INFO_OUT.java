// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _TXFS_GET_METADATA_INFO_OUT {
 *     struct {
 *         LONGLONG LowPart;
 *         LONGLONG HighPart;
 *     } TxfFileId;
 *     GUID LockingTransaction;
 *     DWORDLONG LastLsn;
 *     DWORD TransactionState;
 * }
 * }
 */
public class _TXFS_GET_METADATA_INFO_OUT {

    _TXFS_GET_METADATA_INFO_OUT() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _TXFS_GET_METADATA_INFO_OUT.TxfFileId.layout().withName("TxfFileId"),
        _GUID.layout().withName("LockingTransaction"),
        wgl_h.C_LONG_LONG.withName("LastLsn"),
        wgl_h.C_LONG.withName("TransactionState"),
        MemoryLayout.paddingLayout(4)
    ).withName("_TXFS_GET_METADATA_INFO_OUT");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     LONGLONG LowPart;
     *     LONGLONG HighPart;
     * }
     * }
     */
    public static class TxfFileId {

        TxfFileId() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            wgl_h.C_LONG_LONG.withName("LowPart"),
            wgl_h.C_LONG_LONG.withName("HighPart")
        ).withName("$anon$12717:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfLong LowPart$LAYOUT = (OfLong)$LAYOUT.select(groupElement("LowPart"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * LONGLONG LowPart
         * }
         */
        public static final OfLong LowPart$layout() {
            return LowPart$LAYOUT;
        }

        private static final long LowPart$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * LONGLONG LowPart
         * }
         */
        public static final long LowPart$offset() {
            return LowPart$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * LONGLONG LowPart
         * }
         */
        public static long LowPart(MemorySegment struct) {
            return struct.get(LowPart$LAYOUT, LowPart$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * LONGLONG LowPart
         * }
         */
        public static void LowPart(MemorySegment struct, long fieldValue) {
            struct.set(LowPart$LAYOUT, LowPart$OFFSET, fieldValue);
        }

        private static final OfLong HighPart$LAYOUT = (OfLong)$LAYOUT.select(groupElement("HighPart"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * LONGLONG HighPart
         * }
         */
        public static final OfLong HighPart$layout() {
            return HighPart$LAYOUT;
        }

        private static final long HighPart$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * LONGLONG HighPart
         * }
         */
        public static final long HighPart$offset() {
            return HighPart$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * LONGLONG HighPart
         * }
         */
        public static long HighPart(MemorySegment struct) {
            return struct.get(HighPart$LAYOUT, HighPart$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * LONGLONG HighPart
         * }
         */
        public static void HighPart(MemorySegment struct, long fieldValue) {
            struct.set(HighPart$LAYOUT, HighPart$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout TxfFileId$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TxfFileId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     LONGLONG LowPart;
     *     LONGLONG HighPart;
     * } TxfFileId
     * }
     */
    public static final GroupLayout TxfFileId$layout() {
        return TxfFileId$LAYOUT;
    }

    private static final long TxfFileId$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     LONGLONG LowPart;
     *     LONGLONG HighPart;
     * } TxfFileId
     * }
     */
    public static final long TxfFileId$offset() {
        return TxfFileId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     LONGLONG LowPart;
     *     LONGLONG HighPart;
     * } TxfFileId
     * }
     */
    public static MemorySegment TxfFileId(MemorySegment struct) {
        return struct.asSlice(TxfFileId$OFFSET, TxfFileId$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     LONGLONG LowPart;
     *     LONGLONG HighPart;
     * } TxfFileId
     * }
     */
    public static void TxfFileId(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, TxfFileId$OFFSET, TxfFileId$LAYOUT.byteSize());
    }

    private static final GroupLayout LockingTransaction$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("LockingTransaction"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GUID LockingTransaction
     * }
     */
    public static final GroupLayout LockingTransaction$layout() {
        return LockingTransaction$LAYOUT;
    }

    private static final long LockingTransaction$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GUID LockingTransaction
     * }
     */
    public static final long LockingTransaction$offset() {
        return LockingTransaction$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GUID LockingTransaction
     * }
     */
    public static MemorySegment LockingTransaction(MemorySegment struct) {
        return struct.asSlice(LockingTransaction$OFFSET, LockingTransaction$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GUID LockingTransaction
     * }
     */
    public static void LockingTransaction(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, LockingTransaction$OFFSET, LockingTransaction$LAYOUT.byteSize());
    }

    private static final OfLong LastLsn$LAYOUT = (OfLong)$LAYOUT.select(groupElement("LastLsn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG LastLsn
     * }
     */
    public static final OfLong LastLsn$layout() {
        return LastLsn$LAYOUT;
    }

    private static final long LastLsn$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG LastLsn
     * }
     */
    public static final long LastLsn$offset() {
        return LastLsn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG LastLsn
     * }
     */
    public static long LastLsn(MemorySegment struct) {
        return struct.get(LastLsn$LAYOUT, LastLsn$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG LastLsn
     * }
     */
    public static void LastLsn(MemorySegment struct, long fieldValue) {
        struct.set(LastLsn$LAYOUT, LastLsn$OFFSET, fieldValue);
    }

    private static final OfInt TransactionState$LAYOUT = (OfInt)$LAYOUT.select(groupElement("TransactionState"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD TransactionState
     * }
     */
    public static final OfInt TransactionState$layout() {
        return TransactionState$LAYOUT;
    }

    private static final long TransactionState$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD TransactionState
     * }
     */
    public static final long TransactionState$offset() {
        return TransactionState$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD TransactionState
     * }
     */
    public static int TransactionState(MemorySegment struct) {
        return struct.get(TransactionState$LAYOUT, TransactionState$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD TransactionState
     * }
     */
    public static void TransactionState(MemorySegment struct, int fieldValue) {
        struct.set(TransactionState$LAYOUT, TransactionState$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

