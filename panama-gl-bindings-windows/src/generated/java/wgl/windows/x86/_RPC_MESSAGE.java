// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _RPC_MESSAGE {
 *     RPC_BINDING_HANDLE Handle;
 *     unsigned long DataRepresentation;
 *     void *Buffer;
 *     unsigned int BufferLength;
 *     unsigned int ProcNum;
 *     PRPC_SYNTAX_IDENTIFIER TransferSyntax;
 *     void *RpcInterfaceInformation;
 *     void *ReservedForRuntime;
 *     void *ManagerEpv;
 *     void *ImportContext;
 *     unsigned long RpcFlags;
 * }
 * }
 */
public class _RPC_MESSAGE {

    _RPC_MESSAGE() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("Handle"),
        wgl_h.C_LONG.withName("DataRepresentation"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_POINTER.withName("Buffer"),
        wgl_h.C_INT.withName("BufferLength"),
        wgl_h.C_INT.withName("ProcNum"),
        wgl_h.C_POINTER.withName("TransferSyntax"),
        wgl_h.C_POINTER.withName("RpcInterfaceInformation"),
        wgl_h.C_POINTER.withName("ReservedForRuntime"),
        wgl_h.C_POINTER.withName("ManagerEpv"),
        wgl_h.C_POINTER.withName("ImportContext"),
        wgl_h.C_LONG.withName("RpcFlags"),
        MemoryLayout.paddingLayout(4)
    ).withName("_RPC_MESSAGE");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout Handle$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Handle"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * RPC_BINDING_HANDLE Handle
     * }
     */
    public static final AddressLayout Handle$layout() {
        return Handle$LAYOUT;
    }

    private static final long Handle$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * RPC_BINDING_HANDLE Handle
     * }
     */
    public static final long Handle$offset() {
        return Handle$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * RPC_BINDING_HANDLE Handle
     * }
     */
    public static MemorySegment Handle(MemorySegment struct) {
        return struct.get(Handle$LAYOUT, Handle$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * RPC_BINDING_HANDLE Handle
     * }
     */
    public static void Handle(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Handle$LAYOUT, Handle$OFFSET, fieldValue);
    }

    private static final OfInt DataRepresentation$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DataRepresentation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long DataRepresentation
     * }
     */
    public static final OfInt DataRepresentation$layout() {
        return DataRepresentation$LAYOUT;
    }

    private static final long DataRepresentation$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long DataRepresentation
     * }
     */
    public static final long DataRepresentation$offset() {
        return DataRepresentation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long DataRepresentation
     * }
     */
    public static int DataRepresentation(MemorySegment struct) {
        return struct.get(DataRepresentation$LAYOUT, DataRepresentation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long DataRepresentation
     * }
     */
    public static void DataRepresentation(MemorySegment struct, int fieldValue) {
        struct.set(DataRepresentation$LAYOUT, DataRepresentation$OFFSET, fieldValue);
    }

    private static final AddressLayout Buffer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Buffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *Buffer
     * }
     */
    public static final AddressLayout Buffer$layout() {
        return Buffer$LAYOUT;
    }

    private static final long Buffer$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *Buffer
     * }
     */
    public static final long Buffer$offset() {
        return Buffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *Buffer
     * }
     */
    public static MemorySegment Buffer(MemorySegment struct) {
        return struct.get(Buffer$LAYOUT, Buffer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *Buffer
     * }
     */
    public static void Buffer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Buffer$LAYOUT, Buffer$OFFSET, fieldValue);
    }

    private static final OfInt BufferLength$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BufferLength"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int BufferLength
     * }
     */
    public static final OfInt BufferLength$layout() {
        return BufferLength$LAYOUT;
    }

    private static final long BufferLength$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int BufferLength
     * }
     */
    public static final long BufferLength$offset() {
        return BufferLength$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int BufferLength
     * }
     */
    public static int BufferLength(MemorySegment struct) {
        return struct.get(BufferLength$LAYOUT, BufferLength$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int BufferLength
     * }
     */
    public static void BufferLength(MemorySegment struct, int fieldValue) {
        struct.set(BufferLength$LAYOUT, BufferLength$OFFSET, fieldValue);
    }

    private static final OfInt ProcNum$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ProcNum"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int ProcNum
     * }
     */
    public static final OfInt ProcNum$layout() {
        return ProcNum$LAYOUT;
    }

    private static final long ProcNum$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int ProcNum
     * }
     */
    public static final long ProcNum$offset() {
        return ProcNum$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int ProcNum
     * }
     */
    public static int ProcNum(MemorySegment struct) {
        return struct.get(ProcNum$LAYOUT, ProcNum$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int ProcNum
     * }
     */
    public static void ProcNum(MemorySegment struct, int fieldValue) {
        struct.set(ProcNum$LAYOUT, ProcNum$OFFSET, fieldValue);
    }

    private static final AddressLayout TransferSyntax$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("TransferSyntax"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PRPC_SYNTAX_IDENTIFIER TransferSyntax
     * }
     */
    public static final AddressLayout TransferSyntax$layout() {
        return TransferSyntax$LAYOUT;
    }

    private static final long TransferSyntax$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PRPC_SYNTAX_IDENTIFIER TransferSyntax
     * }
     */
    public static final long TransferSyntax$offset() {
        return TransferSyntax$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PRPC_SYNTAX_IDENTIFIER TransferSyntax
     * }
     */
    public static MemorySegment TransferSyntax(MemorySegment struct) {
        return struct.get(TransferSyntax$LAYOUT, TransferSyntax$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PRPC_SYNTAX_IDENTIFIER TransferSyntax
     * }
     */
    public static void TransferSyntax(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(TransferSyntax$LAYOUT, TransferSyntax$OFFSET, fieldValue);
    }

    private static final AddressLayout RpcInterfaceInformation$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("RpcInterfaceInformation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *RpcInterfaceInformation
     * }
     */
    public static final AddressLayout RpcInterfaceInformation$layout() {
        return RpcInterfaceInformation$LAYOUT;
    }

    private static final long RpcInterfaceInformation$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *RpcInterfaceInformation
     * }
     */
    public static final long RpcInterfaceInformation$offset() {
        return RpcInterfaceInformation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *RpcInterfaceInformation
     * }
     */
    public static MemorySegment RpcInterfaceInformation(MemorySegment struct) {
        return struct.get(RpcInterfaceInformation$LAYOUT, RpcInterfaceInformation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *RpcInterfaceInformation
     * }
     */
    public static void RpcInterfaceInformation(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(RpcInterfaceInformation$LAYOUT, RpcInterfaceInformation$OFFSET, fieldValue);
    }

    private static final AddressLayout ReservedForRuntime$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ReservedForRuntime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *ReservedForRuntime
     * }
     */
    public static final AddressLayout ReservedForRuntime$layout() {
        return ReservedForRuntime$LAYOUT;
    }

    private static final long ReservedForRuntime$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *ReservedForRuntime
     * }
     */
    public static final long ReservedForRuntime$offset() {
        return ReservedForRuntime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *ReservedForRuntime
     * }
     */
    public static MemorySegment ReservedForRuntime(MemorySegment struct) {
        return struct.get(ReservedForRuntime$LAYOUT, ReservedForRuntime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *ReservedForRuntime
     * }
     */
    public static void ReservedForRuntime(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ReservedForRuntime$LAYOUT, ReservedForRuntime$OFFSET, fieldValue);
    }

    private static final AddressLayout ManagerEpv$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ManagerEpv"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *ManagerEpv
     * }
     */
    public static final AddressLayout ManagerEpv$layout() {
        return ManagerEpv$LAYOUT;
    }

    private static final long ManagerEpv$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *ManagerEpv
     * }
     */
    public static final long ManagerEpv$offset() {
        return ManagerEpv$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *ManagerEpv
     * }
     */
    public static MemorySegment ManagerEpv(MemorySegment struct) {
        return struct.get(ManagerEpv$LAYOUT, ManagerEpv$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *ManagerEpv
     * }
     */
    public static void ManagerEpv(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ManagerEpv$LAYOUT, ManagerEpv$OFFSET, fieldValue);
    }

    private static final AddressLayout ImportContext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ImportContext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *ImportContext
     * }
     */
    public static final AddressLayout ImportContext$layout() {
        return ImportContext$LAYOUT;
    }

    private static final long ImportContext$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *ImportContext
     * }
     */
    public static final long ImportContext$offset() {
        return ImportContext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *ImportContext
     * }
     */
    public static MemorySegment ImportContext(MemorySegment struct) {
        return struct.get(ImportContext$LAYOUT, ImportContext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *ImportContext
     * }
     */
    public static void ImportContext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ImportContext$LAYOUT, ImportContext$OFFSET, fieldValue);
    }

    private static final OfInt RpcFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("RpcFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long RpcFlags
     * }
     */
    public static final OfInt RpcFlags$layout() {
        return RpcFlags$LAYOUT;
    }

    private static final long RpcFlags$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long RpcFlags
     * }
     */
    public static final long RpcFlags$offset() {
        return RpcFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long RpcFlags
     * }
     */
    public static int RpcFlags(MemorySegment struct) {
        return struct.get(RpcFlags$LAYOUT, RpcFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long RpcFlags
     * }
     */
    public static void RpcFlags(MemorySegment struct, int fieldValue) {
        struct.set(RpcFlags$LAYOUT, RpcFlags$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

