// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _KEY_EVENT_RECORD {
 *     BOOL bKeyDown;
 *     WORD wRepeatCount;
 *     WORD wVirtualKeyCode;
 *     WORD wVirtualScanCode;
 *     union {
 *         WCHAR UnicodeChar;
 *         CHAR AsciiChar;
 *     } uChar;
 *     DWORD dwControlKeyState;
 * }
 * }
 */
public class _KEY_EVENT_RECORD {

    _KEY_EVENT_RECORD() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_INT.withName("bKeyDown"),
        wgl_h.C_SHORT.withName("wRepeatCount"),
        wgl_h.C_SHORT.withName("wVirtualKeyCode"),
        wgl_h.C_SHORT.withName("wVirtualScanCode"),
        _KEY_EVENT_RECORD.uChar.layout().withName("uChar"),
        wgl_h.C_LONG.withName("dwControlKeyState")
    ).withName("_KEY_EVENT_RECORD");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt bKeyDown$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bKeyDown"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOL bKeyDown
     * }
     */
    public static final OfInt bKeyDown$layout() {
        return bKeyDown$LAYOUT;
    }

    private static final long bKeyDown$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOL bKeyDown
     * }
     */
    public static final long bKeyDown$offset() {
        return bKeyDown$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOL bKeyDown
     * }
     */
    public static int bKeyDown(MemorySegment struct) {
        return struct.get(bKeyDown$LAYOUT, bKeyDown$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOL bKeyDown
     * }
     */
    public static void bKeyDown(MemorySegment struct, int fieldValue) {
        struct.set(bKeyDown$LAYOUT, bKeyDown$OFFSET, fieldValue);
    }

    private static final OfShort wRepeatCount$LAYOUT = (OfShort)$LAYOUT.select(groupElement("wRepeatCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD wRepeatCount
     * }
     */
    public static final OfShort wRepeatCount$layout() {
        return wRepeatCount$LAYOUT;
    }

    private static final long wRepeatCount$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD wRepeatCount
     * }
     */
    public static final long wRepeatCount$offset() {
        return wRepeatCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD wRepeatCount
     * }
     */
    public static short wRepeatCount(MemorySegment struct) {
        return struct.get(wRepeatCount$LAYOUT, wRepeatCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD wRepeatCount
     * }
     */
    public static void wRepeatCount(MemorySegment struct, short fieldValue) {
        struct.set(wRepeatCount$LAYOUT, wRepeatCount$OFFSET, fieldValue);
    }

    private static final OfShort wVirtualKeyCode$LAYOUT = (OfShort)$LAYOUT.select(groupElement("wVirtualKeyCode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD wVirtualKeyCode
     * }
     */
    public static final OfShort wVirtualKeyCode$layout() {
        return wVirtualKeyCode$LAYOUT;
    }

    private static final long wVirtualKeyCode$OFFSET = 6;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD wVirtualKeyCode
     * }
     */
    public static final long wVirtualKeyCode$offset() {
        return wVirtualKeyCode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD wVirtualKeyCode
     * }
     */
    public static short wVirtualKeyCode(MemorySegment struct) {
        return struct.get(wVirtualKeyCode$LAYOUT, wVirtualKeyCode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD wVirtualKeyCode
     * }
     */
    public static void wVirtualKeyCode(MemorySegment struct, short fieldValue) {
        struct.set(wVirtualKeyCode$LAYOUT, wVirtualKeyCode$OFFSET, fieldValue);
    }

    private static final OfShort wVirtualScanCode$LAYOUT = (OfShort)$LAYOUT.select(groupElement("wVirtualScanCode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD wVirtualScanCode
     * }
     */
    public static final OfShort wVirtualScanCode$layout() {
        return wVirtualScanCode$LAYOUT;
    }

    private static final long wVirtualScanCode$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD wVirtualScanCode
     * }
     */
    public static final long wVirtualScanCode$offset() {
        return wVirtualScanCode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD wVirtualScanCode
     * }
     */
    public static short wVirtualScanCode(MemorySegment struct) {
        return struct.get(wVirtualScanCode$LAYOUT, wVirtualScanCode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD wVirtualScanCode
     * }
     */
    public static void wVirtualScanCode(MemorySegment struct, short fieldValue) {
        struct.set(wVirtualScanCode$LAYOUT, wVirtualScanCode$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * union {
     *     WCHAR UnicodeChar;
     *     CHAR AsciiChar;
     * }
     * }
     */
    public static class uChar {

        uChar() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
            wgl_h.C_SHORT.withName("UnicodeChar"),
            wgl_h.C_CHAR.withName("AsciiChar")
        ).withName("$anon$53:5");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfShort UnicodeChar$LAYOUT = (OfShort)$LAYOUT.select(groupElement("UnicodeChar"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * WCHAR UnicodeChar
         * }
         */
        public static final OfShort UnicodeChar$layout() {
            return UnicodeChar$LAYOUT;
        }

        private static final long UnicodeChar$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * WCHAR UnicodeChar
         * }
         */
        public static final long UnicodeChar$offset() {
            return UnicodeChar$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * WCHAR UnicodeChar
         * }
         */
        public static short UnicodeChar(MemorySegment union) {
            return union.get(UnicodeChar$LAYOUT, UnicodeChar$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * WCHAR UnicodeChar
         * }
         */
        public static void UnicodeChar(MemorySegment union, short fieldValue) {
            union.set(UnicodeChar$LAYOUT, UnicodeChar$OFFSET, fieldValue);
        }

        private static final OfByte AsciiChar$LAYOUT = (OfByte)$LAYOUT.select(groupElement("AsciiChar"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * CHAR AsciiChar
         * }
         */
        public static final OfByte AsciiChar$layout() {
            return AsciiChar$LAYOUT;
        }

        private static final long AsciiChar$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * CHAR AsciiChar
         * }
         */
        public static final long AsciiChar$offset() {
            return AsciiChar$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * CHAR AsciiChar
         * }
         */
        public static byte AsciiChar(MemorySegment union) {
            return union.get(AsciiChar$LAYOUT, AsciiChar$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * CHAR AsciiChar
         * }
         */
        public static void AsciiChar(MemorySegment union, byte fieldValue) {
            union.set(AsciiChar$LAYOUT, AsciiChar$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout uChar$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("uChar"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union {
     *     WCHAR UnicodeChar;
     *     CHAR AsciiChar;
     * } uChar
     * }
     */
    public static final GroupLayout uChar$layout() {
        return uChar$LAYOUT;
    }

    private static final long uChar$OFFSET = 10;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union {
     *     WCHAR UnicodeChar;
     *     CHAR AsciiChar;
     * } uChar
     * }
     */
    public static final long uChar$offset() {
        return uChar$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union {
     *     WCHAR UnicodeChar;
     *     CHAR AsciiChar;
     * } uChar
     * }
     */
    public static MemorySegment uChar(MemorySegment struct) {
        return struct.asSlice(uChar$OFFSET, uChar$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union {
     *     WCHAR UnicodeChar;
     *     CHAR AsciiChar;
     * } uChar
     * }
     */
    public static void uChar(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, uChar$OFFSET, uChar$LAYOUT.byteSize());
    }

    private static final OfInt dwControlKeyState$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwControlKeyState"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwControlKeyState
     * }
     */
    public static final OfInt dwControlKeyState$layout() {
        return dwControlKeyState$LAYOUT;
    }

    private static final long dwControlKeyState$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwControlKeyState
     * }
     */
    public static final long dwControlKeyState$offset() {
        return dwControlKeyState$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwControlKeyState
     * }
     */
    public static int dwControlKeyState(MemorySegment struct) {
        return struct.get(dwControlKeyState$LAYOUT, dwControlKeyState$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwControlKeyState
     * }
     */
    public static void dwControlKeyState(MemorySegment struct, int fieldValue) {
        struct.set(dwControlKeyState$LAYOUT, dwControlKeyState$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

