// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _NDR_USER_MARSHAL_INFO_LEVEL1 {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("Buffer"),
        Constants$root.C_LONG$LAYOUT.withName("BufferSize"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("pfnAllocate"),
        Constants$root.C_POINTER$LAYOUT.withName("pfnFree"),
        Constants$root.C_POINTER$LAYOUT.withName("pRpcChannelBuffer"),
        MemoryLayout.sequenceLayout(5, Constants$root.C_LONG_LONG$LAYOUT).withName("Reserved")
    ).withName("_NDR_USER_MARSHAL_INFO_LEVEL1");
    public static MemoryLayout $LAYOUT() {
        return _NDR_USER_MARSHAL_INFO_LEVEL1.$struct$LAYOUT;
    }
    static final VarHandle Buffer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Buffer"));
    public static VarHandle Buffer$VH() {
        return _NDR_USER_MARSHAL_INFO_LEVEL1.Buffer$VH;
    }
    public static MemoryAddress Buffer$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_NDR_USER_MARSHAL_INFO_LEVEL1.Buffer$VH.get(seg);
    }
    public static void Buffer$set( MemorySegment seg, MemoryAddress x) {
        _NDR_USER_MARSHAL_INFO_LEVEL1.Buffer$VH.set(seg, x);
    }
    public static MemoryAddress Buffer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_NDR_USER_MARSHAL_INFO_LEVEL1.Buffer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Buffer$set(MemorySegment seg, long index, MemoryAddress x) {
        _NDR_USER_MARSHAL_INFO_LEVEL1.Buffer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BufferSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BufferSize"));
    public static VarHandle BufferSize$VH() {
        return _NDR_USER_MARSHAL_INFO_LEVEL1.BufferSize$VH;
    }
    public static int BufferSize$get(MemorySegment seg) {
        return (int)_NDR_USER_MARSHAL_INFO_LEVEL1.BufferSize$VH.get(seg);
    }
    public static void BufferSize$set( MemorySegment seg, int x) {
        _NDR_USER_MARSHAL_INFO_LEVEL1.BufferSize$VH.set(seg, x);
    }
    public static int BufferSize$get(MemorySegment seg, long index) {
        return (int)_NDR_USER_MARSHAL_INFO_LEVEL1.BufferSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BufferSize$set(MemorySegment seg, long index, int x) {
        _NDR_USER_MARSHAL_INFO_LEVEL1.BufferSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final FunctionDescriptor pfnAllocate$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle pfnAllocate$MH = RuntimeHelper.downcallHandle(
        _NDR_USER_MARSHAL_INFO_LEVEL1.pfnAllocate$FUNC
    );
    public interface pfnAllocate {

        java.lang.foreign.Addressable apply(long _x0);
        static MemorySegment allocate(pfnAllocate fi, MemorySession session) {
            return RuntimeHelper.upcallStub(pfnAllocate.class, fi, _NDR_USER_MARSHAL_INFO_LEVEL1.pfnAllocate$FUNC, session);
        }
        static pfnAllocate ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (long __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_NDR_USER_MARSHAL_INFO_LEVEL1.pfnAllocate$MH.invokeExact((Addressable)symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle pfnAllocate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pfnAllocate"));
    public static VarHandle pfnAllocate$VH() {
        return _NDR_USER_MARSHAL_INFO_LEVEL1.pfnAllocate$VH;
    }
    public static MemoryAddress pfnAllocate$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_NDR_USER_MARSHAL_INFO_LEVEL1.pfnAllocate$VH.get(seg);
    }
    public static void pfnAllocate$set( MemorySegment seg, MemoryAddress x) {
        _NDR_USER_MARSHAL_INFO_LEVEL1.pfnAllocate$VH.set(seg, x);
    }
    public static MemoryAddress pfnAllocate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_NDR_USER_MARSHAL_INFO_LEVEL1.pfnAllocate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnAllocate$set(MemorySegment seg, long index, MemoryAddress x) {
        _NDR_USER_MARSHAL_INFO_LEVEL1.pfnAllocate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static pfnAllocate pfnAllocate (MemorySegment segment, MemorySession session) {
        return pfnAllocate.ofAddress(pfnAllocate$get(segment), session);
    }
    static final FunctionDescriptor pfnFree$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle pfnFree$MH = RuntimeHelper.downcallHandle(
        _NDR_USER_MARSHAL_INFO_LEVEL1.pfnFree$FUNC
    );
    public interface pfnFree {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(pfnFree fi, MemorySession session) {
            return RuntimeHelper.upcallStub(pfnFree.class, fi, _NDR_USER_MARSHAL_INFO_LEVEL1.pfnFree$FUNC, session);
        }
        static pfnFree ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _NDR_USER_MARSHAL_INFO_LEVEL1.pfnFree$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle pfnFree$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pfnFree"));
    public static VarHandle pfnFree$VH() {
        return _NDR_USER_MARSHAL_INFO_LEVEL1.pfnFree$VH;
    }
    public static MemoryAddress pfnFree$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_NDR_USER_MARSHAL_INFO_LEVEL1.pfnFree$VH.get(seg);
    }
    public static void pfnFree$set( MemorySegment seg, MemoryAddress x) {
        _NDR_USER_MARSHAL_INFO_LEVEL1.pfnFree$VH.set(seg, x);
    }
    public static MemoryAddress pfnFree$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_NDR_USER_MARSHAL_INFO_LEVEL1.pfnFree$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnFree$set(MemorySegment seg, long index, MemoryAddress x) {
        _NDR_USER_MARSHAL_INFO_LEVEL1.pfnFree$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static pfnFree pfnFree (MemorySegment segment, MemorySession session) {
        return pfnFree.ofAddress(pfnFree$get(segment), session);
    }
    static final VarHandle pRpcChannelBuffer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pRpcChannelBuffer"));
    public static VarHandle pRpcChannelBuffer$VH() {
        return _NDR_USER_MARSHAL_INFO_LEVEL1.pRpcChannelBuffer$VH;
    }
    public static MemoryAddress pRpcChannelBuffer$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_NDR_USER_MARSHAL_INFO_LEVEL1.pRpcChannelBuffer$VH.get(seg);
    }
    public static void pRpcChannelBuffer$set( MemorySegment seg, MemoryAddress x) {
        _NDR_USER_MARSHAL_INFO_LEVEL1.pRpcChannelBuffer$VH.set(seg, x);
    }
    public static MemoryAddress pRpcChannelBuffer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_NDR_USER_MARSHAL_INFO_LEVEL1.pRpcChannelBuffer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pRpcChannelBuffer$set(MemorySegment seg, long index, MemoryAddress x) {
        _NDR_USER_MARSHAL_INFO_LEVEL1.pRpcChannelBuffer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Reserved$slice(MemorySegment seg) {
        return seg.asSlice(40, 40);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


