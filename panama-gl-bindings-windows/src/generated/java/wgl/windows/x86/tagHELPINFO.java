// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tagHELPINFO {
 *     UINT cbSize;
 *     int iContextType;
 *     int iCtrlId;
 *     HANDLE hItemHandle;
 *     DWORD_PTR dwContextId;
 *     POINT MousePos;
 * }
 * }
 */
public class tagHELPINFO {

    tagHELPINFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_INT.withName("cbSize"),
        wgl_h.C_INT.withName("iContextType"),
        wgl_h.C_INT.withName("iCtrlId"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_POINTER.withName("hItemHandle"),
        wgl_h.C_LONG_LONG.withName("dwContextId"),
        tagPOINT.layout().withName("MousePos")
    ).withName("tagHELPINFO");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt cbSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UINT cbSize
     * }
     */
    public static final OfInt cbSize$layout() {
        return cbSize$LAYOUT;
    }

    private static final long cbSize$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UINT cbSize
     * }
     */
    public static final long cbSize$offset() {
        return cbSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UINT cbSize
     * }
     */
    public static int cbSize(MemorySegment struct) {
        return struct.get(cbSize$LAYOUT, cbSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UINT cbSize
     * }
     */
    public static void cbSize(MemorySegment struct, int fieldValue) {
        struct.set(cbSize$LAYOUT, cbSize$OFFSET, fieldValue);
    }

    private static final OfInt iContextType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("iContextType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int iContextType
     * }
     */
    public static final OfInt iContextType$layout() {
        return iContextType$LAYOUT;
    }

    private static final long iContextType$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int iContextType
     * }
     */
    public static final long iContextType$offset() {
        return iContextType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int iContextType
     * }
     */
    public static int iContextType(MemorySegment struct) {
        return struct.get(iContextType$LAYOUT, iContextType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int iContextType
     * }
     */
    public static void iContextType(MemorySegment struct, int fieldValue) {
        struct.set(iContextType$LAYOUT, iContextType$OFFSET, fieldValue);
    }

    private static final OfInt iCtrlId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("iCtrlId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int iCtrlId
     * }
     */
    public static final OfInt iCtrlId$layout() {
        return iCtrlId$LAYOUT;
    }

    private static final long iCtrlId$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int iCtrlId
     * }
     */
    public static final long iCtrlId$offset() {
        return iCtrlId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int iCtrlId
     * }
     */
    public static int iCtrlId(MemorySegment struct) {
        return struct.get(iCtrlId$LAYOUT, iCtrlId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int iCtrlId
     * }
     */
    public static void iCtrlId(MemorySegment struct, int fieldValue) {
        struct.set(iCtrlId$LAYOUT, iCtrlId$OFFSET, fieldValue);
    }

    private static final AddressLayout hItemHandle$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hItemHandle"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HANDLE hItemHandle
     * }
     */
    public static final AddressLayout hItemHandle$layout() {
        return hItemHandle$LAYOUT;
    }

    private static final long hItemHandle$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HANDLE hItemHandle
     * }
     */
    public static final long hItemHandle$offset() {
        return hItemHandle$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HANDLE hItemHandle
     * }
     */
    public static MemorySegment hItemHandle(MemorySegment struct) {
        return struct.get(hItemHandle$LAYOUT, hItemHandle$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HANDLE hItemHandle
     * }
     */
    public static void hItemHandle(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hItemHandle$LAYOUT, hItemHandle$OFFSET, fieldValue);
    }

    private static final OfLong dwContextId$LAYOUT = (OfLong)$LAYOUT.select(groupElement("dwContextId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD_PTR dwContextId
     * }
     */
    public static final OfLong dwContextId$layout() {
        return dwContextId$LAYOUT;
    }

    private static final long dwContextId$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD_PTR dwContextId
     * }
     */
    public static final long dwContextId$offset() {
        return dwContextId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD_PTR dwContextId
     * }
     */
    public static long dwContextId(MemorySegment struct) {
        return struct.get(dwContextId$LAYOUT, dwContextId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD_PTR dwContextId
     * }
     */
    public static void dwContextId(MemorySegment struct, long fieldValue) {
        struct.set(dwContextId$LAYOUT, dwContextId$OFFSET, fieldValue);
    }

    private static final GroupLayout MousePos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("MousePos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * POINT MousePos
     * }
     */
    public static final GroupLayout MousePos$layout() {
        return MousePos$LAYOUT;
    }

    private static final long MousePos$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * POINT MousePos
     * }
     */
    public static final long MousePos$offset() {
        return MousePos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * POINT MousePos
     * }
     */
    public static MemorySegment MousePos(MemorySegment struct) {
        return struct.asSlice(MousePos$OFFSET, MousePos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * POINT MousePos
     * }
     */
    public static void MousePos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, MousePos$OFFSET, MousePos$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

