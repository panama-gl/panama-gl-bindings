// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _SECURITY_ATTRIBUTES {
 *     DWORD nLength;
 *     LPVOID lpSecurityDescriptor;
 *     BOOL bInheritHandle;
 * }
 * }
 */
public class _SECURITY_ATTRIBUTES {

    _SECURITY_ATTRIBUTES() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("nLength"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_POINTER.withName("lpSecurityDescriptor"),
        wgl_h.C_INT.withName("bInheritHandle"),
        MemoryLayout.paddingLayout(4)
    ).withName("_SECURITY_ATTRIBUTES");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt nLength$LAYOUT = (OfInt)$LAYOUT.select(groupElement("nLength"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD nLength
     * }
     */
    public static final OfInt nLength$layout() {
        return nLength$LAYOUT;
    }

    private static final long nLength$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD nLength
     * }
     */
    public static final long nLength$offset() {
        return nLength$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD nLength
     * }
     */
    public static int nLength(MemorySegment struct) {
        return struct.get(nLength$LAYOUT, nLength$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD nLength
     * }
     */
    public static void nLength(MemorySegment struct, int fieldValue) {
        struct.set(nLength$LAYOUT, nLength$OFFSET, fieldValue);
    }

    private static final AddressLayout lpSecurityDescriptor$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lpSecurityDescriptor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPVOID lpSecurityDescriptor
     * }
     */
    public static final AddressLayout lpSecurityDescriptor$layout() {
        return lpSecurityDescriptor$LAYOUT;
    }

    private static final long lpSecurityDescriptor$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPVOID lpSecurityDescriptor
     * }
     */
    public static final long lpSecurityDescriptor$offset() {
        return lpSecurityDescriptor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPVOID lpSecurityDescriptor
     * }
     */
    public static MemorySegment lpSecurityDescriptor(MemorySegment struct) {
        return struct.get(lpSecurityDescriptor$LAYOUT, lpSecurityDescriptor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPVOID lpSecurityDescriptor
     * }
     */
    public static void lpSecurityDescriptor(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lpSecurityDescriptor$LAYOUT, lpSecurityDescriptor$OFFSET, fieldValue);
    }

    private static final OfInt bInheritHandle$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bInheritHandle"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOL bInheritHandle
     * }
     */
    public static final OfInt bInheritHandle$layout() {
        return bInheritHandle$LAYOUT;
    }

    private static final long bInheritHandle$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOL bInheritHandle
     * }
     */
    public static final long bInheritHandle$offset() {
        return bInheritHandle$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOL bInheritHandle
     * }
     */
    public static int bInheritHandle(MemorySegment struct) {
        return struct.get(bInheritHandle$LAYOUT, bInheritHandle$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOL bInheritHandle
     * }
     */
    public static void bInheritHandle(MemorySegment struct, int fieldValue) {
        struct.set(bInheritHandle$LAYOUT, bInheritHandle$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

