// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _IMAGE_OPTIONAL_HEADER {
 *     WORD Magic;
 *     BYTE MajorLinkerVersion;
 *     BYTE MinorLinkerVersion;
 *     DWORD SizeOfCode;
 *     DWORD SizeOfInitializedData;
 *     DWORD SizeOfUninitializedData;
 *     DWORD AddressOfEntryPoint;
 *     DWORD BaseOfCode;
 *     DWORD BaseOfData;
 *     DWORD ImageBase;
 *     DWORD SectionAlignment;
 *     DWORD FileAlignment;
 *     WORD MajorOperatingSystemVersion;
 *     WORD MinorOperatingSystemVersion;
 *     WORD MajorImageVersion;
 *     WORD MinorImageVersion;
 *     WORD MajorSubsystemVersion;
 *     WORD MinorSubsystemVersion;
 *     DWORD Win32VersionValue;
 *     DWORD SizeOfImage;
 *     DWORD SizeOfHeaders;
 *     DWORD CheckSum;
 *     WORD Subsystem;
 *     WORD DllCharacteristics;
 *     DWORD SizeOfStackReserve;
 *     DWORD SizeOfStackCommit;
 *     DWORD SizeOfHeapReserve;
 *     DWORD SizeOfHeapCommit;
 *     DWORD LoaderFlags;
 *     DWORD NumberOfRvaAndSizes;
 *     IMAGE_DATA_DIRECTORY DataDirectory[16];
 * }
 * }
 */
public class _IMAGE_OPTIONAL_HEADER {

    _IMAGE_OPTIONAL_HEADER() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_SHORT.withName("Magic"),
        wgl_h.C_CHAR.withName("MajorLinkerVersion"),
        wgl_h.C_CHAR.withName("MinorLinkerVersion"),
        wgl_h.C_LONG.withName("SizeOfCode"),
        wgl_h.C_LONG.withName("SizeOfInitializedData"),
        wgl_h.C_LONG.withName("SizeOfUninitializedData"),
        wgl_h.C_LONG.withName("AddressOfEntryPoint"),
        wgl_h.C_LONG.withName("BaseOfCode"),
        wgl_h.C_LONG.withName("BaseOfData"),
        wgl_h.C_LONG.withName("ImageBase"),
        wgl_h.C_LONG.withName("SectionAlignment"),
        wgl_h.C_LONG.withName("FileAlignment"),
        wgl_h.C_SHORT.withName("MajorOperatingSystemVersion"),
        wgl_h.C_SHORT.withName("MinorOperatingSystemVersion"),
        wgl_h.C_SHORT.withName("MajorImageVersion"),
        wgl_h.C_SHORT.withName("MinorImageVersion"),
        wgl_h.C_SHORT.withName("MajorSubsystemVersion"),
        wgl_h.C_SHORT.withName("MinorSubsystemVersion"),
        wgl_h.C_LONG.withName("Win32VersionValue"),
        wgl_h.C_LONG.withName("SizeOfImage"),
        wgl_h.C_LONG.withName("SizeOfHeaders"),
        wgl_h.C_LONG.withName("CheckSum"),
        wgl_h.C_SHORT.withName("Subsystem"),
        wgl_h.C_SHORT.withName("DllCharacteristics"),
        wgl_h.C_LONG.withName("SizeOfStackReserve"),
        wgl_h.C_LONG.withName("SizeOfStackCommit"),
        wgl_h.C_LONG.withName("SizeOfHeapReserve"),
        wgl_h.C_LONG.withName("SizeOfHeapCommit"),
        wgl_h.C_LONG.withName("LoaderFlags"),
        wgl_h.C_LONG.withName("NumberOfRvaAndSizes"),
        MemoryLayout.sequenceLayout(16, _IMAGE_DATA_DIRECTORY.layout()).withName("DataDirectory")
    ).withName("_IMAGE_OPTIONAL_HEADER");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfShort Magic$LAYOUT = (OfShort)$LAYOUT.select(groupElement("Magic"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD Magic
     * }
     */
    public static final OfShort Magic$layout() {
        return Magic$LAYOUT;
    }

    private static final long Magic$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD Magic
     * }
     */
    public static final long Magic$offset() {
        return Magic$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD Magic
     * }
     */
    public static short Magic(MemorySegment struct) {
        return struct.get(Magic$LAYOUT, Magic$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD Magic
     * }
     */
    public static void Magic(MemorySegment struct, short fieldValue) {
        struct.set(Magic$LAYOUT, Magic$OFFSET, fieldValue);
    }

    private static final OfByte MajorLinkerVersion$LAYOUT = (OfByte)$LAYOUT.select(groupElement("MajorLinkerVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE MajorLinkerVersion
     * }
     */
    public static final OfByte MajorLinkerVersion$layout() {
        return MajorLinkerVersion$LAYOUT;
    }

    private static final long MajorLinkerVersion$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE MajorLinkerVersion
     * }
     */
    public static final long MajorLinkerVersion$offset() {
        return MajorLinkerVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE MajorLinkerVersion
     * }
     */
    public static byte MajorLinkerVersion(MemorySegment struct) {
        return struct.get(MajorLinkerVersion$LAYOUT, MajorLinkerVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE MajorLinkerVersion
     * }
     */
    public static void MajorLinkerVersion(MemorySegment struct, byte fieldValue) {
        struct.set(MajorLinkerVersion$LAYOUT, MajorLinkerVersion$OFFSET, fieldValue);
    }

    private static final OfByte MinorLinkerVersion$LAYOUT = (OfByte)$LAYOUT.select(groupElement("MinorLinkerVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE MinorLinkerVersion
     * }
     */
    public static final OfByte MinorLinkerVersion$layout() {
        return MinorLinkerVersion$LAYOUT;
    }

    private static final long MinorLinkerVersion$OFFSET = 3;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE MinorLinkerVersion
     * }
     */
    public static final long MinorLinkerVersion$offset() {
        return MinorLinkerVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE MinorLinkerVersion
     * }
     */
    public static byte MinorLinkerVersion(MemorySegment struct) {
        return struct.get(MinorLinkerVersion$LAYOUT, MinorLinkerVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE MinorLinkerVersion
     * }
     */
    public static void MinorLinkerVersion(MemorySegment struct, byte fieldValue) {
        struct.set(MinorLinkerVersion$LAYOUT, MinorLinkerVersion$OFFSET, fieldValue);
    }

    private static final OfInt SizeOfCode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SizeOfCode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD SizeOfCode
     * }
     */
    public static final OfInt SizeOfCode$layout() {
        return SizeOfCode$LAYOUT;
    }

    private static final long SizeOfCode$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD SizeOfCode
     * }
     */
    public static final long SizeOfCode$offset() {
        return SizeOfCode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD SizeOfCode
     * }
     */
    public static int SizeOfCode(MemorySegment struct) {
        return struct.get(SizeOfCode$LAYOUT, SizeOfCode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD SizeOfCode
     * }
     */
    public static void SizeOfCode(MemorySegment struct, int fieldValue) {
        struct.set(SizeOfCode$LAYOUT, SizeOfCode$OFFSET, fieldValue);
    }

    private static final OfInt SizeOfInitializedData$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SizeOfInitializedData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD SizeOfInitializedData
     * }
     */
    public static final OfInt SizeOfInitializedData$layout() {
        return SizeOfInitializedData$LAYOUT;
    }

    private static final long SizeOfInitializedData$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD SizeOfInitializedData
     * }
     */
    public static final long SizeOfInitializedData$offset() {
        return SizeOfInitializedData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD SizeOfInitializedData
     * }
     */
    public static int SizeOfInitializedData(MemorySegment struct) {
        return struct.get(SizeOfInitializedData$LAYOUT, SizeOfInitializedData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD SizeOfInitializedData
     * }
     */
    public static void SizeOfInitializedData(MemorySegment struct, int fieldValue) {
        struct.set(SizeOfInitializedData$LAYOUT, SizeOfInitializedData$OFFSET, fieldValue);
    }

    private static final OfInt SizeOfUninitializedData$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SizeOfUninitializedData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD SizeOfUninitializedData
     * }
     */
    public static final OfInt SizeOfUninitializedData$layout() {
        return SizeOfUninitializedData$LAYOUT;
    }

    private static final long SizeOfUninitializedData$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD SizeOfUninitializedData
     * }
     */
    public static final long SizeOfUninitializedData$offset() {
        return SizeOfUninitializedData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD SizeOfUninitializedData
     * }
     */
    public static int SizeOfUninitializedData(MemorySegment struct) {
        return struct.get(SizeOfUninitializedData$LAYOUT, SizeOfUninitializedData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD SizeOfUninitializedData
     * }
     */
    public static void SizeOfUninitializedData(MemorySegment struct, int fieldValue) {
        struct.set(SizeOfUninitializedData$LAYOUT, SizeOfUninitializedData$OFFSET, fieldValue);
    }

    private static final OfInt AddressOfEntryPoint$LAYOUT = (OfInt)$LAYOUT.select(groupElement("AddressOfEntryPoint"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD AddressOfEntryPoint
     * }
     */
    public static final OfInt AddressOfEntryPoint$layout() {
        return AddressOfEntryPoint$LAYOUT;
    }

    private static final long AddressOfEntryPoint$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD AddressOfEntryPoint
     * }
     */
    public static final long AddressOfEntryPoint$offset() {
        return AddressOfEntryPoint$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD AddressOfEntryPoint
     * }
     */
    public static int AddressOfEntryPoint(MemorySegment struct) {
        return struct.get(AddressOfEntryPoint$LAYOUT, AddressOfEntryPoint$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD AddressOfEntryPoint
     * }
     */
    public static void AddressOfEntryPoint(MemorySegment struct, int fieldValue) {
        struct.set(AddressOfEntryPoint$LAYOUT, AddressOfEntryPoint$OFFSET, fieldValue);
    }

    private static final OfInt BaseOfCode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BaseOfCode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD BaseOfCode
     * }
     */
    public static final OfInt BaseOfCode$layout() {
        return BaseOfCode$LAYOUT;
    }

    private static final long BaseOfCode$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD BaseOfCode
     * }
     */
    public static final long BaseOfCode$offset() {
        return BaseOfCode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD BaseOfCode
     * }
     */
    public static int BaseOfCode(MemorySegment struct) {
        return struct.get(BaseOfCode$LAYOUT, BaseOfCode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD BaseOfCode
     * }
     */
    public static void BaseOfCode(MemorySegment struct, int fieldValue) {
        struct.set(BaseOfCode$LAYOUT, BaseOfCode$OFFSET, fieldValue);
    }

    private static final OfInt BaseOfData$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BaseOfData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD BaseOfData
     * }
     */
    public static final OfInt BaseOfData$layout() {
        return BaseOfData$LAYOUT;
    }

    private static final long BaseOfData$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD BaseOfData
     * }
     */
    public static final long BaseOfData$offset() {
        return BaseOfData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD BaseOfData
     * }
     */
    public static int BaseOfData(MemorySegment struct) {
        return struct.get(BaseOfData$LAYOUT, BaseOfData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD BaseOfData
     * }
     */
    public static void BaseOfData(MemorySegment struct, int fieldValue) {
        struct.set(BaseOfData$LAYOUT, BaseOfData$OFFSET, fieldValue);
    }

    private static final OfInt ImageBase$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ImageBase"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD ImageBase
     * }
     */
    public static final OfInt ImageBase$layout() {
        return ImageBase$LAYOUT;
    }

    private static final long ImageBase$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD ImageBase
     * }
     */
    public static final long ImageBase$offset() {
        return ImageBase$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD ImageBase
     * }
     */
    public static int ImageBase(MemorySegment struct) {
        return struct.get(ImageBase$LAYOUT, ImageBase$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD ImageBase
     * }
     */
    public static void ImageBase(MemorySegment struct, int fieldValue) {
        struct.set(ImageBase$LAYOUT, ImageBase$OFFSET, fieldValue);
    }

    private static final OfInt SectionAlignment$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SectionAlignment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD SectionAlignment
     * }
     */
    public static final OfInt SectionAlignment$layout() {
        return SectionAlignment$LAYOUT;
    }

    private static final long SectionAlignment$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD SectionAlignment
     * }
     */
    public static final long SectionAlignment$offset() {
        return SectionAlignment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD SectionAlignment
     * }
     */
    public static int SectionAlignment(MemorySegment struct) {
        return struct.get(SectionAlignment$LAYOUT, SectionAlignment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD SectionAlignment
     * }
     */
    public static void SectionAlignment(MemorySegment struct, int fieldValue) {
        struct.set(SectionAlignment$LAYOUT, SectionAlignment$OFFSET, fieldValue);
    }

    private static final OfInt FileAlignment$LAYOUT = (OfInt)$LAYOUT.select(groupElement("FileAlignment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD FileAlignment
     * }
     */
    public static final OfInt FileAlignment$layout() {
        return FileAlignment$LAYOUT;
    }

    private static final long FileAlignment$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD FileAlignment
     * }
     */
    public static final long FileAlignment$offset() {
        return FileAlignment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD FileAlignment
     * }
     */
    public static int FileAlignment(MemorySegment struct) {
        return struct.get(FileAlignment$LAYOUT, FileAlignment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD FileAlignment
     * }
     */
    public static void FileAlignment(MemorySegment struct, int fieldValue) {
        struct.set(FileAlignment$LAYOUT, FileAlignment$OFFSET, fieldValue);
    }

    private static final OfShort MajorOperatingSystemVersion$LAYOUT = (OfShort)$LAYOUT.select(groupElement("MajorOperatingSystemVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD MajorOperatingSystemVersion
     * }
     */
    public static final OfShort MajorOperatingSystemVersion$layout() {
        return MajorOperatingSystemVersion$LAYOUT;
    }

    private static final long MajorOperatingSystemVersion$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD MajorOperatingSystemVersion
     * }
     */
    public static final long MajorOperatingSystemVersion$offset() {
        return MajorOperatingSystemVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD MajorOperatingSystemVersion
     * }
     */
    public static short MajorOperatingSystemVersion(MemorySegment struct) {
        return struct.get(MajorOperatingSystemVersion$LAYOUT, MajorOperatingSystemVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD MajorOperatingSystemVersion
     * }
     */
    public static void MajorOperatingSystemVersion(MemorySegment struct, short fieldValue) {
        struct.set(MajorOperatingSystemVersion$LAYOUT, MajorOperatingSystemVersion$OFFSET, fieldValue);
    }

    private static final OfShort MinorOperatingSystemVersion$LAYOUT = (OfShort)$LAYOUT.select(groupElement("MinorOperatingSystemVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD MinorOperatingSystemVersion
     * }
     */
    public static final OfShort MinorOperatingSystemVersion$layout() {
        return MinorOperatingSystemVersion$LAYOUT;
    }

    private static final long MinorOperatingSystemVersion$OFFSET = 42;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD MinorOperatingSystemVersion
     * }
     */
    public static final long MinorOperatingSystemVersion$offset() {
        return MinorOperatingSystemVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD MinorOperatingSystemVersion
     * }
     */
    public static short MinorOperatingSystemVersion(MemorySegment struct) {
        return struct.get(MinorOperatingSystemVersion$LAYOUT, MinorOperatingSystemVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD MinorOperatingSystemVersion
     * }
     */
    public static void MinorOperatingSystemVersion(MemorySegment struct, short fieldValue) {
        struct.set(MinorOperatingSystemVersion$LAYOUT, MinorOperatingSystemVersion$OFFSET, fieldValue);
    }

    private static final OfShort MajorImageVersion$LAYOUT = (OfShort)$LAYOUT.select(groupElement("MajorImageVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD MajorImageVersion
     * }
     */
    public static final OfShort MajorImageVersion$layout() {
        return MajorImageVersion$LAYOUT;
    }

    private static final long MajorImageVersion$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD MajorImageVersion
     * }
     */
    public static final long MajorImageVersion$offset() {
        return MajorImageVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD MajorImageVersion
     * }
     */
    public static short MajorImageVersion(MemorySegment struct) {
        return struct.get(MajorImageVersion$LAYOUT, MajorImageVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD MajorImageVersion
     * }
     */
    public static void MajorImageVersion(MemorySegment struct, short fieldValue) {
        struct.set(MajorImageVersion$LAYOUT, MajorImageVersion$OFFSET, fieldValue);
    }

    private static final OfShort MinorImageVersion$LAYOUT = (OfShort)$LAYOUT.select(groupElement("MinorImageVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD MinorImageVersion
     * }
     */
    public static final OfShort MinorImageVersion$layout() {
        return MinorImageVersion$LAYOUT;
    }

    private static final long MinorImageVersion$OFFSET = 46;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD MinorImageVersion
     * }
     */
    public static final long MinorImageVersion$offset() {
        return MinorImageVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD MinorImageVersion
     * }
     */
    public static short MinorImageVersion(MemorySegment struct) {
        return struct.get(MinorImageVersion$LAYOUT, MinorImageVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD MinorImageVersion
     * }
     */
    public static void MinorImageVersion(MemorySegment struct, short fieldValue) {
        struct.set(MinorImageVersion$LAYOUT, MinorImageVersion$OFFSET, fieldValue);
    }

    private static final OfShort MajorSubsystemVersion$LAYOUT = (OfShort)$LAYOUT.select(groupElement("MajorSubsystemVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD MajorSubsystemVersion
     * }
     */
    public static final OfShort MajorSubsystemVersion$layout() {
        return MajorSubsystemVersion$LAYOUT;
    }

    private static final long MajorSubsystemVersion$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD MajorSubsystemVersion
     * }
     */
    public static final long MajorSubsystemVersion$offset() {
        return MajorSubsystemVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD MajorSubsystemVersion
     * }
     */
    public static short MajorSubsystemVersion(MemorySegment struct) {
        return struct.get(MajorSubsystemVersion$LAYOUT, MajorSubsystemVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD MajorSubsystemVersion
     * }
     */
    public static void MajorSubsystemVersion(MemorySegment struct, short fieldValue) {
        struct.set(MajorSubsystemVersion$LAYOUT, MajorSubsystemVersion$OFFSET, fieldValue);
    }

    private static final OfShort MinorSubsystemVersion$LAYOUT = (OfShort)$LAYOUT.select(groupElement("MinorSubsystemVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD MinorSubsystemVersion
     * }
     */
    public static final OfShort MinorSubsystemVersion$layout() {
        return MinorSubsystemVersion$LAYOUT;
    }

    private static final long MinorSubsystemVersion$OFFSET = 50;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD MinorSubsystemVersion
     * }
     */
    public static final long MinorSubsystemVersion$offset() {
        return MinorSubsystemVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD MinorSubsystemVersion
     * }
     */
    public static short MinorSubsystemVersion(MemorySegment struct) {
        return struct.get(MinorSubsystemVersion$LAYOUT, MinorSubsystemVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD MinorSubsystemVersion
     * }
     */
    public static void MinorSubsystemVersion(MemorySegment struct, short fieldValue) {
        struct.set(MinorSubsystemVersion$LAYOUT, MinorSubsystemVersion$OFFSET, fieldValue);
    }

    private static final OfInt Win32VersionValue$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Win32VersionValue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Win32VersionValue
     * }
     */
    public static final OfInt Win32VersionValue$layout() {
        return Win32VersionValue$LAYOUT;
    }

    private static final long Win32VersionValue$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Win32VersionValue
     * }
     */
    public static final long Win32VersionValue$offset() {
        return Win32VersionValue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Win32VersionValue
     * }
     */
    public static int Win32VersionValue(MemorySegment struct) {
        return struct.get(Win32VersionValue$LAYOUT, Win32VersionValue$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Win32VersionValue
     * }
     */
    public static void Win32VersionValue(MemorySegment struct, int fieldValue) {
        struct.set(Win32VersionValue$LAYOUT, Win32VersionValue$OFFSET, fieldValue);
    }

    private static final OfInt SizeOfImage$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SizeOfImage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD SizeOfImage
     * }
     */
    public static final OfInt SizeOfImage$layout() {
        return SizeOfImage$LAYOUT;
    }

    private static final long SizeOfImage$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD SizeOfImage
     * }
     */
    public static final long SizeOfImage$offset() {
        return SizeOfImage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD SizeOfImage
     * }
     */
    public static int SizeOfImage(MemorySegment struct) {
        return struct.get(SizeOfImage$LAYOUT, SizeOfImage$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD SizeOfImage
     * }
     */
    public static void SizeOfImage(MemorySegment struct, int fieldValue) {
        struct.set(SizeOfImage$LAYOUT, SizeOfImage$OFFSET, fieldValue);
    }

    private static final OfInt SizeOfHeaders$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SizeOfHeaders"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD SizeOfHeaders
     * }
     */
    public static final OfInt SizeOfHeaders$layout() {
        return SizeOfHeaders$LAYOUT;
    }

    private static final long SizeOfHeaders$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD SizeOfHeaders
     * }
     */
    public static final long SizeOfHeaders$offset() {
        return SizeOfHeaders$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD SizeOfHeaders
     * }
     */
    public static int SizeOfHeaders(MemorySegment struct) {
        return struct.get(SizeOfHeaders$LAYOUT, SizeOfHeaders$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD SizeOfHeaders
     * }
     */
    public static void SizeOfHeaders(MemorySegment struct, int fieldValue) {
        struct.set(SizeOfHeaders$LAYOUT, SizeOfHeaders$OFFSET, fieldValue);
    }

    private static final OfInt CheckSum$LAYOUT = (OfInt)$LAYOUT.select(groupElement("CheckSum"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD CheckSum
     * }
     */
    public static final OfInt CheckSum$layout() {
        return CheckSum$LAYOUT;
    }

    private static final long CheckSum$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD CheckSum
     * }
     */
    public static final long CheckSum$offset() {
        return CheckSum$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD CheckSum
     * }
     */
    public static int CheckSum(MemorySegment struct) {
        return struct.get(CheckSum$LAYOUT, CheckSum$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD CheckSum
     * }
     */
    public static void CheckSum(MemorySegment struct, int fieldValue) {
        struct.set(CheckSum$LAYOUT, CheckSum$OFFSET, fieldValue);
    }

    private static final OfShort Subsystem$LAYOUT = (OfShort)$LAYOUT.select(groupElement("Subsystem"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD Subsystem
     * }
     */
    public static final OfShort Subsystem$layout() {
        return Subsystem$LAYOUT;
    }

    private static final long Subsystem$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD Subsystem
     * }
     */
    public static final long Subsystem$offset() {
        return Subsystem$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD Subsystem
     * }
     */
    public static short Subsystem(MemorySegment struct) {
        return struct.get(Subsystem$LAYOUT, Subsystem$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD Subsystem
     * }
     */
    public static void Subsystem(MemorySegment struct, short fieldValue) {
        struct.set(Subsystem$LAYOUT, Subsystem$OFFSET, fieldValue);
    }

    private static final OfShort DllCharacteristics$LAYOUT = (OfShort)$LAYOUT.select(groupElement("DllCharacteristics"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD DllCharacteristics
     * }
     */
    public static final OfShort DllCharacteristics$layout() {
        return DllCharacteristics$LAYOUT;
    }

    private static final long DllCharacteristics$OFFSET = 70;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD DllCharacteristics
     * }
     */
    public static final long DllCharacteristics$offset() {
        return DllCharacteristics$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD DllCharacteristics
     * }
     */
    public static short DllCharacteristics(MemorySegment struct) {
        return struct.get(DllCharacteristics$LAYOUT, DllCharacteristics$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD DllCharacteristics
     * }
     */
    public static void DllCharacteristics(MemorySegment struct, short fieldValue) {
        struct.set(DllCharacteristics$LAYOUT, DllCharacteristics$OFFSET, fieldValue);
    }

    private static final OfInt SizeOfStackReserve$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SizeOfStackReserve"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD SizeOfStackReserve
     * }
     */
    public static final OfInt SizeOfStackReserve$layout() {
        return SizeOfStackReserve$LAYOUT;
    }

    private static final long SizeOfStackReserve$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD SizeOfStackReserve
     * }
     */
    public static final long SizeOfStackReserve$offset() {
        return SizeOfStackReserve$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD SizeOfStackReserve
     * }
     */
    public static int SizeOfStackReserve(MemorySegment struct) {
        return struct.get(SizeOfStackReserve$LAYOUT, SizeOfStackReserve$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD SizeOfStackReserve
     * }
     */
    public static void SizeOfStackReserve(MemorySegment struct, int fieldValue) {
        struct.set(SizeOfStackReserve$LAYOUT, SizeOfStackReserve$OFFSET, fieldValue);
    }

    private static final OfInt SizeOfStackCommit$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SizeOfStackCommit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD SizeOfStackCommit
     * }
     */
    public static final OfInt SizeOfStackCommit$layout() {
        return SizeOfStackCommit$LAYOUT;
    }

    private static final long SizeOfStackCommit$OFFSET = 76;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD SizeOfStackCommit
     * }
     */
    public static final long SizeOfStackCommit$offset() {
        return SizeOfStackCommit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD SizeOfStackCommit
     * }
     */
    public static int SizeOfStackCommit(MemorySegment struct) {
        return struct.get(SizeOfStackCommit$LAYOUT, SizeOfStackCommit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD SizeOfStackCommit
     * }
     */
    public static void SizeOfStackCommit(MemorySegment struct, int fieldValue) {
        struct.set(SizeOfStackCommit$LAYOUT, SizeOfStackCommit$OFFSET, fieldValue);
    }

    private static final OfInt SizeOfHeapReserve$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SizeOfHeapReserve"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD SizeOfHeapReserve
     * }
     */
    public static final OfInt SizeOfHeapReserve$layout() {
        return SizeOfHeapReserve$LAYOUT;
    }

    private static final long SizeOfHeapReserve$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD SizeOfHeapReserve
     * }
     */
    public static final long SizeOfHeapReserve$offset() {
        return SizeOfHeapReserve$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD SizeOfHeapReserve
     * }
     */
    public static int SizeOfHeapReserve(MemorySegment struct) {
        return struct.get(SizeOfHeapReserve$LAYOUT, SizeOfHeapReserve$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD SizeOfHeapReserve
     * }
     */
    public static void SizeOfHeapReserve(MemorySegment struct, int fieldValue) {
        struct.set(SizeOfHeapReserve$LAYOUT, SizeOfHeapReserve$OFFSET, fieldValue);
    }

    private static final OfInt SizeOfHeapCommit$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SizeOfHeapCommit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD SizeOfHeapCommit
     * }
     */
    public static final OfInt SizeOfHeapCommit$layout() {
        return SizeOfHeapCommit$LAYOUT;
    }

    private static final long SizeOfHeapCommit$OFFSET = 84;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD SizeOfHeapCommit
     * }
     */
    public static final long SizeOfHeapCommit$offset() {
        return SizeOfHeapCommit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD SizeOfHeapCommit
     * }
     */
    public static int SizeOfHeapCommit(MemorySegment struct) {
        return struct.get(SizeOfHeapCommit$LAYOUT, SizeOfHeapCommit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD SizeOfHeapCommit
     * }
     */
    public static void SizeOfHeapCommit(MemorySegment struct, int fieldValue) {
        struct.set(SizeOfHeapCommit$LAYOUT, SizeOfHeapCommit$OFFSET, fieldValue);
    }

    private static final OfInt LoaderFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LoaderFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD LoaderFlags
     * }
     */
    public static final OfInt LoaderFlags$layout() {
        return LoaderFlags$LAYOUT;
    }

    private static final long LoaderFlags$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD LoaderFlags
     * }
     */
    public static final long LoaderFlags$offset() {
        return LoaderFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD LoaderFlags
     * }
     */
    public static int LoaderFlags(MemorySegment struct) {
        return struct.get(LoaderFlags$LAYOUT, LoaderFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD LoaderFlags
     * }
     */
    public static void LoaderFlags(MemorySegment struct, int fieldValue) {
        struct.set(LoaderFlags$LAYOUT, LoaderFlags$OFFSET, fieldValue);
    }

    private static final OfInt NumberOfRvaAndSizes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NumberOfRvaAndSizes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD NumberOfRvaAndSizes
     * }
     */
    public static final OfInt NumberOfRvaAndSizes$layout() {
        return NumberOfRvaAndSizes$LAYOUT;
    }

    private static final long NumberOfRvaAndSizes$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD NumberOfRvaAndSizes
     * }
     */
    public static final long NumberOfRvaAndSizes$offset() {
        return NumberOfRvaAndSizes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD NumberOfRvaAndSizes
     * }
     */
    public static int NumberOfRvaAndSizes(MemorySegment struct) {
        return struct.get(NumberOfRvaAndSizes$LAYOUT, NumberOfRvaAndSizes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD NumberOfRvaAndSizes
     * }
     */
    public static void NumberOfRvaAndSizes(MemorySegment struct, int fieldValue) {
        struct.set(NumberOfRvaAndSizes$LAYOUT, NumberOfRvaAndSizes$OFFSET, fieldValue);
    }

    private static final SequenceLayout DataDirectory$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("DataDirectory"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * IMAGE_DATA_DIRECTORY DataDirectory[16]
     * }
     */
    public static final SequenceLayout DataDirectory$layout() {
        return DataDirectory$LAYOUT;
    }

    private static final long DataDirectory$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * IMAGE_DATA_DIRECTORY DataDirectory[16]
     * }
     */
    public static final long DataDirectory$offset() {
        return DataDirectory$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * IMAGE_DATA_DIRECTORY DataDirectory[16]
     * }
     */
    public static MemorySegment DataDirectory(MemorySegment struct) {
        return struct.asSlice(DataDirectory$OFFSET, DataDirectory$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * IMAGE_DATA_DIRECTORY DataDirectory[16]
     * }
     */
    public static void DataDirectory(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, DataDirectory$OFFSET, DataDirectory$LAYOUT.byteSize());
    }

    private static long[] DataDirectory$DIMS = { 16 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * IMAGE_DATA_DIRECTORY DataDirectory[16]
     * }
     */
    public static long[] DataDirectory$dimensions() {
        return DataDirectory$DIMS;
    }
    private static final MethodHandle DataDirectory$ELEM_HANDLE = DataDirectory$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * IMAGE_DATA_DIRECTORY DataDirectory[16]
     * }
     */
    public static MemorySegment DataDirectory(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)DataDirectory$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * IMAGE_DATA_DIRECTORY DataDirectory[16]
     * }
     */
    public static void DataDirectory(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, DataDirectory(struct, index0), 0L, _IMAGE_DATA_DIRECTORY.layout().byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

