// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tagACTCTXA {
 *     ULONG cbSize;
 *     DWORD dwFlags;
 *     LPCSTR lpSource;
 *     USHORT wProcessorArchitecture;
 *     LANGID wLangId;
 *     LPCSTR lpAssemblyDirectory;
 *     LPCSTR lpResourceName;
 *     LPCSTR lpApplicationName;
 *     HMODULE hModule;
 * }
 * }
 */
public class tagACTCTXA {

    tagACTCTXA() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("cbSize"),
        wgl_h.C_LONG.withName("dwFlags"),
        wgl_h.C_POINTER.withName("lpSource"),
        wgl_h.C_SHORT.withName("wProcessorArchitecture"),
        wgl_h.C_SHORT.withName("wLangId"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_POINTER.withName("lpAssemblyDirectory"),
        wgl_h.C_POINTER.withName("lpResourceName"),
        wgl_h.C_POINTER.withName("lpApplicationName"),
        wgl_h.C_POINTER.withName("hModule")
    ).withName("tagACTCTXA");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt cbSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG cbSize
     * }
     */
    public static final OfInt cbSize$layout() {
        return cbSize$LAYOUT;
    }

    private static final long cbSize$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG cbSize
     * }
     */
    public static final long cbSize$offset() {
        return cbSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG cbSize
     * }
     */
    public static int cbSize(MemorySegment struct) {
        return struct.get(cbSize$LAYOUT, cbSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG cbSize
     * }
     */
    public static void cbSize(MemorySegment struct, int fieldValue) {
        struct.set(cbSize$LAYOUT, cbSize$OFFSET, fieldValue);
    }

    private static final OfInt dwFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwFlags
     * }
     */
    public static final OfInt dwFlags$layout() {
        return dwFlags$LAYOUT;
    }

    private static final long dwFlags$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwFlags
     * }
     */
    public static final long dwFlags$offset() {
        return dwFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwFlags
     * }
     */
    public static int dwFlags(MemorySegment struct) {
        return struct.get(dwFlags$LAYOUT, dwFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwFlags
     * }
     */
    public static void dwFlags(MemorySegment struct, int fieldValue) {
        struct.set(dwFlags$LAYOUT, dwFlags$OFFSET, fieldValue);
    }

    private static final AddressLayout lpSource$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lpSource"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPCSTR lpSource
     * }
     */
    public static final AddressLayout lpSource$layout() {
        return lpSource$LAYOUT;
    }

    private static final long lpSource$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPCSTR lpSource
     * }
     */
    public static final long lpSource$offset() {
        return lpSource$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPCSTR lpSource
     * }
     */
    public static MemorySegment lpSource(MemorySegment struct) {
        return struct.get(lpSource$LAYOUT, lpSource$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPCSTR lpSource
     * }
     */
    public static void lpSource(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lpSource$LAYOUT, lpSource$OFFSET, fieldValue);
    }

    private static final OfShort wProcessorArchitecture$LAYOUT = (OfShort)$LAYOUT.select(groupElement("wProcessorArchitecture"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * USHORT wProcessorArchitecture
     * }
     */
    public static final OfShort wProcessorArchitecture$layout() {
        return wProcessorArchitecture$LAYOUT;
    }

    private static final long wProcessorArchitecture$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * USHORT wProcessorArchitecture
     * }
     */
    public static final long wProcessorArchitecture$offset() {
        return wProcessorArchitecture$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * USHORT wProcessorArchitecture
     * }
     */
    public static short wProcessorArchitecture(MemorySegment struct) {
        return struct.get(wProcessorArchitecture$LAYOUT, wProcessorArchitecture$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * USHORT wProcessorArchitecture
     * }
     */
    public static void wProcessorArchitecture(MemorySegment struct, short fieldValue) {
        struct.set(wProcessorArchitecture$LAYOUT, wProcessorArchitecture$OFFSET, fieldValue);
    }

    private static final OfShort wLangId$LAYOUT = (OfShort)$LAYOUT.select(groupElement("wLangId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LANGID wLangId
     * }
     */
    public static final OfShort wLangId$layout() {
        return wLangId$LAYOUT;
    }

    private static final long wLangId$OFFSET = 18;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LANGID wLangId
     * }
     */
    public static final long wLangId$offset() {
        return wLangId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LANGID wLangId
     * }
     */
    public static short wLangId(MemorySegment struct) {
        return struct.get(wLangId$LAYOUT, wLangId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LANGID wLangId
     * }
     */
    public static void wLangId(MemorySegment struct, short fieldValue) {
        struct.set(wLangId$LAYOUT, wLangId$OFFSET, fieldValue);
    }

    private static final AddressLayout lpAssemblyDirectory$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lpAssemblyDirectory"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPCSTR lpAssemblyDirectory
     * }
     */
    public static final AddressLayout lpAssemblyDirectory$layout() {
        return lpAssemblyDirectory$LAYOUT;
    }

    private static final long lpAssemblyDirectory$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPCSTR lpAssemblyDirectory
     * }
     */
    public static final long lpAssemblyDirectory$offset() {
        return lpAssemblyDirectory$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPCSTR lpAssemblyDirectory
     * }
     */
    public static MemorySegment lpAssemblyDirectory(MemorySegment struct) {
        return struct.get(lpAssemblyDirectory$LAYOUT, lpAssemblyDirectory$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPCSTR lpAssemblyDirectory
     * }
     */
    public static void lpAssemblyDirectory(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lpAssemblyDirectory$LAYOUT, lpAssemblyDirectory$OFFSET, fieldValue);
    }

    private static final AddressLayout lpResourceName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lpResourceName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPCSTR lpResourceName
     * }
     */
    public static final AddressLayout lpResourceName$layout() {
        return lpResourceName$LAYOUT;
    }

    private static final long lpResourceName$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPCSTR lpResourceName
     * }
     */
    public static final long lpResourceName$offset() {
        return lpResourceName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPCSTR lpResourceName
     * }
     */
    public static MemorySegment lpResourceName(MemorySegment struct) {
        return struct.get(lpResourceName$LAYOUT, lpResourceName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPCSTR lpResourceName
     * }
     */
    public static void lpResourceName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lpResourceName$LAYOUT, lpResourceName$OFFSET, fieldValue);
    }

    private static final AddressLayout lpApplicationName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lpApplicationName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPCSTR lpApplicationName
     * }
     */
    public static final AddressLayout lpApplicationName$layout() {
        return lpApplicationName$LAYOUT;
    }

    private static final long lpApplicationName$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPCSTR lpApplicationName
     * }
     */
    public static final long lpApplicationName$offset() {
        return lpApplicationName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPCSTR lpApplicationName
     * }
     */
    public static MemorySegment lpApplicationName(MemorySegment struct) {
        return struct.get(lpApplicationName$LAYOUT, lpApplicationName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPCSTR lpApplicationName
     * }
     */
    public static void lpApplicationName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lpApplicationName$LAYOUT, lpApplicationName$OFFSET, fieldValue);
    }

    private static final AddressLayout hModule$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hModule"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HMODULE hModule
     * }
     */
    public static final AddressLayout hModule$layout() {
        return hModule$LAYOUT;
    }

    private static final long hModule$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HMODULE hModule
     * }
     */
    public static final long hModule$offset() {
        return hModule$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HMODULE hModule
     * }
     */
    public static MemorySegment hModule(MemorySegment struct) {
        return struct.get(hModule$LAYOUT, hModule$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HMODULE hModule
     * }
     */
    public static void hModule(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hModule$LAYOUT, hModule$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

