// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class ITypeLibRegistrationVtbl {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetGuid"),
        Constants$root.C_POINTER$LAYOUT.withName("GetVersion"),
        Constants$root.C_POINTER$LAYOUT.withName("GetLcid"),
        Constants$root.C_POINTER$LAYOUT.withName("GetWin32Path"),
        Constants$root.C_POINTER$LAYOUT.withName("GetWin64Path"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDisplayName"),
        Constants$root.C_POINTER$LAYOUT.withName("GetFlags"),
        Constants$root.C_POINTER$LAYOUT.withName("GetHelpDir")
    ).withName("ITypeLibRegistrationVtbl");
    public static MemoryLayout $LAYOUT() {
        return ITypeLibRegistrationVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        ITypeLibRegistrationVtbl.QueryInterface$FUNC
    );
    public interface QueryInterface {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(QueryInterface fi, MemorySession session) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, ITypeLibRegistrationVtbl.QueryInterface$FUNC, session);
        }
        static QueryInterface ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)ITypeLibRegistrationVtbl.QueryInterface$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return ITypeLibRegistrationVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeLibRegistrationVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        ITypeLibRegistrationVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeLibRegistrationVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLibRegistrationVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment, MemorySession session) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), session);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        ITypeLibRegistrationVtbl.AddRef$FUNC
    );
    public interface AddRef {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(AddRef fi, MemorySession session) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, ITypeLibRegistrationVtbl.AddRef$FUNC, session);
        }
        static AddRef ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)ITypeLibRegistrationVtbl.AddRef$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return ITypeLibRegistrationVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeLibRegistrationVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        ITypeLibRegistrationVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeLibRegistrationVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLibRegistrationVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment, MemorySession session) {
        return AddRef.ofAddress(AddRef$get(segment), session);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        ITypeLibRegistrationVtbl.Release$FUNC
    );
    public interface Release {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Release fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Release.class, fi, ITypeLibRegistrationVtbl.Release$FUNC, session);
        }
        static Release ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)ITypeLibRegistrationVtbl.Release$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return ITypeLibRegistrationVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeLibRegistrationVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        ITypeLibRegistrationVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeLibRegistrationVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLibRegistrationVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment, MemorySession session) {
        return Release.ofAddress(Release$get(segment), session);
    }
    static final FunctionDescriptor GetGuid$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetGuid$MH = RuntimeHelper.downcallHandle(
        ITypeLibRegistrationVtbl.GetGuid$FUNC
    );
    public interface GetGuid {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetGuid fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetGuid.class, fi, ITypeLibRegistrationVtbl.GetGuid$FUNC, session);
        }
        static GetGuid ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)ITypeLibRegistrationVtbl.GetGuid$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetGuid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetGuid"));
    public static VarHandle GetGuid$VH() {
        return ITypeLibRegistrationVtbl.GetGuid$VH;
    }
    public static MemoryAddress GetGuid$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeLibRegistrationVtbl.GetGuid$VH.get(seg);
    }
    public static void GetGuid$set( MemorySegment seg, MemoryAddress x) {
        ITypeLibRegistrationVtbl.GetGuid$VH.set(seg, x);
    }
    public static MemoryAddress GetGuid$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeLibRegistrationVtbl.GetGuid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetGuid$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLibRegistrationVtbl.GetGuid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetGuid GetGuid (MemorySegment segment, MemorySession session) {
        return GetGuid.ofAddress(GetGuid$get(segment), session);
    }
    static final FunctionDescriptor GetVersion$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetVersion$MH = RuntimeHelper.downcallHandle(
        ITypeLibRegistrationVtbl.GetVersion$FUNC
    );
    public interface GetVersion {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetVersion fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetVersion.class, fi, ITypeLibRegistrationVtbl.GetVersion$FUNC, session);
        }
        static GetVersion ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)ITypeLibRegistrationVtbl.GetVersion$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetVersion"));
    public static VarHandle GetVersion$VH() {
        return ITypeLibRegistrationVtbl.GetVersion$VH;
    }
    public static MemoryAddress GetVersion$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeLibRegistrationVtbl.GetVersion$VH.get(seg);
    }
    public static void GetVersion$set( MemorySegment seg, MemoryAddress x) {
        ITypeLibRegistrationVtbl.GetVersion$VH.set(seg, x);
    }
    public static MemoryAddress GetVersion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeLibRegistrationVtbl.GetVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetVersion$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLibRegistrationVtbl.GetVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetVersion GetVersion (MemorySegment segment, MemorySession session) {
        return GetVersion.ofAddress(GetVersion$get(segment), session);
    }
    static final FunctionDescriptor GetLcid$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetLcid$MH = RuntimeHelper.downcallHandle(
        ITypeLibRegistrationVtbl.GetLcid$FUNC
    );
    public interface GetLcid {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetLcid fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetLcid.class, fi, ITypeLibRegistrationVtbl.GetLcid$FUNC, session);
        }
        static GetLcid ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)ITypeLibRegistrationVtbl.GetLcid$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetLcid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetLcid"));
    public static VarHandle GetLcid$VH() {
        return ITypeLibRegistrationVtbl.GetLcid$VH;
    }
    public static MemoryAddress GetLcid$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeLibRegistrationVtbl.GetLcid$VH.get(seg);
    }
    public static void GetLcid$set( MemorySegment seg, MemoryAddress x) {
        ITypeLibRegistrationVtbl.GetLcid$VH.set(seg, x);
    }
    public static MemoryAddress GetLcid$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeLibRegistrationVtbl.GetLcid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetLcid$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLibRegistrationVtbl.GetLcid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetLcid GetLcid (MemorySegment segment, MemorySession session) {
        return GetLcid.ofAddress(GetLcid$get(segment), session);
    }
    static final FunctionDescriptor GetWin32Path$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetWin32Path$MH = RuntimeHelper.downcallHandle(
        ITypeLibRegistrationVtbl.GetWin32Path$FUNC
    );
    public interface GetWin32Path {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetWin32Path fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetWin32Path.class, fi, ITypeLibRegistrationVtbl.GetWin32Path$FUNC, session);
        }
        static GetWin32Path ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)ITypeLibRegistrationVtbl.GetWin32Path$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetWin32Path$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetWin32Path"));
    public static VarHandle GetWin32Path$VH() {
        return ITypeLibRegistrationVtbl.GetWin32Path$VH;
    }
    public static MemoryAddress GetWin32Path$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeLibRegistrationVtbl.GetWin32Path$VH.get(seg);
    }
    public static void GetWin32Path$set( MemorySegment seg, MemoryAddress x) {
        ITypeLibRegistrationVtbl.GetWin32Path$VH.set(seg, x);
    }
    public static MemoryAddress GetWin32Path$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeLibRegistrationVtbl.GetWin32Path$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetWin32Path$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLibRegistrationVtbl.GetWin32Path$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetWin32Path GetWin32Path (MemorySegment segment, MemorySession session) {
        return GetWin32Path.ofAddress(GetWin32Path$get(segment), session);
    }
    static final FunctionDescriptor GetWin64Path$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetWin64Path$MH = RuntimeHelper.downcallHandle(
        ITypeLibRegistrationVtbl.GetWin64Path$FUNC
    );
    public interface GetWin64Path {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetWin64Path fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetWin64Path.class, fi, ITypeLibRegistrationVtbl.GetWin64Path$FUNC, session);
        }
        static GetWin64Path ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)ITypeLibRegistrationVtbl.GetWin64Path$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetWin64Path$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetWin64Path"));
    public static VarHandle GetWin64Path$VH() {
        return ITypeLibRegistrationVtbl.GetWin64Path$VH;
    }
    public static MemoryAddress GetWin64Path$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeLibRegistrationVtbl.GetWin64Path$VH.get(seg);
    }
    public static void GetWin64Path$set( MemorySegment seg, MemoryAddress x) {
        ITypeLibRegistrationVtbl.GetWin64Path$VH.set(seg, x);
    }
    public static MemoryAddress GetWin64Path$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeLibRegistrationVtbl.GetWin64Path$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetWin64Path$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLibRegistrationVtbl.GetWin64Path$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetWin64Path GetWin64Path (MemorySegment segment, MemorySession session) {
        return GetWin64Path.ofAddress(GetWin64Path$get(segment), session);
    }
    static final FunctionDescriptor GetDisplayName$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDisplayName$MH = RuntimeHelper.downcallHandle(
        ITypeLibRegistrationVtbl.GetDisplayName$FUNC
    );
    public interface GetDisplayName {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetDisplayName fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetDisplayName.class, fi, ITypeLibRegistrationVtbl.GetDisplayName$FUNC, session);
        }
        static GetDisplayName ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)ITypeLibRegistrationVtbl.GetDisplayName$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDisplayName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDisplayName"));
    public static VarHandle GetDisplayName$VH() {
        return ITypeLibRegistrationVtbl.GetDisplayName$VH;
    }
    public static MemoryAddress GetDisplayName$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeLibRegistrationVtbl.GetDisplayName$VH.get(seg);
    }
    public static void GetDisplayName$set( MemorySegment seg, MemoryAddress x) {
        ITypeLibRegistrationVtbl.GetDisplayName$VH.set(seg, x);
    }
    public static MemoryAddress GetDisplayName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeLibRegistrationVtbl.GetDisplayName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDisplayName$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLibRegistrationVtbl.GetDisplayName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDisplayName GetDisplayName (MemorySegment segment, MemorySession session) {
        return GetDisplayName.ofAddress(GetDisplayName$get(segment), session);
    }
    static final FunctionDescriptor GetFlags$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetFlags$MH = RuntimeHelper.downcallHandle(
        ITypeLibRegistrationVtbl.GetFlags$FUNC
    );
    public interface GetFlags {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetFlags fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetFlags.class, fi, ITypeLibRegistrationVtbl.GetFlags$FUNC, session);
        }
        static GetFlags ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)ITypeLibRegistrationVtbl.GetFlags$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetFlags"));
    public static VarHandle GetFlags$VH() {
        return ITypeLibRegistrationVtbl.GetFlags$VH;
    }
    public static MemoryAddress GetFlags$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeLibRegistrationVtbl.GetFlags$VH.get(seg);
    }
    public static void GetFlags$set( MemorySegment seg, MemoryAddress x) {
        ITypeLibRegistrationVtbl.GetFlags$VH.set(seg, x);
    }
    public static MemoryAddress GetFlags$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeLibRegistrationVtbl.GetFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetFlags$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLibRegistrationVtbl.GetFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetFlags GetFlags (MemorySegment segment, MemorySession session) {
        return GetFlags.ofAddress(GetFlags$get(segment), session);
    }
    static final FunctionDescriptor GetHelpDir$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetHelpDir$MH = RuntimeHelper.downcallHandle(
        ITypeLibRegistrationVtbl.GetHelpDir$FUNC
    );
    public interface GetHelpDir {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetHelpDir fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetHelpDir.class, fi, ITypeLibRegistrationVtbl.GetHelpDir$FUNC, session);
        }
        static GetHelpDir ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)ITypeLibRegistrationVtbl.GetHelpDir$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetHelpDir$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetHelpDir"));
    public static VarHandle GetHelpDir$VH() {
        return ITypeLibRegistrationVtbl.GetHelpDir$VH;
    }
    public static MemoryAddress GetHelpDir$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeLibRegistrationVtbl.GetHelpDir$VH.get(seg);
    }
    public static void GetHelpDir$set( MemorySegment seg, MemoryAddress x) {
        ITypeLibRegistrationVtbl.GetHelpDir$VH.set(seg, x);
    }
    public static MemoryAddress GetHelpDir$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeLibRegistrationVtbl.GetHelpDir$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetHelpDir$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLibRegistrationVtbl.GetHelpDir$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetHelpDir GetHelpDir (MemorySegment segment, MemorySession session) {
        return GetHelpDir.ofAddress(GetHelpDir$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


