// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _CERT_POLICY95_QUALIFIER1 {
 *     LPWSTR pszPracticesReference;
 *     LPSTR pszNoticeIdentifier;
 *     LPSTR pszNSINoticeIdentifier;
 *     DWORD cCPSURLs;
 *     CPS_URLS *rgCPSURLs;
 * }
 * }
 */
public class _CERT_POLICY95_QUALIFIER1 {

    _CERT_POLICY95_QUALIFIER1() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("pszPracticesReference"),
        wgl_h.C_POINTER.withName("pszNoticeIdentifier"),
        wgl_h.C_POINTER.withName("pszNSINoticeIdentifier"),
        wgl_h.C_LONG.withName("cCPSURLs"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_POINTER.withName("rgCPSURLs")
    ).withName("_CERT_POLICY95_QUALIFIER1");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout pszPracticesReference$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pszPracticesReference"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPWSTR pszPracticesReference
     * }
     */
    public static final AddressLayout pszPracticesReference$layout() {
        return pszPracticesReference$LAYOUT;
    }

    private static final long pszPracticesReference$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPWSTR pszPracticesReference
     * }
     */
    public static final long pszPracticesReference$offset() {
        return pszPracticesReference$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPWSTR pszPracticesReference
     * }
     */
    public static MemorySegment pszPracticesReference(MemorySegment struct) {
        return struct.get(pszPracticesReference$LAYOUT, pszPracticesReference$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPWSTR pszPracticesReference
     * }
     */
    public static void pszPracticesReference(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pszPracticesReference$LAYOUT, pszPracticesReference$OFFSET, fieldValue);
    }

    private static final AddressLayout pszNoticeIdentifier$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pszNoticeIdentifier"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPSTR pszNoticeIdentifier
     * }
     */
    public static final AddressLayout pszNoticeIdentifier$layout() {
        return pszNoticeIdentifier$LAYOUT;
    }

    private static final long pszNoticeIdentifier$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPSTR pszNoticeIdentifier
     * }
     */
    public static final long pszNoticeIdentifier$offset() {
        return pszNoticeIdentifier$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPSTR pszNoticeIdentifier
     * }
     */
    public static MemorySegment pszNoticeIdentifier(MemorySegment struct) {
        return struct.get(pszNoticeIdentifier$LAYOUT, pszNoticeIdentifier$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPSTR pszNoticeIdentifier
     * }
     */
    public static void pszNoticeIdentifier(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pszNoticeIdentifier$LAYOUT, pszNoticeIdentifier$OFFSET, fieldValue);
    }

    private static final AddressLayout pszNSINoticeIdentifier$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pszNSINoticeIdentifier"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPSTR pszNSINoticeIdentifier
     * }
     */
    public static final AddressLayout pszNSINoticeIdentifier$layout() {
        return pszNSINoticeIdentifier$LAYOUT;
    }

    private static final long pszNSINoticeIdentifier$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPSTR pszNSINoticeIdentifier
     * }
     */
    public static final long pszNSINoticeIdentifier$offset() {
        return pszNSINoticeIdentifier$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPSTR pszNSINoticeIdentifier
     * }
     */
    public static MemorySegment pszNSINoticeIdentifier(MemorySegment struct) {
        return struct.get(pszNSINoticeIdentifier$LAYOUT, pszNSINoticeIdentifier$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPSTR pszNSINoticeIdentifier
     * }
     */
    public static void pszNSINoticeIdentifier(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pszNSINoticeIdentifier$LAYOUT, pszNSINoticeIdentifier$OFFSET, fieldValue);
    }

    private static final OfInt cCPSURLs$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cCPSURLs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD cCPSURLs
     * }
     */
    public static final OfInt cCPSURLs$layout() {
        return cCPSURLs$LAYOUT;
    }

    private static final long cCPSURLs$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD cCPSURLs
     * }
     */
    public static final long cCPSURLs$offset() {
        return cCPSURLs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD cCPSURLs
     * }
     */
    public static int cCPSURLs(MemorySegment struct) {
        return struct.get(cCPSURLs$LAYOUT, cCPSURLs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD cCPSURLs
     * }
     */
    public static void cCPSURLs(MemorySegment struct, int fieldValue) {
        struct.set(cCPSURLs$LAYOUT, cCPSURLs$OFFSET, fieldValue);
    }

    private static final AddressLayout rgCPSURLs$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("rgCPSURLs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CPS_URLS *rgCPSURLs
     * }
     */
    public static final AddressLayout rgCPSURLs$layout() {
        return rgCPSURLs$LAYOUT;
    }

    private static final long rgCPSURLs$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CPS_URLS *rgCPSURLs
     * }
     */
    public static final long rgCPSURLs$offset() {
        return rgCPSURLs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CPS_URLS *rgCPSURLs
     * }
     */
    public static MemorySegment rgCPSURLs(MemorySegment struct) {
        return struct.get(rgCPSURLs$LAYOUT, rgCPSURLs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CPS_URLS *rgCPSURLs
     * }
     */
    public static void rgCPSURLs(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(rgCPSURLs$LAYOUT, rgCPSURLs$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

