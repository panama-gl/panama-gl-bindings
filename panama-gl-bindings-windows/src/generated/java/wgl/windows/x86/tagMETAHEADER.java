// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tagMETAHEADER {
 *     WORD mtType;
 *     WORD mtHeaderSize;
 *     WORD mtVersion;
 *     DWORD mtSize;
 *     WORD mtNoObjects;
 *     DWORD mtMaxRecord;
 *     WORD mtNoParameters;
 * }
 * }
 */
public class tagMETAHEADER {

    tagMETAHEADER() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_SHORT.withName("mtType"),
        wgl_h.C_SHORT.withName("mtHeaderSize"),
        wgl_h.C_SHORT.withName("mtVersion"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("mtSize"),
        wgl_h.C_SHORT.withName("mtNoObjects"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("mtMaxRecord"),
        wgl_h.C_SHORT.withName("mtNoParameters")
    ).withName("tagMETAHEADER");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfShort mtType$LAYOUT = (OfShort)$LAYOUT.select(groupElement("mtType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD mtType
     * }
     */
    public static final OfShort mtType$layout() {
        return mtType$LAYOUT;
    }

    private static final long mtType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD mtType
     * }
     */
    public static final long mtType$offset() {
        return mtType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD mtType
     * }
     */
    public static short mtType(MemorySegment struct) {
        return struct.get(mtType$LAYOUT, mtType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD mtType
     * }
     */
    public static void mtType(MemorySegment struct, short fieldValue) {
        struct.set(mtType$LAYOUT, mtType$OFFSET, fieldValue);
    }

    private static final OfShort mtHeaderSize$LAYOUT = (OfShort)$LAYOUT.select(groupElement("mtHeaderSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD mtHeaderSize
     * }
     */
    public static final OfShort mtHeaderSize$layout() {
        return mtHeaderSize$LAYOUT;
    }

    private static final long mtHeaderSize$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD mtHeaderSize
     * }
     */
    public static final long mtHeaderSize$offset() {
        return mtHeaderSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD mtHeaderSize
     * }
     */
    public static short mtHeaderSize(MemorySegment struct) {
        return struct.get(mtHeaderSize$LAYOUT, mtHeaderSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD mtHeaderSize
     * }
     */
    public static void mtHeaderSize(MemorySegment struct, short fieldValue) {
        struct.set(mtHeaderSize$LAYOUT, mtHeaderSize$OFFSET, fieldValue);
    }

    private static final OfShort mtVersion$LAYOUT = (OfShort)$LAYOUT.select(groupElement("mtVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD mtVersion
     * }
     */
    public static final OfShort mtVersion$layout() {
        return mtVersion$LAYOUT;
    }

    private static final long mtVersion$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD mtVersion
     * }
     */
    public static final long mtVersion$offset() {
        return mtVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD mtVersion
     * }
     */
    public static short mtVersion(MemorySegment struct) {
        return struct.get(mtVersion$LAYOUT, mtVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD mtVersion
     * }
     */
    public static void mtVersion(MemorySegment struct, short fieldValue) {
        struct.set(mtVersion$LAYOUT, mtVersion$OFFSET, fieldValue);
    }

    private static final OfInt mtSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mtSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD mtSize
     * }
     */
    public static final OfInt mtSize$layout() {
        return mtSize$LAYOUT;
    }

    private static final long mtSize$OFFSET = 6;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD mtSize
     * }
     */
    public static final long mtSize$offset() {
        return mtSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD mtSize
     * }
     */
    public static int mtSize(MemorySegment struct) {
        return struct.get(mtSize$LAYOUT, mtSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD mtSize
     * }
     */
    public static void mtSize(MemorySegment struct, int fieldValue) {
        struct.set(mtSize$LAYOUT, mtSize$OFFSET, fieldValue);
    }

    private static final OfShort mtNoObjects$LAYOUT = (OfShort)$LAYOUT.select(groupElement("mtNoObjects"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD mtNoObjects
     * }
     */
    public static final OfShort mtNoObjects$layout() {
        return mtNoObjects$LAYOUT;
    }

    private static final long mtNoObjects$OFFSET = 10;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD mtNoObjects
     * }
     */
    public static final long mtNoObjects$offset() {
        return mtNoObjects$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD mtNoObjects
     * }
     */
    public static short mtNoObjects(MemorySegment struct) {
        return struct.get(mtNoObjects$LAYOUT, mtNoObjects$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD mtNoObjects
     * }
     */
    public static void mtNoObjects(MemorySegment struct, short fieldValue) {
        struct.set(mtNoObjects$LAYOUT, mtNoObjects$OFFSET, fieldValue);
    }

    private static final OfInt mtMaxRecord$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mtMaxRecord"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD mtMaxRecord
     * }
     */
    public static final OfInt mtMaxRecord$layout() {
        return mtMaxRecord$LAYOUT;
    }

    private static final long mtMaxRecord$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD mtMaxRecord
     * }
     */
    public static final long mtMaxRecord$offset() {
        return mtMaxRecord$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD mtMaxRecord
     * }
     */
    public static int mtMaxRecord(MemorySegment struct) {
        return struct.get(mtMaxRecord$LAYOUT, mtMaxRecord$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD mtMaxRecord
     * }
     */
    public static void mtMaxRecord(MemorySegment struct, int fieldValue) {
        struct.set(mtMaxRecord$LAYOUT, mtMaxRecord$OFFSET, fieldValue);
    }

    private static final OfShort mtNoParameters$LAYOUT = (OfShort)$LAYOUT.select(groupElement("mtNoParameters"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD mtNoParameters
     * }
     */
    public static final OfShort mtNoParameters$layout() {
        return mtNoParameters$LAYOUT;
    }

    private static final long mtNoParameters$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD mtNoParameters
     * }
     */
    public static final long mtNoParameters$offset() {
        return mtNoParameters$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD mtNoParameters
     * }
     */
    public static short mtNoParameters(MemorySegment struct) {
        return struct.get(mtNoParameters$LAYOUT, mtNoParameters$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD mtNoParameters
     * }
     */
    public static void mtNoParameters(MemorySegment struct, short fieldValue) {
        struct.set(mtNoParameters$LAYOUT, mtNoParameters$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

