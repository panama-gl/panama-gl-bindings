// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     DWORD bV4Size;
 *     LONG bV4Width;
 *     LONG bV4Height;
 *     WORD bV4Planes;
 *     WORD bV4BitCount;
 *     DWORD bV4V4Compression;
 *     DWORD bV4SizeImage;
 *     LONG bV4XPelsPerMeter;
 *     LONG bV4YPelsPerMeter;
 *     DWORD bV4ClrUsed;
 *     DWORD bV4ClrImportant;
 *     DWORD bV4RedMask;
 *     DWORD bV4GreenMask;
 *     DWORD bV4BlueMask;
 *     DWORD bV4AlphaMask;
 *     DWORD bV4CSType;
 *     CIEXYZTRIPLE bV4Endpoints;
 *     DWORD bV4GammaRed;
 *     DWORD bV4GammaGreen;
 *     DWORD bV4GammaBlue;
 * }
 * }
 */
public class BITMAPV4HEADER {

    BITMAPV4HEADER() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("bV4Size"),
        wgl_h.C_LONG.withName("bV4Width"),
        wgl_h.C_LONG.withName("bV4Height"),
        wgl_h.C_SHORT.withName("bV4Planes"),
        wgl_h.C_SHORT.withName("bV4BitCount"),
        wgl_h.C_LONG.withName("bV4V4Compression"),
        wgl_h.C_LONG.withName("bV4SizeImage"),
        wgl_h.C_LONG.withName("bV4XPelsPerMeter"),
        wgl_h.C_LONG.withName("bV4YPelsPerMeter"),
        wgl_h.C_LONG.withName("bV4ClrUsed"),
        wgl_h.C_LONG.withName("bV4ClrImportant"),
        wgl_h.C_LONG.withName("bV4RedMask"),
        wgl_h.C_LONG.withName("bV4GreenMask"),
        wgl_h.C_LONG.withName("bV4BlueMask"),
        wgl_h.C_LONG.withName("bV4AlphaMask"),
        wgl_h.C_LONG.withName("bV4CSType"),
        tagICEXYZTRIPLE.layout().withName("bV4Endpoints"),
        wgl_h.C_LONG.withName("bV4GammaRed"),
        wgl_h.C_LONG.withName("bV4GammaGreen"),
        wgl_h.C_LONG.withName("bV4GammaBlue")
    ).withName("$anon$834:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt bV4Size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bV4Size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD bV4Size
     * }
     */
    public static final OfInt bV4Size$layout() {
        return bV4Size$LAYOUT;
    }

    private static final long bV4Size$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD bV4Size
     * }
     */
    public static final long bV4Size$offset() {
        return bV4Size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD bV4Size
     * }
     */
    public static int bV4Size(MemorySegment struct) {
        return struct.get(bV4Size$LAYOUT, bV4Size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD bV4Size
     * }
     */
    public static void bV4Size(MemorySegment struct, int fieldValue) {
        struct.set(bV4Size$LAYOUT, bV4Size$OFFSET, fieldValue);
    }

    private static final OfInt bV4Width$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bV4Width"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LONG bV4Width
     * }
     */
    public static final OfInt bV4Width$layout() {
        return bV4Width$LAYOUT;
    }

    private static final long bV4Width$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LONG bV4Width
     * }
     */
    public static final long bV4Width$offset() {
        return bV4Width$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LONG bV4Width
     * }
     */
    public static int bV4Width(MemorySegment struct) {
        return struct.get(bV4Width$LAYOUT, bV4Width$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LONG bV4Width
     * }
     */
    public static void bV4Width(MemorySegment struct, int fieldValue) {
        struct.set(bV4Width$LAYOUT, bV4Width$OFFSET, fieldValue);
    }

    private static final OfInt bV4Height$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bV4Height"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LONG bV4Height
     * }
     */
    public static final OfInt bV4Height$layout() {
        return bV4Height$LAYOUT;
    }

    private static final long bV4Height$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LONG bV4Height
     * }
     */
    public static final long bV4Height$offset() {
        return bV4Height$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LONG bV4Height
     * }
     */
    public static int bV4Height(MemorySegment struct) {
        return struct.get(bV4Height$LAYOUT, bV4Height$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LONG bV4Height
     * }
     */
    public static void bV4Height(MemorySegment struct, int fieldValue) {
        struct.set(bV4Height$LAYOUT, bV4Height$OFFSET, fieldValue);
    }

    private static final OfShort bV4Planes$LAYOUT = (OfShort)$LAYOUT.select(groupElement("bV4Planes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD bV4Planes
     * }
     */
    public static final OfShort bV4Planes$layout() {
        return bV4Planes$LAYOUT;
    }

    private static final long bV4Planes$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD bV4Planes
     * }
     */
    public static final long bV4Planes$offset() {
        return bV4Planes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD bV4Planes
     * }
     */
    public static short bV4Planes(MemorySegment struct) {
        return struct.get(bV4Planes$LAYOUT, bV4Planes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD bV4Planes
     * }
     */
    public static void bV4Planes(MemorySegment struct, short fieldValue) {
        struct.set(bV4Planes$LAYOUT, bV4Planes$OFFSET, fieldValue);
    }

    private static final OfShort bV4BitCount$LAYOUT = (OfShort)$LAYOUT.select(groupElement("bV4BitCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD bV4BitCount
     * }
     */
    public static final OfShort bV4BitCount$layout() {
        return bV4BitCount$LAYOUT;
    }

    private static final long bV4BitCount$OFFSET = 14;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD bV4BitCount
     * }
     */
    public static final long bV4BitCount$offset() {
        return bV4BitCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD bV4BitCount
     * }
     */
    public static short bV4BitCount(MemorySegment struct) {
        return struct.get(bV4BitCount$LAYOUT, bV4BitCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD bV4BitCount
     * }
     */
    public static void bV4BitCount(MemorySegment struct, short fieldValue) {
        struct.set(bV4BitCount$LAYOUT, bV4BitCount$OFFSET, fieldValue);
    }

    private static final OfInt bV4V4Compression$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bV4V4Compression"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD bV4V4Compression
     * }
     */
    public static final OfInt bV4V4Compression$layout() {
        return bV4V4Compression$LAYOUT;
    }

    private static final long bV4V4Compression$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD bV4V4Compression
     * }
     */
    public static final long bV4V4Compression$offset() {
        return bV4V4Compression$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD bV4V4Compression
     * }
     */
    public static int bV4V4Compression(MemorySegment struct) {
        return struct.get(bV4V4Compression$LAYOUT, bV4V4Compression$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD bV4V4Compression
     * }
     */
    public static void bV4V4Compression(MemorySegment struct, int fieldValue) {
        struct.set(bV4V4Compression$LAYOUT, bV4V4Compression$OFFSET, fieldValue);
    }

    private static final OfInt bV4SizeImage$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bV4SizeImage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD bV4SizeImage
     * }
     */
    public static final OfInt bV4SizeImage$layout() {
        return bV4SizeImage$LAYOUT;
    }

    private static final long bV4SizeImage$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD bV4SizeImage
     * }
     */
    public static final long bV4SizeImage$offset() {
        return bV4SizeImage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD bV4SizeImage
     * }
     */
    public static int bV4SizeImage(MemorySegment struct) {
        return struct.get(bV4SizeImage$LAYOUT, bV4SizeImage$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD bV4SizeImage
     * }
     */
    public static void bV4SizeImage(MemorySegment struct, int fieldValue) {
        struct.set(bV4SizeImage$LAYOUT, bV4SizeImage$OFFSET, fieldValue);
    }

    private static final OfInt bV4XPelsPerMeter$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bV4XPelsPerMeter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LONG bV4XPelsPerMeter
     * }
     */
    public static final OfInt bV4XPelsPerMeter$layout() {
        return bV4XPelsPerMeter$LAYOUT;
    }

    private static final long bV4XPelsPerMeter$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LONG bV4XPelsPerMeter
     * }
     */
    public static final long bV4XPelsPerMeter$offset() {
        return bV4XPelsPerMeter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LONG bV4XPelsPerMeter
     * }
     */
    public static int bV4XPelsPerMeter(MemorySegment struct) {
        return struct.get(bV4XPelsPerMeter$LAYOUT, bV4XPelsPerMeter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LONG bV4XPelsPerMeter
     * }
     */
    public static void bV4XPelsPerMeter(MemorySegment struct, int fieldValue) {
        struct.set(bV4XPelsPerMeter$LAYOUT, bV4XPelsPerMeter$OFFSET, fieldValue);
    }

    private static final OfInt bV4YPelsPerMeter$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bV4YPelsPerMeter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LONG bV4YPelsPerMeter
     * }
     */
    public static final OfInt bV4YPelsPerMeter$layout() {
        return bV4YPelsPerMeter$LAYOUT;
    }

    private static final long bV4YPelsPerMeter$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LONG bV4YPelsPerMeter
     * }
     */
    public static final long bV4YPelsPerMeter$offset() {
        return bV4YPelsPerMeter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LONG bV4YPelsPerMeter
     * }
     */
    public static int bV4YPelsPerMeter(MemorySegment struct) {
        return struct.get(bV4YPelsPerMeter$LAYOUT, bV4YPelsPerMeter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LONG bV4YPelsPerMeter
     * }
     */
    public static void bV4YPelsPerMeter(MemorySegment struct, int fieldValue) {
        struct.set(bV4YPelsPerMeter$LAYOUT, bV4YPelsPerMeter$OFFSET, fieldValue);
    }

    private static final OfInt bV4ClrUsed$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bV4ClrUsed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD bV4ClrUsed
     * }
     */
    public static final OfInt bV4ClrUsed$layout() {
        return bV4ClrUsed$LAYOUT;
    }

    private static final long bV4ClrUsed$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD bV4ClrUsed
     * }
     */
    public static final long bV4ClrUsed$offset() {
        return bV4ClrUsed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD bV4ClrUsed
     * }
     */
    public static int bV4ClrUsed(MemorySegment struct) {
        return struct.get(bV4ClrUsed$LAYOUT, bV4ClrUsed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD bV4ClrUsed
     * }
     */
    public static void bV4ClrUsed(MemorySegment struct, int fieldValue) {
        struct.set(bV4ClrUsed$LAYOUT, bV4ClrUsed$OFFSET, fieldValue);
    }

    private static final OfInt bV4ClrImportant$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bV4ClrImportant"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD bV4ClrImportant
     * }
     */
    public static final OfInt bV4ClrImportant$layout() {
        return bV4ClrImportant$LAYOUT;
    }

    private static final long bV4ClrImportant$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD bV4ClrImportant
     * }
     */
    public static final long bV4ClrImportant$offset() {
        return bV4ClrImportant$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD bV4ClrImportant
     * }
     */
    public static int bV4ClrImportant(MemorySegment struct) {
        return struct.get(bV4ClrImportant$LAYOUT, bV4ClrImportant$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD bV4ClrImportant
     * }
     */
    public static void bV4ClrImportant(MemorySegment struct, int fieldValue) {
        struct.set(bV4ClrImportant$LAYOUT, bV4ClrImportant$OFFSET, fieldValue);
    }

    private static final OfInt bV4RedMask$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bV4RedMask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD bV4RedMask
     * }
     */
    public static final OfInt bV4RedMask$layout() {
        return bV4RedMask$LAYOUT;
    }

    private static final long bV4RedMask$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD bV4RedMask
     * }
     */
    public static final long bV4RedMask$offset() {
        return bV4RedMask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD bV4RedMask
     * }
     */
    public static int bV4RedMask(MemorySegment struct) {
        return struct.get(bV4RedMask$LAYOUT, bV4RedMask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD bV4RedMask
     * }
     */
    public static void bV4RedMask(MemorySegment struct, int fieldValue) {
        struct.set(bV4RedMask$LAYOUT, bV4RedMask$OFFSET, fieldValue);
    }

    private static final OfInt bV4GreenMask$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bV4GreenMask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD bV4GreenMask
     * }
     */
    public static final OfInt bV4GreenMask$layout() {
        return bV4GreenMask$LAYOUT;
    }

    private static final long bV4GreenMask$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD bV4GreenMask
     * }
     */
    public static final long bV4GreenMask$offset() {
        return bV4GreenMask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD bV4GreenMask
     * }
     */
    public static int bV4GreenMask(MemorySegment struct) {
        return struct.get(bV4GreenMask$LAYOUT, bV4GreenMask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD bV4GreenMask
     * }
     */
    public static void bV4GreenMask(MemorySegment struct, int fieldValue) {
        struct.set(bV4GreenMask$LAYOUT, bV4GreenMask$OFFSET, fieldValue);
    }

    private static final OfInt bV4BlueMask$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bV4BlueMask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD bV4BlueMask
     * }
     */
    public static final OfInt bV4BlueMask$layout() {
        return bV4BlueMask$LAYOUT;
    }

    private static final long bV4BlueMask$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD bV4BlueMask
     * }
     */
    public static final long bV4BlueMask$offset() {
        return bV4BlueMask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD bV4BlueMask
     * }
     */
    public static int bV4BlueMask(MemorySegment struct) {
        return struct.get(bV4BlueMask$LAYOUT, bV4BlueMask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD bV4BlueMask
     * }
     */
    public static void bV4BlueMask(MemorySegment struct, int fieldValue) {
        struct.set(bV4BlueMask$LAYOUT, bV4BlueMask$OFFSET, fieldValue);
    }

    private static final OfInt bV4AlphaMask$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bV4AlphaMask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD bV4AlphaMask
     * }
     */
    public static final OfInt bV4AlphaMask$layout() {
        return bV4AlphaMask$LAYOUT;
    }

    private static final long bV4AlphaMask$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD bV4AlphaMask
     * }
     */
    public static final long bV4AlphaMask$offset() {
        return bV4AlphaMask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD bV4AlphaMask
     * }
     */
    public static int bV4AlphaMask(MemorySegment struct) {
        return struct.get(bV4AlphaMask$LAYOUT, bV4AlphaMask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD bV4AlphaMask
     * }
     */
    public static void bV4AlphaMask(MemorySegment struct, int fieldValue) {
        struct.set(bV4AlphaMask$LAYOUT, bV4AlphaMask$OFFSET, fieldValue);
    }

    private static final OfInt bV4CSType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bV4CSType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD bV4CSType
     * }
     */
    public static final OfInt bV4CSType$layout() {
        return bV4CSType$LAYOUT;
    }

    private static final long bV4CSType$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD bV4CSType
     * }
     */
    public static final long bV4CSType$offset() {
        return bV4CSType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD bV4CSType
     * }
     */
    public static int bV4CSType(MemorySegment struct) {
        return struct.get(bV4CSType$LAYOUT, bV4CSType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD bV4CSType
     * }
     */
    public static void bV4CSType(MemorySegment struct, int fieldValue) {
        struct.set(bV4CSType$LAYOUT, bV4CSType$OFFSET, fieldValue);
    }

    private static final GroupLayout bV4Endpoints$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("bV4Endpoints"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CIEXYZTRIPLE bV4Endpoints
     * }
     */
    public static final GroupLayout bV4Endpoints$layout() {
        return bV4Endpoints$LAYOUT;
    }

    private static final long bV4Endpoints$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CIEXYZTRIPLE bV4Endpoints
     * }
     */
    public static final long bV4Endpoints$offset() {
        return bV4Endpoints$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CIEXYZTRIPLE bV4Endpoints
     * }
     */
    public static MemorySegment bV4Endpoints(MemorySegment struct) {
        return struct.asSlice(bV4Endpoints$OFFSET, bV4Endpoints$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CIEXYZTRIPLE bV4Endpoints
     * }
     */
    public static void bV4Endpoints(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, bV4Endpoints$OFFSET, bV4Endpoints$LAYOUT.byteSize());
    }

    private static final OfInt bV4GammaRed$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bV4GammaRed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD bV4GammaRed
     * }
     */
    public static final OfInt bV4GammaRed$layout() {
        return bV4GammaRed$LAYOUT;
    }

    private static final long bV4GammaRed$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD bV4GammaRed
     * }
     */
    public static final long bV4GammaRed$offset() {
        return bV4GammaRed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD bV4GammaRed
     * }
     */
    public static int bV4GammaRed(MemorySegment struct) {
        return struct.get(bV4GammaRed$LAYOUT, bV4GammaRed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD bV4GammaRed
     * }
     */
    public static void bV4GammaRed(MemorySegment struct, int fieldValue) {
        struct.set(bV4GammaRed$LAYOUT, bV4GammaRed$OFFSET, fieldValue);
    }

    private static final OfInt bV4GammaGreen$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bV4GammaGreen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD bV4GammaGreen
     * }
     */
    public static final OfInt bV4GammaGreen$layout() {
        return bV4GammaGreen$LAYOUT;
    }

    private static final long bV4GammaGreen$OFFSET = 100;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD bV4GammaGreen
     * }
     */
    public static final long bV4GammaGreen$offset() {
        return bV4GammaGreen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD bV4GammaGreen
     * }
     */
    public static int bV4GammaGreen(MemorySegment struct) {
        return struct.get(bV4GammaGreen$LAYOUT, bV4GammaGreen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD bV4GammaGreen
     * }
     */
    public static void bV4GammaGreen(MemorySegment struct, int fieldValue) {
        struct.set(bV4GammaGreen$LAYOUT, bV4GammaGreen$OFFSET, fieldValue);
    }

    private static final OfInt bV4GammaBlue$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bV4GammaBlue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD bV4GammaBlue
     * }
     */
    public static final OfInt bV4GammaBlue$layout() {
        return bV4GammaBlue$LAYOUT;
    }

    private static final long bV4GammaBlue$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD bV4GammaBlue
     * }
     */
    public static final long bV4GammaBlue$offset() {
        return bV4GammaBlue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD bV4GammaBlue
     * }
     */
    public static int bV4GammaBlue(MemorySegment struct) {
        return struct.get(bV4GammaBlue$LAYOUT, bV4GammaBlue$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD bV4GammaBlue
     * }
     */
    public static void bV4GammaBlue(MemorySegment struct, int fieldValue) {
        struct.set(bV4GammaBlue$LAYOUT, bV4GammaBlue$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

