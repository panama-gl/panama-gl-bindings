// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _STREAM_LAYOUT_ENTRY {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Version"),
        Constants$root.C_LONG$LAYOUT.withName("NextStreamOffset"),
        Constants$root.C_LONG$LAYOUT.withName("Flags"),
        Constants$root.C_LONG$LAYOUT.withName("ExtentInformationOffset"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("AllocationSize"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("EndOfFile"),
        Constants$root.C_LONG$LAYOUT.withName("StreamInformationOffset"),
        Constants$root.C_LONG$LAYOUT.withName("AttributeTypeCode"),
        Constants$root.C_LONG$LAYOUT.withName("AttributeFlags"),
        Constants$root.C_LONG$LAYOUT.withName("StreamIdentifierLength"),
        MemoryLayout.sequenceLayout(1, Constants$root.C_SHORT$LAYOUT).withName("StreamIdentifier"),
        MemoryLayout.paddingLayout(48)
    ).withName("_STREAM_LAYOUT_ENTRY");
    public static MemoryLayout $LAYOUT() {
        return _STREAM_LAYOUT_ENTRY.$struct$LAYOUT;
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _STREAM_LAYOUT_ENTRY.Version$VH;
    }
    public static int Version$get(MemorySegment seg) {
        return (int)_STREAM_LAYOUT_ENTRY.Version$VH.get(seg);
    }
    public static void Version$set( MemorySegment seg, int x) {
        _STREAM_LAYOUT_ENTRY.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)_STREAM_LAYOUT_ENTRY.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        _STREAM_LAYOUT_ENTRY.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NextStreamOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NextStreamOffset"));
    public static VarHandle NextStreamOffset$VH() {
        return _STREAM_LAYOUT_ENTRY.NextStreamOffset$VH;
    }
    public static int NextStreamOffset$get(MemorySegment seg) {
        return (int)_STREAM_LAYOUT_ENTRY.NextStreamOffset$VH.get(seg);
    }
    public static void NextStreamOffset$set( MemorySegment seg, int x) {
        _STREAM_LAYOUT_ENTRY.NextStreamOffset$VH.set(seg, x);
    }
    public static int NextStreamOffset$get(MemorySegment seg, long index) {
        return (int)_STREAM_LAYOUT_ENTRY.NextStreamOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NextStreamOffset$set(MemorySegment seg, long index, int x) {
        _STREAM_LAYOUT_ENTRY.NextStreamOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return _STREAM_LAYOUT_ENTRY.Flags$VH;
    }
    public static int Flags$get(MemorySegment seg) {
        return (int)_STREAM_LAYOUT_ENTRY.Flags$VH.get(seg);
    }
    public static void Flags$set( MemorySegment seg, int x) {
        _STREAM_LAYOUT_ENTRY.Flags$VH.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)_STREAM_LAYOUT_ENTRY.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        _STREAM_LAYOUT_ENTRY.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ExtentInformationOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ExtentInformationOffset"));
    public static VarHandle ExtentInformationOffset$VH() {
        return _STREAM_LAYOUT_ENTRY.ExtentInformationOffset$VH;
    }
    public static int ExtentInformationOffset$get(MemorySegment seg) {
        return (int)_STREAM_LAYOUT_ENTRY.ExtentInformationOffset$VH.get(seg);
    }
    public static void ExtentInformationOffset$set( MemorySegment seg, int x) {
        _STREAM_LAYOUT_ENTRY.ExtentInformationOffset$VH.set(seg, x);
    }
    public static int ExtentInformationOffset$get(MemorySegment seg, long index) {
        return (int)_STREAM_LAYOUT_ENTRY.ExtentInformationOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ExtentInformationOffset$set(MemorySegment seg, long index, int x) {
        _STREAM_LAYOUT_ENTRY.ExtentInformationOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment AllocationSize$slice(MemorySegment seg) {
        return seg.asSlice(16, 8);
    }
    public static MemorySegment EndOfFile$slice(MemorySegment seg) {
        return seg.asSlice(24, 8);
    }
    static final VarHandle StreamInformationOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("StreamInformationOffset"));
    public static VarHandle StreamInformationOffset$VH() {
        return _STREAM_LAYOUT_ENTRY.StreamInformationOffset$VH;
    }
    public static int StreamInformationOffset$get(MemorySegment seg) {
        return (int)_STREAM_LAYOUT_ENTRY.StreamInformationOffset$VH.get(seg);
    }
    public static void StreamInformationOffset$set( MemorySegment seg, int x) {
        _STREAM_LAYOUT_ENTRY.StreamInformationOffset$VH.set(seg, x);
    }
    public static int StreamInformationOffset$get(MemorySegment seg, long index) {
        return (int)_STREAM_LAYOUT_ENTRY.StreamInformationOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void StreamInformationOffset$set(MemorySegment seg, long index, int x) {
        _STREAM_LAYOUT_ENTRY.StreamInformationOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AttributeTypeCode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AttributeTypeCode"));
    public static VarHandle AttributeTypeCode$VH() {
        return _STREAM_LAYOUT_ENTRY.AttributeTypeCode$VH;
    }
    public static int AttributeTypeCode$get(MemorySegment seg) {
        return (int)_STREAM_LAYOUT_ENTRY.AttributeTypeCode$VH.get(seg);
    }
    public static void AttributeTypeCode$set( MemorySegment seg, int x) {
        _STREAM_LAYOUT_ENTRY.AttributeTypeCode$VH.set(seg, x);
    }
    public static int AttributeTypeCode$get(MemorySegment seg, long index) {
        return (int)_STREAM_LAYOUT_ENTRY.AttributeTypeCode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AttributeTypeCode$set(MemorySegment seg, long index, int x) {
        _STREAM_LAYOUT_ENTRY.AttributeTypeCode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AttributeFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AttributeFlags"));
    public static VarHandle AttributeFlags$VH() {
        return _STREAM_LAYOUT_ENTRY.AttributeFlags$VH;
    }
    public static int AttributeFlags$get(MemorySegment seg) {
        return (int)_STREAM_LAYOUT_ENTRY.AttributeFlags$VH.get(seg);
    }
    public static void AttributeFlags$set( MemorySegment seg, int x) {
        _STREAM_LAYOUT_ENTRY.AttributeFlags$VH.set(seg, x);
    }
    public static int AttributeFlags$get(MemorySegment seg, long index) {
        return (int)_STREAM_LAYOUT_ENTRY.AttributeFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AttributeFlags$set(MemorySegment seg, long index, int x) {
        _STREAM_LAYOUT_ENTRY.AttributeFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle StreamIdentifierLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("StreamIdentifierLength"));
    public static VarHandle StreamIdentifierLength$VH() {
        return _STREAM_LAYOUT_ENTRY.StreamIdentifierLength$VH;
    }
    public static int StreamIdentifierLength$get(MemorySegment seg) {
        return (int)_STREAM_LAYOUT_ENTRY.StreamIdentifierLength$VH.get(seg);
    }
    public static void StreamIdentifierLength$set( MemorySegment seg, int x) {
        _STREAM_LAYOUT_ENTRY.StreamIdentifierLength$VH.set(seg, x);
    }
    public static int StreamIdentifierLength$get(MemorySegment seg, long index) {
        return (int)_STREAM_LAYOUT_ENTRY.StreamIdentifierLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void StreamIdentifierLength$set(MemorySegment seg, long index, int x) {
        _STREAM_LAYOUT_ENTRY.StreamIdentifierLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment StreamIdentifier$slice(MemorySegment seg) {
        return seg.asSlice(48, 2);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


