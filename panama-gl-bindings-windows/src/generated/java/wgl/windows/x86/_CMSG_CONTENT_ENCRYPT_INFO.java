// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _CMSG_CONTENT_ENCRYPT_INFO {
 *     DWORD cbSize;
 *     HCRYPTPROV_LEGACY hCryptProv;
 *     CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
 *     void *pvEncryptionAuxInfo;
 *     DWORD cRecipients;
 *     PCMSG_RECIPIENT_ENCODE_INFO rgCmsRecipients;
 *     PFN_CMSG_ALLOC pfnAlloc;
 *     PFN_CMSG_FREE pfnFree;
 *     DWORD dwEncryptFlags;
 *     union {
 *         HCRYPTKEY hContentEncryptKey;
 *         BCRYPT_KEY_HANDLE hCNGContentEncryptKey;
 *     };
 *     DWORD dwFlags;
 *     BOOL fCNG;
 *     BYTE *pbCNGContentEncryptKeyObject;
 *     BYTE *pbContentEncryptKey;
 *     DWORD cbContentEncryptKey;
 * }
 * }
 */
public class _CMSG_CONTENT_ENCRYPT_INFO {

    _CMSG_CONTENT_ENCRYPT_INFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("cbSize"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_LONG_LONG.withName("hCryptProv"),
        _CRYPT_ALGORITHM_IDENTIFIER.layout().withName("ContentEncryptionAlgorithm"),
        wgl_h.C_POINTER.withName("pvEncryptionAuxInfo"),
        wgl_h.C_LONG.withName("cRecipients"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_POINTER.withName("rgCmsRecipients"),
        wgl_h.C_POINTER.withName("pfnAlloc"),
        wgl_h.C_POINTER.withName("pfnFree"),
        wgl_h.C_LONG.withName("dwEncryptFlags"),
        MemoryLayout.paddingLayout(4),
        MemoryLayout.unionLayout(
            wgl_h.C_LONG_LONG.withName("hContentEncryptKey"),
            wgl_h.C_POINTER.withName("hCNGContentEncryptKey")
        ).withName("$anon$8442:5"),
        wgl_h.C_LONG.withName("dwFlags"),
        wgl_h.C_INT.withName("fCNG"),
        wgl_h.C_POINTER.withName("pbCNGContentEncryptKeyObject"),
        wgl_h.C_POINTER.withName("pbContentEncryptKey"),
        wgl_h.C_LONG.withName("cbContentEncryptKey"),
        MemoryLayout.paddingLayout(4)
    ).withName("_CMSG_CONTENT_ENCRYPT_INFO");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt cbSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static final OfInt cbSize$layout() {
        return cbSize$LAYOUT;
    }

    private static final long cbSize$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static final long cbSize$offset() {
        return cbSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static int cbSize(MemorySegment struct) {
        return struct.get(cbSize$LAYOUT, cbSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static void cbSize(MemorySegment struct, int fieldValue) {
        struct.set(cbSize$LAYOUT, cbSize$OFFSET, fieldValue);
    }

    private static final OfLong hCryptProv$LAYOUT = (OfLong)$LAYOUT.select(groupElement("hCryptProv"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HCRYPTPROV_LEGACY hCryptProv
     * }
     */
    public static final OfLong hCryptProv$layout() {
        return hCryptProv$LAYOUT;
    }

    private static final long hCryptProv$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HCRYPTPROV_LEGACY hCryptProv
     * }
     */
    public static final long hCryptProv$offset() {
        return hCryptProv$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HCRYPTPROV_LEGACY hCryptProv
     * }
     */
    public static long hCryptProv(MemorySegment struct) {
        return struct.get(hCryptProv$LAYOUT, hCryptProv$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HCRYPTPROV_LEGACY hCryptProv
     * }
     */
    public static void hCryptProv(MemorySegment struct, long fieldValue) {
        struct.set(hCryptProv$LAYOUT, hCryptProv$OFFSET, fieldValue);
    }

    private static final GroupLayout ContentEncryptionAlgorithm$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ContentEncryptionAlgorithm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm
     * }
     */
    public static final GroupLayout ContentEncryptionAlgorithm$layout() {
        return ContentEncryptionAlgorithm$LAYOUT;
    }

    private static final long ContentEncryptionAlgorithm$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm
     * }
     */
    public static final long ContentEncryptionAlgorithm$offset() {
        return ContentEncryptionAlgorithm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm
     * }
     */
    public static MemorySegment ContentEncryptionAlgorithm(MemorySegment struct) {
        return struct.asSlice(ContentEncryptionAlgorithm$OFFSET, ContentEncryptionAlgorithm$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm
     * }
     */
    public static void ContentEncryptionAlgorithm(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ContentEncryptionAlgorithm$OFFSET, ContentEncryptionAlgorithm$LAYOUT.byteSize());
    }

    private static final AddressLayout pvEncryptionAuxInfo$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pvEncryptionAuxInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pvEncryptionAuxInfo
     * }
     */
    public static final AddressLayout pvEncryptionAuxInfo$layout() {
        return pvEncryptionAuxInfo$LAYOUT;
    }

    private static final long pvEncryptionAuxInfo$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pvEncryptionAuxInfo
     * }
     */
    public static final long pvEncryptionAuxInfo$offset() {
        return pvEncryptionAuxInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pvEncryptionAuxInfo
     * }
     */
    public static MemorySegment pvEncryptionAuxInfo(MemorySegment struct) {
        return struct.get(pvEncryptionAuxInfo$LAYOUT, pvEncryptionAuxInfo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pvEncryptionAuxInfo
     * }
     */
    public static void pvEncryptionAuxInfo(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pvEncryptionAuxInfo$LAYOUT, pvEncryptionAuxInfo$OFFSET, fieldValue);
    }

    private static final OfInt cRecipients$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cRecipients"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD cRecipients
     * }
     */
    public static final OfInt cRecipients$layout() {
        return cRecipients$LAYOUT;
    }

    private static final long cRecipients$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD cRecipients
     * }
     */
    public static final long cRecipients$offset() {
        return cRecipients$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD cRecipients
     * }
     */
    public static int cRecipients(MemorySegment struct) {
        return struct.get(cRecipients$LAYOUT, cRecipients$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD cRecipients
     * }
     */
    public static void cRecipients(MemorySegment struct, int fieldValue) {
        struct.set(cRecipients$LAYOUT, cRecipients$OFFSET, fieldValue);
    }

    private static final AddressLayout rgCmsRecipients$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("rgCmsRecipients"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PCMSG_RECIPIENT_ENCODE_INFO rgCmsRecipients
     * }
     */
    public static final AddressLayout rgCmsRecipients$layout() {
        return rgCmsRecipients$LAYOUT;
    }

    private static final long rgCmsRecipients$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PCMSG_RECIPIENT_ENCODE_INFO rgCmsRecipients
     * }
     */
    public static final long rgCmsRecipients$offset() {
        return rgCmsRecipients$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PCMSG_RECIPIENT_ENCODE_INFO rgCmsRecipients
     * }
     */
    public static MemorySegment rgCmsRecipients(MemorySegment struct) {
        return struct.get(rgCmsRecipients$LAYOUT, rgCmsRecipients$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PCMSG_RECIPIENT_ENCODE_INFO rgCmsRecipients
     * }
     */
    public static void rgCmsRecipients(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(rgCmsRecipients$LAYOUT, rgCmsRecipients$OFFSET, fieldValue);
    }

    private static final AddressLayout pfnAlloc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pfnAlloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PFN_CMSG_ALLOC pfnAlloc
     * }
     */
    public static final AddressLayout pfnAlloc$layout() {
        return pfnAlloc$LAYOUT;
    }

    private static final long pfnAlloc$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PFN_CMSG_ALLOC pfnAlloc
     * }
     */
    public static final long pfnAlloc$offset() {
        return pfnAlloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PFN_CMSG_ALLOC pfnAlloc
     * }
     */
    public static MemorySegment pfnAlloc(MemorySegment struct) {
        return struct.get(pfnAlloc$LAYOUT, pfnAlloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PFN_CMSG_ALLOC pfnAlloc
     * }
     */
    public static void pfnAlloc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pfnAlloc$LAYOUT, pfnAlloc$OFFSET, fieldValue);
    }

    private static final AddressLayout pfnFree$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pfnFree"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PFN_CMSG_FREE pfnFree
     * }
     */
    public static final AddressLayout pfnFree$layout() {
        return pfnFree$LAYOUT;
    }

    private static final long pfnFree$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PFN_CMSG_FREE pfnFree
     * }
     */
    public static final long pfnFree$offset() {
        return pfnFree$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PFN_CMSG_FREE pfnFree
     * }
     */
    public static MemorySegment pfnFree(MemorySegment struct) {
        return struct.get(pfnFree$LAYOUT, pfnFree$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PFN_CMSG_FREE pfnFree
     * }
     */
    public static void pfnFree(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pfnFree$LAYOUT, pfnFree$OFFSET, fieldValue);
    }

    private static final OfInt dwEncryptFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwEncryptFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwEncryptFlags
     * }
     */
    public static final OfInt dwEncryptFlags$layout() {
        return dwEncryptFlags$LAYOUT;
    }

    private static final long dwEncryptFlags$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwEncryptFlags
     * }
     */
    public static final long dwEncryptFlags$offset() {
        return dwEncryptFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwEncryptFlags
     * }
     */
    public static int dwEncryptFlags(MemorySegment struct) {
        return struct.get(dwEncryptFlags$LAYOUT, dwEncryptFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwEncryptFlags
     * }
     */
    public static void dwEncryptFlags(MemorySegment struct, int fieldValue) {
        struct.set(dwEncryptFlags$LAYOUT, dwEncryptFlags$OFFSET, fieldValue);
    }

    private static final OfLong hContentEncryptKey$LAYOUT = (OfLong)$LAYOUT.select(groupElement("$anon$8442:5"), groupElement("hContentEncryptKey"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HCRYPTKEY hContentEncryptKey
     * }
     */
    public static final OfLong hContentEncryptKey$layout() {
        return hContentEncryptKey$LAYOUT;
    }

    private static final long hContentEncryptKey$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HCRYPTKEY hContentEncryptKey
     * }
     */
    public static final long hContentEncryptKey$offset() {
        return hContentEncryptKey$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HCRYPTKEY hContentEncryptKey
     * }
     */
    public static long hContentEncryptKey(MemorySegment struct) {
        return struct.get(hContentEncryptKey$LAYOUT, hContentEncryptKey$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HCRYPTKEY hContentEncryptKey
     * }
     */
    public static void hContentEncryptKey(MemorySegment struct, long fieldValue) {
        struct.set(hContentEncryptKey$LAYOUT, hContentEncryptKey$OFFSET, fieldValue);
    }

    private static final AddressLayout hCNGContentEncryptKey$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("$anon$8442:5"), groupElement("hCNGContentEncryptKey"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BCRYPT_KEY_HANDLE hCNGContentEncryptKey
     * }
     */
    public static final AddressLayout hCNGContentEncryptKey$layout() {
        return hCNGContentEncryptKey$LAYOUT;
    }

    private static final long hCNGContentEncryptKey$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BCRYPT_KEY_HANDLE hCNGContentEncryptKey
     * }
     */
    public static final long hCNGContentEncryptKey$offset() {
        return hCNGContentEncryptKey$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BCRYPT_KEY_HANDLE hCNGContentEncryptKey
     * }
     */
    public static MemorySegment hCNGContentEncryptKey(MemorySegment struct) {
        return struct.get(hCNGContentEncryptKey$LAYOUT, hCNGContentEncryptKey$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BCRYPT_KEY_HANDLE hCNGContentEncryptKey
     * }
     */
    public static void hCNGContentEncryptKey(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hCNGContentEncryptKey$LAYOUT, hCNGContentEncryptKey$OFFSET, fieldValue);
    }

    private static final OfInt dwFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwFlags
     * }
     */
    public static final OfInt dwFlags$layout() {
        return dwFlags$LAYOUT;
    }

    private static final long dwFlags$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwFlags
     * }
     */
    public static final long dwFlags$offset() {
        return dwFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwFlags
     * }
     */
    public static int dwFlags(MemorySegment struct) {
        return struct.get(dwFlags$LAYOUT, dwFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwFlags
     * }
     */
    public static void dwFlags(MemorySegment struct, int fieldValue) {
        struct.set(dwFlags$LAYOUT, dwFlags$OFFSET, fieldValue);
    }

    private static final OfInt fCNG$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fCNG"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOL fCNG
     * }
     */
    public static final OfInt fCNG$layout() {
        return fCNG$LAYOUT;
    }

    private static final long fCNG$OFFSET = 100;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOL fCNG
     * }
     */
    public static final long fCNG$offset() {
        return fCNG$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOL fCNG
     * }
     */
    public static int fCNG(MemorySegment struct) {
        return struct.get(fCNG$LAYOUT, fCNG$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOL fCNG
     * }
     */
    public static void fCNG(MemorySegment struct, int fieldValue) {
        struct.set(fCNG$LAYOUT, fCNG$OFFSET, fieldValue);
    }

    private static final AddressLayout pbCNGContentEncryptKeyObject$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pbCNGContentEncryptKeyObject"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE *pbCNGContentEncryptKeyObject
     * }
     */
    public static final AddressLayout pbCNGContentEncryptKeyObject$layout() {
        return pbCNGContentEncryptKeyObject$LAYOUT;
    }

    private static final long pbCNGContentEncryptKeyObject$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE *pbCNGContentEncryptKeyObject
     * }
     */
    public static final long pbCNGContentEncryptKeyObject$offset() {
        return pbCNGContentEncryptKeyObject$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE *pbCNGContentEncryptKeyObject
     * }
     */
    public static MemorySegment pbCNGContentEncryptKeyObject(MemorySegment struct) {
        return struct.get(pbCNGContentEncryptKeyObject$LAYOUT, pbCNGContentEncryptKeyObject$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE *pbCNGContentEncryptKeyObject
     * }
     */
    public static void pbCNGContentEncryptKeyObject(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pbCNGContentEncryptKeyObject$LAYOUT, pbCNGContentEncryptKeyObject$OFFSET, fieldValue);
    }

    private static final AddressLayout pbContentEncryptKey$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pbContentEncryptKey"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE *pbContentEncryptKey
     * }
     */
    public static final AddressLayout pbContentEncryptKey$layout() {
        return pbContentEncryptKey$LAYOUT;
    }

    private static final long pbContentEncryptKey$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE *pbContentEncryptKey
     * }
     */
    public static final long pbContentEncryptKey$offset() {
        return pbContentEncryptKey$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE *pbContentEncryptKey
     * }
     */
    public static MemorySegment pbContentEncryptKey(MemorySegment struct) {
        return struct.get(pbContentEncryptKey$LAYOUT, pbContentEncryptKey$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE *pbContentEncryptKey
     * }
     */
    public static void pbContentEncryptKey(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pbContentEncryptKey$LAYOUT, pbContentEncryptKey$OFFSET, fieldValue);
    }

    private static final OfInt cbContentEncryptKey$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbContentEncryptKey"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD cbContentEncryptKey
     * }
     */
    public static final OfInt cbContentEncryptKey$layout() {
        return cbContentEncryptKey$LAYOUT;
    }

    private static final long cbContentEncryptKey$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD cbContentEncryptKey
     * }
     */
    public static final long cbContentEncryptKey$offset() {
        return cbContentEncryptKey$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD cbContentEncryptKey
     * }
     */
    public static int cbContentEncryptKey(MemorySegment struct) {
        return struct.get(cbContentEncryptKey$LAYOUT, cbContentEncryptKey$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD cbContentEncryptKey
     * }
     */
    public static void cbContentEncryptKey(MemorySegment struct, int fieldValue) {
        struct.set(cbContentEncryptKey$LAYOUT, cbContentEncryptKey$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

