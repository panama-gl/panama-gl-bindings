// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER {
 *     DWORD ExtentCount;
 *     LARGE_INTEGER StartingVcn;
 *     struct {
 *         LARGE_INTEGER NextVcn;
 *         LARGE_INTEGER Lcn;
 *         DWORD ReferenceCount;
 *     } Extents[1];
 * }
 * }
 */
public class RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER {

    RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("ExtentCount"),
        MemoryLayout.paddingLayout(4),
        _LARGE_INTEGER.layout().withName("StartingVcn"),
        MemoryLayout.sequenceLayout(1, RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER.Extents.layout()).withName("Extents")
    ).withName("RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt ExtentCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ExtentCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD ExtentCount
     * }
     */
    public static final OfInt ExtentCount$layout() {
        return ExtentCount$LAYOUT;
    }

    private static final long ExtentCount$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD ExtentCount
     * }
     */
    public static final long ExtentCount$offset() {
        return ExtentCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD ExtentCount
     * }
     */
    public static int ExtentCount(MemorySegment struct) {
        return struct.get(ExtentCount$LAYOUT, ExtentCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD ExtentCount
     * }
     */
    public static void ExtentCount(MemorySegment struct, int fieldValue) {
        struct.set(ExtentCount$LAYOUT, ExtentCount$OFFSET, fieldValue);
    }

    private static final GroupLayout StartingVcn$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("StartingVcn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LARGE_INTEGER StartingVcn
     * }
     */
    public static final GroupLayout StartingVcn$layout() {
        return StartingVcn$LAYOUT;
    }

    private static final long StartingVcn$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LARGE_INTEGER StartingVcn
     * }
     */
    public static final long StartingVcn$offset() {
        return StartingVcn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER StartingVcn
     * }
     */
    public static MemorySegment StartingVcn(MemorySegment struct) {
        return struct.asSlice(StartingVcn$OFFSET, StartingVcn$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER StartingVcn
     * }
     */
    public static void StartingVcn(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, StartingVcn$OFFSET, StartingVcn$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     LARGE_INTEGER NextVcn;
     *     LARGE_INTEGER Lcn;
     *     DWORD ReferenceCount;
     * }
     * }
     */
    public static class Extents {

        Extents() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            _LARGE_INTEGER.layout().withName("NextVcn"),
            _LARGE_INTEGER.layout().withName("Lcn"),
            wgl_h.C_LONG.withName("ReferenceCount"),
            MemoryLayout.paddingLayout(4)
        ).withName("$anon$10603:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final GroupLayout NextVcn$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("NextVcn"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * LARGE_INTEGER NextVcn
         * }
         */
        public static final GroupLayout NextVcn$layout() {
            return NextVcn$LAYOUT;
        }

        private static final long NextVcn$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * LARGE_INTEGER NextVcn
         * }
         */
        public static final long NextVcn$offset() {
            return NextVcn$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * LARGE_INTEGER NextVcn
         * }
         */
        public static MemorySegment NextVcn(MemorySegment struct) {
            return struct.asSlice(NextVcn$OFFSET, NextVcn$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * LARGE_INTEGER NextVcn
         * }
         */
        public static void NextVcn(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, NextVcn$OFFSET, NextVcn$LAYOUT.byteSize());
        }

        private static final GroupLayout Lcn$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Lcn"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * LARGE_INTEGER Lcn
         * }
         */
        public static final GroupLayout Lcn$layout() {
            return Lcn$LAYOUT;
        }

        private static final long Lcn$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * LARGE_INTEGER Lcn
         * }
         */
        public static final long Lcn$offset() {
            return Lcn$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * LARGE_INTEGER Lcn
         * }
         */
        public static MemorySegment Lcn(MemorySegment struct) {
            return struct.asSlice(Lcn$OFFSET, Lcn$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * LARGE_INTEGER Lcn
         * }
         */
        public static void Lcn(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, Lcn$OFFSET, Lcn$LAYOUT.byteSize());
        }

        private static final OfInt ReferenceCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ReferenceCount"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD ReferenceCount
         * }
         */
        public static final OfInt ReferenceCount$layout() {
            return ReferenceCount$LAYOUT;
        }

        private static final long ReferenceCount$OFFSET = 16;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD ReferenceCount
         * }
         */
        public static final long ReferenceCount$offset() {
            return ReferenceCount$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD ReferenceCount
         * }
         */
        public static int ReferenceCount(MemorySegment struct) {
            return struct.get(ReferenceCount$LAYOUT, ReferenceCount$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD ReferenceCount
         * }
         */
        public static void ReferenceCount(MemorySegment struct, int fieldValue) {
            struct.set(ReferenceCount$LAYOUT, ReferenceCount$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final SequenceLayout Extents$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("Extents"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     LARGE_INTEGER NextVcn;
     *     LARGE_INTEGER Lcn;
     *     DWORD ReferenceCount;
     * } Extents[1]
     * }
     */
    public static final SequenceLayout Extents$layout() {
        return Extents$LAYOUT;
    }

    private static final long Extents$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     LARGE_INTEGER NextVcn;
     *     LARGE_INTEGER Lcn;
     *     DWORD ReferenceCount;
     * } Extents[1]
     * }
     */
    public static final long Extents$offset() {
        return Extents$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     LARGE_INTEGER NextVcn;
     *     LARGE_INTEGER Lcn;
     *     DWORD ReferenceCount;
     * } Extents[1]
     * }
     */
    public static MemorySegment Extents(MemorySegment struct) {
        return struct.asSlice(Extents$OFFSET, Extents$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     LARGE_INTEGER NextVcn;
     *     LARGE_INTEGER Lcn;
     *     DWORD ReferenceCount;
     * } Extents[1]
     * }
     */
    public static void Extents(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Extents$OFFSET, Extents$LAYOUT.byteSize());
    }

    private static long[] Extents$DIMS = { 1 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * struct {
     *     LARGE_INTEGER NextVcn;
     *     LARGE_INTEGER Lcn;
     *     DWORD ReferenceCount;
     * } Extents[1]
     * }
     */
    public static long[] Extents$dimensions() {
        return Extents$DIMS;
    }
    private static final MethodHandle Extents$ELEM_HANDLE = Extents$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * struct {
     *     LARGE_INTEGER NextVcn;
     *     LARGE_INTEGER Lcn;
     *     DWORD ReferenceCount;
     * } Extents[1]
     * }
     */
    public static MemorySegment Extents(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)Extents$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * struct {
     *     LARGE_INTEGER NextVcn;
     *     LARGE_INTEGER Lcn;
     *     DWORD ReferenceCount;
     * } Extents[1]
     * }
     */
    public static void Extents(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, Extents(struct, index0), 0L, RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER.Extents.layout().byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

