// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _GETVERSIONINPARAMS {
 *     BYTE bVersion;
 *     BYTE bRevision;
 *     BYTE bReserved;
 *     BYTE bIDEDeviceMap;
 *     DWORD fCapabilities;
 *     DWORD dwReserved[4];
 * }
 * }
 */
public class _GETVERSIONINPARAMS {

    _GETVERSIONINPARAMS() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_CHAR.withName("bVersion"),
        wgl_h.C_CHAR.withName("bRevision"),
        wgl_h.C_CHAR.withName("bReserved"),
        wgl_h.C_CHAR.withName("bIDEDeviceMap"),
        wgl_h.align(wgl_h.C_LONG, 1).withName("fCapabilities"),
        MemoryLayout.sequenceLayout(4, wgl_h.align(wgl_h.C_LONG, 1)).withName("dwReserved")
    ).withName("_GETVERSIONINPARAMS");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte bVersion$LAYOUT = (OfByte)$LAYOUT.select(groupElement("bVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE bVersion
     * }
     */
    public static final OfByte bVersion$layout() {
        return bVersion$LAYOUT;
    }

    private static final long bVersion$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE bVersion
     * }
     */
    public static final long bVersion$offset() {
        return bVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE bVersion
     * }
     */
    public static byte bVersion(MemorySegment struct) {
        return struct.get(bVersion$LAYOUT, bVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE bVersion
     * }
     */
    public static void bVersion(MemorySegment struct, byte fieldValue) {
        struct.set(bVersion$LAYOUT, bVersion$OFFSET, fieldValue);
    }

    private static final OfByte bRevision$LAYOUT = (OfByte)$LAYOUT.select(groupElement("bRevision"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE bRevision
     * }
     */
    public static final OfByte bRevision$layout() {
        return bRevision$LAYOUT;
    }

    private static final long bRevision$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE bRevision
     * }
     */
    public static final long bRevision$offset() {
        return bRevision$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE bRevision
     * }
     */
    public static byte bRevision(MemorySegment struct) {
        return struct.get(bRevision$LAYOUT, bRevision$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE bRevision
     * }
     */
    public static void bRevision(MemorySegment struct, byte fieldValue) {
        struct.set(bRevision$LAYOUT, bRevision$OFFSET, fieldValue);
    }

    private static final OfByte bReserved$LAYOUT = (OfByte)$LAYOUT.select(groupElement("bReserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE bReserved
     * }
     */
    public static final OfByte bReserved$layout() {
        return bReserved$LAYOUT;
    }

    private static final long bReserved$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE bReserved
     * }
     */
    public static final long bReserved$offset() {
        return bReserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE bReserved
     * }
     */
    public static byte bReserved(MemorySegment struct) {
        return struct.get(bReserved$LAYOUT, bReserved$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE bReserved
     * }
     */
    public static void bReserved(MemorySegment struct, byte fieldValue) {
        struct.set(bReserved$LAYOUT, bReserved$OFFSET, fieldValue);
    }

    private static final OfByte bIDEDeviceMap$LAYOUT = (OfByte)$LAYOUT.select(groupElement("bIDEDeviceMap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE bIDEDeviceMap
     * }
     */
    public static final OfByte bIDEDeviceMap$layout() {
        return bIDEDeviceMap$LAYOUT;
    }

    private static final long bIDEDeviceMap$OFFSET = 3;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE bIDEDeviceMap
     * }
     */
    public static final long bIDEDeviceMap$offset() {
        return bIDEDeviceMap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE bIDEDeviceMap
     * }
     */
    public static byte bIDEDeviceMap(MemorySegment struct) {
        return struct.get(bIDEDeviceMap$LAYOUT, bIDEDeviceMap$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE bIDEDeviceMap
     * }
     */
    public static void bIDEDeviceMap(MemorySegment struct, byte fieldValue) {
        struct.set(bIDEDeviceMap$LAYOUT, bIDEDeviceMap$OFFSET, fieldValue);
    }

    private static final OfInt fCapabilities$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fCapabilities"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD fCapabilities
     * }
     */
    public static final OfInt fCapabilities$layout() {
        return fCapabilities$LAYOUT;
    }

    private static final long fCapabilities$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD fCapabilities
     * }
     */
    public static final long fCapabilities$offset() {
        return fCapabilities$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD fCapabilities
     * }
     */
    public static int fCapabilities(MemorySegment struct) {
        return struct.get(fCapabilities$LAYOUT, fCapabilities$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD fCapabilities
     * }
     */
    public static void fCapabilities(MemorySegment struct, int fieldValue) {
        struct.set(fCapabilities$LAYOUT, fCapabilities$OFFSET, fieldValue);
    }

    private static final SequenceLayout dwReserved$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("dwReserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwReserved[4]
     * }
     */
    public static final SequenceLayout dwReserved$layout() {
        return dwReserved$LAYOUT;
    }

    private static final long dwReserved$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwReserved[4]
     * }
     */
    public static final long dwReserved$offset() {
        return dwReserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwReserved[4]
     * }
     */
    public static MemorySegment dwReserved(MemorySegment struct) {
        return struct.asSlice(dwReserved$OFFSET, dwReserved$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwReserved[4]
     * }
     */
    public static void dwReserved(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, dwReserved$OFFSET, dwReserved$LAYOUT.byteSize());
    }

    private static long[] dwReserved$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * DWORD dwReserved[4]
     * }
     */
    public static long[] dwReserved$dimensions() {
        return dwReserved$DIMS;
    }
    private static final VarHandle dwReserved$ELEM_HANDLE = dwReserved$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * DWORD dwReserved[4]
     * }
     */
    public static int dwReserved(MemorySegment struct, long index0) {
        return (int)dwReserved$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * DWORD dwReserved[4]
     * }
     */
    public static void dwReserved(MemorySegment struct, long index0, int fieldValue) {
        dwReserved$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

