// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _DEVICE_DATA_SET_SCRUB_EX_OUTPUT {
 *     DWORDLONG BytesProcessed;
 *     DWORDLONG BytesRepaired;
 *     DWORDLONG BytesFailed;
 *     DEVICE_DSM_RANGE ParityExtent;
 * }
 * }
 */
public class _DEVICE_DATA_SET_SCRUB_EX_OUTPUT {

    _DEVICE_DATA_SET_SCRUB_EX_OUTPUT() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG_LONG.withName("BytesProcessed"),
        wgl_h.C_LONG_LONG.withName("BytesRepaired"),
        wgl_h.C_LONG_LONG.withName("BytesFailed"),
        _DEVICE_DATA_SET_RANGE.layout().withName("ParityExtent")
    ).withName("_DEVICE_DATA_SET_SCRUB_EX_OUTPUT");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong BytesProcessed$LAYOUT = (OfLong)$LAYOUT.select(groupElement("BytesProcessed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG BytesProcessed
     * }
     */
    public static final OfLong BytesProcessed$layout() {
        return BytesProcessed$LAYOUT;
    }

    private static final long BytesProcessed$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG BytesProcessed
     * }
     */
    public static final long BytesProcessed$offset() {
        return BytesProcessed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG BytesProcessed
     * }
     */
    public static long BytesProcessed(MemorySegment struct) {
        return struct.get(BytesProcessed$LAYOUT, BytesProcessed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG BytesProcessed
     * }
     */
    public static void BytesProcessed(MemorySegment struct, long fieldValue) {
        struct.set(BytesProcessed$LAYOUT, BytesProcessed$OFFSET, fieldValue);
    }

    private static final OfLong BytesRepaired$LAYOUT = (OfLong)$LAYOUT.select(groupElement("BytesRepaired"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG BytesRepaired
     * }
     */
    public static final OfLong BytesRepaired$layout() {
        return BytesRepaired$LAYOUT;
    }

    private static final long BytesRepaired$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG BytesRepaired
     * }
     */
    public static final long BytesRepaired$offset() {
        return BytesRepaired$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG BytesRepaired
     * }
     */
    public static long BytesRepaired(MemorySegment struct) {
        return struct.get(BytesRepaired$LAYOUT, BytesRepaired$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG BytesRepaired
     * }
     */
    public static void BytesRepaired(MemorySegment struct, long fieldValue) {
        struct.set(BytesRepaired$LAYOUT, BytesRepaired$OFFSET, fieldValue);
    }

    private static final OfLong BytesFailed$LAYOUT = (OfLong)$LAYOUT.select(groupElement("BytesFailed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG BytesFailed
     * }
     */
    public static final OfLong BytesFailed$layout() {
        return BytesFailed$LAYOUT;
    }

    private static final long BytesFailed$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG BytesFailed
     * }
     */
    public static final long BytesFailed$offset() {
        return BytesFailed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG BytesFailed
     * }
     */
    public static long BytesFailed(MemorySegment struct) {
        return struct.get(BytesFailed$LAYOUT, BytesFailed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG BytesFailed
     * }
     */
    public static void BytesFailed(MemorySegment struct, long fieldValue) {
        struct.set(BytesFailed$LAYOUT, BytesFailed$OFFSET, fieldValue);
    }

    private static final GroupLayout ParityExtent$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ParityExtent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DEVICE_DSM_RANGE ParityExtent
     * }
     */
    public static final GroupLayout ParityExtent$layout() {
        return ParityExtent$LAYOUT;
    }

    private static final long ParityExtent$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DEVICE_DSM_RANGE ParityExtent
     * }
     */
    public static final long ParityExtent$offset() {
        return ParityExtent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DEVICE_DSM_RANGE ParityExtent
     * }
     */
    public static MemorySegment ParityExtent(MemorySegment struct) {
        return struct.asSlice(ParityExtent$OFFSET, ParityExtent$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DEVICE_DSM_RANGE ParityExtent
     * }
     */
    public static void ParityExtent(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ParityExtent$OFFSET, ParityExtent$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

