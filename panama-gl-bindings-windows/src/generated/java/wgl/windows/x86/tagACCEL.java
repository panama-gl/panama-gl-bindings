// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tagACCEL {
 *     BYTE fVirt;
 *     WORD key;
 *     WORD cmd;
 * }
 * }
 */
public class tagACCEL {

    tagACCEL() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_CHAR.withName("fVirt"),
        MemoryLayout.paddingLayout(1),
        wgl_h.C_SHORT.withName("key"),
        wgl_h.C_SHORT.withName("cmd")
    ).withName("tagACCEL");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte fVirt$LAYOUT = (OfByte)$LAYOUT.select(groupElement("fVirt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE fVirt
     * }
     */
    public static final OfByte fVirt$layout() {
        return fVirt$LAYOUT;
    }

    private static final long fVirt$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE fVirt
     * }
     */
    public static final long fVirt$offset() {
        return fVirt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE fVirt
     * }
     */
    public static byte fVirt(MemorySegment struct) {
        return struct.get(fVirt$LAYOUT, fVirt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE fVirt
     * }
     */
    public static void fVirt(MemorySegment struct, byte fieldValue) {
        struct.set(fVirt$LAYOUT, fVirt$OFFSET, fieldValue);
    }

    private static final OfShort key$LAYOUT = (OfShort)$LAYOUT.select(groupElement("key"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD key
     * }
     */
    public static final OfShort key$layout() {
        return key$LAYOUT;
    }

    private static final long key$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD key
     * }
     */
    public static final long key$offset() {
        return key$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD key
     * }
     */
    public static short key(MemorySegment struct) {
        return struct.get(key$LAYOUT, key$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD key
     * }
     */
    public static void key(MemorySegment struct, short fieldValue) {
        struct.set(key$LAYOUT, key$OFFSET, fieldValue);
    }

    private static final OfShort cmd$LAYOUT = (OfShort)$LAYOUT.select(groupElement("cmd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD cmd
     * }
     */
    public static final OfShort cmd$layout() {
        return cmd$LAYOUT;
    }

    private static final long cmd$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD cmd
     * }
     */
    public static final long cmd$offset() {
        return cmd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD cmd
     * }
     */
    public static short cmd(MemorySegment struct) {
        return struct.get(cmd$LAYOUT, cmd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD cmd
     * }
     */
    public static void cmd(MemorySegment struct, short fieldValue) {
        struct.set(cmd$LAYOUT, cmd$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

