// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tagMENUBARINFO {
 *     DWORD cbSize;
 *     RECT rcBar;
 *     HMENU hMenu;
 *     HWND hwndMenu;
 *     BOOL fBarFocused : 1;
 *     BOOL fFocused : 1;
 *     BOOL fUnused : 30;
 * }
 * }
 */
public class tagMENUBARINFO {

    tagMENUBARINFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("cbSize"),
        tagRECT.layout().withName("rcBar"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_POINTER.withName("hMenu"),
        wgl_h.C_POINTER.withName("hwndMenu"),
        MemoryLayout.paddingLayout(8)
    ).withName("tagMENUBARINFO");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt cbSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static final OfInt cbSize$layout() {
        return cbSize$LAYOUT;
    }

    private static final long cbSize$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static final long cbSize$offset() {
        return cbSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static int cbSize(MemorySegment struct) {
        return struct.get(cbSize$LAYOUT, cbSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static void cbSize(MemorySegment struct, int fieldValue) {
        struct.set(cbSize$LAYOUT, cbSize$OFFSET, fieldValue);
    }

    private static final GroupLayout rcBar$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("rcBar"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * RECT rcBar
     * }
     */
    public static final GroupLayout rcBar$layout() {
        return rcBar$LAYOUT;
    }

    private static final long rcBar$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * RECT rcBar
     * }
     */
    public static final long rcBar$offset() {
        return rcBar$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * RECT rcBar
     * }
     */
    public static MemorySegment rcBar(MemorySegment struct) {
        return struct.asSlice(rcBar$OFFSET, rcBar$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * RECT rcBar
     * }
     */
    public static void rcBar(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, rcBar$OFFSET, rcBar$LAYOUT.byteSize());
    }

    private static final AddressLayout hMenu$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hMenu"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HMENU hMenu
     * }
     */
    public static final AddressLayout hMenu$layout() {
        return hMenu$LAYOUT;
    }

    private static final long hMenu$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HMENU hMenu
     * }
     */
    public static final long hMenu$offset() {
        return hMenu$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HMENU hMenu
     * }
     */
    public static MemorySegment hMenu(MemorySegment struct) {
        return struct.get(hMenu$LAYOUT, hMenu$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HMENU hMenu
     * }
     */
    public static void hMenu(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hMenu$LAYOUT, hMenu$OFFSET, fieldValue);
    }

    private static final AddressLayout hwndMenu$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hwndMenu"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HWND hwndMenu
     * }
     */
    public static final AddressLayout hwndMenu$layout() {
        return hwndMenu$LAYOUT;
    }

    private static final long hwndMenu$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HWND hwndMenu
     * }
     */
    public static final long hwndMenu$offset() {
        return hwndMenu$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HWND hwndMenu
     * }
     */
    public static MemorySegment hwndMenu(MemorySegment struct) {
        return struct.get(hwndMenu$LAYOUT, hwndMenu$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HWND hwndMenu
     * }
     */
    public static void hwndMenu(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hwndMenu$LAYOUT, hwndMenu$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

