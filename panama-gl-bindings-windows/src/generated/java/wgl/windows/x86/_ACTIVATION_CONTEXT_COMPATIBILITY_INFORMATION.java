// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION {
 *     DWORD ElementCount;
 *     COMPATIBILITY_CONTEXT_ELEMENT Elements[];
 * }
 * }
 */
public class _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION {

    _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("ElementCount"),
        MemoryLayout.paddingLayout(4),
        MemoryLayout.sequenceLayout(0, _COMPATIBILITY_CONTEXT_ELEMENT.layout()).withName("Elements")
    ).withName("_ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt ElementCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ElementCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD ElementCount
     * }
     */
    public static final OfInt ElementCount$layout() {
        return ElementCount$LAYOUT;
    }

    private static final long ElementCount$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD ElementCount
     * }
     */
    public static final long ElementCount$offset() {
        return ElementCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD ElementCount
     * }
     */
    public static int ElementCount(MemorySegment struct) {
        return struct.get(ElementCount$LAYOUT, ElementCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD ElementCount
     * }
     */
    public static void ElementCount(MemorySegment struct, int fieldValue) {
        struct.set(ElementCount$LAYOUT, ElementCount$OFFSET, fieldValue);
    }

    private static final SequenceLayout Elements$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("Elements"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * COMPATIBILITY_CONTEXT_ELEMENT Elements[]
     * }
     */
    public static final SequenceLayout Elements$layout() {
        return Elements$LAYOUT;
    }

    private static final long Elements$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * COMPATIBILITY_CONTEXT_ELEMENT Elements[]
     * }
     */
    public static final long Elements$offset() {
        return Elements$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * COMPATIBILITY_CONTEXT_ELEMENT Elements[]
     * }
     */
    public static MemorySegment Elements(MemorySegment struct) {
        return struct.asSlice(Elements$OFFSET, Elements$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * COMPATIBILITY_CONTEXT_ELEMENT Elements[]
     * }
     */
    public static void Elements(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Elements$OFFSET, Elements$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

