// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct __NCRYPT_KEY_ACCESS_POLICY_BLOB {
 *     DWORD dwVersion;
 *     DWORD dwPolicyFlags;
 *     DWORD cbUserSid;
 *     DWORD cbApplicationSid;
 * }
 * }
 */
public class __NCRYPT_KEY_ACCESS_POLICY_BLOB {

    __NCRYPT_KEY_ACCESS_POLICY_BLOB() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("dwVersion"),
        wgl_h.C_LONG.withName("dwPolicyFlags"),
        wgl_h.C_LONG.withName("cbUserSid"),
        wgl_h.C_LONG.withName("cbApplicationSid")
    ).withName("__NCRYPT_KEY_ACCESS_POLICY_BLOB");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt dwVersion$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwVersion
     * }
     */
    public static final OfInt dwVersion$layout() {
        return dwVersion$LAYOUT;
    }

    private static final long dwVersion$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwVersion
     * }
     */
    public static final long dwVersion$offset() {
        return dwVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwVersion
     * }
     */
    public static int dwVersion(MemorySegment struct) {
        return struct.get(dwVersion$LAYOUT, dwVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwVersion
     * }
     */
    public static void dwVersion(MemorySegment struct, int fieldValue) {
        struct.set(dwVersion$LAYOUT, dwVersion$OFFSET, fieldValue);
    }

    private static final OfInt dwPolicyFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwPolicyFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwPolicyFlags
     * }
     */
    public static final OfInt dwPolicyFlags$layout() {
        return dwPolicyFlags$LAYOUT;
    }

    private static final long dwPolicyFlags$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwPolicyFlags
     * }
     */
    public static final long dwPolicyFlags$offset() {
        return dwPolicyFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwPolicyFlags
     * }
     */
    public static int dwPolicyFlags(MemorySegment struct) {
        return struct.get(dwPolicyFlags$LAYOUT, dwPolicyFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwPolicyFlags
     * }
     */
    public static void dwPolicyFlags(MemorySegment struct, int fieldValue) {
        struct.set(dwPolicyFlags$LAYOUT, dwPolicyFlags$OFFSET, fieldValue);
    }

    private static final OfInt cbUserSid$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbUserSid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD cbUserSid
     * }
     */
    public static final OfInt cbUserSid$layout() {
        return cbUserSid$LAYOUT;
    }

    private static final long cbUserSid$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD cbUserSid
     * }
     */
    public static final long cbUserSid$offset() {
        return cbUserSid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD cbUserSid
     * }
     */
    public static int cbUserSid(MemorySegment struct) {
        return struct.get(cbUserSid$LAYOUT, cbUserSid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD cbUserSid
     * }
     */
    public static void cbUserSid(MemorySegment struct, int fieldValue) {
        struct.set(cbUserSid$LAYOUT, cbUserSid$OFFSET, fieldValue);
    }

    private static final OfInt cbApplicationSid$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbApplicationSid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD cbApplicationSid
     * }
     */
    public static final OfInt cbApplicationSid$layout() {
        return cbApplicationSid$LAYOUT;
    }

    private static final long cbApplicationSid$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD cbApplicationSid
     * }
     */
    public static final long cbApplicationSid$offset() {
        return cbApplicationSid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD cbApplicationSid
     * }
     */
    public static int cbApplicationSid(MemorySegment struct) {
        return struct.get(cbApplicationSid$LAYOUT, cbApplicationSid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD cbApplicationSid
     * }
     */
    public static void cbApplicationSid(MemorySegment struct, int fieldValue) {
        struct.set(cbApplicationSid$LAYOUT, cbApplicationSid$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

