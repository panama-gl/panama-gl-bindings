// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tagCANDIDATELIST {
 *     DWORD dwSize;
 *     DWORD dwStyle;
 *     DWORD dwCount;
 *     DWORD dwSelection;
 *     DWORD dwPageStart;
 *     DWORD dwPageSize;
 *     DWORD dwOffset[1];
 * }
 * }
 */
public class tagCANDIDATELIST {

    tagCANDIDATELIST() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("dwSize"),
        wgl_h.C_LONG.withName("dwStyle"),
        wgl_h.C_LONG.withName("dwCount"),
        wgl_h.C_LONG.withName("dwSelection"),
        wgl_h.C_LONG.withName("dwPageStart"),
        wgl_h.C_LONG.withName("dwPageSize"),
        MemoryLayout.sequenceLayout(1, wgl_h.C_LONG).withName("dwOffset")
    ).withName("tagCANDIDATELIST");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt dwSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwSize
     * }
     */
    public static final OfInt dwSize$layout() {
        return dwSize$LAYOUT;
    }

    private static final long dwSize$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwSize
     * }
     */
    public static final long dwSize$offset() {
        return dwSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwSize
     * }
     */
    public static int dwSize(MemorySegment struct) {
        return struct.get(dwSize$LAYOUT, dwSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwSize
     * }
     */
    public static void dwSize(MemorySegment struct, int fieldValue) {
        struct.set(dwSize$LAYOUT, dwSize$OFFSET, fieldValue);
    }

    private static final OfInt dwStyle$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwStyle"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwStyle
     * }
     */
    public static final OfInt dwStyle$layout() {
        return dwStyle$LAYOUT;
    }

    private static final long dwStyle$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwStyle
     * }
     */
    public static final long dwStyle$offset() {
        return dwStyle$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwStyle
     * }
     */
    public static int dwStyle(MemorySegment struct) {
        return struct.get(dwStyle$LAYOUT, dwStyle$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwStyle
     * }
     */
    public static void dwStyle(MemorySegment struct, int fieldValue) {
        struct.set(dwStyle$LAYOUT, dwStyle$OFFSET, fieldValue);
    }

    private static final OfInt dwCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwCount
     * }
     */
    public static final OfInt dwCount$layout() {
        return dwCount$LAYOUT;
    }

    private static final long dwCount$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwCount
     * }
     */
    public static final long dwCount$offset() {
        return dwCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwCount
     * }
     */
    public static int dwCount(MemorySegment struct) {
        return struct.get(dwCount$LAYOUT, dwCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwCount
     * }
     */
    public static void dwCount(MemorySegment struct, int fieldValue) {
        struct.set(dwCount$LAYOUT, dwCount$OFFSET, fieldValue);
    }

    private static final OfInt dwSelection$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwSelection"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwSelection
     * }
     */
    public static final OfInt dwSelection$layout() {
        return dwSelection$LAYOUT;
    }

    private static final long dwSelection$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwSelection
     * }
     */
    public static final long dwSelection$offset() {
        return dwSelection$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwSelection
     * }
     */
    public static int dwSelection(MemorySegment struct) {
        return struct.get(dwSelection$LAYOUT, dwSelection$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwSelection
     * }
     */
    public static void dwSelection(MemorySegment struct, int fieldValue) {
        struct.set(dwSelection$LAYOUT, dwSelection$OFFSET, fieldValue);
    }

    private static final OfInt dwPageStart$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwPageStart"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwPageStart
     * }
     */
    public static final OfInt dwPageStart$layout() {
        return dwPageStart$LAYOUT;
    }

    private static final long dwPageStart$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwPageStart
     * }
     */
    public static final long dwPageStart$offset() {
        return dwPageStart$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwPageStart
     * }
     */
    public static int dwPageStart(MemorySegment struct) {
        return struct.get(dwPageStart$LAYOUT, dwPageStart$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwPageStart
     * }
     */
    public static void dwPageStart(MemorySegment struct, int fieldValue) {
        struct.set(dwPageStart$LAYOUT, dwPageStart$OFFSET, fieldValue);
    }

    private static final OfInt dwPageSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwPageSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwPageSize
     * }
     */
    public static final OfInt dwPageSize$layout() {
        return dwPageSize$LAYOUT;
    }

    private static final long dwPageSize$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwPageSize
     * }
     */
    public static final long dwPageSize$offset() {
        return dwPageSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwPageSize
     * }
     */
    public static int dwPageSize(MemorySegment struct) {
        return struct.get(dwPageSize$LAYOUT, dwPageSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwPageSize
     * }
     */
    public static void dwPageSize(MemorySegment struct, int fieldValue) {
        struct.set(dwPageSize$LAYOUT, dwPageSize$OFFSET, fieldValue);
    }

    private static final SequenceLayout dwOffset$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("dwOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwOffset[1]
     * }
     */
    public static final SequenceLayout dwOffset$layout() {
        return dwOffset$LAYOUT;
    }

    private static final long dwOffset$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwOffset[1]
     * }
     */
    public static final long dwOffset$offset() {
        return dwOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwOffset[1]
     * }
     */
    public static MemorySegment dwOffset(MemorySegment struct) {
        return struct.asSlice(dwOffset$OFFSET, dwOffset$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwOffset[1]
     * }
     */
    public static void dwOffset(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, dwOffset$OFFSET, dwOffset$LAYOUT.byteSize());
    }

    private static long[] dwOffset$DIMS = { 1 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * DWORD dwOffset[1]
     * }
     */
    public static long[] dwOffset$dimensions() {
        return dwOffset$DIMS;
    }
    private static final VarHandle dwOffset$ELEM_HANDLE = dwOffset$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * DWORD dwOffset[1]
     * }
     */
    public static int dwOffset(MemorySegment struct, long index0) {
        return (int)dwOffset$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * DWORD dwOffset[1]
     * }
     */
    public static void dwOffset(MemorySegment struct, long index0, int fieldValue) {
        dwOffset$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

