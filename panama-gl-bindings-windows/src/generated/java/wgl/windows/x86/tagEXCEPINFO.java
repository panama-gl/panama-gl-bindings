// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class tagEXCEPINFO {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("wCode"),
        Constants$root.C_SHORT$LAYOUT.withName("wReserved"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("bstrSource"),
        Constants$root.C_POINTER$LAYOUT.withName("bstrDescription"),
        Constants$root.C_POINTER$LAYOUT.withName("bstrHelpFile"),
        Constants$root.C_LONG$LAYOUT.withName("dwHelpContext"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("pvReserved"),
        Constants$root.C_POINTER$LAYOUT.withName("pfnDeferredFillIn"),
        Constants$root.C_LONG$LAYOUT.withName("scode"),
        MemoryLayout.paddingLayout(32)
    ).withName("tagEXCEPINFO");
    public static MemoryLayout $LAYOUT() {
        return tagEXCEPINFO.$struct$LAYOUT;
    }
    static final VarHandle wCode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("wCode"));
    public static VarHandle wCode$VH() {
        return tagEXCEPINFO.wCode$VH;
    }
    public static short wCode$get(MemorySegment seg) {
        return (short)tagEXCEPINFO.wCode$VH.get(seg);
    }
    public static void wCode$set( MemorySegment seg, short x) {
        tagEXCEPINFO.wCode$VH.set(seg, x);
    }
    public static short wCode$get(MemorySegment seg, long index) {
        return (short)tagEXCEPINFO.wCode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wCode$set(MemorySegment seg, long index, short x) {
        tagEXCEPINFO.wCode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle wReserved$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("wReserved"));
    public static VarHandle wReserved$VH() {
        return tagEXCEPINFO.wReserved$VH;
    }
    public static short wReserved$get(MemorySegment seg) {
        return (short)tagEXCEPINFO.wReserved$VH.get(seg);
    }
    public static void wReserved$set( MemorySegment seg, short x) {
        tagEXCEPINFO.wReserved$VH.set(seg, x);
    }
    public static short wReserved$get(MemorySegment seg, long index) {
        return (short)tagEXCEPINFO.wReserved$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wReserved$set(MemorySegment seg, long index, short x) {
        tagEXCEPINFO.wReserved$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bstrSource$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bstrSource"));
    public static VarHandle bstrSource$VH() {
        return tagEXCEPINFO.bstrSource$VH;
    }
    public static MemoryAddress bstrSource$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)tagEXCEPINFO.bstrSource$VH.get(seg);
    }
    public static void bstrSource$set( MemorySegment seg, MemoryAddress x) {
        tagEXCEPINFO.bstrSource$VH.set(seg, x);
    }
    public static MemoryAddress bstrSource$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)tagEXCEPINFO.bstrSource$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bstrSource$set(MemorySegment seg, long index, MemoryAddress x) {
        tagEXCEPINFO.bstrSource$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bstrDescription$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bstrDescription"));
    public static VarHandle bstrDescription$VH() {
        return tagEXCEPINFO.bstrDescription$VH;
    }
    public static MemoryAddress bstrDescription$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)tagEXCEPINFO.bstrDescription$VH.get(seg);
    }
    public static void bstrDescription$set( MemorySegment seg, MemoryAddress x) {
        tagEXCEPINFO.bstrDescription$VH.set(seg, x);
    }
    public static MemoryAddress bstrDescription$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)tagEXCEPINFO.bstrDescription$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bstrDescription$set(MemorySegment seg, long index, MemoryAddress x) {
        tagEXCEPINFO.bstrDescription$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bstrHelpFile$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bstrHelpFile"));
    public static VarHandle bstrHelpFile$VH() {
        return tagEXCEPINFO.bstrHelpFile$VH;
    }
    public static MemoryAddress bstrHelpFile$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)tagEXCEPINFO.bstrHelpFile$VH.get(seg);
    }
    public static void bstrHelpFile$set( MemorySegment seg, MemoryAddress x) {
        tagEXCEPINFO.bstrHelpFile$VH.set(seg, x);
    }
    public static MemoryAddress bstrHelpFile$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)tagEXCEPINFO.bstrHelpFile$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bstrHelpFile$set(MemorySegment seg, long index, MemoryAddress x) {
        tagEXCEPINFO.bstrHelpFile$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwHelpContext$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwHelpContext"));
    public static VarHandle dwHelpContext$VH() {
        return tagEXCEPINFO.dwHelpContext$VH;
    }
    public static int dwHelpContext$get(MemorySegment seg) {
        return (int)tagEXCEPINFO.dwHelpContext$VH.get(seg);
    }
    public static void dwHelpContext$set( MemorySegment seg, int x) {
        tagEXCEPINFO.dwHelpContext$VH.set(seg, x);
    }
    public static int dwHelpContext$get(MemorySegment seg, long index) {
        return (int)tagEXCEPINFO.dwHelpContext$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwHelpContext$set(MemorySegment seg, long index, int x) {
        tagEXCEPINFO.dwHelpContext$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pvReserved$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pvReserved"));
    public static VarHandle pvReserved$VH() {
        return tagEXCEPINFO.pvReserved$VH;
    }
    public static MemoryAddress pvReserved$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)tagEXCEPINFO.pvReserved$VH.get(seg);
    }
    public static void pvReserved$set( MemorySegment seg, MemoryAddress x) {
        tagEXCEPINFO.pvReserved$VH.set(seg, x);
    }
    public static MemoryAddress pvReserved$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)tagEXCEPINFO.pvReserved$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pvReserved$set(MemorySegment seg, long index, MemoryAddress x) {
        tagEXCEPINFO.pvReserved$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final FunctionDescriptor pfnDeferredFillIn$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle pfnDeferredFillIn$MH = RuntimeHelper.downcallHandle(
        tagEXCEPINFO.pfnDeferredFillIn$FUNC
    );
    public interface pfnDeferredFillIn {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(pfnDeferredFillIn fi, MemorySession session) {
            return RuntimeHelper.upcallStub(pfnDeferredFillIn.class, fi, tagEXCEPINFO.pfnDeferredFillIn$FUNC, session);
        }
        static pfnDeferredFillIn ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)tagEXCEPINFO.pfnDeferredFillIn$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle pfnDeferredFillIn$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pfnDeferredFillIn"));
    public static VarHandle pfnDeferredFillIn$VH() {
        return tagEXCEPINFO.pfnDeferredFillIn$VH;
    }
    public static MemoryAddress pfnDeferredFillIn$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)tagEXCEPINFO.pfnDeferredFillIn$VH.get(seg);
    }
    public static void pfnDeferredFillIn$set( MemorySegment seg, MemoryAddress x) {
        tagEXCEPINFO.pfnDeferredFillIn$VH.set(seg, x);
    }
    public static MemoryAddress pfnDeferredFillIn$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)tagEXCEPINFO.pfnDeferredFillIn$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnDeferredFillIn$set(MemorySegment seg, long index, MemoryAddress x) {
        tagEXCEPINFO.pfnDeferredFillIn$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static pfnDeferredFillIn pfnDeferredFillIn (MemorySegment segment, MemorySession session) {
        return pfnDeferredFillIn.ofAddress(pfnDeferredFillIn$get(segment), session);
    }
    static final VarHandle scode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("scode"));
    public static VarHandle scode$VH() {
        return tagEXCEPINFO.scode$VH;
    }
    public static int scode$get(MemorySegment seg) {
        return (int)tagEXCEPINFO.scode$VH.get(seg);
    }
    public static void scode$set( MemorySegment seg, int x) {
        tagEXCEPINFO.scode$VH.set(seg, x);
    }
    public static int scode$get(MemorySegment seg, long index) {
        return (int)tagEXCEPINFO.scode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void scode$set(MemorySegment seg, long index, int x) {
        tagEXCEPINFO.scode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


