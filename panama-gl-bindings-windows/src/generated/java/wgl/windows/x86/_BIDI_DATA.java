// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _BIDI_DATA {
 *     DWORD dwBidiType;
 *     union {
 *         BOOL bData;
 *         LONG iData;
 *         LPWSTR sData;
 *         FLOAT fData;
 *         BINARY_CONTAINER biData;
 *     } u;
 * }
 * }
 */
public class _BIDI_DATA {

    _BIDI_DATA() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("dwBidiType"),
        MemoryLayout.paddingLayout(4),
        _BIDI_DATA.u.layout().withName("u")
    ).withName("_BIDI_DATA");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt dwBidiType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwBidiType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwBidiType
     * }
     */
    public static final OfInt dwBidiType$layout() {
        return dwBidiType$LAYOUT;
    }

    private static final long dwBidiType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwBidiType
     * }
     */
    public static final long dwBidiType$offset() {
        return dwBidiType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwBidiType
     * }
     */
    public static int dwBidiType(MemorySegment struct) {
        return struct.get(dwBidiType$LAYOUT, dwBidiType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwBidiType
     * }
     */
    public static void dwBidiType(MemorySegment struct, int fieldValue) {
        struct.set(dwBidiType$LAYOUT, dwBidiType$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * union {
     *     BOOL bData;
     *     LONG iData;
     *     LPWSTR sData;
     *     FLOAT fData;
     *     BINARY_CONTAINER biData;
     * }
     * }
     */
    public static class u {

        u() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
            wgl_h.C_INT.withName("bData"),
            wgl_h.C_LONG.withName("iData"),
            wgl_h.C_POINTER.withName("sData"),
            wgl_h.C_FLOAT.withName("fData"),
            _BINARY_CONTAINER.layout().withName("biData")
        ).withName("$anon$2458:9");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt bData$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bData"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * BOOL bData
         * }
         */
        public static final OfInt bData$layout() {
            return bData$LAYOUT;
        }

        private static final long bData$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * BOOL bData
         * }
         */
        public static final long bData$offset() {
            return bData$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * BOOL bData
         * }
         */
        public static int bData(MemorySegment union) {
            return union.get(bData$LAYOUT, bData$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * BOOL bData
         * }
         */
        public static void bData(MemorySegment union, int fieldValue) {
            union.set(bData$LAYOUT, bData$OFFSET, fieldValue);
        }

        private static final OfInt iData$LAYOUT = (OfInt)$LAYOUT.select(groupElement("iData"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * LONG iData
         * }
         */
        public static final OfInt iData$layout() {
            return iData$LAYOUT;
        }

        private static final long iData$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * LONG iData
         * }
         */
        public static final long iData$offset() {
            return iData$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * LONG iData
         * }
         */
        public static int iData(MemorySegment union) {
            return union.get(iData$LAYOUT, iData$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * LONG iData
         * }
         */
        public static void iData(MemorySegment union, int fieldValue) {
            union.set(iData$LAYOUT, iData$OFFSET, fieldValue);
        }

        private static final AddressLayout sData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("sData"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * LPWSTR sData
         * }
         */
        public static final AddressLayout sData$layout() {
            return sData$LAYOUT;
        }

        private static final long sData$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * LPWSTR sData
         * }
         */
        public static final long sData$offset() {
            return sData$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * LPWSTR sData
         * }
         */
        public static MemorySegment sData(MemorySegment union) {
            return union.get(sData$LAYOUT, sData$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * LPWSTR sData
         * }
         */
        public static void sData(MemorySegment union, MemorySegment fieldValue) {
            union.set(sData$LAYOUT, sData$OFFSET, fieldValue);
        }

        private static final OfFloat fData$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("fData"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * FLOAT fData
         * }
         */
        public static final OfFloat fData$layout() {
            return fData$LAYOUT;
        }

        private static final long fData$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * FLOAT fData
         * }
         */
        public static final long fData$offset() {
            return fData$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * FLOAT fData
         * }
         */
        public static float fData(MemorySegment union) {
            return union.get(fData$LAYOUT, fData$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * FLOAT fData
         * }
         */
        public static void fData(MemorySegment union, float fieldValue) {
            union.set(fData$LAYOUT, fData$OFFSET, fieldValue);
        }

        private static final GroupLayout biData$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("biData"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * BINARY_CONTAINER biData
         * }
         */
        public static final GroupLayout biData$layout() {
            return biData$LAYOUT;
        }

        private static final long biData$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * BINARY_CONTAINER biData
         * }
         */
        public static final long biData$offset() {
            return biData$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * BINARY_CONTAINER biData
         * }
         */
        public static MemorySegment biData(MemorySegment union) {
            return union.asSlice(biData$OFFSET, biData$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * BINARY_CONTAINER biData
         * }
         */
        public static void biData(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, biData$OFFSET, biData$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout u$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("u"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union {
     *     BOOL bData;
     *     LONG iData;
     *     LPWSTR sData;
     *     FLOAT fData;
     *     BINARY_CONTAINER biData;
     * } u
     * }
     */
    public static final GroupLayout u$layout() {
        return u$LAYOUT;
    }

    private static final long u$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union {
     *     BOOL bData;
     *     LONG iData;
     *     LPWSTR sData;
     *     FLOAT fData;
     *     BINARY_CONTAINER biData;
     * } u
     * }
     */
    public static final long u$offset() {
        return u$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union {
     *     BOOL bData;
     *     LONG iData;
     *     LPWSTR sData;
     *     FLOAT fData;
     *     BINARY_CONTAINER biData;
     * } u
     * }
     */
    public static MemorySegment u(MemorySegment struct) {
        return struct.asSlice(u$OFFSET, u$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union {
     *     BOOL bData;
     *     LONG iData;
     *     LPWSTR sData;
     *     FLOAT fData;
     *     BINARY_CONTAINER biData;
     * } u
     * }
     */
    public static void u(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, u$OFFSET, u$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

