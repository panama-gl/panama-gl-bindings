// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("dwSignature"),
            Constants$root.C_LONG$LAYOUT.withName("dwVersion"),
            Constants$root.C_LONG$LAYOUT.withName("dwSize")
        ).withName("Descriptor"),
        Constants$root.C_LONG$LAYOUT.withName("dwReasonForCollection"),
        MemoryLayout.sequenceLayout(16, Constants$root.C_CHAR$LAYOUT).withName("cDriverName"),
        Constants$root.C_LONG$LAYOUT.withName("uiNumRecords"),
        MemoryLayout.sequenceLayout(1, MemoryLayout.structLayout(
            MemoryLayout.sequenceLayout(16, Constants$root.C_CHAR$LAYOUT).withName("Cdb"),
            MemoryLayout.sequenceLayout(16, Constants$root.C_CHAR$LAYOUT).withName("Command"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("StartTime"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("EndTime"),
            Constants$root.C_LONG$LAYOUT.withName("OperationStatus"),
            Constants$root.C_LONG$LAYOUT.withName("OperationError"),
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_LONG$LAYOUT.withName("dwReserved")
                ).withName("ExternalStack"),
                MemoryLayout.structLayout(
                    Constants$root.C_LONG$LAYOUT.withName("dwAtaPortSpecific")
                ).withName("AtaPort"),
                MemoryLayout.structLayout(
                    Constants$root.C_LONG$LAYOUT.withName("SrbTag")
                ).withName("StorPort")
            ).withName("StackSpecific")
        ).withName("_DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD")).withName("RecordArray")
    ).withName("_DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP");
    public static MemoryLayout $LAYOUT() {
        return _DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP.$struct$LAYOUT;
    }
    public static MemorySegment Descriptor$slice(MemorySegment seg) {
        return seg.asSlice(0, 12);
    }
    static final VarHandle dwReasonForCollection$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwReasonForCollection"));
    public static VarHandle dwReasonForCollection$VH() {
        return _DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP.dwReasonForCollection$VH;
    }
    public static int dwReasonForCollection$get(MemorySegment seg) {
        return (int)_DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP.dwReasonForCollection$VH.get(seg);
    }
    public static void dwReasonForCollection$set( MemorySegment seg, int x) {
        _DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP.dwReasonForCollection$VH.set(seg, x);
    }
    public static int dwReasonForCollection$get(MemorySegment seg, long index) {
        return (int)_DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP.dwReasonForCollection$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwReasonForCollection$set(MemorySegment seg, long index, int x) {
        _DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP.dwReasonForCollection$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment cDriverName$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    static final VarHandle uiNumRecords$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("uiNumRecords"));
    public static VarHandle uiNumRecords$VH() {
        return _DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP.uiNumRecords$VH;
    }
    public static int uiNumRecords$get(MemorySegment seg) {
        return (int)_DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP.uiNumRecords$VH.get(seg);
    }
    public static void uiNumRecords$set( MemorySegment seg, int x) {
        _DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP.uiNumRecords$VH.set(seg, x);
    }
    public static int uiNumRecords$get(MemorySegment seg, long index) {
        return (int)_DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP.uiNumRecords$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void uiNumRecords$set(MemorySegment seg, long index, int x) {
        _DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP.uiNumRecords$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment RecordArray$slice(MemorySegment seg) {
        return seg.asSlice(36, 60);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


