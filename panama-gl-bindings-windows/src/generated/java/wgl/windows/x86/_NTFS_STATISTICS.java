// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _NTFS_STATISTICS {
 *     DWORD LogFileFullExceptions;
 *     DWORD OtherExceptions;
 *     DWORD MftReads;
 *     DWORD MftReadBytes;
 *     DWORD MftWrites;
 *     DWORD MftWriteBytes;
 *     struct {
 *         WORD Write;
 *         WORD Create;
 *         WORD SetInfo;
 *         WORD Flush;
 *     } MftWritesUserLevel;
 *     WORD MftWritesFlushForLogFileFull;
 *     WORD MftWritesLazyWriter;
 *     WORD MftWritesUserRequest;
 *     DWORD Mft2Writes;
 *     DWORD Mft2WriteBytes;
 *     struct {
 *         WORD Write;
 *         WORD Create;
 *         WORD SetInfo;
 *         WORD Flush;
 *     } Mft2WritesUserLevel;
 *     WORD Mft2WritesFlushForLogFileFull;
 *     WORD Mft2WritesLazyWriter;
 *     WORD Mft2WritesUserRequest;
 *     DWORD RootIndexReads;
 *     DWORD RootIndexReadBytes;
 *     DWORD RootIndexWrites;
 *     DWORD RootIndexWriteBytes;
 *     DWORD BitmapReads;
 *     DWORD BitmapReadBytes;
 *     DWORD BitmapWrites;
 *     DWORD BitmapWriteBytes;
 *     WORD BitmapWritesFlushForLogFileFull;
 *     WORD BitmapWritesLazyWriter;
 *     WORD BitmapWritesUserRequest;
 *     struct {
 *         WORD Write;
 *         WORD Create;
 *         WORD SetInfo;
 *     } BitmapWritesUserLevel;
 *     DWORD MftBitmapReads;
 *     DWORD MftBitmapReadBytes;
 *     DWORD MftBitmapWrites;
 *     DWORD MftBitmapWriteBytes;
 *     WORD MftBitmapWritesFlushForLogFileFull;
 *     WORD MftBitmapWritesLazyWriter;
 *     WORD MftBitmapWritesUserRequest;
 *     struct {
 *         WORD Write;
 *         WORD Create;
 *         WORD SetInfo;
 *         WORD Flush;
 *     } MftBitmapWritesUserLevel;
 *     DWORD UserIndexReads;
 *     DWORD UserIndexReadBytes;
 *     DWORD UserIndexWrites;
 *     DWORD UserIndexWriteBytes;
 *     DWORD LogFileReads;
 *     DWORD LogFileReadBytes;
 *     DWORD LogFileWrites;
 *     DWORD LogFileWriteBytes;
 *     struct {
 *         DWORD Calls;
 *         DWORD Clusters;
 *         DWORD Hints;
 *         DWORD RunsReturned;
 *         DWORD HintsHonored;
 *         DWORD HintsClusters;
 *         DWORD Cache;
 *         DWORD CacheClusters;
 *         DWORD CacheMiss;
 *         DWORD CacheMissClusters;
 *     } Allocate;
 *     DWORD DiskResourcesExhausted;
 * }
 * }
 */
public class _NTFS_STATISTICS {

    _NTFS_STATISTICS() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("LogFileFullExceptions"),
        wgl_h.C_LONG.withName("OtherExceptions"),
        wgl_h.C_LONG.withName("MftReads"),
        wgl_h.C_LONG.withName("MftReadBytes"),
        wgl_h.C_LONG.withName("MftWrites"),
        wgl_h.C_LONG.withName("MftWriteBytes"),
        _NTFS_STATISTICS.MftWritesUserLevel.layout().withName("MftWritesUserLevel"),
        wgl_h.C_SHORT.withName("MftWritesFlushForLogFileFull"),
        wgl_h.C_SHORT.withName("MftWritesLazyWriter"),
        wgl_h.C_SHORT.withName("MftWritesUserRequest"),
        MemoryLayout.paddingLayout(2),
        wgl_h.C_LONG.withName("Mft2Writes"),
        wgl_h.C_LONG.withName("Mft2WriteBytes"),
        _NTFS_STATISTICS.Mft2WritesUserLevel.layout().withName("Mft2WritesUserLevel"),
        wgl_h.C_SHORT.withName("Mft2WritesFlushForLogFileFull"),
        wgl_h.C_SHORT.withName("Mft2WritesLazyWriter"),
        wgl_h.C_SHORT.withName("Mft2WritesUserRequest"),
        MemoryLayout.paddingLayout(2),
        wgl_h.C_LONG.withName("RootIndexReads"),
        wgl_h.C_LONG.withName("RootIndexReadBytes"),
        wgl_h.C_LONG.withName("RootIndexWrites"),
        wgl_h.C_LONG.withName("RootIndexWriteBytes"),
        wgl_h.C_LONG.withName("BitmapReads"),
        wgl_h.C_LONG.withName("BitmapReadBytes"),
        wgl_h.C_LONG.withName("BitmapWrites"),
        wgl_h.C_LONG.withName("BitmapWriteBytes"),
        wgl_h.C_SHORT.withName("BitmapWritesFlushForLogFileFull"),
        wgl_h.C_SHORT.withName("BitmapWritesLazyWriter"),
        wgl_h.C_SHORT.withName("BitmapWritesUserRequest"),
        _NTFS_STATISTICS.BitmapWritesUserLevel.layout().withName("BitmapWritesUserLevel"),
        wgl_h.C_LONG.withName("MftBitmapReads"),
        wgl_h.C_LONG.withName("MftBitmapReadBytes"),
        wgl_h.C_LONG.withName("MftBitmapWrites"),
        wgl_h.C_LONG.withName("MftBitmapWriteBytes"),
        wgl_h.C_SHORT.withName("MftBitmapWritesFlushForLogFileFull"),
        wgl_h.C_SHORT.withName("MftBitmapWritesLazyWriter"),
        wgl_h.C_SHORT.withName("MftBitmapWritesUserRequest"),
        _NTFS_STATISTICS.MftBitmapWritesUserLevel.layout().withName("MftBitmapWritesUserLevel"),
        MemoryLayout.paddingLayout(2),
        wgl_h.C_LONG.withName("UserIndexReads"),
        wgl_h.C_LONG.withName("UserIndexReadBytes"),
        wgl_h.C_LONG.withName("UserIndexWrites"),
        wgl_h.C_LONG.withName("UserIndexWriteBytes"),
        wgl_h.C_LONG.withName("LogFileReads"),
        wgl_h.C_LONG.withName("LogFileReadBytes"),
        wgl_h.C_LONG.withName("LogFileWrites"),
        wgl_h.C_LONG.withName("LogFileWriteBytes"),
        _NTFS_STATISTICS.Allocate.layout().withName("Allocate"),
        wgl_h.C_LONG.withName("DiskResourcesExhausted")
    ).withName("_NTFS_STATISTICS");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt LogFileFullExceptions$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LogFileFullExceptions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD LogFileFullExceptions
     * }
     */
    public static final OfInt LogFileFullExceptions$layout() {
        return LogFileFullExceptions$LAYOUT;
    }

    private static final long LogFileFullExceptions$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD LogFileFullExceptions
     * }
     */
    public static final long LogFileFullExceptions$offset() {
        return LogFileFullExceptions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD LogFileFullExceptions
     * }
     */
    public static int LogFileFullExceptions(MemorySegment struct) {
        return struct.get(LogFileFullExceptions$LAYOUT, LogFileFullExceptions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD LogFileFullExceptions
     * }
     */
    public static void LogFileFullExceptions(MemorySegment struct, int fieldValue) {
        struct.set(LogFileFullExceptions$LAYOUT, LogFileFullExceptions$OFFSET, fieldValue);
    }

    private static final OfInt OtherExceptions$LAYOUT = (OfInt)$LAYOUT.select(groupElement("OtherExceptions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD OtherExceptions
     * }
     */
    public static final OfInt OtherExceptions$layout() {
        return OtherExceptions$LAYOUT;
    }

    private static final long OtherExceptions$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD OtherExceptions
     * }
     */
    public static final long OtherExceptions$offset() {
        return OtherExceptions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD OtherExceptions
     * }
     */
    public static int OtherExceptions(MemorySegment struct) {
        return struct.get(OtherExceptions$LAYOUT, OtherExceptions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD OtherExceptions
     * }
     */
    public static void OtherExceptions(MemorySegment struct, int fieldValue) {
        struct.set(OtherExceptions$LAYOUT, OtherExceptions$OFFSET, fieldValue);
    }

    private static final OfInt MftReads$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MftReads"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD MftReads
     * }
     */
    public static final OfInt MftReads$layout() {
        return MftReads$LAYOUT;
    }

    private static final long MftReads$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD MftReads
     * }
     */
    public static final long MftReads$offset() {
        return MftReads$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD MftReads
     * }
     */
    public static int MftReads(MemorySegment struct) {
        return struct.get(MftReads$LAYOUT, MftReads$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD MftReads
     * }
     */
    public static void MftReads(MemorySegment struct, int fieldValue) {
        struct.set(MftReads$LAYOUT, MftReads$OFFSET, fieldValue);
    }

    private static final OfInt MftReadBytes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MftReadBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD MftReadBytes
     * }
     */
    public static final OfInt MftReadBytes$layout() {
        return MftReadBytes$LAYOUT;
    }

    private static final long MftReadBytes$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD MftReadBytes
     * }
     */
    public static final long MftReadBytes$offset() {
        return MftReadBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD MftReadBytes
     * }
     */
    public static int MftReadBytes(MemorySegment struct) {
        return struct.get(MftReadBytes$LAYOUT, MftReadBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD MftReadBytes
     * }
     */
    public static void MftReadBytes(MemorySegment struct, int fieldValue) {
        struct.set(MftReadBytes$LAYOUT, MftReadBytes$OFFSET, fieldValue);
    }

    private static final OfInt MftWrites$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MftWrites"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD MftWrites
     * }
     */
    public static final OfInt MftWrites$layout() {
        return MftWrites$LAYOUT;
    }

    private static final long MftWrites$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD MftWrites
     * }
     */
    public static final long MftWrites$offset() {
        return MftWrites$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD MftWrites
     * }
     */
    public static int MftWrites(MemorySegment struct) {
        return struct.get(MftWrites$LAYOUT, MftWrites$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD MftWrites
     * }
     */
    public static void MftWrites(MemorySegment struct, int fieldValue) {
        struct.set(MftWrites$LAYOUT, MftWrites$OFFSET, fieldValue);
    }

    private static final OfInt MftWriteBytes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MftWriteBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD MftWriteBytes
     * }
     */
    public static final OfInt MftWriteBytes$layout() {
        return MftWriteBytes$LAYOUT;
    }

    private static final long MftWriteBytes$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD MftWriteBytes
     * }
     */
    public static final long MftWriteBytes$offset() {
        return MftWriteBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD MftWriteBytes
     * }
     */
    public static int MftWriteBytes(MemorySegment struct) {
        return struct.get(MftWriteBytes$LAYOUT, MftWriteBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD MftWriteBytes
     * }
     */
    public static void MftWriteBytes(MemorySegment struct, int fieldValue) {
        struct.set(MftWriteBytes$LAYOUT, MftWriteBytes$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     WORD Write;
     *     WORD Create;
     *     WORD SetInfo;
     *     WORD Flush;
     * }
     * }
     */
    public static class MftWritesUserLevel {

        MftWritesUserLevel() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            wgl_h.C_SHORT.withName("Write"),
            wgl_h.C_SHORT.withName("Create"),
            wgl_h.C_SHORT.withName("SetInfo"),
            wgl_h.C_SHORT.withName("Flush")
        ).withName("$anon$11359:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfShort Write$LAYOUT = (OfShort)$LAYOUT.select(groupElement("Write"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * WORD Write
         * }
         */
        public static final OfShort Write$layout() {
            return Write$LAYOUT;
        }

        private static final long Write$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * WORD Write
         * }
         */
        public static final long Write$offset() {
            return Write$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * WORD Write
         * }
         */
        public static short Write(MemorySegment struct) {
            return struct.get(Write$LAYOUT, Write$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * WORD Write
         * }
         */
        public static void Write(MemorySegment struct, short fieldValue) {
            struct.set(Write$LAYOUT, Write$OFFSET, fieldValue);
        }

        private static final OfShort Create$LAYOUT = (OfShort)$LAYOUT.select(groupElement("Create"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * WORD Create
         * }
         */
        public static final OfShort Create$layout() {
            return Create$LAYOUT;
        }

        private static final long Create$OFFSET = 2;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * WORD Create
         * }
         */
        public static final long Create$offset() {
            return Create$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * WORD Create
         * }
         */
        public static short Create(MemorySegment struct) {
            return struct.get(Create$LAYOUT, Create$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * WORD Create
         * }
         */
        public static void Create(MemorySegment struct, short fieldValue) {
            struct.set(Create$LAYOUT, Create$OFFSET, fieldValue);
        }

        private static final OfShort SetInfo$LAYOUT = (OfShort)$LAYOUT.select(groupElement("SetInfo"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * WORD SetInfo
         * }
         */
        public static final OfShort SetInfo$layout() {
            return SetInfo$LAYOUT;
        }

        private static final long SetInfo$OFFSET = 4;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * WORD SetInfo
         * }
         */
        public static final long SetInfo$offset() {
            return SetInfo$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * WORD SetInfo
         * }
         */
        public static short SetInfo(MemorySegment struct) {
            return struct.get(SetInfo$LAYOUT, SetInfo$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * WORD SetInfo
         * }
         */
        public static void SetInfo(MemorySegment struct, short fieldValue) {
            struct.set(SetInfo$LAYOUT, SetInfo$OFFSET, fieldValue);
        }

        private static final OfShort Flush$LAYOUT = (OfShort)$LAYOUT.select(groupElement("Flush"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * WORD Flush
         * }
         */
        public static final OfShort Flush$layout() {
            return Flush$LAYOUT;
        }

        private static final long Flush$OFFSET = 6;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * WORD Flush
         * }
         */
        public static final long Flush$offset() {
            return Flush$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * WORD Flush
         * }
         */
        public static short Flush(MemorySegment struct) {
            return struct.get(Flush$LAYOUT, Flush$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * WORD Flush
         * }
         */
        public static void Flush(MemorySegment struct, short fieldValue) {
            struct.set(Flush$LAYOUT, Flush$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout MftWritesUserLevel$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("MftWritesUserLevel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     WORD Write;
     *     WORD Create;
     *     WORD SetInfo;
     *     WORD Flush;
     * } MftWritesUserLevel
     * }
     */
    public static final GroupLayout MftWritesUserLevel$layout() {
        return MftWritesUserLevel$LAYOUT;
    }

    private static final long MftWritesUserLevel$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     WORD Write;
     *     WORD Create;
     *     WORD SetInfo;
     *     WORD Flush;
     * } MftWritesUserLevel
     * }
     */
    public static final long MftWritesUserLevel$offset() {
        return MftWritesUserLevel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     WORD Write;
     *     WORD Create;
     *     WORD SetInfo;
     *     WORD Flush;
     * } MftWritesUserLevel
     * }
     */
    public static MemorySegment MftWritesUserLevel(MemorySegment struct) {
        return struct.asSlice(MftWritesUserLevel$OFFSET, MftWritesUserLevel$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     WORD Write;
     *     WORD Create;
     *     WORD SetInfo;
     *     WORD Flush;
     * } MftWritesUserLevel
     * }
     */
    public static void MftWritesUserLevel(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, MftWritesUserLevel$OFFSET, MftWritesUserLevel$LAYOUT.byteSize());
    }

    private static final OfShort MftWritesFlushForLogFileFull$LAYOUT = (OfShort)$LAYOUT.select(groupElement("MftWritesFlushForLogFileFull"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD MftWritesFlushForLogFileFull
     * }
     */
    public static final OfShort MftWritesFlushForLogFileFull$layout() {
        return MftWritesFlushForLogFileFull$LAYOUT;
    }

    private static final long MftWritesFlushForLogFileFull$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD MftWritesFlushForLogFileFull
     * }
     */
    public static final long MftWritesFlushForLogFileFull$offset() {
        return MftWritesFlushForLogFileFull$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD MftWritesFlushForLogFileFull
     * }
     */
    public static short MftWritesFlushForLogFileFull(MemorySegment struct) {
        return struct.get(MftWritesFlushForLogFileFull$LAYOUT, MftWritesFlushForLogFileFull$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD MftWritesFlushForLogFileFull
     * }
     */
    public static void MftWritesFlushForLogFileFull(MemorySegment struct, short fieldValue) {
        struct.set(MftWritesFlushForLogFileFull$LAYOUT, MftWritesFlushForLogFileFull$OFFSET, fieldValue);
    }

    private static final OfShort MftWritesLazyWriter$LAYOUT = (OfShort)$LAYOUT.select(groupElement("MftWritesLazyWriter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD MftWritesLazyWriter
     * }
     */
    public static final OfShort MftWritesLazyWriter$layout() {
        return MftWritesLazyWriter$LAYOUT;
    }

    private static final long MftWritesLazyWriter$OFFSET = 34;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD MftWritesLazyWriter
     * }
     */
    public static final long MftWritesLazyWriter$offset() {
        return MftWritesLazyWriter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD MftWritesLazyWriter
     * }
     */
    public static short MftWritesLazyWriter(MemorySegment struct) {
        return struct.get(MftWritesLazyWriter$LAYOUT, MftWritesLazyWriter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD MftWritesLazyWriter
     * }
     */
    public static void MftWritesLazyWriter(MemorySegment struct, short fieldValue) {
        struct.set(MftWritesLazyWriter$LAYOUT, MftWritesLazyWriter$OFFSET, fieldValue);
    }

    private static final OfShort MftWritesUserRequest$LAYOUT = (OfShort)$LAYOUT.select(groupElement("MftWritesUserRequest"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD MftWritesUserRequest
     * }
     */
    public static final OfShort MftWritesUserRequest$layout() {
        return MftWritesUserRequest$LAYOUT;
    }

    private static final long MftWritesUserRequest$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD MftWritesUserRequest
     * }
     */
    public static final long MftWritesUserRequest$offset() {
        return MftWritesUserRequest$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD MftWritesUserRequest
     * }
     */
    public static short MftWritesUserRequest(MemorySegment struct) {
        return struct.get(MftWritesUserRequest$LAYOUT, MftWritesUserRequest$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD MftWritesUserRequest
     * }
     */
    public static void MftWritesUserRequest(MemorySegment struct, short fieldValue) {
        struct.set(MftWritesUserRequest$LAYOUT, MftWritesUserRequest$OFFSET, fieldValue);
    }

    private static final OfInt Mft2Writes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Mft2Writes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Mft2Writes
     * }
     */
    public static final OfInt Mft2Writes$layout() {
        return Mft2Writes$LAYOUT;
    }

    private static final long Mft2Writes$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Mft2Writes
     * }
     */
    public static final long Mft2Writes$offset() {
        return Mft2Writes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Mft2Writes
     * }
     */
    public static int Mft2Writes(MemorySegment struct) {
        return struct.get(Mft2Writes$LAYOUT, Mft2Writes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Mft2Writes
     * }
     */
    public static void Mft2Writes(MemorySegment struct, int fieldValue) {
        struct.set(Mft2Writes$LAYOUT, Mft2Writes$OFFSET, fieldValue);
    }

    private static final OfInt Mft2WriteBytes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Mft2WriteBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Mft2WriteBytes
     * }
     */
    public static final OfInt Mft2WriteBytes$layout() {
        return Mft2WriteBytes$LAYOUT;
    }

    private static final long Mft2WriteBytes$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Mft2WriteBytes
     * }
     */
    public static final long Mft2WriteBytes$offset() {
        return Mft2WriteBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Mft2WriteBytes
     * }
     */
    public static int Mft2WriteBytes(MemorySegment struct) {
        return struct.get(Mft2WriteBytes$LAYOUT, Mft2WriteBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Mft2WriteBytes
     * }
     */
    public static void Mft2WriteBytes(MemorySegment struct, int fieldValue) {
        struct.set(Mft2WriteBytes$LAYOUT, Mft2WriteBytes$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     WORD Write;
     *     WORD Create;
     *     WORD SetInfo;
     *     WORD Flush;
     * }
     * }
     */
    public static class Mft2WritesUserLevel {

        Mft2WritesUserLevel() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            wgl_h.C_SHORT.withName("Write"),
            wgl_h.C_SHORT.withName("Create"),
            wgl_h.C_SHORT.withName("SetInfo"),
            wgl_h.C_SHORT.withName("Flush")
        ).withName("$anon$11372:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfShort Write$LAYOUT = (OfShort)$LAYOUT.select(groupElement("Write"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * WORD Write
         * }
         */
        public static final OfShort Write$layout() {
            return Write$LAYOUT;
        }

        private static final long Write$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * WORD Write
         * }
         */
        public static final long Write$offset() {
            return Write$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * WORD Write
         * }
         */
        public static short Write(MemorySegment struct) {
            return struct.get(Write$LAYOUT, Write$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * WORD Write
         * }
         */
        public static void Write(MemorySegment struct, short fieldValue) {
            struct.set(Write$LAYOUT, Write$OFFSET, fieldValue);
        }

        private static final OfShort Create$LAYOUT = (OfShort)$LAYOUT.select(groupElement("Create"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * WORD Create
         * }
         */
        public static final OfShort Create$layout() {
            return Create$LAYOUT;
        }

        private static final long Create$OFFSET = 2;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * WORD Create
         * }
         */
        public static final long Create$offset() {
            return Create$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * WORD Create
         * }
         */
        public static short Create(MemorySegment struct) {
            return struct.get(Create$LAYOUT, Create$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * WORD Create
         * }
         */
        public static void Create(MemorySegment struct, short fieldValue) {
            struct.set(Create$LAYOUT, Create$OFFSET, fieldValue);
        }

        private static final OfShort SetInfo$LAYOUT = (OfShort)$LAYOUT.select(groupElement("SetInfo"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * WORD SetInfo
         * }
         */
        public static final OfShort SetInfo$layout() {
            return SetInfo$LAYOUT;
        }

        private static final long SetInfo$OFFSET = 4;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * WORD SetInfo
         * }
         */
        public static final long SetInfo$offset() {
            return SetInfo$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * WORD SetInfo
         * }
         */
        public static short SetInfo(MemorySegment struct) {
            return struct.get(SetInfo$LAYOUT, SetInfo$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * WORD SetInfo
         * }
         */
        public static void SetInfo(MemorySegment struct, short fieldValue) {
            struct.set(SetInfo$LAYOUT, SetInfo$OFFSET, fieldValue);
        }

        private static final OfShort Flush$LAYOUT = (OfShort)$LAYOUT.select(groupElement("Flush"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * WORD Flush
         * }
         */
        public static final OfShort Flush$layout() {
            return Flush$LAYOUT;
        }

        private static final long Flush$OFFSET = 6;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * WORD Flush
         * }
         */
        public static final long Flush$offset() {
            return Flush$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * WORD Flush
         * }
         */
        public static short Flush(MemorySegment struct) {
            return struct.get(Flush$LAYOUT, Flush$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * WORD Flush
         * }
         */
        public static void Flush(MemorySegment struct, short fieldValue) {
            struct.set(Flush$LAYOUT, Flush$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout Mft2WritesUserLevel$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Mft2WritesUserLevel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     WORD Write;
     *     WORD Create;
     *     WORD SetInfo;
     *     WORD Flush;
     * } Mft2WritesUserLevel
     * }
     */
    public static final GroupLayout Mft2WritesUserLevel$layout() {
        return Mft2WritesUserLevel$LAYOUT;
    }

    private static final long Mft2WritesUserLevel$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     WORD Write;
     *     WORD Create;
     *     WORD SetInfo;
     *     WORD Flush;
     * } Mft2WritesUserLevel
     * }
     */
    public static final long Mft2WritesUserLevel$offset() {
        return Mft2WritesUserLevel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     WORD Write;
     *     WORD Create;
     *     WORD SetInfo;
     *     WORD Flush;
     * } Mft2WritesUserLevel
     * }
     */
    public static MemorySegment Mft2WritesUserLevel(MemorySegment struct) {
        return struct.asSlice(Mft2WritesUserLevel$OFFSET, Mft2WritesUserLevel$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     WORD Write;
     *     WORD Create;
     *     WORD SetInfo;
     *     WORD Flush;
     * } Mft2WritesUserLevel
     * }
     */
    public static void Mft2WritesUserLevel(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Mft2WritesUserLevel$OFFSET, Mft2WritesUserLevel$LAYOUT.byteSize());
    }

    private static final OfShort Mft2WritesFlushForLogFileFull$LAYOUT = (OfShort)$LAYOUT.select(groupElement("Mft2WritesFlushForLogFileFull"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD Mft2WritesFlushForLogFileFull
     * }
     */
    public static final OfShort Mft2WritesFlushForLogFileFull$layout() {
        return Mft2WritesFlushForLogFileFull$LAYOUT;
    }

    private static final long Mft2WritesFlushForLogFileFull$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD Mft2WritesFlushForLogFileFull
     * }
     */
    public static final long Mft2WritesFlushForLogFileFull$offset() {
        return Mft2WritesFlushForLogFileFull$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD Mft2WritesFlushForLogFileFull
     * }
     */
    public static short Mft2WritesFlushForLogFileFull(MemorySegment struct) {
        return struct.get(Mft2WritesFlushForLogFileFull$LAYOUT, Mft2WritesFlushForLogFileFull$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD Mft2WritesFlushForLogFileFull
     * }
     */
    public static void Mft2WritesFlushForLogFileFull(MemorySegment struct, short fieldValue) {
        struct.set(Mft2WritesFlushForLogFileFull$LAYOUT, Mft2WritesFlushForLogFileFull$OFFSET, fieldValue);
    }

    private static final OfShort Mft2WritesLazyWriter$LAYOUT = (OfShort)$LAYOUT.select(groupElement("Mft2WritesLazyWriter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD Mft2WritesLazyWriter
     * }
     */
    public static final OfShort Mft2WritesLazyWriter$layout() {
        return Mft2WritesLazyWriter$LAYOUT;
    }

    private static final long Mft2WritesLazyWriter$OFFSET = 58;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD Mft2WritesLazyWriter
     * }
     */
    public static final long Mft2WritesLazyWriter$offset() {
        return Mft2WritesLazyWriter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD Mft2WritesLazyWriter
     * }
     */
    public static short Mft2WritesLazyWriter(MemorySegment struct) {
        return struct.get(Mft2WritesLazyWriter$LAYOUT, Mft2WritesLazyWriter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD Mft2WritesLazyWriter
     * }
     */
    public static void Mft2WritesLazyWriter(MemorySegment struct, short fieldValue) {
        struct.set(Mft2WritesLazyWriter$LAYOUT, Mft2WritesLazyWriter$OFFSET, fieldValue);
    }

    private static final OfShort Mft2WritesUserRequest$LAYOUT = (OfShort)$LAYOUT.select(groupElement("Mft2WritesUserRequest"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD Mft2WritesUserRequest
     * }
     */
    public static final OfShort Mft2WritesUserRequest$layout() {
        return Mft2WritesUserRequest$LAYOUT;
    }

    private static final long Mft2WritesUserRequest$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD Mft2WritesUserRequest
     * }
     */
    public static final long Mft2WritesUserRequest$offset() {
        return Mft2WritesUserRequest$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD Mft2WritesUserRequest
     * }
     */
    public static short Mft2WritesUserRequest(MemorySegment struct) {
        return struct.get(Mft2WritesUserRequest$LAYOUT, Mft2WritesUserRequest$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD Mft2WritesUserRequest
     * }
     */
    public static void Mft2WritesUserRequest(MemorySegment struct, short fieldValue) {
        struct.set(Mft2WritesUserRequest$LAYOUT, Mft2WritesUserRequest$OFFSET, fieldValue);
    }

    private static final OfInt RootIndexReads$LAYOUT = (OfInt)$LAYOUT.select(groupElement("RootIndexReads"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD RootIndexReads
     * }
     */
    public static final OfInt RootIndexReads$layout() {
        return RootIndexReads$LAYOUT;
    }

    private static final long RootIndexReads$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD RootIndexReads
     * }
     */
    public static final long RootIndexReads$offset() {
        return RootIndexReads$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD RootIndexReads
     * }
     */
    public static int RootIndexReads(MemorySegment struct) {
        return struct.get(RootIndexReads$LAYOUT, RootIndexReads$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD RootIndexReads
     * }
     */
    public static void RootIndexReads(MemorySegment struct, int fieldValue) {
        struct.set(RootIndexReads$LAYOUT, RootIndexReads$OFFSET, fieldValue);
    }

    private static final OfInt RootIndexReadBytes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("RootIndexReadBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD RootIndexReadBytes
     * }
     */
    public static final OfInt RootIndexReadBytes$layout() {
        return RootIndexReadBytes$LAYOUT;
    }

    private static final long RootIndexReadBytes$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD RootIndexReadBytes
     * }
     */
    public static final long RootIndexReadBytes$offset() {
        return RootIndexReadBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD RootIndexReadBytes
     * }
     */
    public static int RootIndexReadBytes(MemorySegment struct) {
        return struct.get(RootIndexReadBytes$LAYOUT, RootIndexReadBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD RootIndexReadBytes
     * }
     */
    public static void RootIndexReadBytes(MemorySegment struct, int fieldValue) {
        struct.set(RootIndexReadBytes$LAYOUT, RootIndexReadBytes$OFFSET, fieldValue);
    }

    private static final OfInt RootIndexWrites$LAYOUT = (OfInt)$LAYOUT.select(groupElement("RootIndexWrites"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD RootIndexWrites
     * }
     */
    public static final OfInt RootIndexWrites$layout() {
        return RootIndexWrites$LAYOUT;
    }

    private static final long RootIndexWrites$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD RootIndexWrites
     * }
     */
    public static final long RootIndexWrites$offset() {
        return RootIndexWrites$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD RootIndexWrites
     * }
     */
    public static int RootIndexWrites(MemorySegment struct) {
        return struct.get(RootIndexWrites$LAYOUT, RootIndexWrites$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD RootIndexWrites
     * }
     */
    public static void RootIndexWrites(MemorySegment struct, int fieldValue) {
        struct.set(RootIndexWrites$LAYOUT, RootIndexWrites$OFFSET, fieldValue);
    }

    private static final OfInt RootIndexWriteBytes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("RootIndexWriteBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD RootIndexWriteBytes
     * }
     */
    public static final OfInt RootIndexWriteBytes$layout() {
        return RootIndexWriteBytes$LAYOUT;
    }

    private static final long RootIndexWriteBytes$OFFSET = 76;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD RootIndexWriteBytes
     * }
     */
    public static final long RootIndexWriteBytes$offset() {
        return RootIndexWriteBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD RootIndexWriteBytes
     * }
     */
    public static int RootIndexWriteBytes(MemorySegment struct) {
        return struct.get(RootIndexWriteBytes$LAYOUT, RootIndexWriteBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD RootIndexWriteBytes
     * }
     */
    public static void RootIndexWriteBytes(MemorySegment struct, int fieldValue) {
        struct.set(RootIndexWriteBytes$LAYOUT, RootIndexWriteBytes$OFFSET, fieldValue);
    }

    private static final OfInt BitmapReads$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BitmapReads"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD BitmapReads
     * }
     */
    public static final OfInt BitmapReads$layout() {
        return BitmapReads$LAYOUT;
    }

    private static final long BitmapReads$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD BitmapReads
     * }
     */
    public static final long BitmapReads$offset() {
        return BitmapReads$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD BitmapReads
     * }
     */
    public static int BitmapReads(MemorySegment struct) {
        return struct.get(BitmapReads$LAYOUT, BitmapReads$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD BitmapReads
     * }
     */
    public static void BitmapReads(MemorySegment struct, int fieldValue) {
        struct.set(BitmapReads$LAYOUT, BitmapReads$OFFSET, fieldValue);
    }

    private static final OfInt BitmapReadBytes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BitmapReadBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD BitmapReadBytes
     * }
     */
    public static final OfInt BitmapReadBytes$layout() {
        return BitmapReadBytes$LAYOUT;
    }

    private static final long BitmapReadBytes$OFFSET = 84;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD BitmapReadBytes
     * }
     */
    public static final long BitmapReadBytes$offset() {
        return BitmapReadBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD BitmapReadBytes
     * }
     */
    public static int BitmapReadBytes(MemorySegment struct) {
        return struct.get(BitmapReadBytes$LAYOUT, BitmapReadBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD BitmapReadBytes
     * }
     */
    public static void BitmapReadBytes(MemorySegment struct, int fieldValue) {
        struct.set(BitmapReadBytes$LAYOUT, BitmapReadBytes$OFFSET, fieldValue);
    }

    private static final OfInt BitmapWrites$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BitmapWrites"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD BitmapWrites
     * }
     */
    public static final OfInt BitmapWrites$layout() {
        return BitmapWrites$LAYOUT;
    }

    private static final long BitmapWrites$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD BitmapWrites
     * }
     */
    public static final long BitmapWrites$offset() {
        return BitmapWrites$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD BitmapWrites
     * }
     */
    public static int BitmapWrites(MemorySegment struct) {
        return struct.get(BitmapWrites$LAYOUT, BitmapWrites$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD BitmapWrites
     * }
     */
    public static void BitmapWrites(MemorySegment struct, int fieldValue) {
        struct.set(BitmapWrites$LAYOUT, BitmapWrites$OFFSET, fieldValue);
    }

    private static final OfInt BitmapWriteBytes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BitmapWriteBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD BitmapWriteBytes
     * }
     */
    public static final OfInt BitmapWriteBytes$layout() {
        return BitmapWriteBytes$LAYOUT;
    }

    private static final long BitmapWriteBytes$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD BitmapWriteBytes
     * }
     */
    public static final long BitmapWriteBytes$offset() {
        return BitmapWriteBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD BitmapWriteBytes
     * }
     */
    public static int BitmapWriteBytes(MemorySegment struct) {
        return struct.get(BitmapWriteBytes$LAYOUT, BitmapWriteBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD BitmapWriteBytes
     * }
     */
    public static void BitmapWriteBytes(MemorySegment struct, int fieldValue) {
        struct.set(BitmapWriteBytes$LAYOUT, BitmapWriteBytes$OFFSET, fieldValue);
    }

    private static final OfShort BitmapWritesFlushForLogFileFull$LAYOUT = (OfShort)$LAYOUT.select(groupElement("BitmapWritesFlushForLogFileFull"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD BitmapWritesFlushForLogFileFull
     * }
     */
    public static final OfShort BitmapWritesFlushForLogFileFull$layout() {
        return BitmapWritesFlushForLogFileFull$LAYOUT;
    }

    private static final long BitmapWritesFlushForLogFileFull$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD BitmapWritesFlushForLogFileFull
     * }
     */
    public static final long BitmapWritesFlushForLogFileFull$offset() {
        return BitmapWritesFlushForLogFileFull$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD BitmapWritesFlushForLogFileFull
     * }
     */
    public static short BitmapWritesFlushForLogFileFull(MemorySegment struct) {
        return struct.get(BitmapWritesFlushForLogFileFull$LAYOUT, BitmapWritesFlushForLogFileFull$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD BitmapWritesFlushForLogFileFull
     * }
     */
    public static void BitmapWritesFlushForLogFileFull(MemorySegment struct, short fieldValue) {
        struct.set(BitmapWritesFlushForLogFileFull$LAYOUT, BitmapWritesFlushForLogFileFull$OFFSET, fieldValue);
    }

    private static final OfShort BitmapWritesLazyWriter$LAYOUT = (OfShort)$LAYOUT.select(groupElement("BitmapWritesLazyWriter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD BitmapWritesLazyWriter
     * }
     */
    public static final OfShort BitmapWritesLazyWriter$layout() {
        return BitmapWritesLazyWriter$LAYOUT;
    }

    private static final long BitmapWritesLazyWriter$OFFSET = 98;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD BitmapWritesLazyWriter
     * }
     */
    public static final long BitmapWritesLazyWriter$offset() {
        return BitmapWritesLazyWriter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD BitmapWritesLazyWriter
     * }
     */
    public static short BitmapWritesLazyWriter(MemorySegment struct) {
        return struct.get(BitmapWritesLazyWriter$LAYOUT, BitmapWritesLazyWriter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD BitmapWritesLazyWriter
     * }
     */
    public static void BitmapWritesLazyWriter(MemorySegment struct, short fieldValue) {
        struct.set(BitmapWritesLazyWriter$LAYOUT, BitmapWritesLazyWriter$OFFSET, fieldValue);
    }

    private static final OfShort BitmapWritesUserRequest$LAYOUT = (OfShort)$LAYOUT.select(groupElement("BitmapWritesUserRequest"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD BitmapWritesUserRequest
     * }
     */
    public static final OfShort BitmapWritesUserRequest$layout() {
        return BitmapWritesUserRequest$LAYOUT;
    }

    private static final long BitmapWritesUserRequest$OFFSET = 100;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD BitmapWritesUserRequest
     * }
     */
    public static final long BitmapWritesUserRequest$offset() {
        return BitmapWritesUserRequest$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD BitmapWritesUserRequest
     * }
     */
    public static short BitmapWritesUserRequest(MemorySegment struct) {
        return struct.get(BitmapWritesUserRequest$LAYOUT, BitmapWritesUserRequest$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD BitmapWritesUserRequest
     * }
     */
    public static void BitmapWritesUserRequest(MemorySegment struct, short fieldValue) {
        struct.set(BitmapWritesUserRequest$LAYOUT, BitmapWritesUserRequest$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     WORD Write;
     *     WORD Create;
     *     WORD SetInfo;
     * }
     * }
     */
    public static class BitmapWritesUserLevel {

        BitmapWritesUserLevel() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            wgl_h.C_SHORT.withName("Write"),
            wgl_h.C_SHORT.withName("Create"),
            wgl_h.C_SHORT.withName("SetInfo")
        ).withName("$anon$11397:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfShort Write$LAYOUT = (OfShort)$LAYOUT.select(groupElement("Write"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * WORD Write
         * }
         */
        public static final OfShort Write$layout() {
            return Write$LAYOUT;
        }

        private static final long Write$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * WORD Write
         * }
         */
        public static final long Write$offset() {
            return Write$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * WORD Write
         * }
         */
        public static short Write(MemorySegment struct) {
            return struct.get(Write$LAYOUT, Write$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * WORD Write
         * }
         */
        public static void Write(MemorySegment struct, short fieldValue) {
            struct.set(Write$LAYOUT, Write$OFFSET, fieldValue);
        }

        private static final OfShort Create$LAYOUT = (OfShort)$LAYOUT.select(groupElement("Create"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * WORD Create
         * }
         */
        public static final OfShort Create$layout() {
            return Create$LAYOUT;
        }

        private static final long Create$OFFSET = 2;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * WORD Create
         * }
         */
        public static final long Create$offset() {
            return Create$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * WORD Create
         * }
         */
        public static short Create(MemorySegment struct) {
            return struct.get(Create$LAYOUT, Create$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * WORD Create
         * }
         */
        public static void Create(MemorySegment struct, short fieldValue) {
            struct.set(Create$LAYOUT, Create$OFFSET, fieldValue);
        }

        private static final OfShort SetInfo$LAYOUT = (OfShort)$LAYOUT.select(groupElement("SetInfo"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * WORD SetInfo
         * }
         */
        public static final OfShort SetInfo$layout() {
            return SetInfo$LAYOUT;
        }

        private static final long SetInfo$OFFSET = 4;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * WORD SetInfo
         * }
         */
        public static final long SetInfo$offset() {
            return SetInfo$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * WORD SetInfo
         * }
         */
        public static short SetInfo(MemorySegment struct) {
            return struct.get(SetInfo$LAYOUT, SetInfo$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * WORD SetInfo
         * }
         */
        public static void SetInfo(MemorySegment struct, short fieldValue) {
            struct.set(SetInfo$LAYOUT, SetInfo$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout BitmapWritesUserLevel$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("BitmapWritesUserLevel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     WORD Write;
     *     WORD Create;
     *     WORD SetInfo;
     * } BitmapWritesUserLevel
     * }
     */
    public static final GroupLayout BitmapWritesUserLevel$layout() {
        return BitmapWritesUserLevel$LAYOUT;
    }

    private static final long BitmapWritesUserLevel$OFFSET = 102;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     WORD Write;
     *     WORD Create;
     *     WORD SetInfo;
     * } BitmapWritesUserLevel
     * }
     */
    public static final long BitmapWritesUserLevel$offset() {
        return BitmapWritesUserLevel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     WORD Write;
     *     WORD Create;
     *     WORD SetInfo;
     * } BitmapWritesUserLevel
     * }
     */
    public static MemorySegment BitmapWritesUserLevel(MemorySegment struct) {
        return struct.asSlice(BitmapWritesUserLevel$OFFSET, BitmapWritesUserLevel$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     WORD Write;
     *     WORD Create;
     *     WORD SetInfo;
     * } BitmapWritesUserLevel
     * }
     */
    public static void BitmapWritesUserLevel(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, BitmapWritesUserLevel$OFFSET, BitmapWritesUserLevel$LAYOUT.byteSize());
    }

    private static final OfInt MftBitmapReads$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MftBitmapReads"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD MftBitmapReads
     * }
     */
    public static final OfInt MftBitmapReads$layout() {
        return MftBitmapReads$LAYOUT;
    }

    private static final long MftBitmapReads$OFFSET = 108;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD MftBitmapReads
     * }
     */
    public static final long MftBitmapReads$offset() {
        return MftBitmapReads$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD MftBitmapReads
     * }
     */
    public static int MftBitmapReads(MemorySegment struct) {
        return struct.get(MftBitmapReads$LAYOUT, MftBitmapReads$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD MftBitmapReads
     * }
     */
    public static void MftBitmapReads(MemorySegment struct, int fieldValue) {
        struct.set(MftBitmapReads$LAYOUT, MftBitmapReads$OFFSET, fieldValue);
    }

    private static final OfInt MftBitmapReadBytes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MftBitmapReadBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD MftBitmapReadBytes
     * }
     */
    public static final OfInt MftBitmapReadBytes$layout() {
        return MftBitmapReadBytes$LAYOUT;
    }

    private static final long MftBitmapReadBytes$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD MftBitmapReadBytes
     * }
     */
    public static final long MftBitmapReadBytes$offset() {
        return MftBitmapReadBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD MftBitmapReadBytes
     * }
     */
    public static int MftBitmapReadBytes(MemorySegment struct) {
        return struct.get(MftBitmapReadBytes$LAYOUT, MftBitmapReadBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD MftBitmapReadBytes
     * }
     */
    public static void MftBitmapReadBytes(MemorySegment struct, int fieldValue) {
        struct.set(MftBitmapReadBytes$LAYOUT, MftBitmapReadBytes$OFFSET, fieldValue);
    }

    private static final OfInt MftBitmapWrites$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MftBitmapWrites"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD MftBitmapWrites
     * }
     */
    public static final OfInt MftBitmapWrites$layout() {
        return MftBitmapWrites$LAYOUT;
    }

    private static final long MftBitmapWrites$OFFSET = 116;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD MftBitmapWrites
     * }
     */
    public static final long MftBitmapWrites$offset() {
        return MftBitmapWrites$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD MftBitmapWrites
     * }
     */
    public static int MftBitmapWrites(MemorySegment struct) {
        return struct.get(MftBitmapWrites$LAYOUT, MftBitmapWrites$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD MftBitmapWrites
     * }
     */
    public static void MftBitmapWrites(MemorySegment struct, int fieldValue) {
        struct.set(MftBitmapWrites$LAYOUT, MftBitmapWrites$OFFSET, fieldValue);
    }

    private static final OfInt MftBitmapWriteBytes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MftBitmapWriteBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD MftBitmapWriteBytes
     * }
     */
    public static final OfInt MftBitmapWriteBytes$layout() {
        return MftBitmapWriteBytes$LAYOUT;
    }

    private static final long MftBitmapWriteBytes$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD MftBitmapWriteBytes
     * }
     */
    public static final long MftBitmapWriteBytes$offset() {
        return MftBitmapWriteBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD MftBitmapWriteBytes
     * }
     */
    public static int MftBitmapWriteBytes(MemorySegment struct) {
        return struct.get(MftBitmapWriteBytes$LAYOUT, MftBitmapWriteBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD MftBitmapWriteBytes
     * }
     */
    public static void MftBitmapWriteBytes(MemorySegment struct, int fieldValue) {
        struct.set(MftBitmapWriteBytes$LAYOUT, MftBitmapWriteBytes$OFFSET, fieldValue);
    }

    private static final OfShort MftBitmapWritesFlushForLogFileFull$LAYOUT = (OfShort)$LAYOUT.select(groupElement("MftBitmapWritesFlushForLogFileFull"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD MftBitmapWritesFlushForLogFileFull
     * }
     */
    public static final OfShort MftBitmapWritesFlushForLogFileFull$layout() {
        return MftBitmapWritesFlushForLogFileFull$LAYOUT;
    }

    private static final long MftBitmapWritesFlushForLogFileFull$OFFSET = 124;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD MftBitmapWritesFlushForLogFileFull
     * }
     */
    public static final long MftBitmapWritesFlushForLogFileFull$offset() {
        return MftBitmapWritesFlushForLogFileFull$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD MftBitmapWritesFlushForLogFileFull
     * }
     */
    public static short MftBitmapWritesFlushForLogFileFull(MemorySegment struct) {
        return struct.get(MftBitmapWritesFlushForLogFileFull$LAYOUT, MftBitmapWritesFlushForLogFileFull$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD MftBitmapWritesFlushForLogFileFull
     * }
     */
    public static void MftBitmapWritesFlushForLogFileFull(MemorySegment struct, short fieldValue) {
        struct.set(MftBitmapWritesFlushForLogFileFull$LAYOUT, MftBitmapWritesFlushForLogFileFull$OFFSET, fieldValue);
    }

    private static final OfShort MftBitmapWritesLazyWriter$LAYOUT = (OfShort)$LAYOUT.select(groupElement("MftBitmapWritesLazyWriter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD MftBitmapWritesLazyWriter
     * }
     */
    public static final OfShort MftBitmapWritesLazyWriter$layout() {
        return MftBitmapWritesLazyWriter$LAYOUT;
    }

    private static final long MftBitmapWritesLazyWriter$OFFSET = 126;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD MftBitmapWritesLazyWriter
     * }
     */
    public static final long MftBitmapWritesLazyWriter$offset() {
        return MftBitmapWritesLazyWriter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD MftBitmapWritesLazyWriter
     * }
     */
    public static short MftBitmapWritesLazyWriter(MemorySegment struct) {
        return struct.get(MftBitmapWritesLazyWriter$LAYOUT, MftBitmapWritesLazyWriter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD MftBitmapWritesLazyWriter
     * }
     */
    public static void MftBitmapWritesLazyWriter(MemorySegment struct, short fieldValue) {
        struct.set(MftBitmapWritesLazyWriter$LAYOUT, MftBitmapWritesLazyWriter$OFFSET, fieldValue);
    }

    private static final OfShort MftBitmapWritesUserRequest$LAYOUT = (OfShort)$LAYOUT.select(groupElement("MftBitmapWritesUserRequest"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD MftBitmapWritesUserRequest
     * }
     */
    public static final OfShort MftBitmapWritesUserRequest$layout() {
        return MftBitmapWritesUserRequest$LAYOUT;
    }

    private static final long MftBitmapWritesUserRequest$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD MftBitmapWritesUserRequest
     * }
     */
    public static final long MftBitmapWritesUserRequest$offset() {
        return MftBitmapWritesUserRequest$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD MftBitmapWritesUserRequest
     * }
     */
    public static short MftBitmapWritesUserRequest(MemorySegment struct) {
        return struct.get(MftBitmapWritesUserRequest$LAYOUT, MftBitmapWritesUserRequest$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD MftBitmapWritesUserRequest
     * }
     */
    public static void MftBitmapWritesUserRequest(MemorySegment struct, short fieldValue) {
        struct.set(MftBitmapWritesUserRequest$LAYOUT, MftBitmapWritesUserRequest$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     WORD Write;
     *     WORD Create;
     *     WORD SetInfo;
     *     WORD Flush;
     * }
     * }
     */
    public static class MftBitmapWritesUserLevel {

        MftBitmapWritesUserLevel() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            wgl_h.C_SHORT.withName("Write"),
            wgl_h.C_SHORT.withName("Create"),
            wgl_h.C_SHORT.withName("SetInfo"),
            wgl_h.C_SHORT.withName("Flush")
        ).withName("$anon$11412:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfShort Write$LAYOUT = (OfShort)$LAYOUT.select(groupElement("Write"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * WORD Write
         * }
         */
        public static final OfShort Write$layout() {
            return Write$LAYOUT;
        }

        private static final long Write$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * WORD Write
         * }
         */
        public static final long Write$offset() {
            return Write$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * WORD Write
         * }
         */
        public static short Write(MemorySegment struct) {
            return struct.get(Write$LAYOUT, Write$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * WORD Write
         * }
         */
        public static void Write(MemorySegment struct, short fieldValue) {
            struct.set(Write$LAYOUT, Write$OFFSET, fieldValue);
        }

        private static final OfShort Create$LAYOUT = (OfShort)$LAYOUT.select(groupElement("Create"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * WORD Create
         * }
         */
        public static final OfShort Create$layout() {
            return Create$LAYOUT;
        }

        private static final long Create$OFFSET = 2;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * WORD Create
         * }
         */
        public static final long Create$offset() {
            return Create$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * WORD Create
         * }
         */
        public static short Create(MemorySegment struct) {
            return struct.get(Create$LAYOUT, Create$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * WORD Create
         * }
         */
        public static void Create(MemorySegment struct, short fieldValue) {
            struct.set(Create$LAYOUT, Create$OFFSET, fieldValue);
        }

        private static final OfShort SetInfo$LAYOUT = (OfShort)$LAYOUT.select(groupElement("SetInfo"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * WORD SetInfo
         * }
         */
        public static final OfShort SetInfo$layout() {
            return SetInfo$LAYOUT;
        }

        private static final long SetInfo$OFFSET = 4;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * WORD SetInfo
         * }
         */
        public static final long SetInfo$offset() {
            return SetInfo$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * WORD SetInfo
         * }
         */
        public static short SetInfo(MemorySegment struct) {
            return struct.get(SetInfo$LAYOUT, SetInfo$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * WORD SetInfo
         * }
         */
        public static void SetInfo(MemorySegment struct, short fieldValue) {
            struct.set(SetInfo$LAYOUT, SetInfo$OFFSET, fieldValue);
        }

        private static final OfShort Flush$LAYOUT = (OfShort)$LAYOUT.select(groupElement("Flush"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * WORD Flush
         * }
         */
        public static final OfShort Flush$layout() {
            return Flush$LAYOUT;
        }

        private static final long Flush$OFFSET = 6;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * WORD Flush
         * }
         */
        public static final long Flush$offset() {
            return Flush$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * WORD Flush
         * }
         */
        public static short Flush(MemorySegment struct) {
            return struct.get(Flush$LAYOUT, Flush$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * WORD Flush
         * }
         */
        public static void Flush(MemorySegment struct, short fieldValue) {
            struct.set(Flush$LAYOUT, Flush$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout MftBitmapWritesUserLevel$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("MftBitmapWritesUserLevel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     WORD Write;
     *     WORD Create;
     *     WORD SetInfo;
     *     WORD Flush;
     * } MftBitmapWritesUserLevel
     * }
     */
    public static final GroupLayout MftBitmapWritesUserLevel$layout() {
        return MftBitmapWritesUserLevel$LAYOUT;
    }

    private static final long MftBitmapWritesUserLevel$OFFSET = 130;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     WORD Write;
     *     WORD Create;
     *     WORD SetInfo;
     *     WORD Flush;
     * } MftBitmapWritesUserLevel
     * }
     */
    public static final long MftBitmapWritesUserLevel$offset() {
        return MftBitmapWritesUserLevel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     WORD Write;
     *     WORD Create;
     *     WORD SetInfo;
     *     WORD Flush;
     * } MftBitmapWritesUserLevel
     * }
     */
    public static MemorySegment MftBitmapWritesUserLevel(MemorySegment struct) {
        return struct.asSlice(MftBitmapWritesUserLevel$OFFSET, MftBitmapWritesUserLevel$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     WORD Write;
     *     WORD Create;
     *     WORD SetInfo;
     *     WORD Flush;
     * } MftBitmapWritesUserLevel
     * }
     */
    public static void MftBitmapWritesUserLevel(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, MftBitmapWritesUserLevel$OFFSET, MftBitmapWritesUserLevel$LAYOUT.byteSize());
    }

    private static final OfInt UserIndexReads$LAYOUT = (OfInt)$LAYOUT.select(groupElement("UserIndexReads"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD UserIndexReads
     * }
     */
    public static final OfInt UserIndexReads$layout() {
        return UserIndexReads$LAYOUT;
    }

    private static final long UserIndexReads$OFFSET = 140;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD UserIndexReads
     * }
     */
    public static final long UserIndexReads$offset() {
        return UserIndexReads$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD UserIndexReads
     * }
     */
    public static int UserIndexReads(MemorySegment struct) {
        return struct.get(UserIndexReads$LAYOUT, UserIndexReads$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD UserIndexReads
     * }
     */
    public static void UserIndexReads(MemorySegment struct, int fieldValue) {
        struct.set(UserIndexReads$LAYOUT, UserIndexReads$OFFSET, fieldValue);
    }

    private static final OfInt UserIndexReadBytes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("UserIndexReadBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD UserIndexReadBytes
     * }
     */
    public static final OfInt UserIndexReadBytes$layout() {
        return UserIndexReadBytes$LAYOUT;
    }

    private static final long UserIndexReadBytes$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD UserIndexReadBytes
     * }
     */
    public static final long UserIndexReadBytes$offset() {
        return UserIndexReadBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD UserIndexReadBytes
     * }
     */
    public static int UserIndexReadBytes(MemorySegment struct) {
        return struct.get(UserIndexReadBytes$LAYOUT, UserIndexReadBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD UserIndexReadBytes
     * }
     */
    public static void UserIndexReadBytes(MemorySegment struct, int fieldValue) {
        struct.set(UserIndexReadBytes$LAYOUT, UserIndexReadBytes$OFFSET, fieldValue);
    }

    private static final OfInt UserIndexWrites$LAYOUT = (OfInt)$LAYOUT.select(groupElement("UserIndexWrites"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD UserIndexWrites
     * }
     */
    public static final OfInt UserIndexWrites$layout() {
        return UserIndexWrites$LAYOUT;
    }

    private static final long UserIndexWrites$OFFSET = 148;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD UserIndexWrites
     * }
     */
    public static final long UserIndexWrites$offset() {
        return UserIndexWrites$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD UserIndexWrites
     * }
     */
    public static int UserIndexWrites(MemorySegment struct) {
        return struct.get(UserIndexWrites$LAYOUT, UserIndexWrites$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD UserIndexWrites
     * }
     */
    public static void UserIndexWrites(MemorySegment struct, int fieldValue) {
        struct.set(UserIndexWrites$LAYOUT, UserIndexWrites$OFFSET, fieldValue);
    }

    private static final OfInt UserIndexWriteBytes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("UserIndexWriteBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD UserIndexWriteBytes
     * }
     */
    public static final OfInt UserIndexWriteBytes$layout() {
        return UserIndexWriteBytes$LAYOUT;
    }

    private static final long UserIndexWriteBytes$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD UserIndexWriteBytes
     * }
     */
    public static final long UserIndexWriteBytes$offset() {
        return UserIndexWriteBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD UserIndexWriteBytes
     * }
     */
    public static int UserIndexWriteBytes(MemorySegment struct) {
        return struct.get(UserIndexWriteBytes$LAYOUT, UserIndexWriteBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD UserIndexWriteBytes
     * }
     */
    public static void UserIndexWriteBytes(MemorySegment struct, int fieldValue) {
        struct.set(UserIndexWriteBytes$LAYOUT, UserIndexWriteBytes$OFFSET, fieldValue);
    }

    private static final OfInt LogFileReads$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LogFileReads"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD LogFileReads
     * }
     */
    public static final OfInt LogFileReads$layout() {
        return LogFileReads$LAYOUT;
    }

    private static final long LogFileReads$OFFSET = 156;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD LogFileReads
     * }
     */
    public static final long LogFileReads$offset() {
        return LogFileReads$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD LogFileReads
     * }
     */
    public static int LogFileReads(MemorySegment struct) {
        return struct.get(LogFileReads$LAYOUT, LogFileReads$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD LogFileReads
     * }
     */
    public static void LogFileReads(MemorySegment struct, int fieldValue) {
        struct.set(LogFileReads$LAYOUT, LogFileReads$OFFSET, fieldValue);
    }

    private static final OfInt LogFileReadBytes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LogFileReadBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD LogFileReadBytes
     * }
     */
    public static final OfInt LogFileReadBytes$layout() {
        return LogFileReadBytes$LAYOUT;
    }

    private static final long LogFileReadBytes$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD LogFileReadBytes
     * }
     */
    public static final long LogFileReadBytes$offset() {
        return LogFileReadBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD LogFileReadBytes
     * }
     */
    public static int LogFileReadBytes(MemorySegment struct) {
        return struct.get(LogFileReadBytes$LAYOUT, LogFileReadBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD LogFileReadBytes
     * }
     */
    public static void LogFileReadBytes(MemorySegment struct, int fieldValue) {
        struct.set(LogFileReadBytes$LAYOUT, LogFileReadBytes$OFFSET, fieldValue);
    }

    private static final OfInt LogFileWrites$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LogFileWrites"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD LogFileWrites
     * }
     */
    public static final OfInt LogFileWrites$layout() {
        return LogFileWrites$LAYOUT;
    }

    private static final long LogFileWrites$OFFSET = 164;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD LogFileWrites
     * }
     */
    public static final long LogFileWrites$offset() {
        return LogFileWrites$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD LogFileWrites
     * }
     */
    public static int LogFileWrites(MemorySegment struct) {
        return struct.get(LogFileWrites$LAYOUT, LogFileWrites$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD LogFileWrites
     * }
     */
    public static void LogFileWrites(MemorySegment struct, int fieldValue) {
        struct.set(LogFileWrites$LAYOUT, LogFileWrites$OFFSET, fieldValue);
    }

    private static final OfInt LogFileWriteBytes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LogFileWriteBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD LogFileWriteBytes
     * }
     */
    public static final OfInt LogFileWriteBytes$layout() {
        return LogFileWriteBytes$LAYOUT;
    }

    private static final long LogFileWriteBytes$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD LogFileWriteBytes
     * }
     */
    public static final long LogFileWriteBytes$offset() {
        return LogFileWriteBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD LogFileWriteBytes
     * }
     */
    public static int LogFileWriteBytes(MemorySegment struct) {
        return struct.get(LogFileWriteBytes$LAYOUT, LogFileWriteBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD LogFileWriteBytes
     * }
     */
    public static void LogFileWriteBytes(MemorySegment struct, int fieldValue) {
        struct.set(LogFileWriteBytes$LAYOUT, LogFileWriteBytes$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     DWORD Calls;
     *     DWORD Clusters;
     *     DWORD Hints;
     *     DWORD RunsReturned;
     *     DWORD HintsHonored;
     *     DWORD HintsClusters;
     *     DWORD Cache;
     *     DWORD CacheClusters;
     *     DWORD CacheMiss;
     *     DWORD CacheMissClusters;
     * }
     * }
     */
    public static class Allocate {

        Allocate() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            wgl_h.C_LONG.withName("Calls"),
            wgl_h.C_LONG.withName("Clusters"),
            wgl_h.C_LONG.withName("Hints"),
            wgl_h.C_LONG.withName("RunsReturned"),
            wgl_h.C_LONG.withName("HintsHonored"),
            wgl_h.C_LONG.withName("HintsClusters"),
            wgl_h.C_LONG.withName("Cache"),
            wgl_h.C_LONG.withName("CacheClusters"),
            wgl_h.C_LONG.withName("CacheMiss"),
            wgl_h.C_LONG.withName("CacheMissClusters")
        ).withName("$anon$11433:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt Calls$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Calls"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD Calls
         * }
         */
        public static final OfInt Calls$layout() {
            return Calls$LAYOUT;
        }

        private static final long Calls$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD Calls
         * }
         */
        public static final long Calls$offset() {
            return Calls$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD Calls
         * }
         */
        public static int Calls(MemorySegment struct) {
            return struct.get(Calls$LAYOUT, Calls$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD Calls
         * }
         */
        public static void Calls(MemorySegment struct, int fieldValue) {
            struct.set(Calls$LAYOUT, Calls$OFFSET, fieldValue);
        }

        private static final OfInt Clusters$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Clusters"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD Clusters
         * }
         */
        public static final OfInt Clusters$layout() {
            return Clusters$LAYOUT;
        }

        private static final long Clusters$OFFSET = 4;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD Clusters
         * }
         */
        public static final long Clusters$offset() {
            return Clusters$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD Clusters
         * }
         */
        public static int Clusters(MemorySegment struct) {
            return struct.get(Clusters$LAYOUT, Clusters$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD Clusters
         * }
         */
        public static void Clusters(MemorySegment struct, int fieldValue) {
            struct.set(Clusters$LAYOUT, Clusters$OFFSET, fieldValue);
        }

        private static final OfInt Hints$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Hints"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD Hints
         * }
         */
        public static final OfInt Hints$layout() {
            return Hints$LAYOUT;
        }

        private static final long Hints$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD Hints
         * }
         */
        public static final long Hints$offset() {
            return Hints$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD Hints
         * }
         */
        public static int Hints(MemorySegment struct) {
            return struct.get(Hints$LAYOUT, Hints$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD Hints
         * }
         */
        public static void Hints(MemorySegment struct, int fieldValue) {
            struct.set(Hints$LAYOUT, Hints$OFFSET, fieldValue);
        }

        private static final OfInt RunsReturned$LAYOUT = (OfInt)$LAYOUT.select(groupElement("RunsReturned"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD RunsReturned
         * }
         */
        public static final OfInt RunsReturned$layout() {
            return RunsReturned$LAYOUT;
        }

        private static final long RunsReturned$OFFSET = 12;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD RunsReturned
         * }
         */
        public static final long RunsReturned$offset() {
            return RunsReturned$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD RunsReturned
         * }
         */
        public static int RunsReturned(MemorySegment struct) {
            return struct.get(RunsReturned$LAYOUT, RunsReturned$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD RunsReturned
         * }
         */
        public static void RunsReturned(MemorySegment struct, int fieldValue) {
            struct.set(RunsReturned$LAYOUT, RunsReturned$OFFSET, fieldValue);
        }

        private static final OfInt HintsHonored$LAYOUT = (OfInt)$LAYOUT.select(groupElement("HintsHonored"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD HintsHonored
         * }
         */
        public static final OfInt HintsHonored$layout() {
            return HintsHonored$LAYOUT;
        }

        private static final long HintsHonored$OFFSET = 16;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD HintsHonored
         * }
         */
        public static final long HintsHonored$offset() {
            return HintsHonored$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD HintsHonored
         * }
         */
        public static int HintsHonored(MemorySegment struct) {
            return struct.get(HintsHonored$LAYOUT, HintsHonored$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD HintsHonored
         * }
         */
        public static void HintsHonored(MemorySegment struct, int fieldValue) {
            struct.set(HintsHonored$LAYOUT, HintsHonored$OFFSET, fieldValue);
        }

        private static final OfInt HintsClusters$LAYOUT = (OfInt)$LAYOUT.select(groupElement("HintsClusters"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD HintsClusters
         * }
         */
        public static final OfInt HintsClusters$layout() {
            return HintsClusters$LAYOUT;
        }

        private static final long HintsClusters$OFFSET = 20;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD HintsClusters
         * }
         */
        public static final long HintsClusters$offset() {
            return HintsClusters$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD HintsClusters
         * }
         */
        public static int HintsClusters(MemorySegment struct) {
            return struct.get(HintsClusters$LAYOUT, HintsClusters$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD HintsClusters
         * }
         */
        public static void HintsClusters(MemorySegment struct, int fieldValue) {
            struct.set(HintsClusters$LAYOUT, HintsClusters$OFFSET, fieldValue);
        }

        private static final OfInt Cache$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Cache"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD Cache
         * }
         */
        public static final OfInt Cache$layout() {
            return Cache$LAYOUT;
        }

        private static final long Cache$OFFSET = 24;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD Cache
         * }
         */
        public static final long Cache$offset() {
            return Cache$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD Cache
         * }
         */
        public static int Cache(MemorySegment struct) {
            return struct.get(Cache$LAYOUT, Cache$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD Cache
         * }
         */
        public static void Cache(MemorySegment struct, int fieldValue) {
            struct.set(Cache$LAYOUT, Cache$OFFSET, fieldValue);
        }

        private static final OfInt CacheClusters$LAYOUT = (OfInt)$LAYOUT.select(groupElement("CacheClusters"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD CacheClusters
         * }
         */
        public static final OfInt CacheClusters$layout() {
            return CacheClusters$LAYOUT;
        }

        private static final long CacheClusters$OFFSET = 28;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD CacheClusters
         * }
         */
        public static final long CacheClusters$offset() {
            return CacheClusters$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD CacheClusters
         * }
         */
        public static int CacheClusters(MemorySegment struct) {
            return struct.get(CacheClusters$LAYOUT, CacheClusters$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD CacheClusters
         * }
         */
        public static void CacheClusters(MemorySegment struct, int fieldValue) {
            struct.set(CacheClusters$LAYOUT, CacheClusters$OFFSET, fieldValue);
        }

        private static final OfInt CacheMiss$LAYOUT = (OfInt)$LAYOUT.select(groupElement("CacheMiss"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD CacheMiss
         * }
         */
        public static final OfInt CacheMiss$layout() {
            return CacheMiss$LAYOUT;
        }

        private static final long CacheMiss$OFFSET = 32;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD CacheMiss
         * }
         */
        public static final long CacheMiss$offset() {
            return CacheMiss$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD CacheMiss
         * }
         */
        public static int CacheMiss(MemorySegment struct) {
            return struct.get(CacheMiss$LAYOUT, CacheMiss$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD CacheMiss
         * }
         */
        public static void CacheMiss(MemorySegment struct, int fieldValue) {
            struct.set(CacheMiss$LAYOUT, CacheMiss$OFFSET, fieldValue);
        }

        private static final OfInt CacheMissClusters$LAYOUT = (OfInt)$LAYOUT.select(groupElement("CacheMissClusters"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD CacheMissClusters
         * }
         */
        public static final OfInt CacheMissClusters$layout() {
            return CacheMissClusters$LAYOUT;
        }

        private static final long CacheMissClusters$OFFSET = 36;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD CacheMissClusters
         * }
         */
        public static final long CacheMissClusters$offset() {
            return CacheMissClusters$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD CacheMissClusters
         * }
         */
        public static int CacheMissClusters(MemorySegment struct) {
            return struct.get(CacheMissClusters$LAYOUT, CacheMissClusters$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD CacheMissClusters
         * }
         */
        public static void CacheMissClusters(MemorySegment struct, int fieldValue) {
            struct.set(CacheMissClusters$LAYOUT, CacheMissClusters$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout Allocate$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Allocate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD Calls;
     *     DWORD Clusters;
     *     DWORD Hints;
     *     DWORD RunsReturned;
     *     DWORD HintsHonored;
     *     DWORD HintsClusters;
     *     DWORD Cache;
     *     DWORD CacheClusters;
     *     DWORD CacheMiss;
     *     DWORD CacheMissClusters;
     * } Allocate
     * }
     */
    public static final GroupLayout Allocate$layout() {
        return Allocate$LAYOUT;
    }

    private static final long Allocate$OFFSET = 172;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD Calls;
     *     DWORD Clusters;
     *     DWORD Hints;
     *     DWORD RunsReturned;
     *     DWORD HintsHonored;
     *     DWORD HintsClusters;
     *     DWORD Cache;
     *     DWORD CacheClusters;
     *     DWORD CacheMiss;
     *     DWORD CacheMissClusters;
     * } Allocate
     * }
     */
    public static final long Allocate$offset() {
        return Allocate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD Calls;
     *     DWORD Clusters;
     *     DWORD Hints;
     *     DWORD RunsReturned;
     *     DWORD HintsHonored;
     *     DWORD HintsClusters;
     *     DWORD Cache;
     *     DWORD CacheClusters;
     *     DWORD CacheMiss;
     *     DWORD CacheMissClusters;
     * } Allocate
     * }
     */
    public static MemorySegment Allocate(MemorySegment struct) {
        return struct.asSlice(Allocate$OFFSET, Allocate$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD Calls;
     *     DWORD Clusters;
     *     DWORD Hints;
     *     DWORD RunsReturned;
     *     DWORD HintsHonored;
     *     DWORD HintsClusters;
     *     DWORD Cache;
     *     DWORD CacheClusters;
     *     DWORD CacheMiss;
     *     DWORD CacheMissClusters;
     * } Allocate
     * }
     */
    public static void Allocate(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Allocate$OFFSET, Allocate$LAYOUT.byteSize());
    }

    private static final OfInt DiskResourcesExhausted$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DiskResourcesExhausted"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD DiskResourcesExhausted
     * }
     */
    public static final OfInt DiskResourcesExhausted$layout() {
        return DiskResourcesExhausted$LAYOUT;
    }

    private static final long DiskResourcesExhausted$OFFSET = 212;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD DiskResourcesExhausted
     * }
     */
    public static final long DiskResourcesExhausted$offset() {
        return DiskResourcesExhausted$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD DiskResourcesExhausted
     * }
     */
    public static int DiskResourcesExhausted(MemorySegment struct) {
        return struct.get(DiskResourcesExhausted$LAYOUT, DiskResourcesExhausted$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD DiskResourcesExhausted
     * }
     */
    public static void DiskResourcesExhausted(MemorySegment struct, int fieldValue) {
        struct.set(DiskResourcesExhausted$LAYOUT, DiskResourcesExhausted$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

