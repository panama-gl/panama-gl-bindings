// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * union _RPC_ASYNC_NOTIFICATION_INFO {
 *     struct {
 *         PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
 *         HANDLE hThread;
 *     } APC;
 *     struct {
 *         HANDLE hIOPort;
 *         DWORD dwNumberOfBytesTransferred;
 *         DWORD_PTR dwCompletionKey;
 *         LPOVERLAPPED lpOverlapped;
 *     } IOC;
 *     struct {
 *         HWND hWnd;
 *         UINT Msg;
 *     } HWND;
 *     HANDLE hEvent;
 *     PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
 * }
 * }
 */
public class _RPC_ASYNC_NOTIFICATION_INFO {

    _RPC_ASYNC_NOTIFICATION_INFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
        _RPC_ASYNC_NOTIFICATION_INFO.APC.layout().withName("APC"),
        _RPC_ASYNC_NOTIFICATION_INFO.IOC.layout().withName("IOC"),
        _RPC_ASYNC_NOTIFICATION_INFO.HWND.layout().withName("HWND"),
        wgl_h.C_POINTER.withName("hEvent"),
        wgl_h.C_POINTER.withName("NotificationRoutine")
    ).withName("_RPC_ASYNC_NOTIFICATION_INFO");

    /**
     * The layout of this union
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
     *     HANDLE hThread;
     * }
     * }
     */
    public static class APC {

        APC() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            wgl_h.C_POINTER.withName("NotificationRoutine"),
            wgl_h.C_POINTER.withName("hThread")
        ).withName("$anon$106:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final AddressLayout NotificationRoutine$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("NotificationRoutine"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine
         * }
         */
        public static final AddressLayout NotificationRoutine$layout() {
            return NotificationRoutine$LAYOUT;
        }

        private static final long NotificationRoutine$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine
         * }
         */
        public static final long NotificationRoutine$offset() {
            return NotificationRoutine$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine
         * }
         */
        public static MemorySegment NotificationRoutine(MemorySegment struct) {
            return struct.get(NotificationRoutine$LAYOUT, NotificationRoutine$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine
         * }
         */
        public static void NotificationRoutine(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(NotificationRoutine$LAYOUT, NotificationRoutine$OFFSET, fieldValue);
        }

        private static final AddressLayout hThread$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hThread"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * HANDLE hThread
         * }
         */
        public static final AddressLayout hThread$layout() {
            return hThread$LAYOUT;
        }

        private static final long hThread$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * HANDLE hThread
         * }
         */
        public static final long hThread$offset() {
            return hThread$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * HANDLE hThread
         * }
         */
        public static MemorySegment hThread(MemorySegment struct) {
            return struct.get(hThread$LAYOUT, hThread$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * HANDLE hThread
         * }
         */
        public static void hThread(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(hThread$LAYOUT, hThread$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout APC$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("APC"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
     *     HANDLE hThread;
     * } APC
     * }
     */
    public static final GroupLayout APC$layout() {
        return APC$LAYOUT;
    }

    private static final long APC$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
     *     HANDLE hThread;
     * } APC
     * }
     */
    public static final long APC$offset() {
        return APC$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
     *     HANDLE hThread;
     * } APC
     * }
     */
    public static MemorySegment APC(MemorySegment union) {
        return union.asSlice(APC$OFFSET, APC$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
     *     HANDLE hThread;
     * } APC
     * }
     */
    public static void APC(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, APC$OFFSET, APC$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     HANDLE hIOPort;
     *     DWORD dwNumberOfBytesTransferred;
     *     DWORD_PTR dwCompletionKey;
     *     LPOVERLAPPED lpOverlapped;
     * }
     * }
     */
    public static class IOC {

        IOC() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            wgl_h.C_POINTER.withName("hIOPort"),
            wgl_h.C_LONG.withName("dwNumberOfBytesTransferred"),
            MemoryLayout.paddingLayout(4),
            wgl_h.C_LONG_LONG.withName("dwCompletionKey"),
            wgl_h.C_POINTER.withName("lpOverlapped")
        ).withName("$anon$117:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final AddressLayout hIOPort$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hIOPort"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * HANDLE hIOPort
         * }
         */
        public static final AddressLayout hIOPort$layout() {
            return hIOPort$LAYOUT;
        }

        private static final long hIOPort$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * HANDLE hIOPort
         * }
         */
        public static final long hIOPort$offset() {
            return hIOPort$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * HANDLE hIOPort
         * }
         */
        public static MemorySegment hIOPort(MemorySegment struct) {
            return struct.get(hIOPort$LAYOUT, hIOPort$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * HANDLE hIOPort
         * }
         */
        public static void hIOPort(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(hIOPort$LAYOUT, hIOPort$OFFSET, fieldValue);
        }

        private static final OfInt dwNumberOfBytesTransferred$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwNumberOfBytesTransferred"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD dwNumberOfBytesTransferred
         * }
         */
        public static final OfInt dwNumberOfBytesTransferred$layout() {
            return dwNumberOfBytesTransferred$LAYOUT;
        }

        private static final long dwNumberOfBytesTransferred$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD dwNumberOfBytesTransferred
         * }
         */
        public static final long dwNumberOfBytesTransferred$offset() {
            return dwNumberOfBytesTransferred$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD dwNumberOfBytesTransferred
         * }
         */
        public static int dwNumberOfBytesTransferred(MemorySegment struct) {
            return struct.get(dwNumberOfBytesTransferred$LAYOUT, dwNumberOfBytesTransferred$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD dwNumberOfBytesTransferred
         * }
         */
        public static void dwNumberOfBytesTransferred(MemorySegment struct, int fieldValue) {
            struct.set(dwNumberOfBytesTransferred$LAYOUT, dwNumberOfBytesTransferred$OFFSET, fieldValue);
        }

        private static final OfLong dwCompletionKey$LAYOUT = (OfLong)$LAYOUT.select(groupElement("dwCompletionKey"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD_PTR dwCompletionKey
         * }
         */
        public static final OfLong dwCompletionKey$layout() {
            return dwCompletionKey$LAYOUT;
        }

        private static final long dwCompletionKey$OFFSET = 16;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD_PTR dwCompletionKey
         * }
         */
        public static final long dwCompletionKey$offset() {
            return dwCompletionKey$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD_PTR dwCompletionKey
         * }
         */
        public static long dwCompletionKey(MemorySegment struct) {
            return struct.get(dwCompletionKey$LAYOUT, dwCompletionKey$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD_PTR dwCompletionKey
         * }
         */
        public static void dwCompletionKey(MemorySegment struct, long fieldValue) {
            struct.set(dwCompletionKey$LAYOUT, dwCompletionKey$OFFSET, fieldValue);
        }

        private static final AddressLayout lpOverlapped$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lpOverlapped"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * LPOVERLAPPED lpOverlapped
         * }
         */
        public static final AddressLayout lpOverlapped$layout() {
            return lpOverlapped$LAYOUT;
        }

        private static final long lpOverlapped$OFFSET = 24;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * LPOVERLAPPED lpOverlapped
         * }
         */
        public static final long lpOverlapped$offset() {
            return lpOverlapped$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * LPOVERLAPPED lpOverlapped
         * }
         */
        public static MemorySegment lpOverlapped(MemorySegment struct) {
            return struct.get(lpOverlapped$LAYOUT, lpOverlapped$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * LPOVERLAPPED lpOverlapped
         * }
         */
        public static void lpOverlapped(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(lpOverlapped$LAYOUT, lpOverlapped$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout IOC$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("IOC"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     HANDLE hIOPort;
     *     DWORD dwNumberOfBytesTransferred;
     *     DWORD_PTR dwCompletionKey;
     *     LPOVERLAPPED lpOverlapped;
     * } IOC
     * }
     */
    public static final GroupLayout IOC$layout() {
        return IOC$LAYOUT;
    }

    private static final long IOC$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     HANDLE hIOPort;
     *     DWORD dwNumberOfBytesTransferred;
     *     DWORD_PTR dwCompletionKey;
     *     LPOVERLAPPED lpOverlapped;
     * } IOC
     * }
     */
    public static final long IOC$offset() {
        return IOC$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     HANDLE hIOPort;
     *     DWORD dwNumberOfBytesTransferred;
     *     DWORD_PTR dwCompletionKey;
     *     LPOVERLAPPED lpOverlapped;
     * } IOC
     * }
     */
    public static MemorySegment IOC(MemorySegment union) {
        return union.asSlice(IOC$OFFSET, IOC$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     HANDLE hIOPort;
     *     DWORD dwNumberOfBytesTransferred;
     *     DWORD_PTR dwCompletionKey;
     *     LPOVERLAPPED lpOverlapped;
     * } IOC
     * }
     */
    public static void IOC(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, IOC$OFFSET, IOC$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     HWND hWnd;
     *     UINT Msg;
     * }
     * }
     */
    public static class HWND {

        HWND() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            wgl_h.C_POINTER.withName("hWnd"),
            wgl_h.C_INT.withName("Msg"),
            MemoryLayout.paddingLayout(4)
        ).withName("$anon$129:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final AddressLayout hWnd$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hWnd"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * HWND hWnd
         * }
         */
        public static final AddressLayout hWnd$layout() {
            return hWnd$LAYOUT;
        }

        private static final long hWnd$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * HWND hWnd
         * }
         */
        public static final long hWnd$offset() {
            return hWnd$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * HWND hWnd
         * }
         */
        public static MemorySegment hWnd(MemorySegment struct) {
            return struct.get(hWnd$LAYOUT, hWnd$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * HWND hWnd
         * }
         */
        public static void hWnd(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(hWnd$LAYOUT, hWnd$OFFSET, fieldValue);
        }

        private static final OfInt Msg$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Msg"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * UINT Msg
         * }
         */
        public static final OfInt Msg$layout() {
            return Msg$LAYOUT;
        }

        private static final long Msg$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * UINT Msg
         * }
         */
        public static final long Msg$offset() {
            return Msg$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * UINT Msg
         * }
         */
        public static int Msg(MemorySegment struct) {
            return struct.get(Msg$LAYOUT, Msg$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * UINT Msg
         * }
         */
        public static void Msg(MemorySegment struct, int fieldValue) {
            struct.set(Msg$LAYOUT, Msg$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout HWND$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("HWND"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     HWND hWnd;
     *     UINT Msg;
     * } HWND
     * }
     */
    public static final GroupLayout HWND$layout() {
        return HWND$LAYOUT;
    }

    private static final long HWND$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     HWND hWnd;
     *     UINT Msg;
     * } HWND
     * }
     */
    public static final long HWND$offset() {
        return HWND$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     HWND hWnd;
     *     UINT Msg;
     * } HWND
     * }
     */
    public static MemorySegment HWND(MemorySegment union) {
        return union.asSlice(HWND$OFFSET, HWND$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     HWND hWnd;
     *     UINT Msg;
     * } HWND
     * }
     */
    public static void HWND(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, HWND$OFFSET, HWND$LAYOUT.byteSize());
    }

    private static final AddressLayout hEvent$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hEvent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HANDLE hEvent
     * }
     */
    public static final AddressLayout hEvent$layout() {
        return hEvent$LAYOUT;
    }

    private static final long hEvent$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HANDLE hEvent
     * }
     */
    public static final long hEvent$offset() {
        return hEvent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HANDLE hEvent
     * }
     */
    public static MemorySegment hEvent(MemorySegment union) {
        return union.get(hEvent$LAYOUT, hEvent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HANDLE hEvent
     * }
     */
    public static void hEvent(MemorySegment union, MemorySegment fieldValue) {
        union.set(hEvent$LAYOUT, hEvent$OFFSET, fieldValue);
    }

    private static final AddressLayout NotificationRoutine$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("NotificationRoutine"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine
     * }
     */
    public static final AddressLayout NotificationRoutine$layout() {
        return NotificationRoutine$LAYOUT;
    }

    private static final long NotificationRoutine$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine
     * }
     */
    public static final long NotificationRoutine$offset() {
        return NotificationRoutine$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine
     * }
     */
    public static MemorySegment NotificationRoutine(MemorySegment union) {
        return union.get(NotificationRoutine$LAYOUT, NotificationRoutine$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine
     * }
     */
    public static void NotificationRoutine(MemorySegment union, MemorySegment fieldValue) {
        union.set(NotificationRoutine$LAYOUT, NotificationRoutine$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this union
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

