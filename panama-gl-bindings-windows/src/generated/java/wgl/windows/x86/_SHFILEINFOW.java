// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _SHFILEINFOW {
 *     HICON hIcon;
 *     int iIcon;
 *     DWORD dwAttributes;
 *     WCHAR szDisplayName[260];
 *     WCHAR szTypeName[80];
 * }
 * }
 */
public class _SHFILEINFOW {

    _SHFILEINFOW() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("hIcon"),
        wgl_h.C_INT.withName("iIcon"),
        wgl_h.C_LONG.withName("dwAttributes"),
        MemoryLayout.sequenceLayout(260, wgl_h.C_SHORT).withName("szDisplayName"),
        MemoryLayout.sequenceLayout(80, wgl_h.C_SHORT).withName("szTypeName")
    ).withName("_SHFILEINFOW");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout hIcon$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hIcon"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HICON hIcon
     * }
     */
    public static final AddressLayout hIcon$layout() {
        return hIcon$LAYOUT;
    }

    private static final long hIcon$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HICON hIcon
     * }
     */
    public static final long hIcon$offset() {
        return hIcon$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HICON hIcon
     * }
     */
    public static MemorySegment hIcon(MemorySegment struct) {
        return struct.get(hIcon$LAYOUT, hIcon$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HICON hIcon
     * }
     */
    public static void hIcon(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hIcon$LAYOUT, hIcon$OFFSET, fieldValue);
    }

    private static final OfInt iIcon$LAYOUT = (OfInt)$LAYOUT.select(groupElement("iIcon"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int iIcon
     * }
     */
    public static final OfInt iIcon$layout() {
        return iIcon$LAYOUT;
    }

    private static final long iIcon$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int iIcon
     * }
     */
    public static final long iIcon$offset() {
        return iIcon$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int iIcon
     * }
     */
    public static int iIcon(MemorySegment struct) {
        return struct.get(iIcon$LAYOUT, iIcon$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int iIcon
     * }
     */
    public static void iIcon(MemorySegment struct, int fieldValue) {
        struct.set(iIcon$LAYOUT, iIcon$OFFSET, fieldValue);
    }

    private static final OfInt dwAttributes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwAttributes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwAttributes
     * }
     */
    public static final OfInt dwAttributes$layout() {
        return dwAttributes$LAYOUT;
    }

    private static final long dwAttributes$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwAttributes
     * }
     */
    public static final long dwAttributes$offset() {
        return dwAttributes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwAttributes
     * }
     */
    public static int dwAttributes(MemorySegment struct) {
        return struct.get(dwAttributes$LAYOUT, dwAttributes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwAttributes
     * }
     */
    public static void dwAttributes(MemorySegment struct, int fieldValue) {
        struct.set(dwAttributes$LAYOUT, dwAttributes$OFFSET, fieldValue);
    }

    private static final SequenceLayout szDisplayName$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("szDisplayName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WCHAR szDisplayName[260]
     * }
     */
    public static final SequenceLayout szDisplayName$layout() {
        return szDisplayName$LAYOUT;
    }

    private static final long szDisplayName$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WCHAR szDisplayName[260]
     * }
     */
    public static final long szDisplayName$offset() {
        return szDisplayName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WCHAR szDisplayName[260]
     * }
     */
    public static MemorySegment szDisplayName(MemorySegment struct) {
        return struct.asSlice(szDisplayName$OFFSET, szDisplayName$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WCHAR szDisplayName[260]
     * }
     */
    public static void szDisplayName(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, szDisplayName$OFFSET, szDisplayName$LAYOUT.byteSize());
    }

    private static long[] szDisplayName$DIMS = { 260 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * WCHAR szDisplayName[260]
     * }
     */
    public static long[] szDisplayName$dimensions() {
        return szDisplayName$DIMS;
    }
    private static final VarHandle szDisplayName$ELEM_HANDLE = szDisplayName$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * WCHAR szDisplayName[260]
     * }
     */
    public static short szDisplayName(MemorySegment struct, long index0) {
        return (short)szDisplayName$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * WCHAR szDisplayName[260]
     * }
     */
    public static void szDisplayName(MemorySegment struct, long index0, short fieldValue) {
        szDisplayName$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout szTypeName$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("szTypeName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WCHAR szTypeName[80]
     * }
     */
    public static final SequenceLayout szTypeName$layout() {
        return szTypeName$LAYOUT;
    }

    private static final long szTypeName$OFFSET = 536;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WCHAR szTypeName[80]
     * }
     */
    public static final long szTypeName$offset() {
        return szTypeName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WCHAR szTypeName[80]
     * }
     */
    public static MemorySegment szTypeName(MemorySegment struct) {
        return struct.asSlice(szTypeName$OFFSET, szTypeName$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WCHAR szTypeName[80]
     * }
     */
    public static void szTypeName(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, szTypeName$OFFSET, szTypeName$LAYOUT.byteSize());
    }

    private static long[] szTypeName$DIMS = { 80 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * WCHAR szTypeName[80]
     * }
     */
    public static long[] szTypeName$dimensions() {
        return szTypeName$DIMS;
    }
    private static final VarHandle szTypeName$ELEM_HANDLE = szTypeName$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * WCHAR szTypeName[80]
     * }
     */
    public static short szTypeName(MemorySegment struct, long index0) {
        return (short)szTypeName$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * WCHAR szTypeName[80]
     * }
     */
    public static void szTypeName(MemorySegment struct, long index0, short fieldValue) {
        szTypeName$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

