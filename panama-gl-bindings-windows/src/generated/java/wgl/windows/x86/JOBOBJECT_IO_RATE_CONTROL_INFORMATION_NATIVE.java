// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE {
 *     LONG64 MaxIops;
 *     LONG64 MaxBandwidth;
 *     LONG64 ReservationIops;
 *     PWSTR VolumeName;
 *     DWORD BaseIoSize;
 *     JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags;
 *     WORD VolumeNameLength;
 * }
 * }
 */
public class JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE {

    JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG_LONG.withName("MaxIops"),
        wgl_h.C_LONG_LONG.withName("MaxBandwidth"),
        wgl_h.C_LONG_LONG.withName("ReservationIops"),
        wgl_h.C_POINTER.withName("VolumeName"),
        wgl_h.C_LONG.withName("BaseIoSize"),
        wgl_h.C_INT.withName("ControlFlags"),
        wgl_h.C_SHORT.withName("VolumeNameLength"),
        MemoryLayout.paddingLayout(6)
    ).withName("JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong MaxIops$LAYOUT = (OfLong)$LAYOUT.select(groupElement("MaxIops"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LONG64 MaxIops
     * }
     */
    public static final OfLong MaxIops$layout() {
        return MaxIops$LAYOUT;
    }

    private static final long MaxIops$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LONG64 MaxIops
     * }
     */
    public static final long MaxIops$offset() {
        return MaxIops$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LONG64 MaxIops
     * }
     */
    public static long MaxIops(MemorySegment struct) {
        return struct.get(MaxIops$LAYOUT, MaxIops$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LONG64 MaxIops
     * }
     */
    public static void MaxIops(MemorySegment struct, long fieldValue) {
        struct.set(MaxIops$LAYOUT, MaxIops$OFFSET, fieldValue);
    }

    private static final OfLong MaxBandwidth$LAYOUT = (OfLong)$LAYOUT.select(groupElement("MaxBandwidth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LONG64 MaxBandwidth
     * }
     */
    public static final OfLong MaxBandwidth$layout() {
        return MaxBandwidth$LAYOUT;
    }

    private static final long MaxBandwidth$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LONG64 MaxBandwidth
     * }
     */
    public static final long MaxBandwidth$offset() {
        return MaxBandwidth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LONG64 MaxBandwidth
     * }
     */
    public static long MaxBandwidth(MemorySegment struct) {
        return struct.get(MaxBandwidth$LAYOUT, MaxBandwidth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LONG64 MaxBandwidth
     * }
     */
    public static void MaxBandwidth(MemorySegment struct, long fieldValue) {
        struct.set(MaxBandwidth$LAYOUT, MaxBandwidth$OFFSET, fieldValue);
    }

    private static final OfLong ReservationIops$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ReservationIops"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LONG64 ReservationIops
     * }
     */
    public static final OfLong ReservationIops$layout() {
        return ReservationIops$LAYOUT;
    }

    private static final long ReservationIops$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LONG64 ReservationIops
     * }
     */
    public static final long ReservationIops$offset() {
        return ReservationIops$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LONG64 ReservationIops
     * }
     */
    public static long ReservationIops(MemorySegment struct) {
        return struct.get(ReservationIops$LAYOUT, ReservationIops$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LONG64 ReservationIops
     * }
     */
    public static void ReservationIops(MemorySegment struct, long fieldValue) {
        struct.set(ReservationIops$LAYOUT, ReservationIops$OFFSET, fieldValue);
    }

    private static final AddressLayout VolumeName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("VolumeName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PWSTR VolumeName
     * }
     */
    public static final AddressLayout VolumeName$layout() {
        return VolumeName$LAYOUT;
    }

    private static final long VolumeName$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PWSTR VolumeName
     * }
     */
    public static final long VolumeName$offset() {
        return VolumeName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PWSTR VolumeName
     * }
     */
    public static MemorySegment VolumeName(MemorySegment struct) {
        return struct.get(VolumeName$LAYOUT, VolumeName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PWSTR VolumeName
     * }
     */
    public static void VolumeName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(VolumeName$LAYOUT, VolumeName$OFFSET, fieldValue);
    }

    private static final OfInt BaseIoSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BaseIoSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD BaseIoSize
     * }
     */
    public static final OfInt BaseIoSize$layout() {
        return BaseIoSize$LAYOUT;
    }

    private static final long BaseIoSize$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD BaseIoSize
     * }
     */
    public static final long BaseIoSize$offset() {
        return BaseIoSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD BaseIoSize
     * }
     */
    public static int BaseIoSize(MemorySegment struct) {
        return struct.get(BaseIoSize$LAYOUT, BaseIoSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD BaseIoSize
     * }
     */
    public static void BaseIoSize(MemorySegment struct, int fieldValue) {
        struct.set(BaseIoSize$LAYOUT, BaseIoSize$OFFSET, fieldValue);
    }

    private static final OfInt ControlFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ControlFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags
     * }
     */
    public static final OfInt ControlFlags$layout() {
        return ControlFlags$LAYOUT;
    }

    private static final long ControlFlags$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags
     * }
     */
    public static final long ControlFlags$offset() {
        return ControlFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags
     * }
     */
    public static int ControlFlags(MemorySegment struct) {
        return struct.get(ControlFlags$LAYOUT, ControlFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags
     * }
     */
    public static void ControlFlags(MemorySegment struct, int fieldValue) {
        struct.set(ControlFlags$LAYOUT, ControlFlags$OFFSET, fieldValue);
    }

    private static final OfShort VolumeNameLength$LAYOUT = (OfShort)$LAYOUT.select(groupElement("VolumeNameLength"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD VolumeNameLength
     * }
     */
    public static final OfShort VolumeNameLength$layout() {
        return VolumeNameLength$LAYOUT;
    }

    private static final long VolumeNameLength$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD VolumeNameLength
     * }
     */
    public static final long VolumeNameLength$offset() {
        return VolumeNameLength$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD VolumeNameLength
     * }
     */
    public static short VolumeNameLength(MemorySegment struct) {
        return struct.get(VolumeNameLength$LAYOUT, VolumeNameLength$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD VolumeNameLength
     * }
     */
    public static void VolumeNameLength(MemorySegment struct, short fieldValue) {
        struct.set(VolumeNameLength$LAYOUT, VolumeNameLength$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

