// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tagFUNCDESC {
 *     MEMBERID memid;
 *     SCODE *lprgscode;
 *     ELEMDESC *lprgelemdescParam;
 *     FUNCKIND funckind;
 *     INVOKEKIND invkind;
 *     CALLCONV callconv;
 *     SHORT cParams;
 *     SHORT cParamsOpt;
 *     SHORT oVft;
 *     SHORT cScodes;
 *     ELEMDESC elemdescFunc;
 *     WORD wFuncFlags;
 * }
 * }
 */
public class tagFUNCDESC {

    tagFUNCDESC() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("memid"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_POINTER.withName("lprgscode"),
        wgl_h.C_POINTER.withName("lprgelemdescParam"),
        wgl_h.C_INT.withName("funckind"),
        wgl_h.C_INT.withName("invkind"),
        wgl_h.C_INT.withName("callconv"),
        wgl_h.C_SHORT.withName("cParams"),
        wgl_h.C_SHORT.withName("cParamsOpt"),
        wgl_h.C_SHORT.withName("oVft"),
        wgl_h.C_SHORT.withName("cScodes"),
        MemoryLayout.paddingLayout(4),
        tagELEMDESC.layout().withName("elemdescFunc"),
        wgl_h.C_SHORT.withName("wFuncFlags"),
        MemoryLayout.paddingLayout(6)
    ).withName("tagFUNCDESC");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt memid$LAYOUT = (OfInt)$LAYOUT.select(groupElement("memid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * MEMBERID memid
     * }
     */
    public static final OfInt memid$layout() {
        return memid$LAYOUT;
    }

    private static final long memid$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * MEMBERID memid
     * }
     */
    public static final long memid$offset() {
        return memid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * MEMBERID memid
     * }
     */
    public static int memid(MemorySegment struct) {
        return struct.get(memid$LAYOUT, memid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * MEMBERID memid
     * }
     */
    public static void memid(MemorySegment struct, int fieldValue) {
        struct.set(memid$LAYOUT, memid$OFFSET, fieldValue);
    }

    private static final AddressLayout lprgscode$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lprgscode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SCODE *lprgscode
     * }
     */
    public static final AddressLayout lprgscode$layout() {
        return lprgscode$LAYOUT;
    }

    private static final long lprgscode$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SCODE *lprgscode
     * }
     */
    public static final long lprgscode$offset() {
        return lprgscode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SCODE *lprgscode
     * }
     */
    public static MemorySegment lprgscode(MemorySegment struct) {
        return struct.get(lprgscode$LAYOUT, lprgscode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SCODE *lprgscode
     * }
     */
    public static void lprgscode(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lprgscode$LAYOUT, lprgscode$OFFSET, fieldValue);
    }

    private static final AddressLayout lprgelemdescParam$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lprgelemdescParam"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ELEMDESC *lprgelemdescParam
     * }
     */
    public static final AddressLayout lprgelemdescParam$layout() {
        return lprgelemdescParam$LAYOUT;
    }

    private static final long lprgelemdescParam$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ELEMDESC *lprgelemdescParam
     * }
     */
    public static final long lprgelemdescParam$offset() {
        return lprgelemdescParam$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ELEMDESC *lprgelemdescParam
     * }
     */
    public static MemorySegment lprgelemdescParam(MemorySegment struct) {
        return struct.get(lprgelemdescParam$LAYOUT, lprgelemdescParam$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ELEMDESC *lprgelemdescParam
     * }
     */
    public static void lprgelemdescParam(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lprgelemdescParam$LAYOUT, lprgelemdescParam$OFFSET, fieldValue);
    }

    private static final OfInt funckind$LAYOUT = (OfInt)$LAYOUT.select(groupElement("funckind"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FUNCKIND funckind
     * }
     */
    public static final OfInt funckind$layout() {
        return funckind$LAYOUT;
    }

    private static final long funckind$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FUNCKIND funckind
     * }
     */
    public static final long funckind$offset() {
        return funckind$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FUNCKIND funckind
     * }
     */
    public static int funckind(MemorySegment struct) {
        return struct.get(funckind$LAYOUT, funckind$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FUNCKIND funckind
     * }
     */
    public static void funckind(MemorySegment struct, int fieldValue) {
        struct.set(funckind$LAYOUT, funckind$OFFSET, fieldValue);
    }

    private static final OfInt invkind$LAYOUT = (OfInt)$LAYOUT.select(groupElement("invkind"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * INVOKEKIND invkind
     * }
     */
    public static final OfInt invkind$layout() {
        return invkind$LAYOUT;
    }

    private static final long invkind$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * INVOKEKIND invkind
     * }
     */
    public static final long invkind$offset() {
        return invkind$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * INVOKEKIND invkind
     * }
     */
    public static int invkind(MemorySegment struct) {
        return struct.get(invkind$LAYOUT, invkind$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * INVOKEKIND invkind
     * }
     */
    public static void invkind(MemorySegment struct, int fieldValue) {
        struct.set(invkind$LAYOUT, invkind$OFFSET, fieldValue);
    }

    private static final OfInt callconv$LAYOUT = (OfInt)$LAYOUT.select(groupElement("callconv"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CALLCONV callconv
     * }
     */
    public static final OfInt callconv$layout() {
        return callconv$LAYOUT;
    }

    private static final long callconv$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CALLCONV callconv
     * }
     */
    public static final long callconv$offset() {
        return callconv$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CALLCONV callconv
     * }
     */
    public static int callconv(MemorySegment struct) {
        return struct.get(callconv$LAYOUT, callconv$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CALLCONV callconv
     * }
     */
    public static void callconv(MemorySegment struct, int fieldValue) {
        struct.set(callconv$LAYOUT, callconv$OFFSET, fieldValue);
    }

    private static final OfShort cParams$LAYOUT = (OfShort)$LAYOUT.select(groupElement("cParams"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SHORT cParams
     * }
     */
    public static final OfShort cParams$layout() {
        return cParams$LAYOUT;
    }

    private static final long cParams$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SHORT cParams
     * }
     */
    public static final long cParams$offset() {
        return cParams$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SHORT cParams
     * }
     */
    public static short cParams(MemorySegment struct) {
        return struct.get(cParams$LAYOUT, cParams$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SHORT cParams
     * }
     */
    public static void cParams(MemorySegment struct, short fieldValue) {
        struct.set(cParams$LAYOUT, cParams$OFFSET, fieldValue);
    }

    private static final OfShort cParamsOpt$LAYOUT = (OfShort)$LAYOUT.select(groupElement("cParamsOpt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SHORT cParamsOpt
     * }
     */
    public static final OfShort cParamsOpt$layout() {
        return cParamsOpt$LAYOUT;
    }

    private static final long cParamsOpt$OFFSET = 38;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SHORT cParamsOpt
     * }
     */
    public static final long cParamsOpt$offset() {
        return cParamsOpt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SHORT cParamsOpt
     * }
     */
    public static short cParamsOpt(MemorySegment struct) {
        return struct.get(cParamsOpt$LAYOUT, cParamsOpt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SHORT cParamsOpt
     * }
     */
    public static void cParamsOpt(MemorySegment struct, short fieldValue) {
        struct.set(cParamsOpt$LAYOUT, cParamsOpt$OFFSET, fieldValue);
    }

    private static final OfShort oVft$LAYOUT = (OfShort)$LAYOUT.select(groupElement("oVft"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SHORT oVft
     * }
     */
    public static final OfShort oVft$layout() {
        return oVft$LAYOUT;
    }

    private static final long oVft$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SHORT oVft
     * }
     */
    public static final long oVft$offset() {
        return oVft$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SHORT oVft
     * }
     */
    public static short oVft(MemorySegment struct) {
        return struct.get(oVft$LAYOUT, oVft$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SHORT oVft
     * }
     */
    public static void oVft(MemorySegment struct, short fieldValue) {
        struct.set(oVft$LAYOUT, oVft$OFFSET, fieldValue);
    }

    private static final OfShort cScodes$LAYOUT = (OfShort)$LAYOUT.select(groupElement("cScodes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SHORT cScodes
     * }
     */
    public static final OfShort cScodes$layout() {
        return cScodes$LAYOUT;
    }

    private static final long cScodes$OFFSET = 42;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SHORT cScodes
     * }
     */
    public static final long cScodes$offset() {
        return cScodes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SHORT cScodes
     * }
     */
    public static short cScodes(MemorySegment struct) {
        return struct.get(cScodes$LAYOUT, cScodes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SHORT cScodes
     * }
     */
    public static void cScodes(MemorySegment struct, short fieldValue) {
        struct.set(cScodes$LAYOUT, cScodes$OFFSET, fieldValue);
    }

    private static final GroupLayout elemdescFunc$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("elemdescFunc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ELEMDESC elemdescFunc
     * }
     */
    public static final GroupLayout elemdescFunc$layout() {
        return elemdescFunc$LAYOUT;
    }

    private static final long elemdescFunc$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ELEMDESC elemdescFunc
     * }
     */
    public static final long elemdescFunc$offset() {
        return elemdescFunc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ELEMDESC elemdescFunc
     * }
     */
    public static MemorySegment elemdescFunc(MemorySegment struct) {
        return struct.asSlice(elemdescFunc$OFFSET, elemdescFunc$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ELEMDESC elemdescFunc
     * }
     */
    public static void elemdescFunc(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, elemdescFunc$OFFSET, elemdescFunc$LAYOUT.byteSize());
    }

    private static final OfShort wFuncFlags$LAYOUT = (OfShort)$LAYOUT.select(groupElement("wFuncFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD wFuncFlags
     * }
     */
    public static final OfShort wFuncFlags$layout() {
        return wFuncFlags$LAYOUT;
    }

    private static final long wFuncFlags$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD wFuncFlags
     * }
     */
    public static final long wFuncFlags$offset() {
        return wFuncFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD wFuncFlags
     * }
     */
    public static short wFuncFlags(MemorySegment struct) {
        return struct.get(wFuncFlags$LAYOUT, wFuncFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD wFuncFlags
     * }
     */
    public static void wFuncFlags(MemorySegment struct, short fieldValue) {
        struct.set(wFuncFlags$LAYOUT, wFuncFlags$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

