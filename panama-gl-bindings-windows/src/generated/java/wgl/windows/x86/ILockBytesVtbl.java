// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class ILockBytesVtbl {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("ReadAt"),
        Constants$root.C_POINTER$LAYOUT.withName("WriteAt"),
        Constants$root.C_POINTER$LAYOUT.withName("Flush"),
        Constants$root.C_POINTER$LAYOUT.withName("SetSize"),
        Constants$root.C_POINTER$LAYOUT.withName("LockRegion"),
        Constants$root.C_POINTER$LAYOUT.withName("UnlockRegion"),
        Constants$root.C_POINTER$LAYOUT.withName("Stat")
    ).withName("ILockBytesVtbl");
    public static MemoryLayout $LAYOUT() {
        return ILockBytesVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        ILockBytesVtbl.QueryInterface$FUNC
    );
    public interface QueryInterface {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(QueryInterface fi, MemorySession session) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, ILockBytesVtbl.QueryInterface$FUNC, session);
        }
        static QueryInterface ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)ILockBytesVtbl.QueryInterface$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return ILockBytesVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ILockBytesVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        ILockBytesVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ILockBytesVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        ILockBytesVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment, MemorySession session) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), session);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        ILockBytesVtbl.AddRef$FUNC
    );
    public interface AddRef {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(AddRef fi, MemorySession session) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, ILockBytesVtbl.AddRef$FUNC, session);
        }
        static AddRef ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)ILockBytesVtbl.AddRef$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return ILockBytesVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ILockBytesVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        ILockBytesVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ILockBytesVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        ILockBytesVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment, MemorySession session) {
        return AddRef.ofAddress(AddRef$get(segment), session);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        ILockBytesVtbl.Release$FUNC
    );
    public interface Release {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Release fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Release.class, fi, ILockBytesVtbl.Release$FUNC, session);
        }
        static Release ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)ILockBytesVtbl.Release$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return ILockBytesVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ILockBytesVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        ILockBytesVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ILockBytesVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        ILockBytesVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment, MemorySession session) {
        return Release.ofAddress(Release$get(segment), session);
    }
    static final FunctionDescriptor ReadAt$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ReadAt$MH = RuntimeHelper.downcallHandle(
        ILockBytesVtbl.ReadAt$FUNC
    );
    public interface ReadAt {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemoryAddress _x2, int _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(ReadAt fi, MemorySession session) {
            return RuntimeHelper.upcallStub(ReadAt.class, fi, ILockBytesVtbl.ReadAt$FUNC, session);
        }
        static ReadAt ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemoryAddress __x2, int __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    return (int)ILockBytesVtbl.ReadAt$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2, __x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ReadAt$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ReadAt"));
    public static VarHandle ReadAt$VH() {
        return ILockBytesVtbl.ReadAt$VH;
    }
    public static MemoryAddress ReadAt$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ILockBytesVtbl.ReadAt$VH.get(seg);
    }
    public static void ReadAt$set( MemorySegment seg, MemoryAddress x) {
        ILockBytesVtbl.ReadAt$VH.set(seg, x);
    }
    public static MemoryAddress ReadAt$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ILockBytesVtbl.ReadAt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ReadAt$set(MemorySegment seg, long index, MemoryAddress x) {
        ILockBytesVtbl.ReadAt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReadAt ReadAt (MemorySegment segment, MemorySession session) {
        return ReadAt.ofAddress(ReadAt$get(segment), session);
    }
    static final FunctionDescriptor WriteAt$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle WriteAt$MH = RuntimeHelper.downcallHandle(
        ILockBytesVtbl.WriteAt$FUNC
    );
    public interface WriteAt {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemoryAddress _x2, int _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(WriteAt fi, MemorySession session) {
            return RuntimeHelper.upcallStub(WriteAt.class, fi, ILockBytesVtbl.WriteAt$FUNC, session);
        }
        static WriteAt ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemoryAddress __x2, int __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    return (int)ILockBytesVtbl.WriteAt$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2, __x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle WriteAt$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("WriteAt"));
    public static VarHandle WriteAt$VH() {
        return ILockBytesVtbl.WriteAt$VH;
    }
    public static MemoryAddress WriteAt$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ILockBytesVtbl.WriteAt$VH.get(seg);
    }
    public static void WriteAt$set( MemorySegment seg, MemoryAddress x) {
        ILockBytesVtbl.WriteAt$VH.set(seg, x);
    }
    public static MemoryAddress WriteAt$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ILockBytesVtbl.WriteAt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void WriteAt$set(MemorySegment seg, long index, MemoryAddress x) {
        ILockBytesVtbl.WriteAt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static WriteAt WriteAt (MemorySegment segment, MemorySession session) {
        return WriteAt.ofAddress(WriteAt$get(segment), session);
    }
    static final FunctionDescriptor Flush$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Flush$MH = RuntimeHelper.downcallHandle(
        ILockBytesVtbl.Flush$FUNC
    );
    public interface Flush {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Flush fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Flush.class, fi, ILockBytesVtbl.Flush$FUNC, session);
        }
        static Flush ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)ILockBytesVtbl.Flush$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Flush$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flush"));
    public static VarHandle Flush$VH() {
        return ILockBytesVtbl.Flush$VH;
    }
    public static MemoryAddress Flush$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ILockBytesVtbl.Flush$VH.get(seg);
    }
    public static void Flush$set( MemorySegment seg, MemoryAddress x) {
        ILockBytesVtbl.Flush$VH.set(seg, x);
    }
    public static MemoryAddress Flush$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ILockBytesVtbl.Flush$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flush$set(MemorySegment seg, long index, MemoryAddress x) {
        ILockBytesVtbl.Flush$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Flush Flush (MemorySegment segment, MemorySession session) {
        return Flush.ofAddress(Flush$get(segment), session);
    }
    static final FunctionDescriptor SetSize$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER")
    );
    static final MethodHandle SetSize$MH = RuntimeHelper.downcallHandle(
        ILockBytesVtbl.SetSize$FUNC
    );
    public interface SetSize {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetSize fi, MemorySession session) {
            return RuntimeHelper.upcallStub(SetSize.class, fi, ILockBytesVtbl.SetSize$FUNC, session);
        }
        static SetSize ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ILockBytesVtbl.SetSize$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetSize"));
    public static VarHandle SetSize$VH() {
        return ILockBytesVtbl.SetSize$VH;
    }
    public static MemoryAddress SetSize$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ILockBytesVtbl.SetSize$VH.get(seg);
    }
    public static void SetSize$set( MemorySegment seg, MemoryAddress x) {
        ILockBytesVtbl.SetSize$VH.set(seg, x);
    }
    public static MemoryAddress SetSize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ILockBytesVtbl.SetSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetSize$set(MemorySegment seg, long index, MemoryAddress x) {
        ILockBytesVtbl.SetSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetSize SetSize (MemorySegment segment, MemorySession session) {
        return SetSize.ofAddress(SetSize$get(segment), session);
    }
    static final FunctionDescriptor LockRegion$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle LockRegion$MH = RuntimeHelper.downcallHandle(
        ILockBytesVtbl.LockRegion$FUNC
    );
    public interface LockRegion {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(LockRegion fi, MemorySession session) {
            return RuntimeHelper.upcallStub(LockRegion.class, fi, ILockBytesVtbl.LockRegion$FUNC, session);
        }
        static LockRegion ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)ILockBytesVtbl.LockRegion$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle LockRegion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LockRegion"));
    public static VarHandle LockRegion$VH() {
        return ILockBytesVtbl.LockRegion$VH;
    }
    public static MemoryAddress LockRegion$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ILockBytesVtbl.LockRegion$VH.get(seg);
    }
    public static void LockRegion$set( MemorySegment seg, MemoryAddress x) {
        ILockBytesVtbl.LockRegion$VH.set(seg, x);
    }
    public static MemoryAddress LockRegion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ILockBytesVtbl.LockRegion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LockRegion$set(MemorySegment seg, long index, MemoryAddress x) {
        ILockBytesVtbl.LockRegion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static LockRegion LockRegion (MemorySegment segment, MemorySession session) {
        return LockRegion.ofAddress(LockRegion$get(segment), session);
    }
    static final FunctionDescriptor UnlockRegion$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle UnlockRegion$MH = RuntimeHelper.downcallHandle(
        ILockBytesVtbl.UnlockRegion$FUNC
    );
    public interface UnlockRegion {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(UnlockRegion fi, MemorySession session) {
            return RuntimeHelper.upcallStub(UnlockRegion.class, fi, ILockBytesVtbl.UnlockRegion$FUNC, session);
        }
        static UnlockRegion ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)ILockBytesVtbl.UnlockRegion$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle UnlockRegion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("UnlockRegion"));
    public static VarHandle UnlockRegion$VH() {
        return ILockBytesVtbl.UnlockRegion$VH;
    }
    public static MemoryAddress UnlockRegion$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ILockBytesVtbl.UnlockRegion$VH.get(seg);
    }
    public static void UnlockRegion$set( MemorySegment seg, MemoryAddress x) {
        ILockBytesVtbl.UnlockRegion$VH.set(seg, x);
    }
    public static MemoryAddress UnlockRegion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ILockBytesVtbl.UnlockRegion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void UnlockRegion$set(MemorySegment seg, long index, MemoryAddress x) {
        ILockBytesVtbl.UnlockRegion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static UnlockRegion UnlockRegion (MemorySegment segment, MemorySession session) {
        return UnlockRegion.ofAddress(UnlockRegion$get(segment), session);
    }
    static final FunctionDescriptor Stat$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Stat$MH = RuntimeHelper.downcallHandle(
        ILockBytesVtbl.Stat$FUNC
    );
    public interface Stat {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2);
        static MemorySegment allocate(Stat fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Stat.class, fi, ILockBytesVtbl.Stat$FUNC, session);
        }
        static Stat ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2) -> {
                try {
                    return (int)ILockBytesVtbl.Stat$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Stat$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Stat"));
    public static VarHandle Stat$VH() {
        return ILockBytesVtbl.Stat$VH;
    }
    public static MemoryAddress Stat$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ILockBytesVtbl.Stat$VH.get(seg);
    }
    public static void Stat$set( MemorySegment seg, MemoryAddress x) {
        ILockBytesVtbl.Stat$VH.set(seg, x);
    }
    public static MemoryAddress Stat$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ILockBytesVtbl.Stat$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Stat$set(MemorySegment seg, long index, MemoryAddress x) {
        ILockBytesVtbl.Stat$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Stat Stat (MemorySegment segment, MemorySession session) {
        return Stat.ofAddress(Stat$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


