// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class tagSTATPROPSTG {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("lpwstrName"),
        Constants$root.C_LONG$LAYOUT.withName("propid"),
        Constants$root.C_SHORT$LAYOUT.withName("vt"),
        MemoryLayout.paddingLayout(16)
    ).withName("tagSTATPROPSTG");
    public static MemoryLayout $LAYOUT() {
        return tagSTATPROPSTG.$struct$LAYOUT;
    }
    static final VarHandle lpwstrName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpwstrName"));
    public static VarHandle lpwstrName$VH() {
        return tagSTATPROPSTG.lpwstrName$VH;
    }
    public static MemoryAddress lpwstrName$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)tagSTATPROPSTG.lpwstrName$VH.get(seg);
    }
    public static void lpwstrName$set( MemorySegment seg, MemoryAddress x) {
        tagSTATPROPSTG.lpwstrName$VH.set(seg, x);
    }
    public static MemoryAddress lpwstrName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)tagSTATPROPSTG.lpwstrName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpwstrName$set(MemorySegment seg, long index, MemoryAddress x) {
        tagSTATPROPSTG.lpwstrName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle propid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("propid"));
    public static VarHandle propid$VH() {
        return tagSTATPROPSTG.propid$VH;
    }
    public static int propid$get(MemorySegment seg) {
        return (int)tagSTATPROPSTG.propid$VH.get(seg);
    }
    public static void propid$set( MemorySegment seg, int x) {
        tagSTATPROPSTG.propid$VH.set(seg, x);
    }
    public static int propid$get(MemorySegment seg, long index) {
        return (int)tagSTATPROPSTG.propid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void propid$set(MemorySegment seg, long index, int x) {
        tagSTATPROPSTG.propid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle vt$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("vt"));
    public static VarHandle vt$VH() {
        return tagSTATPROPSTG.vt$VH;
    }
    public static short vt$get(MemorySegment seg) {
        return (short)tagSTATPROPSTG.vt$VH.get(seg);
    }
    public static void vt$set( MemorySegment seg, short x) {
        tagSTATPROPSTG.vt$VH.set(seg, x);
    }
    public static short vt$get(MemorySegment seg, long index) {
        return (short)tagSTATPROPSTG.vt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void vt$set(MemorySegment seg, long index, short x) {
        tagSTATPROPSTG.vt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


