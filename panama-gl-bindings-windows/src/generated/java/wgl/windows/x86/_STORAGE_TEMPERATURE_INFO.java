// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _STORAGE_TEMPERATURE_INFO {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("Index"),
        Constants$root.C_SHORT$LAYOUT.withName("Temperature"),
        Constants$root.C_SHORT$LAYOUT.withName("OverThreshold"),
        Constants$root.C_SHORT$LAYOUT.withName("UnderThreshold"),
        Constants$root.C_CHAR$LAYOUT.withName("OverThresholdChangable"),
        Constants$root.C_CHAR$LAYOUT.withName("UnderThresholdChangable"),
        Constants$root.C_CHAR$LAYOUT.withName("EventGenerated"),
        Constants$root.C_CHAR$LAYOUT.withName("Reserved0"),
        Constants$root.C_LONG$LAYOUT.withName("Reserved1")
    ).withName("_STORAGE_TEMPERATURE_INFO");
    public static MemoryLayout $LAYOUT() {
        return _STORAGE_TEMPERATURE_INFO.$struct$LAYOUT;
    }
    static final VarHandle Index$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Index"));
    public static VarHandle Index$VH() {
        return _STORAGE_TEMPERATURE_INFO.Index$VH;
    }
    public static short Index$get(MemorySegment seg) {
        return (short)_STORAGE_TEMPERATURE_INFO.Index$VH.get(seg);
    }
    public static void Index$set( MemorySegment seg, short x) {
        _STORAGE_TEMPERATURE_INFO.Index$VH.set(seg, x);
    }
    public static short Index$get(MemorySegment seg, long index) {
        return (short)_STORAGE_TEMPERATURE_INFO.Index$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Index$set(MemorySegment seg, long index, short x) {
        _STORAGE_TEMPERATURE_INFO.Index$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Temperature$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Temperature"));
    public static VarHandle Temperature$VH() {
        return _STORAGE_TEMPERATURE_INFO.Temperature$VH;
    }
    public static short Temperature$get(MemorySegment seg) {
        return (short)_STORAGE_TEMPERATURE_INFO.Temperature$VH.get(seg);
    }
    public static void Temperature$set( MemorySegment seg, short x) {
        _STORAGE_TEMPERATURE_INFO.Temperature$VH.set(seg, x);
    }
    public static short Temperature$get(MemorySegment seg, long index) {
        return (short)_STORAGE_TEMPERATURE_INFO.Temperature$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Temperature$set(MemorySegment seg, long index, short x) {
        _STORAGE_TEMPERATURE_INFO.Temperature$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle OverThreshold$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OverThreshold"));
    public static VarHandle OverThreshold$VH() {
        return _STORAGE_TEMPERATURE_INFO.OverThreshold$VH;
    }
    public static short OverThreshold$get(MemorySegment seg) {
        return (short)_STORAGE_TEMPERATURE_INFO.OverThreshold$VH.get(seg);
    }
    public static void OverThreshold$set( MemorySegment seg, short x) {
        _STORAGE_TEMPERATURE_INFO.OverThreshold$VH.set(seg, x);
    }
    public static short OverThreshold$get(MemorySegment seg, long index) {
        return (short)_STORAGE_TEMPERATURE_INFO.OverThreshold$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OverThreshold$set(MemorySegment seg, long index, short x) {
        _STORAGE_TEMPERATURE_INFO.OverThreshold$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle UnderThreshold$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("UnderThreshold"));
    public static VarHandle UnderThreshold$VH() {
        return _STORAGE_TEMPERATURE_INFO.UnderThreshold$VH;
    }
    public static short UnderThreshold$get(MemorySegment seg) {
        return (short)_STORAGE_TEMPERATURE_INFO.UnderThreshold$VH.get(seg);
    }
    public static void UnderThreshold$set( MemorySegment seg, short x) {
        _STORAGE_TEMPERATURE_INFO.UnderThreshold$VH.set(seg, x);
    }
    public static short UnderThreshold$get(MemorySegment seg, long index) {
        return (short)_STORAGE_TEMPERATURE_INFO.UnderThreshold$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void UnderThreshold$set(MemorySegment seg, long index, short x) {
        _STORAGE_TEMPERATURE_INFO.UnderThreshold$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle OverThresholdChangable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OverThresholdChangable"));
    public static VarHandle OverThresholdChangable$VH() {
        return _STORAGE_TEMPERATURE_INFO.OverThresholdChangable$VH;
    }
    public static byte OverThresholdChangable$get(MemorySegment seg) {
        return (byte)_STORAGE_TEMPERATURE_INFO.OverThresholdChangable$VH.get(seg);
    }
    public static void OverThresholdChangable$set( MemorySegment seg, byte x) {
        _STORAGE_TEMPERATURE_INFO.OverThresholdChangable$VH.set(seg, x);
    }
    public static byte OverThresholdChangable$get(MemorySegment seg, long index) {
        return (byte)_STORAGE_TEMPERATURE_INFO.OverThresholdChangable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OverThresholdChangable$set(MemorySegment seg, long index, byte x) {
        _STORAGE_TEMPERATURE_INFO.OverThresholdChangable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle UnderThresholdChangable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("UnderThresholdChangable"));
    public static VarHandle UnderThresholdChangable$VH() {
        return _STORAGE_TEMPERATURE_INFO.UnderThresholdChangable$VH;
    }
    public static byte UnderThresholdChangable$get(MemorySegment seg) {
        return (byte)_STORAGE_TEMPERATURE_INFO.UnderThresholdChangable$VH.get(seg);
    }
    public static void UnderThresholdChangable$set( MemorySegment seg, byte x) {
        _STORAGE_TEMPERATURE_INFO.UnderThresholdChangable$VH.set(seg, x);
    }
    public static byte UnderThresholdChangable$get(MemorySegment seg, long index) {
        return (byte)_STORAGE_TEMPERATURE_INFO.UnderThresholdChangable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void UnderThresholdChangable$set(MemorySegment seg, long index, byte x) {
        _STORAGE_TEMPERATURE_INFO.UnderThresholdChangable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle EventGenerated$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EventGenerated"));
    public static VarHandle EventGenerated$VH() {
        return _STORAGE_TEMPERATURE_INFO.EventGenerated$VH;
    }
    public static byte EventGenerated$get(MemorySegment seg) {
        return (byte)_STORAGE_TEMPERATURE_INFO.EventGenerated$VH.get(seg);
    }
    public static void EventGenerated$set( MemorySegment seg, byte x) {
        _STORAGE_TEMPERATURE_INFO.EventGenerated$VH.set(seg, x);
    }
    public static byte EventGenerated$get(MemorySegment seg, long index) {
        return (byte)_STORAGE_TEMPERATURE_INFO.EventGenerated$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EventGenerated$set(MemorySegment seg, long index, byte x) {
        _STORAGE_TEMPERATURE_INFO.EventGenerated$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Reserved0$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Reserved0"));
    public static VarHandle Reserved0$VH() {
        return _STORAGE_TEMPERATURE_INFO.Reserved0$VH;
    }
    public static byte Reserved0$get(MemorySegment seg) {
        return (byte)_STORAGE_TEMPERATURE_INFO.Reserved0$VH.get(seg);
    }
    public static void Reserved0$set( MemorySegment seg, byte x) {
        _STORAGE_TEMPERATURE_INFO.Reserved0$VH.set(seg, x);
    }
    public static byte Reserved0$get(MemorySegment seg, long index) {
        return (byte)_STORAGE_TEMPERATURE_INFO.Reserved0$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved0$set(MemorySegment seg, long index, byte x) {
        _STORAGE_TEMPERATURE_INFO.Reserved0$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Reserved1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Reserved1"));
    public static VarHandle Reserved1$VH() {
        return _STORAGE_TEMPERATURE_INFO.Reserved1$VH;
    }
    public static int Reserved1$get(MemorySegment seg) {
        return (int)_STORAGE_TEMPERATURE_INFO.Reserved1$VH.get(seg);
    }
    public static void Reserved1$set( MemorySegment seg, int x) {
        _STORAGE_TEMPERATURE_INFO.Reserved1$VH.set(seg, x);
    }
    public static int Reserved1$get(MemorySegment seg, long index) {
        return (int)_STORAGE_TEMPERATURE_INFO.Reserved1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved1$set(MemorySegment seg, long index, int x) {
        _STORAGE_TEMPERATURE_INFO.Reserved1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


