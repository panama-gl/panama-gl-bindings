// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
 *     union {
 *         struct {
 *             DWORD NameOffset : 31;
 *             DWORD NameIsString : 1;
 *         };
 *         DWORD Name;
 *         WORD Id;
 *     };
 *     union {
 *         DWORD OffsetToData;
 *         struct {
 *             DWORD OffsetToDirectory : 31;
 *             DWORD DataIsDirectory : 1;
 *         };
 *     };
 * }
 * }
 */
public class _IMAGE_RESOURCE_DIRECTORY_ENTRY {

    _IMAGE_RESOURCE_DIRECTORY_ENTRY() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                MemoryLayout.paddingLayout(4)
            ).withName("$anon$18400:9"),
            wgl_h.C_LONG.withName("Name"),
            wgl_h.C_SHORT.withName("Id")
        ).withName("$anon$18399:5"),
        MemoryLayout.unionLayout(
            wgl_h.C_LONG.withName("OffsetToData"),
            MemoryLayout.structLayout(
                MemoryLayout.paddingLayout(4)
            ).withName("$anon$18409:9")
        ).withName("$anon$18407:5")
    ).withName("_IMAGE_RESOURCE_DIRECTORY_ENTRY");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt Name$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$18399:5"), groupElement("Name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Name
     * }
     */
    public static final OfInt Name$layout() {
        return Name$LAYOUT;
    }

    private static final long Name$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Name
     * }
     */
    public static final long Name$offset() {
        return Name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Name
     * }
     */
    public static int Name(MemorySegment struct) {
        return struct.get(Name$LAYOUT, Name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Name
     * }
     */
    public static void Name(MemorySegment struct, int fieldValue) {
        struct.set(Name$LAYOUT, Name$OFFSET, fieldValue);
    }

    private static final OfShort Id$LAYOUT = (OfShort)$LAYOUT.select(groupElement("$anon$18399:5"), groupElement("Id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD Id
     * }
     */
    public static final OfShort Id$layout() {
        return Id$LAYOUT;
    }

    private static final long Id$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD Id
     * }
     */
    public static final long Id$offset() {
        return Id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD Id
     * }
     */
    public static short Id(MemorySegment struct) {
        return struct.get(Id$LAYOUT, Id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD Id
     * }
     */
    public static void Id(MemorySegment struct, short fieldValue) {
        struct.set(Id$LAYOUT, Id$OFFSET, fieldValue);
    }

    private static final OfInt OffsetToData$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$18407:5"), groupElement("OffsetToData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD OffsetToData
     * }
     */
    public static final OfInt OffsetToData$layout() {
        return OffsetToData$LAYOUT;
    }

    private static final long OffsetToData$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD OffsetToData
     * }
     */
    public static final long OffsetToData$offset() {
        return OffsetToData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD OffsetToData
     * }
     */
    public static int OffsetToData(MemorySegment struct) {
        return struct.get(OffsetToData$LAYOUT, OffsetToData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD OffsetToData
     * }
     */
    public static void OffsetToData(MemorySegment struct, int fieldValue) {
        struct.set(OffsetToData$LAYOUT, OffsetToData$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

