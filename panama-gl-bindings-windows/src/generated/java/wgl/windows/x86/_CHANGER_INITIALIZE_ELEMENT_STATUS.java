// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _CHANGER_INITIALIZE_ELEMENT_STATUS {
 *     CHANGER_ELEMENT_LIST ElementList;
 *     BOOLEAN BarCodeScan;
 * }
 * }
 */
public class _CHANGER_INITIALIZE_ELEMENT_STATUS {

    _CHANGER_INITIALIZE_ELEMENT_STATUS() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _CHANGER_ELEMENT_LIST.layout().withName("ElementList"),
        wgl_h.C_CHAR.withName("BarCodeScan"),
        MemoryLayout.paddingLayout(3)
    ).withName("_CHANGER_INITIALIZE_ELEMENT_STATUS");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout ElementList$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ElementList"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CHANGER_ELEMENT_LIST ElementList
     * }
     */
    public static final GroupLayout ElementList$layout() {
        return ElementList$LAYOUT;
    }

    private static final long ElementList$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CHANGER_ELEMENT_LIST ElementList
     * }
     */
    public static final long ElementList$offset() {
        return ElementList$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CHANGER_ELEMENT_LIST ElementList
     * }
     */
    public static MemorySegment ElementList(MemorySegment struct) {
        return struct.asSlice(ElementList$OFFSET, ElementList$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CHANGER_ELEMENT_LIST ElementList
     * }
     */
    public static void ElementList(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ElementList$OFFSET, ElementList$LAYOUT.byteSize());
    }

    private static final OfByte BarCodeScan$LAYOUT = (OfByte)$LAYOUT.select(groupElement("BarCodeScan"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN BarCodeScan
     * }
     */
    public static final OfByte BarCodeScan$layout() {
        return BarCodeScan$LAYOUT;
    }

    private static final long BarCodeScan$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN BarCodeScan
     * }
     */
    public static final long BarCodeScan$offset() {
        return BarCodeScan$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN BarCodeScan
     * }
     */
    public static byte BarCodeScan(MemorySegment struct) {
        return struct.get(BarCodeScan$LAYOUT, BarCodeScan$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN BarCodeScan
     * }
     */
    public static void BarCodeScan(MemorySegment struct, byte fieldValue) {
        struct.set(BarCodeScan$LAYOUT, BarCodeScan$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

