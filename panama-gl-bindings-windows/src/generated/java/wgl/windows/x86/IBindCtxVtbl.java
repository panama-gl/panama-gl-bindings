// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct IBindCtxVtbl {
 *     HRESULT (*QueryInterface)(IBindCtx *, const IID *const, void **) __attribute__((stdcall));
 *     ULONG (*AddRef)(IBindCtx *) __attribute__((stdcall));
 *     ULONG (*Release)(IBindCtx *) __attribute__((stdcall));
 *     HRESULT (*RegisterObjectBound)(IBindCtx *, IUnknown *) __attribute__((stdcall));
 *     HRESULT (*RevokeObjectBound)(IBindCtx *, IUnknown *) __attribute__((stdcall));
 *     HRESULT (*ReleaseBoundObjects)(IBindCtx *) __attribute__((stdcall));
 *     HRESULT (*SetBindOptions)(IBindCtx *, BIND_OPTS *) __attribute__((stdcall));
 *     HRESULT (*GetBindOptions)(IBindCtx *, BIND_OPTS *) __attribute__((stdcall));
 *     HRESULT (*GetRunningObjectTable)(IBindCtx *, IRunningObjectTable **) __attribute__((stdcall));
 *     HRESULT (*RegisterObjectParam)(IBindCtx *, LPOLESTR, IUnknown *) __attribute__((stdcall));
 *     HRESULT (*GetObjectParam)(IBindCtx *, LPOLESTR, IUnknown **) __attribute__((stdcall));
 *     HRESULT (*EnumObjectParam)(IBindCtx *, IEnumString **) __attribute__((stdcall));
 *     HRESULT (*RevokeObjectParam)(IBindCtx *, LPOLESTR) __attribute__((stdcall));
 * }
 * }
 */
public class IBindCtxVtbl {

    IBindCtxVtbl() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("QueryInterface"),
        wgl_h.C_POINTER.withName("AddRef"),
        wgl_h.C_POINTER.withName("Release"),
        wgl_h.C_POINTER.withName("RegisterObjectBound"),
        wgl_h.C_POINTER.withName("RevokeObjectBound"),
        wgl_h.C_POINTER.withName("ReleaseBoundObjects"),
        wgl_h.C_POINTER.withName("SetBindOptions"),
        wgl_h.C_POINTER.withName("GetBindOptions"),
        wgl_h.C_POINTER.withName("GetRunningObjectTable"),
        wgl_h.C_POINTER.withName("RegisterObjectParam"),
        wgl_h.C_POINTER.withName("GetObjectParam"),
        wgl_h.C_POINTER.withName("EnumObjectParam"),
        wgl_h.C_POINTER.withName("RevokeObjectParam")
    ).withName("IBindCtxVtbl");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IBindCtx *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static class QueryInterface {

        QueryInterface() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(QueryInterface.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(QueryInterface.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout QueryInterface$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("QueryInterface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IBindCtx *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout QueryInterface$layout() {
        return QueryInterface$LAYOUT;
    }

    private static final long QueryInterface$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IBindCtx *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final long QueryInterface$offset() {
        return QueryInterface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IBindCtx *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment QueryInterface(MemorySegment struct) {
        return struct.get(QueryInterface$LAYOUT, QueryInterface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IBindCtx *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static void QueryInterface(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(QueryInterface$LAYOUT, QueryInterface$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*AddRef)(IBindCtx *) __attribute__((stdcall))
     * }
     */
    public static class AddRef {

        AddRef() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(AddRef.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(AddRef.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout AddRef$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("AddRef"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IBindCtx *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout AddRef$layout() {
        return AddRef$LAYOUT;
    }

    private static final long AddRef$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IBindCtx *) __attribute__((stdcall))
     * }
     */
    public static final long AddRef$offset() {
        return AddRef$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IBindCtx *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment AddRef(MemorySegment struct) {
        return struct.get(AddRef$LAYOUT, AddRef$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IBindCtx *) __attribute__((stdcall))
     * }
     */
    public static void AddRef(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(AddRef$LAYOUT, AddRef$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*Release)(IBindCtx *) __attribute__((stdcall))
     * }
     */
    public static class Release {

        Release() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Release.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Release.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Release$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Release"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IBindCtx *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Release$layout() {
        return Release$LAYOUT;
    }

    private static final long Release$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IBindCtx *) __attribute__((stdcall))
     * }
     */
    public static final long Release$offset() {
        return Release$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IBindCtx *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Release(MemorySegment struct) {
        return struct.get(Release$LAYOUT, Release$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IBindCtx *) __attribute__((stdcall))
     * }
     */
    public static void Release(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Release$LAYOUT, Release$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*RegisterObjectBound)(IBindCtx *, IUnknown *) __attribute__((stdcall))
     * }
     */
    public static class RegisterObjectBound {

        RegisterObjectBound() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(RegisterObjectBound.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(RegisterObjectBound.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout RegisterObjectBound$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("RegisterObjectBound"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*RegisterObjectBound)(IBindCtx *, IUnknown *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout RegisterObjectBound$layout() {
        return RegisterObjectBound$LAYOUT;
    }

    private static final long RegisterObjectBound$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*RegisterObjectBound)(IBindCtx *, IUnknown *) __attribute__((stdcall))
     * }
     */
    public static final long RegisterObjectBound$offset() {
        return RegisterObjectBound$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*RegisterObjectBound)(IBindCtx *, IUnknown *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment RegisterObjectBound(MemorySegment struct) {
        return struct.get(RegisterObjectBound$LAYOUT, RegisterObjectBound$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*RegisterObjectBound)(IBindCtx *, IUnknown *) __attribute__((stdcall))
     * }
     */
    public static void RegisterObjectBound(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(RegisterObjectBound$LAYOUT, RegisterObjectBound$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*RevokeObjectBound)(IBindCtx *, IUnknown *) __attribute__((stdcall))
     * }
     */
    public static class RevokeObjectBound {

        RevokeObjectBound() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(RevokeObjectBound.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(RevokeObjectBound.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout RevokeObjectBound$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("RevokeObjectBound"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*RevokeObjectBound)(IBindCtx *, IUnknown *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout RevokeObjectBound$layout() {
        return RevokeObjectBound$LAYOUT;
    }

    private static final long RevokeObjectBound$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*RevokeObjectBound)(IBindCtx *, IUnknown *) __attribute__((stdcall))
     * }
     */
    public static final long RevokeObjectBound$offset() {
        return RevokeObjectBound$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*RevokeObjectBound)(IBindCtx *, IUnknown *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment RevokeObjectBound(MemorySegment struct) {
        return struct.get(RevokeObjectBound$LAYOUT, RevokeObjectBound$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*RevokeObjectBound)(IBindCtx *, IUnknown *) __attribute__((stdcall))
     * }
     */
    public static void RevokeObjectBound(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(RevokeObjectBound$LAYOUT, RevokeObjectBound$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*ReleaseBoundObjects)(IBindCtx *) __attribute__((stdcall))
     * }
     */
    public static class ReleaseBoundObjects {

        ReleaseBoundObjects() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(ReleaseBoundObjects.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(ReleaseBoundObjects.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout ReleaseBoundObjects$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ReleaseBoundObjects"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*ReleaseBoundObjects)(IBindCtx *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout ReleaseBoundObjects$layout() {
        return ReleaseBoundObjects$LAYOUT;
    }

    private static final long ReleaseBoundObjects$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*ReleaseBoundObjects)(IBindCtx *) __attribute__((stdcall))
     * }
     */
    public static final long ReleaseBoundObjects$offset() {
        return ReleaseBoundObjects$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*ReleaseBoundObjects)(IBindCtx *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment ReleaseBoundObjects(MemorySegment struct) {
        return struct.get(ReleaseBoundObjects$LAYOUT, ReleaseBoundObjects$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*ReleaseBoundObjects)(IBindCtx *) __attribute__((stdcall))
     * }
     */
    public static void ReleaseBoundObjects(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ReleaseBoundObjects$LAYOUT, ReleaseBoundObjects$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetBindOptions)(IBindCtx *, BIND_OPTS *) __attribute__((stdcall))
     * }
     */
    public static class SetBindOptions {

        SetBindOptions() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetBindOptions.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetBindOptions.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetBindOptions$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetBindOptions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetBindOptions)(IBindCtx *, BIND_OPTS *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetBindOptions$layout() {
        return SetBindOptions$LAYOUT;
    }

    private static final long SetBindOptions$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetBindOptions)(IBindCtx *, BIND_OPTS *) __attribute__((stdcall))
     * }
     */
    public static final long SetBindOptions$offset() {
        return SetBindOptions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetBindOptions)(IBindCtx *, BIND_OPTS *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetBindOptions(MemorySegment struct) {
        return struct.get(SetBindOptions$LAYOUT, SetBindOptions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetBindOptions)(IBindCtx *, BIND_OPTS *) __attribute__((stdcall))
     * }
     */
    public static void SetBindOptions(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetBindOptions$LAYOUT, SetBindOptions$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetBindOptions)(IBindCtx *, BIND_OPTS *) __attribute__((stdcall))
     * }
     */
    public static class GetBindOptions {

        GetBindOptions() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetBindOptions.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetBindOptions.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetBindOptions$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetBindOptions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetBindOptions)(IBindCtx *, BIND_OPTS *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetBindOptions$layout() {
        return GetBindOptions$LAYOUT;
    }

    private static final long GetBindOptions$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetBindOptions)(IBindCtx *, BIND_OPTS *) __attribute__((stdcall))
     * }
     */
    public static final long GetBindOptions$offset() {
        return GetBindOptions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetBindOptions)(IBindCtx *, BIND_OPTS *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetBindOptions(MemorySegment struct) {
        return struct.get(GetBindOptions$LAYOUT, GetBindOptions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetBindOptions)(IBindCtx *, BIND_OPTS *) __attribute__((stdcall))
     * }
     */
    public static void GetBindOptions(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetBindOptions$LAYOUT, GetBindOptions$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetRunningObjectTable)(IBindCtx *, IRunningObjectTable **) __attribute__((stdcall))
     * }
     */
    public static class GetRunningObjectTable {

        GetRunningObjectTable() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetRunningObjectTable.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetRunningObjectTable.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetRunningObjectTable$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetRunningObjectTable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetRunningObjectTable)(IBindCtx *, IRunningObjectTable **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetRunningObjectTable$layout() {
        return GetRunningObjectTable$LAYOUT;
    }

    private static final long GetRunningObjectTable$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetRunningObjectTable)(IBindCtx *, IRunningObjectTable **) __attribute__((stdcall))
     * }
     */
    public static final long GetRunningObjectTable$offset() {
        return GetRunningObjectTable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetRunningObjectTable)(IBindCtx *, IRunningObjectTable **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetRunningObjectTable(MemorySegment struct) {
        return struct.get(GetRunningObjectTable$LAYOUT, GetRunningObjectTable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetRunningObjectTable)(IBindCtx *, IRunningObjectTable **) __attribute__((stdcall))
     * }
     */
    public static void GetRunningObjectTable(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetRunningObjectTable$LAYOUT, GetRunningObjectTable$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*RegisterObjectParam)(IBindCtx *, LPOLESTR, IUnknown *) __attribute__((stdcall))
     * }
     */
    public static class RegisterObjectParam {

        RegisterObjectParam() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(RegisterObjectParam.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(RegisterObjectParam.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout RegisterObjectParam$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("RegisterObjectParam"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*RegisterObjectParam)(IBindCtx *, LPOLESTR, IUnknown *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout RegisterObjectParam$layout() {
        return RegisterObjectParam$LAYOUT;
    }

    private static final long RegisterObjectParam$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*RegisterObjectParam)(IBindCtx *, LPOLESTR, IUnknown *) __attribute__((stdcall))
     * }
     */
    public static final long RegisterObjectParam$offset() {
        return RegisterObjectParam$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*RegisterObjectParam)(IBindCtx *, LPOLESTR, IUnknown *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment RegisterObjectParam(MemorySegment struct) {
        return struct.get(RegisterObjectParam$LAYOUT, RegisterObjectParam$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*RegisterObjectParam)(IBindCtx *, LPOLESTR, IUnknown *) __attribute__((stdcall))
     * }
     */
    public static void RegisterObjectParam(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(RegisterObjectParam$LAYOUT, RegisterObjectParam$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetObjectParam)(IBindCtx *, LPOLESTR, IUnknown **) __attribute__((stdcall))
     * }
     */
    public static class GetObjectParam {

        GetObjectParam() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetObjectParam.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetObjectParam.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetObjectParam$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetObjectParam"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetObjectParam)(IBindCtx *, LPOLESTR, IUnknown **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetObjectParam$layout() {
        return GetObjectParam$LAYOUT;
    }

    private static final long GetObjectParam$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetObjectParam)(IBindCtx *, LPOLESTR, IUnknown **) __attribute__((stdcall))
     * }
     */
    public static final long GetObjectParam$offset() {
        return GetObjectParam$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetObjectParam)(IBindCtx *, LPOLESTR, IUnknown **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetObjectParam(MemorySegment struct) {
        return struct.get(GetObjectParam$LAYOUT, GetObjectParam$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetObjectParam)(IBindCtx *, LPOLESTR, IUnknown **) __attribute__((stdcall))
     * }
     */
    public static void GetObjectParam(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetObjectParam$LAYOUT, GetObjectParam$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*EnumObjectParam)(IBindCtx *, IEnumString **) __attribute__((stdcall))
     * }
     */
    public static class EnumObjectParam {

        EnumObjectParam() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(EnumObjectParam.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(EnumObjectParam.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout EnumObjectParam$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("EnumObjectParam"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*EnumObjectParam)(IBindCtx *, IEnumString **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout EnumObjectParam$layout() {
        return EnumObjectParam$LAYOUT;
    }

    private static final long EnumObjectParam$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*EnumObjectParam)(IBindCtx *, IEnumString **) __attribute__((stdcall))
     * }
     */
    public static final long EnumObjectParam$offset() {
        return EnumObjectParam$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*EnumObjectParam)(IBindCtx *, IEnumString **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment EnumObjectParam(MemorySegment struct) {
        return struct.get(EnumObjectParam$LAYOUT, EnumObjectParam$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*EnumObjectParam)(IBindCtx *, IEnumString **) __attribute__((stdcall))
     * }
     */
    public static void EnumObjectParam(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(EnumObjectParam$LAYOUT, EnumObjectParam$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*RevokeObjectParam)(IBindCtx *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static class RevokeObjectParam {

        RevokeObjectParam() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(RevokeObjectParam.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(RevokeObjectParam.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout RevokeObjectParam$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("RevokeObjectParam"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*RevokeObjectParam)(IBindCtx *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout RevokeObjectParam$layout() {
        return RevokeObjectParam$LAYOUT;
    }

    private static final long RevokeObjectParam$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*RevokeObjectParam)(IBindCtx *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static final long RevokeObjectParam$offset() {
        return RevokeObjectParam$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*RevokeObjectParam)(IBindCtx *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static MemorySegment RevokeObjectParam(MemorySegment struct) {
        return struct.get(RevokeObjectParam$LAYOUT, RevokeObjectParam$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*RevokeObjectParam)(IBindCtx *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static void RevokeObjectParam(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(RevokeObjectParam$LAYOUT, RevokeObjectParam$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

