// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _PUBLICKEYSTRUC {
 *     BYTE bType;
 *     BYTE bVersion;
 *     WORD reserved;
 *     ALG_ID aiKeyAlg;
 * }
 * }
 */
public class _PUBLICKEYSTRUC {

    _PUBLICKEYSTRUC() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_CHAR.withName("bType"),
        wgl_h.C_CHAR.withName("bVersion"),
        wgl_h.C_SHORT.withName("reserved"),
        wgl_h.C_INT.withName("aiKeyAlg")
    ).withName("_PUBLICKEYSTRUC");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte bType$LAYOUT = (OfByte)$LAYOUT.select(groupElement("bType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE bType
     * }
     */
    public static final OfByte bType$layout() {
        return bType$LAYOUT;
    }

    private static final long bType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE bType
     * }
     */
    public static final long bType$offset() {
        return bType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE bType
     * }
     */
    public static byte bType(MemorySegment struct) {
        return struct.get(bType$LAYOUT, bType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE bType
     * }
     */
    public static void bType(MemorySegment struct, byte fieldValue) {
        struct.set(bType$LAYOUT, bType$OFFSET, fieldValue);
    }

    private static final OfByte bVersion$LAYOUT = (OfByte)$LAYOUT.select(groupElement("bVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE bVersion
     * }
     */
    public static final OfByte bVersion$layout() {
        return bVersion$LAYOUT;
    }

    private static final long bVersion$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE bVersion
     * }
     */
    public static final long bVersion$offset() {
        return bVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE bVersion
     * }
     */
    public static byte bVersion(MemorySegment struct) {
        return struct.get(bVersion$LAYOUT, bVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE bVersion
     * }
     */
    public static void bVersion(MemorySegment struct, byte fieldValue) {
        struct.set(bVersion$LAYOUT, bVersion$OFFSET, fieldValue);
    }

    private static final OfShort reserved$LAYOUT = (OfShort)$LAYOUT.select(groupElement("reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD reserved
     * }
     */
    public static final OfShort reserved$layout() {
        return reserved$LAYOUT;
    }

    private static final long reserved$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD reserved
     * }
     */
    public static final long reserved$offset() {
        return reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD reserved
     * }
     */
    public static short reserved(MemorySegment struct) {
        return struct.get(reserved$LAYOUT, reserved$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD reserved
     * }
     */
    public static void reserved(MemorySegment struct, short fieldValue) {
        struct.set(reserved$LAYOUT, reserved$OFFSET, fieldValue);
    }

    private static final OfInt aiKeyAlg$LAYOUT = (OfInt)$LAYOUT.select(groupElement("aiKeyAlg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ALG_ID aiKeyAlg
     * }
     */
    public static final OfInt aiKeyAlg$layout() {
        return aiKeyAlg$LAYOUT;
    }

    private static final long aiKeyAlg$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ALG_ID aiKeyAlg
     * }
     */
    public static final long aiKeyAlg$offset() {
        return aiKeyAlg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ALG_ID aiKeyAlg
     * }
     */
    public static int aiKeyAlg(MemorySegment struct) {
        return struct.get(aiKeyAlg$LAYOUT, aiKeyAlg$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ALG_ID aiKeyAlg
     * }
     */
    public static void aiKeyAlg(MemorySegment struct, int fieldValue) {
        struct.set(aiKeyAlg$LAYOUT, aiKeyAlg$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

