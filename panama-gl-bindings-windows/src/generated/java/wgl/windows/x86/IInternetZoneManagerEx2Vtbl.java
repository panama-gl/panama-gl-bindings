// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct IInternetZoneManagerEx2Vtbl {
 *     HRESULT (*QueryInterface)(IInternetZoneManagerEx2 *, const IID *const, void **) __attribute__((stdcall));
 *     ULONG (*AddRef)(IInternetZoneManagerEx2 *) __attribute__((stdcall));
 *     ULONG (*Release)(IInternetZoneManagerEx2 *) __attribute__((stdcall));
 *     HRESULT (*GetZoneAttributes)(IInternetZoneManagerEx2 *, DWORD, ZONEATTRIBUTES *) __attribute__((stdcall));
 *     HRESULT (*SetZoneAttributes)(IInternetZoneManagerEx2 *, DWORD, ZONEATTRIBUTES *) __attribute__((stdcall));
 *     HRESULT (*GetZoneCustomPolicy)(IInternetZoneManagerEx2 *, DWORD, const GUID *const, BYTE **, DWORD *, URLZONEREG) __attribute__((stdcall));
 *     HRESULT (*SetZoneCustomPolicy)(IInternetZoneManagerEx2 *, DWORD, const GUID *const, BYTE *, DWORD, URLZONEREG) __attribute__((stdcall));
 *     HRESULT (*GetZoneActionPolicy)(IInternetZoneManagerEx2 *, DWORD, DWORD, BYTE *, DWORD, URLZONEREG) __attribute__((stdcall));
 *     HRESULT (*SetZoneActionPolicy)(IInternetZoneManagerEx2 *, DWORD, DWORD, BYTE *, DWORD, URLZONEREG) __attribute__((stdcall));
 *     HRESULT (*PromptAction)(IInternetZoneManagerEx2 *, DWORD, HWND, LPCWSTR, LPCWSTR, DWORD) __attribute__((stdcall));
 *     HRESULT (*LogAction)(IInternetZoneManagerEx2 *, DWORD, LPCWSTR, LPCWSTR, DWORD) __attribute__((stdcall));
 *     HRESULT (*CreateZoneEnumerator)(IInternetZoneManagerEx2 *, DWORD *, DWORD *, DWORD) __attribute__((stdcall));
 *     HRESULT (*GetZoneAt)(IInternetZoneManagerEx2 *, DWORD, DWORD, DWORD *) __attribute__((stdcall));
 *     HRESULT (*DestroyZoneEnumerator)(IInternetZoneManagerEx2 *, DWORD) __attribute__((stdcall));
 *     HRESULT (*CopyTemplatePoliciesToZone)(IInternetZoneManagerEx2 *, DWORD, DWORD, DWORD) __attribute__((stdcall));
 *     HRESULT (*GetZoneActionPolicyEx)(IInternetZoneManagerEx2 *, DWORD, DWORD, BYTE *, DWORD, URLZONEREG, DWORD) __attribute__((stdcall));
 *     HRESULT (*SetZoneActionPolicyEx)(IInternetZoneManagerEx2 *, DWORD, DWORD, BYTE *, DWORD, URLZONEREG, DWORD) __attribute__((stdcall));
 *     HRESULT (*GetZoneAttributesEx)(IInternetZoneManagerEx2 *, DWORD, ZONEATTRIBUTES *, DWORD) __attribute__((stdcall));
 *     HRESULT (*GetZoneSecurityState)(IInternetZoneManagerEx2 *, DWORD, BOOL, LPDWORD, BOOL *) __attribute__((stdcall));
 *     HRESULT (*GetIESecurityState)(IInternetZoneManagerEx2 *, BOOL, LPDWORD, BOOL *, BOOL) __attribute__((stdcall));
 *     HRESULT (*FixUnsecureSettings)(IInternetZoneManagerEx2 *) __attribute__((stdcall));
 * }
 * }
 */
public class IInternetZoneManagerEx2Vtbl {

    IInternetZoneManagerEx2Vtbl() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("QueryInterface"),
        wgl_h.C_POINTER.withName("AddRef"),
        wgl_h.C_POINTER.withName("Release"),
        wgl_h.C_POINTER.withName("GetZoneAttributes"),
        wgl_h.C_POINTER.withName("SetZoneAttributes"),
        wgl_h.C_POINTER.withName("GetZoneCustomPolicy"),
        wgl_h.C_POINTER.withName("SetZoneCustomPolicy"),
        wgl_h.C_POINTER.withName("GetZoneActionPolicy"),
        wgl_h.C_POINTER.withName("SetZoneActionPolicy"),
        wgl_h.C_POINTER.withName("PromptAction"),
        wgl_h.C_POINTER.withName("LogAction"),
        wgl_h.C_POINTER.withName("CreateZoneEnumerator"),
        wgl_h.C_POINTER.withName("GetZoneAt"),
        wgl_h.C_POINTER.withName("DestroyZoneEnumerator"),
        wgl_h.C_POINTER.withName("CopyTemplatePoliciesToZone"),
        wgl_h.C_POINTER.withName("GetZoneActionPolicyEx"),
        wgl_h.C_POINTER.withName("SetZoneActionPolicyEx"),
        wgl_h.C_POINTER.withName("GetZoneAttributesEx"),
        wgl_h.C_POINTER.withName("GetZoneSecurityState"),
        wgl_h.C_POINTER.withName("GetIESecurityState"),
        wgl_h.C_POINTER.withName("FixUnsecureSettings")
    ).withName("IInternetZoneManagerEx2Vtbl");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IInternetZoneManagerEx2 *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static class QueryInterface {

        QueryInterface() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(QueryInterface.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(QueryInterface.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout QueryInterface$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("QueryInterface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IInternetZoneManagerEx2 *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout QueryInterface$layout() {
        return QueryInterface$LAYOUT;
    }

    private static final long QueryInterface$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IInternetZoneManagerEx2 *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final long QueryInterface$offset() {
        return QueryInterface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IInternetZoneManagerEx2 *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment QueryInterface(MemorySegment struct) {
        return struct.get(QueryInterface$LAYOUT, QueryInterface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IInternetZoneManagerEx2 *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static void QueryInterface(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(QueryInterface$LAYOUT, QueryInterface$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*AddRef)(IInternetZoneManagerEx2 *) __attribute__((stdcall))
     * }
     */
    public static class AddRef {

        AddRef() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(AddRef.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(AddRef.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout AddRef$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("AddRef"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IInternetZoneManagerEx2 *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout AddRef$layout() {
        return AddRef$LAYOUT;
    }

    private static final long AddRef$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IInternetZoneManagerEx2 *) __attribute__((stdcall))
     * }
     */
    public static final long AddRef$offset() {
        return AddRef$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IInternetZoneManagerEx2 *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment AddRef(MemorySegment struct) {
        return struct.get(AddRef$LAYOUT, AddRef$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IInternetZoneManagerEx2 *) __attribute__((stdcall))
     * }
     */
    public static void AddRef(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(AddRef$LAYOUT, AddRef$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*Release)(IInternetZoneManagerEx2 *) __attribute__((stdcall))
     * }
     */
    public static class Release {

        Release() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Release.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Release.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Release$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Release"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IInternetZoneManagerEx2 *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Release$layout() {
        return Release$LAYOUT;
    }

    private static final long Release$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IInternetZoneManagerEx2 *) __attribute__((stdcall))
     * }
     */
    public static final long Release$offset() {
        return Release$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IInternetZoneManagerEx2 *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Release(MemorySegment struct) {
        return struct.get(Release$LAYOUT, Release$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IInternetZoneManagerEx2 *) __attribute__((stdcall))
     * }
     */
    public static void Release(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Release$LAYOUT, Release$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetZoneAttributes)(IInternetZoneManagerEx2 *, DWORD, ZONEATTRIBUTES *) __attribute__((stdcall))
     * }
     */
    public static class GetZoneAttributes {

        GetZoneAttributes() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetZoneAttributes.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetZoneAttributes.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetZoneAttributes$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetZoneAttributes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetZoneAttributes)(IInternetZoneManagerEx2 *, DWORD, ZONEATTRIBUTES *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetZoneAttributes$layout() {
        return GetZoneAttributes$LAYOUT;
    }

    private static final long GetZoneAttributes$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetZoneAttributes)(IInternetZoneManagerEx2 *, DWORD, ZONEATTRIBUTES *) __attribute__((stdcall))
     * }
     */
    public static final long GetZoneAttributes$offset() {
        return GetZoneAttributes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetZoneAttributes)(IInternetZoneManagerEx2 *, DWORD, ZONEATTRIBUTES *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetZoneAttributes(MemorySegment struct) {
        return struct.get(GetZoneAttributes$LAYOUT, GetZoneAttributes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetZoneAttributes)(IInternetZoneManagerEx2 *, DWORD, ZONEATTRIBUTES *) __attribute__((stdcall))
     * }
     */
    public static void GetZoneAttributes(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetZoneAttributes$LAYOUT, GetZoneAttributes$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetZoneAttributes)(IInternetZoneManagerEx2 *, DWORD, ZONEATTRIBUTES *) __attribute__((stdcall))
     * }
     */
    public static class SetZoneAttributes {

        SetZoneAttributes() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetZoneAttributes.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetZoneAttributes.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetZoneAttributes$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetZoneAttributes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetZoneAttributes)(IInternetZoneManagerEx2 *, DWORD, ZONEATTRIBUTES *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetZoneAttributes$layout() {
        return SetZoneAttributes$LAYOUT;
    }

    private static final long SetZoneAttributes$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetZoneAttributes)(IInternetZoneManagerEx2 *, DWORD, ZONEATTRIBUTES *) __attribute__((stdcall))
     * }
     */
    public static final long SetZoneAttributes$offset() {
        return SetZoneAttributes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetZoneAttributes)(IInternetZoneManagerEx2 *, DWORD, ZONEATTRIBUTES *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetZoneAttributes(MemorySegment struct) {
        return struct.get(SetZoneAttributes$LAYOUT, SetZoneAttributes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetZoneAttributes)(IInternetZoneManagerEx2 *, DWORD, ZONEATTRIBUTES *) __attribute__((stdcall))
     * }
     */
    public static void SetZoneAttributes(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetZoneAttributes$LAYOUT, SetZoneAttributes$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetZoneCustomPolicy)(IInternetZoneManagerEx2 *, DWORD, const GUID *const, BYTE **, DWORD *, URLZONEREG) __attribute__((stdcall))
     * }
     */
    public static class GetZoneCustomPolicy {

        GetZoneCustomPolicy() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4, int _x5);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetZoneCustomPolicy.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetZoneCustomPolicy.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4, int _x5) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetZoneCustomPolicy$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetZoneCustomPolicy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetZoneCustomPolicy)(IInternetZoneManagerEx2 *, DWORD, const GUID *const, BYTE **, DWORD *, URLZONEREG) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetZoneCustomPolicy$layout() {
        return GetZoneCustomPolicy$LAYOUT;
    }

    private static final long GetZoneCustomPolicy$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetZoneCustomPolicy)(IInternetZoneManagerEx2 *, DWORD, const GUID *const, BYTE **, DWORD *, URLZONEREG) __attribute__((stdcall))
     * }
     */
    public static final long GetZoneCustomPolicy$offset() {
        return GetZoneCustomPolicy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetZoneCustomPolicy)(IInternetZoneManagerEx2 *, DWORD, const GUID *const, BYTE **, DWORD *, URLZONEREG) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetZoneCustomPolicy(MemorySegment struct) {
        return struct.get(GetZoneCustomPolicy$LAYOUT, GetZoneCustomPolicy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetZoneCustomPolicy)(IInternetZoneManagerEx2 *, DWORD, const GUID *const, BYTE **, DWORD *, URLZONEREG) __attribute__((stdcall))
     * }
     */
    public static void GetZoneCustomPolicy(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetZoneCustomPolicy$LAYOUT, GetZoneCustomPolicy$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetZoneCustomPolicy)(IInternetZoneManagerEx2 *, DWORD, const GUID *const, BYTE *, DWORD, URLZONEREG) __attribute__((stdcall))
     * }
     */
    public static class SetZoneCustomPolicy {

        SetZoneCustomPolicy() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, int _x4, int _x5);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetZoneCustomPolicy.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetZoneCustomPolicy.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, int _x4, int _x5) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetZoneCustomPolicy$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetZoneCustomPolicy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetZoneCustomPolicy)(IInternetZoneManagerEx2 *, DWORD, const GUID *const, BYTE *, DWORD, URLZONEREG) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetZoneCustomPolicy$layout() {
        return SetZoneCustomPolicy$LAYOUT;
    }

    private static final long SetZoneCustomPolicy$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetZoneCustomPolicy)(IInternetZoneManagerEx2 *, DWORD, const GUID *const, BYTE *, DWORD, URLZONEREG) __attribute__((stdcall))
     * }
     */
    public static final long SetZoneCustomPolicy$offset() {
        return SetZoneCustomPolicy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetZoneCustomPolicy)(IInternetZoneManagerEx2 *, DWORD, const GUID *const, BYTE *, DWORD, URLZONEREG) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetZoneCustomPolicy(MemorySegment struct) {
        return struct.get(SetZoneCustomPolicy$LAYOUT, SetZoneCustomPolicy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetZoneCustomPolicy)(IInternetZoneManagerEx2 *, DWORD, const GUID *const, BYTE *, DWORD, URLZONEREG) __attribute__((stdcall))
     * }
     */
    public static void SetZoneCustomPolicy(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetZoneCustomPolicy$LAYOUT, SetZoneCustomPolicy$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetZoneActionPolicy)(IInternetZoneManagerEx2 *, DWORD, DWORD, BYTE *, DWORD, URLZONEREG) __attribute__((stdcall))
     * }
     */
    public static class GetZoneActionPolicy {

        GetZoneActionPolicy() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, int _x2, MemorySegment _x3, int _x4, int _x5);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetZoneActionPolicy.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetZoneActionPolicy.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2, MemorySegment _x3, int _x4, int _x5) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetZoneActionPolicy$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetZoneActionPolicy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetZoneActionPolicy)(IInternetZoneManagerEx2 *, DWORD, DWORD, BYTE *, DWORD, URLZONEREG) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetZoneActionPolicy$layout() {
        return GetZoneActionPolicy$LAYOUT;
    }

    private static final long GetZoneActionPolicy$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetZoneActionPolicy)(IInternetZoneManagerEx2 *, DWORD, DWORD, BYTE *, DWORD, URLZONEREG) __attribute__((stdcall))
     * }
     */
    public static final long GetZoneActionPolicy$offset() {
        return GetZoneActionPolicy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetZoneActionPolicy)(IInternetZoneManagerEx2 *, DWORD, DWORD, BYTE *, DWORD, URLZONEREG) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetZoneActionPolicy(MemorySegment struct) {
        return struct.get(GetZoneActionPolicy$LAYOUT, GetZoneActionPolicy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetZoneActionPolicy)(IInternetZoneManagerEx2 *, DWORD, DWORD, BYTE *, DWORD, URLZONEREG) __attribute__((stdcall))
     * }
     */
    public static void GetZoneActionPolicy(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetZoneActionPolicy$LAYOUT, GetZoneActionPolicy$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetZoneActionPolicy)(IInternetZoneManagerEx2 *, DWORD, DWORD, BYTE *, DWORD, URLZONEREG) __attribute__((stdcall))
     * }
     */
    public static class SetZoneActionPolicy {

        SetZoneActionPolicy() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, int _x2, MemorySegment _x3, int _x4, int _x5);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetZoneActionPolicy.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetZoneActionPolicy.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2, MemorySegment _x3, int _x4, int _x5) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetZoneActionPolicy$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetZoneActionPolicy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetZoneActionPolicy)(IInternetZoneManagerEx2 *, DWORD, DWORD, BYTE *, DWORD, URLZONEREG) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetZoneActionPolicy$layout() {
        return SetZoneActionPolicy$LAYOUT;
    }

    private static final long SetZoneActionPolicy$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetZoneActionPolicy)(IInternetZoneManagerEx2 *, DWORD, DWORD, BYTE *, DWORD, URLZONEREG) __attribute__((stdcall))
     * }
     */
    public static final long SetZoneActionPolicy$offset() {
        return SetZoneActionPolicy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetZoneActionPolicy)(IInternetZoneManagerEx2 *, DWORD, DWORD, BYTE *, DWORD, URLZONEREG) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetZoneActionPolicy(MemorySegment struct) {
        return struct.get(SetZoneActionPolicy$LAYOUT, SetZoneActionPolicy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetZoneActionPolicy)(IInternetZoneManagerEx2 *, DWORD, DWORD, BYTE *, DWORD, URLZONEREG) __attribute__((stdcall))
     * }
     */
    public static void SetZoneActionPolicy(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetZoneActionPolicy$LAYOUT, SetZoneActionPolicy$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*PromptAction)(IInternetZoneManagerEx2 *, DWORD, HWND, LPCWSTR, LPCWSTR, DWORD) __attribute__((stdcall))
     * }
     */
    public static class PromptAction {

        PromptAction() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4, int _x5);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(PromptAction.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(PromptAction.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4, int _x5) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout PromptAction$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("PromptAction"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*PromptAction)(IInternetZoneManagerEx2 *, DWORD, HWND, LPCWSTR, LPCWSTR, DWORD) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout PromptAction$layout() {
        return PromptAction$LAYOUT;
    }

    private static final long PromptAction$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*PromptAction)(IInternetZoneManagerEx2 *, DWORD, HWND, LPCWSTR, LPCWSTR, DWORD) __attribute__((stdcall))
     * }
     */
    public static final long PromptAction$offset() {
        return PromptAction$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*PromptAction)(IInternetZoneManagerEx2 *, DWORD, HWND, LPCWSTR, LPCWSTR, DWORD) __attribute__((stdcall))
     * }
     */
    public static MemorySegment PromptAction(MemorySegment struct) {
        return struct.get(PromptAction$LAYOUT, PromptAction$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*PromptAction)(IInternetZoneManagerEx2 *, DWORD, HWND, LPCWSTR, LPCWSTR, DWORD) __attribute__((stdcall))
     * }
     */
    public static void PromptAction(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(PromptAction$LAYOUT, PromptAction$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*LogAction)(IInternetZoneManagerEx2 *, DWORD, LPCWSTR, LPCWSTR, DWORD) __attribute__((stdcall))
     * }
     */
    public static class LogAction {

        LogAction() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, int _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(LogAction.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(LogAction.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, int _x4) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout LogAction$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("LogAction"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*LogAction)(IInternetZoneManagerEx2 *, DWORD, LPCWSTR, LPCWSTR, DWORD) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout LogAction$layout() {
        return LogAction$LAYOUT;
    }

    private static final long LogAction$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*LogAction)(IInternetZoneManagerEx2 *, DWORD, LPCWSTR, LPCWSTR, DWORD) __attribute__((stdcall))
     * }
     */
    public static final long LogAction$offset() {
        return LogAction$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*LogAction)(IInternetZoneManagerEx2 *, DWORD, LPCWSTR, LPCWSTR, DWORD) __attribute__((stdcall))
     * }
     */
    public static MemorySegment LogAction(MemorySegment struct) {
        return struct.get(LogAction$LAYOUT, LogAction$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*LogAction)(IInternetZoneManagerEx2 *, DWORD, LPCWSTR, LPCWSTR, DWORD) __attribute__((stdcall))
     * }
     */
    public static void LogAction(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(LogAction$LAYOUT, LogAction$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*CreateZoneEnumerator)(IInternetZoneManagerEx2 *, DWORD *, DWORD *, DWORD) __attribute__((stdcall))
     * }
     */
    public static class CreateZoneEnumerator {

        CreateZoneEnumerator() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, int _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(CreateZoneEnumerator.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(CreateZoneEnumerator.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, int _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout CreateZoneEnumerator$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("CreateZoneEnumerator"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*CreateZoneEnumerator)(IInternetZoneManagerEx2 *, DWORD *, DWORD *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout CreateZoneEnumerator$layout() {
        return CreateZoneEnumerator$LAYOUT;
    }

    private static final long CreateZoneEnumerator$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*CreateZoneEnumerator)(IInternetZoneManagerEx2 *, DWORD *, DWORD *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final long CreateZoneEnumerator$offset() {
        return CreateZoneEnumerator$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*CreateZoneEnumerator)(IInternetZoneManagerEx2 *, DWORD *, DWORD *, DWORD) __attribute__((stdcall))
     * }
     */
    public static MemorySegment CreateZoneEnumerator(MemorySegment struct) {
        return struct.get(CreateZoneEnumerator$LAYOUT, CreateZoneEnumerator$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*CreateZoneEnumerator)(IInternetZoneManagerEx2 *, DWORD *, DWORD *, DWORD) __attribute__((stdcall))
     * }
     */
    public static void CreateZoneEnumerator(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(CreateZoneEnumerator$LAYOUT, CreateZoneEnumerator$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetZoneAt)(IInternetZoneManagerEx2 *, DWORD, DWORD, DWORD *) __attribute__((stdcall))
     * }
     */
    public static class GetZoneAt {

        GetZoneAt() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, int _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetZoneAt.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetZoneAt.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetZoneAt$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetZoneAt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetZoneAt)(IInternetZoneManagerEx2 *, DWORD, DWORD, DWORD *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetZoneAt$layout() {
        return GetZoneAt$LAYOUT;
    }

    private static final long GetZoneAt$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetZoneAt)(IInternetZoneManagerEx2 *, DWORD, DWORD, DWORD *) __attribute__((stdcall))
     * }
     */
    public static final long GetZoneAt$offset() {
        return GetZoneAt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetZoneAt)(IInternetZoneManagerEx2 *, DWORD, DWORD, DWORD *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetZoneAt(MemorySegment struct) {
        return struct.get(GetZoneAt$LAYOUT, GetZoneAt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetZoneAt)(IInternetZoneManagerEx2 *, DWORD, DWORD, DWORD *) __attribute__((stdcall))
     * }
     */
    public static void GetZoneAt(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetZoneAt$LAYOUT, GetZoneAt$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*DestroyZoneEnumerator)(IInternetZoneManagerEx2 *, DWORD) __attribute__((stdcall))
     * }
     */
    public static class DestroyZoneEnumerator {

        DestroyZoneEnumerator() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(DestroyZoneEnumerator.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(DestroyZoneEnumerator.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout DestroyZoneEnumerator$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("DestroyZoneEnumerator"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*DestroyZoneEnumerator)(IInternetZoneManagerEx2 *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout DestroyZoneEnumerator$layout() {
        return DestroyZoneEnumerator$LAYOUT;
    }

    private static final long DestroyZoneEnumerator$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*DestroyZoneEnumerator)(IInternetZoneManagerEx2 *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final long DestroyZoneEnumerator$offset() {
        return DestroyZoneEnumerator$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*DestroyZoneEnumerator)(IInternetZoneManagerEx2 *, DWORD) __attribute__((stdcall))
     * }
     */
    public static MemorySegment DestroyZoneEnumerator(MemorySegment struct) {
        return struct.get(DestroyZoneEnumerator$LAYOUT, DestroyZoneEnumerator$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*DestroyZoneEnumerator)(IInternetZoneManagerEx2 *, DWORD) __attribute__((stdcall))
     * }
     */
    public static void DestroyZoneEnumerator(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(DestroyZoneEnumerator$LAYOUT, DestroyZoneEnumerator$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*CopyTemplatePoliciesToZone)(IInternetZoneManagerEx2 *, DWORD, DWORD, DWORD) __attribute__((stdcall))
     * }
     */
    public static class CopyTemplatePoliciesToZone {

        CopyTemplatePoliciesToZone() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, int _x2, int _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(CopyTemplatePoliciesToZone.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(CopyTemplatePoliciesToZone.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2, int _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout CopyTemplatePoliciesToZone$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("CopyTemplatePoliciesToZone"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*CopyTemplatePoliciesToZone)(IInternetZoneManagerEx2 *, DWORD, DWORD, DWORD) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout CopyTemplatePoliciesToZone$layout() {
        return CopyTemplatePoliciesToZone$LAYOUT;
    }

    private static final long CopyTemplatePoliciesToZone$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*CopyTemplatePoliciesToZone)(IInternetZoneManagerEx2 *, DWORD, DWORD, DWORD) __attribute__((stdcall))
     * }
     */
    public static final long CopyTemplatePoliciesToZone$offset() {
        return CopyTemplatePoliciesToZone$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*CopyTemplatePoliciesToZone)(IInternetZoneManagerEx2 *, DWORD, DWORD, DWORD) __attribute__((stdcall))
     * }
     */
    public static MemorySegment CopyTemplatePoliciesToZone(MemorySegment struct) {
        return struct.get(CopyTemplatePoliciesToZone$LAYOUT, CopyTemplatePoliciesToZone$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*CopyTemplatePoliciesToZone)(IInternetZoneManagerEx2 *, DWORD, DWORD, DWORD) __attribute__((stdcall))
     * }
     */
    public static void CopyTemplatePoliciesToZone(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(CopyTemplatePoliciesToZone$LAYOUT, CopyTemplatePoliciesToZone$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetZoneActionPolicyEx)(IInternetZoneManagerEx2 *, DWORD, DWORD, BYTE *, DWORD, URLZONEREG, DWORD) __attribute__((stdcall))
     * }
     */
    public static class GetZoneActionPolicyEx {

        GetZoneActionPolicyEx() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, int _x2, MemorySegment _x3, int _x4, int _x5, int _x6);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_INT,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetZoneActionPolicyEx.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetZoneActionPolicyEx.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2, MemorySegment _x3, int _x4, int _x5, int _x6) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5, _x6);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetZoneActionPolicyEx$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetZoneActionPolicyEx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetZoneActionPolicyEx)(IInternetZoneManagerEx2 *, DWORD, DWORD, BYTE *, DWORD, URLZONEREG, DWORD) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetZoneActionPolicyEx$layout() {
        return GetZoneActionPolicyEx$LAYOUT;
    }

    private static final long GetZoneActionPolicyEx$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetZoneActionPolicyEx)(IInternetZoneManagerEx2 *, DWORD, DWORD, BYTE *, DWORD, URLZONEREG, DWORD) __attribute__((stdcall))
     * }
     */
    public static final long GetZoneActionPolicyEx$offset() {
        return GetZoneActionPolicyEx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetZoneActionPolicyEx)(IInternetZoneManagerEx2 *, DWORD, DWORD, BYTE *, DWORD, URLZONEREG, DWORD) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetZoneActionPolicyEx(MemorySegment struct) {
        return struct.get(GetZoneActionPolicyEx$LAYOUT, GetZoneActionPolicyEx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetZoneActionPolicyEx)(IInternetZoneManagerEx2 *, DWORD, DWORD, BYTE *, DWORD, URLZONEREG, DWORD) __attribute__((stdcall))
     * }
     */
    public static void GetZoneActionPolicyEx(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetZoneActionPolicyEx$LAYOUT, GetZoneActionPolicyEx$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetZoneActionPolicyEx)(IInternetZoneManagerEx2 *, DWORD, DWORD, BYTE *, DWORD, URLZONEREG, DWORD) __attribute__((stdcall))
     * }
     */
    public static class SetZoneActionPolicyEx {

        SetZoneActionPolicyEx() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, int _x2, MemorySegment _x3, int _x4, int _x5, int _x6);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_INT,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetZoneActionPolicyEx.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetZoneActionPolicyEx.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2, MemorySegment _x3, int _x4, int _x5, int _x6) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5, _x6);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetZoneActionPolicyEx$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetZoneActionPolicyEx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetZoneActionPolicyEx)(IInternetZoneManagerEx2 *, DWORD, DWORD, BYTE *, DWORD, URLZONEREG, DWORD) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetZoneActionPolicyEx$layout() {
        return SetZoneActionPolicyEx$LAYOUT;
    }

    private static final long SetZoneActionPolicyEx$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetZoneActionPolicyEx)(IInternetZoneManagerEx2 *, DWORD, DWORD, BYTE *, DWORD, URLZONEREG, DWORD) __attribute__((stdcall))
     * }
     */
    public static final long SetZoneActionPolicyEx$offset() {
        return SetZoneActionPolicyEx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetZoneActionPolicyEx)(IInternetZoneManagerEx2 *, DWORD, DWORD, BYTE *, DWORD, URLZONEREG, DWORD) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetZoneActionPolicyEx(MemorySegment struct) {
        return struct.get(SetZoneActionPolicyEx$LAYOUT, SetZoneActionPolicyEx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetZoneActionPolicyEx)(IInternetZoneManagerEx2 *, DWORD, DWORD, BYTE *, DWORD, URLZONEREG, DWORD) __attribute__((stdcall))
     * }
     */
    public static void SetZoneActionPolicyEx(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetZoneActionPolicyEx$LAYOUT, SetZoneActionPolicyEx$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetZoneAttributesEx)(IInternetZoneManagerEx2 *, DWORD, ZONEATTRIBUTES *, DWORD) __attribute__((stdcall))
     * }
     */
    public static class GetZoneAttributesEx {

        GetZoneAttributesEx() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2, int _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetZoneAttributesEx.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetZoneAttributesEx.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, int _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetZoneAttributesEx$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetZoneAttributesEx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetZoneAttributesEx)(IInternetZoneManagerEx2 *, DWORD, ZONEATTRIBUTES *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetZoneAttributesEx$layout() {
        return GetZoneAttributesEx$LAYOUT;
    }

    private static final long GetZoneAttributesEx$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetZoneAttributesEx)(IInternetZoneManagerEx2 *, DWORD, ZONEATTRIBUTES *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final long GetZoneAttributesEx$offset() {
        return GetZoneAttributesEx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetZoneAttributesEx)(IInternetZoneManagerEx2 *, DWORD, ZONEATTRIBUTES *, DWORD) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetZoneAttributesEx(MemorySegment struct) {
        return struct.get(GetZoneAttributesEx$LAYOUT, GetZoneAttributesEx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetZoneAttributesEx)(IInternetZoneManagerEx2 *, DWORD, ZONEATTRIBUTES *, DWORD) __attribute__((stdcall))
     * }
     */
    public static void GetZoneAttributesEx(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetZoneAttributesEx$LAYOUT, GetZoneAttributesEx$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetZoneSecurityState)(IInternetZoneManagerEx2 *, DWORD, BOOL, LPDWORD, BOOL *) __attribute__((stdcall))
     * }
     */
    public static class GetZoneSecurityState {

        GetZoneSecurityState() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, int _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetZoneSecurityState.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetZoneSecurityState.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetZoneSecurityState$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetZoneSecurityState"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetZoneSecurityState)(IInternetZoneManagerEx2 *, DWORD, BOOL, LPDWORD, BOOL *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetZoneSecurityState$layout() {
        return GetZoneSecurityState$LAYOUT;
    }

    private static final long GetZoneSecurityState$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetZoneSecurityState)(IInternetZoneManagerEx2 *, DWORD, BOOL, LPDWORD, BOOL *) __attribute__((stdcall))
     * }
     */
    public static final long GetZoneSecurityState$offset() {
        return GetZoneSecurityState$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetZoneSecurityState)(IInternetZoneManagerEx2 *, DWORD, BOOL, LPDWORD, BOOL *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetZoneSecurityState(MemorySegment struct) {
        return struct.get(GetZoneSecurityState$LAYOUT, GetZoneSecurityState$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetZoneSecurityState)(IInternetZoneManagerEx2 *, DWORD, BOOL, LPDWORD, BOOL *) __attribute__((stdcall))
     * }
     */
    public static void GetZoneSecurityState(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetZoneSecurityState$LAYOUT, GetZoneSecurityState$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetIESecurityState)(IInternetZoneManagerEx2 *, BOOL, LPDWORD, BOOL *, BOOL) __attribute__((stdcall))
     * }
     */
    public static class GetIESecurityState {

        GetIESecurityState() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, int _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetIESecurityState.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetIESecurityState.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, int _x4) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetIESecurityState$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetIESecurityState"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetIESecurityState)(IInternetZoneManagerEx2 *, BOOL, LPDWORD, BOOL *, BOOL) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetIESecurityState$layout() {
        return GetIESecurityState$LAYOUT;
    }

    private static final long GetIESecurityState$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetIESecurityState)(IInternetZoneManagerEx2 *, BOOL, LPDWORD, BOOL *, BOOL) __attribute__((stdcall))
     * }
     */
    public static final long GetIESecurityState$offset() {
        return GetIESecurityState$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetIESecurityState)(IInternetZoneManagerEx2 *, BOOL, LPDWORD, BOOL *, BOOL) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetIESecurityState(MemorySegment struct) {
        return struct.get(GetIESecurityState$LAYOUT, GetIESecurityState$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetIESecurityState)(IInternetZoneManagerEx2 *, BOOL, LPDWORD, BOOL *, BOOL) __attribute__((stdcall))
     * }
     */
    public static void GetIESecurityState(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetIESecurityState$LAYOUT, GetIESecurityState$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*FixUnsecureSettings)(IInternetZoneManagerEx2 *) __attribute__((stdcall))
     * }
     */
    public static class FixUnsecureSettings {

        FixUnsecureSettings() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(FixUnsecureSettings.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(FixUnsecureSettings.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout FixUnsecureSettings$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("FixUnsecureSettings"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*FixUnsecureSettings)(IInternetZoneManagerEx2 *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout FixUnsecureSettings$layout() {
        return FixUnsecureSettings$LAYOUT;
    }

    private static final long FixUnsecureSettings$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*FixUnsecureSettings)(IInternetZoneManagerEx2 *) __attribute__((stdcall))
     * }
     */
    public static final long FixUnsecureSettings$offset() {
        return FixUnsecureSettings$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*FixUnsecureSettings)(IInternetZoneManagerEx2 *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment FixUnsecureSettings(MemorySegment struct) {
        return struct.get(FixUnsecureSettings$LAYOUT, FixUnsecureSettings$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*FixUnsecureSettings)(IInternetZoneManagerEx2 *) __attribute__((stdcall))
     * }
     */
    public static void FixUnsecureSettings(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(FixUnsecureSettings$LAYOUT, FixUnsecureSettings$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

