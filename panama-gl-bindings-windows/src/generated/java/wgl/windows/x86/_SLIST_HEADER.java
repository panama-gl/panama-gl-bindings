// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * union _SLIST_HEADER {
 *     struct {
 *         ULONGLONG Alignment;
 *         ULONGLONG Region;
 *     };
 *     struct {
 *         ULONGLONG Depth : 16;
 *         ULONGLONG Sequence : 48;
 *         ULONGLONG Reserved : 4;
 *         ULONGLONG NextEntry : 60;
 *     } HeaderX64;
 * }
 * }
 */
public class _SLIST_HEADER {

    _SLIST_HEADER() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
        MemoryLayout.structLayout(
            wgl_h.C_LONG_LONG.withName("Alignment"),
            wgl_h.C_LONG_LONG.withName("Region")
        ).withName("$anon$19918:5"),
        _SLIST_HEADER.HeaderX64.layout().withName("HeaderX64")
    ).withName("_SLIST_HEADER");

    /**
     * The layout of this union
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong Alignment$LAYOUT = (OfLong)$LAYOUT.select(groupElement("$anon$19918:5"), groupElement("Alignment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONGLONG Alignment
     * }
     */
    public static final OfLong Alignment$layout() {
        return Alignment$LAYOUT;
    }

    private static final long Alignment$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONGLONG Alignment
     * }
     */
    public static final long Alignment$offset() {
        return Alignment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONGLONG Alignment
     * }
     */
    public static long Alignment(MemorySegment union) {
        return union.get(Alignment$LAYOUT, Alignment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONGLONG Alignment
     * }
     */
    public static void Alignment(MemorySegment union, long fieldValue) {
        union.set(Alignment$LAYOUT, Alignment$OFFSET, fieldValue);
    }

    private static final OfLong Region$LAYOUT = (OfLong)$LAYOUT.select(groupElement("$anon$19918:5"), groupElement("Region"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONGLONG Region
     * }
     */
    public static final OfLong Region$layout() {
        return Region$LAYOUT;
    }

    private static final long Region$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONGLONG Region
     * }
     */
    public static final long Region$offset() {
        return Region$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONGLONG Region
     * }
     */
    public static long Region(MemorySegment union) {
        return union.get(Region$LAYOUT, Region$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONGLONG Region
     * }
     */
    public static void Region(MemorySegment union, long fieldValue) {
        union.set(Region$LAYOUT, Region$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     ULONGLONG Depth : 16;
     *     ULONGLONG Sequence : 48;
     *     ULONGLONG Reserved : 4;
     *     ULONGLONG NextEntry : 60;
     * }
     * }
     */
    public static class HeaderX64 {

        HeaderX64() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            MemoryLayout.paddingLayout(16)
        ).withName("$anon$19922:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout HeaderX64$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("HeaderX64"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     ULONGLONG Depth : 16;
     *     ULONGLONG Sequence : 48;
     *     ULONGLONG Reserved : 4;
     *     ULONGLONG NextEntry : 60;
     * } HeaderX64
     * }
     */
    public static final GroupLayout HeaderX64$layout() {
        return HeaderX64$LAYOUT;
    }

    private static final long HeaderX64$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     ULONGLONG Depth : 16;
     *     ULONGLONG Sequence : 48;
     *     ULONGLONG Reserved : 4;
     *     ULONGLONG NextEntry : 60;
     * } HeaderX64
     * }
     */
    public static final long HeaderX64$offset() {
        return HeaderX64$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     ULONGLONG Depth : 16;
     *     ULONGLONG Sequence : 48;
     *     ULONGLONG Reserved : 4;
     *     ULONGLONG NextEntry : 60;
     * } HeaderX64
     * }
     */
    public static MemorySegment HeaderX64(MemorySegment union) {
        return union.asSlice(HeaderX64$OFFSET, HeaderX64$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     ULONGLONG Depth : 16;
     *     ULONGLONG Sequence : 48;
     *     ULONGLONG Reserved : 4;
     *     ULONGLONG NextEntry : 60;
     * } HeaderX64
     * }
     */
    public static void HeaderX64(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, HeaderX64$OFFSET, HeaderX64$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this union
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

