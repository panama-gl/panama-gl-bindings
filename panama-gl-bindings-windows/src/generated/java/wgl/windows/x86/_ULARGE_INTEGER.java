// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * union _ULARGE_INTEGER {
 *     struct {
 *         DWORD LowPart;
 *         DWORD HighPart;
 *     };
 *     struct {
 *         DWORD LowPart;
 *         DWORD HighPart;
 *     } u;
 *     ULONGLONG QuadPart;
 * }
 * }
 */
public class _ULARGE_INTEGER {

    _ULARGE_INTEGER() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
        MemoryLayout.structLayout(
            wgl_h.C_LONG.withName("LowPart"),
            wgl_h.C_LONG.withName("HighPart")
        ).withName("$anon$871:5"),
        _ULARGE_INTEGER.u.layout().withName("u"),
        wgl_h.C_LONG_LONG.withName("QuadPart")
    ).withName("_ULARGE_INTEGER");

    /**
     * The layout of this union
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt LowPart$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$871:5"), groupElement("LowPart"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD LowPart
     * }
     */
    public static final OfInt LowPart$layout() {
        return LowPart$LAYOUT;
    }

    private static final long LowPart$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD LowPart
     * }
     */
    public static final long LowPart$offset() {
        return LowPart$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD LowPart
     * }
     */
    public static int LowPart(MemorySegment union) {
        return union.get(LowPart$LAYOUT, LowPart$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD LowPart
     * }
     */
    public static void LowPart(MemorySegment union, int fieldValue) {
        union.set(LowPart$LAYOUT, LowPart$OFFSET, fieldValue);
    }

    private static final OfInt HighPart$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$871:5"), groupElement("HighPart"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD HighPart
     * }
     */
    public static final OfInt HighPart$layout() {
        return HighPart$LAYOUT;
    }

    private static final long HighPart$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD HighPart
     * }
     */
    public static final long HighPart$offset() {
        return HighPart$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD HighPart
     * }
     */
    public static int HighPart(MemorySegment union) {
        return union.get(HighPart$LAYOUT, HighPart$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD HighPart
     * }
     */
    public static void HighPart(MemorySegment union, int fieldValue) {
        union.set(HighPart$LAYOUT, HighPart$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     DWORD LowPart;
     *     DWORD HighPart;
     * }
     * }
     */
    public static class u {

        u() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            wgl_h.C_LONG.withName("LowPart"),
            wgl_h.C_LONG.withName("HighPart")
        ).withName("$anon$875:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt LowPart$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LowPart"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD LowPart
         * }
         */
        public static final OfInt LowPart$layout() {
            return LowPart$LAYOUT;
        }

        private static final long LowPart$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD LowPart
         * }
         */
        public static final long LowPart$offset() {
            return LowPart$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD LowPart
         * }
         */
        public static int LowPart(MemorySegment struct) {
            return struct.get(LowPart$LAYOUT, LowPart$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD LowPart
         * }
         */
        public static void LowPart(MemorySegment struct, int fieldValue) {
            struct.set(LowPart$LAYOUT, LowPart$OFFSET, fieldValue);
        }

        private static final OfInt HighPart$LAYOUT = (OfInt)$LAYOUT.select(groupElement("HighPart"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD HighPart
         * }
         */
        public static final OfInt HighPart$layout() {
            return HighPart$LAYOUT;
        }

        private static final long HighPart$OFFSET = 4;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD HighPart
         * }
         */
        public static final long HighPart$offset() {
            return HighPart$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD HighPart
         * }
         */
        public static int HighPart(MemorySegment struct) {
            return struct.get(HighPart$LAYOUT, HighPart$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD HighPart
         * }
         */
        public static void HighPart(MemorySegment struct, int fieldValue) {
            struct.set(HighPart$LAYOUT, HighPart$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout u$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("u"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD LowPart;
     *     DWORD HighPart;
     * } u
     * }
     */
    public static final GroupLayout u$layout() {
        return u$LAYOUT;
    }

    private static final long u$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD LowPart;
     *     DWORD HighPart;
     * } u
     * }
     */
    public static final long u$offset() {
        return u$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD LowPart;
     *     DWORD HighPart;
     * } u
     * }
     */
    public static MemorySegment u(MemorySegment union) {
        return union.asSlice(u$OFFSET, u$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD LowPart;
     *     DWORD HighPart;
     * } u
     * }
     */
    public static void u(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, u$OFFSET, u$LAYOUT.byteSize());
    }

    private static final OfLong QuadPart$LAYOUT = (OfLong)$LAYOUT.select(groupElement("QuadPart"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONGLONG QuadPart
     * }
     */
    public static final OfLong QuadPart$layout() {
        return QuadPart$LAYOUT;
    }

    private static final long QuadPart$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONGLONG QuadPart
     * }
     */
    public static final long QuadPart$offset() {
        return QuadPart$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONGLONG QuadPart
     * }
     */
    public static long QuadPart(MemorySegment union) {
        return union.get(QuadPart$LAYOUT, QuadPart$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONGLONG QuadPart
     * }
     */
    public static void QuadPart(MemorySegment union, long fieldValue) {
        union.set(QuadPart$LAYOUT, QuadPart$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this union
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

