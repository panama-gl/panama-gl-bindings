// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _STORAGE_WRITE_CACHE_PROPERTY {
 *     DWORD Version;
 *     DWORD Size;
 *     WRITE_CACHE_TYPE WriteCacheType;
 *     WRITE_CACHE_ENABLE WriteCacheEnabled;
 *     WRITE_CACHE_CHANGE WriteCacheChangeable;
 *     WRITE_THROUGH WriteThroughSupported;
 *     BOOLEAN FlushCacheSupported;
 *     BOOLEAN UserDefinedPowerProtection;
 *     BOOLEAN NVCacheEnabled;
 * }
 * }
 */
public class _STORAGE_WRITE_CACHE_PROPERTY {

    _STORAGE_WRITE_CACHE_PROPERTY() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("Version"),
        wgl_h.C_LONG.withName("Size"),
        wgl_h.C_INT.withName("WriteCacheType"),
        wgl_h.C_INT.withName("WriteCacheEnabled"),
        wgl_h.C_INT.withName("WriteCacheChangeable"),
        wgl_h.C_INT.withName("WriteThroughSupported"),
        wgl_h.C_CHAR.withName("FlushCacheSupported"),
        wgl_h.C_CHAR.withName("UserDefinedPowerProtection"),
        wgl_h.C_CHAR.withName("NVCacheEnabled"),
        MemoryLayout.paddingLayout(1)
    ).withName("_STORAGE_WRITE_CACHE_PROPERTY");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt Version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static final OfInt Version$layout() {
        return Version$LAYOUT;
    }

    private static final long Version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static final long Version$offset() {
        return Version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static int Version(MemorySegment struct) {
        return struct.get(Version$LAYOUT, Version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static void Version(MemorySegment struct, int fieldValue) {
        struct.set(Version$LAYOUT, Version$OFFSET, fieldValue);
    }

    private static final OfInt Size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static final OfInt Size$layout() {
        return Size$LAYOUT;
    }

    private static final long Size$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static final long Size$offset() {
        return Size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static int Size(MemorySegment struct) {
        return struct.get(Size$LAYOUT, Size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static void Size(MemorySegment struct, int fieldValue) {
        struct.set(Size$LAYOUT, Size$OFFSET, fieldValue);
    }

    private static final OfInt WriteCacheType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("WriteCacheType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WRITE_CACHE_TYPE WriteCacheType
     * }
     */
    public static final OfInt WriteCacheType$layout() {
        return WriteCacheType$LAYOUT;
    }

    private static final long WriteCacheType$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WRITE_CACHE_TYPE WriteCacheType
     * }
     */
    public static final long WriteCacheType$offset() {
        return WriteCacheType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WRITE_CACHE_TYPE WriteCacheType
     * }
     */
    public static int WriteCacheType(MemorySegment struct) {
        return struct.get(WriteCacheType$LAYOUT, WriteCacheType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WRITE_CACHE_TYPE WriteCacheType
     * }
     */
    public static void WriteCacheType(MemorySegment struct, int fieldValue) {
        struct.set(WriteCacheType$LAYOUT, WriteCacheType$OFFSET, fieldValue);
    }

    private static final OfInt WriteCacheEnabled$LAYOUT = (OfInt)$LAYOUT.select(groupElement("WriteCacheEnabled"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WRITE_CACHE_ENABLE WriteCacheEnabled
     * }
     */
    public static final OfInt WriteCacheEnabled$layout() {
        return WriteCacheEnabled$LAYOUT;
    }

    private static final long WriteCacheEnabled$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WRITE_CACHE_ENABLE WriteCacheEnabled
     * }
     */
    public static final long WriteCacheEnabled$offset() {
        return WriteCacheEnabled$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WRITE_CACHE_ENABLE WriteCacheEnabled
     * }
     */
    public static int WriteCacheEnabled(MemorySegment struct) {
        return struct.get(WriteCacheEnabled$LAYOUT, WriteCacheEnabled$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WRITE_CACHE_ENABLE WriteCacheEnabled
     * }
     */
    public static void WriteCacheEnabled(MemorySegment struct, int fieldValue) {
        struct.set(WriteCacheEnabled$LAYOUT, WriteCacheEnabled$OFFSET, fieldValue);
    }

    private static final OfInt WriteCacheChangeable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("WriteCacheChangeable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WRITE_CACHE_CHANGE WriteCacheChangeable
     * }
     */
    public static final OfInt WriteCacheChangeable$layout() {
        return WriteCacheChangeable$LAYOUT;
    }

    private static final long WriteCacheChangeable$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WRITE_CACHE_CHANGE WriteCacheChangeable
     * }
     */
    public static final long WriteCacheChangeable$offset() {
        return WriteCacheChangeable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WRITE_CACHE_CHANGE WriteCacheChangeable
     * }
     */
    public static int WriteCacheChangeable(MemorySegment struct) {
        return struct.get(WriteCacheChangeable$LAYOUT, WriteCacheChangeable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WRITE_CACHE_CHANGE WriteCacheChangeable
     * }
     */
    public static void WriteCacheChangeable(MemorySegment struct, int fieldValue) {
        struct.set(WriteCacheChangeable$LAYOUT, WriteCacheChangeable$OFFSET, fieldValue);
    }

    private static final OfInt WriteThroughSupported$LAYOUT = (OfInt)$LAYOUT.select(groupElement("WriteThroughSupported"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WRITE_THROUGH WriteThroughSupported
     * }
     */
    public static final OfInt WriteThroughSupported$layout() {
        return WriteThroughSupported$LAYOUT;
    }

    private static final long WriteThroughSupported$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WRITE_THROUGH WriteThroughSupported
     * }
     */
    public static final long WriteThroughSupported$offset() {
        return WriteThroughSupported$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WRITE_THROUGH WriteThroughSupported
     * }
     */
    public static int WriteThroughSupported(MemorySegment struct) {
        return struct.get(WriteThroughSupported$LAYOUT, WriteThroughSupported$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WRITE_THROUGH WriteThroughSupported
     * }
     */
    public static void WriteThroughSupported(MemorySegment struct, int fieldValue) {
        struct.set(WriteThroughSupported$LAYOUT, WriteThroughSupported$OFFSET, fieldValue);
    }

    private static final OfByte FlushCacheSupported$LAYOUT = (OfByte)$LAYOUT.select(groupElement("FlushCacheSupported"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN FlushCacheSupported
     * }
     */
    public static final OfByte FlushCacheSupported$layout() {
        return FlushCacheSupported$LAYOUT;
    }

    private static final long FlushCacheSupported$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN FlushCacheSupported
     * }
     */
    public static final long FlushCacheSupported$offset() {
        return FlushCacheSupported$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN FlushCacheSupported
     * }
     */
    public static byte FlushCacheSupported(MemorySegment struct) {
        return struct.get(FlushCacheSupported$LAYOUT, FlushCacheSupported$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN FlushCacheSupported
     * }
     */
    public static void FlushCacheSupported(MemorySegment struct, byte fieldValue) {
        struct.set(FlushCacheSupported$LAYOUT, FlushCacheSupported$OFFSET, fieldValue);
    }

    private static final OfByte UserDefinedPowerProtection$LAYOUT = (OfByte)$LAYOUT.select(groupElement("UserDefinedPowerProtection"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN UserDefinedPowerProtection
     * }
     */
    public static final OfByte UserDefinedPowerProtection$layout() {
        return UserDefinedPowerProtection$LAYOUT;
    }

    private static final long UserDefinedPowerProtection$OFFSET = 25;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN UserDefinedPowerProtection
     * }
     */
    public static final long UserDefinedPowerProtection$offset() {
        return UserDefinedPowerProtection$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN UserDefinedPowerProtection
     * }
     */
    public static byte UserDefinedPowerProtection(MemorySegment struct) {
        return struct.get(UserDefinedPowerProtection$LAYOUT, UserDefinedPowerProtection$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN UserDefinedPowerProtection
     * }
     */
    public static void UserDefinedPowerProtection(MemorySegment struct, byte fieldValue) {
        struct.set(UserDefinedPowerProtection$LAYOUT, UserDefinedPowerProtection$OFFSET, fieldValue);
    }

    private static final OfByte NVCacheEnabled$LAYOUT = (OfByte)$LAYOUT.select(groupElement("NVCacheEnabled"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN NVCacheEnabled
     * }
     */
    public static final OfByte NVCacheEnabled$layout() {
        return NVCacheEnabled$LAYOUT;
    }

    private static final long NVCacheEnabled$OFFSET = 26;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN NVCacheEnabled
     * }
     */
    public static final long NVCacheEnabled$offset() {
        return NVCacheEnabled$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN NVCacheEnabled
     * }
     */
    public static byte NVCacheEnabled(MemorySegment struct) {
        return struct.get(NVCacheEnabled$LAYOUT, NVCacheEnabled$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN NVCacheEnabled
     * }
     */
    public static void NVCacheEnabled(MemorySegment struct, byte fieldValue) {
        struct.set(NVCacheEnabled$LAYOUT, NVCacheEnabled$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

