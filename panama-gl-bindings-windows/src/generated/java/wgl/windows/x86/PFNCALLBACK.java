// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface PFNCALLBACK {

    java.lang.foreign.Addressable apply(int wType, int wFmt, java.lang.foreign.MemoryAddress hConv, java.lang.foreign.MemoryAddress hsz1, java.lang.foreign.MemoryAddress hsz2, java.lang.foreign.MemoryAddress hData, long dwData1, long dwData2);
    static MemorySegment allocate(PFNCALLBACK fi, MemorySession session) {
        return RuntimeHelper.upcallStub(PFNCALLBACK.class, fi, constants$605.PFNCALLBACK$FUNC, session);
    }
    static PFNCALLBACK ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (int _wType, int _wFmt, java.lang.foreign.MemoryAddress _hConv, java.lang.foreign.MemoryAddress _hsz1, java.lang.foreign.MemoryAddress _hsz2, java.lang.foreign.MemoryAddress _hData, long _dwData1, long _dwData2) -> {
            try {
                return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)constants$605.PFNCALLBACK$MH.invokeExact((Addressable)symbol, _wType, _wFmt, (java.lang.foreign.Addressable)_hConv, (java.lang.foreign.Addressable)_hsz1, (java.lang.foreign.Addressable)_hsz2, (java.lang.foreign.Addressable)_hData, _dwData1, _dwData2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


