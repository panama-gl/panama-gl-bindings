// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     unsigned char *UserName;
 *     unsigned char *ComputerName;
 *     unsigned short Privilege;
 *     unsigned long AuthFlags;
 * }
 * }
 */
public class RPC_CLIENT_INFORMATION1 {

    RPC_CLIENT_INFORMATION1() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("UserName"),
        wgl_h.C_POINTER.withName("ComputerName"),
        wgl_h.C_SHORT.withName("Privilege"),
        MemoryLayout.paddingLayout(2),
        wgl_h.C_LONG.withName("AuthFlags")
    ).withName("$anon$2628:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout UserName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("UserName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char *UserName
     * }
     */
    public static final AddressLayout UserName$layout() {
        return UserName$LAYOUT;
    }

    private static final long UserName$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char *UserName
     * }
     */
    public static final long UserName$offset() {
        return UserName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char *UserName
     * }
     */
    public static MemorySegment UserName(MemorySegment struct) {
        return struct.get(UserName$LAYOUT, UserName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char *UserName
     * }
     */
    public static void UserName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(UserName$LAYOUT, UserName$OFFSET, fieldValue);
    }

    private static final AddressLayout ComputerName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ComputerName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char *ComputerName
     * }
     */
    public static final AddressLayout ComputerName$layout() {
        return ComputerName$LAYOUT;
    }

    private static final long ComputerName$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char *ComputerName
     * }
     */
    public static final long ComputerName$offset() {
        return ComputerName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char *ComputerName
     * }
     */
    public static MemorySegment ComputerName(MemorySegment struct) {
        return struct.get(ComputerName$LAYOUT, ComputerName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char *ComputerName
     * }
     */
    public static void ComputerName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ComputerName$LAYOUT, ComputerName$OFFSET, fieldValue);
    }

    private static final OfShort Privilege$LAYOUT = (OfShort)$LAYOUT.select(groupElement("Privilege"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned short Privilege
     * }
     */
    public static final OfShort Privilege$layout() {
        return Privilege$LAYOUT;
    }

    private static final long Privilege$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned short Privilege
     * }
     */
    public static final long Privilege$offset() {
        return Privilege$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned short Privilege
     * }
     */
    public static short Privilege(MemorySegment struct) {
        return struct.get(Privilege$LAYOUT, Privilege$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned short Privilege
     * }
     */
    public static void Privilege(MemorySegment struct, short fieldValue) {
        struct.set(Privilege$LAYOUT, Privilege$OFFSET, fieldValue);
    }

    private static final OfInt AuthFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("AuthFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long AuthFlags
     * }
     */
    public static final OfInt AuthFlags$layout() {
        return AuthFlags$LAYOUT;
    }

    private static final long AuthFlags$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long AuthFlags
     * }
     */
    public static final long AuthFlags$offset() {
        return AuthFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long AuthFlags
     * }
     */
    public static int AuthFlags(MemorySegment struct) {
        return struct.get(AuthFlags$LAYOUT, AuthFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long AuthFlags
     * }
     */
    public static void AuthFlags(MemorySegment struct, int fieldValue) {
        struct.set(AuthFlags$LAYOUT, AuthFlags$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

