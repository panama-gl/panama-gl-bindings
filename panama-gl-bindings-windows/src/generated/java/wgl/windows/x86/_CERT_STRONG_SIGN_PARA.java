// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _CERT_STRONG_SIGN_PARA {
 *     DWORD cbSize;
 *     DWORD dwInfoChoice;
 *     union {
 *         void *pvInfo;
 *         PCERT_STRONG_SIGN_SERIALIZED_INFO pSerializedInfo;
 *         LPSTR pszOID;
 *     };
 * }
 * }
 */
public class _CERT_STRONG_SIGN_PARA {

    _CERT_STRONG_SIGN_PARA() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("cbSize"),
        wgl_h.C_LONG.withName("dwInfoChoice"),
        MemoryLayout.unionLayout(
            wgl_h.C_POINTER.withName("pvInfo"),
            wgl_h.C_POINTER.withName("pSerializedInfo"),
            wgl_h.C_POINTER.withName("pszOID")
        ).withName("$anon$6533:5")
    ).withName("_CERT_STRONG_SIGN_PARA");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt cbSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static final OfInt cbSize$layout() {
        return cbSize$LAYOUT;
    }

    private static final long cbSize$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static final long cbSize$offset() {
        return cbSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static int cbSize(MemorySegment struct) {
        return struct.get(cbSize$LAYOUT, cbSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static void cbSize(MemorySegment struct, int fieldValue) {
        struct.set(cbSize$LAYOUT, cbSize$OFFSET, fieldValue);
    }

    private static final OfInt dwInfoChoice$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwInfoChoice"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwInfoChoice
     * }
     */
    public static final OfInt dwInfoChoice$layout() {
        return dwInfoChoice$LAYOUT;
    }

    private static final long dwInfoChoice$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwInfoChoice
     * }
     */
    public static final long dwInfoChoice$offset() {
        return dwInfoChoice$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwInfoChoice
     * }
     */
    public static int dwInfoChoice(MemorySegment struct) {
        return struct.get(dwInfoChoice$LAYOUT, dwInfoChoice$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwInfoChoice
     * }
     */
    public static void dwInfoChoice(MemorySegment struct, int fieldValue) {
        struct.set(dwInfoChoice$LAYOUT, dwInfoChoice$OFFSET, fieldValue);
    }

    private static final AddressLayout pvInfo$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("$anon$6533:5"), groupElement("pvInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pvInfo
     * }
     */
    public static final AddressLayout pvInfo$layout() {
        return pvInfo$LAYOUT;
    }

    private static final long pvInfo$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pvInfo
     * }
     */
    public static final long pvInfo$offset() {
        return pvInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pvInfo
     * }
     */
    public static MemorySegment pvInfo(MemorySegment struct) {
        return struct.get(pvInfo$LAYOUT, pvInfo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pvInfo
     * }
     */
    public static void pvInfo(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pvInfo$LAYOUT, pvInfo$OFFSET, fieldValue);
    }

    private static final AddressLayout pSerializedInfo$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("$anon$6533:5"), groupElement("pSerializedInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PCERT_STRONG_SIGN_SERIALIZED_INFO pSerializedInfo
     * }
     */
    public static final AddressLayout pSerializedInfo$layout() {
        return pSerializedInfo$LAYOUT;
    }

    private static final long pSerializedInfo$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PCERT_STRONG_SIGN_SERIALIZED_INFO pSerializedInfo
     * }
     */
    public static final long pSerializedInfo$offset() {
        return pSerializedInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PCERT_STRONG_SIGN_SERIALIZED_INFO pSerializedInfo
     * }
     */
    public static MemorySegment pSerializedInfo(MemorySegment struct) {
        return struct.get(pSerializedInfo$LAYOUT, pSerializedInfo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PCERT_STRONG_SIGN_SERIALIZED_INFO pSerializedInfo
     * }
     */
    public static void pSerializedInfo(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pSerializedInfo$LAYOUT, pSerializedInfo$OFFSET, fieldValue);
    }

    private static final AddressLayout pszOID$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("$anon$6533:5"), groupElement("pszOID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPSTR pszOID
     * }
     */
    public static final AddressLayout pszOID$layout() {
        return pszOID$LAYOUT;
    }

    private static final long pszOID$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPSTR pszOID
     * }
     */
    public static final long pszOID$offset() {
        return pszOID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPSTR pszOID
     * }
     */
    public static MemorySegment pszOID(MemorySegment struct) {
        return struct.get(pszOID$LAYOUT, pszOID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPSTR pszOID
     * }
     */
    public static void pszOID(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pszOID$LAYOUT, pszOID$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

