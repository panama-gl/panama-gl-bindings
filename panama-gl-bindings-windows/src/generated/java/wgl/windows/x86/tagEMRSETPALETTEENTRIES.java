// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tagEMRSETPALETTEENTRIES {
 *     EMR emr;
 *     DWORD ihPal;
 *     DWORD iStart;
 *     DWORD cEntries;
 *     PALETTEENTRY aPalEntries[1];
 * }
 * }
 */
public class tagEMRSETPALETTEENTRIES {

    tagEMRSETPALETTEENTRIES() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        tagEMR.layout().withName("emr"),
        wgl_h.C_LONG.withName("ihPal"),
        wgl_h.C_LONG.withName("iStart"),
        wgl_h.C_LONG.withName("cEntries"),
        MemoryLayout.sequenceLayout(1, tagPALETTEENTRY.layout()).withName("aPalEntries")
    ).withName("tagEMRSETPALETTEENTRIES");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout emr$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("emr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * EMR emr
     * }
     */
    public static final GroupLayout emr$layout() {
        return emr$LAYOUT;
    }

    private static final long emr$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * EMR emr
     * }
     */
    public static final long emr$offset() {
        return emr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * EMR emr
     * }
     */
    public static MemorySegment emr(MemorySegment struct) {
        return struct.asSlice(emr$OFFSET, emr$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * EMR emr
     * }
     */
    public static void emr(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, emr$OFFSET, emr$LAYOUT.byteSize());
    }

    private static final OfInt ihPal$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ihPal"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD ihPal
     * }
     */
    public static final OfInt ihPal$layout() {
        return ihPal$LAYOUT;
    }

    private static final long ihPal$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD ihPal
     * }
     */
    public static final long ihPal$offset() {
        return ihPal$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD ihPal
     * }
     */
    public static int ihPal(MemorySegment struct) {
        return struct.get(ihPal$LAYOUT, ihPal$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD ihPal
     * }
     */
    public static void ihPal(MemorySegment struct, int fieldValue) {
        struct.set(ihPal$LAYOUT, ihPal$OFFSET, fieldValue);
    }

    private static final OfInt iStart$LAYOUT = (OfInt)$LAYOUT.select(groupElement("iStart"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD iStart
     * }
     */
    public static final OfInt iStart$layout() {
        return iStart$LAYOUT;
    }

    private static final long iStart$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD iStart
     * }
     */
    public static final long iStart$offset() {
        return iStart$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD iStart
     * }
     */
    public static int iStart(MemorySegment struct) {
        return struct.get(iStart$LAYOUT, iStart$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD iStart
     * }
     */
    public static void iStart(MemorySegment struct, int fieldValue) {
        struct.set(iStart$LAYOUT, iStart$OFFSET, fieldValue);
    }

    private static final OfInt cEntries$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cEntries"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD cEntries
     * }
     */
    public static final OfInt cEntries$layout() {
        return cEntries$LAYOUT;
    }

    private static final long cEntries$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD cEntries
     * }
     */
    public static final long cEntries$offset() {
        return cEntries$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD cEntries
     * }
     */
    public static int cEntries(MemorySegment struct) {
        return struct.get(cEntries$LAYOUT, cEntries$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD cEntries
     * }
     */
    public static void cEntries(MemorySegment struct, int fieldValue) {
        struct.set(cEntries$LAYOUT, cEntries$OFFSET, fieldValue);
    }

    private static final SequenceLayout aPalEntries$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("aPalEntries"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PALETTEENTRY aPalEntries[1]
     * }
     */
    public static final SequenceLayout aPalEntries$layout() {
        return aPalEntries$LAYOUT;
    }

    private static final long aPalEntries$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PALETTEENTRY aPalEntries[1]
     * }
     */
    public static final long aPalEntries$offset() {
        return aPalEntries$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PALETTEENTRY aPalEntries[1]
     * }
     */
    public static MemorySegment aPalEntries(MemorySegment struct) {
        return struct.asSlice(aPalEntries$OFFSET, aPalEntries$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PALETTEENTRY aPalEntries[1]
     * }
     */
    public static void aPalEntries(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, aPalEntries$OFFSET, aPalEntries$LAYOUT.byteSize());
    }

    private static long[] aPalEntries$DIMS = { 1 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * PALETTEENTRY aPalEntries[1]
     * }
     */
    public static long[] aPalEntries$dimensions() {
        return aPalEntries$DIMS;
    }
    private static final MethodHandle aPalEntries$ELEM_HANDLE = aPalEntries$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * PALETTEENTRY aPalEntries[1]
     * }
     */
    public static MemorySegment aPalEntries(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)aPalEntries$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * PALETTEENTRY aPalEntries[1]
     * }
     */
    public static void aPalEntries(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, aPalEntries(struct, index0), 0L, tagPALETTEENTRY.layout().byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

