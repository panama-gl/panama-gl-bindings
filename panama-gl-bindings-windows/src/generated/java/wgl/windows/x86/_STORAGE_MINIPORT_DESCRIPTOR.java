// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _STORAGE_MINIPORT_DESCRIPTOR {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Version"),
        Constants$root.C_LONG$LAYOUT.withName("Size"),
        Constants$root.C_LONG$LAYOUT.withName("Portdriver"),
        Constants$root.C_CHAR$LAYOUT.withName("LUNResetSupported"),
        Constants$root.C_CHAR$LAYOUT.withName("TargetResetSupported"),
        Constants$root.C_SHORT$LAYOUT.withName("IoTimeoutValue"),
        Constants$root.C_CHAR$LAYOUT.withName("ExtraIoInfoSupported"),
        MemoryLayout.sequenceLayout(3, Constants$root.C_CHAR$LAYOUT).withName("Reserved0"),
        Constants$root.C_LONG$LAYOUT.withName("Reserved1")
    ).withName("_STORAGE_MINIPORT_DESCRIPTOR");
    public static MemoryLayout $LAYOUT() {
        return _STORAGE_MINIPORT_DESCRIPTOR.$struct$LAYOUT;
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _STORAGE_MINIPORT_DESCRIPTOR.Version$VH;
    }
    public static int Version$get(MemorySegment seg) {
        return (int)_STORAGE_MINIPORT_DESCRIPTOR.Version$VH.get(seg);
    }
    public static void Version$set( MemorySegment seg, int x) {
        _STORAGE_MINIPORT_DESCRIPTOR.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)_STORAGE_MINIPORT_DESCRIPTOR.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        _STORAGE_MINIPORT_DESCRIPTOR.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Size"));
    public static VarHandle Size$VH() {
        return _STORAGE_MINIPORT_DESCRIPTOR.Size$VH;
    }
    public static int Size$get(MemorySegment seg) {
        return (int)_STORAGE_MINIPORT_DESCRIPTOR.Size$VH.get(seg);
    }
    public static void Size$set( MemorySegment seg, int x) {
        _STORAGE_MINIPORT_DESCRIPTOR.Size$VH.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)_STORAGE_MINIPORT_DESCRIPTOR.Size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        _STORAGE_MINIPORT_DESCRIPTOR.Size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Portdriver$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Portdriver"));
    public static VarHandle Portdriver$VH() {
        return _STORAGE_MINIPORT_DESCRIPTOR.Portdriver$VH;
    }
    public static int Portdriver$get(MemorySegment seg) {
        return (int)_STORAGE_MINIPORT_DESCRIPTOR.Portdriver$VH.get(seg);
    }
    public static void Portdriver$set( MemorySegment seg, int x) {
        _STORAGE_MINIPORT_DESCRIPTOR.Portdriver$VH.set(seg, x);
    }
    public static int Portdriver$get(MemorySegment seg, long index) {
        return (int)_STORAGE_MINIPORT_DESCRIPTOR.Portdriver$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Portdriver$set(MemorySegment seg, long index, int x) {
        _STORAGE_MINIPORT_DESCRIPTOR.Portdriver$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle LUNResetSupported$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LUNResetSupported"));
    public static VarHandle LUNResetSupported$VH() {
        return _STORAGE_MINIPORT_DESCRIPTOR.LUNResetSupported$VH;
    }
    public static byte LUNResetSupported$get(MemorySegment seg) {
        return (byte)_STORAGE_MINIPORT_DESCRIPTOR.LUNResetSupported$VH.get(seg);
    }
    public static void LUNResetSupported$set( MemorySegment seg, byte x) {
        _STORAGE_MINIPORT_DESCRIPTOR.LUNResetSupported$VH.set(seg, x);
    }
    public static byte LUNResetSupported$get(MemorySegment seg, long index) {
        return (byte)_STORAGE_MINIPORT_DESCRIPTOR.LUNResetSupported$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LUNResetSupported$set(MemorySegment seg, long index, byte x) {
        _STORAGE_MINIPORT_DESCRIPTOR.LUNResetSupported$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle TargetResetSupported$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("TargetResetSupported"));
    public static VarHandle TargetResetSupported$VH() {
        return _STORAGE_MINIPORT_DESCRIPTOR.TargetResetSupported$VH;
    }
    public static byte TargetResetSupported$get(MemorySegment seg) {
        return (byte)_STORAGE_MINIPORT_DESCRIPTOR.TargetResetSupported$VH.get(seg);
    }
    public static void TargetResetSupported$set( MemorySegment seg, byte x) {
        _STORAGE_MINIPORT_DESCRIPTOR.TargetResetSupported$VH.set(seg, x);
    }
    public static byte TargetResetSupported$get(MemorySegment seg, long index) {
        return (byte)_STORAGE_MINIPORT_DESCRIPTOR.TargetResetSupported$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void TargetResetSupported$set(MemorySegment seg, long index, byte x) {
        _STORAGE_MINIPORT_DESCRIPTOR.TargetResetSupported$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle IoTimeoutValue$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("IoTimeoutValue"));
    public static VarHandle IoTimeoutValue$VH() {
        return _STORAGE_MINIPORT_DESCRIPTOR.IoTimeoutValue$VH;
    }
    public static short IoTimeoutValue$get(MemorySegment seg) {
        return (short)_STORAGE_MINIPORT_DESCRIPTOR.IoTimeoutValue$VH.get(seg);
    }
    public static void IoTimeoutValue$set( MemorySegment seg, short x) {
        _STORAGE_MINIPORT_DESCRIPTOR.IoTimeoutValue$VH.set(seg, x);
    }
    public static short IoTimeoutValue$get(MemorySegment seg, long index) {
        return (short)_STORAGE_MINIPORT_DESCRIPTOR.IoTimeoutValue$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void IoTimeoutValue$set(MemorySegment seg, long index, short x) {
        _STORAGE_MINIPORT_DESCRIPTOR.IoTimeoutValue$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ExtraIoInfoSupported$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ExtraIoInfoSupported"));
    public static VarHandle ExtraIoInfoSupported$VH() {
        return _STORAGE_MINIPORT_DESCRIPTOR.ExtraIoInfoSupported$VH;
    }
    public static byte ExtraIoInfoSupported$get(MemorySegment seg) {
        return (byte)_STORAGE_MINIPORT_DESCRIPTOR.ExtraIoInfoSupported$VH.get(seg);
    }
    public static void ExtraIoInfoSupported$set( MemorySegment seg, byte x) {
        _STORAGE_MINIPORT_DESCRIPTOR.ExtraIoInfoSupported$VH.set(seg, x);
    }
    public static byte ExtraIoInfoSupported$get(MemorySegment seg, long index) {
        return (byte)_STORAGE_MINIPORT_DESCRIPTOR.ExtraIoInfoSupported$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ExtraIoInfoSupported$set(MemorySegment seg, long index, byte x) {
        _STORAGE_MINIPORT_DESCRIPTOR.ExtraIoInfoSupported$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Reserved0$slice(MemorySegment seg) {
        return seg.asSlice(17, 3);
    }
    static final VarHandle Reserved1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Reserved1"));
    public static VarHandle Reserved1$VH() {
        return _STORAGE_MINIPORT_DESCRIPTOR.Reserved1$VH;
    }
    public static int Reserved1$get(MemorySegment seg) {
        return (int)_STORAGE_MINIPORT_DESCRIPTOR.Reserved1$VH.get(seg);
    }
    public static void Reserved1$set( MemorySegment seg, int x) {
        _STORAGE_MINIPORT_DESCRIPTOR.Reserved1$VH.set(seg, x);
    }
    public static int Reserved1$get(MemorySegment seg, long index) {
        return (int)_STORAGE_MINIPORT_DESCRIPTOR.Reserved1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved1$set(MemorySegment seg, long index, int x) {
        _STORAGE_MINIPORT_DESCRIPTOR.Reserved1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


