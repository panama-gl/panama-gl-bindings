// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _CSV_QUERY_MDS_PATH {
 *     DWORD MdsNodeId;
 *     DWORD DsNodeId;
 *     DWORD PathLength;
 *     WCHAR Path[1];
 * }
 * }
 */
public class _CSV_QUERY_MDS_PATH {

    _CSV_QUERY_MDS_PATH() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("MdsNodeId"),
        wgl_h.C_LONG.withName("DsNodeId"),
        wgl_h.C_LONG.withName("PathLength"),
        MemoryLayout.sequenceLayout(1, wgl_h.C_SHORT).withName("Path"),
        MemoryLayout.paddingLayout(2)
    ).withName("_CSV_QUERY_MDS_PATH");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt MdsNodeId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MdsNodeId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD MdsNodeId
     * }
     */
    public static final OfInt MdsNodeId$layout() {
        return MdsNodeId$LAYOUT;
    }

    private static final long MdsNodeId$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD MdsNodeId
     * }
     */
    public static final long MdsNodeId$offset() {
        return MdsNodeId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD MdsNodeId
     * }
     */
    public static int MdsNodeId(MemorySegment struct) {
        return struct.get(MdsNodeId$LAYOUT, MdsNodeId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD MdsNodeId
     * }
     */
    public static void MdsNodeId(MemorySegment struct, int fieldValue) {
        struct.set(MdsNodeId$LAYOUT, MdsNodeId$OFFSET, fieldValue);
    }

    private static final OfInt DsNodeId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DsNodeId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD DsNodeId
     * }
     */
    public static final OfInt DsNodeId$layout() {
        return DsNodeId$LAYOUT;
    }

    private static final long DsNodeId$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD DsNodeId
     * }
     */
    public static final long DsNodeId$offset() {
        return DsNodeId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD DsNodeId
     * }
     */
    public static int DsNodeId(MemorySegment struct) {
        return struct.get(DsNodeId$LAYOUT, DsNodeId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD DsNodeId
     * }
     */
    public static void DsNodeId(MemorySegment struct, int fieldValue) {
        struct.set(DsNodeId$LAYOUT, DsNodeId$OFFSET, fieldValue);
    }

    private static final OfInt PathLength$LAYOUT = (OfInt)$LAYOUT.select(groupElement("PathLength"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD PathLength
     * }
     */
    public static final OfInt PathLength$layout() {
        return PathLength$LAYOUT;
    }

    private static final long PathLength$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD PathLength
     * }
     */
    public static final long PathLength$offset() {
        return PathLength$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD PathLength
     * }
     */
    public static int PathLength(MemorySegment struct) {
        return struct.get(PathLength$LAYOUT, PathLength$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD PathLength
     * }
     */
    public static void PathLength(MemorySegment struct, int fieldValue) {
        struct.set(PathLength$LAYOUT, PathLength$OFFSET, fieldValue);
    }

    private static final SequenceLayout Path$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("Path"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WCHAR Path[1]
     * }
     */
    public static final SequenceLayout Path$layout() {
        return Path$LAYOUT;
    }

    private static final long Path$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WCHAR Path[1]
     * }
     */
    public static final long Path$offset() {
        return Path$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WCHAR Path[1]
     * }
     */
    public static MemorySegment Path(MemorySegment struct) {
        return struct.asSlice(Path$OFFSET, Path$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WCHAR Path[1]
     * }
     */
    public static void Path(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Path$OFFSET, Path$LAYOUT.byteSize());
    }

    private static long[] Path$DIMS = { 1 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * WCHAR Path[1]
     * }
     */
    public static long[] Path$dimensions() {
        return Path$DIMS;
    }
    private static final VarHandle Path$ELEM_HANDLE = Path$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * WCHAR Path[1]
     * }
     */
    public static short Path(MemorySegment struct, long index0) {
        return (short)Path$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * WCHAR Path[1]
     * }
     */
    public static void Path(MemorySegment struct, long index0, short fieldValue) {
        Path$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

