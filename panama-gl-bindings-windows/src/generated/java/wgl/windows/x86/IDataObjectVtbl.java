// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct IDataObjectVtbl {
 *     HRESULT (*QueryInterface)(IDataObject *, const IID *const, void **) __attribute__((stdcall));
 *     ULONG (*AddRef)(IDataObject *) __attribute__((stdcall));
 *     ULONG (*Release)(IDataObject *) __attribute__((stdcall));
 *     HRESULT (*GetData)(IDataObject *, FORMATETC *, STGMEDIUM *) __attribute__((stdcall));
 *     HRESULT (*GetDataHere)(IDataObject *, FORMATETC *, STGMEDIUM *) __attribute__((stdcall));
 *     HRESULT (*QueryGetData)(IDataObject *, FORMATETC *) __attribute__((stdcall));
 *     HRESULT (*GetCanonicalFormatEtc)(IDataObject *, FORMATETC *, FORMATETC *) __attribute__((stdcall));
 *     HRESULT (*SetData)(IDataObject *, FORMATETC *, STGMEDIUM *, BOOL) __attribute__((stdcall));
 *     HRESULT (*EnumFormatEtc)(IDataObject *, DWORD, IEnumFORMATETC **) __attribute__((stdcall));
 *     HRESULT (*DAdvise)(IDataObject *, FORMATETC *, DWORD, IAdviseSink *, DWORD *) __attribute__((stdcall));
 *     HRESULT (*DUnadvise)(IDataObject *, DWORD) __attribute__((stdcall));
 *     HRESULT (*EnumDAdvise)(IDataObject *, IEnumSTATDATA **) __attribute__((stdcall));
 * }
 * }
 */
public class IDataObjectVtbl {

    IDataObjectVtbl() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("QueryInterface"),
        wgl_h.C_POINTER.withName("AddRef"),
        wgl_h.C_POINTER.withName("Release"),
        wgl_h.C_POINTER.withName("GetData"),
        wgl_h.C_POINTER.withName("GetDataHere"),
        wgl_h.C_POINTER.withName("QueryGetData"),
        wgl_h.C_POINTER.withName("GetCanonicalFormatEtc"),
        wgl_h.C_POINTER.withName("SetData"),
        wgl_h.C_POINTER.withName("EnumFormatEtc"),
        wgl_h.C_POINTER.withName("DAdvise"),
        wgl_h.C_POINTER.withName("DUnadvise"),
        wgl_h.C_POINTER.withName("EnumDAdvise")
    ).withName("IDataObjectVtbl");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IDataObject *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static class QueryInterface {

        QueryInterface() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(QueryInterface.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(QueryInterface.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout QueryInterface$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("QueryInterface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IDataObject *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout QueryInterface$layout() {
        return QueryInterface$LAYOUT;
    }

    private static final long QueryInterface$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IDataObject *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final long QueryInterface$offset() {
        return QueryInterface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IDataObject *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment QueryInterface(MemorySegment struct) {
        return struct.get(QueryInterface$LAYOUT, QueryInterface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IDataObject *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static void QueryInterface(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(QueryInterface$LAYOUT, QueryInterface$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*AddRef)(IDataObject *) __attribute__((stdcall))
     * }
     */
    public static class AddRef {

        AddRef() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(AddRef.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(AddRef.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout AddRef$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("AddRef"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IDataObject *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout AddRef$layout() {
        return AddRef$LAYOUT;
    }

    private static final long AddRef$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IDataObject *) __attribute__((stdcall))
     * }
     */
    public static final long AddRef$offset() {
        return AddRef$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IDataObject *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment AddRef(MemorySegment struct) {
        return struct.get(AddRef$LAYOUT, AddRef$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IDataObject *) __attribute__((stdcall))
     * }
     */
    public static void AddRef(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(AddRef$LAYOUT, AddRef$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*Release)(IDataObject *) __attribute__((stdcall))
     * }
     */
    public static class Release {

        Release() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Release.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Release.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Release$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Release"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IDataObject *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Release$layout() {
        return Release$LAYOUT;
    }

    private static final long Release$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IDataObject *) __attribute__((stdcall))
     * }
     */
    public static final long Release$offset() {
        return Release$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IDataObject *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Release(MemorySegment struct) {
        return struct.get(Release$LAYOUT, Release$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IDataObject *) __attribute__((stdcall))
     * }
     */
    public static void Release(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Release$LAYOUT, Release$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetData)(IDataObject *, FORMATETC *, STGMEDIUM *) __attribute__((stdcall))
     * }
     */
    public static class GetData {

        GetData() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetData.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetData.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetData)(IDataObject *, FORMATETC *, STGMEDIUM *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetData$layout() {
        return GetData$LAYOUT;
    }

    private static final long GetData$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetData)(IDataObject *, FORMATETC *, STGMEDIUM *) __attribute__((stdcall))
     * }
     */
    public static final long GetData$offset() {
        return GetData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetData)(IDataObject *, FORMATETC *, STGMEDIUM *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetData(MemorySegment struct) {
        return struct.get(GetData$LAYOUT, GetData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetData)(IDataObject *, FORMATETC *, STGMEDIUM *) __attribute__((stdcall))
     * }
     */
    public static void GetData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetData$LAYOUT, GetData$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetDataHere)(IDataObject *, FORMATETC *, STGMEDIUM *) __attribute__((stdcall))
     * }
     */
    public static class GetDataHere {

        GetDataHere() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetDataHere.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetDataHere.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetDataHere$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetDataHere"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetDataHere)(IDataObject *, FORMATETC *, STGMEDIUM *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetDataHere$layout() {
        return GetDataHere$LAYOUT;
    }

    private static final long GetDataHere$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetDataHere)(IDataObject *, FORMATETC *, STGMEDIUM *) __attribute__((stdcall))
     * }
     */
    public static final long GetDataHere$offset() {
        return GetDataHere$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetDataHere)(IDataObject *, FORMATETC *, STGMEDIUM *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetDataHere(MemorySegment struct) {
        return struct.get(GetDataHere$LAYOUT, GetDataHere$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetDataHere)(IDataObject *, FORMATETC *, STGMEDIUM *) __attribute__((stdcall))
     * }
     */
    public static void GetDataHere(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetDataHere$LAYOUT, GetDataHere$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*QueryGetData)(IDataObject *, FORMATETC *) __attribute__((stdcall))
     * }
     */
    public static class QueryGetData {

        QueryGetData() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(QueryGetData.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(QueryGetData.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout QueryGetData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("QueryGetData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*QueryGetData)(IDataObject *, FORMATETC *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout QueryGetData$layout() {
        return QueryGetData$LAYOUT;
    }

    private static final long QueryGetData$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*QueryGetData)(IDataObject *, FORMATETC *) __attribute__((stdcall))
     * }
     */
    public static final long QueryGetData$offset() {
        return QueryGetData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryGetData)(IDataObject *, FORMATETC *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment QueryGetData(MemorySegment struct) {
        return struct.get(QueryGetData$LAYOUT, QueryGetData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryGetData)(IDataObject *, FORMATETC *) __attribute__((stdcall))
     * }
     */
    public static void QueryGetData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(QueryGetData$LAYOUT, QueryGetData$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetCanonicalFormatEtc)(IDataObject *, FORMATETC *, FORMATETC *) __attribute__((stdcall))
     * }
     */
    public static class GetCanonicalFormatEtc {

        GetCanonicalFormatEtc() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetCanonicalFormatEtc.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetCanonicalFormatEtc.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetCanonicalFormatEtc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetCanonicalFormatEtc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetCanonicalFormatEtc)(IDataObject *, FORMATETC *, FORMATETC *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetCanonicalFormatEtc$layout() {
        return GetCanonicalFormatEtc$LAYOUT;
    }

    private static final long GetCanonicalFormatEtc$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetCanonicalFormatEtc)(IDataObject *, FORMATETC *, FORMATETC *) __attribute__((stdcall))
     * }
     */
    public static final long GetCanonicalFormatEtc$offset() {
        return GetCanonicalFormatEtc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetCanonicalFormatEtc)(IDataObject *, FORMATETC *, FORMATETC *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetCanonicalFormatEtc(MemorySegment struct) {
        return struct.get(GetCanonicalFormatEtc$LAYOUT, GetCanonicalFormatEtc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetCanonicalFormatEtc)(IDataObject *, FORMATETC *, FORMATETC *) __attribute__((stdcall))
     * }
     */
    public static void GetCanonicalFormatEtc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetCanonicalFormatEtc$LAYOUT, GetCanonicalFormatEtc$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetData)(IDataObject *, FORMATETC *, STGMEDIUM *, BOOL) __attribute__((stdcall))
     * }
     */
    public static class SetData {

        SetData() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, int _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetData.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetData.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, int _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetData)(IDataObject *, FORMATETC *, STGMEDIUM *, BOOL) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetData$layout() {
        return SetData$LAYOUT;
    }

    private static final long SetData$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetData)(IDataObject *, FORMATETC *, STGMEDIUM *, BOOL) __attribute__((stdcall))
     * }
     */
    public static final long SetData$offset() {
        return SetData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetData)(IDataObject *, FORMATETC *, STGMEDIUM *, BOOL) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetData(MemorySegment struct) {
        return struct.get(SetData$LAYOUT, SetData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetData)(IDataObject *, FORMATETC *, STGMEDIUM *, BOOL) __attribute__((stdcall))
     * }
     */
    public static void SetData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetData$LAYOUT, SetData$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*EnumFormatEtc)(IDataObject *, DWORD, IEnumFORMATETC **) __attribute__((stdcall))
     * }
     */
    public static class EnumFormatEtc {

        EnumFormatEtc() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(EnumFormatEtc.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(EnumFormatEtc.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout EnumFormatEtc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("EnumFormatEtc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*EnumFormatEtc)(IDataObject *, DWORD, IEnumFORMATETC **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout EnumFormatEtc$layout() {
        return EnumFormatEtc$LAYOUT;
    }

    private static final long EnumFormatEtc$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*EnumFormatEtc)(IDataObject *, DWORD, IEnumFORMATETC **) __attribute__((stdcall))
     * }
     */
    public static final long EnumFormatEtc$offset() {
        return EnumFormatEtc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*EnumFormatEtc)(IDataObject *, DWORD, IEnumFORMATETC **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment EnumFormatEtc(MemorySegment struct) {
        return struct.get(EnumFormatEtc$LAYOUT, EnumFormatEtc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*EnumFormatEtc)(IDataObject *, DWORD, IEnumFORMATETC **) __attribute__((stdcall))
     * }
     */
    public static void EnumFormatEtc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(EnumFormatEtc$LAYOUT, EnumFormatEtc$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*DAdvise)(IDataObject *, FORMATETC *, DWORD, IAdviseSink *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static class DAdvise {

        DAdvise() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(DAdvise.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(DAdvise.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout DAdvise$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("DAdvise"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*DAdvise)(IDataObject *, FORMATETC *, DWORD, IAdviseSink *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout DAdvise$layout() {
        return DAdvise$LAYOUT;
    }

    private static final long DAdvise$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*DAdvise)(IDataObject *, FORMATETC *, DWORD, IAdviseSink *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static final long DAdvise$offset() {
        return DAdvise$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*DAdvise)(IDataObject *, FORMATETC *, DWORD, IAdviseSink *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment DAdvise(MemorySegment struct) {
        return struct.get(DAdvise$LAYOUT, DAdvise$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*DAdvise)(IDataObject *, FORMATETC *, DWORD, IAdviseSink *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static void DAdvise(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(DAdvise$LAYOUT, DAdvise$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*DUnadvise)(IDataObject *, DWORD) __attribute__((stdcall))
     * }
     */
    public static class DUnadvise {

        DUnadvise() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(DUnadvise.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(DUnadvise.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout DUnadvise$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("DUnadvise"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*DUnadvise)(IDataObject *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout DUnadvise$layout() {
        return DUnadvise$LAYOUT;
    }

    private static final long DUnadvise$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*DUnadvise)(IDataObject *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final long DUnadvise$offset() {
        return DUnadvise$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*DUnadvise)(IDataObject *, DWORD) __attribute__((stdcall))
     * }
     */
    public static MemorySegment DUnadvise(MemorySegment struct) {
        return struct.get(DUnadvise$LAYOUT, DUnadvise$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*DUnadvise)(IDataObject *, DWORD) __attribute__((stdcall))
     * }
     */
    public static void DUnadvise(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(DUnadvise$LAYOUT, DUnadvise$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*EnumDAdvise)(IDataObject *, IEnumSTATDATA **) __attribute__((stdcall))
     * }
     */
    public static class EnumDAdvise {

        EnumDAdvise() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(EnumDAdvise.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(EnumDAdvise.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout EnumDAdvise$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("EnumDAdvise"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*EnumDAdvise)(IDataObject *, IEnumSTATDATA **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout EnumDAdvise$layout() {
        return EnumDAdvise$LAYOUT;
    }

    private static final long EnumDAdvise$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*EnumDAdvise)(IDataObject *, IEnumSTATDATA **) __attribute__((stdcall))
     * }
     */
    public static final long EnumDAdvise$offset() {
        return EnumDAdvise$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*EnumDAdvise)(IDataObject *, IEnumSTATDATA **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment EnumDAdvise(MemorySegment struct) {
        return struct.get(EnumDAdvise$LAYOUT, EnumDAdvise$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*EnumDAdvise)(IDataObject *, IEnumSTATDATA **) __attribute__((stdcall))
     * }
     */
    public static void EnumDAdvise(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(EnumDAdvise$LAYOUT, EnumDAdvise$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

