// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct IZoneIdentifier2Vtbl {
 *     HRESULT (*QueryInterface)(IZoneIdentifier2 *, const IID *const, void **) __attribute__((stdcall));
 *     ULONG (*AddRef)(IZoneIdentifier2 *) __attribute__((stdcall));
 *     ULONG (*Release)(IZoneIdentifier2 *) __attribute__((stdcall));
 *     HRESULT (*GetId)(IZoneIdentifier2 *, DWORD *) __attribute__((stdcall));
 *     HRESULT (*SetId)(IZoneIdentifier2 *, DWORD) __attribute__((stdcall));
 *     HRESULT (*Remove)(IZoneIdentifier2 *) __attribute__((stdcall));
 *     HRESULT (*GetLastWriterPackageFamilyName)(IZoneIdentifier2 *, LPWSTR *) __attribute__((stdcall));
 *     HRESULT (*SetLastWriterPackageFamilyName)(IZoneIdentifier2 *, LPCWSTR) __attribute__((stdcall));
 *     HRESULT (*RemoveLastWriterPackageFamilyName)(IZoneIdentifier2 *) __attribute__((stdcall));
 *     HRESULT (*GetAppZoneId)(IZoneIdentifier2 *, DWORD *) __attribute__((stdcall));
 *     HRESULT (*SetAppZoneId)(IZoneIdentifier2 *, DWORD) __attribute__((stdcall));
 *     HRESULT (*RemoveAppZoneId)(IZoneIdentifier2 *) __attribute__((stdcall));
 * }
 * }
 */
public class IZoneIdentifier2Vtbl {

    IZoneIdentifier2Vtbl() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("QueryInterface"),
        wgl_h.C_POINTER.withName("AddRef"),
        wgl_h.C_POINTER.withName("Release"),
        wgl_h.C_POINTER.withName("GetId"),
        wgl_h.C_POINTER.withName("SetId"),
        wgl_h.C_POINTER.withName("Remove"),
        wgl_h.C_POINTER.withName("GetLastWriterPackageFamilyName"),
        wgl_h.C_POINTER.withName("SetLastWriterPackageFamilyName"),
        wgl_h.C_POINTER.withName("RemoveLastWriterPackageFamilyName"),
        wgl_h.C_POINTER.withName("GetAppZoneId"),
        wgl_h.C_POINTER.withName("SetAppZoneId"),
        wgl_h.C_POINTER.withName("RemoveAppZoneId")
    ).withName("IZoneIdentifier2Vtbl");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IZoneIdentifier2 *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static class QueryInterface {

        QueryInterface() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(QueryInterface.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(QueryInterface.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout QueryInterface$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("QueryInterface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IZoneIdentifier2 *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout QueryInterface$layout() {
        return QueryInterface$LAYOUT;
    }

    private static final long QueryInterface$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IZoneIdentifier2 *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final long QueryInterface$offset() {
        return QueryInterface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IZoneIdentifier2 *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment QueryInterface(MemorySegment struct) {
        return struct.get(QueryInterface$LAYOUT, QueryInterface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IZoneIdentifier2 *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static void QueryInterface(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(QueryInterface$LAYOUT, QueryInterface$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*AddRef)(IZoneIdentifier2 *) __attribute__((stdcall))
     * }
     */
    public static class AddRef {

        AddRef() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(AddRef.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(AddRef.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout AddRef$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("AddRef"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IZoneIdentifier2 *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout AddRef$layout() {
        return AddRef$LAYOUT;
    }

    private static final long AddRef$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IZoneIdentifier2 *) __attribute__((stdcall))
     * }
     */
    public static final long AddRef$offset() {
        return AddRef$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IZoneIdentifier2 *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment AddRef(MemorySegment struct) {
        return struct.get(AddRef$LAYOUT, AddRef$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IZoneIdentifier2 *) __attribute__((stdcall))
     * }
     */
    public static void AddRef(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(AddRef$LAYOUT, AddRef$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*Release)(IZoneIdentifier2 *) __attribute__((stdcall))
     * }
     */
    public static class Release {

        Release() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Release.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Release.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Release$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Release"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IZoneIdentifier2 *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Release$layout() {
        return Release$LAYOUT;
    }

    private static final long Release$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IZoneIdentifier2 *) __attribute__((stdcall))
     * }
     */
    public static final long Release$offset() {
        return Release$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IZoneIdentifier2 *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Release(MemorySegment struct) {
        return struct.get(Release$LAYOUT, Release$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IZoneIdentifier2 *) __attribute__((stdcall))
     * }
     */
    public static void Release(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Release$LAYOUT, Release$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetId)(IZoneIdentifier2 *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static class GetId {

        GetId() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetId.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetId.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetId$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetId)(IZoneIdentifier2 *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetId$layout() {
        return GetId$LAYOUT;
    }

    private static final long GetId$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetId)(IZoneIdentifier2 *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static final long GetId$offset() {
        return GetId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetId)(IZoneIdentifier2 *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetId(MemorySegment struct) {
        return struct.get(GetId$LAYOUT, GetId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetId)(IZoneIdentifier2 *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static void GetId(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetId$LAYOUT, GetId$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetId)(IZoneIdentifier2 *, DWORD) __attribute__((stdcall))
     * }
     */
    public static class SetId {

        SetId() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetId.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetId.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetId$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetId)(IZoneIdentifier2 *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetId$layout() {
        return SetId$LAYOUT;
    }

    private static final long SetId$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetId)(IZoneIdentifier2 *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final long SetId$offset() {
        return SetId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetId)(IZoneIdentifier2 *, DWORD) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetId(MemorySegment struct) {
        return struct.get(SetId$LAYOUT, SetId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetId)(IZoneIdentifier2 *, DWORD) __attribute__((stdcall))
     * }
     */
    public static void SetId(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetId$LAYOUT, SetId$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*Remove)(IZoneIdentifier2 *) __attribute__((stdcall))
     * }
     */
    public static class Remove {

        Remove() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Remove.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Remove.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Remove$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Remove"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*Remove)(IZoneIdentifier2 *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Remove$layout() {
        return Remove$LAYOUT;
    }

    private static final long Remove$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*Remove)(IZoneIdentifier2 *) __attribute__((stdcall))
     * }
     */
    public static final long Remove$offset() {
        return Remove$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*Remove)(IZoneIdentifier2 *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Remove(MemorySegment struct) {
        return struct.get(Remove$LAYOUT, Remove$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*Remove)(IZoneIdentifier2 *) __attribute__((stdcall))
     * }
     */
    public static void Remove(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Remove$LAYOUT, Remove$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetLastWriterPackageFamilyName)(IZoneIdentifier2 *, LPWSTR *) __attribute__((stdcall))
     * }
     */
    public static class GetLastWriterPackageFamilyName {

        GetLastWriterPackageFamilyName() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetLastWriterPackageFamilyName.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetLastWriterPackageFamilyName.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetLastWriterPackageFamilyName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetLastWriterPackageFamilyName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetLastWriterPackageFamilyName)(IZoneIdentifier2 *, LPWSTR *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetLastWriterPackageFamilyName$layout() {
        return GetLastWriterPackageFamilyName$LAYOUT;
    }

    private static final long GetLastWriterPackageFamilyName$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetLastWriterPackageFamilyName)(IZoneIdentifier2 *, LPWSTR *) __attribute__((stdcall))
     * }
     */
    public static final long GetLastWriterPackageFamilyName$offset() {
        return GetLastWriterPackageFamilyName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetLastWriterPackageFamilyName)(IZoneIdentifier2 *, LPWSTR *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetLastWriterPackageFamilyName(MemorySegment struct) {
        return struct.get(GetLastWriterPackageFamilyName$LAYOUT, GetLastWriterPackageFamilyName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetLastWriterPackageFamilyName)(IZoneIdentifier2 *, LPWSTR *) __attribute__((stdcall))
     * }
     */
    public static void GetLastWriterPackageFamilyName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetLastWriterPackageFamilyName$LAYOUT, GetLastWriterPackageFamilyName$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetLastWriterPackageFamilyName)(IZoneIdentifier2 *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static class SetLastWriterPackageFamilyName {

        SetLastWriterPackageFamilyName() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetLastWriterPackageFamilyName.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetLastWriterPackageFamilyName.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetLastWriterPackageFamilyName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetLastWriterPackageFamilyName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetLastWriterPackageFamilyName)(IZoneIdentifier2 *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetLastWriterPackageFamilyName$layout() {
        return SetLastWriterPackageFamilyName$LAYOUT;
    }

    private static final long SetLastWriterPackageFamilyName$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetLastWriterPackageFamilyName)(IZoneIdentifier2 *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static final long SetLastWriterPackageFamilyName$offset() {
        return SetLastWriterPackageFamilyName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetLastWriterPackageFamilyName)(IZoneIdentifier2 *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetLastWriterPackageFamilyName(MemorySegment struct) {
        return struct.get(SetLastWriterPackageFamilyName$LAYOUT, SetLastWriterPackageFamilyName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetLastWriterPackageFamilyName)(IZoneIdentifier2 *, LPCWSTR) __attribute__((stdcall))
     * }
     */
    public static void SetLastWriterPackageFamilyName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetLastWriterPackageFamilyName$LAYOUT, SetLastWriterPackageFamilyName$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*RemoveLastWriterPackageFamilyName)(IZoneIdentifier2 *) __attribute__((stdcall))
     * }
     */
    public static class RemoveLastWriterPackageFamilyName {

        RemoveLastWriterPackageFamilyName() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(RemoveLastWriterPackageFamilyName.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(RemoveLastWriterPackageFamilyName.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout RemoveLastWriterPackageFamilyName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("RemoveLastWriterPackageFamilyName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*RemoveLastWriterPackageFamilyName)(IZoneIdentifier2 *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout RemoveLastWriterPackageFamilyName$layout() {
        return RemoveLastWriterPackageFamilyName$LAYOUT;
    }

    private static final long RemoveLastWriterPackageFamilyName$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*RemoveLastWriterPackageFamilyName)(IZoneIdentifier2 *) __attribute__((stdcall))
     * }
     */
    public static final long RemoveLastWriterPackageFamilyName$offset() {
        return RemoveLastWriterPackageFamilyName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*RemoveLastWriterPackageFamilyName)(IZoneIdentifier2 *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment RemoveLastWriterPackageFamilyName(MemorySegment struct) {
        return struct.get(RemoveLastWriterPackageFamilyName$LAYOUT, RemoveLastWriterPackageFamilyName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*RemoveLastWriterPackageFamilyName)(IZoneIdentifier2 *) __attribute__((stdcall))
     * }
     */
    public static void RemoveLastWriterPackageFamilyName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(RemoveLastWriterPackageFamilyName$LAYOUT, RemoveLastWriterPackageFamilyName$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetAppZoneId)(IZoneIdentifier2 *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static class GetAppZoneId {

        GetAppZoneId() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetAppZoneId.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetAppZoneId.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetAppZoneId$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetAppZoneId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetAppZoneId)(IZoneIdentifier2 *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetAppZoneId$layout() {
        return GetAppZoneId$LAYOUT;
    }

    private static final long GetAppZoneId$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetAppZoneId)(IZoneIdentifier2 *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static final long GetAppZoneId$offset() {
        return GetAppZoneId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetAppZoneId)(IZoneIdentifier2 *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetAppZoneId(MemorySegment struct) {
        return struct.get(GetAppZoneId$LAYOUT, GetAppZoneId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetAppZoneId)(IZoneIdentifier2 *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static void GetAppZoneId(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetAppZoneId$LAYOUT, GetAppZoneId$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetAppZoneId)(IZoneIdentifier2 *, DWORD) __attribute__((stdcall))
     * }
     */
    public static class SetAppZoneId {

        SetAppZoneId() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetAppZoneId.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetAppZoneId.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetAppZoneId$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetAppZoneId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetAppZoneId)(IZoneIdentifier2 *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetAppZoneId$layout() {
        return SetAppZoneId$LAYOUT;
    }

    private static final long SetAppZoneId$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetAppZoneId)(IZoneIdentifier2 *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final long SetAppZoneId$offset() {
        return SetAppZoneId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetAppZoneId)(IZoneIdentifier2 *, DWORD) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetAppZoneId(MemorySegment struct) {
        return struct.get(SetAppZoneId$LAYOUT, SetAppZoneId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetAppZoneId)(IZoneIdentifier2 *, DWORD) __attribute__((stdcall))
     * }
     */
    public static void SetAppZoneId(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetAppZoneId$LAYOUT, SetAppZoneId$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*RemoveAppZoneId)(IZoneIdentifier2 *) __attribute__((stdcall))
     * }
     */
    public static class RemoveAppZoneId {

        RemoveAppZoneId() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(RemoveAppZoneId.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(RemoveAppZoneId.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout RemoveAppZoneId$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("RemoveAppZoneId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*RemoveAppZoneId)(IZoneIdentifier2 *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout RemoveAppZoneId$layout() {
        return RemoveAppZoneId$LAYOUT;
    }

    private static final long RemoveAppZoneId$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*RemoveAppZoneId)(IZoneIdentifier2 *) __attribute__((stdcall))
     * }
     */
    public static final long RemoveAppZoneId$offset() {
        return RemoveAppZoneId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*RemoveAppZoneId)(IZoneIdentifier2 *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment RemoveAppZoneId(MemorySegment struct) {
        return struct.get(RemoveAppZoneId$LAYOUT, RemoveAppZoneId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*RemoveAppZoneId)(IZoneIdentifier2 *) __attribute__((stdcall))
     * }
     */
    public static void RemoveAppZoneId(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(RemoveAppZoneId$LAYOUT, RemoveAppZoneId$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

