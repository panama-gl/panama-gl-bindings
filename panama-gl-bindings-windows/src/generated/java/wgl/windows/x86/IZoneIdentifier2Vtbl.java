// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class IZoneIdentifier2Vtbl {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetId"),
        Constants$root.C_POINTER$LAYOUT.withName("SetId"),
        Constants$root.C_POINTER$LAYOUT.withName("Remove"),
        Constants$root.C_POINTER$LAYOUT.withName("GetLastWriterPackageFamilyName"),
        Constants$root.C_POINTER$LAYOUT.withName("SetLastWriterPackageFamilyName"),
        Constants$root.C_POINTER$LAYOUT.withName("RemoveLastWriterPackageFamilyName"),
        Constants$root.C_POINTER$LAYOUT.withName("GetAppZoneId"),
        Constants$root.C_POINTER$LAYOUT.withName("SetAppZoneId"),
        Constants$root.C_POINTER$LAYOUT.withName("RemoveAppZoneId")
    ).withName("IZoneIdentifier2Vtbl");
    public static MemoryLayout $LAYOUT() {
        return IZoneIdentifier2Vtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        IZoneIdentifier2Vtbl.QueryInterface$FUNC
    );
    public interface QueryInterface {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(QueryInterface fi, MemorySession session) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IZoneIdentifier2Vtbl.QueryInterface$FUNC, session);
        }
        static QueryInterface ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IZoneIdentifier2Vtbl.QueryInterface$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IZoneIdentifier2Vtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IZoneIdentifier2Vtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IZoneIdentifier2Vtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IZoneIdentifier2Vtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IZoneIdentifier2Vtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment, MemorySession session) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), session);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        IZoneIdentifier2Vtbl.AddRef$FUNC
    );
    public interface AddRef {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(AddRef fi, MemorySession session) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IZoneIdentifier2Vtbl.AddRef$FUNC, session);
        }
        static AddRef ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IZoneIdentifier2Vtbl.AddRef$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IZoneIdentifier2Vtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IZoneIdentifier2Vtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IZoneIdentifier2Vtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IZoneIdentifier2Vtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IZoneIdentifier2Vtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment, MemorySession session) {
        return AddRef.ofAddress(AddRef$get(segment), session);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        IZoneIdentifier2Vtbl.Release$FUNC
    );
    public interface Release {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Release fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Release.class, fi, IZoneIdentifier2Vtbl.Release$FUNC, session);
        }
        static Release ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IZoneIdentifier2Vtbl.Release$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IZoneIdentifier2Vtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IZoneIdentifier2Vtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IZoneIdentifier2Vtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IZoneIdentifier2Vtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IZoneIdentifier2Vtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment, MemorySession session) {
        return Release.ofAddress(Release$get(segment), session);
    }
    static final FunctionDescriptor GetId$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetId$MH = RuntimeHelper.downcallHandle(
        IZoneIdentifier2Vtbl.GetId$FUNC
    );
    public interface GetId {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetId fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetId.class, fi, IZoneIdentifier2Vtbl.GetId$FUNC, session);
        }
        static GetId ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IZoneIdentifier2Vtbl.GetId$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetId"));
    public static VarHandle GetId$VH() {
        return IZoneIdentifier2Vtbl.GetId$VH;
    }
    public static MemoryAddress GetId$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IZoneIdentifier2Vtbl.GetId$VH.get(seg);
    }
    public static void GetId$set( MemorySegment seg, MemoryAddress x) {
        IZoneIdentifier2Vtbl.GetId$VH.set(seg, x);
    }
    public static MemoryAddress GetId$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IZoneIdentifier2Vtbl.GetId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetId$set(MemorySegment seg, long index, MemoryAddress x) {
        IZoneIdentifier2Vtbl.GetId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetId GetId (MemorySegment segment, MemorySession session) {
        return GetId.ofAddress(GetId$get(segment), session);
    }
    static final FunctionDescriptor SetId$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetId$MH = RuntimeHelper.downcallHandle(
        IZoneIdentifier2Vtbl.SetId$FUNC
    );
    public interface SetId {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(SetId fi, MemorySession session) {
            return RuntimeHelper.upcallStub(SetId.class, fi, IZoneIdentifier2Vtbl.SetId$FUNC, session);
        }
        static SetId ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    return (int)IZoneIdentifier2Vtbl.SetId$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetId"));
    public static VarHandle SetId$VH() {
        return IZoneIdentifier2Vtbl.SetId$VH;
    }
    public static MemoryAddress SetId$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IZoneIdentifier2Vtbl.SetId$VH.get(seg);
    }
    public static void SetId$set( MemorySegment seg, MemoryAddress x) {
        IZoneIdentifier2Vtbl.SetId$VH.set(seg, x);
    }
    public static MemoryAddress SetId$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IZoneIdentifier2Vtbl.SetId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetId$set(MemorySegment seg, long index, MemoryAddress x) {
        IZoneIdentifier2Vtbl.SetId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetId SetId (MemorySegment segment, MemorySession session) {
        return SetId.ofAddress(SetId$get(segment), session);
    }
    static final FunctionDescriptor Remove$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Remove$MH = RuntimeHelper.downcallHandle(
        IZoneIdentifier2Vtbl.Remove$FUNC
    );
    public interface Remove {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Remove fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Remove.class, fi, IZoneIdentifier2Vtbl.Remove$FUNC, session);
        }
        static Remove ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IZoneIdentifier2Vtbl.Remove$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Remove$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Remove"));
    public static VarHandle Remove$VH() {
        return IZoneIdentifier2Vtbl.Remove$VH;
    }
    public static MemoryAddress Remove$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IZoneIdentifier2Vtbl.Remove$VH.get(seg);
    }
    public static void Remove$set( MemorySegment seg, MemoryAddress x) {
        IZoneIdentifier2Vtbl.Remove$VH.set(seg, x);
    }
    public static MemoryAddress Remove$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IZoneIdentifier2Vtbl.Remove$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Remove$set(MemorySegment seg, long index, MemoryAddress x) {
        IZoneIdentifier2Vtbl.Remove$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Remove Remove (MemorySegment segment, MemorySession session) {
        return Remove.ofAddress(Remove$get(segment), session);
    }
    static final FunctionDescriptor GetLastWriterPackageFamilyName$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetLastWriterPackageFamilyName$MH = RuntimeHelper.downcallHandle(
        IZoneIdentifier2Vtbl.GetLastWriterPackageFamilyName$FUNC
    );
    public interface GetLastWriterPackageFamilyName {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetLastWriterPackageFamilyName fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetLastWriterPackageFamilyName.class, fi, IZoneIdentifier2Vtbl.GetLastWriterPackageFamilyName$FUNC, session);
        }
        static GetLastWriterPackageFamilyName ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IZoneIdentifier2Vtbl.GetLastWriterPackageFamilyName$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetLastWriterPackageFamilyName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetLastWriterPackageFamilyName"));
    public static VarHandle GetLastWriterPackageFamilyName$VH() {
        return IZoneIdentifier2Vtbl.GetLastWriterPackageFamilyName$VH;
    }
    public static MemoryAddress GetLastWriterPackageFamilyName$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IZoneIdentifier2Vtbl.GetLastWriterPackageFamilyName$VH.get(seg);
    }
    public static void GetLastWriterPackageFamilyName$set( MemorySegment seg, MemoryAddress x) {
        IZoneIdentifier2Vtbl.GetLastWriterPackageFamilyName$VH.set(seg, x);
    }
    public static MemoryAddress GetLastWriterPackageFamilyName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IZoneIdentifier2Vtbl.GetLastWriterPackageFamilyName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetLastWriterPackageFamilyName$set(MemorySegment seg, long index, MemoryAddress x) {
        IZoneIdentifier2Vtbl.GetLastWriterPackageFamilyName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetLastWriterPackageFamilyName GetLastWriterPackageFamilyName (MemorySegment segment, MemorySession session) {
        return GetLastWriterPackageFamilyName.ofAddress(GetLastWriterPackageFamilyName$get(segment), session);
    }
    static final FunctionDescriptor SetLastWriterPackageFamilyName$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetLastWriterPackageFamilyName$MH = RuntimeHelper.downcallHandle(
        IZoneIdentifier2Vtbl.SetLastWriterPackageFamilyName$FUNC
    );
    public interface SetLastWriterPackageFamilyName {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(SetLastWriterPackageFamilyName fi, MemorySession session) {
            return RuntimeHelper.upcallStub(SetLastWriterPackageFamilyName.class, fi, IZoneIdentifier2Vtbl.SetLastWriterPackageFamilyName$FUNC, session);
        }
        static SetLastWriterPackageFamilyName ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IZoneIdentifier2Vtbl.SetLastWriterPackageFamilyName$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetLastWriterPackageFamilyName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetLastWriterPackageFamilyName"));
    public static VarHandle SetLastWriterPackageFamilyName$VH() {
        return IZoneIdentifier2Vtbl.SetLastWriterPackageFamilyName$VH;
    }
    public static MemoryAddress SetLastWriterPackageFamilyName$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IZoneIdentifier2Vtbl.SetLastWriterPackageFamilyName$VH.get(seg);
    }
    public static void SetLastWriterPackageFamilyName$set( MemorySegment seg, MemoryAddress x) {
        IZoneIdentifier2Vtbl.SetLastWriterPackageFamilyName$VH.set(seg, x);
    }
    public static MemoryAddress SetLastWriterPackageFamilyName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IZoneIdentifier2Vtbl.SetLastWriterPackageFamilyName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetLastWriterPackageFamilyName$set(MemorySegment seg, long index, MemoryAddress x) {
        IZoneIdentifier2Vtbl.SetLastWriterPackageFamilyName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetLastWriterPackageFamilyName SetLastWriterPackageFamilyName (MemorySegment segment, MemorySession session) {
        return SetLastWriterPackageFamilyName.ofAddress(SetLastWriterPackageFamilyName$get(segment), session);
    }
    static final FunctionDescriptor RemoveLastWriterPackageFamilyName$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RemoveLastWriterPackageFamilyName$MH = RuntimeHelper.downcallHandle(
        IZoneIdentifier2Vtbl.RemoveLastWriterPackageFamilyName$FUNC
    );
    public interface RemoveLastWriterPackageFamilyName {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(RemoveLastWriterPackageFamilyName fi, MemorySession session) {
            return RuntimeHelper.upcallStub(RemoveLastWriterPackageFamilyName.class, fi, IZoneIdentifier2Vtbl.RemoveLastWriterPackageFamilyName$FUNC, session);
        }
        static RemoveLastWriterPackageFamilyName ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IZoneIdentifier2Vtbl.RemoveLastWriterPackageFamilyName$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle RemoveLastWriterPackageFamilyName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RemoveLastWriterPackageFamilyName"));
    public static VarHandle RemoveLastWriterPackageFamilyName$VH() {
        return IZoneIdentifier2Vtbl.RemoveLastWriterPackageFamilyName$VH;
    }
    public static MemoryAddress RemoveLastWriterPackageFamilyName$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IZoneIdentifier2Vtbl.RemoveLastWriterPackageFamilyName$VH.get(seg);
    }
    public static void RemoveLastWriterPackageFamilyName$set( MemorySegment seg, MemoryAddress x) {
        IZoneIdentifier2Vtbl.RemoveLastWriterPackageFamilyName$VH.set(seg, x);
    }
    public static MemoryAddress RemoveLastWriterPackageFamilyName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IZoneIdentifier2Vtbl.RemoveLastWriterPackageFamilyName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RemoveLastWriterPackageFamilyName$set(MemorySegment seg, long index, MemoryAddress x) {
        IZoneIdentifier2Vtbl.RemoveLastWriterPackageFamilyName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RemoveLastWriterPackageFamilyName RemoveLastWriterPackageFamilyName (MemorySegment segment, MemorySession session) {
        return RemoveLastWriterPackageFamilyName.ofAddress(RemoveLastWriterPackageFamilyName$get(segment), session);
    }
    static final FunctionDescriptor GetAppZoneId$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetAppZoneId$MH = RuntimeHelper.downcallHandle(
        IZoneIdentifier2Vtbl.GetAppZoneId$FUNC
    );
    public interface GetAppZoneId {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetAppZoneId fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetAppZoneId.class, fi, IZoneIdentifier2Vtbl.GetAppZoneId$FUNC, session);
        }
        static GetAppZoneId ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IZoneIdentifier2Vtbl.GetAppZoneId$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetAppZoneId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetAppZoneId"));
    public static VarHandle GetAppZoneId$VH() {
        return IZoneIdentifier2Vtbl.GetAppZoneId$VH;
    }
    public static MemoryAddress GetAppZoneId$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IZoneIdentifier2Vtbl.GetAppZoneId$VH.get(seg);
    }
    public static void GetAppZoneId$set( MemorySegment seg, MemoryAddress x) {
        IZoneIdentifier2Vtbl.GetAppZoneId$VH.set(seg, x);
    }
    public static MemoryAddress GetAppZoneId$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IZoneIdentifier2Vtbl.GetAppZoneId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetAppZoneId$set(MemorySegment seg, long index, MemoryAddress x) {
        IZoneIdentifier2Vtbl.GetAppZoneId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetAppZoneId GetAppZoneId (MemorySegment segment, MemorySession session) {
        return GetAppZoneId.ofAddress(GetAppZoneId$get(segment), session);
    }
    static final FunctionDescriptor SetAppZoneId$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetAppZoneId$MH = RuntimeHelper.downcallHandle(
        IZoneIdentifier2Vtbl.SetAppZoneId$FUNC
    );
    public interface SetAppZoneId {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(SetAppZoneId fi, MemorySession session) {
            return RuntimeHelper.upcallStub(SetAppZoneId.class, fi, IZoneIdentifier2Vtbl.SetAppZoneId$FUNC, session);
        }
        static SetAppZoneId ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    return (int)IZoneIdentifier2Vtbl.SetAppZoneId$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetAppZoneId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetAppZoneId"));
    public static VarHandle SetAppZoneId$VH() {
        return IZoneIdentifier2Vtbl.SetAppZoneId$VH;
    }
    public static MemoryAddress SetAppZoneId$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IZoneIdentifier2Vtbl.SetAppZoneId$VH.get(seg);
    }
    public static void SetAppZoneId$set( MemorySegment seg, MemoryAddress x) {
        IZoneIdentifier2Vtbl.SetAppZoneId$VH.set(seg, x);
    }
    public static MemoryAddress SetAppZoneId$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IZoneIdentifier2Vtbl.SetAppZoneId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetAppZoneId$set(MemorySegment seg, long index, MemoryAddress x) {
        IZoneIdentifier2Vtbl.SetAppZoneId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetAppZoneId SetAppZoneId (MemorySegment segment, MemorySession session) {
        return SetAppZoneId.ofAddress(SetAppZoneId$get(segment), session);
    }
    static final FunctionDescriptor RemoveAppZoneId$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RemoveAppZoneId$MH = RuntimeHelper.downcallHandle(
        IZoneIdentifier2Vtbl.RemoveAppZoneId$FUNC
    );
    public interface RemoveAppZoneId {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(RemoveAppZoneId fi, MemorySession session) {
            return RuntimeHelper.upcallStub(RemoveAppZoneId.class, fi, IZoneIdentifier2Vtbl.RemoveAppZoneId$FUNC, session);
        }
        static RemoveAppZoneId ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IZoneIdentifier2Vtbl.RemoveAppZoneId$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle RemoveAppZoneId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RemoveAppZoneId"));
    public static VarHandle RemoveAppZoneId$VH() {
        return IZoneIdentifier2Vtbl.RemoveAppZoneId$VH;
    }
    public static MemoryAddress RemoveAppZoneId$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IZoneIdentifier2Vtbl.RemoveAppZoneId$VH.get(seg);
    }
    public static void RemoveAppZoneId$set( MemorySegment seg, MemoryAddress x) {
        IZoneIdentifier2Vtbl.RemoveAppZoneId$VH.set(seg, x);
    }
    public static MemoryAddress RemoveAppZoneId$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IZoneIdentifier2Vtbl.RemoveAppZoneId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RemoveAppZoneId$set(MemorySegment seg, long index, MemoryAddress x) {
        IZoneIdentifier2Vtbl.RemoveAppZoneId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RemoveAppZoneId RemoveAppZoneId (MemorySegment segment, MemorySession session) {
        return RemoveAppZoneId.ofAddress(RemoveAppZoneId$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


