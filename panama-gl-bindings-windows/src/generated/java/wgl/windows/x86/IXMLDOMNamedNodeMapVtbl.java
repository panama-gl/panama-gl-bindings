// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct IXMLDOMNamedNodeMapVtbl {
 *     HRESULT (*QueryInterface)(IXMLDOMNamedNodeMap *, const IID *const, void **) __attribute__((stdcall));
 *     ULONG (*AddRef)(IXMLDOMNamedNodeMap *) __attribute__((stdcall));
 *     ULONG (*Release)(IXMLDOMNamedNodeMap *) __attribute__((stdcall));
 *     HRESULT (*GetTypeInfoCount)(IXMLDOMNamedNodeMap *, UINT *) __attribute__((stdcall));
 *     HRESULT (*GetTypeInfo)(IXMLDOMNamedNodeMap *, UINT, LCID, ITypeInfo **) __attribute__((stdcall));
 *     HRESULT (*GetIDsOfNames)(IXMLDOMNamedNodeMap *, const IID *const, LPOLESTR *, UINT, LCID, DISPID *) __attribute__((stdcall));
 *     HRESULT (*Invoke)(IXMLDOMNamedNodeMap *, DISPID, const IID *const, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *) __attribute__((stdcall));
 *     HRESULT (*getNamedItem)(IXMLDOMNamedNodeMap *, BSTR, IXMLDOMNode **) __attribute__((stdcall));
 *     HRESULT (*setNamedItem)(IXMLDOMNamedNodeMap *, IXMLDOMNode *, IXMLDOMNode **) __attribute__((stdcall));
 *     HRESULT (*removeNamedItem)(IXMLDOMNamedNodeMap *, BSTR, IXMLDOMNode **) __attribute__((stdcall));
 *     HRESULT (*get_item)(IXMLDOMNamedNodeMap *, long, IXMLDOMNode **) __attribute__((stdcall));
 *     HRESULT (*get_length)(IXMLDOMNamedNodeMap *, long *) __attribute__((stdcall));
 *     HRESULT (*getQualifiedItem)(IXMLDOMNamedNodeMap *, BSTR, BSTR, IXMLDOMNode **) __attribute__((stdcall));
 *     HRESULT (*removeQualifiedItem)(IXMLDOMNamedNodeMap *, BSTR, BSTR, IXMLDOMNode **) __attribute__((stdcall));
 *     HRESULT (*nextNode)(IXMLDOMNamedNodeMap *, IXMLDOMNode **) __attribute__((stdcall));
 *     HRESULT (*reset)(IXMLDOMNamedNodeMap *) __attribute__((stdcall));
 *     HRESULT (*get__newEnum)(IXMLDOMNamedNodeMap *, IUnknown **) __attribute__((stdcall));
 * }
 * }
 */
public class IXMLDOMNamedNodeMapVtbl {

    IXMLDOMNamedNodeMapVtbl() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("QueryInterface"),
        wgl_h.C_POINTER.withName("AddRef"),
        wgl_h.C_POINTER.withName("Release"),
        wgl_h.C_POINTER.withName("GetTypeInfoCount"),
        wgl_h.C_POINTER.withName("GetTypeInfo"),
        wgl_h.C_POINTER.withName("GetIDsOfNames"),
        wgl_h.C_POINTER.withName("Invoke"),
        wgl_h.C_POINTER.withName("getNamedItem"),
        wgl_h.C_POINTER.withName("setNamedItem"),
        wgl_h.C_POINTER.withName("removeNamedItem"),
        wgl_h.C_POINTER.withName("get_item"),
        wgl_h.C_POINTER.withName("get_length"),
        wgl_h.C_POINTER.withName("getQualifiedItem"),
        wgl_h.C_POINTER.withName("removeQualifiedItem"),
        wgl_h.C_POINTER.withName("nextNode"),
        wgl_h.C_POINTER.withName("reset"),
        wgl_h.C_POINTER.withName("get__newEnum")
    ).withName("IXMLDOMNamedNodeMapVtbl");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IXMLDOMNamedNodeMap *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static class QueryInterface {

        QueryInterface() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(QueryInterface.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(QueryInterface.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout QueryInterface$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("QueryInterface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IXMLDOMNamedNodeMap *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout QueryInterface$layout() {
        return QueryInterface$LAYOUT;
    }

    private static final long QueryInterface$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IXMLDOMNamedNodeMap *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final long QueryInterface$offset() {
        return QueryInterface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IXMLDOMNamedNodeMap *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment QueryInterface(MemorySegment struct) {
        return struct.get(QueryInterface$LAYOUT, QueryInterface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IXMLDOMNamedNodeMap *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static void QueryInterface(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(QueryInterface$LAYOUT, QueryInterface$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*AddRef)(IXMLDOMNamedNodeMap *) __attribute__((stdcall))
     * }
     */
    public static class AddRef {

        AddRef() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(AddRef.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(AddRef.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout AddRef$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("AddRef"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IXMLDOMNamedNodeMap *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout AddRef$layout() {
        return AddRef$LAYOUT;
    }

    private static final long AddRef$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IXMLDOMNamedNodeMap *) __attribute__((stdcall))
     * }
     */
    public static final long AddRef$offset() {
        return AddRef$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IXMLDOMNamedNodeMap *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment AddRef(MemorySegment struct) {
        return struct.get(AddRef$LAYOUT, AddRef$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IXMLDOMNamedNodeMap *) __attribute__((stdcall))
     * }
     */
    public static void AddRef(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(AddRef$LAYOUT, AddRef$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*Release)(IXMLDOMNamedNodeMap *) __attribute__((stdcall))
     * }
     */
    public static class Release {

        Release() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Release.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Release.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Release$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Release"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IXMLDOMNamedNodeMap *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Release$layout() {
        return Release$LAYOUT;
    }

    private static final long Release$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IXMLDOMNamedNodeMap *) __attribute__((stdcall))
     * }
     */
    public static final long Release$offset() {
        return Release$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IXMLDOMNamedNodeMap *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Release(MemorySegment struct) {
        return struct.get(Release$LAYOUT, Release$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IXMLDOMNamedNodeMap *) __attribute__((stdcall))
     * }
     */
    public static void Release(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Release$LAYOUT, Release$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetTypeInfoCount)(IXMLDOMNamedNodeMap *, UINT *) __attribute__((stdcall))
     * }
     */
    public static class GetTypeInfoCount {

        GetTypeInfoCount() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetTypeInfoCount.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetTypeInfoCount.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetTypeInfoCount$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetTypeInfoCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetTypeInfoCount)(IXMLDOMNamedNodeMap *, UINT *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetTypeInfoCount$layout() {
        return GetTypeInfoCount$LAYOUT;
    }

    private static final long GetTypeInfoCount$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetTypeInfoCount)(IXMLDOMNamedNodeMap *, UINT *) __attribute__((stdcall))
     * }
     */
    public static final long GetTypeInfoCount$offset() {
        return GetTypeInfoCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetTypeInfoCount)(IXMLDOMNamedNodeMap *, UINT *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetTypeInfoCount(MemorySegment struct) {
        return struct.get(GetTypeInfoCount$LAYOUT, GetTypeInfoCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetTypeInfoCount)(IXMLDOMNamedNodeMap *, UINT *) __attribute__((stdcall))
     * }
     */
    public static void GetTypeInfoCount(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetTypeInfoCount$LAYOUT, GetTypeInfoCount$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetTypeInfo)(IXMLDOMNamedNodeMap *, UINT, LCID, ITypeInfo **) __attribute__((stdcall))
     * }
     */
    public static class GetTypeInfo {

        GetTypeInfo() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, int _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetTypeInfo.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetTypeInfo.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetTypeInfo$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetTypeInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetTypeInfo)(IXMLDOMNamedNodeMap *, UINT, LCID, ITypeInfo **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetTypeInfo$layout() {
        return GetTypeInfo$LAYOUT;
    }

    private static final long GetTypeInfo$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetTypeInfo)(IXMLDOMNamedNodeMap *, UINT, LCID, ITypeInfo **) __attribute__((stdcall))
     * }
     */
    public static final long GetTypeInfo$offset() {
        return GetTypeInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetTypeInfo)(IXMLDOMNamedNodeMap *, UINT, LCID, ITypeInfo **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetTypeInfo(MemorySegment struct) {
        return struct.get(GetTypeInfo$LAYOUT, GetTypeInfo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetTypeInfo)(IXMLDOMNamedNodeMap *, UINT, LCID, ITypeInfo **) __attribute__((stdcall))
     * }
     */
    public static void GetTypeInfo(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetTypeInfo$LAYOUT, GetTypeInfo$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetIDsOfNames)(IXMLDOMNamedNodeMap *, const IID *const, LPOLESTR *, UINT, LCID, DISPID *) __attribute__((stdcall))
     * }
     */
    public static class GetIDsOfNames {

        GetIDsOfNames() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, int _x3, int _x4, MemorySegment _x5);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetIDsOfNames.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetIDsOfNames.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, int _x3, int _x4, MemorySegment _x5) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetIDsOfNames$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetIDsOfNames"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetIDsOfNames)(IXMLDOMNamedNodeMap *, const IID *const, LPOLESTR *, UINT, LCID, DISPID *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetIDsOfNames$layout() {
        return GetIDsOfNames$LAYOUT;
    }

    private static final long GetIDsOfNames$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetIDsOfNames)(IXMLDOMNamedNodeMap *, const IID *const, LPOLESTR *, UINT, LCID, DISPID *) __attribute__((stdcall))
     * }
     */
    public static final long GetIDsOfNames$offset() {
        return GetIDsOfNames$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetIDsOfNames)(IXMLDOMNamedNodeMap *, const IID *const, LPOLESTR *, UINT, LCID, DISPID *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetIDsOfNames(MemorySegment struct) {
        return struct.get(GetIDsOfNames$LAYOUT, GetIDsOfNames$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetIDsOfNames)(IXMLDOMNamedNodeMap *, const IID *const, LPOLESTR *, UINT, LCID, DISPID *) __attribute__((stdcall))
     * }
     */
    public static void GetIDsOfNames(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetIDsOfNames$LAYOUT, GetIDsOfNames$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*Invoke)(IXMLDOMNamedNodeMap *, DISPID, const IID *const, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *) __attribute__((stdcall))
     * }
     */
    public static class Invoke {

        Invoke() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2, int _x3, short _x4, MemorySegment _x5, MemorySegment _x6, MemorySegment _x7, MemorySegment _x8);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Invoke.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Invoke.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, int _x3, short _x4, MemorySegment _x5, MemorySegment _x6, MemorySegment _x7, MemorySegment _x8) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5, _x6, _x7, _x8);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Invoke$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Invoke"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*Invoke)(IXMLDOMNamedNodeMap *, DISPID, const IID *const, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Invoke$layout() {
        return Invoke$LAYOUT;
    }

    private static final long Invoke$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*Invoke)(IXMLDOMNamedNodeMap *, DISPID, const IID *const, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *) __attribute__((stdcall))
     * }
     */
    public static final long Invoke$offset() {
        return Invoke$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*Invoke)(IXMLDOMNamedNodeMap *, DISPID, const IID *const, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Invoke(MemorySegment struct) {
        return struct.get(Invoke$LAYOUT, Invoke$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*Invoke)(IXMLDOMNamedNodeMap *, DISPID, const IID *const, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *) __attribute__((stdcall))
     * }
     */
    public static void Invoke(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Invoke$LAYOUT, Invoke$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*getNamedItem)(IXMLDOMNamedNodeMap *, BSTR, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static class getNamedItem {

        getNamedItem() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(getNamedItem.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(getNamedItem.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout getNamedItem$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("getNamedItem"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*getNamedItem)(IXMLDOMNamedNodeMap *, BSTR, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout getNamedItem$layout() {
        return getNamedItem$LAYOUT;
    }

    private static final long getNamedItem$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*getNamedItem)(IXMLDOMNamedNodeMap *, BSTR, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final long getNamedItem$offset() {
        return getNamedItem$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*getNamedItem)(IXMLDOMNamedNodeMap *, BSTR, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment getNamedItem(MemorySegment struct) {
        return struct.get(getNamedItem$LAYOUT, getNamedItem$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*getNamedItem)(IXMLDOMNamedNodeMap *, BSTR, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static void getNamedItem(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(getNamedItem$LAYOUT, getNamedItem$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*setNamedItem)(IXMLDOMNamedNodeMap *, IXMLDOMNode *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static class setNamedItem {

        setNamedItem() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(setNamedItem.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(setNamedItem.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout setNamedItem$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("setNamedItem"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*setNamedItem)(IXMLDOMNamedNodeMap *, IXMLDOMNode *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout setNamedItem$layout() {
        return setNamedItem$LAYOUT;
    }

    private static final long setNamedItem$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*setNamedItem)(IXMLDOMNamedNodeMap *, IXMLDOMNode *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final long setNamedItem$offset() {
        return setNamedItem$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*setNamedItem)(IXMLDOMNamedNodeMap *, IXMLDOMNode *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment setNamedItem(MemorySegment struct) {
        return struct.get(setNamedItem$LAYOUT, setNamedItem$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*setNamedItem)(IXMLDOMNamedNodeMap *, IXMLDOMNode *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static void setNamedItem(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(setNamedItem$LAYOUT, setNamedItem$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*removeNamedItem)(IXMLDOMNamedNodeMap *, BSTR, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static class removeNamedItem {

        removeNamedItem() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(removeNamedItem.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(removeNamedItem.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout removeNamedItem$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("removeNamedItem"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*removeNamedItem)(IXMLDOMNamedNodeMap *, BSTR, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout removeNamedItem$layout() {
        return removeNamedItem$LAYOUT;
    }

    private static final long removeNamedItem$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*removeNamedItem)(IXMLDOMNamedNodeMap *, BSTR, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final long removeNamedItem$offset() {
        return removeNamedItem$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*removeNamedItem)(IXMLDOMNamedNodeMap *, BSTR, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment removeNamedItem(MemorySegment struct) {
        return struct.get(removeNamedItem$LAYOUT, removeNamedItem$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*removeNamedItem)(IXMLDOMNamedNodeMap *, BSTR, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static void removeNamedItem(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(removeNamedItem$LAYOUT, removeNamedItem$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*get_item)(IXMLDOMNamedNodeMap *, long, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static class get_item {

        get_item() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(get_item.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_item.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_item$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_item"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*get_item)(IXMLDOMNamedNodeMap *, long, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout get_item$layout() {
        return get_item$LAYOUT;
    }

    private static final long get_item$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*get_item)(IXMLDOMNamedNodeMap *, long, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final long get_item$offset() {
        return get_item$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*get_item)(IXMLDOMNamedNodeMap *, long, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment get_item(MemorySegment struct) {
        return struct.get(get_item$LAYOUT, get_item$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*get_item)(IXMLDOMNamedNodeMap *, long, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static void get_item(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_item$LAYOUT, get_item$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*get_length)(IXMLDOMNamedNodeMap *, long *) __attribute__((stdcall))
     * }
     */
    public static class get_length {

        get_length() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(get_length.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_length.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_length$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_length"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*get_length)(IXMLDOMNamedNodeMap *, long *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout get_length$layout() {
        return get_length$LAYOUT;
    }

    private static final long get_length$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*get_length)(IXMLDOMNamedNodeMap *, long *) __attribute__((stdcall))
     * }
     */
    public static final long get_length$offset() {
        return get_length$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*get_length)(IXMLDOMNamedNodeMap *, long *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment get_length(MemorySegment struct) {
        return struct.get(get_length$LAYOUT, get_length$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*get_length)(IXMLDOMNamedNodeMap *, long *) __attribute__((stdcall))
     * }
     */
    public static void get_length(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_length$LAYOUT, get_length$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*getQualifiedItem)(IXMLDOMNamedNodeMap *, BSTR, BSTR, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static class getQualifiedItem {

        getQualifiedItem() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(getQualifiedItem.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(getQualifiedItem.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout getQualifiedItem$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("getQualifiedItem"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*getQualifiedItem)(IXMLDOMNamedNodeMap *, BSTR, BSTR, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout getQualifiedItem$layout() {
        return getQualifiedItem$LAYOUT;
    }

    private static final long getQualifiedItem$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*getQualifiedItem)(IXMLDOMNamedNodeMap *, BSTR, BSTR, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final long getQualifiedItem$offset() {
        return getQualifiedItem$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*getQualifiedItem)(IXMLDOMNamedNodeMap *, BSTR, BSTR, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment getQualifiedItem(MemorySegment struct) {
        return struct.get(getQualifiedItem$LAYOUT, getQualifiedItem$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*getQualifiedItem)(IXMLDOMNamedNodeMap *, BSTR, BSTR, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static void getQualifiedItem(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(getQualifiedItem$LAYOUT, getQualifiedItem$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*removeQualifiedItem)(IXMLDOMNamedNodeMap *, BSTR, BSTR, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static class removeQualifiedItem {

        removeQualifiedItem() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(removeQualifiedItem.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(removeQualifiedItem.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout removeQualifiedItem$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("removeQualifiedItem"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*removeQualifiedItem)(IXMLDOMNamedNodeMap *, BSTR, BSTR, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout removeQualifiedItem$layout() {
        return removeQualifiedItem$LAYOUT;
    }

    private static final long removeQualifiedItem$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*removeQualifiedItem)(IXMLDOMNamedNodeMap *, BSTR, BSTR, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final long removeQualifiedItem$offset() {
        return removeQualifiedItem$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*removeQualifiedItem)(IXMLDOMNamedNodeMap *, BSTR, BSTR, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment removeQualifiedItem(MemorySegment struct) {
        return struct.get(removeQualifiedItem$LAYOUT, removeQualifiedItem$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*removeQualifiedItem)(IXMLDOMNamedNodeMap *, BSTR, BSTR, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static void removeQualifiedItem(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(removeQualifiedItem$LAYOUT, removeQualifiedItem$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*nextNode)(IXMLDOMNamedNodeMap *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static class nextNode {

        nextNode() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(nextNode.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(nextNode.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout nextNode$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nextNode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*nextNode)(IXMLDOMNamedNodeMap *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout nextNode$layout() {
        return nextNode$LAYOUT;
    }

    private static final long nextNode$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*nextNode)(IXMLDOMNamedNodeMap *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final long nextNode$offset() {
        return nextNode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*nextNode)(IXMLDOMNamedNodeMap *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment nextNode(MemorySegment struct) {
        return struct.get(nextNode$LAYOUT, nextNode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*nextNode)(IXMLDOMNamedNodeMap *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static void nextNode(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nextNode$LAYOUT, nextNode$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*reset)(IXMLDOMNamedNodeMap *) __attribute__((stdcall))
     * }
     */
    public static class reset {

        reset() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(reset.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(reset.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout reset$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("reset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*reset)(IXMLDOMNamedNodeMap *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout reset$layout() {
        return reset$LAYOUT;
    }

    private static final long reset$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*reset)(IXMLDOMNamedNodeMap *) __attribute__((stdcall))
     * }
     */
    public static final long reset$offset() {
        return reset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*reset)(IXMLDOMNamedNodeMap *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment reset(MemorySegment struct) {
        return struct.get(reset$LAYOUT, reset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*reset)(IXMLDOMNamedNodeMap *) __attribute__((stdcall))
     * }
     */
    public static void reset(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(reset$LAYOUT, reset$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*get__newEnum)(IXMLDOMNamedNodeMap *, IUnknown **) __attribute__((stdcall))
     * }
     */
    public static class get__newEnum {

        get__newEnum() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(get__newEnum.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get__newEnum.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get__newEnum$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get__newEnum"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*get__newEnum)(IXMLDOMNamedNodeMap *, IUnknown **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout get__newEnum$layout() {
        return get__newEnum$LAYOUT;
    }

    private static final long get__newEnum$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*get__newEnum)(IXMLDOMNamedNodeMap *, IUnknown **) __attribute__((stdcall))
     * }
     */
    public static final long get__newEnum$offset() {
        return get__newEnum$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*get__newEnum)(IXMLDOMNamedNodeMap *, IUnknown **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment get__newEnum(MemorySegment struct) {
        return struct.get(get__newEnum$LAYOUT, get__newEnum$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*get__newEnum)(IXMLDOMNamedNodeMap *, IUnknown **) __attribute__((stdcall))
     * }
     */
    public static void get__newEnum(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get__newEnum$LAYOUT, get__newEnum$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

