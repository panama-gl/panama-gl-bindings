// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class IXMLDOMNamedNodeMapVtbl {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTypeInfoCount"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTypeInfo"),
        Constants$root.C_POINTER$LAYOUT.withName("GetIDsOfNames"),
        Constants$root.C_POINTER$LAYOUT.withName("Invoke"),
        Constants$root.C_POINTER$LAYOUT.withName("getNamedItem"),
        Constants$root.C_POINTER$LAYOUT.withName("setNamedItem"),
        Constants$root.C_POINTER$LAYOUT.withName("removeNamedItem"),
        Constants$root.C_POINTER$LAYOUT.withName("get_item"),
        Constants$root.C_POINTER$LAYOUT.withName("get_length"),
        Constants$root.C_POINTER$LAYOUT.withName("getQualifiedItem"),
        Constants$root.C_POINTER$LAYOUT.withName("removeQualifiedItem"),
        Constants$root.C_POINTER$LAYOUT.withName("nextNode"),
        Constants$root.C_POINTER$LAYOUT.withName("reset"),
        Constants$root.C_POINTER$LAYOUT.withName("get__newEnum")
    ).withName("IXMLDOMNamedNodeMapVtbl");
    public static MemoryLayout $LAYOUT() {
        return IXMLDOMNamedNodeMapVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        IXMLDOMNamedNodeMapVtbl.QueryInterface$FUNC
    );
    public interface QueryInterface {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(QueryInterface fi, MemorySession session) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IXMLDOMNamedNodeMapVtbl.QueryInterface$FUNC, session);
        }
        static QueryInterface ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.QueryInterface$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IXMLDOMNamedNodeMapVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment, MemorySession session) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), session);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        IXMLDOMNamedNodeMapVtbl.AddRef$FUNC
    );
    public interface AddRef {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(AddRef fi, MemorySession session) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IXMLDOMNamedNodeMapVtbl.AddRef$FUNC, session);
        }
        static AddRef ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.AddRef$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IXMLDOMNamedNodeMapVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment, MemorySession session) {
        return AddRef.ofAddress(AddRef$get(segment), session);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        IXMLDOMNamedNodeMapVtbl.Release$FUNC
    );
    public interface Release {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Release fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Release.class, fi, IXMLDOMNamedNodeMapVtbl.Release$FUNC, session);
        }
        static Release ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.Release$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IXMLDOMNamedNodeMapVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment, MemorySession session) {
        return Release.ofAddress(Release$get(segment), session);
    }
    static final FunctionDescriptor GetTypeInfoCount$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfoCount$MH = RuntimeHelper.downcallHandle(
        IXMLDOMNamedNodeMapVtbl.GetTypeInfoCount$FUNC
    );
    public interface GetTypeInfoCount {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetTypeInfoCount fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetTypeInfoCount.class, fi, IXMLDOMNamedNodeMapVtbl.GetTypeInfoCount$FUNC, session);
        }
        static GetTypeInfoCount ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.GetTypeInfoCount$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfoCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTypeInfoCount"));
    public static VarHandle GetTypeInfoCount$VH() {
        return IXMLDOMNamedNodeMapVtbl.GetTypeInfoCount$VH;
    }
    public static MemoryAddress GetTypeInfoCount$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.GetTypeInfoCount$VH.get(seg);
    }
    public static void GetTypeInfoCount$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.GetTypeInfoCount$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeInfoCount$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.GetTypeInfoCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfoCount$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.GetTypeInfoCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfoCount GetTypeInfoCount (MemorySegment segment, MemorySession session) {
        return GetTypeInfoCount.ofAddress(GetTypeInfoCount$get(segment), session);
    }
    static final FunctionDescriptor GetTypeInfo$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfo$MH = RuntimeHelper.downcallHandle(
        IXMLDOMNamedNodeMapVtbl.GetTypeInfo$FUNC
    );
    public interface GetTypeInfo {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(GetTypeInfo fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetTypeInfo.class, fi, IXMLDOMNamedNodeMapVtbl.GetTypeInfo$FUNC, session);
        }
        static GetTypeInfo ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.GetTypeInfo$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTypeInfo"));
    public static VarHandle GetTypeInfo$VH() {
        return IXMLDOMNamedNodeMapVtbl.GetTypeInfo$VH;
    }
    public static MemoryAddress GetTypeInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.GetTypeInfo$VH.get(seg);
    }
    public static void GetTypeInfo$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.GetTypeInfo$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.GetTypeInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfo$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.GetTypeInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfo GetTypeInfo (MemorySegment segment, MemorySession session) {
        return GetTypeInfo.ofAddress(GetTypeInfo$get(segment), session);
    }
    static final FunctionDescriptor GetIDsOfNames$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetIDsOfNames$MH = RuntimeHelper.downcallHandle(
        IXMLDOMNamedNodeMapVtbl.GetIDsOfNames$FUNC
    );
    public interface GetIDsOfNames {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, int _x3, int _x4, java.lang.foreign.MemoryAddress _x5);
        static MemorySegment allocate(GetIDsOfNames fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetIDsOfNames.class, fi, IXMLDOMNamedNodeMapVtbl.GetIDsOfNames$FUNC, session);
        }
        static GetIDsOfNames ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, int __x3, int __x4, java.lang.foreign.MemoryAddress __x5) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.GetIDsOfNames$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, __x3, __x4, (java.lang.foreign.Addressable)__x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetIDsOfNames$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetIDsOfNames"));
    public static VarHandle GetIDsOfNames$VH() {
        return IXMLDOMNamedNodeMapVtbl.GetIDsOfNames$VH;
    }
    public static MemoryAddress GetIDsOfNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.GetIDsOfNames$VH.get(seg);
    }
    public static void GetIDsOfNames$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.GetIDsOfNames$VH.set(seg, x);
    }
    public static MemoryAddress GetIDsOfNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.GetIDsOfNames$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetIDsOfNames$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.GetIDsOfNames$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetIDsOfNames GetIDsOfNames (MemorySegment segment, MemorySession session) {
        return GetIDsOfNames.ofAddress(GetIDsOfNames$get(segment), session);
    }
    static final FunctionDescriptor Invoke$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Invoke$MH = RuntimeHelper.downcallHandle(
        IXMLDOMNamedNodeMapVtbl.Invoke$FUNC
    );
    public interface Invoke {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2, int _x3, short _x4, java.lang.foreign.MemoryAddress _x5, java.lang.foreign.MemoryAddress _x6, java.lang.foreign.MemoryAddress _x7, java.lang.foreign.MemoryAddress _x8);
        static MemorySegment allocate(Invoke fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Invoke.class, fi, IXMLDOMNamedNodeMapVtbl.Invoke$FUNC, session);
        }
        static Invoke ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2, int __x3, short __x4, java.lang.foreign.MemoryAddress __x5, java.lang.foreign.MemoryAddress __x6, java.lang.foreign.MemoryAddress __x7, java.lang.foreign.MemoryAddress __x8) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.Invoke$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2, __x3, __x4, (java.lang.foreign.Addressable)__x5, (java.lang.foreign.Addressable)__x6, (java.lang.foreign.Addressable)__x7, (java.lang.foreign.Addressable)__x8);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Invoke$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Invoke"));
    public static VarHandle Invoke$VH() {
        return IXMLDOMNamedNodeMapVtbl.Invoke$VH;
    }
    public static MemoryAddress Invoke$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.Invoke$VH.get(seg);
    }
    public static void Invoke$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.Invoke$VH.set(seg, x);
    }
    public static MemoryAddress Invoke$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.Invoke$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Invoke$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.Invoke$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Invoke Invoke (MemorySegment segment, MemorySession session) {
        return Invoke.ofAddress(Invoke$get(segment), session);
    }
    static final FunctionDescriptor getNamedItem$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle getNamedItem$MH = RuntimeHelper.downcallHandle(
        IXMLDOMNamedNodeMapVtbl.getNamedItem$FUNC
    );
    public interface getNamedItem {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(getNamedItem fi, MemorySession session) {
            return RuntimeHelper.upcallStub(getNamedItem.class, fi, IXMLDOMNamedNodeMapVtbl.getNamedItem$FUNC, session);
        }
        static getNamedItem ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.getNamedItem$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle getNamedItem$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("getNamedItem"));
    public static VarHandle getNamedItem$VH() {
        return IXMLDOMNamedNodeMapVtbl.getNamedItem$VH;
    }
    public static MemoryAddress getNamedItem$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.getNamedItem$VH.get(seg);
    }
    public static void getNamedItem$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.getNamedItem$VH.set(seg, x);
    }
    public static MemoryAddress getNamedItem$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.getNamedItem$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void getNamedItem$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.getNamedItem$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static getNamedItem getNamedItem (MemorySegment segment, MemorySession session) {
        return getNamedItem.ofAddress(getNamedItem$get(segment), session);
    }
    static final FunctionDescriptor setNamedItem$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle setNamedItem$MH = RuntimeHelper.downcallHandle(
        IXMLDOMNamedNodeMapVtbl.setNamedItem$FUNC
    );
    public interface setNamedItem {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(setNamedItem fi, MemorySession session) {
            return RuntimeHelper.upcallStub(setNamedItem.class, fi, IXMLDOMNamedNodeMapVtbl.setNamedItem$FUNC, session);
        }
        static setNamedItem ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.setNamedItem$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle setNamedItem$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("setNamedItem"));
    public static VarHandle setNamedItem$VH() {
        return IXMLDOMNamedNodeMapVtbl.setNamedItem$VH;
    }
    public static MemoryAddress setNamedItem$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.setNamedItem$VH.get(seg);
    }
    public static void setNamedItem$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.setNamedItem$VH.set(seg, x);
    }
    public static MemoryAddress setNamedItem$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.setNamedItem$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void setNamedItem$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.setNamedItem$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static setNamedItem setNamedItem (MemorySegment segment, MemorySession session) {
        return setNamedItem.ofAddress(setNamedItem$get(segment), session);
    }
    static final FunctionDescriptor removeNamedItem$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle removeNamedItem$MH = RuntimeHelper.downcallHandle(
        IXMLDOMNamedNodeMapVtbl.removeNamedItem$FUNC
    );
    public interface removeNamedItem {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(removeNamedItem fi, MemorySession session) {
            return RuntimeHelper.upcallStub(removeNamedItem.class, fi, IXMLDOMNamedNodeMapVtbl.removeNamedItem$FUNC, session);
        }
        static removeNamedItem ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.removeNamedItem$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle removeNamedItem$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("removeNamedItem"));
    public static VarHandle removeNamedItem$VH() {
        return IXMLDOMNamedNodeMapVtbl.removeNamedItem$VH;
    }
    public static MemoryAddress removeNamedItem$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.removeNamedItem$VH.get(seg);
    }
    public static void removeNamedItem$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.removeNamedItem$VH.set(seg, x);
    }
    public static MemoryAddress removeNamedItem$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.removeNamedItem$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void removeNamedItem$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.removeNamedItem$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static removeNamedItem removeNamedItem (MemorySegment segment, MemorySession session) {
        return removeNamedItem.ofAddress(removeNamedItem$get(segment), session);
    }
    static final FunctionDescriptor get_item$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_item$MH = RuntimeHelper.downcallHandle(
        IXMLDOMNamedNodeMapVtbl.get_item$FUNC
    );
    public interface get_item {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(get_item fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_item.class, fi, IXMLDOMNamedNodeMapVtbl.get_item$FUNC, session);
        }
        static get_item ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.get_item$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_item$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_item"));
    public static VarHandle get_item$VH() {
        return IXMLDOMNamedNodeMapVtbl.get_item$VH;
    }
    public static MemoryAddress get_item$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.get_item$VH.get(seg);
    }
    public static void get_item$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.get_item$VH.set(seg, x);
    }
    public static MemoryAddress get_item$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.get_item$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_item$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.get_item$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_item get_item (MemorySegment segment, MemorySession session) {
        return get_item.ofAddress(get_item$get(segment), session);
    }
    static final FunctionDescriptor get_length$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_length$MH = RuntimeHelper.downcallHandle(
        IXMLDOMNamedNodeMapVtbl.get_length$FUNC
    );
    public interface get_length {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_length fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_length.class, fi, IXMLDOMNamedNodeMapVtbl.get_length$FUNC, session);
        }
        static get_length ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.get_length$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_length$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_length"));
    public static VarHandle get_length$VH() {
        return IXMLDOMNamedNodeMapVtbl.get_length$VH;
    }
    public static MemoryAddress get_length$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.get_length$VH.get(seg);
    }
    public static void get_length$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.get_length$VH.set(seg, x);
    }
    public static MemoryAddress get_length$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.get_length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_length$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.get_length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_length get_length (MemorySegment segment, MemorySession session) {
        return get_length.ofAddress(get_length$get(segment), session);
    }
    static final FunctionDescriptor getQualifiedItem$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle getQualifiedItem$MH = RuntimeHelper.downcallHandle(
        IXMLDOMNamedNodeMapVtbl.getQualifiedItem$FUNC
    );
    public interface getQualifiedItem {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(getQualifiedItem fi, MemorySession session) {
            return RuntimeHelper.upcallStub(getQualifiedItem.class, fi, IXMLDOMNamedNodeMapVtbl.getQualifiedItem$FUNC, session);
        }
        static getQualifiedItem ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.getQualifiedItem$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle getQualifiedItem$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("getQualifiedItem"));
    public static VarHandle getQualifiedItem$VH() {
        return IXMLDOMNamedNodeMapVtbl.getQualifiedItem$VH;
    }
    public static MemoryAddress getQualifiedItem$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.getQualifiedItem$VH.get(seg);
    }
    public static void getQualifiedItem$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.getQualifiedItem$VH.set(seg, x);
    }
    public static MemoryAddress getQualifiedItem$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.getQualifiedItem$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void getQualifiedItem$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.getQualifiedItem$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static getQualifiedItem getQualifiedItem (MemorySegment segment, MemorySession session) {
        return getQualifiedItem.ofAddress(getQualifiedItem$get(segment), session);
    }
    static final FunctionDescriptor removeQualifiedItem$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle removeQualifiedItem$MH = RuntimeHelper.downcallHandle(
        IXMLDOMNamedNodeMapVtbl.removeQualifiedItem$FUNC
    );
    public interface removeQualifiedItem {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(removeQualifiedItem fi, MemorySession session) {
            return RuntimeHelper.upcallStub(removeQualifiedItem.class, fi, IXMLDOMNamedNodeMapVtbl.removeQualifiedItem$FUNC, session);
        }
        static removeQualifiedItem ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.removeQualifiedItem$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle removeQualifiedItem$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("removeQualifiedItem"));
    public static VarHandle removeQualifiedItem$VH() {
        return IXMLDOMNamedNodeMapVtbl.removeQualifiedItem$VH;
    }
    public static MemoryAddress removeQualifiedItem$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.removeQualifiedItem$VH.get(seg);
    }
    public static void removeQualifiedItem$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.removeQualifiedItem$VH.set(seg, x);
    }
    public static MemoryAddress removeQualifiedItem$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.removeQualifiedItem$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void removeQualifiedItem$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.removeQualifiedItem$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static removeQualifiedItem removeQualifiedItem (MemorySegment segment, MemorySession session) {
        return removeQualifiedItem.ofAddress(removeQualifiedItem$get(segment), session);
    }
    static final FunctionDescriptor nextNode$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle nextNode$MH = RuntimeHelper.downcallHandle(
        IXMLDOMNamedNodeMapVtbl.nextNode$FUNC
    );
    public interface nextNode {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(nextNode fi, MemorySession session) {
            return RuntimeHelper.upcallStub(nextNode.class, fi, IXMLDOMNamedNodeMapVtbl.nextNode$FUNC, session);
        }
        static nextNode ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.nextNode$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle nextNode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nextNode"));
    public static VarHandle nextNode$VH() {
        return IXMLDOMNamedNodeMapVtbl.nextNode$VH;
    }
    public static MemoryAddress nextNode$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.nextNode$VH.get(seg);
    }
    public static void nextNode$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.nextNode$VH.set(seg, x);
    }
    public static MemoryAddress nextNode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.nextNode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nextNode$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.nextNode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static nextNode nextNode (MemorySegment segment, MemorySession session) {
        return nextNode.ofAddress(nextNode$get(segment), session);
    }
    static final FunctionDescriptor reset$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle reset$MH = RuntimeHelper.downcallHandle(
        IXMLDOMNamedNodeMapVtbl.reset$FUNC
    );
    public interface reset {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(reset fi, MemorySession session) {
            return RuntimeHelper.upcallStub(reset.class, fi, IXMLDOMNamedNodeMapVtbl.reset$FUNC, session);
        }
        static reset ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.reset$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle reset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("reset"));
    public static VarHandle reset$VH() {
        return IXMLDOMNamedNodeMapVtbl.reset$VH;
    }
    public static MemoryAddress reset$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.reset$VH.get(seg);
    }
    public static void reset$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.reset$VH.set(seg, x);
    }
    public static MemoryAddress reset$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.reset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void reset$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.reset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static reset reset (MemorySegment segment, MemorySession session) {
        return reset.ofAddress(reset$get(segment), session);
    }
    static final FunctionDescriptor get__newEnum$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get__newEnum$MH = RuntimeHelper.downcallHandle(
        IXMLDOMNamedNodeMapVtbl.get__newEnum$FUNC
    );
    public interface get__newEnum {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get__newEnum fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get__newEnum.class, fi, IXMLDOMNamedNodeMapVtbl.get__newEnum$FUNC, session);
        }
        static get__newEnum ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.get__newEnum$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get__newEnum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get__newEnum"));
    public static VarHandle get__newEnum$VH() {
        return IXMLDOMNamedNodeMapVtbl.get__newEnum$VH;
    }
    public static MemoryAddress get__newEnum$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.get__newEnum$VH.get(seg);
    }
    public static void get__newEnum$set( MemorySegment seg, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.get__newEnum$VH.set(seg, x);
    }
    public static MemoryAddress get__newEnum$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IXMLDOMNamedNodeMapVtbl.get__newEnum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get__newEnum$set(MemorySegment seg, long index, MemoryAddress x) {
        IXMLDOMNamedNodeMapVtbl.get__newEnum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get__newEnum get__newEnum (MemorySegment segment, MemorySession session) {
        return get__newEnum.ofAddress(get__newEnum$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


