// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _CRL_INFO {
 *     DWORD dwVersion;
 *     CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
 *     CERT_NAME_BLOB Issuer;
 *     FILETIME ThisUpdate;
 *     FILETIME NextUpdate;
 *     DWORD cCRLEntry;
 *     PCRL_ENTRY rgCRLEntry;
 *     DWORD cExtension;
 *     PCERT_EXTENSION rgExtension;
 * }
 * }
 */
public class _CRL_INFO {

    _CRL_INFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("dwVersion"),
        MemoryLayout.paddingLayout(4),
        _CRYPT_ALGORITHM_IDENTIFIER.layout().withName("SignatureAlgorithm"),
        _CRYPTOAPI_BLOB.layout().withName("Issuer"),
        _FILETIME.layout().withName("ThisUpdate"),
        _FILETIME.layout().withName("NextUpdate"),
        wgl_h.C_LONG.withName("cCRLEntry"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_POINTER.withName("rgCRLEntry"),
        wgl_h.C_LONG.withName("cExtension"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_POINTER.withName("rgExtension")
    ).withName("_CRL_INFO");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt dwVersion$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwVersion
     * }
     */
    public static final OfInt dwVersion$layout() {
        return dwVersion$LAYOUT;
    }

    private static final long dwVersion$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwVersion
     * }
     */
    public static final long dwVersion$offset() {
        return dwVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwVersion
     * }
     */
    public static int dwVersion(MemorySegment struct) {
        return struct.get(dwVersion$LAYOUT, dwVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwVersion
     * }
     */
    public static void dwVersion(MemorySegment struct, int fieldValue) {
        struct.set(dwVersion$LAYOUT, dwVersion$OFFSET, fieldValue);
    }

    private static final GroupLayout SignatureAlgorithm$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("SignatureAlgorithm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm
     * }
     */
    public static final GroupLayout SignatureAlgorithm$layout() {
        return SignatureAlgorithm$LAYOUT;
    }

    private static final long SignatureAlgorithm$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm
     * }
     */
    public static final long SignatureAlgorithm$offset() {
        return SignatureAlgorithm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm
     * }
     */
    public static MemorySegment SignatureAlgorithm(MemorySegment struct) {
        return struct.asSlice(SignatureAlgorithm$OFFSET, SignatureAlgorithm$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm
     * }
     */
    public static void SignatureAlgorithm(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, SignatureAlgorithm$OFFSET, SignatureAlgorithm$LAYOUT.byteSize());
    }

    private static final GroupLayout Issuer$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Issuer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CERT_NAME_BLOB Issuer
     * }
     */
    public static final GroupLayout Issuer$layout() {
        return Issuer$LAYOUT;
    }

    private static final long Issuer$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CERT_NAME_BLOB Issuer
     * }
     */
    public static final long Issuer$offset() {
        return Issuer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CERT_NAME_BLOB Issuer
     * }
     */
    public static MemorySegment Issuer(MemorySegment struct) {
        return struct.asSlice(Issuer$OFFSET, Issuer$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CERT_NAME_BLOB Issuer
     * }
     */
    public static void Issuer(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Issuer$OFFSET, Issuer$LAYOUT.byteSize());
    }

    private static final GroupLayout ThisUpdate$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ThisUpdate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FILETIME ThisUpdate
     * }
     */
    public static final GroupLayout ThisUpdate$layout() {
        return ThisUpdate$LAYOUT;
    }

    private static final long ThisUpdate$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FILETIME ThisUpdate
     * }
     */
    public static final long ThisUpdate$offset() {
        return ThisUpdate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FILETIME ThisUpdate
     * }
     */
    public static MemorySegment ThisUpdate(MemorySegment struct) {
        return struct.asSlice(ThisUpdate$OFFSET, ThisUpdate$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FILETIME ThisUpdate
     * }
     */
    public static void ThisUpdate(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ThisUpdate$OFFSET, ThisUpdate$LAYOUT.byteSize());
    }

    private static final GroupLayout NextUpdate$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("NextUpdate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FILETIME NextUpdate
     * }
     */
    public static final GroupLayout NextUpdate$layout() {
        return NextUpdate$LAYOUT;
    }

    private static final long NextUpdate$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FILETIME NextUpdate
     * }
     */
    public static final long NextUpdate$offset() {
        return NextUpdate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FILETIME NextUpdate
     * }
     */
    public static MemorySegment NextUpdate(MemorySegment struct) {
        return struct.asSlice(NextUpdate$OFFSET, NextUpdate$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FILETIME NextUpdate
     * }
     */
    public static void NextUpdate(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, NextUpdate$OFFSET, NextUpdate$LAYOUT.byteSize());
    }

    private static final OfInt cCRLEntry$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cCRLEntry"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD cCRLEntry
     * }
     */
    public static final OfInt cCRLEntry$layout() {
        return cCRLEntry$LAYOUT;
    }

    private static final long cCRLEntry$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD cCRLEntry
     * }
     */
    public static final long cCRLEntry$offset() {
        return cCRLEntry$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD cCRLEntry
     * }
     */
    public static int cCRLEntry(MemorySegment struct) {
        return struct.get(cCRLEntry$LAYOUT, cCRLEntry$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD cCRLEntry
     * }
     */
    public static void cCRLEntry(MemorySegment struct, int fieldValue) {
        struct.set(cCRLEntry$LAYOUT, cCRLEntry$OFFSET, fieldValue);
    }

    private static final AddressLayout rgCRLEntry$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("rgCRLEntry"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PCRL_ENTRY rgCRLEntry
     * }
     */
    public static final AddressLayout rgCRLEntry$layout() {
        return rgCRLEntry$LAYOUT;
    }

    private static final long rgCRLEntry$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PCRL_ENTRY rgCRLEntry
     * }
     */
    public static final long rgCRLEntry$offset() {
        return rgCRLEntry$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PCRL_ENTRY rgCRLEntry
     * }
     */
    public static MemorySegment rgCRLEntry(MemorySegment struct) {
        return struct.get(rgCRLEntry$LAYOUT, rgCRLEntry$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PCRL_ENTRY rgCRLEntry
     * }
     */
    public static void rgCRLEntry(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(rgCRLEntry$LAYOUT, rgCRLEntry$OFFSET, fieldValue);
    }

    private static final OfInt cExtension$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cExtension"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD cExtension
     * }
     */
    public static final OfInt cExtension$layout() {
        return cExtension$LAYOUT;
    }

    private static final long cExtension$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD cExtension
     * }
     */
    public static final long cExtension$offset() {
        return cExtension$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD cExtension
     * }
     */
    public static int cExtension(MemorySegment struct) {
        return struct.get(cExtension$LAYOUT, cExtension$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD cExtension
     * }
     */
    public static void cExtension(MemorySegment struct, int fieldValue) {
        struct.set(cExtension$LAYOUT, cExtension$OFFSET, fieldValue);
    }

    private static final AddressLayout rgExtension$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("rgExtension"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PCERT_EXTENSION rgExtension
     * }
     */
    public static final AddressLayout rgExtension$layout() {
        return rgExtension$LAYOUT;
    }

    private static final long rgExtension$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PCERT_EXTENSION rgExtension
     * }
     */
    public static final long rgExtension$offset() {
        return rgExtension$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PCERT_EXTENSION rgExtension
     * }
     */
    public static MemorySegment rgExtension(MemorySegment struct) {
        return struct.get(rgExtension$LAYOUT, rgExtension$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PCERT_EXTENSION rgExtension
     * }
     */
    public static void rgExtension(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(rgExtension$LAYOUT, rgExtension$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

