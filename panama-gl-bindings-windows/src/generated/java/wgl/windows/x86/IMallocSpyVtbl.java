// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct IMallocSpyVtbl {
 *     HRESULT (*QueryInterface)(IMallocSpy *, const IID *const, void **) __attribute__((stdcall));
 *     ULONG (*AddRef)(IMallocSpy *) __attribute__((stdcall));
 *     ULONG (*Release)(IMallocSpy *) __attribute__((stdcall));
 *     SIZE_T (*PreAlloc)(IMallocSpy *, SIZE_T) __attribute__((stdcall));
 *     void *(*PostAlloc)(IMallocSpy *, void *) __attribute__((stdcall));
 *     void *(*PreFree)(IMallocSpy *, void *, BOOL) __attribute__((stdcall));
 *     void (*PostFree)(IMallocSpy *, BOOL) __attribute__((stdcall));
 *     SIZE_T (*PreRealloc)(IMallocSpy *, void *, SIZE_T, void **, BOOL) __attribute__((stdcall));
 *     void *(*PostRealloc)(IMallocSpy *, void *, BOOL) __attribute__((stdcall));
 *     void *(*PreGetSize)(IMallocSpy *, void *, BOOL) __attribute__((stdcall));
 *     SIZE_T (*PostGetSize)(IMallocSpy *, SIZE_T, BOOL) __attribute__((stdcall));
 *     void *(*PreDidAlloc)(IMallocSpy *, void *, BOOL) __attribute__((stdcall));
 *     int (*PostDidAlloc)(IMallocSpy *, void *, BOOL, int) __attribute__((stdcall));
 *     void (*PreHeapMinimize)(IMallocSpy *) __attribute__((stdcall));
 *     void (*PostHeapMinimize)(IMallocSpy *) __attribute__((stdcall));
 * }
 * }
 */
public class IMallocSpyVtbl {

    IMallocSpyVtbl() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("QueryInterface"),
        wgl_h.C_POINTER.withName("AddRef"),
        wgl_h.C_POINTER.withName("Release"),
        wgl_h.C_POINTER.withName("PreAlloc"),
        wgl_h.C_POINTER.withName("PostAlloc"),
        wgl_h.C_POINTER.withName("PreFree"),
        wgl_h.C_POINTER.withName("PostFree"),
        wgl_h.C_POINTER.withName("PreRealloc"),
        wgl_h.C_POINTER.withName("PostRealloc"),
        wgl_h.C_POINTER.withName("PreGetSize"),
        wgl_h.C_POINTER.withName("PostGetSize"),
        wgl_h.C_POINTER.withName("PreDidAlloc"),
        wgl_h.C_POINTER.withName("PostDidAlloc"),
        wgl_h.C_POINTER.withName("PreHeapMinimize"),
        wgl_h.C_POINTER.withName("PostHeapMinimize")
    ).withName("IMallocSpyVtbl");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IMallocSpy *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static class QueryInterface {

        QueryInterface() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(QueryInterface.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(QueryInterface.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout QueryInterface$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("QueryInterface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IMallocSpy *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout QueryInterface$layout() {
        return QueryInterface$LAYOUT;
    }

    private static final long QueryInterface$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IMallocSpy *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final long QueryInterface$offset() {
        return QueryInterface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IMallocSpy *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment QueryInterface(MemorySegment struct) {
        return struct.get(QueryInterface$LAYOUT, QueryInterface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IMallocSpy *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static void QueryInterface(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(QueryInterface$LAYOUT, QueryInterface$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*AddRef)(IMallocSpy *) __attribute__((stdcall))
     * }
     */
    public static class AddRef {

        AddRef() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(AddRef.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(AddRef.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout AddRef$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("AddRef"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IMallocSpy *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout AddRef$layout() {
        return AddRef$LAYOUT;
    }

    private static final long AddRef$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IMallocSpy *) __attribute__((stdcall))
     * }
     */
    public static final long AddRef$offset() {
        return AddRef$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IMallocSpy *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment AddRef(MemorySegment struct) {
        return struct.get(AddRef$LAYOUT, AddRef$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IMallocSpy *) __attribute__((stdcall))
     * }
     */
    public static void AddRef(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(AddRef$LAYOUT, AddRef$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*Release)(IMallocSpy *) __attribute__((stdcall))
     * }
     */
    public static class Release {

        Release() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Release.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Release.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Release$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Release"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IMallocSpy *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Release$layout() {
        return Release$LAYOUT;
    }

    private static final long Release$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IMallocSpy *) __attribute__((stdcall))
     * }
     */
    public static final long Release$offset() {
        return Release$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IMallocSpy *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Release(MemorySegment struct) {
        return struct.get(Release$LAYOUT, Release$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IMallocSpy *) __attribute__((stdcall))
     * }
     */
    public static void Release(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Release$LAYOUT, Release$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * SIZE_T (*PreAlloc)(IMallocSpy *, SIZE_T) __attribute__((stdcall))
     * }
     */
    public static class PreAlloc {

        PreAlloc() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            long apply(MemorySegment _x0, long _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(PreAlloc.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(PreAlloc.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static long invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1) {
            try {
                return (long) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout PreAlloc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("PreAlloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SIZE_T (*PreAlloc)(IMallocSpy *, SIZE_T) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout PreAlloc$layout() {
        return PreAlloc$LAYOUT;
    }

    private static final long PreAlloc$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SIZE_T (*PreAlloc)(IMallocSpy *, SIZE_T) __attribute__((stdcall))
     * }
     */
    public static final long PreAlloc$offset() {
        return PreAlloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SIZE_T (*PreAlloc)(IMallocSpy *, SIZE_T) __attribute__((stdcall))
     * }
     */
    public static MemorySegment PreAlloc(MemorySegment struct) {
        return struct.get(PreAlloc$LAYOUT, PreAlloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SIZE_T (*PreAlloc)(IMallocSpy *, SIZE_T) __attribute__((stdcall))
     * }
     */
    public static void PreAlloc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(PreAlloc$LAYOUT, PreAlloc$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void *(*PostAlloc)(IMallocSpy *, void *) __attribute__((stdcall))
     * }
     */
    public static class PostAlloc {

        PostAlloc() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(PostAlloc.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(PostAlloc.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout PostAlloc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("PostAlloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *(*PostAlloc)(IMallocSpy *, void *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout PostAlloc$layout() {
        return PostAlloc$LAYOUT;
    }

    private static final long PostAlloc$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *(*PostAlloc)(IMallocSpy *, void *) __attribute__((stdcall))
     * }
     */
    public static final long PostAlloc$offset() {
        return PostAlloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *(*PostAlloc)(IMallocSpy *, void *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment PostAlloc(MemorySegment struct) {
        return struct.get(PostAlloc$LAYOUT, PostAlloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *(*PostAlloc)(IMallocSpy *, void *) __attribute__((stdcall))
     * }
     */
    public static void PostAlloc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(PostAlloc$LAYOUT, PostAlloc$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void *(*PreFree)(IMallocSpy *, void *, BOOL) __attribute__((stdcall))
     * }
     */
    public static class PreFree {

        PreFree() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(PreFree.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(PreFree.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout PreFree$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("PreFree"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *(*PreFree)(IMallocSpy *, void *, BOOL) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout PreFree$layout() {
        return PreFree$LAYOUT;
    }

    private static final long PreFree$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *(*PreFree)(IMallocSpy *, void *, BOOL) __attribute__((stdcall))
     * }
     */
    public static final long PreFree$offset() {
        return PreFree$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *(*PreFree)(IMallocSpy *, void *, BOOL) __attribute__((stdcall))
     * }
     */
    public static MemorySegment PreFree(MemorySegment struct) {
        return struct.get(PreFree$LAYOUT, PreFree$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *(*PreFree)(IMallocSpy *, void *, BOOL) __attribute__((stdcall))
     * }
     */
    public static void PreFree(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(PreFree$LAYOUT, PreFree$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*PostFree)(IMallocSpy *, BOOL) __attribute__((stdcall))
     * }
     */
    public static class PostFree {

        PostFree() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(PostFree.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(PostFree.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout PostFree$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("PostFree"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*PostFree)(IMallocSpy *, BOOL) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout PostFree$layout() {
        return PostFree$LAYOUT;
    }

    private static final long PostFree$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*PostFree)(IMallocSpy *, BOOL) __attribute__((stdcall))
     * }
     */
    public static final long PostFree$offset() {
        return PostFree$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*PostFree)(IMallocSpy *, BOOL) __attribute__((stdcall))
     * }
     */
    public static MemorySegment PostFree(MemorySegment struct) {
        return struct.get(PostFree$LAYOUT, PostFree$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*PostFree)(IMallocSpy *, BOOL) __attribute__((stdcall))
     * }
     */
    public static void PostFree(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(PostFree$LAYOUT, PostFree$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * SIZE_T (*PreRealloc)(IMallocSpy *, void *, SIZE_T, void **, BOOL) __attribute__((stdcall))
     * }
     */
    public static class PreRealloc {

        PreRealloc() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            long apply(MemorySegment _x0, MemorySegment _x1, long _x2, MemorySegment _x3, int _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(PreRealloc.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(PreRealloc.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static long invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, long _x2, MemorySegment _x3, int _x4) {
            try {
                return (long) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout PreRealloc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("PreRealloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SIZE_T (*PreRealloc)(IMallocSpy *, void *, SIZE_T, void **, BOOL) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout PreRealloc$layout() {
        return PreRealloc$LAYOUT;
    }

    private static final long PreRealloc$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SIZE_T (*PreRealloc)(IMallocSpy *, void *, SIZE_T, void **, BOOL) __attribute__((stdcall))
     * }
     */
    public static final long PreRealloc$offset() {
        return PreRealloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SIZE_T (*PreRealloc)(IMallocSpy *, void *, SIZE_T, void **, BOOL) __attribute__((stdcall))
     * }
     */
    public static MemorySegment PreRealloc(MemorySegment struct) {
        return struct.get(PreRealloc$LAYOUT, PreRealloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SIZE_T (*PreRealloc)(IMallocSpy *, void *, SIZE_T, void **, BOOL) __attribute__((stdcall))
     * }
     */
    public static void PreRealloc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(PreRealloc$LAYOUT, PreRealloc$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void *(*PostRealloc)(IMallocSpy *, void *, BOOL) __attribute__((stdcall))
     * }
     */
    public static class PostRealloc {

        PostRealloc() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(PostRealloc.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(PostRealloc.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout PostRealloc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("PostRealloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *(*PostRealloc)(IMallocSpy *, void *, BOOL) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout PostRealloc$layout() {
        return PostRealloc$LAYOUT;
    }

    private static final long PostRealloc$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *(*PostRealloc)(IMallocSpy *, void *, BOOL) __attribute__((stdcall))
     * }
     */
    public static final long PostRealloc$offset() {
        return PostRealloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *(*PostRealloc)(IMallocSpy *, void *, BOOL) __attribute__((stdcall))
     * }
     */
    public static MemorySegment PostRealloc(MemorySegment struct) {
        return struct.get(PostRealloc$LAYOUT, PostRealloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *(*PostRealloc)(IMallocSpy *, void *, BOOL) __attribute__((stdcall))
     * }
     */
    public static void PostRealloc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(PostRealloc$LAYOUT, PostRealloc$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void *(*PreGetSize)(IMallocSpy *, void *, BOOL) __attribute__((stdcall))
     * }
     */
    public static class PreGetSize {

        PreGetSize() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(PreGetSize.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(PreGetSize.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout PreGetSize$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("PreGetSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *(*PreGetSize)(IMallocSpy *, void *, BOOL) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout PreGetSize$layout() {
        return PreGetSize$LAYOUT;
    }

    private static final long PreGetSize$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *(*PreGetSize)(IMallocSpy *, void *, BOOL) __attribute__((stdcall))
     * }
     */
    public static final long PreGetSize$offset() {
        return PreGetSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *(*PreGetSize)(IMallocSpy *, void *, BOOL) __attribute__((stdcall))
     * }
     */
    public static MemorySegment PreGetSize(MemorySegment struct) {
        return struct.get(PreGetSize$LAYOUT, PreGetSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *(*PreGetSize)(IMallocSpy *, void *, BOOL) __attribute__((stdcall))
     * }
     */
    public static void PreGetSize(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(PreGetSize$LAYOUT, PreGetSize$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * SIZE_T (*PostGetSize)(IMallocSpy *, SIZE_T, BOOL) __attribute__((stdcall))
     * }
     */
    public static class PostGetSize {

        PostGetSize() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            long apply(MemorySegment _x0, long _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(PostGetSize.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(PostGetSize.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static long invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, int _x2) {
            try {
                return (long) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout PostGetSize$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("PostGetSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SIZE_T (*PostGetSize)(IMallocSpy *, SIZE_T, BOOL) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout PostGetSize$layout() {
        return PostGetSize$LAYOUT;
    }

    private static final long PostGetSize$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SIZE_T (*PostGetSize)(IMallocSpy *, SIZE_T, BOOL) __attribute__((stdcall))
     * }
     */
    public static final long PostGetSize$offset() {
        return PostGetSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SIZE_T (*PostGetSize)(IMallocSpy *, SIZE_T, BOOL) __attribute__((stdcall))
     * }
     */
    public static MemorySegment PostGetSize(MemorySegment struct) {
        return struct.get(PostGetSize$LAYOUT, PostGetSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SIZE_T (*PostGetSize)(IMallocSpy *, SIZE_T, BOOL) __attribute__((stdcall))
     * }
     */
    public static void PostGetSize(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(PostGetSize$LAYOUT, PostGetSize$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void *(*PreDidAlloc)(IMallocSpy *, void *, BOOL) __attribute__((stdcall))
     * }
     */
    public static class PreDidAlloc {

        PreDidAlloc() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(PreDidAlloc.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(PreDidAlloc.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout PreDidAlloc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("PreDidAlloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *(*PreDidAlloc)(IMallocSpy *, void *, BOOL) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout PreDidAlloc$layout() {
        return PreDidAlloc$LAYOUT;
    }

    private static final long PreDidAlloc$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *(*PreDidAlloc)(IMallocSpy *, void *, BOOL) __attribute__((stdcall))
     * }
     */
    public static final long PreDidAlloc$offset() {
        return PreDidAlloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *(*PreDidAlloc)(IMallocSpy *, void *, BOOL) __attribute__((stdcall))
     * }
     */
    public static MemorySegment PreDidAlloc(MemorySegment struct) {
        return struct.get(PreDidAlloc$LAYOUT, PreDidAlloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *(*PreDidAlloc)(IMallocSpy *, void *, BOOL) __attribute__((stdcall))
     * }
     */
    public static void PreDidAlloc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(PreDidAlloc$LAYOUT, PreDidAlloc$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*PostDidAlloc)(IMallocSpy *, void *, BOOL, int) __attribute__((stdcall))
     * }
     */
    public static class PostDidAlloc {

        PostDidAlloc() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, int _x2, int _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(PostDidAlloc.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(PostDidAlloc.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, int _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout PostDidAlloc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("PostDidAlloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*PostDidAlloc)(IMallocSpy *, void *, BOOL, int) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout PostDidAlloc$layout() {
        return PostDidAlloc$LAYOUT;
    }

    private static final long PostDidAlloc$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*PostDidAlloc)(IMallocSpy *, void *, BOOL, int) __attribute__((stdcall))
     * }
     */
    public static final long PostDidAlloc$offset() {
        return PostDidAlloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*PostDidAlloc)(IMallocSpy *, void *, BOOL, int) __attribute__((stdcall))
     * }
     */
    public static MemorySegment PostDidAlloc(MemorySegment struct) {
        return struct.get(PostDidAlloc$LAYOUT, PostDidAlloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*PostDidAlloc)(IMallocSpy *, void *, BOOL, int) __attribute__((stdcall))
     * }
     */
    public static void PostDidAlloc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(PostDidAlloc$LAYOUT, PostDidAlloc$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*PreHeapMinimize)(IMallocSpy *) __attribute__((stdcall))
     * }
     */
    public static class PreHeapMinimize {

        PreHeapMinimize() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(PreHeapMinimize.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(PreHeapMinimize.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout PreHeapMinimize$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("PreHeapMinimize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*PreHeapMinimize)(IMallocSpy *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout PreHeapMinimize$layout() {
        return PreHeapMinimize$LAYOUT;
    }

    private static final long PreHeapMinimize$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*PreHeapMinimize)(IMallocSpy *) __attribute__((stdcall))
     * }
     */
    public static final long PreHeapMinimize$offset() {
        return PreHeapMinimize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*PreHeapMinimize)(IMallocSpy *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment PreHeapMinimize(MemorySegment struct) {
        return struct.get(PreHeapMinimize$LAYOUT, PreHeapMinimize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*PreHeapMinimize)(IMallocSpy *) __attribute__((stdcall))
     * }
     */
    public static void PreHeapMinimize(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(PreHeapMinimize$LAYOUT, PreHeapMinimize$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*PostHeapMinimize)(IMallocSpy *) __attribute__((stdcall))
     * }
     */
    public static class PostHeapMinimize {

        PostHeapMinimize() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(PostHeapMinimize.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(PostHeapMinimize.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout PostHeapMinimize$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("PostHeapMinimize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*PostHeapMinimize)(IMallocSpy *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout PostHeapMinimize$layout() {
        return PostHeapMinimize$LAYOUT;
    }

    private static final long PostHeapMinimize$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*PostHeapMinimize)(IMallocSpy *) __attribute__((stdcall))
     * }
     */
    public static final long PostHeapMinimize$offset() {
        return PostHeapMinimize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*PostHeapMinimize)(IMallocSpy *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment PostHeapMinimize(MemorySegment struct) {
        return struct.get(PostHeapMinimize$LAYOUT, PostHeapMinimize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*PostHeapMinimize)(IMallocSpy *) __attribute__((stdcall))
     * }
     */
    public static void PostHeapMinimize(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(PostHeapMinimize$LAYOUT, PostHeapMinimize$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

