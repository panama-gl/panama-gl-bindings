// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _CTL_FIND_SUBJECT_PARA {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("cbSize"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("pUsagePara"),
        Constants$root.C_LONG$LAYOUT.withName("dwSubjectType"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("pvSubject")
    ).withName("_CTL_FIND_SUBJECT_PARA");
    public static MemoryLayout $LAYOUT() {
        return _CTL_FIND_SUBJECT_PARA.$struct$LAYOUT;
    }
    static final VarHandle cbSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbSize"));
    public static VarHandle cbSize$VH() {
        return _CTL_FIND_SUBJECT_PARA.cbSize$VH;
    }
    public static int cbSize$get(MemorySegment seg) {
        return (int)_CTL_FIND_SUBJECT_PARA.cbSize$VH.get(seg);
    }
    public static void cbSize$set( MemorySegment seg, int x) {
        _CTL_FIND_SUBJECT_PARA.cbSize$VH.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)_CTL_FIND_SUBJECT_PARA.cbSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        _CTL_FIND_SUBJECT_PARA.cbSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pUsagePara$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pUsagePara"));
    public static VarHandle pUsagePara$VH() {
        return _CTL_FIND_SUBJECT_PARA.pUsagePara$VH;
    }
    public static MemoryAddress pUsagePara$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_CTL_FIND_SUBJECT_PARA.pUsagePara$VH.get(seg);
    }
    public static void pUsagePara$set( MemorySegment seg, MemoryAddress x) {
        _CTL_FIND_SUBJECT_PARA.pUsagePara$VH.set(seg, x);
    }
    public static MemoryAddress pUsagePara$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_CTL_FIND_SUBJECT_PARA.pUsagePara$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pUsagePara$set(MemorySegment seg, long index, MemoryAddress x) {
        _CTL_FIND_SUBJECT_PARA.pUsagePara$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwSubjectType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwSubjectType"));
    public static VarHandle dwSubjectType$VH() {
        return _CTL_FIND_SUBJECT_PARA.dwSubjectType$VH;
    }
    public static int dwSubjectType$get(MemorySegment seg) {
        return (int)_CTL_FIND_SUBJECT_PARA.dwSubjectType$VH.get(seg);
    }
    public static void dwSubjectType$set( MemorySegment seg, int x) {
        _CTL_FIND_SUBJECT_PARA.dwSubjectType$VH.set(seg, x);
    }
    public static int dwSubjectType$get(MemorySegment seg, long index) {
        return (int)_CTL_FIND_SUBJECT_PARA.dwSubjectType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwSubjectType$set(MemorySegment seg, long index, int x) {
        _CTL_FIND_SUBJECT_PARA.dwSubjectType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pvSubject$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pvSubject"));
    public static VarHandle pvSubject$VH() {
        return _CTL_FIND_SUBJECT_PARA.pvSubject$VH;
    }
    public static MemoryAddress pvSubject$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_CTL_FIND_SUBJECT_PARA.pvSubject$VH.get(seg);
    }
    public static void pvSubject$set( MemorySegment seg, MemoryAddress x) {
        _CTL_FIND_SUBJECT_PARA.pvSubject$VH.set(seg, x);
    }
    public static MemoryAddress pvSubject$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_CTL_FIND_SUBJECT_PARA.pvSubject$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pvSubject$set(MemorySegment seg, long index, MemoryAddress x) {
        _CTL_FIND_SUBJECT_PARA.pvSubject$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


