// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _DEVICE_DATA_SET_LB_PROVISIONING_STATE {
 *     DWORD Size;
 *     DWORD Version;
 *     DWORDLONG SlabSizeInBytes;
 *     DWORD SlabOffsetDeltaInBytes;
 *     DWORD SlabAllocationBitMapBitCount;
 *     DWORD SlabAllocationBitMapLength;
 *     DWORD SlabAllocationBitMap[1];
 * }
 * }
 */
public class _DEVICE_DATA_SET_LB_PROVISIONING_STATE {

    _DEVICE_DATA_SET_LB_PROVISIONING_STATE() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("Size"),
        wgl_h.C_LONG.withName("Version"),
        wgl_h.C_LONG_LONG.withName("SlabSizeInBytes"),
        wgl_h.C_LONG.withName("SlabOffsetDeltaInBytes"),
        wgl_h.C_LONG.withName("SlabAllocationBitMapBitCount"),
        wgl_h.C_LONG.withName("SlabAllocationBitMapLength"),
        MemoryLayout.sequenceLayout(1, wgl_h.C_LONG).withName("SlabAllocationBitMap")
    ).withName("_DEVICE_DATA_SET_LB_PROVISIONING_STATE");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt Size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static final OfInt Size$layout() {
        return Size$LAYOUT;
    }

    private static final long Size$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static final long Size$offset() {
        return Size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static int Size(MemorySegment struct) {
        return struct.get(Size$LAYOUT, Size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static void Size(MemorySegment struct, int fieldValue) {
        struct.set(Size$LAYOUT, Size$OFFSET, fieldValue);
    }

    private static final OfInt Version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static final OfInt Version$layout() {
        return Version$LAYOUT;
    }

    private static final long Version$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static final long Version$offset() {
        return Version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static int Version(MemorySegment struct) {
        return struct.get(Version$LAYOUT, Version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static void Version(MemorySegment struct, int fieldValue) {
        struct.set(Version$LAYOUT, Version$OFFSET, fieldValue);
    }

    private static final OfLong SlabSizeInBytes$LAYOUT = (OfLong)$LAYOUT.select(groupElement("SlabSizeInBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG SlabSizeInBytes
     * }
     */
    public static final OfLong SlabSizeInBytes$layout() {
        return SlabSizeInBytes$LAYOUT;
    }

    private static final long SlabSizeInBytes$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG SlabSizeInBytes
     * }
     */
    public static final long SlabSizeInBytes$offset() {
        return SlabSizeInBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG SlabSizeInBytes
     * }
     */
    public static long SlabSizeInBytes(MemorySegment struct) {
        return struct.get(SlabSizeInBytes$LAYOUT, SlabSizeInBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG SlabSizeInBytes
     * }
     */
    public static void SlabSizeInBytes(MemorySegment struct, long fieldValue) {
        struct.set(SlabSizeInBytes$LAYOUT, SlabSizeInBytes$OFFSET, fieldValue);
    }

    private static final OfInt SlabOffsetDeltaInBytes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SlabOffsetDeltaInBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD SlabOffsetDeltaInBytes
     * }
     */
    public static final OfInt SlabOffsetDeltaInBytes$layout() {
        return SlabOffsetDeltaInBytes$LAYOUT;
    }

    private static final long SlabOffsetDeltaInBytes$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD SlabOffsetDeltaInBytes
     * }
     */
    public static final long SlabOffsetDeltaInBytes$offset() {
        return SlabOffsetDeltaInBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD SlabOffsetDeltaInBytes
     * }
     */
    public static int SlabOffsetDeltaInBytes(MemorySegment struct) {
        return struct.get(SlabOffsetDeltaInBytes$LAYOUT, SlabOffsetDeltaInBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD SlabOffsetDeltaInBytes
     * }
     */
    public static void SlabOffsetDeltaInBytes(MemorySegment struct, int fieldValue) {
        struct.set(SlabOffsetDeltaInBytes$LAYOUT, SlabOffsetDeltaInBytes$OFFSET, fieldValue);
    }

    private static final OfInt SlabAllocationBitMapBitCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SlabAllocationBitMapBitCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD SlabAllocationBitMapBitCount
     * }
     */
    public static final OfInt SlabAllocationBitMapBitCount$layout() {
        return SlabAllocationBitMapBitCount$LAYOUT;
    }

    private static final long SlabAllocationBitMapBitCount$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD SlabAllocationBitMapBitCount
     * }
     */
    public static final long SlabAllocationBitMapBitCount$offset() {
        return SlabAllocationBitMapBitCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD SlabAllocationBitMapBitCount
     * }
     */
    public static int SlabAllocationBitMapBitCount(MemorySegment struct) {
        return struct.get(SlabAllocationBitMapBitCount$LAYOUT, SlabAllocationBitMapBitCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD SlabAllocationBitMapBitCount
     * }
     */
    public static void SlabAllocationBitMapBitCount(MemorySegment struct, int fieldValue) {
        struct.set(SlabAllocationBitMapBitCount$LAYOUT, SlabAllocationBitMapBitCount$OFFSET, fieldValue);
    }

    private static final OfInt SlabAllocationBitMapLength$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SlabAllocationBitMapLength"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD SlabAllocationBitMapLength
     * }
     */
    public static final OfInt SlabAllocationBitMapLength$layout() {
        return SlabAllocationBitMapLength$LAYOUT;
    }

    private static final long SlabAllocationBitMapLength$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD SlabAllocationBitMapLength
     * }
     */
    public static final long SlabAllocationBitMapLength$offset() {
        return SlabAllocationBitMapLength$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD SlabAllocationBitMapLength
     * }
     */
    public static int SlabAllocationBitMapLength(MemorySegment struct) {
        return struct.get(SlabAllocationBitMapLength$LAYOUT, SlabAllocationBitMapLength$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD SlabAllocationBitMapLength
     * }
     */
    public static void SlabAllocationBitMapLength(MemorySegment struct, int fieldValue) {
        struct.set(SlabAllocationBitMapLength$LAYOUT, SlabAllocationBitMapLength$OFFSET, fieldValue);
    }

    private static final SequenceLayout SlabAllocationBitMap$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("SlabAllocationBitMap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD SlabAllocationBitMap[1]
     * }
     */
    public static final SequenceLayout SlabAllocationBitMap$layout() {
        return SlabAllocationBitMap$LAYOUT;
    }

    private static final long SlabAllocationBitMap$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD SlabAllocationBitMap[1]
     * }
     */
    public static final long SlabAllocationBitMap$offset() {
        return SlabAllocationBitMap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD SlabAllocationBitMap[1]
     * }
     */
    public static MemorySegment SlabAllocationBitMap(MemorySegment struct) {
        return struct.asSlice(SlabAllocationBitMap$OFFSET, SlabAllocationBitMap$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD SlabAllocationBitMap[1]
     * }
     */
    public static void SlabAllocationBitMap(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, SlabAllocationBitMap$OFFSET, SlabAllocationBitMap$LAYOUT.byteSize());
    }

    private static long[] SlabAllocationBitMap$DIMS = { 1 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * DWORD SlabAllocationBitMap[1]
     * }
     */
    public static long[] SlabAllocationBitMap$dimensions() {
        return SlabAllocationBitMap$DIMS;
    }
    private static final VarHandle SlabAllocationBitMap$ELEM_HANDLE = SlabAllocationBitMap$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * DWORD SlabAllocationBitMap[1]
     * }
     */
    public static int SlabAllocationBitMap(MemorySegment struct, long index0) {
        return (int)SlabAllocationBitMap$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * DWORD SlabAllocationBitMap[1]
     * }
     */
    public static void SlabAllocationBitMap(MemorySegment struct, long index0, int fieldValue) {
        SlabAllocationBitMap$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

