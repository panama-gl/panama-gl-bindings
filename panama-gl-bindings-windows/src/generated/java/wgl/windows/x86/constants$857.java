// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$857 {

    static final FunctionDescriptor RpcSsSwapClientAllocFree$OldClientFree$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RpcSsSwapClientAllocFree$OldClientFree$MH = RuntimeHelper.downcallHandle(
        constants$857.RpcSsSwapClientAllocFree$OldClientFree$FUNC
    );
    static final FunctionDescriptor RpcSsSwapClientAllocFree$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RpcSsSwapClientAllocFree$MH = RuntimeHelper.downcallHandle(
        "RpcSsSwapClientAllocFree",
        constants$857.RpcSsSwapClientAllocFree$FUNC
    );
    static final FunctionDescriptor RpcSmAllocate$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RpcSmAllocate$MH = RuntimeHelper.downcallHandle(
        "RpcSmAllocate",
        constants$857.RpcSmAllocate$FUNC
    );
    static final FunctionDescriptor RpcSmClientFree$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RpcSmClientFree$MH = RuntimeHelper.downcallHandle(
        "RpcSmClientFree",
        constants$857.RpcSmClientFree$FUNC
    );
    static final FunctionDescriptor RpcSmDestroyClientContext$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RpcSmDestroyClientContext$MH = RuntimeHelper.downcallHandle(
        "RpcSmDestroyClientContext",
        constants$857.RpcSmDestroyClientContext$FUNC
    );
}


