// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tagLOCALESIGNATURE {
 *     DWORD lsUsb[4];
 *     DWORD lsCsbDefault[2];
 *     DWORD lsCsbSupported[2];
 * }
 * }
 */
public class tagLOCALESIGNATURE {

    tagLOCALESIGNATURE() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(4, wgl_h.C_LONG).withName("lsUsb"),
        MemoryLayout.sequenceLayout(2, wgl_h.C_LONG).withName("lsCsbDefault"),
        MemoryLayout.sequenceLayout(2, wgl_h.C_LONG).withName("lsCsbSupported")
    ).withName("tagLOCALESIGNATURE");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout lsUsb$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("lsUsb"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD lsUsb[4]
     * }
     */
    public static final SequenceLayout lsUsb$layout() {
        return lsUsb$LAYOUT;
    }

    private static final long lsUsb$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD lsUsb[4]
     * }
     */
    public static final long lsUsb$offset() {
        return lsUsb$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD lsUsb[4]
     * }
     */
    public static MemorySegment lsUsb(MemorySegment struct) {
        return struct.asSlice(lsUsb$OFFSET, lsUsb$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD lsUsb[4]
     * }
     */
    public static void lsUsb(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, lsUsb$OFFSET, lsUsb$LAYOUT.byteSize());
    }

    private static long[] lsUsb$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * DWORD lsUsb[4]
     * }
     */
    public static long[] lsUsb$dimensions() {
        return lsUsb$DIMS;
    }
    private static final VarHandle lsUsb$ELEM_HANDLE = lsUsb$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * DWORD lsUsb[4]
     * }
     */
    public static int lsUsb(MemorySegment struct, long index0) {
        return (int)lsUsb$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * DWORD lsUsb[4]
     * }
     */
    public static void lsUsb(MemorySegment struct, long index0, int fieldValue) {
        lsUsb$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout lsCsbDefault$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("lsCsbDefault"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD lsCsbDefault[2]
     * }
     */
    public static final SequenceLayout lsCsbDefault$layout() {
        return lsCsbDefault$LAYOUT;
    }

    private static final long lsCsbDefault$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD lsCsbDefault[2]
     * }
     */
    public static final long lsCsbDefault$offset() {
        return lsCsbDefault$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD lsCsbDefault[2]
     * }
     */
    public static MemorySegment lsCsbDefault(MemorySegment struct) {
        return struct.asSlice(lsCsbDefault$OFFSET, lsCsbDefault$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD lsCsbDefault[2]
     * }
     */
    public static void lsCsbDefault(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, lsCsbDefault$OFFSET, lsCsbDefault$LAYOUT.byteSize());
    }

    private static long[] lsCsbDefault$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * DWORD lsCsbDefault[2]
     * }
     */
    public static long[] lsCsbDefault$dimensions() {
        return lsCsbDefault$DIMS;
    }
    private static final VarHandle lsCsbDefault$ELEM_HANDLE = lsCsbDefault$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * DWORD lsCsbDefault[2]
     * }
     */
    public static int lsCsbDefault(MemorySegment struct, long index0) {
        return (int)lsCsbDefault$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * DWORD lsCsbDefault[2]
     * }
     */
    public static void lsCsbDefault(MemorySegment struct, long index0, int fieldValue) {
        lsCsbDefault$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout lsCsbSupported$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("lsCsbSupported"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD lsCsbSupported[2]
     * }
     */
    public static final SequenceLayout lsCsbSupported$layout() {
        return lsCsbSupported$LAYOUT;
    }

    private static final long lsCsbSupported$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD lsCsbSupported[2]
     * }
     */
    public static final long lsCsbSupported$offset() {
        return lsCsbSupported$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD lsCsbSupported[2]
     * }
     */
    public static MemorySegment lsCsbSupported(MemorySegment struct) {
        return struct.asSlice(lsCsbSupported$OFFSET, lsCsbSupported$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD lsCsbSupported[2]
     * }
     */
    public static void lsCsbSupported(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, lsCsbSupported$OFFSET, lsCsbSupported$LAYOUT.byteSize());
    }

    private static long[] lsCsbSupported$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * DWORD lsCsbSupported[2]
     * }
     */
    public static long[] lsCsbSupported$dimensions() {
        return lsCsbSupported$DIMS;
    }
    private static final VarHandle lsCsbSupported$ELEM_HANDLE = lsCsbSupported$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * DWORD lsCsbSupported[2]
     * }
     */
    public static int lsCsbSupported(MemorySegment struct, long index0) {
        return (int)lsCsbSupported$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * DWORD lsCsbSupported[2]
     * }
     */
    public static void lsCsbSupported(MemorySegment struct, long index0, int fieldValue) {
        lsCsbSupported$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

