// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class wgl_h_19 extends wgl_h_20 {

    wgl_h_19() {
        // Should not be called directly
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned char *RPC_BUFPTR
     * }
     */
    public static final AddressLayout RPC_BUFPTR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef unsigned long RPC_LENGTH
     * }
     */
    public static final OfInt RPC_LENGTH = wgl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef const unsigned char *PFORMAT_STRING
     * }
     */
    public static final AddressLayout PFORMAT_STRING = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     long Dimension;
     *     unsigned long *BufferConformanceMark;
     *     unsigned long *BufferVarianceMark;
     *     unsigned long *MaxCountArray;
     *     unsigned long *OffsetArray;
     *     unsigned long *ActualCountArray;
     * } *PARRAY_INFO
     * }
     */
    public static final AddressLayout PARRAY_INFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _NDR_ASYNC_MESSAGE *PNDR_ASYNC_MESSAGE
     * }
     */
    public static final AddressLayout PNDR_ASYNC_MESSAGE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _NDR_CORRELATION_INFO *PNDR_CORRELATION_INFO
     * }
     */
    public static final AddressLayout PNDR_CORRELATION_INFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MIDL_SYNTAX_INFO *PMIDL_SYNTAX_INFO
     * }
     */
    public static final AddressLayout PMIDL_SYNTAX_INFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MIDL_STUB_MESSAGE {
     *     PRPC_MESSAGE RpcMsg;
     *     unsigned char *Buffer;
     *     unsigned char *BufferStart;
     *     unsigned char *BufferEnd;
     *     unsigned char *BufferMark;
     *     unsigned long BufferLength;
     *     unsigned long MemorySize;
     *     unsigned char *Memory;
     *     unsigned char IsClient;
     *     unsigned char Pad;
     *     unsigned short uFlags2;
     *     int ReuseBuffer;
     *     struct NDR_ALLOC_ALL_NODES_CONTEXT *pAllocAllNodesContext;
     *     struct NDR_POINTER_QUEUE_STATE *pPointerQueueState;
     *     int IgnoreEmbeddedPointers;
     *     unsigned char *PointerBufferMark;
     *     unsigned char CorrDespIncrement;
     *     unsigned char uFlags;
     *     unsigned short UniquePtrCount;
     *     ULONG_PTR MaxCount;
     *     unsigned long Offset;
     *     unsigned long ActualCount;
     *     void *(*pfnAllocate)(size_t) __attribute__((stdcall));
     *     void (*pfnFree)(void *) __attribute__((stdcall));
     *     unsigned char *StackTop;
     *     unsigned char *pPresentedType;
     *     unsigned char *pTransmitType;
     *     handle_t SavedHandle;
     *     const struct _MIDL_STUB_DESC *StubDesc;
     *     struct _FULL_PTR_XLAT_TABLES *FullPtrXlatTables;
     *     unsigned long FullPtrRefId;
     *     unsigned long PointerLength;
     *     int fInDontFree : 1;
     *     int fDontCallFreeInst : 1;
     *     int fUnused1 : 1;
     *     int fHasReturn : 1;
     *     int fHasExtensions : 1;
     *     int fHasNewCorrDesc : 1;
     *     int fIsIn : 1;
     *     int fIsOut : 1;
     *     int fIsOicf : 1;
     *     int fBufferValid : 1;
     *     int fHasMemoryValidateCallback : 1;
     *     int fInFree : 1;
     *     int fNeedMCCP : 1;
     *     int fUnused2 : 3;
     *     int fUnused3 : 16;
     *     unsigned long dwDestContext;
     *     void *pvDestContext;
     *     NDR_SCONTEXT *SavedContextHandles;
     *     long ParamNumber;
     *     struct IRpcChannelBuffer *pRpcChannelBuffer;
     *     PARRAY_INFO pArrayInfo;
     *     unsigned long *SizePtrCountArray;
     *     unsigned long *SizePtrOffsetArray;
     *     unsigned long *SizePtrLengthArray;
     *     void *pArgQueue;
     *     unsigned long dwStubPhase;
     *     void *LowStackMark;
     *     PNDR_ASYNC_MESSAGE pAsyncMsg;
     *     PNDR_CORRELATION_INFO pCorrInfo;
     *     unsigned char *pCorrMemory;
     *     void *pMemoryList;
     *     INT_PTR pCSInfo;
     *     unsigned char *ConformanceMark;
     *     unsigned char *VarianceMark;
     *     INT_PTR Unused;
     *     struct _NDR_PROC_CONTEXT *pContext;
     *     void *ContextHandleHash;
     *     void *pUserMarshalList;
     *     INT_PTR Reserved51_3;
     *     INT_PTR Reserved51_4;
     *     INT_PTR Reserved51_5;
     * } *PMIDL_STUB_MESSAGE
     * }
     */
    public static final AddressLayout PMIDL_STUB_MESSAGE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _GENERIC_BINDING_ROUTINE_PAIR {
     *     GENERIC_BINDING_ROUTINE pfnBind;
     *     GENERIC_UNBIND_ROUTINE pfnUnbind;
     * } *PGENERIC_BINDING_ROUTINE_PAIR
     * }
     */
    public static final AddressLayout PGENERIC_BINDING_ROUTINE_PAIR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct __GENERIC_BINDING_INFO {
     *     void *pObj;
     *     unsigned int Size;
     *     GENERIC_BINDING_ROUTINE pfnBind;
     *     GENERIC_UNBIND_ROUTINE pfnUnbind;
     * } *PGENERIC_BINDING_INFO
     * }
     */
    public static final AddressLayout PGENERIC_BINDING_INFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _XMIT_ROUTINE_QUINTUPLE {
     *     XMIT_HELPER_ROUTINE pfnTranslateToXmit;
     *     XMIT_HELPER_ROUTINE pfnTranslateFromXmit;
     *     XMIT_HELPER_ROUTINE pfnFreeXmit;
     *     XMIT_HELPER_ROUTINE pfnFreeInst;
     * } *PXMIT_ROUTINE_QUINTUPLE
     * }
     */
    public static final AddressLayout PXMIT_ROUTINE_QUINTUPLE = wgl_h.C_POINTER;
    private static final int USER_MARSHAL_CB_BUFFER_SIZE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _USER_MARSHAL_CB_TYPE.USER_MARSHAL_CB_BUFFER_SIZE = 0
     * }
     */
    public static int USER_MARSHAL_CB_BUFFER_SIZE() {
        return USER_MARSHAL_CB_BUFFER_SIZE;
    }
    private static final int USER_MARSHAL_CB_MARSHALL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _USER_MARSHAL_CB_TYPE.USER_MARSHAL_CB_MARSHALL = 1
     * }
     */
    public static int USER_MARSHAL_CB_MARSHALL() {
        return USER_MARSHAL_CB_MARSHALL;
    }
    private static final int USER_MARSHAL_CB_UNMARSHALL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _USER_MARSHAL_CB_TYPE.USER_MARSHAL_CB_UNMARSHALL = 2
     * }
     */
    public static int USER_MARSHAL_CB_UNMARSHALL() {
        return USER_MARSHAL_CB_UNMARSHALL;
    }
    private static final int USER_MARSHAL_CB_FREE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _USER_MARSHAL_CB_TYPE.USER_MARSHAL_CB_FREE = 3
     * }
     */
    public static int USER_MARSHAL_CB_FREE() {
        return USER_MARSHAL_CB_FREE;
    }
    private static final int IDL_CS_NO_CONVERT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _IDL_CS_CONVERT.IDL_CS_NO_CONVERT = 0
     * }
     */
    public static int IDL_CS_NO_CONVERT() {
        return IDL_CS_NO_CONVERT;
    }
    private static final int IDL_CS_IN_PLACE_CONVERT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _IDL_CS_CONVERT.IDL_CS_IN_PLACE_CONVERT = 1
     * }
     */
    public static int IDL_CS_IN_PLACE_CONVERT() {
        return IDL_CS_IN_PLACE_CONVERT;
    }
    private static final int IDL_CS_NEW_BUFFER_CONVERT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _IDL_CS_CONVERT.IDL_CS_NEW_BUFFER_CONVERT = 2
     * }
     */
    public static int IDL_CS_NEW_BUFFER_CONVERT() {
        return IDL_CS_NEW_BUFFER_CONVERT;
    }

    private static class RpcCsGetTags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcCsGetTags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void RpcCsGetTags(RPC_BINDING_HANDLE hBinding, int fServerSide, unsigned long *pulSendingTag, unsigned long *pulDesiredReceivingTag, unsigned long *pulReceivingTag, error_status_t *pStatus)
     * }
     */
    public static FunctionDescriptor RpcCsGetTags$descriptor() {
        return RpcCsGetTags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void RpcCsGetTags(RPC_BINDING_HANDLE hBinding, int fServerSide, unsigned long *pulSendingTag, unsigned long *pulDesiredReceivingTag, unsigned long *pulReceivingTag, error_status_t *pStatus)
     * }
     */
    public static MethodHandle RpcCsGetTags$handle() {
        return RpcCsGetTags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void RpcCsGetTags(RPC_BINDING_HANDLE hBinding, int fServerSide, unsigned long *pulSendingTag, unsigned long *pulDesiredReceivingTag, unsigned long *pulReceivingTag, error_status_t *pStatus)
     * }
     */
    public static MemorySegment RpcCsGetTags$address() {
        return RpcCsGetTags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void RpcCsGetTags(RPC_BINDING_HANDLE hBinding, int fServerSide, unsigned long *pulSendingTag, unsigned long *pulDesiredReceivingTag, unsigned long *pulReceivingTag, error_status_t *pStatus)
     * }
     */
    public static void RpcCsGetTags(MemorySegment hBinding, int fServerSide, MemorySegment pulSendingTag, MemorySegment pulDesiredReceivingTag, MemorySegment pulReceivingTag, MemorySegment pStatus) {
        var mh$ = RpcCsGetTags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcCsGetTags", hBinding, fServerSide, pulSendingTag, pulDesiredReceivingTag, pulReceivingTag, pStatus);
            }
            mh$.invokeExact(hBinding, fServerSide, pulSendingTag, pulDesiredReceivingTag, pulReceivingTag, pStatus);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef const MIDL_STUB_DESC *PMIDL_STUB_DESC
     * }
     */
    public static final AddressLayout PMIDL_STUB_DESC = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef void *PMIDL_XMIT_TYPE
     * }
     */
    public static final AddressLayout PMIDL_XMIT_TYPE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MIDL_METHOD_PROPERTY {
     *     unsigned long Id;
     *     ULONG_PTR Value;
     * } *PMIDL_METHOD_PROPERTY
     * }
     */
    public static final AddressLayout PMIDL_METHOD_PROPERTY = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MIDL_METHOD_PROPERTY_MAP {
     *     unsigned long Count;
     *     const MIDL_METHOD_PROPERTY *Properties;
     * } *PMIDL_METHOD_PROPERTY_MAP
     * }
     */
    public static final AddressLayout PMIDL_METHOD_PROPERTY_MAP = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MIDL_SERVER_INFO_ {
     *     PMIDL_STUB_DESC pStubDesc;
     *     const SERVER_ROUTINE *DispatchTable;
     *     PFORMAT_STRING ProcString;
     *     const unsigned short *FmtStringOffset;
     *     const STUB_THUNK *ThunkTable;
     *     PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
     *     ULONG_PTR nCount;
     *     PMIDL_SYNTAX_INFO pSyntaxInfo;
     * } *PMIDL_SERVER_INFO
     * }
     */
    public static final AddressLayout PMIDL_SERVER_INFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef MIDL_STUBLESS_PROXY_INFO *PMIDL_STUBLESS_PROXY_INFO
     * }
     */
    public static final AddressLayout PMIDL_STUBLESS_PROXY_INFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef unsigned short *PARAM_OFFSETTABLE
     * }
     */
    public static final AddressLayout PARAM_OFFSETTABLE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef unsigned short *PPARAM_OFFSETTABLE
     * }
     */
    public static final AddressLayout PPARAM_OFFSETTABLE = wgl_h.C_POINTER;
    private static final int XLAT_SERVER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XLAT_SERVER = 1
     * }
     */
    public static int XLAT_SERVER() {
        return XLAT_SERVER;
    }
    private static final int XLAT_CLIENT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XLAT_CLIENT = 2
     * }
     */
    public static int XLAT_CLIENT() {
        return XLAT_CLIENT;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _FULL_PTR_XLAT_TABLES {
     *     void *RefIdToPointer;
     *     void *PointerToRefId;
     *     unsigned long NextRefId;
     *     XLAT_SIDE XlatSide;
     * } *PFULL_PTR_XLAT_TABLES
     * }
     */
    public static final AddressLayout PFULL_PTR_XLAT_TABLES = wgl_h.C_POINTER;
    private static final int SYSTEM_HANDLE_FILE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _system_handle_t.SYSTEM_HANDLE_FILE = 0
     * }
     */
    public static int SYSTEM_HANDLE_FILE() {
        return SYSTEM_HANDLE_FILE;
    }
    private static final int SYSTEM_HANDLE_SEMAPHORE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _system_handle_t.SYSTEM_HANDLE_SEMAPHORE = 1
     * }
     */
    public static int SYSTEM_HANDLE_SEMAPHORE() {
        return SYSTEM_HANDLE_SEMAPHORE;
    }
    private static final int SYSTEM_HANDLE_EVENT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _system_handle_t.SYSTEM_HANDLE_EVENT = 2
     * }
     */
    public static int SYSTEM_HANDLE_EVENT() {
        return SYSTEM_HANDLE_EVENT;
    }
    private static final int SYSTEM_HANDLE_MUTEX = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _system_handle_t.SYSTEM_HANDLE_MUTEX = 3
     * }
     */
    public static int SYSTEM_HANDLE_MUTEX() {
        return SYSTEM_HANDLE_MUTEX;
    }
    private static final int SYSTEM_HANDLE_PROCESS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _system_handle_t.SYSTEM_HANDLE_PROCESS = 4
     * }
     */
    public static int SYSTEM_HANDLE_PROCESS() {
        return SYSTEM_HANDLE_PROCESS;
    }
    private static final int SYSTEM_HANDLE_TOKEN = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _system_handle_t.SYSTEM_HANDLE_TOKEN = 5
     * }
     */
    public static int SYSTEM_HANDLE_TOKEN() {
        return SYSTEM_HANDLE_TOKEN;
    }
    private static final int SYSTEM_HANDLE_SECTION = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _system_handle_t.SYSTEM_HANDLE_SECTION = 6
     * }
     */
    public static int SYSTEM_HANDLE_SECTION() {
        return SYSTEM_HANDLE_SECTION;
    }
    private static final int SYSTEM_HANDLE_REG_KEY = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _system_handle_t.SYSTEM_HANDLE_REG_KEY = 7
     * }
     */
    public static int SYSTEM_HANDLE_REG_KEY() {
        return SYSTEM_HANDLE_REG_KEY;
    }
    private static final int SYSTEM_HANDLE_THREAD = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _system_handle_t.SYSTEM_HANDLE_THREAD = 8
     * }
     */
    public static int SYSTEM_HANDLE_THREAD() {
        return SYSTEM_HANDLE_THREAD;
    }
    private static final int SYSTEM_HANDLE_COMPOSITION_OBJECT = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _system_handle_t.SYSTEM_HANDLE_COMPOSITION_OBJECT = 9
     * }
     */
    public static int SYSTEM_HANDLE_COMPOSITION_OBJECT() {
        return SYSTEM_HANDLE_COMPOSITION_OBJECT;
    }
    private static final int SYSTEM_HANDLE_SOCKET = (int)10L;
    /**
     * {@snippet lang=c :
     * enum _system_handle_t.SYSTEM_HANDLE_SOCKET = 10
     * }
     */
    public static int SYSTEM_HANDLE_SOCKET() {
        return SYSTEM_HANDLE_SOCKET;
    }
    private static final int SYSTEM_HANDLE_JOB = (int)11L;
    /**
     * {@snippet lang=c :
     * enum _system_handle_t.SYSTEM_HANDLE_JOB = 11
     * }
     */
    public static int SYSTEM_HANDLE_JOB() {
        return SYSTEM_HANDLE_JOB;
    }
    private static final int SYSTEM_HANDLE_PIPE = (int)12L;
    /**
     * {@snippet lang=c :
     * enum _system_handle_t.SYSTEM_HANDLE_PIPE = 12
     * }
     */
    public static int SYSTEM_HANDLE_PIPE() {
        return SYSTEM_HANDLE_PIPE;
    }
    private static final int SYSTEM_HANDLE_MAX = (int)12L;
    /**
     * {@snippet lang=c :
     * enum _system_handle_t.SYSTEM_HANDLE_MAX = 12
     * }
     */
    public static int SYSTEM_HANDLE_MAX() {
        return SYSTEM_HANDLE_MAX;
    }
    private static final int SYSTEM_HANDLE_INVALID = (int)255L;
    /**
     * {@snippet lang=c :
     * enum _system_handle_t.SYSTEM_HANDLE_INVALID = 255
     * }
     */
    public static int SYSTEM_HANDLE_INVALID() {
        return SYSTEM_HANDLE_INVALID;
    }
    private static final int MidlInterceptionInfoVersionOne = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MidlInterceptionInfoVersionOne = 1
     * }
     */
    public static int MidlInterceptionInfoVersionOne() {
        return MidlInterceptionInfoVersionOne;
    }
    private static final int MidlWinrtTypeSerializationInfoVersionOne = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MidlWinrtTypeSerializationInfoVersionOne = 1
     * }
     */
    public static int MidlWinrtTypeSerializationInfoVersionOne() {
        return MidlWinrtTypeSerializationInfoVersionOne;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _MIDL_INTERCEPTION_INFO {
     *     unsigned long Version;
     *     PFORMAT_STRING ProcString;
     *     const unsigned short *ProcFormatOffsetTable;
     *     unsigned long ProcCount;
     *     PFORMAT_STRING TypeString;
     * } *PMIDL_INTERCEPTION_INFO
     * }
     */
    public static final AddressLayout PMIDL_INTERCEPTION_INFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MIDL_WINRT_TYPE_SERIALIZATION_INFO {
     *     unsigned long Version;
     *     PFORMAT_STRING TypeFormatString;
     *     unsigned short FormatStringSize;
     *     unsigned short TypeOffset;
     *     PMIDL_STUB_DESC StubDesc;
     * } *PMIDL_WINRT_TYPE_SERIALIZATION_INFO
     * }
     */
    public static final AddressLayout PMIDL_WINRT_TYPE_SERIALIZATION_INFO = wgl_h.C_POINTER;

    private static class NdrClientGetSupportedSyntaxes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrClientGetSupportedSyntaxes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS NdrClientGetSupportedSyntaxes(RPC_CLIENT_INTERFACE *pInf, unsigned long *pCount, MIDL_SYNTAX_INFO **pArr)
     * }
     */
    public static FunctionDescriptor NdrClientGetSupportedSyntaxes$descriptor() {
        return NdrClientGetSupportedSyntaxes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS NdrClientGetSupportedSyntaxes(RPC_CLIENT_INTERFACE *pInf, unsigned long *pCount, MIDL_SYNTAX_INFO **pArr)
     * }
     */
    public static MethodHandle NdrClientGetSupportedSyntaxes$handle() {
        return NdrClientGetSupportedSyntaxes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS NdrClientGetSupportedSyntaxes(RPC_CLIENT_INTERFACE *pInf, unsigned long *pCount, MIDL_SYNTAX_INFO **pArr)
     * }
     */
    public static MemorySegment NdrClientGetSupportedSyntaxes$address() {
        return NdrClientGetSupportedSyntaxes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS NdrClientGetSupportedSyntaxes(RPC_CLIENT_INTERFACE *pInf, unsigned long *pCount, MIDL_SYNTAX_INFO **pArr)
     * }
     */
    public static int NdrClientGetSupportedSyntaxes(MemorySegment pInf, MemorySegment pCount, MemorySegment pArr) {
        var mh$ = NdrClientGetSupportedSyntaxes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrClientGetSupportedSyntaxes", pInf, pCount, pArr);
            }
            return (int)mh$.invokeExact(pInf, pCount, pArr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrServerGetSupportedSyntaxes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrServerGetSupportedSyntaxes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS NdrServerGetSupportedSyntaxes(RPC_SERVER_INTERFACE *pInf, unsigned long *pCount, MIDL_SYNTAX_INFO **pArr, unsigned long *pPreferSyntaxIndex)
     * }
     */
    public static FunctionDescriptor NdrServerGetSupportedSyntaxes$descriptor() {
        return NdrServerGetSupportedSyntaxes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS NdrServerGetSupportedSyntaxes(RPC_SERVER_INTERFACE *pInf, unsigned long *pCount, MIDL_SYNTAX_INFO **pArr, unsigned long *pPreferSyntaxIndex)
     * }
     */
    public static MethodHandle NdrServerGetSupportedSyntaxes$handle() {
        return NdrServerGetSupportedSyntaxes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS NdrServerGetSupportedSyntaxes(RPC_SERVER_INTERFACE *pInf, unsigned long *pCount, MIDL_SYNTAX_INFO **pArr, unsigned long *pPreferSyntaxIndex)
     * }
     */
    public static MemorySegment NdrServerGetSupportedSyntaxes$address() {
        return NdrServerGetSupportedSyntaxes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS NdrServerGetSupportedSyntaxes(RPC_SERVER_INTERFACE *pInf, unsigned long *pCount, MIDL_SYNTAX_INFO **pArr, unsigned long *pPreferSyntaxIndex)
     * }
     */
    public static int NdrServerGetSupportedSyntaxes(MemorySegment pInf, MemorySegment pCount, MemorySegment pArr, MemorySegment pPreferSyntaxIndex) {
        var mh$ = NdrServerGetSupportedSyntaxes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrServerGetSupportedSyntaxes", pInf, pCount, pArr, pPreferSyntaxIndex);
            }
            return (int)mh$.invokeExact(pInf, pCount, pArr, pPreferSyntaxIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrSimpleTypeMarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_CHAR
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrSimpleTypeMarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrSimpleTypeMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, unsigned char FormatChar)
     * }
     */
    public static FunctionDescriptor NdrSimpleTypeMarshall$descriptor() {
        return NdrSimpleTypeMarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrSimpleTypeMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, unsigned char FormatChar)
     * }
     */
    public static MethodHandle NdrSimpleTypeMarshall$handle() {
        return NdrSimpleTypeMarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrSimpleTypeMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, unsigned char FormatChar)
     * }
     */
    public static MemorySegment NdrSimpleTypeMarshall$address() {
        return NdrSimpleTypeMarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrSimpleTypeMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, unsigned char FormatChar)
     * }
     */
    public static void NdrSimpleTypeMarshall(MemorySegment pStubMsg, MemorySegment pMemory, byte FormatChar) {
        var mh$ = NdrSimpleTypeMarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrSimpleTypeMarshall", pStubMsg, pMemory, FormatChar);
            }
            mh$.invokeExact(pStubMsg, pMemory, FormatChar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrPointerMarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrPointerMarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrPointerMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrPointerMarshall$descriptor() {
        return NdrPointerMarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrPointerMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrPointerMarshall$handle() {
        return NdrPointerMarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrPointerMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrPointerMarshall$address() {
        return NdrPointerMarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrPointerMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrPointerMarshall(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrPointerMarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrPointerMarshall", pStubMsg, pMemory, pFormat);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrCsArrayMarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrCsArrayMarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrCsArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrCsArrayMarshall$descriptor() {
        return NdrCsArrayMarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrCsArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrCsArrayMarshall$handle() {
        return NdrCsArrayMarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrCsArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrCsArrayMarshall$address() {
        return NdrCsArrayMarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrCsArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrCsArrayMarshall(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrCsArrayMarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrCsArrayMarshall", pStubMsg, pMemory, pFormat);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrCsTagMarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrCsTagMarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrCsTagMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrCsTagMarshall$descriptor() {
        return NdrCsTagMarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrCsTagMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrCsTagMarshall$handle() {
        return NdrCsTagMarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrCsTagMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrCsTagMarshall$address() {
        return NdrCsTagMarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrCsTagMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrCsTagMarshall(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrCsTagMarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrCsTagMarshall", pStubMsg, pMemory, pFormat);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrSimpleStructMarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrSimpleStructMarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrSimpleStructMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrSimpleStructMarshall$descriptor() {
        return NdrSimpleStructMarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrSimpleStructMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrSimpleStructMarshall$handle() {
        return NdrSimpleStructMarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrSimpleStructMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrSimpleStructMarshall$address() {
        return NdrSimpleStructMarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrSimpleStructMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrSimpleStructMarshall(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrSimpleStructMarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrSimpleStructMarshall", pStubMsg, pMemory, pFormat);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrConformantStructMarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrConformantStructMarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrConformantStructMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrConformantStructMarshall$descriptor() {
        return NdrConformantStructMarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrConformantStructMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrConformantStructMarshall$handle() {
        return NdrConformantStructMarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrConformantStructMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrConformantStructMarshall$address() {
        return NdrConformantStructMarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrConformantStructMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrConformantStructMarshall(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrConformantStructMarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrConformantStructMarshall", pStubMsg, pMemory, pFormat);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrConformantVaryingStructMarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrConformantVaryingStructMarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrConformantVaryingStructMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrConformantVaryingStructMarshall$descriptor() {
        return NdrConformantVaryingStructMarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrConformantVaryingStructMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrConformantVaryingStructMarshall$handle() {
        return NdrConformantVaryingStructMarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrConformantVaryingStructMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrConformantVaryingStructMarshall$address() {
        return NdrConformantVaryingStructMarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrConformantVaryingStructMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrConformantVaryingStructMarshall(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrConformantVaryingStructMarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrConformantVaryingStructMarshall", pStubMsg, pMemory, pFormat);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrComplexStructMarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrComplexStructMarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrComplexStructMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrComplexStructMarshall$descriptor() {
        return NdrComplexStructMarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrComplexStructMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrComplexStructMarshall$handle() {
        return NdrComplexStructMarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrComplexStructMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrComplexStructMarshall$address() {
        return NdrComplexStructMarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrComplexStructMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrComplexStructMarshall(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrComplexStructMarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrComplexStructMarshall", pStubMsg, pMemory, pFormat);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrFixedArrayMarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrFixedArrayMarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrFixedArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrFixedArrayMarshall$descriptor() {
        return NdrFixedArrayMarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrFixedArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrFixedArrayMarshall$handle() {
        return NdrFixedArrayMarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrFixedArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrFixedArrayMarshall$address() {
        return NdrFixedArrayMarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrFixedArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrFixedArrayMarshall(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrFixedArrayMarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrFixedArrayMarshall", pStubMsg, pMemory, pFormat);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrConformantArrayMarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrConformantArrayMarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrConformantArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrConformantArrayMarshall$descriptor() {
        return NdrConformantArrayMarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrConformantArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrConformantArrayMarshall$handle() {
        return NdrConformantArrayMarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrConformantArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrConformantArrayMarshall$address() {
        return NdrConformantArrayMarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrConformantArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrConformantArrayMarshall(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrConformantArrayMarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrConformantArrayMarshall", pStubMsg, pMemory, pFormat);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrConformantVaryingArrayMarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrConformantVaryingArrayMarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrConformantVaryingArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrConformantVaryingArrayMarshall$descriptor() {
        return NdrConformantVaryingArrayMarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrConformantVaryingArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrConformantVaryingArrayMarshall$handle() {
        return NdrConformantVaryingArrayMarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrConformantVaryingArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrConformantVaryingArrayMarshall$address() {
        return NdrConformantVaryingArrayMarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrConformantVaryingArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrConformantVaryingArrayMarshall(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrConformantVaryingArrayMarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrConformantVaryingArrayMarshall", pStubMsg, pMemory, pFormat);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrVaryingArrayMarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrVaryingArrayMarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrVaryingArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrVaryingArrayMarshall$descriptor() {
        return NdrVaryingArrayMarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrVaryingArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrVaryingArrayMarshall$handle() {
        return NdrVaryingArrayMarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrVaryingArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrVaryingArrayMarshall$address() {
        return NdrVaryingArrayMarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrVaryingArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrVaryingArrayMarshall(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrVaryingArrayMarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrVaryingArrayMarshall", pStubMsg, pMemory, pFormat);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrComplexArrayMarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrComplexArrayMarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrComplexArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrComplexArrayMarshall$descriptor() {
        return NdrComplexArrayMarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrComplexArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrComplexArrayMarshall$handle() {
        return NdrComplexArrayMarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrComplexArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrComplexArrayMarshall$address() {
        return NdrComplexArrayMarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrComplexArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrComplexArrayMarshall(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrComplexArrayMarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrComplexArrayMarshall", pStubMsg, pMemory, pFormat);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrNonConformantStringMarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrNonConformantStringMarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrNonConformantStringMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrNonConformantStringMarshall$descriptor() {
        return NdrNonConformantStringMarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrNonConformantStringMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrNonConformantStringMarshall$handle() {
        return NdrNonConformantStringMarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrNonConformantStringMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrNonConformantStringMarshall$address() {
        return NdrNonConformantStringMarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrNonConformantStringMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrNonConformantStringMarshall(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrNonConformantStringMarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrNonConformantStringMarshall", pStubMsg, pMemory, pFormat);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrConformantStringMarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrConformantStringMarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrConformantStringMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrConformantStringMarshall$descriptor() {
        return NdrConformantStringMarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrConformantStringMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrConformantStringMarshall$handle() {
        return NdrConformantStringMarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrConformantStringMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrConformantStringMarshall$address() {
        return NdrConformantStringMarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrConformantStringMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrConformantStringMarshall(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrConformantStringMarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrConformantStringMarshall", pStubMsg, pMemory, pFormat);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrEncapsulatedUnionMarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrEncapsulatedUnionMarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrEncapsulatedUnionMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrEncapsulatedUnionMarshall$descriptor() {
        return NdrEncapsulatedUnionMarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrEncapsulatedUnionMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrEncapsulatedUnionMarshall$handle() {
        return NdrEncapsulatedUnionMarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrEncapsulatedUnionMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrEncapsulatedUnionMarshall$address() {
        return NdrEncapsulatedUnionMarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrEncapsulatedUnionMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrEncapsulatedUnionMarshall(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrEncapsulatedUnionMarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrEncapsulatedUnionMarshall", pStubMsg, pMemory, pFormat);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrNonEncapsulatedUnionMarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrNonEncapsulatedUnionMarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrNonEncapsulatedUnionMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrNonEncapsulatedUnionMarshall$descriptor() {
        return NdrNonEncapsulatedUnionMarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrNonEncapsulatedUnionMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrNonEncapsulatedUnionMarshall$handle() {
        return NdrNonEncapsulatedUnionMarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrNonEncapsulatedUnionMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrNonEncapsulatedUnionMarshall$address() {
        return NdrNonEncapsulatedUnionMarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrNonEncapsulatedUnionMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrNonEncapsulatedUnionMarshall(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrNonEncapsulatedUnionMarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrNonEncapsulatedUnionMarshall", pStubMsg, pMemory, pFormat);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrByteCountPointerMarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrByteCountPointerMarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrByteCountPointerMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrByteCountPointerMarshall$descriptor() {
        return NdrByteCountPointerMarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrByteCountPointerMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrByteCountPointerMarshall$handle() {
        return NdrByteCountPointerMarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrByteCountPointerMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrByteCountPointerMarshall$address() {
        return NdrByteCountPointerMarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrByteCountPointerMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrByteCountPointerMarshall(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrByteCountPointerMarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrByteCountPointerMarshall", pStubMsg, pMemory, pFormat);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrXmitOrRepAsMarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrXmitOrRepAsMarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrXmitOrRepAsMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrXmitOrRepAsMarshall$descriptor() {
        return NdrXmitOrRepAsMarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrXmitOrRepAsMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrXmitOrRepAsMarshall$handle() {
        return NdrXmitOrRepAsMarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrXmitOrRepAsMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrXmitOrRepAsMarshall$address() {
        return NdrXmitOrRepAsMarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrXmitOrRepAsMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrXmitOrRepAsMarshall(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrXmitOrRepAsMarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrXmitOrRepAsMarshall", pStubMsg, pMemory, pFormat);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrUserMarshalMarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrUserMarshalMarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrUserMarshalMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrUserMarshalMarshall$descriptor() {
        return NdrUserMarshalMarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrUserMarshalMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrUserMarshalMarshall$handle() {
        return NdrUserMarshalMarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrUserMarshalMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrUserMarshalMarshall$address() {
        return NdrUserMarshalMarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrUserMarshalMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrUserMarshalMarshall(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrUserMarshalMarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrUserMarshalMarshall", pStubMsg, pMemory, pFormat);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrInterfacePointerMarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrInterfacePointerMarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrInterfacePointerMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrInterfacePointerMarshall$descriptor() {
        return NdrInterfacePointerMarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrInterfacePointerMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrInterfacePointerMarshall$handle() {
        return NdrInterfacePointerMarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrInterfacePointerMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrInterfacePointerMarshall$address() {
        return NdrInterfacePointerMarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrInterfacePointerMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrInterfacePointerMarshall(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrInterfacePointerMarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrInterfacePointerMarshall", pStubMsg, pMemory, pFormat);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrClientContextMarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrClientContextMarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrClientContextMarshall(PMIDL_STUB_MESSAGE pStubMsg, NDR_CCONTEXT ContextHandle, int fCheck)
     * }
     */
    public static FunctionDescriptor NdrClientContextMarshall$descriptor() {
        return NdrClientContextMarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrClientContextMarshall(PMIDL_STUB_MESSAGE pStubMsg, NDR_CCONTEXT ContextHandle, int fCheck)
     * }
     */
    public static MethodHandle NdrClientContextMarshall$handle() {
        return NdrClientContextMarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrClientContextMarshall(PMIDL_STUB_MESSAGE pStubMsg, NDR_CCONTEXT ContextHandle, int fCheck)
     * }
     */
    public static MemorySegment NdrClientContextMarshall$address() {
        return NdrClientContextMarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrClientContextMarshall(PMIDL_STUB_MESSAGE pStubMsg, NDR_CCONTEXT ContextHandle, int fCheck)
     * }
     */
    public static void NdrClientContextMarshall(MemorySegment pStubMsg, MemorySegment ContextHandle, int fCheck) {
        var mh$ = NdrClientContextMarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrClientContextMarshall", pStubMsg, ContextHandle, fCheck);
            }
            mh$.invokeExact(pStubMsg, ContextHandle, fCheck);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrServerContextMarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrServerContextMarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrServerContextMarshall(PMIDL_STUB_MESSAGE pStubMsg, NDR_SCONTEXT ContextHandle, NDR_RUNDOWN RundownRoutine)
     * }
     */
    public static FunctionDescriptor NdrServerContextMarshall$descriptor() {
        return NdrServerContextMarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrServerContextMarshall(PMIDL_STUB_MESSAGE pStubMsg, NDR_SCONTEXT ContextHandle, NDR_RUNDOWN RundownRoutine)
     * }
     */
    public static MethodHandle NdrServerContextMarshall$handle() {
        return NdrServerContextMarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrServerContextMarshall(PMIDL_STUB_MESSAGE pStubMsg, NDR_SCONTEXT ContextHandle, NDR_RUNDOWN RundownRoutine)
     * }
     */
    public static MemorySegment NdrServerContextMarshall$address() {
        return NdrServerContextMarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrServerContextMarshall(PMIDL_STUB_MESSAGE pStubMsg, NDR_SCONTEXT ContextHandle, NDR_RUNDOWN RundownRoutine)
     * }
     */
    public static void NdrServerContextMarshall(MemorySegment pStubMsg, MemorySegment ContextHandle, MemorySegment RundownRoutine) {
        var mh$ = NdrServerContextMarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrServerContextMarshall", pStubMsg, ContextHandle, RundownRoutine);
            }
            mh$.invokeExact(pStubMsg, ContextHandle, RundownRoutine);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrServerContextNewMarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrServerContextNewMarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrServerContextNewMarshall(PMIDL_STUB_MESSAGE pStubMsg, NDR_SCONTEXT ContextHandle, NDR_RUNDOWN RundownRoutine, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrServerContextNewMarshall$descriptor() {
        return NdrServerContextNewMarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrServerContextNewMarshall(PMIDL_STUB_MESSAGE pStubMsg, NDR_SCONTEXT ContextHandle, NDR_RUNDOWN RundownRoutine, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrServerContextNewMarshall$handle() {
        return NdrServerContextNewMarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrServerContextNewMarshall(PMIDL_STUB_MESSAGE pStubMsg, NDR_SCONTEXT ContextHandle, NDR_RUNDOWN RundownRoutine, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrServerContextNewMarshall$address() {
        return NdrServerContextNewMarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrServerContextNewMarshall(PMIDL_STUB_MESSAGE pStubMsg, NDR_SCONTEXT ContextHandle, NDR_RUNDOWN RundownRoutine, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrServerContextNewMarshall(MemorySegment pStubMsg, MemorySegment ContextHandle, MemorySegment RundownRoutine, MemorySegment pFormat) {
        var mh$ = NdrServerContextNewMarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrServerContextNewMarshall", pStubMsg, ContextHandle, RundownRoutine, pFormat);
            }
            mh$.invokeExact(pStubMsg, ContextHandle, RundownRoutine, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrSimpleTypeUnmarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_CHAR
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrSimpleTypeUnmarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrSimpleTypeUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, unsigned char FormatChar)
     * }
     */
    public static FunctionDescriptor NdrSimpleTypeUnmarshall$descriptor() {
        return NdrSimpleTypeUnmarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrSimpleTypeUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, unsigned char FormatChar)
     * }
     */
    public static MethodHandle NdrSimpleTypeUnmarshall$handle() {
        return NdrSimpleTypeUnmarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrSimpleTypeUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, unsigned char FormatChar)
     * }
     */
    public static MemorySegment NdrSimpleTypeUnmarshall$address() {
        return NdrSimpleTypeUnmarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrSimpleTypeUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, unsigned char FormatChar)
     * }
     */
    public static void NdrSimpleTypeUnmarshall(MemorySegment pStubMsg, MemorySegment pMemory, byte FormatChar) {
        var mh$ = NdrSimpleTypeUnmarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrSimpleTypeUnmarshall", pStubMsg, pMemory, FormatChar);
            }
            mh$.invokeExact(pStubMsg, pMemory, FormatChar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrCsArrayUnmarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_CHAR
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrCsArrayUnmarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrCsArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static FunctionDescriptor NdrCsArrayUnmarshall$descriptor() {
        return NdrCsArrayUnmarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrCsArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MethodHandle NdrCsArrayUnmarshall$handle() {
        return NdrCsArrayUnmarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrCsArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrCsArrayUnmarshall$address() {
        return NdrCsArrayUnmarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrCsArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrCsArrayUnmarshall(MemorySegment pStubMsg, MemorySegment ppMemory, MemorySegment pFormat, byte fMustAlloc) {
        var mh$ = NdrCsArrayUnmarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrCsArrayUnmarshall", pStubMsg, ppMemory, pFormat, fMustAlloc);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrCsTagUnmarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_CHAR
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrCsTagUnmarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrCsTagUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static FunctionDescriptor NdrCsTagUnmarshall$descriptor() {
        return NdrCsTagUnmarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrCsTagUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MethodHandle NdrCsTagUnmarshall$handle() {
        return NdrCsTagUnmarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrCsTagUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrCsTagUnmarshall$address() {
        return NdrCsTagUnmarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrCsTagUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrCsTagUnmarshall(MemorySegment pStubMsg, MemorySegment ppMemory, MemorySegment pFormat, byte fMustAlloc) {
        var mh$ = NdrCsTagUnmarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrCsTagUnmarshall", pStubMsg, ppMemory, pFormat, fMustAlloc);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrRangeUnmarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_CHAR
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrRangeUnmarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrRangeUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static FunctionDescriptor NdrRangeUnmarshall$descriptor() {
        return NdrRangeUnmarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrRangeUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MethodHandle NdrRangeUnmarshall$handle() {
        return NdrRangeUnmarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrRangeUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrRangeUnmarshall$address() {
        return NdrRangeUnmarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrRangeUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrRangeUnmarshall(MemorySegment pStubMsg, MemorySegment ppMemory, MemorySegment pFormat, byte fMustAlloc) {
        var mh$ = NdrRangeUnmarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrRangeUnmarshall", pStubMsg, ppMemory, pFormat, fMustAlloc);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrCorrelationInitialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrCorrelationInitialize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrCorrelationInitialize(PMIDL_STUB_MESSAGE pStubMsg, void *pMemory, unsigned long CacheSize, unsigned long flags)
     * }
     */
    public static FunctionDescriptor NdrCorrelationInitialize$descriptor() {
        return NdrCorrelationInitialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrCorrelationInitialize(PMIDL_STUB_MESSAGE pStubMsg, void *pMemory, unsigned long CacheSize, unsigned long flags)
     * }
     */
    public static MethodHandle NdrCorrelationInitialize$handle() {
        return NdrCorrelationInitialize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrCorrelationInitialize(PMIDL_STUB_MESSAGE pStubMsg, void *pMemory, unsigned long CacheSize, unsigned long flags)
     * }
     */
    public static MemorySegment NdrCorrelationInitialize$address() {
        return NdrCorrelationInitialize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrCorrelationInitialize(PMIDL_STUB_MESSAGE pStubMsg, void *pMemory, unsigned long CacheSize, unsigned long flags)
     * }
     */
    public static void NdrCorrelationInitialize(MemorySegment pStubMsg, MemorySegment pMemory, int CacheSize, int flags) {
        var mh$ = NdrCorrelationInitialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrCorrelationInitialize", pStubMsg, pMemory, CacheSize, flags);
            }
            mh$.invokeExact(pStubMsg, pMemory, CacheSize, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrCorrelationPass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrCorrelationPass");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrCorrelationPass(PMIDL_STUB_MESSAGE pStubMsg)
     * }
     */
    public static FunctionDescriptor NdrCorrelationPass$descriptor() {
        return NdrCorrelationPass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrCorrelationPass(PMIDL_STUB_MESSAGE pStubMsg)
     * }
     */
    public static MethodHandle NdrCorrelationPass$handle() {
        return NdrCorrelationPass.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrCorrelationPass(PMIDL_STUB_MESSAGE pStubMsg)
     * }
     */
    public static MemorySegment NdrCorrelationPass$address() {
        return NdrCorrelationPass.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrCorrelationPass(PMIDL_STUB_MESSAGE pStubMsg)
     * }
     */
    public static void NdrCorrelationPass(MemorySegment pStubMsg) {
        var mh$ = NdrCorrelationPass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrCorrelationPass", pStubMsg);
            }
            mh$.invokeExact(pStubMsg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrCorrelationFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrCorrelationFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrCorrelationFree(PMIDL_STUB_MESSAGE pStubMsg)
     * }
     */
    public static FunctionDescriptor NdrCorrelationFree$descriptor() {
        return NdrCorrelationFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrCorrelationFree(PMIDL_STUB_MESSAGE pStubMsg)
     * }
     */
    public static MethodHandle NdrCorrelationFree$handle() {
        return NdrCorrelationFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrCorrelationFree(PMIDL_STUB_MESSAGE pStubMsg)
     * }
     */
    public static MemorySegment NdrCorrelationFree$address() {
        return NdrCorrelationFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrCorrelationFree(PMIDL_STUB_MESSAGE pStubMsg)
     * }
     */
    public static void NdrCorrelationFree(MemorySegment pStubMsg) {
        var mh$ = NdrCorrelationFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrCorrelationFree", pStubMsg);
            }
            mh$.invokeExact(pStubMsg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrPointerUnmarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_CHAR
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrPointerUnmarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrPointerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static FunctionDescriptor NdrPointerUnmarshall$descriptor() {
        return NdrPointerUnmarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrPointerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MethodHandle NdrPointerUnmarshall$handle() {
        return NdrPointerUnmarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrPointerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrPointerUnmarshall$address() {
        return NdrPointerUnmarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrPointerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrPointerUnmarshall(MemorySegment pStubMsg, MemorySegment ppMemory, MemorySegment pFormat, byte fMustAlloc) {
        var mh$ = NdrPointerUnmarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrPointerUnmarshall", pStubMsg, ppMemory, pFormat, fMustAlloc);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrSimpleStructUnmarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_CHAR
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrSimpleStructUnmarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrSimpleStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static FunctionDescriptor NdrSimpleStructUnmarshall$descriptor() {
        return NdrSimpleStructUnmarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrSimpleStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MethodHandle NdrSimpleStructUnmarshall$handle() {
        return NdrSimpleStructUnmarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrSimpleStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrSimpleStructUnmarshall$address() {
        return NdrSimpleStructUnmarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrSimpleStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrSimpleStructUnmarshall(MemorySegment pStubMsg, MemorySegment ppMemory, MemorySegment pFormat, byte fMustAlloc) {
        var mh$ = NdrSimpleStructUnmarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrSimpleStructUnmarshall", pStubMsg, ppMemory, pFormat, fMustAlloc);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrConformantStructUnmarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_CHAR
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrConformantStructUnmarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrConformantStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static FunctionDescriptor NdrConformantStructUnmarshall$descriptor() {
        return NdrConformantStructUnmarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrConformantStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MethodHandle NdrConformantStructUnmarshall$handle() {
        return NdrConformantStructUnmarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrConformantStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrConformantStructUnmarshall$address() {
        return NdrConformantStructUnmarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrConformantStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrConformantStructUnmarshall(MemorySegment pStubMsg, MemorySegment ppMemory, MemorySegment pFormat, byte fMustAlloc) {
        var mh$ = NdrConformantStructUnmarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrConformantStructUnmarshall", pStubMsg, ppMemory, pFormat, fMustAlloc);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrConformantVaryingStructUnmarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_CHAR
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrConformantVaryingStructUnmarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrConformantVaryingStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static FunctionDescriptor NdrConformantVaryingStructUnmarshall$descriptor() {
        return NdrConformantVaryingStructUnmarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrConformantVaryingStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MethodHandle NdrConformantVaryingStructUnmarshall$handle() {
        return NdrConformantVaryingStructUnmarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrConformantVaryingStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrConformantVaryingStructUnmarshall$address() {
        return NdrConformantVaryingStructUnmarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrConformantVaryingStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrConformantVaryingStructUnmarshall(MemorySegment pStubMsg, MemorySegment ppMemory, MemorySegment pFormat, byte fMustAlloc) {
        var mh$ = NdrConformantVaryingStructUnmarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrConformantVaryingStructUnmarshall", pStubMsg, ppMemory, pFormat, fMustAlloc);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrComplexStructUnmarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_CHAR
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrComplexStructUnmarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrComplexStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static FunctionDescriptor NdrComplexStructUnmarshall$descriptor() {
        return NdrComplexStructUnmarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrComplexStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MethodHandle NdrComplexStructUnmarshall$handle() {
        return NdrComplexStructUnmarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrComplexStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrComplexStructUnmarshall$address() {
        return NdrComplexStructUnmarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrComplexStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrComplexStructUnmarshall(MemorySegment pStubMsg, MemorySegment ppMemory, MemorySegment pFormat, byte fMustAlloc) {
        var mh$ = NdrComplexStructUnmarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrComplexStructUnmarshall", pStubMsg, ppMemory, pFormat, fMustAlloc);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrFixedArrayUnmarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_CHAR
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrFixedArrayUnmarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrFixedArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static FunctionDescriptor NdrFixedArrayUnmarshall$descriptor() {
        return NdrFixedArrayUnmarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrFixedArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MethodHandle NdrFixedArrayUnmarshall$handle() {
        return NdrFixedArrayUnmarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrFixedArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrFixedArrayUnmarshall$address() {
        return NdrFixedArrayUnmarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrFixedArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrFixedArrayUnmarshall(MemorySegment pStubMsg, MemorySegment ppMemory, MemorySegment pFormat, byte fMustAlloc) {
        var mh$ = NdrFixedArrayUnmarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrFixedArrayUnmarshall", pStubMsg, ppMemory, pFormat, fMustAlloc);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrConformantArrayUnmarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_CHAR
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrConformantArrayUnmarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrConformantArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static FunctionDescriptor NdrConformantArrayUnmarshall$descriptor() {
        return NdrConformantArrayUnmarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrConformantArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MethodHandle NdrConformantArrayUnmarshall$handle() {
        return NdrConformantArrayUnmarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrConformantArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrConformantArrayUnmarshall$address() {
        return NdrConformantArrayUnmarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrConformantArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrConformantArrayUnmarshall(MemorySegment pStubMsg, MemorySegment ppMemory, MemorySegment pFormat, byte fMustAlloc) {
        var mh$ = NdrConformantArrayUnmarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrConformantArrayUnmarshall", pStubMsg, ppMemory, pFormat, fMustAlloc);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrConformantVaryingArrayUnmarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_CHAR
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrConformantVaryingArrayUnmarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrConformantVaryingArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static FunctionDescriptor NdrConformantVaryingArrayUnmarshall$descriptor() {
        return NdrConformantVaryingArrayUnmarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrConformantVaryingArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MethodHandle NdrConformantVaryingArrayUnmarshall$handle() {
        return NdrConformantVaryingArrayUnmarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrConformantVaryingArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrConformantVaryingArrayUnmarshall$address() {
        return NdrConformantVaryingArrayUnmarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrConformantVaryingArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrConformantVaryingArrayUnmarshall(MemorySegment pStubMsg, MemorySegment ppMemory, MemorySegment pFormat, byte fMustAlloc) {
        var mh$ = NdrConformantVaryingArrayUnmarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrConformantVaryingArrayUnmarshall", pStubMsg, ppMemory, pFormat, fMustAlloc);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrVaryingArrayUnmarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_CHAR
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrVaryingArrayUnmarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrVaryingArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static FunctionDescriptor NdrVaryingArrayUnmarshall$descriptor() {
        return NdrVaryingArrayUnmarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrVaryingArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MethodHandle NdrVaryingArrayUnmarshall$handle() {
        return NdrVaryingArrayUnmarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrVaryingArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrVaryingArrayUnmarshall$address() {
        return NdrVaryingArrayUnmarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrVaryingArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrVaryingArrayUnmarshall(MemorySegment pStubMsg, MemorySegment ppMemory, MemorySegment pFormat, byte fMustAlloc) {
        var mh$ = NdrVaryingArrayUnmarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrVaryingArrayUnmarshall", pStubMsg, ppMemory, pFormat, fMustAlloc);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrComplexArrayUnmarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_CHAR
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrComplexArrayUnmarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrComplexArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static FunctionDescriptor NdrComplexArrayUnmarshall$descriptor() {
        return NdrComplexArrayUnmarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrComplexArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MethodHandle NdrComplexArrayUnmarshall$handle() {
        return NdrComplexArrayUnmarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrComplexArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrComplexArrayUnmarshall$address() {
        return NdrComplexArrayUnmarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrComplexArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrComplexArrayUnmarshall(MemorySegment pStubMsg, MemorySegment ppMemory, MemorySegment pFormat, byte fMustAlloc) {
        var mh$ = NdrComplexArrayUnmarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrComplexArrayUnmarshall", pStubMsg, ppMemory, pFormat, fMustAlloc);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrNonConformantStringUnmarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_CHAR
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrNonConformantStringUnmarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrNonConformantStringUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static FunctionDescriptor NdrNonConformantStringUnmarshall$descriptor() {
        return NdrNonConformantStringUnmarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrNonConformantStringUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MethodHandle NdrNonConformantStringUnmarshall$handle() {
        return NdrNonConformantStringUnmarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrNonConformantStringUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrNonConformantStringUnmarshall$address() {
        return NdrNonConformantStringUnmarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrNonConformantStringUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrNonConformantStringUnmarshall(MemorySegment pStubMsg, MemorySegment ppMemory, MemorySegment pFormat, byte fMustAlloc) {
        var mh$ = NdrNonConformantStringUnmarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrNonConformantStringUnmarshall", pStubMsg, ppMemory, pFormat, fMustAlloc);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrConformantStringUnmarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_CHAR
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrConformantStringUnmarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrConformantStringUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static FunctionDescriptor NdrConformantStringUnmarshall$descriptor() {
        return NdrConformantStringUnmarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrConformantStringUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MethodHandle NdrConformantStringUnmarshall$handle() {
        return NdrConformantStringUnmarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrConformantStringUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrConformantStringUnmarshall$address() {
        return NdrConformantStringUnmarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrConformantStringUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrConformantStringUnmarshall(MemorySegment pStubMsg, MemorySegment ppMemory, MemorySegment pFormat, byte fMustAlloc) {
        var mh$ = NdrConformantStringUnmarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrConformantStringUnmarshall", pStubMsg, ppMemory, pFormat, fMustAlloc);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrEncapsulatedUnionUnmarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_CHAR
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrEncapsulatedUnionUnmarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrEncapsulatedUnionUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static FunctionDescriptor NdrEncapsulatedUnionUnmarshall$descriptor() {
        return NdrEncapsulatedUnionUnmarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrEncapsulatedUnionUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MethodHandle NdrEncapsulatedUnionUnmarshall$handle() {
        return NdrEncapsulatedUnionUnmarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrEncapsulatedUnionUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrEncapsulatedUnionUnmarshall$address() {
        return NdrEncapsulatedUnionUnmarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrEncapsulatedUnionUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrEncapsulatedUnionUnmarshall(MemorySegment pStubMsg, MemorySegment ppMemory, MemorySegment pFormat, byte fMustAlloc) {
        var mh$ = NdrEncapsulatedUnionUnmarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrEncapsulatedUnionUnmarshall", pStubMsg, ppMemory, pFormat, fMustAlloc);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrNonEncapsulatedUnionUnmarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_CHAR
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrNonEncapsulatedUnionUnmarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrNonEncapsulatedUnionUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static FunctionDescriptor NdrNonEncapsulatedUnionUnmarshall$descriptor() {
        return NdrNonEncapsulatedUnionUnmarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrNonEncapsulatedUnionUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MethodHandle NdrNonEncapsulatedUnionUnmarshall$handle() {
        return NdrNonEncapsulatedUnionUnmarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrNonEncapsulatedUnionUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrNonEncapsulatedUnionUnmarshall$address() {
        return NdrNonEncapsulatedUnionUnmarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrNonEncapsulatedUnionUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrNonEncapsulatedUnionUnmarshall(MemorySegment pStubMsg, MemorySegment ppMemory, MemorySegment pFormat, byte fMustAlloc) {
        var mh$ = NdrNonEncapsulatedUnionUnmarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrNonEncapsulatedUnionUnmarshall", pStubMsg, ppMemory, pFormat, fMustAlloc);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrByteCountPointerUnmarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_CHAR
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrByteCountPointerUnmarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrByteCountPointerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static FunctionDescriptor NdrByteCountPointerUnmarshall$descriptor() {
        return NdrByteCountPointerUnmarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrByteCountPointerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MethodHandle NdrByteCountPointerUnmarshall$handle() {
        return NdrByteCountPointerUnmarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrByteCountPointerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrByteCountPointerUnmarshall$address() {
        return NdrByteCountPointerUnmarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrByteCountPointerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrByteCountPointerUnmarshall(MemorySegment pStubMsg, MemorySegment ppMemory, MemorySegment pFormat, byte fMustAlloc) {
        var mh$ = NdrByteCountPointerUnmarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrByteCountPointerUnmarshall", pStubMsg, ppMemory, pFormat, fMustAlloc);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrXmitOrRepAsUnmarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_CHAR
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrXmitOrRepAsUnmarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrXmitOrRepAsUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static FunctionDescriptor NdrXmitOrRepAsUnmarshall$descriptor() {
        return NdrXmitOrRepAsUnmarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrXmitOrRepAsUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MethodHandle NdrXmitOrRepAsUnmarshall$handle() {
        return NdrXmitOrRepAsUnmarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrXmitOrRepAsUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrXmitOrRepAsUnmarshall$address() {
        return NdrXmitOrRepAsUnmarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrXmitOrRepAsUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrXmitOrRepAsUnmarshall(MemorySegment pStubMsg, MemorySegment ppMemory, MemorySegment pFormat, byte fMustAlloc) {
        var mh$ = NdrXmitOrRepAsUnmarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrXmitOrRepAsUnmarshall", pStubMsg, ppMemory, pFormat, fMustAlloc);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrUserMarshalUnmarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_CHAR
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrUserMarshalUnmarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrUserMarshalUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static FunctionDescriptor NdrUserMarshalUnmarshall$descriptor() {
        return NdrUserMarshalUnmarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrUserMarshalUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MethodHandle NdrUserMarshalUnmarshall$handle() {
        return NdrUserMarshalUnmarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrUserMarshalUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrUserMarshalUnmarshall$address() {
        return NdrUserMarshalUnmarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrUserMarshalUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrUserMarshalUnmarshall(MemorySegment pStubMsg, MemorySegment ppMemory, MemorySegment pFormat, byte fMustAlloc) {
        var mh$ = NdrUserMarshalUnmarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrUserMarshalUnmarshall", pStubMsg, ppMemory, pFormat, fMustAlloc);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrInterfacePointerUnmarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_CHAR
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrInterfacePointerUnmarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrInterfacePointerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static FunctionDescriptor NdrInterfacePointerUnmarshall$descriptor() {
        return NdrInterfacePointerUnmarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrInterfacePointerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MethodHandle NdrInterfacePointerUnmarshall$handle() {
        return NdrInterfacePointerUnmarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrInterfacePointerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrInterfacePointerUnmarshall$address() {
        return NdrInterfacePointerUnmarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrInterfacePointerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc)
     * }
     */
    public static MemorySegment NdrInterfacePointerUnmarshall(MemorySegment pStubMsg, MemorySegment ppMemory, MemorySegment pFormat, byte fMustAlloc) {
        var mh$ = NdrInterfacePointerUnmarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrInterfacePointerUnmarshall", pStubMsg, ppMemory, pFormat, fMustAlloc);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrClientContextUnmarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrClientContextUnmarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrClientContextUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, NDR_CCONTEXT *pContextHandle, RPC_BINDING_HANDLE BindHandle)
     * }
     */
    public static FunctionDescriptor NdrClientContextUnmarshall$descriptor() {
        return NdrClientContextUnmarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrClientContextUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, NDR_CCONTEXT *pContextHandle, RPC_BINDING_HANDLE BindHandle)
     * }
     */
    public static MethodHandle NdrClientContextUnmarshall$handle() {
        return NdrClientContextUnmarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrClientContextUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, NDR_CCONTEXT *pContextHandle, RPC_BINDING_HANDLE BindHandle)
     * }
     */
    public static MemorySegment NdrClientContextUnmarshall$address() {
        return NdrClientContextUnmarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrClientContextUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, NDR_CCONTEXT *pContextHandle, RPC_BINDING_HANDLE BindHandle)
     * }
     */
    public static void NdrClientContextUnmarshall(MemorySegment pStubMsg, MemorySegment pContextHandle, MemorySegment BindHandle) {
        var mh$ = NdrClientContextUnmarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrClientContextUnmarshall", pStubMsg, pContextHandle, BindHandle);
            }
            mh$.invokeExact(pStubMsg, pContextHandle, BindHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrServerContextUnmarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrServerContextUnmarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NDR_SCONTEXT NdrServerContextUnmarshall(PMIDL_STUB_MESSAGE pStubMsg)
     * }
     */
    public static FunctionDescriptor NdrServerContextUnmarshall$descriptor() {
        return NdrServerContextUnmarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NDR_SCONTEXT NdrServerContextUnmarshall(PMIDL_STUB_MESSAGE pStubMsg)
     * }
     */
    public static MethodHandle NdrServerContextUnmarshall$handle() {
        return NdrServerContextUnmarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NDR_SCONTEXT NdrServerContextUnmarshall(PMIDL_STUB_MESSAGE pStubMsg)
     * }
     */
    public static MemorySegment NdrServerContextUnmarshall$address() {
        return NdrServerContextUnmarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NDR_SCONTEXT NdrServerContextUnmarshall(PMIDL_STUB_MESSAGE pStubMsg)
     * }
     */
    public static MemorySegment NdrServerContextUnmarshall(MemorySegment pStubMsg) {
        var mh$ = NdrServerContextUnmarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrServerContextUnmarshall", pStubMsg);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrContextHandleInitialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrContextHandleInitialize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NDR_SCONTEXT NdrContextHandleInitialize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrContextHandleInitialize$descriptor() {
        return NdrContextHandleInitialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NDR_SCONTEXT NdrContextHandleInitialize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrContextHandleInitialize$handle() {
        return NdrContextHandleInitialize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NDR_SCONTEXT NdrContextHandleInitialize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrContextHandleInitialize$address() {
        return NdrContextHandleInitialize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NDR_SCONTEXT NdrContextHandleInitialize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrContextHandleInitialize(MemorySegment pStubMsg, MemorySegment pFormat) {
        var mh$ = NdrContextHandleInitialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrContextHandleInitialize", pStubMsg, pFormat);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrServerContextNewUnmarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrServerContextNewUnmarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NDR_SCONTEXT NdrServerContextNewUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrServerContextNewUnmarshall$descriptor() {
        return NdrServerContextNewUnmarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NDR_SCONTEXT NdrServerContextNewUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrServerContextNewUnmarshall$handle() {
        return NdrServerContextNewUnmarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NDR_SCONTEXT NdrServerContextNewUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrServerContextNewUnmarshall$address() {
        return NdrServerContextNewUnmarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NDR_SCONTEXT NdrServerContextNewUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrServerContextNewUnmarshall(MemorySegment pStubMsg, MemorySegment pFormat) {
        var mh$ = NdrServerContextNewUnmarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrServerContextNewUnmarshall", pStubMsg, pFormat);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrPointerBufferSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrPointerBufferSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrPointerBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrPointerBufferSize$descriptor() {
        return NdrPointerBufferSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrPointerBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrPointerBufferSize$handle() {
        return NdrPointerBufferSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrPointerBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrPointerBufferSize$address() {
        return NdrPointerBufferSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrPointerBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrPointerBufferSize(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrPointerBufferSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrPointerBufferSize", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrCsArrayBufferSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrCsArrayBufferSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrCsArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrCsArrayBufferSize$descriptor() {
        return NdrCsArrayBufferSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrCsArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrCsArrayBufferSize$handle() {
        return NdrCsArrayBufferSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrCsArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrCsArrayBufferSize$address() {
        return NdrCsArrayBufferSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrCsArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrCsArrayBufferSize(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrCsArrayBufferSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrCsArrayBufferSize", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrCsTagBufferSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrCsTagBufferSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrCsTagBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrCsTagBufferSize$descriptor() {
        return NdrCsTagBufferSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrCsTagBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrCsTagBufferSize$handle() {
        return NdrCsTagBufferSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrCsTagBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrCsTagBufferSize$address() {
        return NdrCsTagBufferSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrCsTagBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrCsTagBufferSize(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrCsTagBufferSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrCsTagBufferSize", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrSimpleStructBufferSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrSimpleStructBufferSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrSimpleStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrSimpleStructBufferSize$descriptor() {
        return NdrSimpleStructBufferSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrSimpleStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrSimpleStructBufferSize$handle() {
        return NdrSimpleStructBufferSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrSimpleStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrSimpleStructBufferSize$address() {
        return NdrSimpleStructBufferSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrSimpleStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrSimpleStructBufferSize(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrSimpleStructBufferSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrSimpleStructBufferSize", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrConformantStructBufferSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrConformantStructBufferSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrConformantStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrConformantStructBufferSize$descriptor() {
        return NdrConformantStructBufferSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrConformantStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrConformantStructBufferSize$handle() {
        return NdrConformantStructBufferSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrConformantStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrConformantStructBufferSize$address() {
        return NdrConformantStructBufferSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrConformantStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrConformantStructBufferSize(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrConformantStructBufferSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrConformantStructBufferSize", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrConformantVaryingStructBufferSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrConformantVaryingStructBufferSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrConformantVaryingStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrConformantVaryingStructBufferSize$descriptor() {
        return NdrConformantVaryingStructBufferSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrConformantVaryingStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrConformantVaryingStructBufferSize$handle() {
        return NdrConformantVaryingStructBufferSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrConformantVaryingStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrConformantVaryingStructBufferSize$address() {
        return NdrConformantVaryingStructBufferSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrConformantVaryingStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrConformantVaryingStructBufferSize(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrConformantVaryingStructBufferSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrConformantVaryingStructBufferSize", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrComplexStructBufferSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrComplexStructBufferSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrComplexStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrComplexStructBufferSize$descriptor() {
        return NdrComplexStructBufferSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrComplexStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrComplexStructBufferSize$handle() {
        return NdrComplexStructBufferSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrComplexStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrComplexStructBufferSize$address() {
        return NdrComplexStructBufferSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrComplexStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrComplexStructBufferSize(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrComplexStructBufferSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrComplexStructBufferSize", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrFixedArrayBufferSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrFixedArrayBufferSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrFixedArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrFixedArrayBufferSize$descriptor() {
        return NdrFixedArrayBufferSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrFixedArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrFixedArrayBufferSize$handle() {
        return NdrFixedArrayBufferSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrFixedArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrFixedArrayBufferSize$address() {
        return NdrFixedArrayBufferSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrFixedArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrFixedArrayBufferSize(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrFixedArrayBufferSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrFixedArrayBufferSize", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrConformantArrayBufferSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrConformantArrayBufferSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrConformantArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrConformantArrayBufferSize$descriptor() {
        return NdrConformantArrayBufferSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrConformantArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrConformantArrayBufferSize$handle() {
        return NdrConformantArrayBufferSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrConformantArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrConformantArrayBufferSize$address() {
        return NdrConformantArrayBufferSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrConformantArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrConformantArrayBufferSize(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrConformantArrayBufferSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrConformantArrayBufferSize", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrConformantVaryingArrayBufferSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrConformantVaryingArrayBufferSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrConformantVaryingArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrConformantVaryingArrayBufferSize$descriptor() {
        return NdrConformantVaryingArrayBufferSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrConformantVaryingArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrConformantVaryingArrayBufferSize$handle() {
        return NdrConformantVaryingArrayBufferSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrConformantVaryingArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrConformantVaryingArrayBufferSize$address() {
        return NdrConformantVaryingArrayBufferSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrConformantVaryingArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrConformantVaryingArrayBufferSize(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrConformantVaryingArrayBufferSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrConformantVaryingArrayBufferSize", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrVaryingArrayBufferSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrVaryingArrayBufferSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrVaryingArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrVaryingArrayBufferSize$descriptor() {
        return NdrVaryingArrayBufferSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrVaryingArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrVaryingArrayBufferSize$handle() {
        return NdrVaryingArrayBufferSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrVaryingArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrVaryingArrayBufferSize$address() {
        return NdrVaryingArrayBufferSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrVaryingArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrVaryingArrayBufferSize(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrVaryingArrayBufferSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrVaryingArrayBufferSize", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrComplexArrayBufferSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrComplexArrayBufferSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrComplexArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrComplexArrayBufferSize$descriptor() {
        return NdrComplexArrayBufferSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrComplexArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrComplexArrayBufferSize$handle() {
        return NdrComplexArrayBufferSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrComplexArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrComplexArrayBufferSize$address() {
        return NdrComplexArrayBufferSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrComplexArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrComplexArrayBufferSize(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrComplexArrayBufferSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrComplexArrayBufferSize", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrConformantStringBufferSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrConformantStringBufferSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrConformantStringBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrConformantStringBufferSize$descriptor() {
        return NdrConformantStringBufferSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrConformantStringBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrConformantStringBufferSize$handle() {
        return NdrConformantStringBufferSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrConformantStringBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrConformantStringBufferSize$address() {
        return NdrConformantStringBufferSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrConformantStringBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrConformantStringBufferSize(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrConformantStringBufferSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrConformantStringBufferSize", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrNonConformantStringBufferSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrNonConformantStringBufferSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrNonConformantStringBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrNonConformantStringBufferSize$descriptor() {
        return NdrNonConformantStringBufferSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrNonConformantStringBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrNonConformantStringBufferSize$handle() {
        return NdrNonConformantStringBufferSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrNonConformantStringBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrNonConformantStringBufferSize$address() {
        return NdrNonConformantStringBufferSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrNonConformantStringBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrNonConformantStringBufferSize(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrNonConformantStringBufferSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrNonConformantStringBufferSize", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrEncapsulatedUnionBufferSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrEncapsulatedUnionBufferSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrEncapsulatedUnionBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrEncapsulatedUnionBufferSize$descriptor() {
        return NdrEncapsulatedUnionBufferSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrEncapsulatedUnionBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrEncapsulatedUnionBufferSize$handle() {
        return NdrEncapsulatedUnionBufferSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrEncapsulatedUnionBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrEncapsulatedUnionBufferSize$address() {
        return NdrEncapsulatedUnionBufferSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrEncapsulatedUnionBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrEncapsulatedUnionBufferSize(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrEncapsulatedUnionBufferSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrEncapsulatedUnionBufferSize", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrNonEncapsulatedUnionBufferSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrNonEncapsulatedUnionBufferSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrNonEncapsulatedUnionBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrNonEncapsulatedUnionBufferSize$descriptor() {
        return NdrNonEncapsulatedUnionBufferSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrNonEncapsulatedUnionBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrNonEncapsulatedUnionBufferSize$handle() {
        return NdrNonEncapsulatedUnionBufferSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrNonEncapsulatedUnionBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrNonEncapsulatedUnionBufferSize$address() {
        return NdrNonEncapsulatedUnionBufferSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrNonEncapsulatedUnionBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrNonEncapsulatedUnionBufferSize(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrNonEncapsulatedUnionBufferSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrNonEncapsulatedUnionBufferSize", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrByteCountPointerBufferSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrByteCountPointerBufferSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrByteCountPointerBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrByteCountPointerBufferSize$descriptor() {
        return NdrByteCountPointerBufferSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrByteCountPointerBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrByteCountPointerBufferSize$handle() {
        return NdrByteCountPointerBufferSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrByteCountPointerBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrByteCountPointerBufferSize$address() {
        return NdrByteCountPointerBufferSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrByteCountPointerBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrByteCountPointerBufferSize(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrByteCountPointerBufferSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrByteCountPointerBufferSize", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrXmitOrRepAsBufferSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrXmitOrRepAsBufferSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrXmitOrRepAsBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrXmitOrRepAsBufferSize$descriptor() {
        return NdrXmitOrRepAsBufferSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrXmitOrRepAsBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrXmitOrRepAsBufferSize$handle() {
        return NdrXmitOrRepAsBufferSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrXmitOrRepAsBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrXmitOrRepAsBufferSize$address() {
        return NdrXmitOrRepAsBufferSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrXmitOrRepAsBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrXmitOrRepAsBufferSize(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrXmitOrRepAsBufferSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrXmitOrRepAsBufferSize", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrUserMarshalBufferSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrUserMarshalBufferSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrUserMarshalBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrUserMarshalBufferSize$descriptor() {
        return NdrUserMarshalBufferSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrUserMarshalBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrUserMarshalBufferSize$handle() {
        return NdrUserMarshalBufferSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrUserMarshalBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrUserMarshalBufferSize$address() {
        return NdrUserMarshalBufferSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrUserMarshalBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrUserMarshalBufferSize(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrUserMarshalBufferSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrUserMarshalBufferSize", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrInterfacePointerBufferSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrInterfacePointerBufferSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrInterfacePointerBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrInterfacePointerBufferSize$descriptor() {
        return NdrInterfacePointerBufferSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrInterfacePointerBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrInterfacePointerBufferSize$handle() {
        return NdrInterfacePointerBufferSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrInterfacePointerBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrInterfacePointerBufferSize$address() {
        return NdrInterfacePointerBufferSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrInterfacePointerBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrInterfacePointerBufferSize(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrInterfacePointerBufferSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrInterfacePointerBufferSize", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrContextHandleSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrContextHandleSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrContextHandleSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrContextHandleSize$descriptor() {
        return NdrContextHandleSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrContextHandleSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrContextHandleSize$handle() {
        return NdrContextHandleSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrContextHandleSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrContextHandleSize$address() {
        return NdrContextHandleSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrContextHandleSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrContextHandleSize(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrContextHandleSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrContextHandleSize", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrPointerMemorySize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrPointerMemorySize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long NdrPointerMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrPointerMemorySize$descriptor() {
        return NdrPointerMemorySize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long NdrPointerMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrPointerMemorySize$handle() {
        return NdrPointerMemorySize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long NdrPointerMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrPointerMemorySize$address() {
        return NdrPointerMemorySize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long NdrPointerMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static int NdrPointerMemorySize(MemorySegment pStubMsg, MemorySegment pFormat) {
        var mh$ = NdrPointerMemorySize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrPointerMemorySize", pStubMsg, pFormat);
            }
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrContextHandleMemorySize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrContextHandleMemorySize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long NdrContextHandleMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrContextHandleMemorySize$descriptor() {
        return NdrContextHandleMemorySize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long NdrContextHandleMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrContextHandleMemorySize$handle() {
        return NdrContextHandleMemorySize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long NdrContextHandleMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrContextHandleMemorySize$address() {
        return NdrContextHandleMemorySize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long NdrContextHandleMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static int NdrContextHandleMemorySize(MemorySegment pStubMsg, MemorySegment pFormat) {
        var mh$ = NdrContextHandleMemorySize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrContextHandleMemorySize", pStubMsg, pFormat);
            }
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrCsArrayMemorySize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrCsArrayMemorySize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long NdrCsArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrCsArrayMemorySize$descriptor() {
        return NdrCsArrayMemorySize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long NdrCsArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrCsArrayMemorySize$handle() {
        return NdrCsArrayMemorySize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long NdrCsArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrCsArrayMemorySize$address() {
        return NdrCsArrayMemorySize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long NdrCsArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static int NdrCsArrayMemorySize(MemorySegment pStubMsg, MemorySegment pFormat) {
        var mh$ = NdrCsArrayMemorySize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrCsArrayMemorySize", pStubMsg, pFormat);
            }
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrCsTagMemorySize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrCsTagMemorySize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long NdrCsTagMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrCsTagMemorySize$descriptor() {
        return NdrCsTagMemorySize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long NdrCsTagMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrCsTagMemorySize$handle() {
        return NdrCsTagMemorySize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long NdrCsTagMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrCsTagMemorySize$address() {
        return NdrCsTagMemorySize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long NdrCsTagMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static int NdrCsTagMemorySize(MemorySegment pStubMsg, MemorySegment pFormat) {
        var mh$ = NdrCsTagMemorySize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrCsTagMemorySize", pStubMsg, pFormat);
            }
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrSimpleStructMemorySize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrSimpleStructMemorySize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long NdrSimpleStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrSimpleStructMemorySize$descriptor() {
        return NdrSimpleStructMemorySize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long NdrSimpleStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrSimpleStructMemorySize$handle() {
        return NdrSimpleStructMemorySize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long NdrSimpleStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrSimpleStructMemorySize$address() {
        return NdrSimpleStructMemorySize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long NdrSimpleStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static int NdrSimpleStructMemorySize(MemorySegment pStubMsg, MemorySegment pFormat) {
        var mh$ = NdrSimpleStructMemorySize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrSimpleStructMemorySize", pStubMsg, pFormat);
            }
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrConformantStructMemorySize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrConformantStructMemorySize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long NdrConformantStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrConformantStructMemorySize$descriptor() {
        return NdrConformantStructMemorySize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long NdrConformantStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrConformantStructMemorySize$handle() {
        return NdrConformantStructMemorySize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long NdrConformantStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrConformantStructMemorySize$address() {
        return NdrConformantStructMemorySize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long NdrConformantStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static int NdrConformantStructMemorySize(MemorySegment pStubMsg, MemorySegment pFormat) {
        var mh$ = NdrConformantStructMemorySize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrConformantStructMemorySize", pStubMsg, pFormat);
            }
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrConformantVaryingStructMemorySize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrConformantVaryingStructMemorySize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long NdrConformantVaryingStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrConformantVaryingStructMemorySize$descriptor() {
        return NdrConformantVaryingStructMemorySize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long NdrConformantVaryingStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrConformantVaryingStructMemorySize$handle() {
        return NdrConformantVaryingStructMemorySize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long NdrConformantVaryingStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrConformantVaryingStructMemorySize$address() {
        return NdrConformantVaryingStructMemorySize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long NdrConformantVaryingStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static int NdrConformantVaryingStructMemorySize(MemorySegment pStubMsg, MemorySegment pFormat) {
        var mh$ = NdrConformantVaryingStructMemorySize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrConformantVaryingStructMemorySize", pStubMsg, pFormat);
            }
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrComplexStructMemorySize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrComplexStructMemorySize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long NdrComplexStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrComplexStructMemorySize$descriptor() {
        return NdrComplexStructMemorySize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long NdrComplexStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrComplexStructMemorySize$handle() {
        return NdrComplexStructMemorySize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long NdrComplexStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrComplexStructMemorySize$address() {
        return NdrComplexStructMemorySize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long NdrComplexStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static int NdrComplexStructMemorySize(MemorySegment pStubMsg, MemorySegment pFormat) {
        var mh$ = NdrComplexStructMemorySize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrComplexStructMemorySize", pStubMsg, pFormat);
            }
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrFixedArrayMemorySize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrFixedArrayMemorySize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long NdrFixedArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrFixedArrayMemorySize$descriptor() {
        return NdrFixedArrayMemorySize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long NdrFixedArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrFixedArrayMemorySize$handle() {
        return NdrFixedArrayMemorySize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long NdrFixedArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrFixedArrayMemorySize$address() {
        return NdrFixedArrayMemorySize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long NdrFixedArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static int NdrFixedArrayMemorySize(MemorySegment pStubMsg, MemorySegment pFormat) {
        var mh$ = NdrFixedArrayMemorySize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrFixedArrayMemorySize", pStubMsg, pFormat);
            }
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrConformantArrayMemorySize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrConformantArrayMemorySize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long NdrConformantArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrConformantArrayMemorySize$descriptor() {
        return NdrConformantArrayMemorySize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long NdrConformantArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrConformantArrayMemorySize$handle() {
        return NdrConformantArrayMemorySize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long NdrConformantArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrConformantArrayMemorySize$address() {
        return NdrConformantArrayMemorySize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long NdrConformantArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static int NdrConformantArrayMemorySize(MemorySegment pStubMsg, MemorySegment pFormat) {
        var mh$ = NdrConformantArrayMemorySize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrConformantArrayMemorySize", pStubMsg, pFormat);
            }
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrConformantVaryingArrayMemorySize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrConformantVaryingArrayMemorySize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long NdrConformantVaryingArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrConformantVaryingArrayMemorySize$descriptor() {
        return NdrConformantVaryingArrayMemorySize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long NdrConformantVaryingArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrConformantVaryingArrayMemorySize$handle() {
        return NdrConformantVaryingArrayMemorySize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long NdrConformantVaryingArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrConformantVaryingArrayMemorySize$address() {
        return NdrConformantVaryingArrayMemorySize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long NdrConformantVaryingArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static int NdrConformantVaryingArrayMemorySize(MemorySegment pStubMsg, MemorySegment pFormat) {
        var mh$ = NdrConformantVaryingArrayMemorySize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrConformantVaryingArrayMemorySize", pStubMsg, pFormat);
            }
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrVaryingArrayMemorySize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrVaryingArrayMemorySize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long NdrVaryingArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrVaryingArrayMemorySize$descriptor() {
        return NdrVaryingArrayMemorySize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long NdrVaryingArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrVaryingArrayMemorySize$handle() {
        return NdrVaryingArrayMemorySize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long NdrVaryingArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrVaryingArrayMemorySize$address() {
        return NdrVaryingArrayMemorySize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long NdrVaryingArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static int NdrVaryingArrayMemorySize(MemorySegment pStubMsg, MemorySegment pFormat) {
        var mh$ = NdrVaryingArrayMemorySize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrVaryingArrayMemorySize", pStubMsg, pFormat);
            }
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrComplexArrayMemorySize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrComplexArrayMemorySize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long NdrComplexArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrComplexArrayMemorySize$descriptor() {
        return NdrComplexArrayMemorySize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long NdrComplexArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrComplexArrayMemorySize$handle() {
        return NdrComplexArrayMemorySize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long NdrComplexArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrComplexArrayMemorySize$address() {
        return NdrComplexArrayMemorySize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long NdrComplexArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static int NdrComplexArrayMemorySize(MemorySegment pStubMsg, MemorySegment pFormat) {
        var mh$ = NdrComplexArrayMemorySize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrComplexArrayMemorySize", pStubMsg, pFormat);
            }
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrConformantStringMemorySize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrConformantStringMemorySize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long NdrConformantStringMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrConformantStringMemorySize$descriptor() {
        return NdrConformantStringMemorySize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long NdrConformantStringMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrConformantStringMemorySize$handle() {
        return NdrConformantStringMemorySize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long NdrConformantStringMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrConformantStringMemorySize$address() {
        return NdrConformantStringMemorySize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long NdrConformantStringMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static int NdrConformantStringMemorySize(MemorySegment pStubMsg, MemorySegment pFormat) {
        var mh$ = NdrConformantStringMemorySize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrConformantStringMemorySize", pStubMsg, pFormat);
            }
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrNonConformantStringMemorySize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrNonConformantStringMemorySize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long NdrNonConformantStringMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrNonConformantStringMemorySize$descriptor() {
        return NdrNonConformantStringMemorySize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long NdrNonConformantStringMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrNonConformantStringMemorySize$handle() {
        return NdrNonConformantStringMemorySize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long NdrNonConformantStringMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrNonConformantStringMemorySize$address() {
        return NdrNonConformantStringMemorySize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long NdrNonConformantStringMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static int NdrNonConformantStringMemorySize(MemorySegment pStubMsg, MemorySegment pFormat) {
        var mh$ = NdrNonConformantStringMemorySize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrNonConformantStringMemorySize", pStubMsg, pFormat);
            }
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrEncapsulatedUnionMemorySize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrEncapsulatedUnionMemorySize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long NdrEncapsulatedUnionMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrEncapsulatedUnionMemorySize$descriptor() {
        return NdrEncapsulatedUnionMemorySize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long NdrEncapsulatedUnionMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrEncapsulatedUnionMemorySize$handle() {
        return NdrEncapsulatedUnionMemorySize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long NdrEncapsulatedUnionMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrEncapsulatedUnionMemorySize$address() {
        return NdrEncapsulatedUnionMemorySize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long NdrEncapsulatedUnionMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static int NdrEncapsulatedUnionMemorySize(MemorySegment pStubMsg, MemorySegment pFormat) {
        var mh$ = NdrEncapsulatedUnionMemorySize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrEncapsulatedUnionMemorySize", pStubMsg, pFormat);
            }
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrNonEncapsulatedUnionMemorySize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrNonEncapsulatedUnionMemorySize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long NdrNonEncapsulatedUnionMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrNonEncapsulatedUnionMemorySize$descriptor() {
        return NdrNonEncapsulatedUnionMemorySize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long NdrNonEncapsulatedUnionMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrNonEncapsulatedUnionMemorySize$handle() {
        return NdrNonEncapsulatedUnionMemorySize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long NdrNonEncapsulatedUnionMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrNonEncapsulatedUnionMemorySize$address() {
        return NdrNonEncapsulatedUnionMemorySize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long NdrNonEncapsulatedUnionMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static int NdrNonEncapsulatedUnionMemorySize(MemorySegment pStubMsg, MemorySegment pFormat) {
        var mh$ = NdrNonEncapsulatedUnionMemorySize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrNonEncapsulatedUnionMemorySize", pStubMsg, pFormat);
            }
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrXmitOrRepAsMemorySize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrXmitOrRepAsMemorySize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long NdrXmitOrRepAsMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrXmitOrRepAsMemorySize$descriptor() {
        return NdrXmitOrRepAsMemorySize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long NdrXmitOrRepAsMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrXmitOrRepAsMemorySize$handle() {
        return NdrXmitOrRepAsMemorySize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long NdrXmitOrRepAsMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrXmitOrRepAsMemorySize$address() {
        return NdrXmitOrRepAsMemorySize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long NdrXmitOrRepAsMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static int NdrXmitOrRepAsMemorySize(MemorySegment pStubMsg, MemorySegment pFormat) {
        var mh$ = NdrXmitOrRepAsMemorySize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrXmitOrRepAsMemorySize", pStubMsg, pFormat);
            }
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrUserMarshalMemorySize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrUserMarshalMemorySize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long NdrUserMarshalMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrUserMarshalMemorySize$descriptor() {
        return NdrUserMarshalMemorySize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long NdrUserMarshalMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrUserMarshalMemorySize$handle() {
        return NdrUserMarshalMemorySize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long NdrUserMarshalMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrUserMarshalMemorySize$address() {
        return NdrUserMarshalMemorySize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long NdrUserMarshalMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static int NdrUserMarshalMemorySize(MemorySegment pStubMsg, MemorySegment pFormat) {
        var mh$ = NdrUserMarshalMemorySize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrUserMarshalMemorySize", pStubMsg, pFormat);
            }
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrInterfacePointerMemorySize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrInterfacePointerMemorySize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long NdrInterfacePointerMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrInterfacePointerMemorySize$descriptor() {
        return NdrInterfacePointerMemorySize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long NdrInterfacePointerMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrInterfacePointerMemorySize$handle() {
        return NdrInterfacePointerMemorySize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long NdrInterfacePointerMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrInterfacePointerMemorySize$address() {
        return NdrInterfacePointerMemorySize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long NdrInterfacePointerMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static int NdrInterfacePointerMemorySize(MemorySegment pStubMsg, MemorySegment pFormat) {
        var mh$ = NdrInterfacePointerMemorySize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrInterfacePointerMemorySize", pStubMsg, pFormat);
            }
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrPointerFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrPointerFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrPointerFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrPointerFree$descriptor() {
        return NdrPointerFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrPointerFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrPointerFree$handle() {
        return NdrPointerFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrPointerFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrPointerFree$address() {
        return NdrPointerFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrPointerFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrPointerFree(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrPointerFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrPointerFree", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrCsArrayFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrCsArrayFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrCsArrayFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrCsArrayFree$descriptor() {
        return NdrCsArrayFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrCsArrayFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrCsArrayFree$handle() {
        return NdrCsArrayFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrCsArrayFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrCsArrayFree$address() {
        return NdrCsArrayFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrCsArrayFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrCsArrayFree(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrCsArrayFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrCsArrayFree", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrSimpleStructFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrSimpleStructFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrSimpleStructFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrSimpleStructFree$descriptor() {
        return NdrSimpleStructFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrSimpleStructFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrSimpleStructFree$handle() {
        return NdrSimpleStructFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrSimpleStructFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrSimpleStructFree$address() {
        return NdrSimpleStructFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrSimpleStructFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrSimpleStructFree(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrSimpleStructFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrSimpleStructFree", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrConformantStructFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrConformantStructFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrConformantStructFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrConformantStructFree$descriptor() {
        return NdrConformantStructFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrConformantStructFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrConformantStructFree$handle() {
        return NdrConformantStructFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrConformantStructFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrConformantStructFree$address() {
        return NdrConformantStructFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrConformantStructFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrConformantStructFree(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrConformantStructFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrConformantStructFree", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrConformantVaryingStructFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrConformantVaryingStructFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrConformantVaryingStructFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrConformantVaryingStructFree$descriptor() {
        return NdrConformantVaryingStructFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrConformantVaryingStructFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrConformantVaryingStructFree$handle() {
        return NdrConformantVaryingStructFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrConformantVaryingStructFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrConformantVaryingStructFree$address() {
        return NdrConformantVaryingStructFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrConformantVaryingStructFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrConformantVaryingStructFree(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrConformantVaryingStructFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrConformantVaryingStructFree", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrComplexStructFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrComplexStructFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrComplexStructFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrComplexStructFree$descriptor() {
        return NdrComplexStructFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrComplexStructFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrComplexStructFree$handle() {
        return NdrComplexStructFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrComplexStructFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrComplexStructFree$address() {
        return NdrComplexStructFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrComplexStructFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrComplexStructFree(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrComplexStructFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrComplexStructFree", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrFixedArrayFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrFixedArrayFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrFixedArrayFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrFixedArrayFree$descriptor() {
        return NdrFixedArrayFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrFixedArrayFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrFixedArrayFree$handle() {
        return NdrFixedArrayFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrFixedArrayFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrFixedArrayFree$address() {
        return NdrFixedArrayFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrFixedArrayFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrFixedArrayFree(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrFixedArrayFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrFixedArrayFree", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrConformantArrayFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrConformantArrayFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrConformantArrayFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrConformantArrayFree$descriptor() {
        return NdrConformantArrayFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrConformantArrayFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrConformantArrayFree$handle() {
        return NdrConformantArrayFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrConformantArrayFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrConformantArrayFree$address() {
        return NdrConformantArrayFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrConformantArrayFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrConformantArrayFree(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrConformantArrayFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrConformantArrayFree", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrConformantVaryingArrayFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrConformantVaryingArrayFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrConformantVaryingArrayFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrConformantVaryingArrayFree$descriptor() {
        return NdrConformantVaryingArrayFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrConformantVaryingArrayFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrConformantVaryingArrayFree$handle() {
        return NdrConformantVaryingArrayFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrConformantVaryingArrayFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrConformantVaryingArrayFree$address() {
        return NdrConformantVaryingArrayFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrConformantVaryingArrayFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrConformantVaryingArrayFree(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrConformantVaryingArrayFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrConformantVaryingArrayFree", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrVaryingArrayFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrVaryingArrayFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrVaryingArrayFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrVaryingArrayFree$descriptor() {
        return NdrVaryingArrayFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrVaryingArrayFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrVaryingArrayFree$handle() {
        return NdrVaryingArrayFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrVaryingArrayFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrVaryingArrayFree$address() {
        return NdrVaryingArrayFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrVaryingArrayFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrVaryingArrayFree(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrVaryingArrayFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrVaryingArrayFree", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrComplexArrayFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrComplexArrayFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrComplexArrayFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrComplexArrayFree$descriptor() {
        return NdrComplexArrayFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrComplexArrayFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrComplexArrayFree$handle() {
        return NdrComplexArrayFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrComplexArrayFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrComplexArrayFree$address() {
        return NdrComplexArrayFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrComplexArrayFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrComplexArrayFree(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrComplexArrayFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrComplexArrayFree", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrEncapsulatedUnionFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrEncapsulatedUnionFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrEncapsulatedUnionFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrEncapsulatedUnionFree$descriptor() {
        return NdrEncapsulatedUnionFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrEncapsulatedUnionFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrEncapsulatedUnionFree$handle() {
        return NdrEncapsulatedUnionFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrEncapsulatedUnionFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrEncapsulatedUnionFree$address() {
        return NdrEncapsulatedUnionFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrEncapsulatedUnionFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrEncapsulatedUnionFree(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrEncapsulatedUnionFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrEncapsulatedUnionFree", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrNonEncapsulatedUnionFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrNonEncapsulatedUnionFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrNonEncapsulatedUnionFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrNonEncapsulatedUnionFree$descriptor() {
        return NdrNonEncapsulatedUnionFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrNonEncapsulatedUnionFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrNonEncapsulatedUnionFree$handle() {
        return NdrNonEncapsulatedUnionFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrNonEncapsulatedUnionFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrNonEncapsulatedUnionFree$address() {
        return NdrNonEncapsulatedUnionFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrNonEncapsulatedUnionFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrNonEncapsulatedUnionFree(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrNonEncapsulatedUnionFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrNonEncapsulatedUnionFree", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrByteCountPointerFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrByteCountPointerFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrByteCountPointerFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrByteCountPointerFree$descriptor() {
        return NdrByteCountPointerFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrByteCountPointerFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrByteCountPointerFree$handle() {
        return NdrByteCountPointerFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrByteCountPointerFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrByteCountPointerFree$address() {
        return NdrByteCountPointerFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrByteCountPointerFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrByteCountPointerFree(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrByteCountPointerFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrByteCountPointerFree", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrXmitOrRepAsFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrXmitOrRepAsFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrXmitOrRepAsFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrXmitOrRepAsFree$descriptor() {
        return NdrXmitOrRepAsFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrXmitOrRepAsFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrXmitOrRepAsFree$handle() {
        return NdrXmitOrRepAsFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrXmitOrRepAsFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrXmitOrRepAsFree$address() {
        return NdrXmitOrRepAsFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrXmitOrRepAsFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrXmitOrRepAsFree(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrXmitOrRepAsFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrXmitOrRepAsFree", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrUserMarshalFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrUserMarshalFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrUserMarshalFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrUserMarshalFree$descriptor() {
        return NdrUserMarshalFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrUserMarshalFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrUserMarshalFree$handle() {
        return NdrUserMarshalFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrUserMarshalFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrUserMarshalFree$address() {
        return NdrUserMarshalFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrUserMarshalFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrUserMarshalFree(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrUserMarshalFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrUserMarshalFree", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrInterfacePointerFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrInterfacePointerFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrInterfacePointerFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrInterfacePointerFree$descriptor() {
        return NdrInterfacePointerFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrInterfacePointerFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrInterfacePointerFree$handle() {
        return NdrInterfacePointerFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrInterfacePointerFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrInterfacePointerFree$address() {
        return NdrInterfacePointerFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrInterfacePointerFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrInterfacePointerFree(MemorySegment pStubMsg, MemorySegment pMemory, MemorySegment pFormat) {
        var mh$ = NdrInterfacePointerFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrInterfacePointerFree", pStubMsg, pMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrConvert2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrConvert2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrConvert2(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat, long NumberParams)
     * }
     */
    public static FunctionDescriptor NdrConvert2$descriptor() {
        return NdrConvert2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrConvert2(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat, long NumberParams)
     * }
     */
    public static MethodHandle NdrConvert2$handle() {
        return NdrConvert2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrConvert2(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat, long NumberParams)
     * }
     */
    public static MemorySegment NdrConvert2$address() {
        return NdrConvert2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrConvert2(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat, long NumberParams)
     * }
     */
    public static void NdrConvert2(MemorySegment pStubMsg, MemorySegment pFormat, int NumberParams) {
        var mh$ = NdrConvert2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrConvert2", pStubMsg, pFormat, NumberParams);
            }
            mh$.invokeExact(pStubMsg, pFormat, NumberParams);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrConvert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrConvert");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrConvert(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrConvert$descriptor() {
        return NdrConvert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrConvert(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrConvert$handle() {
        return NdrConvert.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrConvert(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrConvert$address() {
        return NdrConvert.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrConvert(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrConvert(MemorySegment pStubMsg, MemorySegment pFormat) {
        var mh$ = NdrConvert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrConvert", pStubMsg, pFormat);
            }
            mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrUserMarshalSimpleTypeConvert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_CHAR
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrUserMarshalSimpleTypeConvert");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrUserMarshalSimpleTypeConvert(unsigned long *pFlags, unsigned char *pBuffer, unsigned char FormatChar)
     * }
     */
    public static FunctionDescriptor NdrUserMarshalSimpleTypeConvert$descriptor() {
        return NdrUserMarshalSimpleTypeConvert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrUserMarshalSimpleTypeConvert(unsigned long *pFlags, unsigned char *pBuffer, unsigned char FormatChar)
     * }
     */
    public static MethodHandle NdrUserMarshalSimpleTypeConvert$handle() {
        return NdrUserMarshalSimpleTypeConvert.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrUserMarshalSimpleTypeConvert(unsigned long *pFlags, unsigned char *pBuffer, unsigned char FormatChar)
     * }
     */
    public static MemorySegment NdrUserMarshalSimpleTypeConvert$address() {
        return NdrUserMarshalSimpleTypeConvert.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrUserMarshalSimpleTypeConvert(unsigned long *pFlags, unsigned char *pBuffer, unsigned char FormatChar)
     * }
     */
    public static MemorySegment NdrUserMarshalSimpleTypeConvert(MemorySegment pFlags, MemorySegment pBuffer, byte FormatChar) {
        var mh$ = NdrUserMarshalSimpleTypeConvert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrUserMarshalSimpleTypeConvert", pFlags, pBuffer, FormatChar);
            }
            return (MemorySegment)mh$.invokeExact(pFlags, pBuffer, FormatChar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrClientInitializeNew {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrClientInitializeNew");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrClientInitializeNew(PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, unsigned int ProcNum)
     * }
     */
    public static FunctionDescriptor NdrClientInitializeNew$descriptor() {
        return NdrClientInitializeNew.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrClientInitializeNew(PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, unsigned int ProcNum)
     * }
     */
    public static MethodHandle NdrClientInitializeNew$handle() {
        return NdrClientInitializeNew.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrClientInitializeNew(PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, unsigned int ProcNum)
     * }
     */
    public static MemorySegment NdrClientInitializeNew$address() {
        return NdrClientInitializeNew.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrClientInitializeNew(PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, unsigned int ProcNum)
     * }
     */
    public static void NdrClientInitializeNew(MemorySegment pRpcMsg, MemorySegment pStubMsg, MemorySegment pStubDescriptor, int ProcNum) {
        var mh$ = NdrClientInitializeNew.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrClientInitializeNew", pRpcMsg, pStubMsg, pStubDescriptor, ProcNum);
            }
            mh$.invokeExact(pRpcMsg, pStubMsg, pStubDescriptor, ProcNum);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrServerInitializeNew {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrServerInitializeNew");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrServerInitializeNew(PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor)
     * }
     */
    public static FunctionDescriptor NdrServerInitializeNew$descriptor() {
        return NdrServerInitializeNew.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrServerInitializeNew(PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor)
     * }
     */
    public static MethodHandle NdrServerInitializeNew$handle() {
        return NdrServerInitializeNew.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrServerInitializeNew(PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor)
     * }
     */
    public static MemorySegment NdrServerInitializeNew$address() {
        return NdrServerInitializeNew.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrServerInitializeNew(PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor)
     * }
     */
    public static MemorySegment NdrServerInitializeNew(MemorySegment pRpcMsg, MemorySegment pStubMsg, MemorySegment pStubDescriptor) {
        var mh$ = NdrServerInitializeNew.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrServerInitializeNew", pRpcMsg, pStubMsg, pStubDescriptor);
            }
            return (MemorySegment)mh$.invokeExact(pRpcMsg, pStubMsg, pStubDescriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrServerInitializePartial {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrServerInitializePartial");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrServerInitializePartial(PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, unsigned long RequestedBufferSize)
     * }
     */
    public static FunctionDescriptor NdrServerInitializePartial$descriptor() {
        return NdrServerInitializePartial.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrServerInitializePartial(PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, unsigned long RequestedBufferSize)
     * }
     */
    public static MethodHandle NdrServerInitializePartial$handle() {
        return NdrServerInitializePartial.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrServerInitializePartial(PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, unsigned long RequestedBufferSize)
     * }
     */
    public static MemorySegment NdrServerInitializePartial$address() {
        return NdrServerInitializePartial.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrServerInitializePartial(PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, unsigned long RequestedBufferSize)
     * }
     */
    public static void NdrServerInitializePartial(MemorySegment pRpcMsg, MemorySegment pStubMsg, MemorySegment pStubDescriptor, int RequestedBufferSize) {
        var mh$ = NdrServerInitializePartial.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrServerInitializePartial", pRpcMsg, pStubMsg, pStubDescriptor, RequestedBufferSize);
            }
            mh$.invokeExact(pRpcMsg, pStubMsg, pStubDescriptor, RequestedBufferSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrClientInitialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrClientInitialize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrClientInitialize(PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, unsigned int ProcNum)
     * }
     */
    public static FunctionDescriptor NdrClientInitialize$descriptor() {
        return NdrClientInitialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrClientInitialize(PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, unsigned int ProcNum)
     * }
     */
    public static MethodHandle NdrClientInitialize$handle() {
        return NdrClientInitialize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrClientInitialize(PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, unsigned int ProcNum)
     * }
     */
    public static MemorySegment NdrClientInitialize$address() {
        return NdrClientInitialize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrClientInitialize(PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, unsigned int ProcNum)
     * }
     */
    public static void NdrClientInitialize(MemorySegment pRpcMsg, MemorySegment pStubMsg, MemorySegment pStubDescriptor, int ProcNum) {
        var mh$ = NdrClientInitialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrClientInitialize", pRpcMsg, pStubMsg, pStubDescriptor, ProcNum);
            }
            mh$.invokeExact(pRpcMsg, pStubMsg, pStubDescriptor, ProcNum);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrServerInitialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrServerInitialize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrServerInitialize(PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor)
     * }
     */
    public static FunctionDescriptor NdrServerInitialize$descriptor() {
        return NdrServerInitialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrServerInitialize(PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor)
     * }
     */
    public static MethodHandle NdrServerInitialize$handle() {
        return NdrServerInitialize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrServerInitialize(PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor)
     * }
     */
    public static MemorySegment NdrServerInitialize$address() {
        return NdrServerInitialize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrServerInitialize(PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor)
     * }
     */
    public static MemorySegment NdrServerInitialize(MemorySegment pRpcMsg, MemorySegment pStubMsg, MemorySegment pStubDescriptor) {
        var mh$ = NdrServerInitialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrServerInitialize", pRpcMsg, pStubMsg, pStubDescriptor);
            }
            return (MemorySegment)mh$.invokeExact(pRpcMsg, pStubMsg, pStubDescriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrServerInitializeUnmarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrServerInitializeUnmarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrServerInitializeUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static FunctionDescriptor NdrServerInitializeUnmarshall$descriptor() {
        return NdrServerInitializeUnmarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrServerInitializeUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static MethodHandle NdrServerInitializeUnmarshall$handle() {
        return NdrServerInitializeUnmarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrServerInitializeUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static MemorySegment NdrServerInitializeUnmarshall$address() {
        return NdrServerInitializeUnmarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrServerInitializeUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static MemorySegment NdrServerInitializeUnmarshall(MemorySegment pStubMsg, MemorySegment pStubDescriptor, MemorySegment pRpcMsg) {
        var mh$ = NdrServerInitializeUnmarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrServerInitializeUnmarshall", pStubMsg, pStubDescriptor, pRpcMsg);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, pStubDescriptor, pRpcMsg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrServerInitializeMarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrServerInitializeMarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrServerInitializeMarshall(PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg)
     * }
     */
    public static FunctionDescriptor NdrServerInitializeMarshall$descriptor() {
        return NdrServerInitializeMarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrServerInitializeMarshall(PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg)
     * }
     */
    public static MethodHandle NdrServerInitializeMarshall$handle() {
        return NdrServerInitializeMarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrServerInitializeMarshall(PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg)
     * }
     */
    public static MemorySegment NdrServerInitializeMarshall$address() {
        return NdrServerInitializeMarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrServerInitializeMarshall(PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg)
     * }
     */
    public static void NdrServerInitializeMarshall(MemorySegment pRpcMsg, MemorySegment pStubMsg) {
        var mh$ = NdrServerInitializeMarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrServerInitializeMarshall", pRpcMsg, pStubMsg);
            }
            mh$.invokeExact(pRpcMsg, pStubMsg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrGetBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrGetBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrGetBuffer(PMIDL_STUB_MESSAGE pStubMsg, unsigned long BufferLength, RPC_BINDING_HANDLE Handle)
     * }
     */
    public static FunctionDescriptor NdrGetBuffer$descriptor() {
        return NdrGetBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrGetBuffer(PMIDL_STUB_MESSAGE pStubMsg, unsigned long BufferLength, RPC_BINDING_HANDLE Handle)
     * }
     */
    public static MethodHandle NdrGetBuffer$handle() {
        return NdrGetBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrGetBuffer(PMIDL_STUB_MESSAGE pStubMsg, unsigned long BufferLength, RPC_BINDING_HANDLE Handle)
     * }
     */
    public static MemorySegment NdrGetBuffer$address() {
        return NdrGetBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrGetBuffer(PMIDL_STUB_MESSAGE pStubMsg, unsigned long BufferLength, RPC_BINDING_HANDLE Handle)
     * }
     */
    public static MemorySegment NdrGetBuffer(MemorySegment pStubMsg, int BufferLength, MemorySegment Handle) {
        var mh$ = NdrGetBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrGetBuffer", pStubMsg, BufferLength, Handle);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, BufferLength, Handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrNsGetBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrNsGetBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrNsGetBuffer(PMIDL_STUB_MESSAGE pStubMsg, unsigned long BufferLength, RPC_BINDING_HANDLE Handle)
     * }
     */
    public static FunctionDescriptor NdrNsGetBuffer$descriptor() {
        return NdrNsGetBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrNsGetBuffer(PMIDL_STUB_MESSAGE pStubMsg, unsigned long BufferLength, RPC_BINDING_HANDLE Handle)
     * }
     */
    public static MethodHandle NdrNsGetBuffer$handle() {
        return NdrNsGetBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrNsGetBuffer(PMIDL_STUB_MESSAGE pStubMsg, unsigned long BufferLength, RPC_BINDING_HANDLE Handle)
     * }
     */
    public static MemorySegment NdrNsGetBuffer$address() {
        return NdrNsGetBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrNsGetBuffer(PMIDL_STUB_MESSAGE pStubMsg, unsigned long BufferLength, RPC_BINDING_HANDLE Handle)
     * }
     */
    public static MemorySegment NdrNsGetBuffer(MemorySegment pStubMsg, int BufferLength, MemorySegment Handle) {
        var mh$ = NdrNsGetBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrNsGetBuffer", pStubMsg, BufferLength, Handle);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, BufferLength, Handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrSendReceive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrSendReceive");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrSendReceive(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pBufferEnd)
     * }
     */
    public static FunctionDescriptor NdrSendReceive$descriptor() {
        return NdrSendReceive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrSendReceive(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pBufferEnd)
     * }
     */
    public static MethodHandle NdrSendReceive$handle() {
        return NdrSendReceive.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrSendReceive(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pBufferEnd)
     * }
     */
    public static MemorySegment NdrSendReceive$address() {
        return NdrSendReceive.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrSendReceive(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pBufferEnd)
     * }
     */
    public static MemorySegment NdrSendReceive(MemorySegment pStubMsg, MemorySegment pBufferEnd) {
        var mh$ = NdrSendReceive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrSendReceive", pStubMsg, pBufferEnd);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, pBufferEnd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrNsSendReceive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrNsSendReceive");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *NdrNsSendReceive(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pBufferEnd, RPC_BINDING_HANDLE *pAutoHandle)
     * }
     */
    public static FunctionDescriptor NdrNsSendReceive$descriptor() {
        return NdrNsSendReceive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *NdrNsSendReceive(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pBufferEnd, RPC_BINDING_HANDLE *pAutoHandle)
     * }
     */
    public static MethodHandle NdrNsSendReceive$handle() {
        return NdrNsSendReceive.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *NdrNsSendReceive(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pBufferEnd, RPC_BINDING_HANDLE *pAutoHandle)
     * }
     */
    public static MemorySegment NdrNsSendReceive$address() {
        return NdrNsSendReceive.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *NdrNsSendReceive(PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pBufferEnd, RPC_BINDING_HANDLE *pAutoHandle)
     * }
     */
    public static MemorySegment NdrNsSendReceive(MemorySegment pStubMsg, MemorySegment pBufferEnd, MemorySegment pAutoHandle) {
        var mh$ = NdrNsSendReceive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrNsSendReceive", pStubMsg, pBufferEnd, pAutoHandle);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, pBufferEnd, pAutoHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrFreeBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrFreeBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrFreeBuffer(PMIDL_STUB_MESSAGE pStubMsg)
     * }
     */
    public static FunctionDescriptor NdrFreeBuffer$descriptor() {
        return NdrFreeBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrFreeBuffer(PMIDL_STUB_MESSAGE pStubMsg)
     * }
     */
    public static MethodHandle NdrFreeBuffer$handle() {
        return NdrFreeBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrFreeBuffer(PMIDL_STUB_MESSAGE pStubMsg)
     * }
     */
    public static MemorySegment NdrFreeBuffer$address() {
        return NdrFreeBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrFreeBuffer(PMIDL_STUB_MESSAGE pStubMsg)
     * }
     */
    public static void NdrFreeBuffer(MemorySegment pStubMsg) {
        var mh$ = NdrFreeBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrFreeBuffer", pStubMsg);
            }
            mh$.invokeExact(pStubMsg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrGetDcomProtocolVersion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrGetDcomProtocolVersion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT NdrGetDcomProtocolVersion(PMIDL_STUB_MESSAGE pStubMsg, RPC_VERSION *pVersion)
     * }
     */
    public static FunctionDescriptor NdrGetDcomProtocolVersion$descriptor() {
        return NdrGetDcomProtocolVersion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT NdrGetDcomProtocolVersion(PMIDL_STUB_MESSAGE pStubMsg, RPC_VERSION *pVersion)
     * }
     */
    public static MethodHandle NdrGetDcomProtocolVersion$handle() {
        return NdrGetDcomProtocolVersion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT NdrGetDcomProtocolVersion(PMIDL_STUB_MESSAGE pStubMsg, RPC_VERSION *pVersion)
     * }
     */
    public static MemorySegment NdrGetDcomProtocolVersion$address() {
        return NdrGetDcomProtocolVersion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT NdrGetDcomProtocolVersion(PMIDL_STUB_MESSAGE pStubMsg, RPC_VERSION *pVersion)
     * }
     */
    public static int NdrGetDcomProtocolVersion(MemorySegment pStubMsg, MemorySegment pVersion) {
        var mh$ = NdrGetDcomProtocolVersion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrGetDcomProtocolVersion", pStubMsg, pVersion);
            }
            return (int)mh$.invokeExact(pStubMsg, pVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * CLIENT_CALL_RETURN NdrClientCall2(PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, ...)
     * }
     */
    public static class NdrClientCall2 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                _CLIENT_CALL_RETURN.layout(),
                wgl_h.C_POINTER,
                wgl_h.C_POINTER
            );
        private static final MemorySegment ADDR = wgl_h.findOrThrow("NdrClientCall2");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private NdrClientCall2(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * CLIENT_CALL_RETURN NdrClientCall2(PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, ...)
         * }
         */
        public static NdrClientCall2 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new NdrClientCall2(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(SegmentAllocator allocator, MemorySegment pStubDescriptor, MemorySegment pFormat, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("NdrClientCall2", allocator, pStubDescriptor, pFormat, x2);
                }
                return (MemorySegment)spreader.invokeExact(allocator, pStubDescriptor, pFormat, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * CLIENT_CALL_RETURN NdrClientCall(PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, ...)
     * }
     */
    public static class NdrClientCall {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                _CLIENT_CALL_RETURN.layout(),
                wgl_h.C_POINTER,
                wgl_h.C_POINTER
            );
        private static final MemorySegment ADDR = wgl_h.findOrThrow("NdrClientCall");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private NdrClientCall(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * CLIENT_CALL_RETURN NdrClientCall(PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, ...)
         * }
         */
        public static NdrClientCall makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new NdrClientCall(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(SegmentAllocator allocator, MemorySegment pStubDescriptor, MemorySegment pFormat, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("NdrClientCall", allocator, pStubDescriptor, pFormat, x2);
                }
                return (MemorySegment)spreader.invokeExact(allocator, pStubDescriptor, pFormat, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * CLIENT_CALL_RETURN NdrAsyncClientCall(PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, ...)
     * }
     */
    public static class NdrAsyncClientCall {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                _CLIENT_CALL_RETURN.layout(),
                wgl_h.C_POINTER,
                wgl_h.C_POINTER
            );
        private static final MemorySegment ADDR = wgl_h.findOrThrow("NdrAsyncClientCall");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private NdrAsyncClientCall(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * CLIENT_CALL_RETURN NdrAsyncClientCall(PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, ...)
         * }
         */
        public static NdrAsyncClientCall makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new NdrAsyncClientCall(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(SegmentAllocator allocator, MemorySegment pStubDescriptor, MemorySegment pFormat, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("NdrAsyncClientCall", allocator, pStubDescriptor, pFormat, x2);
                }
                return (MemorySegment)spreader.invokeExact(allocator, pStubDescriptor, pFormat, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * CLIENT_CALL_RETURN NdrDcomAsyncClientCall(PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, ...)
     * }
     */
    public static class NdrDcomAsyncClientCall {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                _CLIENT_CALL_RETURN.layout(),
                wgl_h.C_POINTER,
                wgl_h.C_POINTER
            );
        private static final MemorySegment ADDR = wgl_h.findOrThrow("NdrDcomAsyncClientCall");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private NdrDcomAsyncClientCall(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * CLIENT_CALL_RETURN NdrDcomAsyncClientCall(PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, ...)
         * }
         */
        public static NdrDcomAsyncClientCall makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new NdrDcomAsyncClientCall(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(SegmentAllocator allocator, MemorySegment pStubDescriptor, MemorySegment pFormat, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("NdrDcomAsyncClientCall", allocator, pStubDescriptor, pFormat, x2);
                }
                return (MemorySegment)spreader.invokeExact(allocator, pStubDescriptor, pFormat, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }
    private static final int STUB_UNMARSHAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.STUB_UNMARSHAL = 0
     * }
     */
    public static int STUB_UNMARSHAL() {
        return STUB_UNMARSHAL;
    }
    private static final int STUB_CALL_SERVER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.STUB_CALL_SERVER = 1
     * }
     */
    public static int STUB_CALL_SERVER() {
        return STUB_CALL_SERVER;
    }
    private static final int STUB_MARSHAL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.STUB_MARSHAL = 2
     * }
     */
    public static int STUB_MARSHAL() {
        return STUB_MARSHAL;
    }
    private static final int STUB_CALL_SERVER_NO_HRESULT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.STUB_CALL_SERVER_NO_HRESULT = 3
     * }
     */
    public static int STUB_CALL_SERVER_NO_HRESULT() {
        return STUB_CALL_SERVER_NO_HRESULT;
    }
    private static final int PROXY_CALCSIZE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PROXY_CALCSIZE = 0
     * }
     */
    public static int PROXY_CALCSIZE() {
        return PROXY_CALCSIZE;
    }
    private static final int PROXY_GETBUFFER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PROXY_GETBUFFER = 1
     * }
     */
    public static int PROXY_GETBUFFER() {
        return PROXY_GETBUFFER;
    }
    private static final int PROXY_MARSHAL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PROXY_MARSHAL = 2
     * }
     */
    public static int PROXY_MARSHAL() {
        return PROXY_MARSHAL;
    }
    private static final int PROXY_SENDRECEIVE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PROXY_SENDRECEIVE = 3
     * }
     */
    public static int PROXY_SENDRECEIVE() {
        return PROXY_SENDRECEIVE;
    }
    private static final int PROXY_UNMARSHAL = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PROXY_UNMARSHAL = 4
     * }
     */
    public static int PROXY_UNMARSHAL() {
        return PROXY_UNMARSHAL;
    }

    private static class NdrAsyncServerCall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrAsyncServerCall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrAsyncServerCall(PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static FunctionDescriptor NdrAsyncServerCall$descriptor() {
        return NdrAsyncServerCall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrAsyncServerCall(PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static MethodHandle NdrAsyncServerCall$handle() {
        return NdrAsyncServerCall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrAsyncServerCall(PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static MemorySegment NdrAsyncServerCall$address() {
        return NdrAsyncServerCall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrAsyncServerCall(PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static void NdrAsyncServerCall(MemorySegment pRpcMsg) {
        var mh$ = NdrAsyncServerCall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrAsyncServerCall", pRpcMsg);
            }
            mh$.invokeExact(pRpcMsg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrAsyncStubCall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrAsyncStubCall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long NdrAsyncStubCall(struct IRpcStubBuffer *pThis, struct IRpcChannelBuffer *pChannel, PRPC_MESSAGE pRpcMsg, unsigned long *pdwStubPhase)
     * }
     */
    public static FunctionDescriptor NdrAsyncStubCall$descriptor() {
        return NdrAsyncStubCall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long NdrAsyncStubCall(struct IRpcStubBuffer *pThis, struct IRpcChannelBuffer *pChannel, PRPC_MESSAGE pRpcMsg, unsigned long *pdwStubPhase)
     * }
     */
    public static MethodHandle NdrAsyncStubCall$handle() {
        return NdrAsyncStubCall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long NdrAsyncStubCall(struct IRpcStubBuffer *pThis, struct IRpcChannelBuffer *pChannel, PRPC_MESSAGE pRpcMsg, unsigned long *pdwStubPhase)
     * }
     */
    public static MemorySegment NdrAsyncStubCall$address() {
        return NdrAsyncStubCall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long NdrAsyncStubCall(struct IRpcStubBuffer *pThis, struct IRpcChannelBuffer *pChannel, PRPC_MESSAGE pRpcMsg, unsigned long *pdwStubPhase)
     * }
     */
    public static int NdrAsyncStubCall(MemorySegment pThis, MemorySegment pChannel, MemorySegment pRpcMsg, MemorySegment pdwStubPhase) {
        var mh$ = NdrAsyncStubCall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrAsyncStubCall", pThis, pChannel, pRpcMsg, pdwStubPhase);
            }
            return (int)mh$.invokeExact(pThis, pChannel, pRpcMsg, pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrDcomAsyncStubCall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrDcomAsyncStubCall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long NdrDcomAsyncStubCall(struct IRpcStubBuffer *pThis, struct IRpcChannelBuffer *pChannel, PRPC_MESSAGE pRpcMsg, unsigned long *pdwStubPhase)
     * }
     */
    public static FunctionDescriptor NdrDcomAsyncStubCall$descriptor() {
        return NdrDcomAsyncStubCall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long NdrDcomAsyncStubCall(struct IRpcStubBuffer *pThis, struct IRpcChannelBuffer *pChannel, PRPC_MESSAGE pRpcMsg, unsigned long *pdwStubPhase)
     * }
     */
    public static MethodHandle NdrDcomAsyncStubCall$handle() {
        return NdrDcomAsyncStubCall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long NdrDcomAsyncStubCall(struct IRpcStubBuffer *pThis, struct IRpcChannelBuffer *pChannel, PRPC_MESSAGE pRpcMsg, unsigned long *pdwStubPhase)
     * }
     */
    public static MemorySegment NdrDcomAsyncStubCall$address() {
        return NdrDcomAsyncStubCall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long NdrDcomAsyncStubCall(struct IRpcStubBuffer *pThis, struct IRpcChannelBuffer *pChannel, PRPC_MESSAGE pRpcMsg, unsigned long *pdwStubPhase)
     * }
     */
    public static int NdrDcomAsyncStubCall(MemorySegment pThis, MemorySegment pChannel, MemorySegment pRpcMsg, MemorySegment pdwStubPhase) {
        var mh$ = NdrDcomAsyncStubCall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrDcomAsyncStubCall", pThis, pChannel, pRpcMsg, pdwStubPhase);
            }
            return (int)mh$.invokeExact(pThis, pChannel, pRpcMsg, pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrStubCall2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrStubCall2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long NdrStubCall2(void *pThis, void *pChannel, PRPC_MESSAGE pRpcMsg, unsigned long *pdwStubPhase)
     * }
     */
    public static FunctionDescriptor NdrStubCall2$descriptor() {
        return NdrStubCall2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long NdrStubCall2(void *pThis, void *pChannel, PRPC_MESSAGE pRpcMsg, unsigned long *pdwStubPhase)
     * }
     */
    public static MethodHandle NdrStubCall2$handle() {
        return NdrStubCall2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long NdrStubCall2(void *pThis, void *pChannel, PRPC_MESSAGE pRpcMsg, unsigned long *pdwStubPhase)
     * }
     */
    public static MemorySegment NdrStubCall2$address() {
        return NdrStubCall2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long NdrStubCall2(void *pThis, void *pChannel, PRPC_MESSAGE pRpcMsg, unsigned long *pdwStubPhase)
     * }
     */
    public static int NdrStubCall2(MemorySegment pThis, MemorySegment pChannel, MemorySegment pRpcMsg, MemorySegment pdwStubPhase) {
        var mh$ = NdrStubCall2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrStubCall2", pThis, pChannel, pRpcMsg, pdwStubPhase);
            }
            return (int)mh$.invokeExact(pThis, pChannel, pRpcMsg, pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrServerCall2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrServerCall2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrServerCall2(PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static FunctionDescriptor NdrServerCall2$descriptor() {
        return NdrServerCall2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrServerCall2(PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static MethodHandle NdrServerCall2$handle() {
        return NdrServerCall2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrServerCall2(PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static MemorySegment NdrServerCall2$address() {
        return NdrServerCall2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrServerCall2(PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static void NdrServerCall2(MemorySegment pRpcMsg) {
        var mh$ = NdrServerCall2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrServerCall2", pRpcMsg);
            }
            mh$.invokeExact(pRpcMsg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrStubCall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrStubCall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long NdrStubCall(void *pThis, void *pChannel, PRPC_MESSAGE pRpcMsg, unsigned long *pdwStubPhase)
     * }
     */
    public static FunctionDescriptor NdrStubCall$descriptor() {
        return NdrStubCall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long NdrStubCall(void *pThis, void *pChannel, PRPC_MESSAGE pRpcMsg, unsigned long *pdwStubPhase)
     * }
     */
    public static MethodHandle NdrStubCall$handle() {
        return NdrStubCall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long NdrStubCall(void *pThis, void *pChannel, PRPC_MESSAGE pRpcMsg, unsigned long *pdwStubPhase)
     * }
     */
    public static MemorySegment NdrStubCall$address() {
        return NdrStubCall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long NdrStubCall(void *pThis, void *pChannel, PRPC_MESSAGE pRpcMsg, unsigned long *pdwStubPhase)
     * }
     */
    public static int NdrStubCall(MemorySegment pThis, MemorySegment pChannel, MemorySegment pRpcMsg, MemorySegment pdwStubPhase) {
        var mh$ = NdrStubCall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrStubCall", pThis, pChannel, pRpcMsg, pdwStubPhase);
            }
            return (int)mh$.invokeExact(pThis, pChannel, pRpcMsg, pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrServerCall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrServerCall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrServerCall(PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static FunctionDescriptor NdrServerCall$descriptor() {
        return NdrServerCall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrServerCall(PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static MethodHandle NdrServerCall$handle() {
        return NdrServerCall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrServerCall(PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static MemorySegment NdrServerCall$address() {
        return NdrServerCall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrServerCall(PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static void NdrServerCall(MemorySegment pRpcMsg) {
        var mh$ = NdrServerCall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrServerCall", pRpcMsg);
            }
            mh$.invokeExact(pRpcMsg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrServerUnmarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrServerUnmarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NdrServerUnmarshall(void *pChannel, PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, void *pParamList)
     * }
     */
    public static FunctionDescriptor NdrServerUnmarshall$descriptor() {
        return NdrServerUnmarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NdrServerUnmarshall(void *pChannel, PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, void *pParamList)
     * }
     */
    public static MethodHandle NdrServerUnmarshall$handle() {
        return NdrServerUnmarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NdrServerUnmarshall(void *pChannel, PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, void *pParamList)
     * }
     */
    public static MemorySegment NdrServerUnmarshall$address() {
        return NdrServerUnmarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NdrServerUnmarshall(void *pChannel, PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, void *pParamList)
     * }
     */
    public static int NdrServerUnmarshall(MemorySegment pChannel, MemorySegment pRpcMsg, MemorySegment pStubMsg, MemorySegment pStubDescriptor, MemorySegment pFormat, MemorySegment pParamList) {
        var mh$ = NdrServerUnmarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrServerUnmarshall", pChannel, pRpcMsg, pStubMsg, pStubDescriptor, pFormat, pParamList);
            }
            return (int)mh$.invokeExact(pChannel, pRpcMsg, pStubMsg, pStubDescriptor, pFormat, pParamList);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrServerMarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrServerMarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrServerMarshall(void *pThis, void *pChannel, PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrServerMarshall$descriptor() {
        return NdrServerMarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrServerMarshall(void *pThis, void *pChannel, PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrServerMarshall$handle() {
        return NdrServerMarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrServerMarshall(void *pThis, void *pChannel, PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrServerMarshall$address() {
        return NdrServerMarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrServerMarshall(void *pThis, void *pChannel, PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrServerMarshall(MemorySegment pThis, MemorySegment pChannel, MemorySegment pStubMsg, MemorySegment pFormat) {
        var mh$ = NdrServerMarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrServerMarshall", pThis, pChannel, pStubMsg, pFormat);
            }
            mh$.invokeExact(pThis, pChannel, pStubMsg, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrMapCommAndFaultStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrMapCommAndFaultStatus");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS NdrMapCommAndFaultStatus(PMIDL_STUB_MESSAGE pStubMsg, unsigned long *pCommStatus, unsigned long *pFaultStatus, RPC_STATUS Status)
     * }
     */
    public static FunctionDescriptor NdrMapCommAndFaultStatus$descriptor() {
        return NdrMapCommAndFaultStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS NdrMapCommAndFaultStatus(PMIDL_STUB_MESSAGE pStubMsg, unsigned long *pCommStatus, unsigned long *pFaultStatus, RPC_STATUS Status)
     * }
     */
    public static MethodHandle NdrMapCommAndFaultStatus$handle() {
        return NdrMapCommAndFaultStatus.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS NdrMapCommAndFaultStatus(PMIDL_STUB_MESSAGE pStubMsg, unsigned long *pCommStatus, unsigned long *pFaultStatus, RPC_STATUS Status)
     * }
     */
    public static MemorySegment NdrMapCommAndFaultStatus$address() {
        return NdrMapCommAndFaultStatus.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS NdrMapCommAndFaultStatus(PMIDL_STUB_MESSAGE pStubMsg, unsigned long *pCommStatus, unsigned long *pFaultStatus, RPC_STATUS Status)
     * }
     */
    public static int NdrMapCommAndFaultStatus(MemorySegment pStubMsg, MemorySegment pCommStatus, MemorySegment pFaultStatus, int Status) {
        var mh$ = NdrMapCommAndFaultStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrMapCommAndFaultStatus", pStubMsg, pCommStatus, pFaultStatus, Status);
            }
            return (int)mh$.invokeExact(pStubMsg, pCommStatus, pFaultStatus, Status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef void *RPC_SS_THREAD_HANDLE
     * }
     */
    public static final AddressLayout RPC_SS_THREAD_HANDLE = wgl_h.C_POINTER;

    private static class RpcSsAllocate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcSsAllocate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *RpcSsAllocate(size_t Size)
     * }
     */
    public static FunctionDescriptor RpcSsAllocate$descriptor() {
        return RpcSsAllocate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *RpcSsAllocate(size_t Size)
     * }
     */
    public static MethodHandle RpcSsAllocate$handle() {
        return RpcSsAllocate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *RpcSsAllocate(size_t Size)
     * }
     */
    public static MemorySegment RpcSsAllocate$address() {
        return RpcSsAllocate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *RpcSsAllocate(size_t Size)
     * }
     */
    public static MemorySegment RpcSsAllocate(long Size) {
        var mh$ = RpcSsAllocate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcSsAllocate", Size);
            }
            return (MemorySegment)mh$.invokeExact(Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcSsDisableAllocate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcSsDisableAllocate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void RpcSsDisableAllocate()
     * }
     */
    public static FunctionDescriptor RpcSsDisableAllocate$descriptor() {
        return RpcSsDisableAllocate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void RpcSsDisableAllocate()
     * }
     */
    public static MethodHandle RpcSsDisableAllocate$handle() {
        return RpcSsDisableAllocate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void RpcSsDisableAllocate()
     * }
     */
    public static MemorySegment RpcSsDisableAllocate$address() {
        return RpcSsDisableAllocate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void RpcSsDisableAllocate()
     * }
     */
    public static void RpcSsDisableAllocate() {
        var mh$ = RpcSsDisableAllocate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcSsDisableAllocate");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcSsEnableAllocate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcSsEnableAllocate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void RpcSsEnableAllocate()
     * }
     */
    public static FunctionDescriptor RpcSsEnableAllocate$descriptor() {
        return RpcSsEnableAllocate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void RpcSsEnableAllocate()
     * }
     */
    public static MethodHandle RpcSsEnableAllocate$handle() {
        return RpcSsEnableAllocate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void RpcSsEnableAllocate()
     * }
     */
    public static MemorySegment RpcSsEnableAllocate$address() {
        return RpcSsEnableAllocate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void RpcSsEnableAllocate()
     * }
     */
    public static void RpcSsEnableAllocate() {
        var mh$ = RpcSsEnableAllocate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcSsEnableAllocate");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcSsFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcSsFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void RpcSsFree(void *NodeToFree)
     * }
     */
    public static FunctionDescriptor RpcSsFree$descriptor() {
        return RpcSsFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void RpcSsFree(void *NodeToFree)
     * }
     */
    public static MethodHandle RpcSsFree$handle() {
        return RpcSsFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void RpcSsFree(void *NodeToFree)
     * }
     */
    public static MemorySegment RpcSsFree$address() {
        return RpcSsFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void RpcSsFree(void *NodeToFree)
     * }
     */
    public static void RpcSsFree(MemorySegment NodeToFree) {
        var mh$ = RpcSsFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcSsFree", NodeToFree);
            }
            mh$.invokeExact(NodeToFree);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcSsGetThreadHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcSsGetThreadHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_SS_THREAD_HANDLE RpcSsGetThreadHandle()
     * }
     */
    public static FunctionDescriptor RpcSsGetThreadHandle$descriptor() {
        return RpcSsGetThreadHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_SS_THREAD_HANDLE RpcSsGetThreadHandle()
     * }
     */
    public static MethodHandle RpcSsGetThreadHandle$handle() {
        return RpcSsGetThreadHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_SS_THREAD_HANDLE RpcSsGetThreadHandle()
     * }
     */
    public static MemorySegment RpcSsGetThreadHandle$address() {
        return RpcSsGetThreadHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_SS_THREAD_HANDLE RpcSsGetThreadHandle()
     * }
     */
    public static MemorySegment RpcSsGetThreadHandle() {
        var mh$ = RpcSsGetThreadHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcSsGetThreadHandle");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcSsSetClientAllocFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcSsSetClientAllocFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void RpcSsSetClientAllocFree(RPC_CLIENT_ALLOC *ClientAlloc, RPC_CLIENT_FREE *ClientFree)
     * }
     */
    public static FunctionDescriptor RpcSsSetClientAllocFree$descriptor() {
        return RpcSsSetClientAllocFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void RpcSsSetClientAllocFree(RPC_CLIENT_ALLOC *ClientAlloc, RPC_CLIENT_FREE *ClientFree)
     * }
     */
    public static MethodHandle RpcSsSetClientAllocFree$handle() {
        return RpcSsSetClientAllocFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void RpcSsSetClientAllocFree(RPC_CLIENT_ALLOC *ClientAlloc, RPC_CLIENT_FREE *ClientFree)
     * }
     */
    public static MemorySegment RpcSsSetClientAllocFree$address() {
        return RpcSsSetClientAllocFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void RpcSsSetClientAllocFree(RPC_CLIENT_ALLOC *ClientAlloc, RPC_CLIENT_FREE *ClientFree)
     * }
     */
    public static void RpcSsSetClientAllocFree(MemorySegment ClientAlloc, MemorySegment ClientFree) {
        var mh$ = RpcSsSetClientAllocFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcSsSetClientAllocFree", ClientAlloc, ClientFree);
            }
            mh$.invokeExact(ClientAlloc, ClientFree);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcSsSetThreadHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcSsSetThreadHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void RpcSsSetThreadHandle(RPC_SS_THREAD_HANDLE Id)
     * }
     */
    public static FunctionDescriptor RpcSsSetThreadHandle$descriptor() {
        return RpcSsSetThreadHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void RpcSsSetThreadHandle(RPC_SS_THREAD_HANDLE Id)
     * }
     */
    public static MethodHandle RpcSsSetThreadHandle$handle() {
        return RpcSsSetThreadHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void RpcSsSetThreadHandle(RPC_SS_THREAD_HANDLE Id)
     * }
     */
    public static MemorySegment RpcSsSetThreadHandle$address() {
        return RpcSsSetThreadHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void RpcSsSetThreadHandle(RPC_SS_THREAD_HANDLE Id)
     * }
     */
    public static void RpcSsSetThreadHandle(MemorySegment Id) {
        var mh$ = RpcSsSetThreadHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcSsSetThreadHandle", Id);
            }
            mh$.invokeExact(Id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcSsSwapClientAllocFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcSsSwapClientAllocFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void RpcSsSwapClientAllocFree(RPC_CLIENT_ALLOC *ClientAlloc, RPC_CLIENT_FREE *ClientFree, RPC_CLIENT_ALLOC **OldClientAlloc, RPC_CLIENT_FREE **OldClientFree)
     * }
     */
    public static FunctionDescriptor RpcSsSwapClientAllocFree$descriptor() {
        return RpcSsSwapClientAllocFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void RpcSsSwapClientAllocFree(RPC_CLIENT_ALLOC *ClientAlloc, RPC_CLIENT_FREE *ClientFree, RPC_CLIENT_ALLOC **OldClientAlloc, RPC_CLIENT_FREE **OldClientFree)
     * }
     */
    public static MethodHandle RpcSsSwapClientAllocFree$handle() {
        return RpcSsSwapClientAllocFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void RpcSsSwapClientAllocFree(RPC_CLIENT_ALLOC *ClientAlloc, RPC_CLIENT_FREE *ClientFree, RPC_CLIENT_ALLOC **OldClientAlloc, RPC_CLIENT_FREE **OldClientFree)
     * }
     */
    public static MemorySegment RpcSsSwapClientAllocFree$address() {
        return RpcSsSwapClientAllocFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void RpcSsSwapClientAllocFree(RPC_CLIENT_ALLOC *ClientAlloc, RPC_CLIENT_FREE *ClientFree, RPC_CLIENT_ALLOC **OldClientAlloc, RPC_CLIENT_FREE **OldClientFree)
     * }
     */
    public static void RpcSsSwapClientAllocFree(MemorySegment ClientAlloc, MemorySegment ClientFree, MemorySegment OldClientAlloc, MemorySegment OldClientFree) {
        var mh$ = RpcSsSwapClientAllocFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcSsSwapClientAllocFree", ClientAlloc, ClientFree, OldClientAlloc, OldClientFree);
            }
            mh$.invokeExact(ClientAlloc, ClientFree, OldClientAlloc, OldClientFree);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcSmAllocate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcSmAllocate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *RpcSmAllocate(size_t Size, RPC_STATUS *pStatus)
     * }
     */
    public static FunctionDescriptor RpcSmAllocate$descriptor() {
        return RpcSmAllocate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *RpcSmAllocate(size_t Size, RPC_STATUS *pStatus)
     * }
     */
    public static MethodHandle RpcSmAllocate$handle() {
        return RpcSmAllocate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *RpcSmAllocate(size_t Size, RPC_STATUS *pStatus)
     * }
     */
    public static MemorySegment RpcSmAllocate$address() {
        return RpcSmAllocate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *RpcSmAllocate(size_t Size, RPC_STATUS *pStatus)
     * }
     */
    public static MemorySegment RpcSmAllocate(long Size, MemorySegment pStatus) {
        var mh$ = RpcSmAllocate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcSmAllocate", Size, pStatus);
            }
            return (MemorySegment)mh$.invokeExact(Size, pStatus);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcSmClientFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcSmClientFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSmClientFree(void *pNodeToFree)
     * }
     */
    public static FunctionDescriptor RpcSmClientFree$descriptor() {
        return RpcSmClientFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSmClientFree(void *pNodeToFree)
     * }
     */
    public static MethodHandle RpcSmClientFree$handle() {
        return RpcSmClientFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSmClientFree(void *pNodeToFree)
     * }
     */
    public static MemorySegment RpcSmClientFree$address() {
        return RpcSmClientFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcSmClientFree(void *pNodeToFree)
     * }
     */
    public static int RpcSmClientFree(MemorySegment pNodeToFree) {
        var mh$ = RpcSmClientFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcSmClientFree", pNodeToFree);
            }
            return (int)mh$.invokeExact(pNodeToFree);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcSmDestroyClientContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcSmDestroyClientContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSmDestroyClientContext(void **ContextHandle)
     * }
     */
    public static FunctionDescriptor RpcSmDestroyClientContext$descriptor() {
        return RpcSmDestroyClientContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSmDestroyClientContext(void **ContextHandle)
     * }
     */
    public static MethodHandle RpcSmDestroyClientContext$handle() {
        return RpcSmDestroyClientContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSmDestroyClientContext(void **ContextHandle)
     * }
     */
    public static MemorySegment RpcSmDestroyClientContext$address() {
        return RpcSmDestroyClientContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcSmDestroyClientContext(void **ContextHandle)
     * }
     */
    public static int RpcSmDestroyClientContext(MemorySegment ContextHandle) {
        var mh$ = RpcSmDestroyClientContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcSmDestroyClientContext", ContextHandle);
            }
            return (int)mh$.invokeExact(ContextHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcSmDisableAllocate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcSmDisableAllocate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSmDisableAllocate()
     * }
     */
    public static FunctionDescriptor RpcSmDisableAllocate$descriptor() {
        return RpcSmDisableAllocate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSmDisableAllocate()
     * }
     */
    public static MethodHandle RpcSmDisableAllocate$handle() {
        return RpcSmDisableAllocate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSmDisableAllocate()
     * }
     */
    public static MemorySegment RpcSmDisableAllocate$address() {
        return RpcSmDisableAllocate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcSmDisableAllocate()
     * }
     */
    public static int RpcSmDisableAllocate() {
        var mh$ = RpcSmDisableAllocate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcSmDisableAllocate");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcSmEnableAllocate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcSmEnableAllocate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSmEnableAllocate()
     * }
     */
    public static FunctionDescriptor RpcSmEnableAllocate$descriptor() {
        return RpcSmEnableAllocate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSmEnableAllocate()
     * }
     */
    public static MethodHandle RpcSmEnableAllocate$handle() {
        return RpcSmEnableAllocate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSmEnableAllocate()
     * }
     */
    public static MemorySegment RpcSmEnableAllocate$address() {
        return RpcSmEnableAllocate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcSmEnableAllocate()
     * }
     */
    public static int RpcSmEnableAllocate() {
        var mh$ = RpcSmEnableAllocate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcSmEnableAllocate");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcSmFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcSmFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSmFree(void *NodeToFree)
     * }
     */
    public static FunctionDescriptor RpcSmFree$descriptor() {
        return RpcSmFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSmFree(void *NodeToFree)
     * }
     */
    public static MethodHandle RpcSmFree$handle() {
        return RpcSmFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSmFree(void *NodeToFree)
     * }
     */
    public static MemorySegment RpcSmFree$address() {
        return RpcSmFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcSmFree(void *NodeToFree)
     * }
     */
    public static int RpcSmFree(MemorySegment NodeToFree) {
        var mh$ = RpcSmFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcSmFree", NodeToFree);
            }
            return (int)mh$.invokeExact(NodeToFree);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcSmGetThreadHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcSmGetThreadHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_SS_THREAD_HANDLE RpcSmGetThreadHandle(RPC_STATUS *pStatus)
     * }
     */
    public static FunctionDescriptor RpcSmGetThreadHandle$descriptor() {
        return RpcSmGetThreadHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_SS_THREAD_HANDLE RpcSmGetThreadHandle(RPC_STATUS *pStatus)
     * }
     */
    public static MethodHandle RpcSmGetThreadHandle$handle() {
        return RpcSmGetThreadHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_SS_THREAD_HANDLE RpcSmGetThreadHandle(RPC_STATUS *pStatus)
     * }
     */
    public static MemorySegment RpcSmGetThreadHandle$address() {
        return RpcSmGetThreadHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_SS_THREAD_HANDLE RpcSmGetThreadHandle(RPC_STATUS *pStatus)
     * }
     */
    public static MemorySegment RpcSmGetThreadHandle(MemorySegment pStatus) {
        var mh$ = RpcSmGetThreadHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcSmGetThreadHandle", pStatus);
            }
            return (MemorySegment)mh$.invokeExact(pStatus);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcSmSetClientAllocFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcSmSetClientAllocFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSmSetClientAllocFree(RPC_CLIENT_ALLOC *ClientAlloc, RPC_CLIENT_FREE *ClientFree)
     * }
     */
    public static FunctionDescriptor RpcSmSetClientAllocFree$descriptor() {
        return RpcSmSetClientAllocFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSmSetClientAllocFree(RPC_CLIENT_ALLOC *ClientAlloc, RPC_CLIENT_FREE *ClientFree)
     * }
     */
    public static MethodHandle RpcSmSetClientAllocFree$handle() {
        return RpcSmSetClientAllocFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSmSetClientAllocFree(RPC_CLIENT_ALLOC *ClientAlloc, RPC_CLIENT_FREE *ClientFree)
     * }
     */
    public static MemorySegment RpcSmSetClientAllocFree$address() {
        return RpcSmSetClientAllocFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcSmSetClientAllocFree(RPC_CLIENT_ALLOC *ClientAlloc, RPC_CLIENT_FREE *ClientFree)
     * }
     */
    public static int RpcSmSetClientAllocFree(MemorySegment ClientAlloc, MemorySegment ClientFree) {
        var mh$ = RpcSmSetClientAllocFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcSmSetClientAllocFree", ClientAlloc, ClientFree);
            }
            return (int)mh$.invokeExact(ClientAlloc, ClientFree);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcSmSetThreadHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcSmSetThreadHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSmSetThreadHandle(RPC_SS_THREAD_HANDLE Id)
     * }
     */
    public static FunctionDescriptor RpcSmSetThreadHandle$descriptor() {
        return RpcSmSetThreadHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSmSetThreadHandle(RPC_SS_THREAD_HANDLE Id)
     * }
     */
    public static MethodHandle RpcSmSetThreadHandle$handle() {
        return RpcSmSetThreadHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSmSetThreadHandle(RPC_SS_THREAD_HANDLE Id)
     * }
     */
    public static MemorySegment RpcSmSetThreadHandle$address() {
        return RpcSmSetThreadHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcSmSetThreadHandle(RPC_SS_THREAD_HANDLE Id)
     * }
     */
    public static int RpcSmSetThreadHandle(MemorySegment Id) {
        var mh$ = RpcSmSetThreadHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcSmSetThreadHandle", Id);
            }
            return (int)mh$.invokeExact(Id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcSmSwapClientAllocFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcSmSwapClientAllocFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSmSwapClientAllocFree(RPC_CLIENT_ALLOC *ClientAlloc, RPC_CLIENT_FREE *ClientFree, RPC_CLIENT_ALLOC **OldClientAlloc, RPC_CLIENT_FREE **OldClientFree)
     * }
     */
    public static FunctionDescriptor RpcSmSwapClientAllocFree$descriptor() {
        return RpcSmSwapClientAllocFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSmSwapClientAllocFree(RPC_CLIENT_ALLOC *ClientAlloc, RPC_CLIENT_FREE *ClientFree, RPC_CLIENT_ALLOC **OldClientAlloc, RPC_CLIENT_FREE **OldClientFree)
     * }
     */
    public static MethodHandle RpcSmSwapClientAllocFree$handle() {
        return RpcSmSwapClientAllocFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSmSwapClientAllocFree(RPC_CLIENT_ALLOC *ClientAlloc, RPC_CLIENT_FREE *ClientFree, RPC_CLIENT_ALLOC **OldClientAlloc, RPC_CLIENT_FREE **OldClientFree)
     * }
     */
    public static MemorySegment RpcSmSwapClientAllocFree$address() {
        return RpcSmSwapClientAllocFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcSmSwapClientAllocFree(RPC_CLIENT_ALLOC *ClientAlloc, RPC_CLIENT_FREE *ClientFree, RPC_CLIENT_ALLOC **OldClientAlloc, RPC_CLIENT_FREE **OldClientFree)
     * }
     */
    public static int RpcSmSwapClientAllocFree(MemorySegment ClientAlloc, MemorySegment ClientFree, MemorySegment OldClientAlloc, MemorySegment OldClientFree) {
        var mh$ = RpcSmSwapClientAllocFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcSmSwapClientAllocFree", ClientAlloc, ClientFree, OldClientAlloc, OldClientFree);
            }
            return (int)mh$.invokeExact(ClientAlloc, ClientFree, OldClientAlloc, OldClientFree);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrRpcSsEnableAllocate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrRpcSsEnableAllocate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrRpcSsEnableAllocate(PMIDL_STUB_MESSAGE pMessage)
     * }
     */
    public static FunctionDescriptor NdrRpcSsEnableAllocate$descriptor() {
        return NdrRpcSsEnableAllocate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrRpcSsEnableAllocate(PMIDL_STUB_MESSAGE pMessage)
     * }
     */
    public static MethodHandle NdrRpcSsEnableAllocate$handle() {
        return NdrRpcSsEnableAllocate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrRpcSsEnableAllocate(PMIDL_STUB_MESSAGE pMessage)
     * }
     */
    public static MemorySegment NdrRpcSsEnableAllocate$address() {
        return NdrRpcSsEnableAllocate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrRpcSsEnableAllocate(PMIDL_STUB_MESSAGE pMessage)
     * }
     */
    public static void NdrRpcSsEnableAllocate(MemorySegment pMessage) {
        var mh$ = NdrRpcSsEnableAllocate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrRpcSsEnableAllocate", pMessage);
            }
            mh$.invokeExact(pMessage);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrRpcSsDisableAllocate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrRpcSsDisableAllocate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrRpcSsDisableAllocate(PMIDL_STUB_MESSAGE pMessage)
     * }
     */
    public static FunctionDescriptor NdrRpcSsDisableAllocate$descriptor() {
        return NdrRpcSsDisableAllocate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrRpcSsDisableAllocate(PMIDL_STUB_MESSAGE pMessage)
     * }
     */
    public static MethodHandle NdrRpcSsDisableAllocate$handle() {
        return NdrRpcSsDisableAllocate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrRpcSsDisableAllocate(PMIDL_STUB_MESSAGE pMessage)
     * }
     */
    public static MemorySegment NdrRpcSsDisableAllocate$address() {
        return NdrRpcSsDisableAllocate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrRpcSsDisableAllocate(PMIDL_STUB_MESSAGE pMessage)
     * }
     */
    public static void NdrRpcSsDisableAllocate(MemorySegment pMessage) {
        var mh$ = NdrRpcSsDisableAllocate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrRpcSsDisableAllocate", pMessage);
            }
            mh$.invokeExact(pMessage);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrRpcSmSetClientToOsf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrRpcSmSetClientToOsf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrRpcSmSetClientToOsf(PMIDL_STUB_MESSAGE pMessage)
     * }
     */
    public static FunctionDescriptor NdrRpcSmSetClientToOsf$descriptor() {
        return NdrRpcSmSetClientToOsf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrRpcSmSetClientToOsf(PMIDL_STUB_MESSAGE pMessage)
     * }
     */
    public static MethodHandle NdrRpcSmSetClientToOsf$handle() {
        return NdrRpcSmSetClientToOsf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrRpcSmSetClientToOsf(PMIDL_STUB_MESSAGE pMessage)
     * }
     */
    public static MemorySegment NdrRpcSmSetClientToOsf$address() {
        return NdrRpcSmSetClientToOsf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrRpcSmSetClientToOsf(PMIDL_STUB_MESSAGE pMessage)
     * }
     */
    public static void NdrRpcSmSetClientToOsf(MemorySegment pMessage) {
        var mh$ = NdrRpcSmSetClientToOsf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrRpcSmSetClientToOsf", pMessage);
            }
            mh$.invokeExact(pMessage);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrRpcSmClientAllocate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrRpcSmClientAllocate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *NdrRpcSmClientAllocate(size_t Size)
     * }
     */
    public static FunctionDescriptor NdrRpcSmClientAllocate$descriptor() {
        return NdrRpcSmClientAllocate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *NdrRpcSmClientAllocate(size_t Size)
     * }
     */
    public static MethodHandle NdrRpcSmClientAllocate$handle() {
        return NdrRpcSmClientAllocate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *NdrRpcSmClientAllocate(size_t Size)
     * }
     */
    public static MemorySegment NdrRpcSmClientAllocate$address() {
        return NdrRpcSmClientAllocate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *NdrRpcSmClientAllocate(size_t Size)
     * }
     */
    public static MemorySegment NdrRpcSmClientAllocate(long Size) {
        var mh$ = NdrRpcSmClientAllocate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrRpcSmClientAllocate", Size);
            }
            return (MemorySegment)mh$.invokeExact(Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrRpcSmClientFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrRpcSmClientFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrRpcSmClientFree(void *NodeToFree)
     * }
     */
    public static FunctionDescriptor NdrRpcSmClientFree$descriptor() {
        return NdrRpcSmClientFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrRpcSmClientFree(void *NodeToFree)
     * }
     */
    public static MethodHandle NdrRpcSmClientFree$handle() {
        return NdrRpcSmClientFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrRpcSmClientFree(void *NodeToFree)
     * }
     */
    public static MemorySegment NdrRpcSmClientFree$address() {
        return NdrRpcSmClientFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrRpcSmClientFree(void *NodeToFree)
     * }
     */
    public static void NdrRpcSmClientFree(MemorySegment NodeToFree) {
        var mh$ = NdrRpcSmClientFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrRpcSmClientFree", NodeToFree);
            }
            mh$.invokeExact(NodeToFree);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrRpcSsDefaultAllocate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrRpcSsDefaultAllocate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *NdrRpcSsDefaultAllocate(size_t Size)
     * }
     */
    public static FunctionDescriptor NdrRpcSsDefaultAllocate$descriptor() {
        return NdrRpcSsDefaultAllocate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *NdrRpcSsDefaultAllocate(size_t Size)
     * }
     */
    public static MethodHandle NdrRpcSsDefaultAllocate$handle() {
        return NdrRpcSsDefaultAllocate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *NdrRpcSsDefaultAllocate(size_t Size)
     * }
     */
    public static MemorySegment NdrRpcSsDefaultAllocate$address() {
        return NdrRpcSsDefaultAllocate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *NdrRpcSsDefaultAllocate(size_t Size)
     * }
     */
    public static MemorySegment NdrRpcSsDefaultAllocate(long Size) {
        var mh$ = NdrRpcSsDefaultAllocate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrRpcSsDefaultAllocate", Size);
            }
            return (MemorySegment)mh$.invokeExact(Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrRpcSsDefaultFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrRpcSsDefaultFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrRpcSsDefaultFree(void *NodeToFree)
     * }
     */
    public static FunctionDescriptor NdrRpcSsDefaultFree$descriptor() {
        return NdrRpcSsDefaultFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrRpcSsDefaultFree(void *NodeToFree)
     * }
     */
    public static MethodHandle NdrRpcSsDefaultFree$handle() {
        return NdrRpcSsDefaultFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrRpcSsDefaultFree(void *NodeToFree)
     * }
     */
    public static MemorySegment NdrRpcSsDefaultFree$address() {
        return NdrRpcSsDefaultFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrRpcSsDefaultFree(void *NodeToFree)
     * }
     */
    public static void NdrRpcSsDefaultFree(MemorySegment NodeToFree) {
        var mh$ = NdrRpcSsDefaultFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrRpcSsDefaultFree", NodeToFree);
            }
            mh$.invokeExact(NodeToFree);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrFullPointerXlatInit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrFullPointerXlatInit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PFULL_PTR_XLAT_TABLES NdrFullPointerXlatInit(unsigned long NumberOfPointers, XLAT_SIDE XlatSide)
     * }
     */
    public static FunctionDescriptor NdrFullPointerXlatInit$descriptor() {
        return NdrFullPointerXlatInit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PFULL_PTR_XLAT_TABLES NdrFullPointerXlatInit(unsigned long NumberOfPointers, XLAT_SIDE XlatSide)
     * }
     */
    public static MethodHandle NdrFullPointerXlatInit$handle() {
        return NdrFullPointerXlatInit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PFULL_PTR_XLAT_TABLES NdrFullPointerXlatInit(unsigned long NumberOfPointers, XLAT_SIDE XlatSide)
     * }
     */
    public static MemorySegment NdrFullPointerXlatInit$address() {
        return NdrFullPointerXlatInit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PFULL_PTR_XLAT_TABLES NdrFullPointerXlatInit(unsigned long NumberOfPointers, XLAT_SIDE XlatSide)
     * }
     */
    public static MemorySegment NdrFullPointerXlatInit(int NumberOfPointers, int XlatSide) {
        var mh$ = NdrFullPointerXlatInit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrFullPointerXlatInit", NumberOfPointers, XlatSide);
            }
            return (MemorySegment)mh$.invokeExact(NumberOfPointers, XlatSide);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrFullPointerXlatFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrFullPointerXlatFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrFullPointerXlatFree(PFULL_PTR_XLAT_TABLES pXlatTables)
     * }
     */
    public static FunctionDescriptor NdrFullPointerXlatFree$descriptor() {
        return NdrFullPointerXlatFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrFullPointerXlatFree(PFULL_PTR_XLAT_TABLES pXlatTables)
     * }
     */
    public static MethodHandle NdrFullPointerXlatFree$handle() {
        return NdrFullPointerXlatFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrFullPointerXlatFree(PFULL_PTR_XLAT_TABLES pXlatTables)
     * }
     */
    public static MemorySegment NdrFullPointerXlatFree$address() {
        return NdrFullPointerXlatFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrFullPointerXlatFree(PFULL_PTR_XLAT_TABLES pXlatTables)
     * }
     */
    public static void NdrFullPointerXlatFree(MemorySegment pXlatTables) {
        var mh$ = NdrFullPointerXlatFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrFullPointerXlatFree", pXlatTables);
            }
            mh$.invokeExact(pXlatTables);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrAllocate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrAllocate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *NdrAllocate(PMIDL_STUB_MESSAGE pStubMsg, size_t Len)
     * }
     */
    public static FunctionDescriptor NdrAllocate$descriptor() {
        return NdrAllocate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *NdrAllocate(PMIDL_STUB_MESSAGE pStubMsg, size_t Len)
     * }
     */
    public static MethodHandle NdrAllocate$handle() {
        return NdrAllocate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *NdrAllocate(PMIDL_STUB_MESSAGE pStubMsg, size_t Len)
     * }
     */
    public static MemorySegment NdrAllocate$address() {
        return NdrAllocate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *NdrAllocate(PMIDL_STUB_MESSAGE pStubMsg, size_t Len)
     * }
     */
    public static MemorySegment NdrAllocate(MemorySegment pStubMsg, long Len) {
        var mh$ = NdrAllocate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrAllocate", pStubMsg, Len);
            }
            return (MemorySegment)mh$.invokeExact(pStubMsg, Len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrClearOutParameters {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrClearOutParameters");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrClearOutParameters(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat, void *ArgAddr)
     * }
     */
    public static FunctionDescriptor NdrClearOutParameters$descriptor() {
        return NdrClearOutParameters.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrClearOutParameters(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat, void *ArgAddr)
     * }
     */
    public static MethodHandle NdrClearOutParameters$handle() {
        return NdrClearOutParameters.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrClearOutParameters(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat, void *ArgAddr)
     * }
     */
    public static MemorySegment NdrClearOutParameters$address() {
        return NdrClearOutParameters.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrClearOutParameters(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat, void *ArgAddr)
     * }
     */
    public static void NdrClearOutParameters(MemorySegment pStubMsg, MemorySegment pFormat, MemorySegment ArgAddr) {
        var mh$ = NdrClearOutParameters.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrClearOutParameters", pStubMsg, pFormat, ArgAddr);
            }
            mh$.invokeExact(pStubMsg, pFormat, ArgAddr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrOleAllocate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrOleAllocate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *NdrOleAllocate(size_t Size)
     * }
     */
    public static FunctionDescriptor NdrOleAllocate$descriptor() {
        return NdrOleAllocate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *NdrOleAllocate(size_t Size)
     * }
     */
    public static MethodHandle NdrOleAllocate$handle() {
        return NdrOleAllocate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *NdrOleAllocate(size_t Size)
     * }
     */
    public static MemorySegment NdrOleAllocate$address() {
        return NdrOleAllocate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *NdrOleAllocate(size_t Size)
     * }
     */
    public static MemorySegment NdrOleAllocate(long Size) {
        var mh$ = NdrOleAllocate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrOleAllocate", Size);
            }
            return (MemorySegment)mh$.invokeExact(Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrOleFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrOleFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrOleFree(void *NodeToFree)
     * }
     */
    public static FunctionDescriptor NdrOleFree$descriptor() {
        return NdrOleFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrOleFree(void *NodeToFree)
     * }
     */
    public static MethodHandle NdrOleFree$handle() {
        return NdrOleFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrOleFree(void *NodeToFree)
     * }
     */
    public static MemorySegment NdrOleFree$address() {
        return NdrOleFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrOleFree(void *NodeToFree)
     * }
     */
    public static void NdrOleFree(MemorySegment NodeToFree) {
        var mh$ = NdrOleFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrOleFree", NodeToFree);
            }
            mh$.invokeExact(NodeToFree);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrGetUserMarshalInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrGetUserMarshalInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS NdrGetUserMarshalInfo(unsigned long *pFlags, unsigned long InformationLevel, NDR_USER_MARSHAL_INFO *pMarshalInfo)
     * }
     */
    public static FunctionDescriptor NdrGetUserMarshalInfo$descriptor() {
        return NdrGetUserMarshalInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS NdrGetUserMarshalInfo(unsigned long *pFlags, unsigned long InformationLevel, NDR_USER_MARSHAL_INFO *pMarshalInfo)
     * }
     */
    public static MethodHandle NdrGetUserMarshalInfo$handle() {
        return NdrGetUserMarshalInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS NdrGetUserMarshalInfo(unsigned long *pFlags, unsigned long InformationLevel, NDR_USER_MARSHAL_INFO *pMarshalInfo)
     * }
     */
    public static MemorySegment NdrGetUserMarshalInfo$address() {
        return NdrGetUserMarshalInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS NdrGetUserMarshalInfo(unsigned long *pFlags, unsigned long InformationLevel, NDR_USER_MARSHAL_INFO *pMarshalInfo)
     * }
     */
    public static int NdrGetUserMarshalInfo(MemorySegment pFlags, int InformationLevel, MemorySegment pMarshalInfo) {
        var mh$ = NdrGetUserMarshalInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrGetUserMarshalInfo", pFlags, InformationLevel, pMarshalInfo);
            }
            return (int)mh$.invokeExact(pFlags, InformationLevel, pMarshalInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrCreateServerInterfaceFromStub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrCreateServerInterfaceFromStub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS NdrCreateServerInterfaceFromStub(struct IRpcStubBuffer *pStub, RPC_SERVER_INTERFACE *pServerIf)
     * }
     */
    public static FunctionDescriptor NdrCreateServerInterfaceFromStub$descriptor() {
        return NdrCreateServerInterfaceFromStub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS NdrCreateServerInterfaceFromStub(struct IRpcStubBuffer *pStub, RPC_SERVER_INTERFACE *pServerIf)
     * }
     */
    public static MethodHandle NdrCreateServerInterfaceFromStub$handle() {
        return NdrCreateServerInterfaceFromStub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS NdrCreateServerInterfaceFromStub(struct IRpcStubBuffer *pStub, RPC_SERVER_INTERFACE *pServerIf)
     * }
     */
    public static MemorySegment NdrCreateServerInterfaceFromStub$address() {
        return NdrCreateServerInterfaceFromStub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS NdrCreateServerInterfaceFromStub(struct IRpcStubBuffer *pStub, RPC_SERVER_INTERFACE *pServerIf)
     * }
     */
    public static int NdrCreateServerInterfaceFromStub(MemorySegment pStub, MemorySegment pServerIf) {
        var mh$ = NdrCreateServerInterfaceFromStub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrCreateServerInterfaceFromStub", pStub, pServerIf);
            }
            return (int)mh$.invokeExact(pStub, pServerIf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * CLIENT_CALL_RETURN NdrClientCall3(MIDL_STUBLESS_PROXY_INFO *pProxyInfo, unsigned long nProcNum, void *pReturnValue, ...)
     * }
     */
    public static class NdrClientCall3 {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                _CLIENT_CALL_RETURN.layout(),
                wgl_h.C_POINTER,
                wgl_h.C_LONG,
                wgl_h.C_POINTER
            );
        private static final MemorySegment ADDR = wgl_h.findOrThrow("NdrClientCall3");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private NdrClientCall3(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * CLIENT_CALL_RETURN NdrClientCall3(MIDL_STUBLESS_PROXY_INFO *pProxyInfo, unsigned long nProcNum, void *pReturnValue, ...)
         * }
         */
        public static NdrClientCall3 makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new NdrClientCall3(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(SegmentAllocator allocator, MemorySegment pProxyInfo, int nProcNum, MemorySegment pReturnValue, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("NdrClientCall3", allocator, pProxyInfo, nProcNum, pReturnValue, x3);
                }
                return (MemorySegment)spreader.invokeExact(allocator, pProxyInfo, nProcNum, pReturnValue, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * CLIENT_CALL_RETURN Ndr64AsyncClientCall(MIDL_STUBLESS_PROXY_INFO *pProxyInfo, unsigned long nProcNum, void *pReturnValue, ...)
     * }
     */
    public static class Ndr64AsyncClientCall {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                _CLIENT_CALL_RETURN.layout(),
                wgl_h.C_POINTER,
                wgl_h.C_LONG,
                wgl_h.C_POINTER
            );
        private static final MemorySegment ADDR = wgl_h.findOrThrow("Ndr64AsyncClientCall");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private Ndr64AsyncClientCall(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * CLIENT_CALL_RETURN Ndr64AsyncClientCall(MIDL_STUBLESS_PROXY_INFO *pProxyInfo, unsigned long nProcNum, void *pReturnValue, ...)
         * }
         */
        public static Ndr64AsyncClientCall makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new Ndr64AsyncClientCall(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(SegmentAllocator allocator, MemorySegment pProxyInfo, int nProcNum, MemorySegment pReturnValue, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("Ndr64AsyncClientCall", allocator, pProxyInfo, nProcNum, pReturnValue, x3);
                }
                return (MemorySegment)spreader.invokeExact(allocator, pProxyInfo, nProcNum, pReturnValue, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * CLIENT_CALL_RETURN Ndr64DcomAsyncClientCall(MIDL_STUBLESS_PROXY_INFO *pProxyInfo, unsigned long nProcNum, void *pReturnValue, ...)
     * }
     */
    public static class Ndr64DcomAsyncClientCall {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                _CLIENT_CALL_RETURN.layout(),
                wgl_h.C_POINTER,
                wgl_h.C_LONG,
                wgl_h.C_POINTER
            );
        private static final MemorySegment ADDR = wgl_h.findOrThrow("Ndr64DcomAsyncClientCall");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private Ndr64DcomAsyncClientCall(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * CLIENT_CALL_RETURN Ndr64DcomAsyncClientCall(MIDL_STUBLESS_PROXY_INFO *pProxyInfo, unsigned long nProcNum, void *pReturnValue, ...)
         * }
         */
        public static Ndr64DcomAsyncClientCall makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new Ndr64DcomAsyncClientCall(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(SegmentAllocator allocator, MemorySegment pProxyInfo, int nProcNum, MemorySegment pReturnValue, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("Ndr64DcomAsyncClientCall", allocator, pProxyInfo, nProcNum, pReturnValue, x3);
                }
                return (MemorySegment)spreader.invokeExact(allocator, pProxyInfo, nProcNum, pReturnValue, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class Ndr64AsyncServerCall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("Ndr64AsyncServerCall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Ndr64AsyncServerCall(PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static FunctionDescriptor Ndr64AsyncServerCall$descriptor() {
        return Ndr64AsyncServerCall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Ndr64AsyncServerCall(PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static MethodHandle Ndr64AsyncServerCall$handle() {
        return Ndr64AsyncServerCall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Ndr64AsyncServerCall(PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static MemorySegment Ndr64AsyncServerCall$address() {
        return Ndr64AsyncServerCall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Ndr64AsyncServerCall(PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static void Ndr64AsyncServerCall(MemorySegment pRpcMsg) {
        var mh$ = Ndr64AsyncServerCall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Ndr64AsyncServerCall", pRpcMsg);
            }
            mh$.invokeExact(pRpcMsg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Ndr64AsyncServerCall64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("Ndr64AsyncServerCall64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Ndr64AsyncServerCall64(PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static FunctionDescriptor Ndr64AsyncServerCall64$descriptor() {
        return Ndr64AsyncServerCall64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Ndr64AsyncServerCall64(PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static MethodHandle Ndr64AsyncServerCall64$handle() {
        return Ndr64AsyncServerCall64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Ndr64AsyncServerCall64(PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static MemorySegment Ndr64AsyncServerCall64$address() {
        return Ndr64AsyncServerCall64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Ndr64AsyncServerCall64(PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static void Ndr64AsyncServerCall64(MemorySegment pRpcMsg) {
        var mh$ = Ndr64AsyncServerCall64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Ndr64AsyncServerCall64", pRpcMsg);
            }
            mh$.invokeExact(pRpcMsg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Ndr64AsyncServerCallAll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("Ndr64AsyncServerCallAll");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Ndr64AsyncServerCallAll(PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static FunctionDescriptor Ndr64AsyncServerCallAll$descriptor() {
        return Ndr64AsyncServerCallAll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Ndr64AsyncServerCallAll(PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static MethodHandle Ndr64AsyncServerCallAll$handle() {
        return Ndr64AsyncServerCallAll.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Ndr64AsyncServerCallAll(PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static MemorySegment Ndr64AsyncServerCallAll$address() {
        return Ndr64AsyncServerCallAll.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Ndr64AsyncServerCallAll(PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static void Ndr64AsyncServerCallAll(MemorySegment pRpcMsg) {
        var mh$ = Ndr64AsyncServerCallAll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Ndr64AsyncServerCallAll", pRpcMsg);
            }
            mh$.invokeExact(pRpcMsg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Ndr64AsyncStubCall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("Ndr64AsyncStubCall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long Ndr64AsyncStubCall(struct IRpcStubBuffer *pThis, struct IRpcChannelBuffer *pChannel, PRPC_MESSAGE pRpcMsg, unsigned long *pdwStubPhase)
     * }
     */
    public static FunctionDescriptor Ndr64AsyncStubCall$descriptor() {
        return Ndr64AsyncStubCall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long Ndr64AsyncStubCall(struct IRpcStubBuffer *pThis, struct IRpcChannelBuffer *pChannel, PRPC_MESSAGE pRpcMsg, unsigned long *pdwStubPhase)
     * }
     */
    public static MethodHandle Ndr64AsyncStubCall$handle() {
        return Ndr64AsyncStubCall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long Ndr64AsyncStubCall(struct IRpcStubBuffer *pThis, struct IRpcChannelBuffer *pChannel, PRPC_MESSAGE pRpcMsg, unsigned long *pdwStubPhase)
     * }
     */
    public static MemorySegment Ndr64AsyncStubCall$address() {
        return Ndr64AsyncStubCall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long Ndr64AsyncStubCall(struct IRpcStubBuffer *pThis, struct IRpcChannelBuffer *pChannel, PRPC_MESSAGE pRpcMsg, unsigned long *pdwStubPhase)
     * }
     */
    public static int Ndr64AsyncStubCall(MemorySegment pThis, MemorySegment pChannel, MemorySegment pRpcMsg, MemorySegment pdwStubPhase) {
        var mh$ = Ndr64AsyncStubCall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Ndr64AsyncStubCall", pThis, pChannel, pRpcMsg, pdwStubPhase);
            }
            return (int)mh$.invokeExact(pThis, pChannel, pRpcMsg, pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Ndr64DcomAsyncStubCall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("Ndr64DcomAsyncStubCall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long Ndr64DcomAsyncStubCall(struct IRpcStubBuffer *pThis, struct IRpcChannelBuffer *pChannel, PRPC_MESSAGE pRpcMsg, unsigned long *pdwStubPhase)
     * }
     */
    public static FunctionDescriptor Ndr64DcomAsyncStubCall$descriptor() {
        return Ndr64DcomAsyncStubCall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long Ndr64DcomAsyncStubCall(struct IRpcStubBuffer *pThis, struct IRpcChannelBuffer *pChannel, PRPC_MESSAGE pRpcMsg, unsigned long *pdwStubPhase)
     * }
     */
    public static MethodHandle Ndr64DcomAsyncStubCall$handle() {
        return Ndr64DcomAsyncStubCall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long Ndr64DcomAsyncStubCall(struct IRpcStubBuffer *pThis, struct IRpcChannelBuffer *pChannel, PRPC_MESSAGE pRpcMsg, unsigned long *pdwStubPhase)
     * }
     */
    public static MemorySegment Ndr64DcomAsyncStubCall$address() {
        return Ndr64DcomAsyncStubCall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long Ndr64DcomAsyncStubCall(struct IRpcStubBuffer *pThis, struct IRpcChannelBuffer *pChannel, PRPC_MESSAGE pRpcMsg, unsigned long *pdwStubPhase)
     * }
     */
    public static int Ndr64DcomAsyncStubCall(MemorySegment pThis, MemorySegment pChannel, MemorySegment pRpcMsg, MemorySegment pdwStubPhase) {
        var mh$ = Ndr64DcomAsyncStubCall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Ndr64DcomAsyncStubCall", pThis, pChannel, pRpcMsg, pdwStubPhase);
            }
            return (int)mh$.invokeExact(pThis, pChannel, pRpcMsg, pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrStubCall3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrStubCall3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long NdrStubCall3(void *pThis, void *pChannel, PRPC_MESSAGE pRpcMsg, unsigned long *pdwStubPhase)
     * }
     */
    public static FunctionDescriptor NdrStubCall3$descriptor() {
        return NdrStubCall3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long NdrStubCall3(void *pThis, void *pChannel, PRPC_MESSAGE pRpcMsg, unsigned long *pdwStubPhase)
     * }
     */
    public static MethodHandle NdrStubCall3$handle() {
        return NdrStubCall3.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long NdrStubCall3(void *pThis, void *pChannel, PRPC_MESSAGE pRpcMsg, unsigned long *pdwStubPhase)
     * }
     */
    public static MemorySegment NdrStubCall3$address() {
        return NdrStubCall3.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long NdrStubCall3(void *pThis, void *pChannel, PRPC_MESSAGE pRpcMsg, unsigned long *pdwStubPhase)
     * }
     */
    public static int NdrStubCall3(MemorySegment pThis, MemorySegment pChannel, MemorySegment pRpcMsg, MemorySegment pdwStubPhase) {
        var mh$ = NdrStubCall3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrStubCall3", pThis, pChannel, pRpcMsg, pdwStubPhase);
            }
            return (int)mh$.invokeExact(pThis, pChannel, pRpcMsg, pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrServerCallAll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrServerCallAll");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrServerCallAll(PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static FunctionDescriptor NdrServerCallAll$descriptor() {
        return NdrServerCallAll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrServerCallAll(PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static MethodHandle NdrServerCallAll$handle() {
        return NdrServerCallAll.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrServerCallAll(PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static MemorySegment NdrServerCallAll$address() {
        return NdrServerCallAll.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrServerCallAll(PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static void NdrServerCallAll(MemorySegment pRpcMsg) {
        var mh$ = NdrServerCallAll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrServerCallAll", pRpcMsg);
            }
            mh$.invokeExact(pRpcMsg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrServerCallNdr64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrServerCallNdr64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrServerCallNdr64(PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static FunctionDescriptor NdrServerCallNdr64$descriptor() {
        return NdrServerCallNdr64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrServerCallNdr64(PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static MethodHandle NdrServerCallNdr64$handle() {
        return NdrServerCallNdr64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrServerCallNdr64(PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static MemorySegment NdrServerCallNdr64$address() {
        return NdrServerCallNdr64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrServerCallNdr64(PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static void NdrServerCallNdr64(MemorySegment pRpcMsg) {
        var mh$ = NdrServerCallNdr64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrServerCallNdr64", pRpcMsg);
            }
            mh$.invokeExact(pRpcMsg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrServerCall3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrServerCall3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrServerCall3(PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static FunctionDescriptor NdrServerCall3$descriptor() {
        return NdrServerCall3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrServerCall3(PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static MethodHandle NdrServerCall3$handle() {
        return NdrServerCall3.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrServerCall3(PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static MemorySegment NdrServerCall3$address() {
        return NdrServerCall3.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrServerCall3(PRPC_MESSAGE pRpcMsg)
     * }
     */
    public static void NdrServerCall3(MemorySegment pRpcMsg) {
        var mh$ = NdrServerCall3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrServerCall3", pRpcMsg);
            }
            mh$.invokeExact(pRpcMsg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrPartialIgnoreClientMarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrPartialIgnoreClientMarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrPartialIgnoreClientMarshall(PMIDL_STUB_MESSAGE pStubMsg, void *pMemory)
     * }
     */
    public static FunctionDescriptor NdrPartialIgnoreClientMarshall$descriptor() {
        return NdrPartialIgnoreClientMarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrPartialIgnoreClientMarshall(PMIDL_STUB_MESSAGE pStubMsg, void *pMemory)
     * }
     */
    public static MethodHandle NdrPartialIgnoreClientMarshall$handle() {
        return NdrPartialIgnoreClientMarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrPartialIgnoreClientMarshall(PMIDL_STUB_MESSAGE pStubMsg, void *pMemory)
     * }
     */
    public static MemorySegment NdrPartialIgnoreClientMarshall$address() {
        return NdrPartialIgnoreClientMarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrPartialIgnoreClientMarshall(PMIDL_STUB_MESSAGE pStubMsg, void *pMemory)
     * }
     */
    public static void NdrPartialIgnoreClientMarshall(MemorySegment pStubMsg, MemorySegment pMemory) {
        var mh$ = NdrPartialIgnoreClientMarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrPartialIgnoreClientMarshall", pStubMsg, pMemory);
            }
            mh$.invokeExact(pStubMsg, pMemory);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrPartialIgnoreServerUnmarshall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrPartialIgnoreServerUnmarshall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrPartialIgnoreServerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, void **ppMemory)
     * }
     */
    public static FunctionDescriptor NdrPartialIgnoreServerUnmarshall$descriptor() {
        return NdrPartialIgnoreServerUnmarshall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrPartialIgnoreServerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, void **ppMemory)
     * }
     */
    public static MethodHandle NdrPartialIgnoreServerUnmarshall$handle() {
        return NdrPartialIgnoreServerUnmarshall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrPartialIgnoreServerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, void **ppMemory)
     * }
     */
    public static MemorySegment NdrPartialIgnoreServerUnmarshall$address() {
        return NdrPartialIgnoreServerUnmarshall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrPartialIgnoreServerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, void **ppMemory)
     * }
     */
    public static void NdrPartialIgnoreServerUnmarshall(MemorySegment pStubMsg, MemorySegment ppMemory) {
        var mh$ = NdrPartialIgnoreServerUnmarshall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrPartialIgnoreServerUnmarshall", pStubMsg, ppMemory);
            }
            mh$.invokeExact(pStubMsg, ppMemory);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrPartialIgnoreClientBufferSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrPartialIgnoreClientBufferSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrPartialIgnoreClientBufferSize(PMIDL_STUB_MESSAGE pStubMsg, void *pMemory)
     * }
     */
    public static FunctionDescriptor NdrPartialIgnoreClientBufferSize$descriptor() {
        return NdrPartialIgnoreClientBufferSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrPartialIgnoreClientBufferSize(PMIDL_STUB_MESSAGE pStubMsg, void *pMemory)
     * }
     */
    public static MethodHandle NdrPartialIgnoreClientBufferSize$handle() {
        return NdrPartialIgnoreClientBufferSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrPartialIgnoreClientBufferSize(PMIDL_STUB_MESSAGE pStubMsg, void *pMemory)
     * }
     */
    public static MemorySegment NdrPartialIgnoreClientBufferSize$address() {
        return NdrPartialIgnoreClientBufferSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrPartialIgnoreClientBufferSize(PMIDL_STUB_MESSAGE pStubMsg, void *pMemory)
     * }
     */
    public static void NdrPartialIgnoreClientBufferSize(MemorySegment pStubMsg, MemorySegment pMemory) {
        var mh$ = NdrPartialIgnoreClientBufferSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrPartialIgnoreClientBufferSize", pStubMsg, pMemory);
            }
            mh$.invokeExact(pStubMsg, pMemory);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NdrPartialIgnoreServerInitialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("NdrPartialIgnoreServerInitialize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NdrPartialIgnoreServerInitialize(PMIDL_STUB_MESSAGE pStubMsg, void **ppMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static FunctionDescriptor NdrPartialIgnoreServerInitialize$descriptor() {
        return NdrPartialIgnoreServerInitialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NdrPartialIgnoreServerInitialize(PMIDL_STUB_MESSAGE pStubMsg, void **ppMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MethodHandle NdrPartialIgnoreServerInitialize$handle() {
        return NdrPartialIgnoreServerInitialize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NdrPartialIgnoreServerInitialize(PMIDL_STUB_MESSAGE pStubMsg, void **ppMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static MemorySegment NdrPartialIgnoreServerInitialize$address() {
        return NdrPartialIgnoreServerInitialize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NdrPartialIgnoreServerInitialize(PMIDL_STUB_MESSAGE pStubMsg, void **ppMemory, PFORMAT_STRING pFormat)
     * }
     */
    public static void NdrPartialIgnoreServerInitialize(MemorySegment pStubMsg, MemorySegment ppMemory, MemorySegment pFormat) {
        var mh$ = NdrPartialIgnoreServerInitialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NdrPartialIgnoreServerInitialize", pStubMsg, ppMemory, pFormat);
            }
            mh$.invokeExact(pStubMsg, ppMemory, pFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcUserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RpcUserFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void RpcUserFree(handle_t AsyncHandle, void *pBuffer)
     * }
     */
    public static FunctionDescriptor RpcUserFree$descriptor() {
        return RpcUserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void RpcUserFree(handle_t AsyncHandle, void *pBuffer)
     * }
     */
    public static MethodHandle RpcUserFree$handle() {
        return RpcUserFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void RpcUserFree(handle_t AsyncHandle, void *pBuffer)
     * }
     */
    public static MemorySegment RpcUserFree$address() {
        return RpcUserFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void RpcUserFree(handle_t AsyncHandle, void *pBuffer)
     * }
     */
    public static void RpcUserFree(MemorySegment AsyncHandle, MemorySegment pBuffer) {
        var mh$ = RpcUserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcUserFree", AsyncHandle, pBuffer);
            }
            mh$.invokeExact(AsyncHandle, pBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$layout() {
        return __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$segment() {
        return __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec() {
        return __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$layout() {
        return __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$segment() {
        return __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec() {
        return __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef WCHAR OLECHAR
     * }
     */
    public static final OfShort OLECHAR = wgl_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef OLECHAR *LPOLESTR
     * }
     */
    public static final AddressLayout LPOLESTR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const OLECHAR *LPCOLESTR
     * }
     */
    public static final AddressLayout LPCOLESTR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef double DOUBLE
     * }
     */
    public static final OfDouble DOUBLE = wgl_h.C_DOUBLE;
    /**
     * {@snippet lang=c :
     * typedef LONG SCODE
     * }
     */
    public static final OfInt SCODE = wgl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef SCODE *PSCODE
     * }
     */
    public static final AddressLayout PSCODE = wgl_h.C_POINTER;
    private static final int MEMCTX_TASK = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagMEMCTX.MEMCTX_TASK = 1
     * }
     */
    public static int MEMCTX_TASK() {
        return MEMCTX_TASK;
    }
    private static final int MEMCTX_SHARED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagMEMCTX.MEMCTX_SHARED = 2
     * }
     */
    public static int MEMCTX_SHARED() {
        return MEMCTX_SHARED;
    }
    private static final int MEMCTX_MACSYSTEM = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagMEMCTX.MEMCTX_MACSYSTEM = 3
     * }
     */
    public static int MEMCTX_MACSYSTEM() {
        return MEMCTX_MACSYSTEM;
    }
    private static final int MEMCTX_UNKNOWN = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum tagMEMCTX.MEMCTX_UNKNOWN = -1
     * }
     */
    public static int MEMCTX_UNKNOWN() {
        return MEMCTX_UNKNOWN;
    }
    private static final int MEMCTX_SAME = (int)-2L;
    /**
     * {@snippet lang=c :
     * enum tagMEMCTX.MEMCTX_SAME = -2
     * }
     */
    public static int MEMCTX_SAME() {
        return MEMCTX_SAME;
    }
    private static final int CLSCTX_INPROC_SERVER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagCLSCTX.CLSCTX_INPROC_SERVER = 1
     * }
     */
    public static int CLSCTX_INPROC_SERVER() {
        return CLSCTX_INPROC_SERVER;
    }
    private static final int CLSCTX_INPROC_HANDLER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagCLSCTX.CLSCTX_INPROC_HANDLER = 2
     * }
     */
    public static int CLSCTX_INPROC_HANDLER() {
        return CLSCTX_INPROC_HANDLER;
    }
    private static final int CLSCTX_LOCAL_SERVER = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagCLSCTX.CLSCTX_LOCAL_SERVER = 4
     * }
     */
    public static int CLSCTX_LOCAL_SERVER() {
        return CLSCTX_LOCAL_SERVER;
    }
    private static final int CLSCTX_INPROC_SERVER16 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagCLSCTX.CLSCTX_INPROC_SERVER16 = 8
     * }
     */
    public static int CLSCTX_INPROC_SERVER16() {
        return CLSCTX_INPROC_SERVER16;
    }
    private static final int CLSCTX_REMOTE_SERVER = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagCLSCTX.CLSCTX_REMOTE_SERVER = 16
     * }
     */
    public static int CLSCTX_REMOTE_SERVER() {
        return CLSCTX_REMOTE_SERVER;
    }
    private static final int CLSCTX_INPROC_HANDLER16 = (int)32L;
    /**
     * {@snippet lang=c :
     * enum tagCLSCTX.CLSCTX_INPROC_HANDLER16 = 32
     * }
     */
    public static int CLSCTX_INPROC_HANDLER16() {
        return CLSCTX_INPROC_HANDLER16;
    }
    private static final int CLSCTX_RESERVED1 = (int)64L;
    /**
     * {@snippet lang=c :
     * enum tagCLSCTX.CLSCTX_RESERVED1 = 64
     * }
     */
    public static int CLSCTX_RESERVED1() {
        return CLSCTX_RESERVED1;
    }
    private static final int CLSCTX_RESERVED2 = (int)128L;
    /**
     * {@snippet lang=c :
     * enum tagCLSCTX.CLSCTX_RESERVED2 = 128
     * }
     */
    public static int CLSCTX_RESERVED2() {
        return CLSCTX_RESERVED2;
    }
    private static final int CLSCTX_RESERVED3 = (int)256L;
    /**
     * {@snippet lang=c :
     * enum tagCLSCTX.CLSCTX_RESERVED3 = 256
     * }
     */
    public static int CLSCTX_RESERVED3() {
        return CLSCTX_RESERVED3;
    }
    private static final int CLSCTX_RESERVED4 = (int)512L;
    /**
     * {@snippet lang=c :
     * enum tagCLSCTX.CLSCTX_RESERVED4 = 512
     * }
     */
    public static int CLSCTX_RESERVED4() {
        return CLSCTX_RESERVED4;
    }
    private static final int CLSCTX_NO_CODE_DOWNLOAD = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum tagCLSCTX.CLSCTX_NO_CODE_DOWNLOAD = 1024
     * }
     */
    public static int CLSCTX_NO_CODE_DOWNLOAD() {
        return CLSCTX_NO_CODE_DOWNLOAD;
    }
    private static final int CLSCTX_RESERVED5 = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum tagCLSCTX.CLSCTX_RESERVED5 = 2048
     * }
     */
    public static int CLSCTX_RESERVED5() {
        return CLSCTX_RESERVED5;
    }
    private static final int CLSCTX_NO_CUSTOM_MARSHAL = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum tagCLSCTX.CLSCTX_NO_CUSTOM_MARSHAL = 4096
     * }
     */
    public static int CLSCTX_NO_CUSTOM_MARSHAL() {
        return CLSCTX_NO_CUSTOM_MARSHAL;
    }
    private static final int CLSCTX_ENABLE_CODE_DOWNLOAD = (int)8192L;
    /**
     * {@snippet lang=c :
     * enum tagCLSCTX.CLSCTX_ENABLE_CODE_DOWNLOAD = 8192
     * }
     */
    public static int CLSCTX_ENABLE_CODE_DOWNLOAD() {
        return CLSCTX_ENABLE_CODE_DOWNLOAD;
    }
    private static final int CLSCTX_NO_FAILURE_LOG = (int)16384L;
    /**
     * {@snippet lang=c :
     * enum tagCLSCTX.CLSCTX_NO_FAILURE_LOG = 16384
     * }
     */
    public static int CLSCTX_NO_FAILURE_LOG() {
        return CLSCTX_NO_FAILURE_LOG;
    }
    private static final int CLSCTX_DISABLE_AAA = (int)32768L;
    /**
     * {@snippet lang=c :
     * enum tagCLSCTX.CLSCTX_DISABLE_AAA = 32768
     * }
     */
    public static int CLSCTX_DISABLE_AAA() {
        return CLSCTX_DISABLE_AAA;
    }
    private static final int CLSCTX_ENABLE_AAA = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum tagCLSCTX.CLSCTX_ENABLE_AAA = 65536
     * }
     */
    public static int CLSCTX_ENABLE_AAA() {
        return CLSCTX_ENABLE_AAA;
    }
    private static final int CLSCTX_FROM_DEFAULT_CONTEXT = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum tagCLSCTX.CLSCTX_FROM_DEFAULT_CONTEXT = 131072
     * }
     */
    public static int CLSCTX_FROM_DEFAULT_CONTEXT() {
        return CLSCTX_FROM_DEFAULT_CONTEXT;
    }
    private static final int CLSCTX_ACTIVATE_X86_SERVER = (int)262144L;
    /**
     * {@snippet lang=c :
     * enum tagCLSCTX.CLSCTX_ACTIVATE_X86_SERVER = 262144
     * }
     */
    public static int CLSCTX_ACTIVATE_X86_SERVER() {
        return CLSCTX_ACTIVATE_X86_SERVER;
    }
    private static final int CLSCTX_ACTIVATE_32_BIT_SERVER = (int)262144L;
    /**
     * {@snippet lang=c :
     * enum tagCLSCTX.CLSCTX_ACTIVATE_32_BIT_SERVER = 262144
     * }
     */
    public static int CLSCTX_ACTIVATE_32_BIT_SERVER() {
        return CLSCTX_ACTIVATE_32_BIT_SERVER;
    }
    private static final int CLSCTX_ACTIVATE_64_BIT_SERVER = (int)524288L;
    /**
     * {@snippet lang=c :
     * enum tagCLSCTX.CLSCTX_ACTIVATE_64_BIT_SERVER = 524288
     * }
     */
    public static int CLSCTX_ACTIVATE_64_BIT_SERVER() {
        return CLSCTX_ACTIVATE_64_BIT_SERVER;
    }
    private static final int CLSCTX_ENABLE_CLOAKING = (int)1048576L;
    /**
     * {@snippet lang=c :
     * enum tagCLSCTX.CLSCTX_ENABLE_CLOAKING = 1048576
     * }
     */
    public static int CLSCTX_ENABLE_CLOAKING() {
        return CLSCTX_ENABLE_CLOAKING;
    }
    private static final int CLSCTX_APPCONTAINER = (int)4194304L;
    /**
     * {@snippet lang=c :
     * enum tagCLSCTX.CLSCTX_APPCONTAINER = 4194304
     * }
     */
    public static int CLSCTX_APPCONTAINER() {
        return CLSCTX_APPCONTAINER;
    }
    private static final int CLSCTX_ACTIVATE_AAA_AS_IU = (int)8388608L;
    /**
     * {@snippet lang=c :
     * enum tagCLSCTX.CLSCTX_ACTIVATE_AAA_AS_IU = 8388608
     * }
     */
    public static int CLSCTX_ACTIVATE_AAA_AS_IU() {
        return CLSCTX_ACTIVATE_AAA_AS_IU;
    }
    private static final int CLSCTX_RESERVED6 = (int)16777216L;
    /**
     * {@snippet lang=c :
     * enum tagCLSCTX.CLSCTX_RESERVED6 = 16777216
     * }
     */
    public static int CLSCTX_RESERVED6() {
        return CLSCTX_RESERVED6;
    }
    private static final int CLSCTX_ACTIVATE_ARM32_SERVER = (int)33554432L;
    /**
     * {@snippet lang=c :
     * enum tagCLSCTX.CLSCTX_ACTIVATE_ARM32_SERVER = 33554432
     * }
     */
    public static int CLSCTX_ACTIVATE_ARM32_SERVER() {
        return CLSCTX_ACTIVATE_ARM32_SERVER;
    }
    private static final int CLSCTX_PS_DLL = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * enum tagCLSCTX.CLSCTX_PS_DLL = -2147483648
     * }
     */
    public static int CLSCTX_PS_DLL() {
        return CLSCTX_PS_DLL;
    }
    private static final int MSHLFLAGS_NORMAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagMSHLFLAGS.MSHLFLAGS_NORMAL = 0
     * }
     */
    public static int MSHLFLAGS_NORMAL() {
        return MSHLFLAGS_NORMAL;
    }
    private static final int MSHLFLAGS_TABLESTRONG = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagMSHLFLAGS.MSHLFLAGS_TABLESTRONG = 1
     * }
     */
    public static int MSHLFLAGS_TABLESTRONG() {
        return MSHLFLAGS_TABLESTRONG;
    }
    private static final int MSHLFLAGS_TABLEWEAK = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagMSHLFLAGS.MSHLFLAGS_TABLEWEAK = 2
     * }
     */
    public static int MSHLFLAGS_TABLEWEAK() {
        return MSHLFLAGS_TABLEWEAK;
    }
    private static final int MSHLFLAGS_NOPING = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagMSHLFLAGS.MSHLFLAGS_NOPING = 4
     * }
     */
    public static int MSHLFLAGS_NOPING() {
        return MSHLFLAGS_NOPING;
    }
    private static final int MSHLFLAGS_RESERVED1 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagMSHLFLAGS.MSHLFLAGS_RESERVED1 = 8
     * }
     */
    public static int MSHLFLAGS_RESERVED1() {
        return MSHLFLAGS_RESERVED1;
    }
    private static final int MSHLFLAGS_RESERVED2 = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagMSHLFLAGS.MSHLFLAGS_RESERVED2 = 16
     * }
     */
    public static int MSHLFLAGS_RESERVED2() {
        return MSHLFLAGS_RESERVED2;
    }
    private static final int MSHLFLAGS_RESERVED3 = (int)32L;
    /**
     * {@snippet lang=c :
     * enum tagMSHLFLAGS.MSHLFLAGS_RESERVED3 = 32
     * }
     */
    public static int MSHLFLAGS_RESERVED3() {
        return MSHLFLAGS_RESERVED3;
    }
    private static final int MSHLFLAGS_RESERVED4 = (int)64L;
    /**
     * {@snippet lang=c :
     * enum tagMSHLFLAGS.MSHLFLAGS_RESERVED4 = 64
     * }
     */
    public static int MSHLFLAGS_RESERVED4() {
        return MSHLFLAGS_RESERVED4;
    }
    private static final int MSHCTX_LOCAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagMSHCTX.MSHCTX_LOCAL = 0
     * }
     */
    public static int MSHCTX_LOCAL() {
        return MSHCTX_LOCAL;
    }
    private static final int MSHCTX_NOSHAREDMEM = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagMSHCTX.MSHCTX_NOSHAREDMEM = 1
     * }
     */
    public static int MSHCTX_NOSHAREDMEM() {
        return MSHCTX_NOSHAREDMEM;
    }
    private static final int MSHCTX_DIFFERENTMACHINE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagMSHCTX.MSHCTX_DIFFERENTMACHINE = 2
     * }
     */
    public static int MSHCTX_DIFFERENTMACHINE() {
        return MSHCTX_DIFFERENTMACHINE;
    }
    private static final int MSHCTX_INPROC = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagMSHCTX.MSHCTX_INPROC = 3
     * }
     */
    public static int MSHCTX_INPROC() {
        return MSHCTX_INPROC;
    }
    private static final int MSHCTX_CROSSCTX = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagMSHCTX.MSHCTX_CROSSCTX = 4
     * }
     */
    public static int MSHCTX_CROSSCTX() {
        return MSHCTX_CROSSCTX;
    }
    private static final int MSHCTX_RESERVED1 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum tagMSHCTX.MSHCTX_RESERVED1 = 5
     * }
     */
    public static int MSHCTX_RESERVED1() {
        return MSHCTX_RESERVED1;
    }
    /**
     * {@snippet lang=c :
     * typedef BYTE_BLOB *UP_BYTE_BLOB
     * }
     */
    public static final AddressLayout UP_BYTE_BLOB = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef WORD_BLOB *UP_WORD_BLOB
     * }
     */
    public static final AddressLayout UP_WORD_BLOB = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef DWORD_BLOB *UP_DWORD_BLOB
     * }
     */
    public static final AddressLayout UP_DWORD_BLOB = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef FLAGGED_BYTE_BLOB *UP_FLAGGED_BYTE_BLOB
     * }
     */
    public static final AddressLayout UP_FLAGGED_BYTE_BLOB = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef FLAGGED_WORD_BLOB *UP_FLAGGED_WORD_BLOB
     * }
     */
    public static final AddressLayout UP_FLAGGED_WORD_BLOB = wgl_h.C_POINTER;

    private static class IWinTypesBase_v0_1_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IWinTypesBase_v0_1_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IWinTypesBase_v0_1_c_ifspec
     * }
     */
    public static AddressLayout IWinTypesBase_v0_1_c_ifspec$layout() {
        return IWinTypesBase_v0_1_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IWinTypesBase_v0_1_c_ifspec
     * }
     */
    public static MemorySegment IWinTypesBase_v0_1_c_ifspec$segment() {
        return IWinTypesBase_v0_1_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IWinTypesBase_v0_1_c_ifspec
     * }
     */
    public static MemorySegment IWinTypesBase_v0_1_c_ifspec() {
        return IWinTypesBase_v0_1_c_ifspec$constants.SEGMENT.get(IWinTypesBase_v0_1_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IWinTypesBase_v0_1_c_ifspec
     * }
     */
    public static void IWinTypesBase_v0_1_c_ifspec(MemorySegment varValue) {
        IWinTypesBase_v0_1_c_ifspec$constants.SEGMENT.set(IWinTypesBase_v0_1_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IWinTypesBase_v0_1_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IWinTypesBase_v0_1_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IWinTypesBase_v0_1_s_ifspec
     * }
     */
    public static AddressLayout IWinTypesBase_v0_1_s_ifspec$layout() {
        return IWinTypesBase_v0_1_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IWinTypesBase_v0_1_s_ifspec
     * }
     */
    public static MemorySegment IWinTypesBase_v0_1_s_ifspec$segment() {
        return IWinTypesBase_v0_1_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IWinTypesBase_v0_1_s_ifspec
     * }
     */
    public static MemorySegment IWinTypesBase_v0_1_s_ifspec() {
        return IWinTypesBase_v0_1_s_ifspec$constants.SEGMENT.get(IWinTypesBase_v0_1_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IWinTypesBase_v0_1_s_ifspec
     * }
     */
    public static void IWinTypesBase_v0_1_s_ifspec(MemorySegment varValue) {
        IWinTypesBase_v0_1_s_ifspec$constants.SEGMENT.set(IWinTypesBase_v0_1_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagBLOB {
     *     ULONG cbSize;
     *     BYTE *pBlobData;
     * } *LPBLOB
     * }
     */
    public static final AddressLayout LPBLOB = wgl_h.C_POINTER;

    private static class __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$layout() {
        return __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$segment() {
        return __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec() {
        return __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$layout() {
        return __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$segment() {
        return __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec() {
        return __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$layout() {
        return __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$segment() {
        return __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec() {
        return __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$layout() {
        return __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$segment() {
        return __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec() {
        return __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    private static final int DVASPECT_CONTENT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagDVASPECT.DVASPECT_CONTENT = 1
     * }
     */
    public static int DVASPECT_CONTENT() {
        return DVASPECT_CONTENT;
    }
    private static final int DVASPECT_THUMBNAIL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagDVASPECT.DVASPECT_THUMBNAIL = 2
     * }
     */
    public static int DVASPECT_THUMBNAIL() {
        return DVASPECT_THUMBNAIL;
    }
    private static final int DVASPECT_ICON = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagDVASPECT.DVASPECT_ICON = 4
     * }
     */
    public static int DVASPECT_ICON() {
        return DVASPECT_ICON;
    }
    private static final int DVASPECT_DOCPRINT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagDVASPECT.DVASPECT_DOCPRINT = 8
     * }
     */
    public static int DVASPECT_DOCPRINT() {
        return DVASPECT_DOCPRINT;
    }
    private static final int STGC_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagSTGC.STGC_DEFAULT = 0
     * }
     */
    public static int STGC_DEFAULT() {
        return STGC_DEFAULT;
    }
    private static final int STGC_OVERWRITE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagSTGC.STGC_OVERWRITE = 1
     * }
     */
    public static int STGC_OVERWRITE() {
        return STGC_OVERWRITE;
    }
    private static final int STGC_ONLYIFCURRENT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagSTGC.STGC_ONLYIFCURRENT = 2
     * }
     */
    public static int STGC_ONLYIFCURRENT() {
        return STGC_ONLYIFCURRENT;
    }
    private static final int STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagSTGC.STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 4
     * }
     */
    public static int STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE() {
        return STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE;
    }
    private static final int STGC_CONSOLIDATE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagSTGC.STGC_CONSOLIDATE = 8
     * }
     */
    public static int STGC_CONSOLIDATE() {
        return STGC_CONSOLIDATE;
    }
    private static final int STGMOVE_MOVE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagSTGMOVE.STGMOVE_MOVE = 0
     * }
     */
    public static int STGMOVE_MOVE() {
        return STGMOVE_MOVE;
    }
    private static final int STGMOVE_COPY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagSTGMOVE.STGMOVE_COPY = 1
     * }
     */
    public static int STGMOVE_COPY() {
        return STGMOVE_COPY;
    }
    private static final int STGMOVE_SHALLOWCOPY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagSTGMOVE.STGMOVE_SHALLOWCOPY = 2
     * }
     */
    public static int STGMOVE_SHALLOWCOPY() {
        return STGMOVE_SHALLOWCOPY;
    }
    private static final int STATFLAG_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagSTATFLAG.STATFLAG_DEFAULT = 0
     * }
     */
    public static int STATFLAG_DEFAULT() {
        return STATFLAG_DEFAULT;
    }
    private static final int STATFLAG_NONAME = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagSTATFLAG.STATFLAG_NONAME = 1
     * }
     */
    public static int STATFLAG_NONAME() {
        return STATFLAG_NONAME;
    }
    private static final int STATFLAG_NOOPEN = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagSTATFLAG.STATFLAG_NOOPEN = 2
     * }
     */
    public static int STATFLAG_NOOPEN() {
        return STATFLAG_NOOPEN;
    }
    /**
     * {@snippet lang=c :
     * typedef void *HCONTEXT
     * }
     */
    public static final AddressLayout HCONTEXT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef userCLIPFORMAT *wireCLIPFORMAT
     * }
     */
    public static final AddressLayout wireCLIPFORMAT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef WORD CLIPFORMAT
     * }
     */
    public static final OfShort CLIPFORMAT = wgl_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef userHGLOBAL *wireHGLOBAL
     * }
     */
    public static final AddressLayout wireHGLOBAL = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef RemotableHandle *wireHWND
     * }
     */
    public static final AddressLayout wireHWND = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef RemotableHandle *wireHMENU
     * }
     */
    public static final AddressLayout wireHMENU = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef RemotableHandle *wireHACCEL
     * }
     */
    public static final AddressLayout wireHACCEL = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef RemotableHandle *wireHBRUSH
     * }
     */
    public static final AddressLayout wireHBRUSH = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef RemotableHandle *wireHFONT
     * }
     */
    public static final AddressLayout wireHFONT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef RemotableHandle *wireHDC
     * }
     */
    public static final AddressLayout wireHDC = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef RemotableHandle *wireHICON
     * }
     */
    public static final AddressLayout wireHICON = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef RemotableHandle *wireHRGN
     * }
     */
    public static final AddressLayout wireHRGN = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef RemotableHandle *wireHMONITOR
     * }
     */
    public static final AddressLayout wireHMONITOR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef userHBITMAP *wireHBITMAP
     * }
     */
    public static final AddressLayout wireHBITMAP = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef userHPALETTE *wireHPALETTE
     * }
     */
    public static final AddressLayout wireHPALETTE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef userHENHMETAFILE *wireHENHMETAFILE
     * }
     */
    public static final AddressLayout wireHENHMETAFILE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef userHMETAFILE *wireHMETAFILE
     * }
     */
    public static final AddressLayout wireHMETAFILE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef userHMETAFILEPICT *wireHMETAFILEPICT
     * }
     */
    public static final AddressLayout wireHMETAFILEPICT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef void *HMETAFILEPICT
     * }
     */
    public static final AddressLayout HMETAFILEPICT = wgl_h.C_POINTER;

    private static class IWinTypes_v0_1_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IWinTypes_v0_1_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IWinTypes_v0_1_c_ifspec
     * }
     */
    public static AddressLayout IWinTypes_v0_1_c_ifspec$layout() {
        return IWinTypes_v0_1_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IWinTypes_v0_1_c_ifspec
     * }
     */
    public static MemorySegment IWinTypes_v0_1_c_ifspec$segment() {
        return IWinTypes_v0_1_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IWinTypes_v0_1_c_ifspec
     * }
     */
    public static MemorySegment IWinTypes_v0_1_c_ifspec() {
        return IWinTypes_v0_1_c_ifspec$constants.SEGMENT.get(IWinTypes_v0_1_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IWinTypes_v0_1_c_ifspec
     * }
     */
    public static void IWinTypes_v0_1_c_ifspec(MemorySegment varValue) {
        IWinTypes_v0_1_c_ifspec$constants.SEGMENT.set(IWinTypes_v0_1_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IWinTypes_v0_1_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IWinTypes_v0_1_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IWinTypes_v0_1_s_ifspec
     * }
     */
    public static AddressLayout IWinTypes_v0_1_s_ifspec$layout() {
        return IWinTypes_v0_1_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IWinTypes_v0_1_s_ifspec
     * }
     */
    public static MemorySegment IWinTypes_v0_1_s_ifspec$segment() {
        return IWinTypes_v0_1_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IWinTypes_v0_1_s_ifspec
     * }
     */
    public static MemorySegment IWinTypes_v0_1_s_ifspec() {
        return IWinTypes_v0_1_s_ifspec$constants.SEGMENT.get(IWinTypes_v0_1_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IWinTypes_v0_1_s_ifspec
     * }
     */
    public static void IWinTypes_v0_1_s_ifspec(MemorySegment varValue) {
        IWinTypes_v0_1_s_ifspec$constants.SEGMENT.set(IWinTypes_v0_1_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef double DATE
     * }
     */
    public static final OfDouble DATE = wgl_h.C_DOUBLE;
    /**
     * {@snippet lang=c :
     * typedef CY *LPCY
     * }
     */
    public static final AddressLayout LPCY = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef DECIMAL *LPDECIMAL
     * }
     */
    public static final AddressLayout LPDECIMAL = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef FLAGGED_WORD_BLOB *wireBSTR
     * }
     */
    public static final AddressLayout wireBSTR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef OLECHAR *BSTR
     * }
     */
    public static final AddressLayout BSTR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef BSTR *LPBSTR
     * }
     */
    public static final AddressLayout LPBSTR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef short VARIANT_BOOL
     * }
     */
    public static final OfShort VARIANT_BOOL = wgl_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef struct tagBSTRBLOB {
     *     ULONG cbSize;
     *     BYTE *pData;
     * } *LPBSTRBLOB
     * }
     */
    public static final AddressLayout LPBSTRBLOB = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef unsigned short VARTYPE
     * }
     */
    public static final OfShort VARTYPE = wgl_h.C_SHORT;
    private static final int VT_EMPTY = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_EMPTY = 0
     * }
     */
    public static int VT_EMPTY() {
        return VT_EMPTY;
    }
    private static final int VT_NULL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_NULL = 1
     * }
     */
    public static int VT_NULL() {
        return VT_NULL;
    }
    private static final int VT_I2 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_I2 = 2
     * }
     */
    public static int VT_I2() {
        return VT_I2;
    }
    private static final int VT_I4 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_I4 = 3
     * }
     */
    public static int VT_I4() {
        return VT_I4;
    }
    private static final int VT_R4 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_R4 = 4
     * }
     */
    public static int VT_R4() {
        return VT_R4;
    }
    private static final int VT_R8 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_R8 = 5
     * }
     */
    public static int VT_R8() {
        return VT_R8;
    }
    private static final int VT_CY = (int)6L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_CY = 6
     * }
     */
    public static int VT_CY() {
        return VT_CY;
    }
    private static final int VT_DATE = (int)7L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_DATE = 7
     * }
     */
    public static int VT_DATE() {
        return VT_DATE;
    }
    private static final int VT_BSTR = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_BSTR = 8
     * }
     */
    public static int VT_BSTR() {
        return VT_BSTR;
    }
    private static final int VT_DISPATCH = (int)9L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_DISPATCH = 9
     * }
     */
    public static int VT_DISPATCH() {
        return VT_DISPATCH;
    }
    private static final int VT_ERROR = (int)10L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_ERROR = 10
     * }
     */
    public static int VT_ERROR() {
        return VT_ERROR;
    }
    private static final int VT_BOOL = (int)11L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_BOOL = 11
     * }
     */
    public static int VT_BOOL() {
        return VT_BOOL;
    }
    private static final int VT_VARIANT = (int)12L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_VARIANT = 12
     * }
     */
    public static int VT_VARIANT() {
        return VT_VARIANT;
    }
    private static final int VT_UNKNOWN = (int)13L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_UNKNOWN = 13
     * }
     */
    public static int VT_UNKNOWN() {
        return VT_UNKNOWN;
    }
    private static final int VT_DECIMAL = (int)14L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_DECIMAL = 14
     * }
     */
    public static int VT_DECIMAL() {
        return VT_DECIMAL;
    }
    private static final int VT_I1 = (int)16L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_I1 = 16
     * }
     */
    public static int VT_I1() {
        return VT_I1;
    }
    private static final int VT_UI1 = (int)17L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_UI1 = 17
     * }
     */
    public static int VT_UI1() {
        return VT_UI1;
    }
    private static final int VT_UI2 = (int)18L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_UI2 = 18
     * }
     */
    public static int VT_UI2() {
        return VT_UI2;
    }
    private static final int VT_UI4 = (int)19L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_UI4 = 19
     * }
     */
    public static int VT_UI4() {
        return VT_UI4;
    }
    private static final int VT_I8 = (int)20L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_I8 = 20
     * }
     */
    public static int VT_I8() {
        return VT_I8;
    }
    private static final int VT_UI8 = (int)21L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_UI8 = 21
     * }
     */
    public static int VT_UI8() {
        return VT_UI8;
    }
    private static final int VT_INT = (int)22L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_INT = 22
     * }
     */
    public static int VT_INT() {
        return VT_INT;
    }
    private static final int VT_UINT = (int)23L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_UINT = 23
     * }
     */
    public static int VT_UINT() {
        return VT_UINT;
    }
    private static final int VT_VOID = (int)24L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_VOID = 24
     * }
     */
    public static int VT_VOID() {
        return VT_VOID;
    }
    private static final int VT_HRESULT = (int)25L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_HRESULT = 25
     * }
     */
    public static int VT_HRESULT() {
        return VT_HRESULT;
    }
    private static final int VT_PTR = (int)26L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_PTR = 26
     * }
     */
    public static int VT_PTR() {
        return VT_PTR;
    }
    private static final int VT_SAFEARRAY = (int)27L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_SAFEARRAY = 27
     * }
     */
    public static int VT_SAFEARRAY() {
        return VT_SAFEARRAY;
    }
    private static final int VT_CARRAY = (int)28L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_CARRAY = 28
     * }
     */
    public static int VT_CARRAY() {
        return VT_CARRAY;
    }
    private static final int VT_USERDEFINED = (int)29L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_USERDEFINED = 29
     * }
     */
    public static int VT_USERDEFINED() {
        return VT_USERDEFINED;
    }
    private static final int VT_LPSTR = (int)30L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_LPSTR = 30
     * }
     */
    public static int VT_LPSTR() {
        return VT_LPSTR;
    }
    private static final int VT_LPWSTR = (int)31L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_LPWSTR = 31
     * }
     */
    public static int VT_LPWSTR() {
        return VT_LPWSTR;
    }
    private static final int VT_RECORD = (int)36L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_RECORD = 36
     * }
     */
    public static int VT_RECORD() {
        return VT_RECORD;
    }
    private static final int VT_INT_PTR = (int)37L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_INT_PTR = 37
     * }
     */
    public static int VT_INT_PTR() {
        return VT_INT_PTR;
    }
    private static final int VT_UINT_PTR = (int)38L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_UINT_PTR = 38
     * }
     */
    public static int VT_UINT_PTR() {
        return VT_UINT_PTR;
    }
    private static final int VT_FILETIME = (int)64L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_FILETIME = 64
     * }
     */
    public static int VT_FILETIME() {
        return VT_FILETIME;
    }
    private static final int VT_BLOB = (int)65L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_BLOB = 65
     * }
     */
    public static int VT_BLOB() {
        return VT_BLOB;
    }
    private static final int VT_STREAM = (int)66L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_STREAM = 66
     * }
     */
    public static int VT_STREAM() {
        return VT_STREAM;
    }
    private static final int VT_STORAGE = (int)67L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_STORAGE = 67
     * }
     */
    public static int VT_STORAGE() {
        return VT_STORAGE;
    }
    private static final int VT_STREAMED_OBJECT = (int)68L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_STREAMED_OBJECT = 68
     * }
     */
    public static int VT_STREAMED_OBJECT() {
        return VT_STREAMED_OBJECT;
    }
    private static final int VT_STORED_OBJECT = (int)69L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_STORED_OBJECT = 69
     * }
     */
    public static int VT_STORED_OBJECT() {
        return VT_STORED_OBJECT;
    }
    private static final int VT_BLOB_OBJECT = (int)70L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_BLOB_OBJECT = 70
     * }
     */
    public static int VT_BLOB_OBJECT() {
        return VT_BLOB_OBJECT;
    }
    private static final int VT_CF = (int)71L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_CF = 71
     * }
     */
    public static int VT_CF() {
        return VT_CF;
    }
    private static final int VT_CLSID = (int)72L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_CLSID = 72
     * }
     */
    public static int VT_CLSID() {
        return VT_CLSID;
    }
    private static final int VT_VERSIONED_STREAM = (int)73L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_VERSIONED_STREAM = 73
     * }
     */
    public static int VT_VERSIONED_STREAM() {
        return VT_VERSIONED_STREAM;
    }
    private static final int VT_BSTR_BLOB = (int)4095L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_BSTR_BLOB = 4095
     * }
     */
    public static int VT_BSTR_BLOB() {
        return VT_BSTR_BLOB;
    }
    private static final int VT_VECTOR = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_VECTOR = 4096
     * }
     */
    public static int VT_VECTOR() {
        return VT_VECTOR;
    }
    private static final int VT_ARRAY = (int)8192L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_ARRAY = 8192
     * }
     */
    public static int VT_ARRAY() {
        return VT_ARRAY;
    }
    private static final int VT_BYREF = (int)16384L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_BYREF = 16384
     * }
     */
    public static int VT_BYREF() {
        return VT_BYREF;
    }
    private static final int VT_RESERVED = (int)32768L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_RESERVED = 32768
     * }
     */
    public static int VT_RESERVED() {
        return VT_RESERVED;
    }
    private static final int VT_ILLEGAL = (int)65535L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_ILLEGAL = 65535
     * }
     */
    public static int VT_ILLEGAL() {
        return VT_ILLEGAL;
    }
    private static final int VT_ILLEGALMASKED = (int)4095L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_ILLEGALMASKED = 4095
     * }
     */
    public static int VT_ILLEGALMASKED() {
        return VT_ILLEGALMASKED;
    }
    private static final int VT_TYPEMASK = (int)4095L;
    /**
     * {@snippet lang=c :
     * enum VARENUM.VT_TYPEMASK = 4095
     * }
     */
    public static int VT_TYPEMASK() {
        return VT_TYPEMASK;
    }
    /**
     * {@snippet lang=c :
     * typedef ULONG PROPID
     * }
     */
    public static final OfInt PROPID = wgl_h.C_LONG;
    private static final int TYSPEC_CLSID = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagTYSPEC.TYSPEC_CLSID = 0
     * }
     */
    public static int TYSPEC_CLSID() {
        return TYSPEC_CLSID;
    }
    private static final int TYSPEC_FILEEXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagTYSPEC.TYSPEC_FILEEXT = 1
     * }
     */
    public static int TYSPEC_FILEEXT() {
        return TYSPEC_FILEEXT;
    }
    private static final int TYSPEC_MIMETYPE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagTYSPEC.TYSPEC_MIMETYPE = 2
     * }
     */
    public static int TYSPEC_MIMETYPE() {
        return TYSPEC_MIMETYPE;
    }
    private static final int TYSPEC_FILENAME = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagTYSPEC.TYSPEC_FILENAME = 3
     * }
     */
    public static int TYSPEC_FILENAME() {
        return TYSPEC_FILENAME;
    }
    private static final int TYSPEC_PROGID = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagTYSPEC.TYSPEC_PROGID = 4
     * }
     */
    public static int TYSPEC_PROGID() {
        return TYSPEC_PROGID;
    }
    private static final int TYSPEC_PACKAGENAME = (int)5L;
    /**
     * {@snippet lang=c :
     * enum tagTYSPEC.TYSPEC_PACKAGENAME = 5
     * }
     */
    public static int TYSPEC_PACKAGENAME() {
        return TYSPEC_PACKAGENAME;
    }
    private static final int TYSPEC_OBJECTID = (int)6L;
    /**
     * {@snippet lang=c :
     * enum tagTYSPEC.TYSPEC_OBJECTID = 6
     * }
     */
    public static int TYSPEC_OBJECTID() {
        return TYSPEC_OBJECTID;
    }

    private static class __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$layout() {
        return __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$segment() {
        return __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec() {
        return __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$layout() {
        return __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$segment() {
        return __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec() {
        return __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class GUID_DEVINTERFACE_DISK$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("GUID_DEVINTERFACE_DISK").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_DISK
     * }
     */
    public static GroupLayout GUID_DEVINTERFACE_DISK$layout() {
        return GUID_DEVINTERFACE_DISK$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_DISK
     * }
     */
    public static MemorySegment GUID_DEVINTERFACE_DISK() {
        return GUID_DEVINTERFACE_DISK$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_DISK
     * }
     */
    public static void GUID_DEVINTERFACE_DISK(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_DEVINTERFACE_DISK$constants.SEGMENT, 0L, GUID_DEVINTERFACE_DISK$constants.LAYOUT.byteSize());
    }

    private static class GUID_DEVINTERFACE_CDROM$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("GUID_DEVINTERFACE_CDROM").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_CDROM
     * }
     */
    public static GroupLayout GUID_DEVINTERFACE_CDROM$layout() {
        return GUID_DEVINTERFACE_CDROM$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_CDROM
     * }
     */
    public static MemorySegment GUID_DEVINTERFACE_CDROM() {
        return GUID_DEVINTERFACE_CDROM$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_CDROM
     * }
     */
    public static void GUID_DEVINTERFACE_CDROM(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_DEVINTERFACE_CDROM$constants.SEGMENT, 0L, GUID_DEVINTERFACE_CDROM$constants.LAYOUT.byteSize());
    }

    private static class GUID_DEVINTERFACE_PARTITION$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("GUID_DEVINTERFACE_PARTITION").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_PARTITION
     * }
     */
    public static GroupLayout GUID_DEVINTERFACE_PARTITION$layout() {
        return GUID_DEVINTERFACE_PARTITION$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_PARTITION
     * }
     */
    public static MemorySegment GUID_DEVINTERFACE_PARTITION() {
        return GUID_DEVINTERFACE_PARTITION$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_PARTITION
     * }
     */
    public static void GUID_DEVINTERFACE_PARTITION(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_DEVINTERFACE_PARTITION$constants.SEGMENT, 0L, GUID_DEVINTERFACE_PARTITION$constants.LAYOUT.byteSize());
    }

    private static class GUID_DEVINTERFACE_TAPE$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("GUID_DEVINTERFACE_TAPE").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_TAPE
     * }
     */
    public static GroupLayout GUID_DEVINTERFACE_TAPE$layout() {
        return GUID_DEVINTERFACE_TAPE$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_TAPE
     * }
     */
    public static MemorySegment GUID_DEVINTERFACE_TAPE() {
        return GUID_DEVINTERFACE_TAPE$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_TAPE
     * }
     */
    public static void GUID_DEVINTERFACE_TAPE(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_DEVINTERFACE_TAPE$constants.SEGMENT, 0L, GUID_DEVINTERFACE_TAPE$constants.LAYOUT.byteSize());
    }

    private static class GUID_DEVINTERFACE_WRITEONCEDISK$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("GUID_DEVINTERFACE_WRITEONCEDISK").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_WRITEONCEDISK
     * }
     */
    public static GroupLayout GUID_DEVINTERFACE_WRITEONCEDISK$layout() {
        return GUID_DEVINTERFACE_WRITEONCEDISK$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_WRITEONCEDISK
     * }
     */
    public static MemorySegment GUID_DEVINTERFACE_WRITEONCEDISK() {
        return GUID_DEVINTERFACE_WRITEONCEDISK$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_WRITEONCEDISK
     * }
     */
    public static void GUID_DEVINTERFACE_WRITEONCEDISK(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_DEVINTERFACE_WRITEONCEDISK$constants.SEGMENT, 0L, GUID_DEVINTERFACE_WRITEONCEDISK$constants.LAYOUT.byteSize());
    }

    private static class GUID_DEVINTERFACE_VOLUME$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("GUID_DEVINTERFACE_VOLUME").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_VOLUME
     * }
     */
    public static GroupLayout GUID_DEVINTERFACE_VOLUME$layout() {
        return GUID_DEVINTERFACE_VOLUME$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_VOLUME
     * }
     */
    public static MemorySegment GUID_DEVINTERFACE_VOLUME() {
        return GUID_DEVINTERFACE_VOLUME$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_VOLUME
     * }
     */
    public static void GUID_DEVINTERFACE_VOLUME(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_DEVINTERFACE_VOLUME$constants.SEGMENT, 0L, GUID_DEVINTERFACE_VOLUME$constants.LAYOUT.byteSize());
    }

    private static class GUID_DEVINTERFACE_MEDIUMCHANGER$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("GUID_DEVINTERFACE_MEDIUMCHANGER").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_MEDIUMCHANGER
     * }
     */
    public static GroupLayout GUID_DEVINTERFACE_MEDIUMCHANGER$layout() {
        return GUID_DEVINTERFACE_MEDIUMCHANGER$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_MEDIUMCHANGER
     * }
     */
    public static MemorySegment GUID_DEVINTERFACE_MEDIUMCHANGER() {
        return GUID_DEVINTERFACE_MEDIUMCHANGER$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_MEDIUMCHANGER
     * }
     */
    public static void GUID_DEVINTERFACE_MEDIUMCHANGER(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_DEVINTERFACE_MEDIUMCHANGER$constants.SEGMENT, 0L, GUID_DEVINTERFACE_MEDIUMCHANGER$constants.LAYOUT.byteSize());
    }

    private static class GUID_DEVINTERFACE_FLOPPY$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("GUID_DEVINTERFACE_FLOPPY").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_FLOPPY
     * }
     */
    public static GroupLayout GUID_DEVINTERFACE_FLOPPY$layout() {
        return GUID_DEVINTERFACE_FLOPPY$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_FLOPPY
     * }
     */
    public static MemorySegment GUID_DEVINTERFACE_FLOPPY() {
        return GUID_DEVINTERFACE_FLOPPY$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_FLOPPY
     * }
     */
    public static void GUID_DEVINTERFACE_FLOPPY(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_DEVINTERFACE_FLOPPY$constants.SEGMENT, 0L, GUID_DEVINTERFACE_FLOPPY$constants.LAYOUT.byteSize());
    }

    private static class GUID_DEVINTERFACE_CDCHANGER$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("GUID_DEVINTERFACE_CDCHANGER").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_CDCHANGER
     * }
     */
    public static GroupLayout GUID_DEVINTERFACE_CDCHANGER$layout() {
        return GUID_DEVINTERFACE_CDCHANGER$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_CDCHANGER
     * }
     */
    public static MemorySegment GUID_DEVINTERFACE_CDCHANGER() {
        return GUID_DEVINTERFACE_CDCHANGER$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_CDCHANGER
     * }
     */
    public static void GUID_DEVINTERFACE_CDCHANGER(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_DEVINTERFACE_CDCHANGER$constants.SEGMENT, 0L, GUID_DEVINTERFACE_CDCHANGER$constants.LAYOUT.byteSize());
    }

    private static class GUID_DEVINTERFACE_STORAGEPORT$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("GUID_DEVINTERFACE_STORAGEPORT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_STORAGEPORT
     * }
     */
    public static GroupLayout GUID_DEVINTERFACE_STORAGEPORT$layout() {
        return GUID_DEVINTERFACE_STORAGEPORT$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_STORAGEPORT
     * }
     */
    public static MemorySegment GUID_DEVINTERFACE_STORAGEPORT() {
        return GUID_DEVINTERFACE_STORAGEPORT$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_STORAGEPORT
     * }
     */
    public static void GUID_DEVINTERFACE_STORAGEPORT(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_DEVINTERFACE_STORAGEPORT$constants.SEGMENT, 0L, GUID_DEVINTERFACE_STORAGEPORT$constants.LAYOUT.byteSize());
    }

    private static class GUID_DEVINTERFACE_VMLUN$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("GUID_DEVINTERFACE_VMLUN").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_VMLUN
     * }
     */
    public static GroupLayout GUID_DEVINTERFACE_VMLUN$layout() {
        return GUID_DEVINTERFACE_VMLUN$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_VMLUN
     * }
     */
    public static MemorySegment GUID_DEVINTERFACE_VMLUN() {
        return GUID_DEVINTERFACE_VMLUN$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_VMLUN
     * }
     */
    public static void GUID_DEVINTERFACE_VMLUN(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_DEVINTERFACE_VMLUN$constants.SEGMENT, 0L, GUID_DEVINTERFACE_VMLUN$constants.LAYOUT.byteSize());
    }

    private static class GUID_DEVINTERFACE_SES$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("GUID_DEVINTERFACE_SES").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_SES
     * }
     */
    public static GroupLayout GUID_DEVINTERFACE_SES$layout() {
        return GUID_DEVINTERFACE_SES$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_SES
     * }
     */
    public static MemorySegment GUID_DEVINTERFACE_SES() {
        return GUID_DEVINTERFACE_SES$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_SES
     * }
     */
    public static void GUID_DEVINTERFACE_SES(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_DEVINTERFACE_SES$constants.SEGMENT, 0L, GUID_DEVINTERFACE_SES$constants.LAYOUT.byteSize());
    }

    private static class GUID_DEVINTERFACE_SERVICE_VOLUME$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("GUID_DEVINTERFACE_SERVICE_VOLUME").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_SERVICE_VOLUME
     * }
     */
    public static GroupLayout GUID_DEVINTERFACE_SERVICE_VOLUME$layout() {
        return GUID_DEVINTERFACE_SERVICE_VOLUME$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_SERVICE_VOLUME
     * }
     */
    public static MemorySegment GUID_DEVINTERFACE_SERVICE_VOLUME() {
        return GUID_DEVINTERFACE_SERVICE_VOLUME$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_SERVICE_VOLUME
     * }
     */
    public static void GUID_DEVINTERFACE_SERVICE_VOLUME(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_DEVINTERFACE_SERVICE_VOLUME$constants.SEGMENT, 0L, GUID_DEVINTERFACE_SERVICE_VOLUME$constants.LAYOUT.byteSize());
    }

    private static class GUID_DEVINTERFACE_HIDDEN_VOLUME$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("GUID_DEVINTERFACE_HIDDEN_VOLUME").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_HIDDEN_VOLUME
     * }
     */
    public static GroupLayout GUID_DEVINTERFACE_HIDDEN_VOLUME$layout() {
        return GUID_DEVINTERFACE_HIDDEN_VOLUME$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_HIDDEN_VOLUME
     * }
     */
    public static MemorySegment GUID_DEVINTERFACE_HIDDEN_VOLUME() {
        return GUID_DEVINTERFACE_HIDDEN_VOLUME$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_HIDDEN_VOLUME
     * }
     */
    public static void GUID_DEVINTERFACE_HIDDEN_VOLUME(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_DEVINTERFACE_HIDDEN_VOLUME$constants.SEGMENT, 0L, GUID_DEVINTERFACE_HIDDEN_VOLUME$constants.LAYOUT.byteSize());
    }

    private static class GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB
     * }
     */
    public static GroupLayout GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB$layout() {
        return GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB
     * }
     */
    public static MemorySegment GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB() {
        return GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB
     * }
     */
    public static void GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB$constants.SEGMENT, 0L, GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB$constants.LAYOUT.byteSize());
    }

    private static class GUID_DEVINTERFACE_SCM_PHYSICAL_DEVICE$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("GUID_DEVINTERFACE_SCM_PHYSICAL_DEVICE").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_SCM_PHYSICAL_DEVICE
     * }
     */
    public static GroupLayout GUID_DEVINTERFACE_SCM_PHYSICAL_DEVICE$layout() {
        return GUID_DEVINTERFACE_SCM_PHYSICAL_DEVICE$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_SCM_PHYSICAL_DEVICE
     * }
     */
    public static MemorySegment GUID_DEVINTERFACE_SCM_PHYSICAL_DEVICE() {
        return GUID_DEVINTERFACE_SCM_PHYSICAL_DEVICE$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_SCM_PHYSICAL_DEVICE
     * }
     */
    public static void GUID_DEVINTERFACE_SCM_PHYSICAL_DEVICE(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_DEVINTERFACE_SCM_PHYSICAL_DEVICE$constants.SEGMENT, 0L, GUID_DEVINTERFACE_SCM_PHYSICAL_DEVICE$constants.LAYOUT.byteSize());
    }

    private static class GUID_SCM_PD_HEALTH_NOTIFICATION$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("GUID_SCM_PD_HEALTH_NOTIFICATION").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_SCM_PD_HEALTH_NOTIFICATION
     * }
     */
    public static GroupLayout GUID_SCM_PD_HEALTH_NOTIFICATION$layout() {
        return GUID_SCM_PD_HEALTH_NOTIFICATION$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_SCM_PD_HEALTH_NOTIFICATION
     * }
     */
    public static MemorySegment GUID_SCM_PD_HEALTH_NOTIFICATION() {
        return GUID_SCM_PD_HEALTH_NOTIFICATION$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_SCM_PD_HEALTH_NOTIFICATION
     * }
     */
    public static void GUID_SCM_PD_HEALTH_NOTIFICATION(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_SCM_PD_HEALTH_NOTIFICATION$constants.SEGMENT, 0L, GUID_SCM_PD_HEALTH_NOTIFICATION$constants.LAYOUT.byteSize());
    }

    private static class GUID_SCM_PD_PASSTHROUGH_INVDIMM$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("GUID_SCM_PD_PASSTHROUGH_INVDIMM").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_SCM_PD_PASSTHROUGH_INVDIMM
     * }
     */
    public static GroupLayout GUID_SCM_PD_PASSTHROUGH_INVDIMM$layout() {
        return GUID_SCM_PD_PASSTHROUGH_INVDIMM$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_SCM_PD_PASSTHROUGH_INVDIMM
     * }
     */
    public static MemorySegment GUID_SCM_PD_PASSTHROUGH_INVDIMM() {
        return GUID_SCM_PD_PASSTHROUGH_INVDIMM$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_SCM_PD_PASSTHROUGH_INVDIMM
     * }
     */
    public static void GUID_SCM_PD_PASSTHROUGH_INVDIMM(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_SCM_PD_PASSTHROUGH_INVDIMM$constants.SEGMENT, 0L, GUID_SCM_PD_PASSTHROUGH_INVDIMM$constants.LAYOUT.byteSize());
    }

    private static class GUID_DEVINTERFACE_COMPORT$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("GUID_DEVINTERFACE_COMPORT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_COMPORT
     * }
     */
    public static GroupLayout GUID_DEVINTERFACE_COMPORT$layout() {
        return GUID_DEVINTERFACE_COMPORT$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_COMPORT
     * }
     */
    public static MemorySegment GUID_DEVINTERFACE_COMPORT() {
        return GUID_DEVINTERFACE_COMPORT$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_COMPORT
     * }
     */
    public static void GUID_DEVINTERFACE_COMPORT(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_DEVINTERFACE_COMPORT$constants.SEGMENT, 0L, GUID_DEVINTERFACE_COMPORT$constants.LAYOUT.byteSize());
    }

    private static class GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR
     * }
     */
    public static GroupLayout GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR$layout() {
        return GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR
     * }
     */
    public static MemorySegment GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR() {
        return GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR
     * }
     */
    public static void GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR$constants.SEGMENT, 0L, GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_HOTPLUG_INFO {
     *     DWORD Size;
     *     BOOLEAN MediaRemovable;
     *     BOOLEAN MediaHotplug;
     *     BOOLEAN DeviceHotplug;
     *     BOOLEAN WriteCacheEnableOverride;
     * } *PSTORAGE_HOTPLUG_INFO
     * }
     */
    public static final AddressLayout PSTORAGE_HOTPLUG_INFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_DEVICE_NUMBER {
     *     DWORD DeviceType;
     *     DWORD DeviceNumber;
     *     DWORD PartitionNumber;
     * } *PSTORAGE_DEVICE_NUMBER
     * }
     */
    public static final AddressLayout PSTORAGE_DEVICE_NUMBER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_DEVICE_NUMBERS {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD NumberOfDevices;
     *     STORAGE_DEVICE_NUMBER Devices[1];
     * } *PSTORAGE_DEVICE_NUMBERS
     * }
     */
    public static final AddressLayout PSTORAGE_DEVICE_NUMBERS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_DEVICE_NUMBER_EX {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD Flags;
     *     DWORD DeviceType;
     *     DWORD DeviceNumber;
     *     GUID DeviceGuid;
     *     DWORD PartitionNumber;
     * } *PSTORAGE_DEVICE_NUMBER_EX
     * }
     */
    public static final AddressLayout PSTORAGE_DEVICE_NUMBER_EX = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_BUS_RESET_REQUEST {
     *     BYTE PathId;
     * } *PSTORAGE_BUS_RESET_REQUEST
     * }
     */
    public static final AddressLayout PSTORAGE_BUS_RESET_REQUEST = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct STORAGE_BREAK_RESERVATION_REQUEST {
     *     DWORD Length;
     *     BYTE _unused;
     *     BYTE PathId;
     *     BYTE TargetId;
     *     BYTE Lun;
     * } *PSTORAGE_BREAK_RESERVATION_REQUEST
     * }
     */
    public static final AddressLayout PSTORAGE_BREAK_RESERVATION_REQUEST = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PREVENT_MEDIA_REMOVAL {
     *     BOOLEAN PreventMediaRemoval;
     * } *PPREVENT_MEDIA_REMOVAL
     * }
     */
    public static final AddressLayout PPREVENT_MEDIA_REMOVAL = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CLASS_MEDIA_CHANGE_CONTEXT {
     *     DWORD MediaChangeCount;
     *     DWORD NewState;
     * } *PCLASS_MEDIA_CHANGE_CONTEXT
     * }
     */
    public static final AddressLayout PCLASS_MEDIA_CHANGE_CONTEXT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TAPE_STATISTICS {
     *     DWORD Version;
     *     DWORD Flags;
     *     LARGE_INTEGER RecoveredWrites;
     *     LARGE_INTEGER UnrecoveredWrites;
     *     LARGE_INTEGER RecoveredReads;
     *     LARGE_INTEGER UnrecoveredReads;
     *     BYTE CompressionRatioReads;
     *     BYTE CompressionRatioWrites;
     * } *PTAPE_STATISTICS
     * }
     */
    public static final AddressLayout PTAPE_STATISTICS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TAPE_GET_STATISTICS {
     *     DWORD Operation;
     * } *PTAPE_GET_STATISTICS
     * }
     */
    public static final AddressLayout PTAPE_GET_STATISTICS = wgl_h.C_POINTER;
    private static final int DDS_4mm = (int)32L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.DDS_4mm = 32
     * }
     */
    public static int DDS_4mm() {
        return DDS_4mm;
    }
    private static final int MiniQic = (int)33L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.MiniQic = 33
     * }
     */
    public static int MiniQic() {
        return MiniQic;
    }
    private static final int Travan = (int)34L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.Travan = 34
     * }
     */
    public static int Travan() {
        return Travan;
    }
    private static final int QIC = (int)35L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.QIC = 35
     * }
     */
    public static int QIC() {
        return QIC;
    }
    private static final int MP_8mm = (int)36L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.MP_8mm = 36
     * }
     */
    public static int MP_8mm() {
        return MP_8mm;
    }
    private static final int AME_8mm = (int)37L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.AME_8mm = 37
     * }
     */
    public static int AME_8mm() {
        return AME_8mm;
    }
    private static final int AIT1_8mm = (int)38L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.AIT1_8mm = 38
     * }
     */
    public static int AIT1_8mm() {
        return AIT1_8mm;
    }
    private static final int DLT = (int)39L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.DLT = 39
     * }
     */
    public static int DLT() {
        return DLT;
    }
    private static final int NCTP = (int)40L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.NCTP = 40
     * }
     */
    public static int NCTP() {
        return NCTP;
    }
    private static final int IBM_3480 = (int)41L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.IBM_3480 = 41
     * }
     */
    public static int IBM_3480() {
        return IBM_3480;
    }
    private static final int IBM_3490E = (int)42L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.IBM_3490E = 42
     * }
     */
    public static int IBM_3490E() {
        return IBM_3490E;
    }
    private static final int IBM_Magstar_3590 = (int)43L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.IBM_Magstar_3590 = 43
     * }
     */
    public static int IBM_Magstar_3590() {
        return IBM_Magstar_3590;
    }
    private static final int IBM_Magstar_MP = (int)44L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.IBM_Magstar_MP = 44
     * }
     */
    public static int IBM_Magstar_MP() {
        return IBM_Magstar_MP;
    }
    private static final int STK_DATA_D3 = (int)45L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.STK_DATA_D3 = 45
     * }
     */
    public static int STK_DATA_D3() {
        return STK_DATA_D3;
    }
    private static final int SONY_DTF = (int)46L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.SONY_DTF = 46
     * }
     */
    public static int SONY_DTF() {
        return SONY_DTF;
    }
    private static final int DV_6mm = (int)47L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.DV_6mm = 47
     * }
     */
    public static int DV_6mm() {
        return DV_6mm;
    }
    private static final int DMI = (int)48L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.DMI = 48
     * }
     */
    public static int DMI() {
        return DMI;
    }
    private static final int SONY_D2 = (int)49L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.SONY_D2 = 49
     * }
     */
    public static int SONY_D2() {
        return SONY_D2;
    }
    private static final int CLEANER_CARTRIDGE = (int)50L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.CLEANER_CARTRIDGE = 50
     * }
     */
    public static int CLEANER_CARTRIDGE() {
        return CLEANER_CARTRIDGE;
    }
    private static final int CD_ROM = (int)51L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.CD_ROM = 51
     * }
     */
    public static int CD_ROM() {
        return CD_ROM;
    }
    private static final int CD_R = (int)52L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.CD_R = 52
     * }
     */
    public static int CD_R() {
        return CD_R;
    }
    private static final int CD_RW = (int)53L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.CD_RW = 53
     * }
     */
    public static int CD_RW() {
        return CD_RW;
    }
    private static final int DVD_ROM = (int)54L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.DVD_ROM = 54
     * }
     */
    public static int DVD_ROM() {
        return DVD_ROM;
    }
    private static final int DVD_R = (int)55L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.DVD_R = 55
     * }
     */
    public static int DVD_R() {
        return DVD_R;
    }
    private static final int DVD_RW = (int)56L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.DVD_RW = 56
     * }
     */
    public static int DVD_RW() {
        return DVD_RW;
    }
    private static final int MO_3_RW = (int)57L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.MO_3_RW = 57
     * }
     */
    public static int MO_3_RW() {
        return MO_3_RW;
    }
    private static final int MO_5_WO = (int)58L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.MO_5_WO = 58
     * }
     */
    public static int MO_5_WO() {
        return MO_5_WO;
    }
    private static final int MO_5_RW = (int)59L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.MO_5_RW = 59
     * }
     */
    public static int MO_5_RW() {
        return MO_5_RW;
    }
    private static final int MO_5_LIMDOW = (int)60L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.MO_5_LIMDOW = 60
     * }
     */
    public static int MO_5_LIMDOW() {
        return MO_5_LIMDOW;
    }
    private static final int PC_5_WO = (int)61L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.PC_5_WO = 61
     * }
     */
    public static int PC_5_WO() {
        return PC_5_WO;
    }
    private static final int PC_5_RW = (int)62L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.PC_5_RW = 62
     * }
     */
    public static int PC_5_RW() {
        return PC_5_RW;
    }
    private static final int PD_5_RW = (int)63L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.PD_5_RW = 63
     * }
     */
    public static int PD_5_RW() {
        return PD_5_RW;
    }
    private static final int ABL_5_WO = (int)64L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.ABL_5_WO = 64
     * }
     */
    public static int ABL_5_WO() {
        return ABL_5_WO;
    }
    private static final int PINNACLE_APEX_5_RW = (int)65L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.PINNACLE_APEX_5_RW = 65
     * }
     */
    public static int PINNACLE_APEX_5_RW() {
        return PINNACLE_APEX_5_RW;
    }
    private static final int SONY_12_WO = (int)66L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.SONY_12_WO = 66
     * }
     */
    public static int SONY_12_WO() {
        return SONY_12_WO;
    }
    private static final int PHILIPS_12_WO = (int)67L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.PHILIPS_12_WO = 67
     * }
     */
    public static int PHILIPS_12_WO() {
        return PHILIPS_12_WO;
    }
    private static final int HITACHI_12_WO = (int)68L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.HITACHI_12_WO = 68
     * }
     */
    public static int HITACHI_12_WO() {
        return HITACHI_12_WO;
    }
    private static final int CYGNET_12_WO = (int)69L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.CYGNET_12_WO = 69
     * }
     */
    public static int CYGNET_12_WO() {
        return CYGNET_12_WO;
    }
    private static final int KODAK_14_WO = (int)70L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.KODAK_14_WO = 70
     * }
     */
    public static int KODAK_14_WO() {
        return KODAK_14_WO;
    }
    private static final int MO_NFR_525 = (int)71L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.MO_NFR_525 = 71
     * }
     */
    public static int MO_NFR_525() {
        return MO_NFR_525;
    }
    private static final int NIKON_12_RW = (int)72L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.NIKON_12_RW = 72
     * }
     */
    public static int NIKON_12_RW() {
        return NIKON_12_RW;
    }
    private static final int IOMEGA_ZIP = (int)73L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.IOMEGA_ZIP = 73
     * }
     */
    public static int IOMEGA_ZIP() {
        return IOMEGA_ZIP;
    }
    private static final int IOMEGA_JAZ = (int)74L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.IOMEGA_JAZ = 74
     * }
     */
    public static int IOMEGA_JAZ() {
        return IOMEGA_JAZ;
    }
    private static final int SYQUEST_EZ135 = (int)75L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.SYQUEST_EZ135 = 75
     * }
     */
    public static int SYQUEST_EZ135() {
        return SYQUEST_EZ135;
    }
    private static final int SYQUEST_EZFLYER = (int)76L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.SYQUEST_EZFLYER = 76
     * }
     */
    public static int SYQUEST_EZFLYER() {
        return SYQUEST_EZFLYER;
    }
    private static final int SYQUEST_SYJET = (int)77L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.SYQUEST_SYJET = 77
     * }
     */
    public static int SYQUEST_SYJET() {
        return SYQUEST_SYJET;
    }
    private static final int AVATAR_F2 = (int)78L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.AVATAR_F2 = 78
     * }
     */
    public static int AVATAR_F2() {
        return AVATAR_F2;
    }
    private static final int MP2_8mm = (int)79L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.MP2_8mm = 79
     * }
     */
    public static int MP2_8mm() {
        return MP2_8mm;
    }
    private static final int DST_S = (int)80L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.DST_S = 80
     * }
     */
    public static int DST_S() {
        return DST_S;
    }
    private static final int DST_M = (int)81L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.DST_M = 81
     * }
     */
    public static int DST_M() {
        return DST_M;
    }
    private static final int DST_L = (int)82L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.DST_L = 82
     * }
     */
    public static int DST_L() {
        return DST_L;
    }
    private static final int VXATape_1 = (int)83L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.VXATape_1 = 83
     * }
     */
    public static int VXATape_1() {
        return VXATape_1;
    }
    private static final int VXATape_2 = (int)84L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.VXATape_2 = 84
     * }
     */
    public static int VXATape_2() {
        return VXATape_2;
    }
    private static final int STK_9840 = (int)85L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.STK_9840 = 85
     * }
     */
    public static int STK_9840() {
        return STK_9840;
    }
    private static final int LTO_Ultrium = (int)86L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.LTO_Ultrium = 86
     * }
     */
    public static int LTO_Ultrium() {
        return LTO_Ultrium;
    }
    private static final int LTO_Accelis = (int)87L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.LTO_Accelis = 87
     * }
     */
    public static int LTO_Accelis() {
        return LTO_Accelis;
    }
    private static final int DVD_RAM = (int)88L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.DVD_RAM = 88
     * }
     */
    public static int DVD_RAM() {
        return DVD_RAM;
    }
    private static final int AIT_8mm = (int)89L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.AIT_8mm = 89
     * }
     */
    public static int AIT_8mm() {
        return AIT_8mm;
    }
    private static final int ADR_1 = (int)90L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.ADR_1 = 90
     * }
     */
    public static int ADR_1() {
        return ADR_1;
    }
    private static final int ADR_2 = (int)91L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.ADR_2 = 91
     * }
     */
    public static int ADR_2() {
        return ADR_2;
    }
    private static final int STK_9940 = (int)92L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.STK_9940 = 92
     * }
     */
    public static int STK_9940() {
        return STK_9940;
    }
    private static final int SAIT = (int)93L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.SAIT = 93
     * }
     */
    public static int SAIT() {
        return SAIT;
    }
    private static final int VXATape = (int)94L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_MEDIA_TYPE.VXATape = 94
     * }
     */
    public static int VXATape() {
        return VXATape;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_MEDIA_TYPE {
     *     DDS_4mm = 32,
     *     MiniQic,
     *     Travan,
     *     QIC,
     *     MP_8mm,
     *     AME_8mm,
     *     AIT1_8mm,
     *     DLT,
     *     NCTP,
     *     IBM_3480,
     *     IBM_3490E,
     *     IBM_Magstar_3590,
     *     IBM_Magstar_MP,
     *     STK_DATA_D3,
     *     SONY_DTF,
     *     DV_6mm,
     *     DMI,
     *     SONY_D2,
     *     CLEANER_CARTRIDGE,
     *     CD_ROM,
     *     CD_R,
     *     CD_RW,
     *     DVD_ROM,
     *     DVD_R,
     *     DVD_RW,
     *     MO_3_RW,
     *     MO_5_WO,
     *     MO_5_RW,
     *     MO_5_LIMDOW,
     *     PC_5_WO,
     *     PC_5_RW,
     *     PD_5_RW,
     *     ABL_5_WO,
     *     PINNACLE_APEX_5_RW,
     *     SONY_12_WO,
     *     PHILIPS_12_WO,
     *     HITACHI_12_WO,
     *     CYGNET_12_WO,
     *     KODAK_14_WO,
     *     MO_NFR_525,
     *     NIKON_12_RW,
     *     IOMEGA_ZIP,
     *     IOMEGA_JAZ,
     *     SYQUEST_EZ135,
     *     SYQUEST_EZFLYER,
     *     SYQUEST_SYJET,
     *     AVATAR_F2,
     *     MP2_8mm,
     *     DST_S,
     *     DST_M,
     *     DST_L,
     *     VXATape_1,
     *     VXATape_2,
     *     STK_9840,
     *     LTO_Ultrium,
     *     LTO_Accelis,
     *     DVD_RAM,
     *     AIT_8mm,
     *     ADR_1,
     *     ADR_2,
     *     STK_9940,
     *     SAIT,
     *     VXATape
     * } *PSTORAGE_MEDIA_TYPE
     * }
     */
    public static final AddressLayout PSTORAGE_MEDIA_TYPE = wgl_h.C_POINTER;
    private static final int BusTypeUnknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_BUS_TYPE.BusTypeUnknown = 0
     * }
     */
    public static int BusTypeUnknown() {
        return BusTypeUnknown;
    }
    private static final int BusTypeScsi = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_BUS_TYPE.BusTypeScsi = 1
     * }
     */
    public static int BusTypeScsi() {
        return BusTypeScsi;
    }
    private static final int BusTypeAtapi = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_BUS_TYPE.BusTypeAtapi = 2
     * }
     */
    public static int BusTypeAtapi() {
        return BusTypeAtapi;
    }
    private static final int BusTypeAta = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_BUS_TYPE.BusTypeAta = 3
     * }
     */
    public static int BusTypeAta() {
        return BusTypeAta;
    }
    private static final int BusType1394 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_BUS_TYPE.BusType1394 = 4
     * }
     */
    public static int BusType1394() {
        return BusType1394;
    }
    private static final int BusTypeSsa = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_BUS_TYPE.BusTypeSsa = 5
     * }
     */
    public static int BusTypeSsa() {
        return BusTypeSsa;
    }
    private static final int BusTypeFibre = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_BUS_TYPE.BusTypeFibre = 6
     * }
     */
    public static int BusTypeFibre() {
        return BusTypeFibre;
    }
    private static final int BusTypeUsb = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_BUS_TYPE.BusTypeUsb = 7
     * }
     */
    public static int BusTypeUsb() {
        return BusTypeUsb;
    }
    private static final int BusTypeRAID = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_BUS_TYPE.BusTypeRAID = 8
     * }
     */
    public static int BusTypeRAID() {
        return BusTypeRAID;
    }
    private static final int BusTypeiScsi = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_BUS_TYPE.BusTypeiScsi = 9
     * }
     */
    public static int BusTypeiScsi() {
        return BusTypeiScsi;
    }
    private static final int BusTypeSas = (int)10L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_BUS_TYPE.BusTypeSas = 10
     * }
     */
    public static int BusTypeSas() {
        return BusTypeSas;
    }
    private static final int BusTypeSata = (int)11L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_BUS_TYPE.BusTypeSata = 11
     * }
     */
    public static int BusTypeSata() {
        return BusTypeSata;
    }
    private static final int BusTypeSd = (int)12L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_BUS_TYPE.BusTypeSd = 12
     * }
     */
    public static int BusTypeSd() {
        return BusTypeSd;
    }
    private static final int BusTypeMmc = (int)13L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_BUS_TYPE.BusTypeMmc = 13
     * }
     */
    public static int BusTypeMmc() {
        return BusTypeMmc;
    }
    private static final int BusTypeVirtual = (int)14L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_BUS_TYPE.BusTypeVirtual = 14
     * }
     */
    public static int BusTypeVirtual() {
        return BusTypeVirtual;
    }
    private static final int BusTypeFileBackedVirtual = (int)15L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_BUS_TYPE.BusTypeFileBackedVirtual = 15
     * }
     */
    public static int BusTypeFileBackedVirtual() {
        return BusTypeFileBackedVirtual;
    }
    private static final int BusTypeSpaces = (int)16L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_BUS_TYPE.BusTypeSpaces = 16
     * }
     */
    public static int BusTypeSpaces() {
        return BusTypeSpaces;
    }
    private static final int BusTypeNvme = (int)17L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_BUS_TYPE.BusTypeNvme = 17
     * }
     */
    public static int BusTypeNvme() {
        return BusTypeNvme;
    }
    private static final int BusTypeSCM = (int)18L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_BUS_TYPE.BusTypeSCM = 18
     * }
     */
    public static int BusTypeSCM() {
        return BusTypeSCM;
    }
    private static final int BusTypeUfs = (int)19L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_BUS_TYPE.BusTypeUfs = 19
     * }
     */
    public static int BusTypeUfs() {
        return BusTypeUfs;
    }
    private static final int BusTypeMax = (int)20L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_BUS_TYPE.BusTypeMax = 20
     * }
     */
    public static int BusTypeMax() {
        return BusTypeMax;
    }
    private static final int BusTypeMaxReserved = (int)127L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_BUS_TYPE.BusTypeMaxReserved = 127
     * }
     */
    public static int BusTypeMaxReserved() {
        return BusTypeMaxReserved;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_BUS_TYPE {
     *     BusTypeUnknown = 0,
     *     BusTypeScsi,
     *     BusTypeAtapi,
     *     BusTypeAta,
     *     BusType1394,
     *     BusTypeSsa,
     *     BusTypeFibre,
     *     BusTypeUsb,
     *     BusTypeRAID,
     *     BusTypeiScsi,
     *     BusTypeSas,
     *     BusTypeSata,
     *     BusTypeSd,
     *     BusTypeMmc,
     *     BusTypeVirtual,
     *     BusTypeFileBackedVirtual,
     *     BusTypeSpaces,
     *     BusTypeNvme,
     *     BusTypeSCM,
     *     BusTypeUfs,
     *     BusTypeMax,
     *     BusTypeMaxReserved = 127
     * } *PSTORAGE_BUS_TYPE
     * }
     */
    public static final AddressLayout PSTORAGE_BUS_TYPE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_MEDIA_INFO {
     *     union {
     *         struct {
     *             LARGE_INTEGER Cylinders;
     *             STORAGE_MEDIA_TYPE MediaType;
     *             DWORD TracksPerCylinder;
     *             DWORD SectorsPerTrack;
     *             DWORD BytesPerSector;
     *             DWORD NumberMediaSides;
     *             DWORD MediaCharacteristics;
     *         } DiskInfo;
     *         struct {
     *             LARGE_INTEGER Cylinders;
     *             STORAGE_MEDIA_TYPE MediaType;
     *             DWORD TracksPerCylinder;
     *             DWORD SectorsPerTrack;
     *             DWORD BytesPerSector;
     *             DWORD NumberMediaSides;
     *             DWORD MediaCharacteristics;
     *         } RemovableDiskInfo;
     *         struct {
     *             STORAGE_MEDIA_TYPE MediaType;
     *             DWORD MediaCharacteristics;
     *             DWORD CurrentBlockSize;
     *             STORAGE_BUS_TYPE BusType;
     *             union {
     *                 struct {
     *                     BYTE MediumType;
     *                     BYTE DensityCode;
     *                 } ScsiInformation;
     *             } BusSpecificData;
     *         } TapeInfo;
     *     } DeviceSpecific;
     * } *PDEVICE_MEDIA_INFO
     * }
     */
    public static final AddressLayout PDEVICE_MEDIA_INFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _GET_MEDIA_TYPES {
     *     DWORD DeviceType;
     *     DWORD MediaInfoCount;
     *     DEVICE_MEDIA_INFO MediaInfo[1];
     * } *PGET_MEDIA_TYPES
     * }
     */
    public static final AddressLayout PGET_MEDIA_TYPES = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_PREDICT_FAILURE {
     *     DWORD PredictFailure;
     *     BYTE VendorSpecific[512];
     * } *PSTORAGE_PREDICT_FAILURE
     * }
     */
    public static final AddressLayout PSTORAGE_PREDICT_FAILURE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_FAILURE_PREDICTION_CONFIG {
     *     DWORD Version;
     *     DWORD Size;
     *     BOOLEAN Set;
     *     BOOLEAN Enabled;
     *     WORD Reserved;
     * } *PSTORAGE_FAILURE_PREDICTION_CONFIG
     * }
     */
    public static final AddressLayout PSTORAGE_FAILURE_PREDICTION_CONFIG = wgl_h.C_POINTER;
    private static final int PropertyStandardQuery = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_QUERY_TYPE.PropertyStandardQuery = 0
     * }
     */
    public static int PropertyStandardQuery() {
        return PropertyStandardQuery;
    }
    private static final int PropertyExistsQuery = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_QUERY_TYPE.PropertyExistsQuery = 1
     * }
     */
    public static int PropertyExistsQuery() {
        return PropertyExistsQuery;
    }
    private static final int PropertyMaskQuery = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_QUERY_TYPE.PropertyMaskQuery = 2
     * }
     */
    public static int PropertyMaskQuery() {
        return PropertyMaskQuery;
    }
    private static final int PropertyQueryMaxDefined = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_QUERY_TYPE.PropertyQueryMaxDefined = 3
     * }
     */
    public static int PropertyQueryMaxDefined() {
        return PropertyQueryMaxDefined;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_QUERY_TYPE {
     *     PropertyStandardQuery = 0,
     *     PropertyExistsQuery,
     *     PropertyMaskQuery,
     *     PropertyQueryMaxDefined
     * } *PSTORAGE_QUERY_TYPE
     * }
     */
    public static final AddressLayout PSTORAGE_QUERY_TYPE = wgl_h.C_POINTER;
    private static final int PropertyStandardSet = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_SET_TYPE.PropertyStandardSet = 0
     * }
     */
    public static int PropertyStandardSet() {
        return PropertyStandardSet;
    }
    private static final int PropertyExistsSet = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_SET_TYPE.PropertyExistsSet = 1
     * }
     */
    public static int PropertyExistsSet() {
        return PropertyExistsSet;
    }
    private static final int PropertySetMaxDefined = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_SET_TYPE.PropertySetMaxDefined = 2
     * }
     */
    public static int PropertySetMaxDefined() {
        return PropertySetMaxDefined;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_SET_TYPE {
     *     PropertyStandardSet = 0,
     *     PropertyExistsSet,
     *     PropertySetMaxDefined
     * } *PSTORAGE_SET_TYPE
     * }
     */
    public static final AddressLayout PSTORAGE_SET_TYPE = wgl_h.C_POINTER;
    private static final int StorageDeviceProperty = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROPERTY_ID.StorageDeviceProperty = 0
     * }
     */
    public static int StorageDeviceProperty() {
        return StorageDeviceProperty;
    }
    private static final int StorageAdapterProperty = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROPERTY_ID.StorageAdapterProperty = 1
     * }
     */
    public static int StorageAdapterProperty() {
        return StorageAdapterProperty;
    }
    private static final int StorageDeviceIdProperty = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROPERTY_ID.StorageDeviceIdProperty = 2
     * }
     */
    public static int StorageDeviceIdProperty() {
        return StorageDeviceIdProperty;
    }
    private static final int StorageDeviceUniqueIdProperty = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROPERTY_ID.StorageDeviceUniqueIdProperty = 3
     * }
     */
    public static int StorageDeviceUniqueIdProperty() {
        return StorageDeviceUniqueIdProperty;
    }
    private static final int StorageDeviceWriteCacheProperty = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROPERTY_ID.StorageDeviceWriteCacheProperty = 4
     * }
     */
    public static int StorageDeviceWriteCacheProperty() {
        return StorageDeviceWriteCacheProperty;
    }
    private static final int StorageMiniportProperty = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROPERTY_ID.StorageMiniportProperty = 5
     * }
     */
    public static int StorageMiniportProperty() {
        return StorageMiniportProperty;
    }
    private static final int StorageAccessAlignmentProperty = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROPERTY_ID.StorageAccessAlignmentProperty = 6
     * }
     */
    public static int StorageAccessAlignmentProperty() {
        return StorageAccessAlignmentProperty;
    }
    private static final int StorageDeviceSeekPenaltyProperty = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROPERTY_ID.StorageDeviceSeekPenaltyProperty = 7
     * }
     */
    public static int StorageDeviceSeekPenaltyProperty() {
        return StorageDeviceSeekPenaltyProperty;
    }
    private static final int StorageDeviceTrimProperty = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROPERTY_ID.StorageDeviceTrimProperty = 8
     * }
     */
    public static int StorageDeviceTrimProperty() {
        return StorageDeviceTrimProperty;
    }
    private static final int StorageDeviceWriteAggregationProperty = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROPERTY_ID.StorageDeviceWriteAggregationProperty = 9
     * }
     */
    public static int StorageDeviceWriteAggregationProperty() {
        return StorageDeviceWriteAggregationProperty;
    }
    private static final int StorageDeviceDeviceTelemetryProperty = (int)10L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROPERTY_ID.StorageDeviceDeviceTelemetryProperty = 10
     * }
     */
    public static int StorageDeviceDeviceTelemetryProperty() {
        return StorageDeviceDeviceTelemetryProperty;
    }
    private static final int StorageDeviceLBProvisioningProperty = (int)11L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROPERTY_ID.StorageDeviceLBProvisioningProperty = 11
     * }
     */
    public static int StorageDeviceLBProvisioningProperty() {
        return StorageDeviceLBProvisioningProperty;
    }
    private static final int StorageDevicePowerProperty = (int)12L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROPERTY_ID.StorageDevicePowerProperty = 12
     * }
     */
    public static int StorageDevicePowerProperty() {
        return StorageDevicePowerProperty;
    }
    private static final int StorageDeviceCopyOffloadProperty = (int)13L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROPERTY_ID.StorageDeviceCopyOffloadProperty = 13
     * }
     */
    public static int StorageDeviceCopyOffloadProperty() {
        return StorageDeviceCopyOffloadProperty;
    }
    private static final int StorageDeviceResiliencyProperty = (int)14L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROPERTY_ID.StorageDeviceResiliencyProperty = 14
     * }
     */
    public static int StorageDeviceResiliencyProperty() {
        return StorageDeviceResiliencyProperty;
    }
    private static final int StorageDeviceMediumProductType = (int)15L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROPERTY_ID.StorageDeviceMediumProductType = 15
     * }
     */
    public static int StorageDeviceMediumProductType() {
        return StorageDeviceMediumProductType;
    }
    private static final int StorageAdapterRpmbProperty = (int)16L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROPERTY_ID.StorageAdapterRpmbProperty = 16
     * }
     */
    public static int StorageAdapterRpmbProperty() {
        return StorageAdapterRpmbProperty;
    }
    private static final int StorageAdapterCryptoProperty = (int)17L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROPERTY_ID.StorageAdapterCryptoProperty = 17
     * }
     */
    public static int StorageAdapterCryptoProperty() {
        return StorageAdapterCryptoProperty;
    }
    private static final int StorageDeviceIoCapabilityProperty = (int)48L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROPERTY_ID.StorageDeviceIoCapabilityProperty = 48
     * }
     */
    public static int StorageDeviceIoCapabilityProperty() {
        return StorageDeviceIoCapabilityProperty;
    }
    private static final int StorageAdapterProtocolSpecificProperty = (int)49L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROPERTY_ID.StorageAdapterProtocolSpecificProperty = 49
     * }
     */
    public static int StorageAdapterProtocolSpecificProperty() {
        return StorageAdapterProtocolSpecificProperty;
    }
    private static final int StorageDeviceProtocolSpecificProperty = (int)50L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROPERTY_ID.StorageDeviceProtocolSpecificProperty = 50
     * }
     */
    public static int StorageDeviceProtocolSpecificProperty() {
        return StorageDeviceProtocolSpecificProperty;
    }
    private static final int StorageAdapterTemperatureProperty = (int)51L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROPERTY_ID.StorageAdapterTemperatureProperty = 51
     * }
     */
    public static int StorageAdapterTemperatureProperty() {
        return StorageAdapterTemperatureProperty;
    }
    private static final int StorageDeviceTemperatureProperty = (int)52L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROPERTY_ID.StorageDeviceTemperatureProperty = 52
     * }
     */
    public static int StorageDeviceTemperatureProperty() {
        return StorageDeviceTemperatureProperty;
    }
    private static final int StorageAdapterPhysicalTopologyProperty = (int)53L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROPERTY_ID.StorageAdapterPhysicalTopologyProperty = 53
     * }
     */
    public static int StorageAdapterPhysicalTopologyProperty() {
        return StorageAdapterPhysicalTopologyProperty;
    }
    private static final int StorageDevicePhysicalTopologyProperty = (int)54L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROPERTY_ID.StorageDevicePhysicalTopologyProperty = 54
     * }
     */
    public static int StorageDevicePhysicalTopologyProperty() {
        return StorageDevicePhysicalTopologyProperty;
    }
    private static final int StorageDeviceAttributesProperty = (int)55L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROPERTY_ID.StorageDeviceAttributesProperty = 55
     * }
     */
    public static int StorageDeviceAttributesProperty() {
        return StorageDeviceAttributesProperty;
    }
    private static final int StorageDeviceManagementStatus = (int)56L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROPERTY_ID.StorageDeviceManagementStatus = 56
     * }
     */
    public static int StorageDeviceManagementStatus() {
        return StorageDeviceManagementStatus;
    }
    private static final int StorageAdapterSerialNumberProperty = (int)57L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROPERTY_ID.StorageAdapterSerialNumberProperty = 57
     * }
     */
    public static int StorageAdapterSerialNumberProperty() {
        return StorageAdapterSerialNumberProperty;
    }
    private static final int StorageDeviceLocationProperty = (int)58L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROPERTY_ID.StorageDeviceLocationProperty = 58
     * }
     */
    public static int StorageDeviceLocationProperty() {
        return StorageDeviceLocationProperty;
    }
    private static final int StorageDeviceNumaProperty = (int)59L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROPERTY_ID.StorageDeviceNumaProperty = 59
     * }
     */
    public static int StorageDeviceNumaProperty() {
        return StorageDeviceNumaProperty;
    }
    private static final int StorageDeviceZonedDeviceProperty = (int)60L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROPERTY_ID.StorageDeviceZonedDeviceProperty = 60
     * }
     */
    public static int StorageDeviceZonedDeviceProperty() {
        return StorageDeviceZonedDeviceProperty;
    }
    private static final int StorageDeviceUnsafeShutdownCount = (int)61L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROPERTY_ID.StorageDeviceUnsafeShutdownCount = 61
     * }
     */
    public static int StorageDeviceUnsafeShutdownCount() {
        return StorageDeviceUnsafeShutdownCount;
    }
    private static final int StorageDeviceEnduranceProperty = (int)62L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROPERTY_ID.StorageDeviceEnduranceProperty = 62
     * }
     */
    public static int StorageDeviceEnduranceProperty() {
        return StorageDeviceEnduranceProperty;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_PROPERTY_ID {
     *     StorageDeviceProperty = 0,
     *     StorageAdapterProperty,
     *     StorageDeviceIdProperty,
     *     StorageDeviceUniqueIdProperty,
     *     StorageDeviceWriteCacheProperty,
     *     StorageMiniportProperty,
     *     StorageAccessAlignmentProperty,
     *     StorageDeviceSeekPenaltyProperty,
     *     StorageDeviceTrimProperty,
     *     StorageDeviceWriteAggregationProperty,
     *     StorageDeviceDeviceTelemetryProperty,
     *     StorageDeviceLBProvisioningProperty,
     *     StorageDevicePowerProperty,
     *     StorageDeviceCopyOffloadProperty,
     *     StorageDeviceResiliencyProperty,
     *     StorageDeviceMediumProductType,
     *     StorageAdapterRpmbProperty,
     *     StorageAdapterCryptoProperty,
     *     StorageDeviceIoCapabilityProperty = 48,
     *     StorageAdapterProtocolSpecificProperty,
     *     StorageDeviceProtocolSpecificProperty,
     *     StorageAdapterTemperatureProperty,
     *     StorageDeviceTemperatureProperty,
     *     StorageAdapterPhysicalTopologyProperty,
     *     StorageDevicePhysicalTopologyProperty,
     *     StorageDeviceAttributesProperty,
     *     StorageDeviceManagementStatus,
     *     StorageAdapterSerialNumberProperty,
     *     StorageDeviceLocationProperty,
     *     StorageDeviceNumaProperty,
     *     StorageDeviceZonedDeviceProperty,
     *     StorageDeviceUnsafeShutdownCount,
     *     StorageDeviceEnduranceProperty
     * } *PSTORAGE_PROPERTY_ID
     * }
     */
    public static final AddressLayout PSTORAGE_PROPERTY_ID = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_PROPERTY_QUERY {
     *     STORAGE_PROPERTY_ID PropertyId;
     *     STORAGE_QUERY_TYPE QueryType;
     *     BYTE AdditionalParameters[1];
     * } *PSTORAGE_PROPERTY_QUERY
     * }
     */
    public static final AddressLayout PSTORAGE_PROPERTY_QUERY = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_PROPERTY_SET {
     *     STORAGE_PROPERTY_ID PropertyId;
     *     STORAGE_SET_TYPE SetType;
     *     BYTE AdditionalParameters[1];
     * } *PSTORAGE_PROPERTY_SET
     * }
     */
    public static final AddressLayout PSTORAGE_PROPERTY_SET = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_DESCRIPTOR_HEADER {
     *     DWORD Version;
     *     DWORD Size;
     * } *PSTORAGE_DESCRIPTOR_HEADER
     * }
     */
    public static final AddressLayout PSTORAGE_DESCRIPTOR_HEADER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_DEVICE_DESCRIPTOR {
     *     DWORD Version;
     *     DWORD Size;
     *     BYTE DeviceType;
     *     BYTE DeviceTypeModifier;
     *     BOOLEAN RemovableMedia;
     *     BOOLEAN CommandQueueing;
     *     DWORD VendorIdOffset;
     *     DWORD ProductIdOffset;
     *     DWORD ProductRevisionOffset;
     *     DWORD SerialNumberOffset;
     *     STORAGE_BUS_TYPE BusType;
     *     DWORD RawPropertiesLength;
     *     BYTE RawDeviceProperties[1];
     * } *PSTORAGE_DEVICE_DESCRIPTOR
     * }
     */
    public static final AddressLayout PSTORAGE_DEVICE_DESCRIPTOR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_ADAPTER_DESCRIPTOR {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD MaximumTransferLength;
     *     DWORD MaximumPhysicalPages;
     *     DWORD AlignmentMask;
     *     BOOLEAN AdapterUsesPio;
     *     BOOLEAN AdapterScansDown;
     *     BOOLEAN CommandQueueing;
     *     BOOLEAN AcceleratedTransfer;
     *     BYTE BusType;
     *     WORD BusMajorVersion;
     *     WORD BusMinorVersion;
     *     BYTE SrbType;
     *     BYTE AddressType;
     * } *PSTORAGE_ADAPTER_DESCRIPTOR
     * }
     */
    public static final AddressLayout PSTORAGE_ADAPTER_DESCRIPTOR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD BytesPerCacheLine;
     *     DWORD BytesOffsetForCacheAlignment;
     *     DWORD BytesPerLogicalSector;
     *     DWORD BytesPerPhysicalSector;
     *     DWORD BytesOffsetForSectorAlignment;
     * } *PSTORAGE_ACCESS_ALIGNMENT_DESCRIPTOR
     * }
     */
    public static final AddressLayout PSTORAGE_ACCESS_ALIGNMENT_DESCRIPTOR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD MediumProductType;
     * } *PSTORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR
     * }
     */
    public static final AddressLayout PSTORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR = wgl_h.C_POINTER;
    private static final int StoragePortCodeSetReserved = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PORT_CODE_SET.StoragePortCodeSetReserved = 0
     * }
     */
    public static int StoragePortCodeSetReserved() {
        return StoragePortCodeSetReserved;
    }
    private static final int StoragePortCodeSetStorport = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PORT_CODE_SET.StoragePortCodeSetStorport = 1
     * }
     */
    public static int StoragePortCodeSetStorport() {
        return StoragePortCodeSetStorport;
    }
    private static final int StoragePortCodeSetSCSIport = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PORT_CODE_SET.StoragePortCodeSetSCSIport = 2
     * }
     */
    public static int StoragePortCodeSetSCSIport() {
        return StoragePortCodeSetSCSIport;
    }
    private static final int StoragePortCodeSetSpaceport = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PORT_CODE_SET.StoragePortCodeSetSpaceport = 3
     * }
     */
    public static int StoragePortCodeSetSpaceport() {
        return StoragePortCodeSetSpaceport;
    }
    private static final int StoragePortCodeSetATAport = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PORT_CODE_SET.StoragePortCodeSetATAport = 4
     * }
     */
    public static int StoragePortCodeSetATAport() {
        return StoragePortCodeSetATAport;
    }
    private static final int StoragePortCodeSetUSBport = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PORT_CODE_SET.StoragePortCodeSetUSBport = 5
     * }
     */
    public static int StoragePortCodeSetUSBport() {
        return StoragePortCodeSetUSBport;
    }
    private static final int StoragePortCodeSetSBP2port = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PORT_CODE_SET.StoragePortCodeSetSBP2port = 6
     * }
     */
    public static int StoragePortCodeSetSBP2port() {
        return StoragePortCodeSetSBP2port;
    }
    private static final int StoragePortCodeSetSDport = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PORT_CODE_SET.StoragePortCodeSetSDport = 7
     * }
     */
    public static int StoragePortCodeSetSDport() {
        return StoragePortCodeSetSDport;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_PORT_CODE_SET {
     *     StoragePortCodeSetReserved = 0,
     *     StoragePortCodeSetStorport = 1,
     *     StoragePortCodeSetSCSIport = 2,
     *     StoragePortCodeSetSpaceport = 3,
     *     StoragePortCodeSetATAport = 4,
     *     StoragePortCodeSetUSBport = 5,
     *     StoragePortCodeSetSBP2port = 6,
     *     StoragePortCodeSetSDport = 7
     * } *PSTORAGE_PORT_CODE_SET
     * }
     */
    public static final AddressLayout PSTORAGE_PORT_CODE_SET = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_MINIPORT_DESCRIPTOR {
     *     DWORD Version;
     *     DWORD Size;
     *     STORAGE_PORT_CODE_SET Portdriver;
     *     BOOLEAN LUNResetSupported;
     *     BOOLEAN TargetResetSupported;
     *     WORD IoTimeoutValue;
     *     BOOLEAN ExtraIoInfoSupported;
     *     BYTE Reserved0[3];
     *     DWORD Reserved1;
     * } *PSTORAGE_MINIPORT_DESCRIPTOR
     * }
     */
    public static final AddressLayout PSTORAGE_MINIPORT_DESCRIPTOR = wgl_h.C_POINTER;
    private static final int StorageIdCodeSetReserved = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_IDENTIFIER_CODE_SET.StorageIdCodeSetReserved = 0
     * }
     */
    public static int StorageIdCodeSetReserved() {
        return StorageIdCodeSetReserved;
    }
    private static final int StorageIdCodeSetBinary = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_IDENTIFIER_CODE_SET.StorageIdCodeSetBinary = 1
     * }
     */
    public static int StorageIdCodeSetBinary() {
        return StorageIdCodeSetBinary;
    }
    private static final int StorageIdCodeSetAscii = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_IDENTIFIER_CODE_SET.StorageIdCodeSetAscii = 2
     * }
     */
    public static int StorageIdCodeSetAscii() {
        return StorageIdCodeSetAscii;
    }
    private static final int StorageIdCodeSetUtf8 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_IDENTIFIER_CODE_SET.StorageIdCodeSetUtf8 = 3
     * }
     */
    public static int StorageIdCodeSetUtf8() {
        return StorageIdCodeSetUtf8;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_IDENTIFIER_CODE_SET {
     *     StorageIdCodeSetReserved = 0,
     *     StorageIdCodeSetBinary = 1,
     *     StorageIdCodeSetAscii = 2,
     *     StorageIdCodeSetUtf8 = 3
     * } *PSTORAGE_IDENTIFIER_CODE_SET
     * }
     */
    public static final AddressLayout PSTORAGE_IDENTIFIER_CODE_SET = wgl_h.C_POINTER;
    private static final int StorageIdTypeVendorSpecific = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_IDENTIFIER_TYPE.StorageIdTypeVendorSpecific = 0
     * }
     */
    public static int StorageIdTypeVendorSpecific() {
        return StorageIdTypeVendorSpecific;
    }
    private static final int StorageIdTypeVendorId = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_IDENTIFIER_TYPE.StorageIdTypeVendorId = 1
     * }
     */
    public static int StorageIdTypeVendorId() {
        return StorageIdTypeVendorId;
    }
    private static final int StorageIdTypeEUI64 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_IDENTIFIER_TYPE.StorageIdTypeEUI64 = 2
     * }
     */
    public static int StorageIdTypeEUI64() {
        return StorageIdTypeEUI64;
    }
    private static final int StorageIdTypeFCPHName = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_IDENTIFIER_TYPE.StorageIdTypeFCPHName = 3
     * }
     */
    public static int StorageIdTypeFCPHName() {
        return StorageIdTypeFCPHName;
    }
    private static final int StorageIdTypePortRelative = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_IDENTIFIER_TYPE.StorageIdTypePortRelative = 4
     * }
     */
    public static int StorageIdTypePortRelative() {
        return StorageIdTypePortRelative;
    }
    private static final int StorageIdTypeTargetPortGroup = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_IDENTIFIER_TYPE.StorageIdTypeTargetPortGroup = 5
     * }
     */
    public static int StorageIdTypeTargetPortGroup() {
        return StorageIdTypeTargetPortGroup;
    }
    private static final int StorageIdTypeLogicalUnitGroup = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_IDENTIFIER_TYPE.StorageIdTypeLogicalUnitGroup = 6
     * }
     */
    public static int StorageIdTypeLogicalUnitGroup() {
        return StorageIdTypeLogicalUnitGroup;
    }
    private static final int StorageIdTypeMD5LogicalUnitIdentifier = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_IDENTIFIER_TYPE.StorageIdTypeMD5LogicalUnitIdentifier = 7
     * }
     */
    public static int StorageIdTypeMD5LogicalUnitIdentifier() {
        return StorageIdTypeMD5LogicalUnitIdentifier;
    }
    private static final int StorageIdTypeScsiNameString = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_IDENTIFIER_TYPE.StorageIdTypeScsiNameString = 8
     * }
     */
    public static int StorageIdTypeScsiNameString() {
        return StorageIdTypeScsiNameString;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_IDENTIFIER_TYPE {
     *     StorageIdTypeVendorSpecific = 0,
     *     StorageIdTypeVendorId = 1,
     *     StorageIdTypeEUI64 = 2,
     *     StorageIdTypeFCPHName = 3,
     *     StorageIdTypePortRelative = 4,
     *     StorageIdTypeTargetPortGroup = 5,
     *     StorageIdTypeLogicalUnitGroup = 6,
     *     StorageIdTypeMD5LogicalUnitIdentifier = 7,
     *     StorageIdTypeScsiNameString = 8
     * } *PSTORAGE_IDENTIFIER_TYPE
     * }
     */
    public static final AddressLayout PSTORAGE_IDENTIFIER_TYPE = wgl_h.C_POINTER;
    private static final int StorageIdNAAFormatIEEEExtended = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ID_NAA_FORMAT.StorageIdNAAFormatIEEEExtended = 2
     * }
     */
    public static int StorageIdNAAFormatIEEEExtended() {
        return StorageIdNAAFormatIEEEExtended;
    }
    private static final int StorageIdNAAFormatIEEERegistered = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ID_NAA_FORMAT.StorageIdNAAFormatIEEERegistered = 3
     * }
     */
    public static int StorageIdNAAFormatIEEERegistered() {
        return StorageIdNAAFormatIEEERegistered;
    }
    private static final int StorageIdNAAFormatIEEEERegisteredExtended = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ID_NAA_FORMAT.StorageIdNAAFormatIEEEERegisteredExtended = 5
     * }
     */
    public static int StorageIdNAAFormatIEEEERegisteredExtended() {
        return StorageIdNAAFormatIEEEERegisteredExtended;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_ID_NAA_FORMAT {
     *     StorageIdNAAFormatIEEEExtended = 2,
     *     StorageIdNAAFormatIEEERegistered = 3,
     *     StorageIdNAAFormatIEEEERegisteredExtended = 5
     * } *PSTORAGE_ID_NAA_FORMAT
     * }
     */
    public static final AddressLayout PSTORAGE_ID_NAA_FORMAT = wgl_h.C_POINTER;
    private static final int StorageIdAssocDevice = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ASSOCIATION_TYPE.StorageIdAssocDevice = 0
     * }
     */
    public static int StorageIdAssocDevice() {
        return StorageIdAssocDevice;
    }
    private static final int StorageIdAssocPort = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ASSOCIATION_TYPE.StorageIdAssocPort = 1
     * }
     */
    public static int StorageIdAssocPort() {
        return StorageIdAssocPort;
    }
    private static final int StorageIdAssocTarget = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ASSOCIATION_TYPE.StorageIdAssocTarget = 2
     * }
     */
    public static int StorageIdAssocTarget() {
        return StorageIdAssocTarget;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_ASSOCIATION_TYPE {
     *     StorageIdAssocDevice = 0,
     *     StorageIdAssocPort = 1,
     *     StorageIdAssocTarget = 2
     * } *PSTORAGE_ASSOCIATION_TYPE
     * }
     */
    public static final AddressLayout PSTORAGE_ASSOCIATION_TYPE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_IDENTIFIER {
     *     STORAGE_IDENTIFIER_CODE_SET CodeSet;
     *     STORAGE_IDENTIFIER_TYPE Type;
     *     WORD IdentifierSize;
     *     WORD NextOffset;
     *     STORAGE_ASSOCIATION_TYPE Association;
     *     BYTE Identifier[1];
     * } *PSTORAGE_IDENTIFIER
     * }
     */
    public static final AddressLayout PSTORAGE_IDENTIFIER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_DEVICE_ID_DESCRIPTOR {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD NumberOfIdentifiers;
     *     BYTE Identifiers[1];
     * } *PSTORAGE_DEVICE_ID_DESCRIPTOR
     * }
     */
    public static final AddressLayout PSTORAGE_DEVICE_ID_DESCRIPTOR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_SEEK_PENALTY_DESCRIPTOR {
     *     DWORD Version;
     *     DWORD Size;
     *     BOOLEAN IncursSeekPenalty;
     * } *PDEVICE_SEEK_PENALTY_DESCRIPTOR
     * }
     */
    public static final AddressLayout PDEVICE_SEEK_PENALTY_DESCRIPTOR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_WRITE_AGGREGATION_DESCRIPTOR {
     *     DWORD Version;
     *     DWORD Size;
     *     BOOLEAN BenefitsFromWriteAggregation;
     * } *PDEVICE_WRITE_AGGREGATION_DESCRIPTOR
     * }
     */
    public static final AddressLayout PDEVICE_WRITE_AGGREGATION_DESCRIPTOR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_TRIM_DESCRIPTOR {
     *     DWORD Version;
     *     DWORD Size;
     *     BOOLEAN TrimEnabled;
     * } *PDEVICE_TRIM_DESCRIPTOR
     * }
     */
    public static final AddressLayout PDEVICE_TRIM_DESCRIPTOR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_LB_PROVISIONING_DESCRIPTOR {
     *     DWORD Version;
     *     DWORD Size;
     *     BYTE ThinProvisioningEnabled : 1;
     *     BYTE ThinProvisioningReadZeros : 1;
     *     BYTE AnchorSupported : 3;
     *     BYTE UnmapGranularityAlignmentValid : 1;
     *     BYTE Reserved0 : 2;
     *     BYTE Reserved1[7];
     *     DWORDLONG OptimalUnmapGranularity;
     *     DWORDLONG UnmapGranularityAlignment;
     *     DWORD MaxUnmapLbaCount;
     *     DWORD MaxUnmapBlockDescriptorCount;
     * } *PDEVICE_LB_PROVISIONING_DESCRIPTOR
     * }
     */
    public static final AddressLayout PDEVICE_LB_PROVISIONING_DESCRIPTOR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_LB_PROVISIONING_MAP_RESOURCES {
     *     DWORD Size;
     *     DWORD Version;
     *     BYTE AvailableMappingResourcesValid : 1;
     *     BYTE UsedMappingResourcesValid : 1;
     *     BYTE Reserved0 : 6;
     *     BYTE Reserved1[3];
     *     BYTE AvailableMappingResourcesScope : 2;
     *     BYTE UsedMappingResourcesScope : 2;
     *     BYTE Reserved2 : 4;
     *     BYTE Reserved3[3];
     *     DWORDLONG AvailableMappingResources;
     *     DWORDLONG UsedMappingResources;
     * } *PSTORAGE_LB_PROVISIONING_MAP_RESOURCES
     * }
     */
    public static final AddressLayout PSTORAGE_LB_PROVISIONING_MAP_RESOURCES = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_POWER_DESCRIPTOR {
     *     DWORD Version;
     *     DWORD Size;
     *     BOOLEAN DeviceAttentionSupported;
     *     BOOLEAN AsynchronousNotificationSupported;
     *     BOOLEAN IdlePowerManagementEnabled;
     *     BOOLEAN D3ColdEnabled;
     *     BOOLEAN D3ColdSupported;
     *     BOOLEAN NoVerifyDuringIdlePower;
     *     BYTE Reserved[2];
     *     DWORD IdleTimeoutInMS;
     * } *PDEVICE_POWER_DESCRIPTOR
     * }
     */
    public static final AddressLayout PDEVICE_POWER_DESCRIPTOR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_COPY_OFFLOAD_DESCRIPTOR {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD MaximumTokenLifetime;
     *     DWORD DefaultTokenLifetime;
     *     DWORDLONG MaximumTransferSize;
     *     DWORDLONG OptimalTransferCount;
     *     DWORD MaximumDataDescriptors;
     *     DWORD MaximumTransferLengthPerDescriptor;
     *     DWORD OptimalTransferLengthPerDescriptor;
     *     WORD OptimalTransferLengthGranularity;
     *     BYTE Reserved[2];
     * } *PDEVICE_COPY_OFFLOAD_DESCRIPTOR
     * }
     */
    public static final AddressLayout PDEVICE_COPY_OFFLOAD_DESCRIPTOR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_DEVICE_RESILIENCY_DESCRIPTOR {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD NameOffset;
     *     DWORD NumberOfLogicalCopies;
     *     DWORD NumberOfPhysicalCopies;
     *     DWORD PhysicalDiskRedundancy;
     *     DWORD NumberOfColumns;
     *     DWORD Interleave;
     * } *PSTORAGE_DEVICE_RESILIENCY_DESCRIPTOR
     * }
     */
    public static final AddressLayout PSTORAGE_DEVICE_RESILIENCY_DESCRIPTOR = wgl_h.C_POINTER;
    private static final int StorageRpmbFrameTypeUnknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_RPMB_FRAME_TYPE.StorageRpmbFrameTypeUnknown = 0
     * }
     */
    public static int StorageRpmbFrameTypeUnknown() {
        return StorageRpmbFrameTypeUnknown;
    }
    private static final int StorageRpmbFrameTypeStandard = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_RPMB_FRAME_TYPE.StorageRpmbFrameTypeStandard = 1
     * }
     */
    public static int StorageRpmbFrameTypeStandard() {
        return StorageRpmbFrameTypeStandard;
    }
    private static final int StorageRpmbFrameTypeMax = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_RPMB_FRAME_TYPE.StorageRpmbFrameTypeMax = 2
     * }
     */
    public static int StorageRpmbFrameTypeMax() {
        return StorageRpmbFrameTypeMax;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_RPMB_FRAME_TYPE {
     *     StorageRpmbFrameTypeUnknown = 0,
     *     StorageRpmbFrameTypeStandard,
     *     StorageRpmbFrameTypeMax
     * } *PSTORAGE_RPMB_FRAME_TYPE
     * }
     */
    public static final AddressLayout PSTORAGE_RPMB_FRAME_TYPE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_RPMB_DESCRIPTOR {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD SizeInBytes;
     *     DWORD MaxReliableWriteSizeInBytes;
     *     STORAGE_RPMB_FRAME_TYPE FrameFormat;
     * } *PSTORAGE_RPMB_DESCRIPTOR
     * }
     */
    public static final AddressLayout PSTORAGE_RPMB_DESCRIPTOR = wgl_h.C_POINTER;
    private static final int StorageCryptoAlgorithmUnknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_CRYPTO_ALGORITHM_ID.StorageCryptoAlgorithmUnknown = 0
     * }
     */
    public static int StorageCryptoAlgorithmUnknown() {
        return StorageCryptoAlgorithmUnknown;
    }
    private static final int StorageCryptoAlgorithmXTSAES = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_CRYPTO_ALGORITHM_ID.StorageCryptoAlgorithmXTSAES = 1
     * }
     */
    public static int StorageCryptoAlgorithmXTSAES() {
        return StorageCryptoAlgorithmXTSAES;
    }
    private static final int StorageCryptoAlgorithmBitlockerAESCBC = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_CRYPTO_ALGORITHM_ID.StorageCryptoAlgorithmBitlockerAESCBC = 2
     * }
     */
    public static int StorageCryptoAlgorithmBitlockerAESCBC() {
        return StorageCryptoAlgorithmBitlockerAESCBC;
    }
    private static final int StorageCryptoAlgorithmAESECB = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_CRYPTO_ALGORITHM_ID.StorageCryptoAlgorithmAESECB = 3
     * }
     */
    public static int StorageCryptoAlgorithmAESECB() {
        return StorageCryptoAlgorithmAESECB;
    }
    private static final int StorageCryptoAlgorithmESSIVAESCBC = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_CRYPTO_ALGORITHM_ID.StorageCryptoAlgorithmESSIVAESCBC = 4
     * }
     */
    public static int StorageCryptoAlgorithmESSIVAESCBC() {
        return StorageCryptoAlgorithmESSIVAESCBC;
    }
    private static final int StorageCryptoAlgorithmMax = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_CRYPTO_ALGORITHM_ID.StorageCryptoAlgorithmMax = 5
     * }
     */
    public static int StorageCryptoAlgorithmMax() {
        return StorageCryptoAlgorithmMax;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_CRYPTO_ALGORITHM_ID {
     *     StorageCryptoAlgorithmUnknown = 0,
     *     StorageCryptoAlgorithmXTSAES = 1,
     *     StorageCryptoAlgorithmBitlockerAESCBC,
     *     StorageCryptoAlgorithmAESECB,
     *     StorageCryptoAlgorithmESSIVAESCBC,
     *     StorageCryptoAlgorithmMax
     * } *PSTORAGE_CRYPTO_ALGORITHM_ID
     * }
     */
    public static final AddressLayout PSTORAGE_CRYPTO_ALGORITHM_ID = wgl_h.C_POINTER;
    private static final int StorageCryptoKeySizeUnknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_CRYPTO_KEY_SIZE.StorageCryptoKeySizeUnknown = 0
     * }
     */
    public static int StorageCryptoKeySizeUnknown() {
        return StorageCryptoKeySizeUnknown;
    }
    private static final int StorageCryptoKeySize128Bits = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_CRYPTO_KEY_SIZE.StorageCryptoKeySize128Bits = 1
     * }
     */
    public static int StorageCryptoKeySize128Bits() {
        return StorageCryptoKeySize128Bits;
    }
    private static final int StorageCryptoKeySize192Bits = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_CRYPTO_KEY_SIZE.StorageCryptoKeySize192Bits = 2
     * }
     */
    public static int StorageCryptoKeySize192Bits() {
        return StorageCryptoKeySize192Bits;
    }
    private static final int StorageCryptoKeySize256Bits = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_CRYPTO_KEY_SIZE.StorageCryptoKeySize256Bits = 3
     * }
     */
    public static int StorageCryptoKeySize256Bits() {
        return StorageCryptoKeySize256Bits;
    }
    private static final int StorageCryptoKeySize512Bits = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_CRYPTO_KEY_SIZE.StorageCryptoKeySize512Bits = 4
     * }
     */
    public static int StorageCryptoKeySize512Bits() {
        return StorageCryptoKeySize512Bits;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_CRYPTO_KEY_SIZE {
     *     StorageCryptoKeySizeUnknown = 0,
     *     StorageCryptoKeySize128Bits = 1,
     *     StorageCryptoKeySize192Bits,
     *     StorageCryptoKeySize256Bits,
     *     StorageCryptoKeySize512Bits
     * } *PSTORAGE_CRYPTO_KEY_SIZE
     * }
     */
    public static final AddressLayout PSTORAGE_CRYPTO_KEY_SIZE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_CRYPTO_CAPABILITY {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD CryptoCapabilityIndex;
     *     STORAGE_CRYPTO_ALGORITHM_ID AlgorithmId;
     *     STORAGE_CRYPTO_KEY_SIZE KeySize;
     *     DWORD DataUnitSizeBitmask;
     * } *PSTORAGE_CRYPTO_CAPABILITY
     * }
     */
    public static final AddressLayout PSTORAGE_CRYPTO_CAPABILITY = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_CRYPTO_DESCRIPTOR {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD NumKeysSupported;
     *     DWORD NumCryptoCapabilities;
     *     STORAGE_CRYPTO_CAPABILITY CryptoCapabilities[1];
     * } *PSTORAGE_CRYPTO_DESCRIPTOR
     * }
     */
    public static final AddressLayout PSTORAGE_CRYPTO_DESCRIPTOR = wgl_h.C_POINTER;
    private static final int StorageTierMediaTypeUnspecified = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_TIER_MEDIA_TYPE.StorageTierMediaTypeUnspecified = 0
     * }
     */
    public static int StorageTierMediaTypeUnspecified() {
        return StorageTierMediaTypeUnspecified;
    }
    private static final int StorageTierMediaTypeDisk = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_TIER_MEDIA_TYPE.StorageTierMediaTypeDisk = 1
     * }
     */
    public static int StorageTierMediaTypeDisk() {
        return StorageTierMediaTypeDisk;
    }
    private static final int StorageTierMediaTypeSsd = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_TIER_MEDIA_TYPE.StorageTierMediaTypeSsd = 2
     * }
     */
    public static int StorageTierMediaTypeSsd() {
        return StorageTierMediaTypeSsd;
    }
    private static final int StorageTierMediaTypeScm = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_TIER_MEDIA_TYPE.StorageTierMediaTypeScm = 4
     * }
     */
    public static int StorageTierMediaTypeScm() {
        return StorageTierMediaTypeScm;
    }
    private static final int StorageTierMediaTypeMax = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_TIER_MEDIA_TYPE.StorageTierMediaTypeMax = 5
     * }
     */
    public static int StorageTierMediaTypeMax() {
        return StorageTierMediaTypeMax;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_TIER_MEDIA_TYPE {
     *     StorageTierMediaTypeUnspecified = 0,
     *     StorageTierMediaTypeDisk = 1,
     *     StorageTierMediaTypeSsd = 2,
     *     StorageTierMediaTypeScm = 4,
     *     StorageTierMediaTypeMax
     * } *PSTORAGE_TIER_MEDIA_TYPE
     * }
     */
    public static final AddressLayout PSTORAGE_TIER_MEDIA_TYPE = wgl_h.C_POINTER;
    private static final int StorageTierClassUnspecified = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_TIER_CLASS.StorageTierClassUnspecified = 0
     * }
     */
    public static int StorageTierClassUnspecified() {
        return StorageTierClassUnspecified;
    }
    private static final int StorageTierClassCapacity = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_TIER_CLASS.StorageTierClassCapacity = 1
     * }
     */
    public static int StorageTierClassCapacity() {
        return StorageTierClassCapacity;
    }
    private static final int StorageTierClassPerformance = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_TIER_CLASS.StorageTierClassPerformance = 2
     * }
     */
    public static int StorageTierClassPerformance() {
        return StorageTierClassPerformance;
    }
    private static final int StorageTierClassMax = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_TIER_CLASS.StorageTierClassMax = 3
     * }
     */
    public static int StorageTierClassMax() {
        return StorageTierClassMax;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_TIER_CLASS {
     *     StorageTierClassUnspecified = 0,
     *     StorageTierClassCapacity,
     *     StorageTierClassPerformance,
     *     StorageTierClassMax
     * } *PSTORAGE_TIER_CLASS
     * }
     */
    public static final AddressLayout PSTORAGE_TIER_CLASS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_TIER {
     *     GUID Id;
     *     WCHAR Name[256];
     *     WCHAR Description[256];
     *     DWORDLONG Flags;
     *     DWORDLONG ProvisionedCapacity;
     *     STORAGE_TIER_MEDIA_TYPE MediaType;
     *     STORAGE_TIER_CLASS Class;
     * } *PSTORAGE_TIER
     * }
     */
    public static final AddressLayout PSTORAGE_TIER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_DEVICE_TIERING_DESCRIPTOR {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD Flags;
     *     DWORD TotalNumberOfTiers;
     *     DWORD NumberOfTiersReturned;
     *     STORAGE_TIER Tiers[1];
     * } *PSTORAGE_DEVICE_TIERING_DESCRIPTOR
     * }
     */
    public static final AddressLayout PSTORAGE_DEVICE_TIERING_DESCRIPTOR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD NumberOfFaultDomains;
     *     GUID FaultDomainIds[1];
     * } *PSTORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR
     * }
     */
    public static final AddressLayout PSTORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR = wgl_h.C_POINTER;
    private static final int ProtocolTypeUnknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROTOCOL_TYPE.ProtocolTypeUnknown = 0
     * }
     */
    public static int ProtocolTypeUnknown() {
        return ProtocolTypeUnknown;
    }
    private static final int ProtocolTypeScsi = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROTOCOL_TYPE.ProtocolTypeScsi = 1
     * }
     */
    public static int ProtocolTypeScsi() {
        return ProtocolTypeScsi;
    }
    private static final int ProtocolTypeAta = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROTOCOL_TYPE.ProtocolTypeAta = 2
     * }
     */
    public static int ProtocolTypeAta() {
        return ProtocolTypeAta;
    }
    private static final int ProtocolTypeNvme = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROTOCOL_TYPE.ProtocolTypeNvme = 3
     * }
     */
    public static int ProtocolTypeNvme() {
        return ProtocolTypeNvme;
    }
    private static final int ProtocolTypeSd = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROTOCOL_TYPE.ProtocolTypeSd = 4
     * }
     */
    public static int ProtocolTypeSd() {
        return ProtocolTypeSd;
    }
    private static final int ProtocolTypeUfs = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROTOCOL_TYPE.ProtocolTypeUfs = 5
     * }
     */
    public static int ProtocolTypeUfs() {
        return ProtocolTypeUfs;
    }
    private static final int ProtocolTypeProprietary = (int)126L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROTOCOL_TYPE.ProtocolTypeProprietary = 126
     * }
     */
    public static int ProtocolTypeProprietary() {
        return ProtocolTypeProprietary;
    }
    private static final int ProtocolTypeMaxReserved = (int)127L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROTOCOL_TYPE.ProtocolTypeMaxReserved = 127
     * }
     */
    public static int ProtocolTypeMaxReserved() {
        return ProtocolTypeMaxReserved;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_PROTOCOL_TYPE {
     *     ProtocolTypeUnknown = 0,
     *     ProtocolTypeScsi,
     *     ProtocolTypeAta,
     *     ProtocolTypeNvme,
     *     ProtocolTypeSd,
     *     ProtocolTypeUfs,
     *     ProtocolTypeProprietary = 126,
     *     ProtocolTypeMaxReserved = 127
     * } *PSTORAGE_PROTOCOL_TYPE
     * }
     */
    public static final AddressLayout PSTORAGE_PROTOCOL_TYPE = wgl_h.C_POINTER;
    private static final int NVMeDataTypeUnknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROTOCOL_NVME_DATA_TYPE.NVMeDataTypeUnknown = 0
     * }
     */
    public static int NVMeDataTypeUnknown() {
        return NVMeDataTypeUnknown;
    }
    private static final int NVMeDataTypeIdentify = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROTOCOL_NVME_DATA_TYPE.NVMeDataTypeIdentify = 1
     * }
     */
    public static int NVMeDataTypeIdentify() {
        return NVMeDataTypeIdentify;
    }
    private static final int NVMeDataTypeLogPage = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROTOCOL_NVME_DATA_TYPE.NVMeDataTypeLogPage = 2
     * }
     */
    public static int NVMeDataTypeLogPage() {
        return NVMeDataTypeLogPage;
    }
    private static final int NVMeDataTypeFeature = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROTOCOL_NVME_DATA_TYPE.NVMeDataTypeFeature = 3
     * }
     */
    public static int NVMeDataTypeFeature() {
        return NVMeDataTypeFeature;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_PROTOCOL_NVME_DATA_TYPE {
     *     NVMeDataTypeUnknown = 0,
     *     NVMeDataTypeIdentify,
     *     NVMeDataTypeLogPage,
     *     NVMeDataTypeFeature
     * } *PSTORAGE_PROTOCOL_NVME_DATA_TYPE
     * }
     */
    public static final AddressLayout PSTORAGE_PROTOCOL_NVME_DATA_TYPE = wgl_h.C_POINTER;
    private static final int AtaDataTypeUnknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROTOCOL_ATA_DATA_TYPE.AtaDataTypeUnknown = 0
     * }
     */
    public static int AtaDataTypeUnknown() {
        return AtaDataTypeUnknown;
    }
    private static final int AtaDataTypeIdentify = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROTOCOL_ATA_DATA_TYPE.AtaDataTypeIdentify = 1
     * }
     */
    public static int AtaDataTypeIdentify() {
        return AtaDataTypeIdentify;
    }
    private static final int AtaDataTypeLogPage = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROTOCOL_ATA_DATA_TYPE.AtaDataTypeLogPage = 2
     * }
     */
    public static int AtaDataTypeLogPage() {
        return AtaDataTypeLogPage;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_PROTOCOL_ATA_DATA_TYPE {
     *     AtaDataTypeUnknown = 0,
     *     AtaDataTypeIdentify,
     *     AtaDataTypeLogPage
     * } *PSTORAGE_PROTOCOL_ATA_DATA_TYPE
     * }
     */
    public static final AddressLayout PSTORAGE_PROTOCOL_ATA_DATA_TYPE = wgl_h.C_POINTER;
    private static final int UfsDataTypeUnknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROTOCOL_UFS_DATA_TYPE.UfsDataTypeUnknown = 0
     * }
     */
    public static int UfsDataTypeUnknown() {
        return UfsDataTypeUnknown;
    }
    private static final int UfsDataTypeQueryDescriptor = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROTOCOL_UFS_DATA_TYPE.UfsDataTypeQueryDescriptor = 1
     * }
     */
    public static int UfsDataTypeQueryDescriptor() {
        return UfsDataTypeQueryDescriptor;
    }
    private static final int UfsDataTypeMax = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_PROTOCOL_UFS_DATA_TYPE.UfsDataTypeMax = 2
     * }
     */
    public static int UfsDataTypeMax() {
        return UfsDataTypeMax;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_PROTOCOL_UFS_DATA_TYPE {
     *     UfsDataTypeUnknown = 0,
     *     UfsDataTypeQueryDescriptor,
     *     UfsDataTypeMax
     * } *PSTORAGE_PROTOCOL_UFS_DATA_TYPE
     * }
     */
    public static final AddressLayout PSTORAGE_PROTOCOL_UFS_DATA_TYPE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_PROTOCOL_SPECIFIC_DATA {
     *     STORAGE_PROTOCOL_TYPE ProtocolType;
     *     DWORD DataType;
     *     DWORD ProtocolDataRequestValue;
     *     DWORD ProtocolDataRequestSubValue;
     *     DWORD ProtocolDataOffset;
     *     DWORD ProtocolDataLength;
     *     DWORD FixedProtocolReturnData;
     *     DWORD ProtocolDataRequestSubValue2;
     *     DWORD ProtocolDataRequestSubValue3;
     *     DWORD Reserved;
     * } *PSTORAGE_PROTOCOL_SPECIFIC_DATA
     * }
     */
    public static final AddressLayout PSTORAGE_PROTOCOL_SPECIFIC_DATA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_PROTOCOL_SPECIFIC_DATA_EXT {
     *     STORAGE_PROTOCOL_TYPE ProtocolType;
     *     DWORD DataType;
     *     DWORD ProtocolDataValue;
     *     DWORD ProtocolDataSubValue;
     *     DWORD ProtocolDataOffset;
     *     DWORD ProtocolDataLength;
     *     DWORD FixedProtocolReturnData;
     *     DWORD ProtocolDataSubValue2;
     *     DWORD ProtocolDataSubValue3;
     *     DWORD ProtocolDataSubValue4;
     *     DWORD ProtocolDataSubValue5;
     *     DWORD Reserved[5];
     * } *PSTORAGE_PROTOCOL_SPECIFIC_DATA_EXT
     * }
     */
    public static final AddressLayout PSTORAGE_PROTOCOL_SPECIFIC_DATA_EXT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_PROTOCOL_DATA_DESCRIPTOR {
     *     DWORD Version;
     *     DWORD Size;
     *     STORAGE_PROTOCOL_SPECIFIC_DATA ProtocolSpecificData;
     * } *PSTORAGE_PROTOCOL_DATA_DESCRIPTOR
     * }
     */
    public static final AddressLayout PSTORAGE_PROTOCOL_DATA_DESCRIPTOR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_PROTOCOL_DATA_DESCRIPTOR_EXT {
     *     DWORD Version;
     *     DWORD Size;
     *     STORAGE_PROTOCOL_SPECIFIC_DATA_EXT ProtocolSpecificData;
     * } *PSTORAGE_PROTOCOL_DATA_DESCRIPTOR_EXT
     * }
     */
    public static final AddressLayout PSTORAGE_PROTOCOL_DATA_DESCRIPTOR_EXT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_TEMPERATURE_INFO {
     *     WORD Index;
     *     SHORT Temperature;
     *     SHORT OverThreshold;
     *     SHORT UnderThreshold;
     *     BOOLEAN OverThresholdChangable;
     *     BOOLEAN UnderThresholdChangable;
     *     BOOLEAN EventGenerated;
     *     BYTE Reserved0;
     *     DWORD Reserved1;
     * } *PSTORAGE_TEMPERATURE_INFO
     * }
     */
    public static final AddressLayout PSTORAGE_TEMPERATURE_INFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_TEMPERATURE_DATA_DESCRIPTOR {
     *     DWORD Version;
     *     DWORD Size;
     *     SHORT CriticalTemperature;
     *     SHORT WarningTemperature;
     *     WORD InfoCount;
     *     BYTE Reserved0[2];
     *     DWORD Reserved1[2];
     *     STORAGE_TEMPERATURE_INFO TemperatureInfo[1];
     * } *PSTORAGE_TEMPERATURE_DATA_DESCRIPTOR
     * }
     */
    public static final AddressLayout PSTORAGE_TEMPERATURE_DATA_DESCRIPTOR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_TEMPERATURE_THRESHOLD {
     *     DWORD Version;
     *     DWORD Size;
     *     WORD Flags;
     *     WORD Index;
     *     SHORT Threshold;
     *     BOOLEAN OverThreshold;
     *     BYTE Reserved;
     * } *PSTORAGE_TEMPERATURE_THRESHOLD
     * }
     */
    public static final AddressLayout PSTORAGE_TEMPERATURE_THRESHOLD = wgl_h.C_POINTER;
    private static final int FormFactorUnknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DEVICE_FORM_FACTOR.FormFactorUnknown = 0
     * }
     */
    public static int FormFactorUnknown() {
        return FormFactorUnknown;
    }
    private static final int FormFactor3_5 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DEVICE_FORM_FACTOR.FormFactor3_5 = 1
     * }
     */
    public static int FormFactor3_5() {
        return FormFactor3_5;
    }
    private static final int FormFactor2_5 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DEVICE_FORM_FACTOR.FormFactor2_5 = 2
     * }
     */
    public static int FormFactor2_5() {
        return FormFactor2_5;
    }
    private static final int FormFactor1_8 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DEVICE_FORM_FACTOR.FormFactor1_8 = 3
     * }
     */
    public static int FormFactor1_8() {
        return FormFactor1_8;
    }
    private static final int FormFactor1_8Less = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DEVICE_FORM_FACTOR.FormFactor1_8Less = 4
     * }
     */
    public static int FormFactor1_8Less() {
        return FormFactor1_8Less;
    }
    private static final int FormFactorEmbedded = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DEVICE_FORM_FACTOR.FormFactorEmbedded = 5
     * }
     */
    public static int FormFactorEmbedded() {
        return FormFactorEmbedded;
    }
    private static final int FormFactorMemoryCard = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DEVICE_FORM_FACTOR.FormFactorMemoryCard = 6
     * }
     */
    public static int FormFactorMemoryCard() {
        return FormFactorMemoryCard;
    }
    private static final int FormFactormSata = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DEVICE_FORM_FACTOR.FormFactormSata = 7
     * }
     */
    public static int FormFactormSata() {
        return FormFactormSata;
    }
    private static final int FormFactorM_2 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DEVICE_FORM_FACTOR.FormFactorM_2 = 8
     * }
     */
    public static int FormFactorM_2() {
        return FormFactorM_2;
    }
    private static final int FormFactorPCIeBoard = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DEVICE_FORM_FACTOR.FormFactorPCIeBoard = 9
     * }
     */
    public static int FormFactorPCIeBoard() {
        return FormFactorPCIeBoard;
    }
    private static final int FormFactorDimm = (int)10L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DEVICE_FORM_FACTOR.FormFactorDimm = 10
     * }
     */
    public static int FormFactorDimm() {
        return FormFactorDimm;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_DEVICE_FORM_FACTOR {
     *     FormFactorUnknown = 0,
     *     FormFactor3_5,
     *     FormFactor2_5,
     *     FormFactor1_8,
     *     FormFactor1_8Less,
     *     FormFactorEmbedded,
     *     FormFactorMemoryCard,
     *     FormFactormSata,
     *     FormFactorM_2,
     *     FormFactorPCIeBoard,
     *     FormFactorDimm
     * } *PSTORAGE_DEVICE_FORM_FACTOR
     * }
     */
    public static final AddressLayout PSTORAGE_DEVICE_FORM_FACTOR = wgl_h.C_POINTER;
    private static final int HealthStatusUnknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COMPONENT_HEALTH_STATUS.HealthStatusUnknown = 0
     * }
     */
    public static int HealthStatusUnknown() {
        return HealthStatusUnknown;
    }
    private static final int HealthStatusNormal = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COMPONENT_HEALTH_STATUS.HealthStatusNormal = 1
     * }
     */
    public static int HealthStatusNormal() {
        return HealthStatusNormal;
    }
    private static final int HealthStatusThrottled = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COMPONENT_HEALTH_STATUS.HealthStatusThrottled = 2
     * }
     */
    public static int HealthStatusThrottled() {
        return HealthStatusThrottled;
    }
    private static final int HealthStatusWarning = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COMPONENT_HEALTH_STATUS.HealthStatusWarning = 3
     * }
     */
    public static int HealthStatusWarning() {
        return HealthStatusWarning;
    }
    private static final int HealthStatusDisabled = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COMPONENT_HEALTH_STATUS.HealthStatusDisabled = 4
     * }
     */
    public static int HealthStatusDisabled() {
        return HealthStatusDisabled;
    }
    private static final int HealthStatusFailed = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COMPONENT_HEALTH_STATUS.HealthStatusFailed = 5
     * }
     */
    public static int HealthStatusFailed() {
        return HealthStatusFailed;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_COMPONENT_HEALTH_STATUS {
     *     HealthStatusUnknown = 0,
     *     HealthStatusNormal,
     *     HealthStatusThrottled,
     *     HealthStatusWarning,
     *     HealthStatusDisabled,
     *     HealthStatusFailed
     * } *PSTORAGE_COMPONENT_HEALTH_STATUS
     * }
     */
    public static final AddressLayout PSTORAGE_COMPONENT_HEALTH_STATUS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef union _STORAGE_SPEC_VERSION {
     *     struct {
     *         union {
     *             struct {
     *                 BYTE SubMinor;
     *                 BYTE Minor;
     *             };
     *             WORD AsUshort;
     *         } MinorVersion;
     *         WORD MajorVersion;
     *     };
     *     DWORD AsUlong;
     * } *PSTORAGE_SPEC_VERSION
     * }
     */
    public static final AddressLayout PSTORAGE_SPEC_VERSION = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_PHYSICAL_DEVICE_DATA {
     *     DWORD DeviceId;
     *     DWORD Role;
     *     STORAGE_COMPONENT_HEALTH_STATUS HealthStatus;
     *     STORAGE_PROTOCOL_TYPE CommandProtocol;
     *     STORAGE_SPEC_VERSION SpecVersion;
     *     STORAGE_DEVICE_FORM_FACTOR FormFactor;
     *     BYTE Vendor[8];
     *     BYTE Model[40];
     *     BYTE FirmwareRevision[16];
     *     DWORDLONG Capacity;
     *     BYTE PhysicalLocation[32];
     *     DWORD Reserved[2];
     * } *PSTORAGE_PHYSICAL_DEVICE_DATA
     * }
     */
    public static final AddressLayout PSTORAGE_PHYSICAL_DEVICE_DATA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_PHYSICAL_ADAPTER_DATA {
     *     DWORD AdapterId;
     *     STORAGE_COMPONENT_HEALTH_STATUS HealthStatus;
     *     STORAGE_PROTOCOL_TYPE CommandProtocol;
     *     STORAGE_SPEC_VERSION SpecVersion;
     *     BYTE Vendor[8];
     *     BYTE Model[40];
     *     BYTE FirmwareRevision[16];
     *     BYTE PhysicalLocation[32];
     *     BOOLEAN ExpanderConnected;
     *     BYTE Reserved0[3];
     *     DWORD Reserved1[3];
     * } *PSTORAGE_PHYSICAL_ADAPTER_DATA
     * }
     */
    public static final AddressLayout PSTORAGE_PHYSICAL_ADAPTER_DATA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_PHYSICAL_NODE_DATA {
     *     DWORD NodeId;
     *     DWORD AdapterCount;
     *     DWORD AdapterDataLength;
     *     DWORD AdapterDataOffset;
     *     DWORD DeviceCount;
     *     DWORD DeviceDataLength;
     *     DWORD DeviceDataOffset;
     *     DWORD Reserved[3];
     * } *PSTORAGE_PHYSICAL_NODE_DATA
     * }
     */
    public static final AddressLayout PSTORAGE_PHYSICAL_NODE_DATA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD NodeCount;
     *     DWORD Reserved;
     *     STORAGE_PHYSICAL_NODE_DATA Node[1];
     * } *PSTORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR
     * }
     */
    public static final AddressLayout PSTORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD LunMaxIoCount;
     *     DWORD AdapterMaxIoCount;
     * } *PSTORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR
     * }
     */
    public static final AddressLayout PSTORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD64 Attributes;
     * } *PSTORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR
     * }
     */
    public static final AddressLayout PSTORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR = wgl_h.C_POINTER;
    private static final int DiskHealthUnknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DISK_HEALTH_STATUS.DiskHealthUnknown = 0
     * }
     */
    public static int DiskHealthUnknown() {
        return DiskHealthUnknown;
    }
    private static final int DiskHealthUnhealthy = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DISK_HEALTH_STATUS.DiskHealthUnhealthy = 1
     * }
     */
    public static int DiskHealthUnhealthy() {
        return DiskHealthUnhealthy;
    }
    private static final int DiskHealthWarning = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DISK_HEALTH_STATUS.DiskHealthWarning = 2
     * }
     */
    public static int DiskHealthWarning() {
        return DiskHealthWarning;
    }
    private static final int DiskHealthHealthy = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DISK_HEALTH_STATUS.DiskHealthHealthy = 3
     * }
     */
    public static int DiskHealthHealthy() {
        return DiskHealthHealthy;
    }
    private static final int DiskHealthMax = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DISK_HEALTH_STATUS.DiskHealthMax = 4
     * }
     */
    public static int DiskHealthMax() {
        return DiskHealthMax;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_DISK_HEALTH_STATUS {
     *     DiskHealthUnknown = 0,
     *     DiskHealthUnhealthy,
     *     DiskHealthWarning,
     *     DiskHealthHealthy,
     *     DiskHealthMax
     * } *PSTORAGE_DISK_HEALTH_STATUS
     * }
     */
    public static final AddressLayout PSTORAGE_DISK_HEALTH_STATUS = wgl_h.C_POINTER;
    private static final int DiskOpStatusNone = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DISK_OPERATIONAL_STATUS.DiskOpStatusNone = 0
     * }
     */
    public static int DiskOpStatusNone() {
        return DiskOpStatusNone;
    }
    private static final int DiskOpStatusUnknown = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DISK_OPERATIONAL_STATUS.DiskOpStatusUnknown = 1
     * }
     */
    public static int DiskOpStatusUnknown() {
        return DiskOpStatusUnknown;
    }
    private static final int DiskOpStatusOk = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DISK_OPERATIONAL_STATUS.DiskOpStatusOk = 2
     * }
     */
    public static int DiskOpStatusOk() {
        return DiskOpStatusOk;
    }
    private static final int DiskOpStatusPredictingFailure = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DISK_OPERATIONAL_STATUS.DiskOpStatusPredictingFailure = 3
     * }
     */
    public static int DiskOpStatusPredictingFailure() {
        return DiskOpStatusPredictingFailure;
    }
    private static final int DiskOpStatusInService = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DISK_OPERATIONAL_STATUS.DiskOpStatusInService = 4
     * }
     */
    public static int DiskOpStatusInService() {
        return DiskOpStatusInService;
    }
    private static final int DiskOpStatusHardwareError = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DISK_OPERATIONAL_STATUS.DiskOpStatusHardwareError = 5
     * }
     */
    public static int DiskOpStatusHardwareError() {
        return DiskOpStatusHardwareError;
    }
    private static final int DiskOpStatusNotUsable = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DISK_OPERATIONAL_STATUS.DiskOpStatusNotUsable = 6
     * }
     */
    public static int DiskOpStatusNotUsable() {
        return DiskOpStatusNotUsable;
    }
    private static final int DiskOpStatusTransientError = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DISK_OPERATIONAL_STATUS.DiskOpStatusTransientError = 7
     * }
     */
    public static int DiskOpStatusTransientError() {
        return DiskOpStatusTransientError;
    }
    private static final int DiskOpStatusMissing = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DISK_OPERATIONAL_STATUS.DiskOpStatusMissing = 8
     * }
     */
    public static int DiskOpStatusMissing() {
        return DiskOpStatusMissing;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_DISK_OPERATIONAL_STATUS {
     *     DiskOpStatusNone = 0,
     *     DiskOpStatusUnknown,
     *     DiskOpStatusOk,
     *     DiskOpStatusPredictingFailure,
     *     DiskOpStatusInService,
     *     DiskOpStatusHardwareError,
     *     DiskOpStatusNotUsable,
     *     DiskOpStatusTransientError,
     *     DiskOpStatusMissing
     * } *PSTORAGE_DISK_OPERATIONAL_STATUS
     * }
     */
    public static final AddressLayout PSTORAGE_DISK_OPERATIONAL_STATUS = wgl_h.C_POINTER;
    private static final int DiskOpReasonUnknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_OPERATIONAL_STATUS_REASON.DiskOpReasonUnknown = 0
     * }
     */
    public static int DiskOpReasonUnknown() {
        return DiskOpReasonUnknown;
    }
    private static final int DiskOpReasonScsiSenseCode = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_OPERATIONAL_STATUS_REASON.DiskOpReasonScsiSenseCode = 1
     * }
     */
    public static int DiskOpReasonScsiSenseCode() {
        return DiskOpReasonScsiSenseCode;
    }
    private static final int DiskOpReasonMedia = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_OPERATIONAL_STATUS_REASON.DiskOpReasonMedia = 2
     * }
     */
    public static int DiskOpReasonMedia() {
        return DiskOpReasonMedia;
    }
    private static final int DiskOpReasonIo = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_OPERATIONAL_STATUS_REASON.DiskOpReasonIo = 3
     * }
     */
    public static int DiskOpReasonIo() {
        return DiskOpReasonIo;
    }
    private static final int DiskOpReasonThresholdExceeded = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_OPERATIONAL_STATUS_REASON.DiskOpReasonThresholdExceeded = 4
     * }
     */
    public static int DiskOpReasonThresholdExceeded() {
        return DiskOpReasonThresholdExceeded;
    }
    private static final int DiskOpReasonLostData = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_OPERATIONAL_STATUS_REASON.DiskOpReasonLostData = 5
     * }
     */
    public static int DiskOpReasonLostData() {
        return DiskOpReasonLostData;
    }
    private static final int DiskOpReasonEnergySource = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_OPERATIONAL_STATUS_REASON.DiskOpReasonEnergySource = 6
     * }
     */
    public static int DiskOpReasonEnergySource() {
        return DiskOpReasonEnergySource;
    }
    private static final int DiskOpReasonConfiguration = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_OPERATIONAL_STATUS_REASON.DiskOpReasonConfiguration = 7
     * }
     */
    public static int DiskOpReasonConfiguration() {
        return DiskOpReasonConfiguration;
    }
    private static final int DiskOpReasonDeviceController = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_OPERATIONAL_STATUS_REASON.DiskOpReasonDeviceController = 8
     * }
     */
    public static int DiskOpReasonDeviceController() {
        return DiskOpReasonDeviceController;
    }
    private static final int DiskOpReasonMediaController = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_OPERATIONAL_STATUS_REASON.DiskOpReasonMediaController = 9
     * }
     */
    public static int DiskOpReasonMediaController() {
        return DiskOpReasonMediaController;
    }
    private static final int DiskOpReasonComponent = (int)10L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_OPERATIONAL_STATUS_REASON.DiskOpReasonComponent = 10
     * }
     */
    public static int DiskOpReasonComponent() {
        return DiskOpReasonComponent;
    }
    private static final int DiskOpReasonNVDIMM_N = (int)11L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_OPERATIONAL_STATUS_REASON.DiskOpReasonNVDIMM_N = 11
     * }
     */
    public static int DiskOpReasonNVDIMM_N() {
        return DiskOpReasonNVDIMM_N;
    }
    private static final int DiskOpReasonBackgroundOperation = (int)12L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_OPERATIONAL_STATUS_REASON.DiskOpReasonBackgroundOperation = 12
     * }
     */
    public static int DiskOpReasonBackgroundOperation() {
        return DiskOpReasonBackgroundOperation;
    }
    private static final int DiskOpReasonInvalidFirmware = (int)13L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_OPERATIONAL_STATUS_REASON.DiskOpReasonInvalidFirmware = 13
     * }
     */
    public static int DiskOpReasonInvalidFirmware() {
        return DiskOpReasonInvalidFirmware;
    }
    private static final int DiskOpReasonHealthCheck = (int)14L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_OPERATIONAL_STATUS_REASON.DiskOpReasonHealthCheck = 14
     * }
     */
    public static int DiskOpReasonHealthCheck() {
        return DiskOpReasonHealthCheck;
    }
    private static final int DiskOpReasonLostDataPersistence = (int)15L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_OPERATIONAL_STATUS_REASON.DiskOpReasonLostDataPersistence = 15
     * }
     */
    public static int DiskOpReasonLostDataPersistence() {
        return DiskOpReasonLostDataPersistence;
    }
    private static final int DiskOpReasonDisabledByPlatform = (int)16L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_OPERATIONAL_STATUS_REASON.DiskOpReasonDisabledByPlatform = 16
     * }
     */
    public static int DiskOpReasonDisabledByPlatform() {
        return DiskOpReasonDisabledByPlatform;
    }
    private static final int DiskOpReasonLostWritePersistence = (int)17L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_OPERATIONAL_STATUS_REASON.DiskOpReasonLostWritePersistence = 17
     * }
     */
    public static int DiskOpReasonLostWritePersistence() {
        return DiskOpReasonLostWritePersistence;
    }
    private static final int DiskOpReasonDataPersistenceLossImminent = (int)18L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_OPERATIONAL_STATUS_REASON.DiskOpReasonDataPersistenceLossImminent = 18
     * }
     */
    public static int DiskOpReasonDataPersistenceLossImminent() {
        return DiskOpReasonDataPersistenceLossImminent;
    }
    private static final int DiskOpReasonWritePersistenceLossImminent = (int)19L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_OPERATIONAL_STATUS_REASON.DiskOpReasonWritePersistenceLossImminent = 19
     * }
     */
    public static int DiskOpReasonWritePersistenceLossImminent() {
        return DiskOpReasonWritePersistenceLossImminent;
    }
    private static final int DiskOpReasonMax = (int)20L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_OPERATIONAL_STATUS_REASON.DiskOpReasonMax = 20
     * }
     */
    public static int DiskOpReasonMax() {
        return DiskOpReasonMax;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_OPERATIONAL_STATUS_REASON {
     *     DiskOpReasonUnknown = 0,
     *     DiskOpReasonScsiSenseCode,
     *     DiskOpReasonMedia,
     *     DiskOpReasonIo,
     *     DiskOpReasonThresholdExceeded,
     *     DiskOpReasonLostData,
     *     DiskOpReasonEnergySource,
     *     DiskOpReasonConfiguration,
     *     DiskOpReasonDeviceController,
     *     DiskOpReasonMediaController,
     *     DiskOpReasonComponent,
     *     DiskOpReasonNVDIMM_N,
     *     DiskOpReasonBackgroundOperation,
     *     DiskOpReasonInvalidFirmware,
     *     DiskOpReasonHealthCheck,
     *     DiskOpReasonLostDataPersistence,
     *     DiskOpReasonDisabledByPlatform,
     *     DiskOpReasonLostWritePersistence,
     *     DiskOpReasonDataPersistenceLossImminent,
     *     DiskOpReasonWritePersistenceLossImminent,
     *     DiskOpReasonMax
     * } *PSTORAGE_OPERATIONAL_STATUS_REASON
     * }
     */
    public static final AddressLayout PSTORAGE_OPERATIONAL_STATUS_REASON = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_OPERATIONAL_REASON {
     *     DWORD Version;
     *     DWORD Size;
     *     STORAGE_OPERATIONAL_STATUS_REASON Reason;
     *     union {
     *         struct {
     *             BYTE SenseKey;
     *             BYTE ASC;
     *             BYTE ASCQ;
     *             BYTE Reserved;
     *         } ScsiSenseKey;
     *         struct {
     *             BYTE CriticalHealth;
     *             BYTE ModuleHealth[2];
     *             BYTE ErrorThresholdStatus;
     *         } NVDIMM_N;
     *         DWORD AsUlong;
     *     } RawBytes;
     * } *PSTORAGE_OPERATIONAL_REASON
     * }
     */
    public static final AddressLayout PSTORAGE_OPERATIONAL_REASON = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_DEVICE_MANAGEMENT_STATUS {
     *     DWORD Version;
     *     DWORD Size;
     *     STORAGE_DISK_HEALTH_STATUS Health;
     *     DWORD NumberOfOperationalStatus;
     *     DWORD NumberOfAdditionalReasons;
     *     STORAGE_DISK_OPERATIONAL_STATUS OperationalStatus[16];
     *     STORAGE_OPERATIONAL_REASON AdditionalReasons[1];
     * } *PSTORAGE_DEVICE_MANAGEMENT_STATUS
     * }
     */
    public static final AddressLayout PSTORAGE_DEVICE_MANAGEMENT_STATUS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_ADAPTER_SERIAL_NUMBER {
     *     DWORD Version;
     *     DWORD Size;
     *     WCHAR SerialNumber[128];
     * } *PSTORAGE_ADAPTER_SERIAL_NUMBER
     * }
     */
    public static final AddressLayout PSTORAGE_ADAPTER_SERIAL_NUMBER = wgl_h.C_POINTER;
    private static final int ZonedDeviceTypeUnknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ZONED_DEVICE_TYPES.ZonedDeviceTypeUnknown = 0
     * }
     */
    public static int ZonedDeviceTypeUnknown() {
        return ZonedDeviceTypeUnknown;
    }
    private static final int ZonedDeviceTypeHostManaged = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ZONED_DEVICE_TYPES.ZonedDeviceTypeHostManaged = 1
     * }
     */
    public static int ZonedDeviceTypeHostManaged() {
        return ZonedDeviceTypeHostManaged;
    }
    private static final int ZonedDeviceTypeHostAware = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ZONED_DEVICE_TYPES.ZonedDeviceTypeHostAware = 2
     * }
     */
    public static int ZonedDeviceTypeHostAware() {
        return ZonedDeviceTypeHostAware;
    }
    private static final int ZonedDeviceTypeDeviceManaged = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ZONED_DEVICE_TYPES.ZonedDeviceTypeDeviceManaged = 3
     * }
     */
    public static int ZonedDeviceTypeDeviceManaged() {
        return ZonedDeviceTypeDeviceManaged;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_ZONED_DEVICE_TYPES {
     *     ZonedDeviceTypeUnknown = 0,
     *     ZonedDeviceTypeHostManaged,
     *     ZonedDeviceTypeHostAware,
     *     ZonedDeviceTypeDeviceManaged
     * } *PSTORAGE_ZONED_DEVICE_TYPES
     * }
     */
    public static final AddressLayout PSTORAGE_ZONED_DEVICE_TYPES = wgl_h.C_POINTER;
    private static final int ZoneTypeUnknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ZONE_TYPES.ZoneTypeUnknown = 0
     * }
     */
    public static int ZoneTypeUnknown() {
        return ZoneTypeUnknown;
    }
    private static final int ZoneTypeConventional = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ZONE_TYPES.ZoneTypeConventional = 1
     * }
     */
    public static int ZoneTypeConventional() {
        return ZoneTypeConventional;
    }
    private static final int ZoneTypeSequentialWriteRequired = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ZONE_TYPES.ZoneTypeSequentialWriteRequired = 2
     * }
     */
    public static int ZoneTypeSequentialWriteRequired() {
        return ZoneTypeSequentialWriteRequired;
    }
    private static final int ZoneTypeSequentialWritePreferred = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ZONE_TYPES.ZoneTypeSequentialWritePreferred = 3
     * }
     */
    public static int ZoneTypeSequentialWritePreferred() {
        return ZoneTypeSequentialWritePreferred;
    }
    private static final int ZoneTypeMax = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ZONE_TYPES.ZoneTypeMax = 4
     * }
     */
    public static int ZoneTypeMax() {
        return ZoneTypeMax;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_ZONE_TYPES {
     *     ZoneTypeUnknown = 0,
     *     ZoneTypeConventional = 1,
     *     ZoneTypeSequentialWriteRequired = 2,
     *     ZoneTypeSequentialWritePreferred = 3,
     *     ZoneTypeMax
     * } *PSTORAGE_ZONE_TYPES
     * }
     */
    public static final AddressLayout PSTORAGE_ZONE_TYPES = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_ZONE_GROUP {
     *     DWORD ZoneCount;
     *     STORAGE_ZONE_TYPES ZoneType;
     *     DWORDLONG ZoneSize;
     * } *PSTORAGE_ZONE_GROUP
     * }
     */
    public static final AddressLayout PSTORAGE_ZONE_GROUP = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_ZONED_DEVICE_DESCRIPTOR {
     *     DWORD Version;
     *     DWORD Size;
     *     STORAGE_ZONED_DEVICE_TYPES DeviceType;
     *     DWORD ZoneCount;
     *     union {
     *         struct {
     *             DWORD MaxOpenZoneCount;
     *             BOOLEAN UnrestrictedRead;
     *             BYTE Reserved[3];
     *         } SequentialRequiredZone;
     *         struct {
     *             DWORD OptimalOpenZoneCount;
     *             DWORD Reserved;
     *         } SequentialPreferredZone;
     *     } ZoneAttributes;
     *     DWORD ZoneGroupCount;
     *     STORAGE_ZONE_GROUP ZoneGroup[1];
     * } *PSTORAGE_ZONED_DEVICE_DESCRIPTOR
     * }
     */
    public static final AddressLayout PSTORAGE_ZONED_DEVICE_DESCRIPTOR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_LOCATION {
     *     DWORD Socket;
     *     DWORD Slot;
     *     DWORD Adapter;
     *     DWORD Port;
     *     union {
     *         struct {
     *             DWORD Channel;
     *             DWORD Device;
     *         };
     *         struct {
     *             DWORD Target;
     *             DWORD Lun;
     *         };
     *     };
     * } *PDEVICE_LOCATION
     * }
     */
    public static final AddressLayout PDEVICE_LOCATION = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_DEVICE_LOCATION_DESCRIPTOR {
     *     DWORD Version;
     *     DWORD Size;
     *     DEVICE_LOCATION Location;
     *     DWORD StringOffset;
     * } *PSTORAGE_DEVICE_LOCATION_DESCRIPTOR
     * }
     */
    public static final AddressLayout PSTORAGE_DEVICE_LOCATION_DESCRIPTOR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_DEVICE_NUMA_PROPERTY {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD NumaNode;
     * } *PSTORAGE_DEVICE_NUMA_PROPERTY
     * }
     */
    public static final AddressLayout PSTORAGE_DEVICE_NUMA_PROPERTY = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD UnsafeShutdownCount;
     * } *PSTORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT
     * }
     */
    public static final AddressLayout PSTORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_HW_ENDURANCE_INFO {
     *     DWORD ValidFields;
     *     DWORD GroupId;
     *     struct {
     *         DWORD Shared : 1;
     *         DWORD Reserved : 31;
     *     } Flags;
     *     DWORD LifePercentage;
     *     BYTE BytesReadCount[16];
     *     BYTE ByteWriteCount[16];
     * } *PSTORAGE_HW_ENDURANCE_INFO
     * }
     */
    public static final AddressLayout PSTORAGE_HW_ENDURANCE_INFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_HW_ENDURANCE_DATA_DESCRIPTOR {
     *     DWORD Version;
     *     DWORD Size;
     *     STORAGE_HW_ENDURANCE_INFO EnduranceInfo;
     * } *PSTORAGE_HW_ENDURANCE_DATA_DESCRIPTOR
     * }
     */
    public static final AddressLayout PSTORAGE_HW_ENDURANCE_DATA_DESCRIPTOR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef DWORD DEVICE_DATA_MANAGEMENT_SET_ACTION
     * }
     */
    public static final OfInt DEVICE_DATA_MANAGEMENT_SET_ACTION = wgl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef DWORD DEVICE_DSM_ACTION
     * }
     */
    public static final OfInt DEVICE_DSM_ACTION = wgl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DATA_SET_RANGE {
     *     LONGLONG StartingOffset;
     *     DWORDLONG LengthInBytes;
     * } *PDEVICE_DATA_SET_RANGE
     * }
     */
    public static final AddressLayout PDEVICE_DATA_SET_RANGE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DATA_SET_RANGE {
     *     LONGLONG StartingOffset;
     *     DWORDLONG LengthInBytes;
     * } *PDEVICE_DSM_RANGE
     * }
     */
    public static final AddressLayout PDEVICE_DSM_RANGE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES {
     *     DWORD Size;
     *     DEVICE_DSM_ACTION Action;
     *     DWORD Flags;
     *     DWORD ParameterBlockOffset;
     *     DWORD ParameterBlockLength;
     *     DWORD DataSetRangesOffset;
     *     DWORD DataSetRangesLength;
     * } *PDEVICE_MANAGE_DATA_SET_ATTRIBUTES
     * }
     */
    public static final AddressLayout PDEVICE_MANAGE_DATA_SET_ATTRIBUTES = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES {
     *     DWORD Size;
     *     DEVICE_DSM_ACTION Action;
     *     DWORD Flags;
     *     DWORD ParameterBlockOffset;
     *     DWORD ParameterBlockLength;
     *     DWORD DataSetRangesOffset;
     *     DWORD DataSetRangesLength;
     * } *PDEVICE_DSM_INPUT
     * }
     */
    public static final AddressLayout PDEVICE_DSM_INPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT {
     *     DWORD Size;
     *     DEVICE_DSM_ACTION Action;
     *     DWORD Flags;
     *     DWORD OperationStatus;
     *     DWORD ExtendedError;
     *     DWORD TargetDetailedError;
     *     DWORD ReservedStatus;
     *     DWORD OutputBlockOffset;
     *     DWORD OutputBlockLength;
     * } *PDEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT
     * }
     */
    public static final AddressLayout PDEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT {
     *     DWORD Size;
     *     DEVICE_DSM_ACTION Action;
     *     DWORD Flags;
     *     DWORD OperationStatus;
     *     DWORD ExtendedError;
     *     DWORD TargetDetailedError;
     *     DWORD ReservedStatus;
     *     DWORD OutputBlockOffset;
     *     DWORD OutputBlockLength;
     * } *PDEVICE_DSM_OUTPUT
     * }
     */
    public static final AddressLayout PDEVICE_DSM_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DSM_DEFINITION {
     *     DEVICE_DSM_ACTION Action;
     *     BOOLEAN SingleRange;
     *     DWORD ParameterBlockAlignment;
     *     DWORD ParameterBlockLength;
     *     BOOLEAN HasOutput;
     *     DWORD OutputBlockAlignment;
     *     DWORD OutputBlockLength;
     * } *PDEVICE_DSM_DEFINITION
     * }
     */
    public static final AddressLayout PDEVICE_DSM_DEFINITION = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DSM_NOTIFICATION_PARAMETERS {
     *     DWORD Size;
     *     DWORD Flags;
     *     DWORD NumFileTypeIDs;
     *     GUID FileTypeID[1];
     * } *PDEVICE_DSM_NOTIFICATION_PARAMETERS
     * }
     */
    public static final AddressLayout PDEVICE_DSM_NOTIFICATION_PARAMETERS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_OFFLOAD_TOKEN {
     *     BYTE TokenType[4];
     *     BYTE Reserved[2];
     *     BYTE TokenIdLength[2];
     *     union {
     *         struct {
     *             BYTE Reserved2[504];
     *         } StorageOffloadZeroDataToken;
     *         BYTE Token[504];
     *     };
     * } *PSTORAGE_OFFLOAD_TOKEN
     * }
     */
    public static final AddressLayout PSTORAGE_OFFLOAD_TOKEN = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DSM_OFFLOAD_READ_PARAMETERS {
     *     DWORD Flags;
     *     DWORD TimeToLive;
     *     DWORD Reserved[2];
     * } *PDEVICE_DSM_OFFLOAD_READ_PARAMETERS
     * }
     */
    public static final AddressLayout PDEVICE_DSM_OFFLOAD_READ_PARAMETERS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_OFFLOAD_READ_OUTPUT {
     *     DWORD OffloadReadFlags;
     *     DWORD Reserved;
     *     DWORDLONG LengthProtected;
     *     DWORD TokenLength;
     *     STORAGE_OFFLOAD_TOKEN Token;
     * } *PSTORAGE_OFFLOAD_READ_OUTPUT
     * }
     */
    public static final AddressLayout PSTORAGE_OFFLOAD_READ_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS {
     *     DWORD Flags;
     *     DWORD Reserved;
     *     DWORDLONG TokenOffset;
     *     STORAGE_OFFLOAD_TOKEN Token;
     * } *PDEVICE_DSM_OFFLOAD_WRITE_PARAMETERS
     * }
     */
    public static final AddressLayout PDEVICE_DSM_OFFLOAD_WRITE_PARAMETERS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_OFFLOAD_WRITE_OUTPUT {
     *     DWORD OffloadWriteFlags;
     *     DWORD Reserved;
     *     DWORDLONG LengthCopied;
     * } *PSTORAGE_OFFLOAD_WRITE_OUTPUT
     * }
     */
    public static final AddressLayout PSTORAGE_OFFLOAD_WRITE_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DATA_SET_LBP_STATE_PARAMETERS {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD Flags;
     *     DWORD OutputVersion;
     * } *PDEVICE_DATA_SET_LBP_STATE_PARAMETERS
     * }
     */
    public static final AddressLayout PDEVICE_DATA_SET_LBP_STATE_PARAMETERS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DATA_SET_LBP_STATE_PARAMETERS {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD Flags;
     *     DWORD OutputVersion;
     * } *PDEVICE_DSM_ALLOCATION_PARAMETERS
     * }
     */
    public static final AddressLayout PDEVICE_DSM_ALLOCATION_PARAMETERS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DATA_SET_LB_PROVISIONING_STATE {
     *     DWORD Size;
     *     DWORD Version;
     *     DWORDLONG SlabSizeInBytes;
     *     DWORD SlabOffsetDeltaInBytes;
     *     DWORD SlabAllocationBitMapBitCount;
     *     DWORD SlabAllocationBitMapLength;
     *     DWORD SlabAllocationBitMap[1];
     * } *PDEVICE_DATA_SET_LB_PROVISIONING_STATE
     * }
     */
    public static final AddressLayout PDEVICE_DATA_SET_LB_PROVISIONING_STATE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DATA_SET_LB_PROVISIONING_STATE {
     *     DWORD Size;
     *     DWORD Version;
     *     DWORDLONG SlabSizeInBytes;
     *     DWORD SlabOffsetDeltaInBytes;
     *     DWORD SlabAllocationBitMapBitCount;
     *     DWORD SlabAllocationBitMapLength;
     *     DWORD SlabAllocationBitMap[1];
     * } *PDEVICE_DSM_ALLOCATION_OUTPUT
     * }
     */
    public static final AddressLayout PDEVICE_DSM_ALLOCATION_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2 {
     *     DWORD Size;
     *     DWORD Version;
     *     DWORDLONG SlabSizeInBytes;
     *     DWORDLONG SlabOffsetDeltaInBytes;
     *     DWORD SlabAllocationBitMapBitCount;
     *     DWORD SlabAllocationBitMapLength;
     *     DWORD SlabAllocationBitMap[1];
     * } *PDEVICE_DATA_SET_LB_PROVISIONING_STATE_V2
     * }
     */
    public static final AddressLayout PDEVICE_DATA_SET_LB_PROVISIONING_STATE_V2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2 {
     *     DWORD Size;
     *     DWORD Version;
     *     DWORDLONG SlabSizeInBytes;
     *     DWORDLONG SlabOffsetDeltaInBytes;
     *     DWORD SlabAllocationBitMapBitCount;
     *     DWORD SlabAllocationBitMapLength;
     *     DWORD SlabAllocationBitMap[1];
     * } *PDEVICE_DSM_ALLOCATION_OUTPUT2
     * }
     */
    public static final AddressLayout PDEVICE_DSM_ALLOCATION_OUTPUT2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DATA_SET_REPAIR_PARAMETERS {
     *     DWORD NumberOfRepairCopies;
     *     DWORD SourceCopy;
     *     DWORD RepairCopies[1];
     * } *PDEVICE_DATA_SET_REPAIR_PARAMETERS
     * }
     */
    public static final AddressLayout PDEVICE_DATA_SET_REPAIR_PARAMETERS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DATA_SET_REPAIR_PARAMETERS {
     *     DWORD NumberOfRepairCopies;
     *     DWORD SourceCopy;
     *     DWORD RepairCopies[1];
     * } *PDEVICE_DSM_REPAIR_PARAMETERS
     * }
     */
    public static final AddressLayout PDEVICE_DSM_REPAIR_PARAMETERS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DATA_SET_REPAIR_OUTPUT {
     *     DEVICE_DSM_RANGE ParityExtent;
     * } *PDEVICE_DATA_SET_REPAIR_OUTPUT
     * }
     */
    public static final AddressLayout PDEVICE_DATA_SET_REPAIR_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DATA_SET_REPAIR_OUTPUT {
     *     DEVICE_DSM_RANGE ParityExtent;
     * } *PDEVICE_DSM_REPAIR_OUTPUT
     * }
     */
    public static final AddressLayout PDEVICE_DSM_REPAIR_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DATA_SET_SCRUB_OUTPUT {
     *     DWORDLONG BytesProcessed;
     *     DWORDLONG BytesRepaired;
     *     DWORDLONG BytesFailed;
     * } *PDEVICE_DATA_SET_SCRUB_OUTPUT
     * }
     */
    public static final AddressLayout PDEVICE_DATA_SET_SCRUB_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DATA_SET_SCRUB_OUTPUT {
     *     DWORDLONG BytesProcessed;
     *     DWORDLONG BytesRepaired;
     *     DWORDLONG BytesFailed;
     * } *PDEVICE_DSM_SCRUB_OUTPUT
     * }
     */
    public static final AddressLayout PDEVICE_DSM_SCRUB_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DATA_SET_SCRUB_EX_OUTPUT {
     *     DWORDLONG BytesProcessed;
     *     DWORDLONG BytesRepaired;
     *     DWORDLONG BytesFailed;
     *     DEVICE_DSM_RANGE ParityExtent;
     * } *PDEVICE_DATA_SET_SCRUB_EX_OUTPUT
     * }
     */
    public static final AddressLayout PDEVICE_DATA_SET_SCRUB_EX_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DATA_SET_SCRUB_EX_OUTPUT {
     *     DWORDLONG BytesProcessed;
     *     DWORDLONG BytesRepaired;
     *     DWORDLONG BytesFailed;
     *     DEVICE_DSM_RANGE ParityExtent;
     * } *PDEVICE_DSM_SCRUB_OUTPUT2
     * }
     */
    public static final AddressLayout PDEVICE_DSM_SCRUB_OUTPUT2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DSM_TIERING_QUERY_INPUT {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD Flags;
     *     DWORD NumberOfTierIds;
     *     GUID TierIds[1];
     * } *PDEVICE_DSM_TIERING_QUERY_INPUT
     * }
     */
    public static final AddressLayout PDEVICE_DSM_TIERING_QUERY_INPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DSM_TIERING_QUERY_INPUT {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD Flags;
     *     DWORD NumberOfTierIds;
     *     GUID TierIds[1];
     * } *PDEVICE_DSM_TIERING_QUERY_PARAMETERS
     * }
     */
    public static final AddressLayout PDEVICE_DSM_TIERING_QUERY_PARAMETERS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_TIER_REGION {
     *     GUID TierId;
     *     DWORDLONG Offset;
     *     DWORDLONG Length;
     * } *PSTORAGE_TIER_REGION
     * }
     */
    public static final AddressLayout PSTORAGE_TIER_REGION = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DSM_TIERING_QUERY_OUTPUT {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD Flags;
     *     DWORD Reserved;
     *     DWORDLONG Alignment;
     *     DWORD TotalNumberOfRegions;
     *     DWORD NumberOfRegionsReturned;
     *     STORAGE_TIER_REGION Regions[1];
     * } *PDEVICE_DSM_TIERING_QUERY_OUTPUT
     * }
     */
    public static final AddressLayout PDEVICE_DSM_TIERING_QUERY_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS {
     *     DWORD Size;
     *     BYTE TargetPriority;
     *     BYTE Reserved[3];
     * } *PDEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS
     * }
     */
    public static final AddressLayout PDEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT {
     *     DWORDLONG TopologyRangeBytes;
     *     BYTE TopologyId[16];
     * } *PDEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT
     * }
     */
    public static final AddressLayout PDEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT {
     *     DWORDLONG TopologyRangeBytes;
     *     BYTE TopologyId[16];
     * } *PDEVICE_DSM_TOPOLOGY_ID_QUERY_OUTPUT
     * }
     */
    public static final AddressLayout PDEVICE_DSM_TOPOLOGY_ID_QUERY_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_STORAGE_ADDRESS_RANGE {
     *     LONGLONG StartAddress;
     *     DWORDLONG LengthInBytes;
     * } *PDEVICE_STORAGE_ADDRESS_RANGE
     * }
     */
    public static final AddressLayout PDEVICE_STORAGE_ADDRESS_RANGE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT {
     *     DWORD Version;
     *     DWORD Flags;
     *     DWORD TotalNumberOfRanges;
     *     DWORD NumberOfRangesReturned;
     *     DEVICE_STORAGE_ADDRESS_RANGE Ranges[1];
     * } *PDEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT
     * }
     */
    public static final AddressLayout PDEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DSM_REPORT_ZONES_PARAMETERS {
     *     DWORD Size;
     *     BYTE ReportOption;
     *     BYTE Partial;
     *     BYTE Reserved[2];
     * } *PDEVICE_DSM_REPORT_ZONES_PARAMETERS
     * }
     */
    public static final AddressLayout PDEVICE_DSM_REPORT_ZONES_PARAMETERS = wgl_h.C_POINTER;
    private static final int ZonesAttributeTypeAndLengthMayDifferent = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ZONES_ATTRIBUTES.ZonesAttributeTypeAndLengthMayDifferent = 0
     * }
     */
    public static int ZonesAttributeTypeAndLengthMayDifferent() {
        return ZonesAttributeTypeAndLengthMayDifferent;
    }
    private static final int ZonesAttributeTypeSameLengthSame = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ZONES_ATTRIBUTES.ZonesAttributeTypeSameLengthSame = 1
     * }
     */
    public static int ZonesAttributeTypeSameLengthSame() {
        return ZonesAttributeTypeSameLengthSame;
    }
    private static final int ZonesAttributeTypeSameLastZoneLengthDifferent = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ZONES_ATTRIBUTES.ZonesAttributeTypeSameLastZoneLengthDifferent = 2
     * }
     */
    public static int ZonesAttributeTypeSameLastZoneLengthDifferent() {
        return ZonesAttributeTypeSameLastZoneLengthDifferent;
    }
    private static final int ZonesAttributeTypeMayDifferentLengthSame = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ZONES_ATTRIBUTES.ZonesAttributeTypeMayDifferentLengthSame = 3
     * }
     */
    public static int ZonesAttributeTypeMayDifferentLengthSame() {
        return ZonesAttributeTypeMayDifferentLengthSame;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_ZONES_ATTRIBUTES {
     *     ZonesAttributeTypeAndLengthMayDifferent = 0,
     *     ZonesAttributeTypeSameLengthSame = 1,
     *     ZonesAttributeTypeSameLastZoneLengthDifferent = 2,
     *     ZonesAttributeTypeMayDifferentLengthSame = 3
     * } *PSTORAGE_ZONES_ATTRIBUTES
     * }
     */
    public static final AddressLayout PSTORAGE_ZONES_ATTRIBUTES = wgl_h.C_POINTER;
    private static final int ZoneConditionConventional = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ZONE_CONDITION.ZoneConditionConventional = 0
     * }
     */
    public static int ZoneConditionConventional() {
        return ZoneConditionConventional;
    }
    private static final int ZoneConditionEmpty = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ZONE_CONDITION.ZoneConditionEmpty = 1
     * }
     */
    public static int ZoneConditionEmpty() {
        return ZoneConditionEmpty;
    }
    private static final int ZoneConditionImplicitlyOpened = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ZONE_CONDITION.ZoneConditionImplicitlyOpened = 2
     * }
     */
    public static int ZoneConditionImplicitlyOpened() {
        return ZoneConditionImplicitlyOpened;
    }
    private static final int ZoneConditionExplicitlyOpened = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ZONE_CONDITION.ZoneConditionExplicitlyOpened = 3
     * }
     */
    public static int ZoneConditionExplicitlyOpened() {
        return ZoneConditionExplicitlyOpened;
    }
    private static final int ZoneConditionClosed = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ZONE_CONDITION.ZoneConditionClosed = 4
     * }
     */
    public static int ZoneConditionClosed() {
        return ZoneConditionClosed;
    }
    private static final int ZoneConditionReadOnly = (int)13L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ZONE_CONDITION.ZoneConditionReadOnly = 13
     * }
     */
    public static int ZoneConditionReadOnly() {
        return ZoneConditionReadOnly;
    }
    private static final int ZoneConditionFull = (int)14L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ZONE_CONDITION.ZoneConditionFull = 14
     * }
     */
    public static int ZoneConditionFull() {
        return ZoneConditionFull;
    }
    private static final int ZoneConditionOffline = (int)15L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ZONE_CONDITION.ZoneConditionOffline = 15
     * }
     */
    public static int ZoneConditionOffline() {
        return ZoneConditionOffline;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_ZONE_CONDITION {
     *     ZoneConditionConventional = 0,
     *     ZoneConditionEmpty = 1,
     *     ZoneConditionImplicitlyOpened = 2,
     *     ZoneConditionExplicitlyOpened = 3,
     *     ZoneConditionClosed = 4,
     *     ZoneConditionReadOnly = 13,
     *     ZoneConditionFull = 14,
     *     ZoneConditionOffline = 15
     * } *PSTORAGE_ZONE_CONDITION
     * }
     */
    public static final AddressLayout PSTORAGE_ZONE_CONDITION = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_ZONE_DESCRIPTOR {
     *     DWORD Size;
     *     STORAGE_ZONE_TYPES ZoneType;
     *     STORAGE_ZONE_CONDITION ZoneCondition;
     *     BOOLEAN ResetWritePointerRecommend;
     *     BYTE Reserved0[3];
     *     DWORDLONG ZoneSize;
     *     DWORDLONG WritePointerOffset;
     * } *PSTORAGE_ZONE_DESCRIPTOR
     * }
     */
    public static final AddressLayout PSTORAGE_ZONE_DESCRIPTOR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DSM_REPORT_ZONES_DATA {
     *     DWORD Size;
     *     DWORD ZoneCount;
     *     STORAGE_ZONES_ATTRIBUTES Attributes;
     *     DWORD Reserved0;
     *     STORAGE_ZONE_DESCRIPTOR ZoneDescriptors[1];
     * } *PDEVICE_DSM_REPORT_ZONES_DATA
     * }
     */
    public static final AddressLayout PDEVICE_DSM_REPORT_ZONES_DATA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DSM_REPORT_ZONES_DATA {
     *     DWORD Size;
     *     DWORD ZoneCount;
     *     STORAGE_ZONES_ATTRIBUTES Attributes;
     *     DWORD Reserved0;
     *     STORAGE_ZONE_DESCRIPTOR ZoneDescriptors[1];
     * } *PDEVICE_DSM_REPORT_ZONES_OUTPUT
     * }
     */
    public static final AddressLayout PDEVICE_DSM_REPORT_ZONES_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_STORAGE_RANGE_ATTRIBUTES {
     *     DWORDLONG LengthInBytes;
     *     union {
     *         DWORD AllFlags;
     *         struct {
     *             DWORD IsRangeBad : 1;
     *         };
     *     };
     *     DWORD Reserved;
     * } *PDEVICE_STORAGE_RANGE_ATTRIBUTES
     * }
     */
    public static final AddressLayout PDEVICE_STORAGE_RANGE_ATTRIBUTES = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DSM_RANGE_ERROR_INFO {
     *     DWORD Version;
     *     DWORD Flags;
     *     DWORD TotalNumberOfRanges;
     *     DWORD NumberOfRangesReturned;
     *     DEVICE_STORAGE_RANGE_ATTRIBUTES Ranges[1];
     * } *PDEVICE_DSM_RANGE_ERROR_INFO
     * }
     */
    public static final AddressLayout PDEVICE_DSM_RANGE_ERROR_INFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DSM_RANGE_ERROR_INFO {
     *     DWORD Version;
     *     DWORD Flags;
     *     DWORD TotalNumberOfRanges;
     *     DWORD NumberOfRangesReturned;
     *     DEVICE_STORAGE_RANGE_ATTRIBUTES Ranges[1];
     * } *PDEVICE_DSM_RANGE_ERROR_OUTPUT
     * }
     */
    public static final AddressLayout PDEVICE_DSM_RANGE_ERROR_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DSM_LOST_QUERY_PARAMETERS {
     *     DWORD Version;
     *     DWORDLONG Granularity;
     * } *PDEVICE_DSM_LOST_QUERY_PARAMETERS
     * }
     */
    public static final AddressLayout PDEVICE_DSM_LOST_QUERY_PARAMETERS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DSM_LOST_QUERY_OUTPUT {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORDLONG Alignment;
     *     DWORD NumberOfBits;
     *     DWORD BitMap[1];
     * } *PDEVICE_DSM_LOST_QUERY_OUTPUT
     * }
     */
    public static final AddressLayout PDEVICE_DSM_LOST_QUERY_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DSM_FREE_SPACE_OUTPUT {
     *     DWORD Version;
     *     DWORDLONG FreeSpace;
     * } *PDEVICE_DSM_FREE_SPACE_OUTPUT
     * }
     */
    public static final AddressLayout PDEVICE_DSM_FREE_SPACE_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_DSM_CONVERSION_OUTPUT {
     *     DWORD Version;
     *     GUID Source;
     * } *PDEVICE_DSM_CONVERSION_OUTPUT
     * }
     */
    public static final AddressLayout PDEVICE_DSM_CONVERSION_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_GET_BC_PROPERTIES_OUTPUT {
     *     DWORD MaximumRequestsPerPeriod;
     *     DWORD MinimumPeriod;
     *     DWORDLONG MaximumRequestSize;
     *     DWORD EstimatedTimePerRequest;
     *     DWORD NumOutStandingRequests;
     *     DWORDLONG RequestSize;
     * } *PSTORAGE_GET_BC_PROPERTIES_OUTPUT
     * }
     */
    public static final AddressLayout PSTORAGE_GET_BC_PROPERTIES_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_ALLOCATE_BC_STREAM_INPUT {
     *     DWORD Version;
     *     DWORD RequestsPerPeriod;
     *     DWORD Period;
     *     BOOLEAN RetryFailures;
     *     BOOLEAN Discardable;
     *     BOOLEAN Reserved1[2];
     *     DWORD AccessType;
     *     DWORD AccessMode;
     * } *PSTORAGE_ALLOCATE_BC_STREAM_INPUT
     * }
     */
    public static final AddressLayout PSTORAGE_ALLOCATE_BC_STREAM_INPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_ALLOCATE_BC_STREAM_OUTPUT {
     *     DWORDLONG RequestSize;
     *     DWORD NumOutStandingRequests;
     * } *PSTORAGE_ALLOCATE_BC_STREAM_OUTPUT
     * }
     */
    public static final AddressLayout PSTORAGE_ALLOCATE_BC_STREAM_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_PRIORITY_HINT_SUPPORT {
     *     DWORD SupportFlags;
     * } *PSTORAGE_PRIORITY_HINT_SUPPORT
     * }
     */
    public static final AddressLayout PSTORAGE_PRIORITY_HINT_SUPPORT = wgl_h.C_POINTER;
    private static final int StorageDiagnosticLevelDefault = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DIAGNOSTIC_LEVEL.StorageDiagnosticLevelDefault = 0
     * }
     */
    public static int StorageDiagnosticLevelDefault() {
        return StorageDiagnosticLevelDefault;
    }
    private static final int StorageDiagnosticLevelMax = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DIAGNOSTIC_LEVEL.StorageDiagnosticLevelMax = 1
     * }
     */
    public static int StorageDiagnosticLevelMax() {
        return StorageDiagnosticLevelMax;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_DIAGNOSTIC_LEVEL {
     *     StorageDiagnosticLevelDefault = 0,
     *     StorageDiagnosticLevelMax
     * } *PSTORAGE_DIAGNOSTIC_LEVEL
     * }
     */
    public static final AddressLayout PSTORAGE_DIAGNOSTIC_LEVEL = wgl_h.C_POINTER;
    private static final int StorageDiagnosticTargetTypeUndefined = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DIAGNOSTIC_TARGET_TYPE.StorageDiagnosticTargetTypeUndefined = 0
     * }
     */
    public static int StorageDiagnosticTargetTypeUndefined() {
        return StorageDiagnosticTargetTypeUndefined;
    }
    private static final int StorageDiagnosticTargetTypePort = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DIAGNOSTIC_TARGET_TYPE.StorageDiagnosticTargetTypePort = 1
     * }
     */
    public static int StorageDiagnosticTargetTypePort() {
        return StorageDiagnosticTargetTypePort;
    }
    private static final int StorageDiagnosticTargetTypeMiniport = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DIAGNOSTIC_TARGET_TYPE.StorageDiagnosticTargetTypeMiniport = 2
     * }
     */
    public static int StorageDiagnosticTargetTypeMiniport() {
        return StorageDiagnosticTargetTypeMiniport;
    }
    private static final int StorageDiagnosticTargetTypeHbaFirmware = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DIAGNOSTIC_TARGET_TYPE.StorageDiagnosticTargetTypeHbaFirmware = 3
     * }
     */
    public static int StorageDiagnosticTargetTypeHbaFirmware() {
        return StorageDiagnosticTargetTypeHbaFirmware;
    }
    private static final int StorageDiagnosticTargetTypeMax = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DIAGNOSTIC_TARGET_TYPE.StorageDiagnosticTargetTypeMax = 4
     * }
     */
    public static int StorageDiagnosticTargetTypeMax() {
        return StorageDiagnosticTargetTypeMax;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_DIAGNOSTIC_TARGET_TYPE {
     *     StorageDiagnosticTargetTypeUndefined = 0,
     *     StorageDiagnosticTargetTypePort,
     *     StorageDiagnosticTargetTypeMiniport,
     *     StorageDiagnosticTargetTypeHbaFirmware,
     *     StorageDiagnosticTargetTypeMax
     * } *PSTORAGE_DIAGNOSTIC_TARGET_TYPE
     * }
     */
    public static final AddressLayout PSTORAGE_DIAGNOSTIC_TARGET_TYPE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_DIAGNOSTIC_REQUEST {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD Reserved;
     *     STORAGE_DIAGNOSTIC_TARGET_TYPE TargetType;
     *     STORAGE_DIAGNOSTIC_LEVEL Level;
     * } *PSTORAGE_DIAGNOSTIC_REQUEST
     * }
     */
    public static final AddressLayout PSTORAGE_DIAGNOSTIC_REQUEST = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_DIAGNOSTIC_DATA {
     *     DWORD Version;
     *     DWORD Size;
     *     GUID ProviderId;
     *     DWORD BufferSize;
     *     DWORD Reserved;
     *     BYTE DiagnosticDataBuffer[1];
     * } *PSTORAGE_DIAGNOSTIC_DATA
     * }
     */
    public static final AddressLayout PSTORAGE_DIAGNOSTIC_DATA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PHYSICAL_ELEMENT_STATUS_REQUEST {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD StartingElement;
     *     BYTE Filter;
     *     BYTE ReportType;
     *     BYTE Reserved[2];
     * } *PPHYSICAL_ELEMENT_STATUS_REQUEST
     * }
     */
    public static final AddressLayout PPHYSICAL_ELEMENT_STATUS_REQUEST = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PHYSICAL_ELEMENT_STATUS_DESCRIPTOR {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD ElementIdentifier;
     *     BYTE PhysicalElementType;
     *     BYTE PhysicalElementHealth;
     *     BYTE Reserved1[2];
     *     DWORDLONG AssociatedCapacity;
     *     DWORD Reserved2[4];
     * } *PPHYSICAL_ELEMENT_STATUS_DESCRIPTOR
     * }
     */
    public static final AddressLayout PPHYSICAL_ELEMENT_STATUS_DESCRIPTOR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PHYSICAL_ELEMENT_STATUS {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD DescriptorCount;
     *     DWORD ReturnedDescriptorCount;
     *     DWORD ElementIdentifierBeingDepoped;
     *     DWORD Reserved;
     *     PHYSICAL_ELEMENT_STATUS_DESCRIPTOR Descriptors[1];
     * } *PPHYSICAL_ELEMENT_STATUS
     * }
     */
    public static final AddressLayout PPHYSICAL_ELEMENT_STATUS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _REMOVE_ELEMENT_AND_TRUNCATE_REQUEST {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORDLONG RequestCapacity;
     *     DWORD ElementIdentifier;
     *     DWORD Reserved;
     * } *PREMOVE_ELEMENT_AND_TRUNCATE_REQUEST
     * }
     */
    public static final AddressLayout PREMOVE_ELEMENT_AND_TRUNCATE_REQUEST = wgl_h.C_POINTER;
    private static final int DeviceInternalStatusDataRequestTypeUndefined = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE.DeviceInternalStatusDataRequestTypeUndefined = 0
     * }
     */
    public static int DeviceInternalStatusDataRequestTypeUndefined() {
        return DeviceInternalStatusDataRequestTypeUndefined;
    }
    private static final int DeviceCurrentInternalStatusDataHeader = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE.DeviceCurrentInternalStatusDataHeader = 1
     * }
     */
    public static int DeviceCurrentInternalStatusDataHeader() {
        return DeviceCurrentInternalStatusDataHeader;
    }
    private static final int DeviceCurrentInternalStatusData = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE.DeviceCurrentInternalStatusData = 2
     * }
     */
    public static int DeviceCurrentInternalStatusData() {
        return DeviceCurrentInternalStatusData;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE {
     *     DeviceInternalStatusDataRequestTypeUndefined = 0,
     *     DeviceCurrentInternalStatusDataHeader,
     *     DeviceCurrentInternalStatusData
     * } *PDEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE
     * }
     */
    public static final AddressLayout PDEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE = wgl_h.C_POINTER;
    private static final int DeviceStatusDataSetUndefined = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _DEVICE_INTERNAL_STATUS_DATA_SET.DeviceStatusDataSetUndefined = 0
     * }
     */
    public static int DeviceStatusDataSetUndefined() {
        return DeviceStatusDataSetUndefined;
    }
    private static final int DeviceStatusDataSet1 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _DEVICE_INTERNAL_STATUS_DATA_SET.DeviceStatusDataSet1 = 1
     * }
     */
    public static int DeviceStatusDataSet1() {
        return DeviceStatusDataSet1;
    }
    private static final int DeviceStatusDataSet2 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _DEVICE_INTERNAL_STATUS_DATA_SET.DeviceStatusDataSet2 = 2
     * }
     */
    public static int DeviceStatusDataSet2() {
        return DeviceStatusDataSet2;
    }
    private static final int DeviceStatusDataSet3 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _DEVICE_INTERNAL_STATUS_DATA_SET.DeviceStatusDataSet3 = 3
     * }
     */
    public static int DeviceStatusDataSet3() {
        return DeviceStatusDataSet3;
    }
    private static final int DeviceStatusDataSet4 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _DEVICE_INTERNAL_STATUS_DATA_SET.DeviceStatusDataSet4 = 4
     * }
     */
    public static int DeviceStatusDataSet4() {
        return DeviceStatusDataSet4;
    }
    private static final int DeviceStatusDataSetMax = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _DEVICE_INTERNAL_STATUS_DATA_SET.DeviceStatusDataSetMax = 5
     * }
     */
    public static int DeviceStatusDataSetMax() {
        return DeviceStatusDataSetMax;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _DEVICE_INTERNAL_STATUS_DATA_SET {
     *     DeviceStatusDataSetUndefined = 0,
     *     DeviceStatusDataSet1,
     *     DeviceStatusDataSet2,
     *     DeviceStatusDataSet3,
     *     DeviceStatusDataSet4,
     *     DeviceStatusDataSetMax
     * } *PDEVICE_INTERNAL_STATUS_DATA_SET
     * }
     */
    public static final AddressLayout PDEVICE_INTERNAL_STATUS_DATA_SET = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _GET_DEVICE_INTERNAL_STATUS_DATA_REQUEST {
     *     DWORD Version;
     *     DWORD Size;
     *     DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE RequestDataType;
     *     DEVICE_INTERNAL_STATUS_DATA_SET RequestDataSet;
     * } *PGET_DEVICE_INTERNAL_STATUS_DATA_REQUEST
     * }
     */
    public static final AddressLayout PGET_DEVICE_INTERNAL_STATUS_DATA_REQUEST = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICE_INTERNAL_STATUS_DATA {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORDLONG T10VendorId;
     *     DWORD DataSet1Length;
     *     DWORD DataSet2Length;
     *     DWORD DataSet3Length;
     *     DWORD DataSet4Length;
     *     BYTE StatusDataVersion;
     *     BYTE Reserved[3];
     *     BYTE ReasonIdentifier[128];
     *     DWORD StatusDataLength;
     *     BYTE StatusData[1];
     * } *PDEVICE_INTERNAL_STATUS_DATA
     * }
     */
    public static final AddressLayout PDEVICE_INTERNAL_STATUS_DATA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_MEDIA_SERIAL_NUMBER_DATA {
     *     WORD Reserved;
     *     WORD SerialNumberLength;
     *     BYTE SerialNumber[0];
     * } *PSTORAGE_MEDIA_SERIAL_NUMBER_DATA
     * }
     */
    public static final AddressLayout PSTORAGE_MEDIA_SERIAL_NUMBER_DATA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_READ_CAPACITY {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD BlockLength;
     *     LARGE_INTEGER NumberOfBlocks;
     *     LARGE_INTEGER DiskLength;
     * } *PSTORAGE_READ_CAPACITY
     * }
     */
    public static final AddressLayout PSTORAGE_READ_CAPACITY = wgl_h.C_POINTER;
    private static final int WriteCacheTypeUnknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _WRITE_CACHE_TYPE.WriteCacheTypeUnknown = 0
     * }
     */
    public static int WriteCacheTypeUnknown() {
        return WriteCacheTypeUnknown;
    }
    private static final int WriteCacheTypeNone = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _WRITE_CACHE_TYPE.WriteCacheTypeNone = 1
     * }
     */
    public static int WriteCacheTypeNone() {
        return WriteCacheTypeNone;
    }
    private static final int WriteCacheTypeWriteBack = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _WRITE_CACHE_TYPE.WriteCacheTypeWriteBack = 2
     * }
     */
    public static int WriteCacheTypeWriteBack() {
        return WriteCacheTypeWriteBack;
    }
    private static final int WriteCacheTypeWriteThrough = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _WRITE_CACHE_TYPE.WriteCacheTypeWriteThrough = 3
     * }
     */
    public static int WriteCacheTypeWriteThrough() {
        return WriteCacheTypeWriteThrough;
    }
    private static final int WriteCacheEnableUnknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _WRITE_CACHE_ENABLE.WriteCacheEnableUnknown = 0
     * }
     */
    public static int WriteCacheEnableUnknown() {
        return WriteCacheEnableUnknown;
    }
    private static final int WriteCacheDisabled = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _WRITE_CACHE_ENABLE.WriteCacheDisabled = 1
     * }
     */
    public static int WriteCacheDisabled() {
        return WriteCacheDisabled;
    }
    private static final int WriteCacheEnabled = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _WRITE_CACHE_ENABLE.WriteCacheEnabled = 2
     * }
     */
    public static int WriteCacheEnabled() {
        return WriteCacheEnabled;
    }
    private static final int WriteCacheChangeUnknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _WRITE_CACHE_CHANGE.WriteCacheChangeUnknown = 0
     * }
     */
    public static int WriteCacheChangeUnknown() {
        return WriteCacheChangeUnknown;
    }
    private static final int WriteCacheNotChangeable = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _WRITE_CACHE_CHANGE.WriteCacheNotChangeable = 1
     * }
     */
    public static int WriteCacheNotChangeable() {
        return WriteCacheNotChangeable;
    }
    private static final int WriteCacheChangeable = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _WRITE_CACHE_CHANGE.WriteCacheChangeable = 2
     * }
     */
    public static int WriteCacheChangeable() {
        return WriteCacheChangeable;
    }
    private static final int WriteThroughUnknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _WRITE_THROUGH.WriteThroughUnknown = 0
     * }
     */
    public static int WriteThroughUnknown() {
        return WriteThroughUnknown;
    }
    private static final int WriteThroughNotSupported = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _WRITE_THROUGH.WriteThroughNotSupported = 1
     * }
     */
    public static int WriteThroughNotSupported() {
        return WriteThroughNotSupported;
    }
    private static final int WriteThroughSupported = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _WRITE_THROUGH.WriteThroughSupported = 2
     * }
     */
    public static int WriteThroughSupported() {
        return WriteThroughSupported;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_WRITE_CACHE_PROPERTY {
     *     DWORD Version;
     *     DWORD Size;
     *     WRITE_CACHE_TYPE WriteCacheType;
     *     WRITE_CACHE_ENABLE WriteCacheEnabled;
     *     WRITE_CACHE_CHANGE WriteCacheChangeable;
     *     WRITE_THROUGH WriteThroughSupported;
     *     BOOLEAN FlushCacheSupported;
     *     BOOLEAN UserDefinedPowerProtection;
     *     BOOLEAN NVCacheEnabled;
     * } *PSTORAGE_WRITE_CACHE_PROPERTY
     * }
     */
    public static final AddressLayout PSTORAGE_WRITE_CACHE_PROPERTY = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PERSISTENT_RESERVE_COMMAND {
     *     DWORD Version;
     *     DWORD Size;
     *     union {
     *         struct {
     *             BYTE ServiceAction : 5;
     *             BYTE Reserved1 : 3;
     *             WORD AllocationLength;
     *         } PR_IN;
     *         struct {
     *             BYTE ServiceAction : 5;
     *             BYTE Reserved1 : 3;
     *             BYTE Type : 4;
     *             BYTE Scope : 4;
     *             BYTE ParameterList[0];
     *         } PR_OUT;
     *     };
     * } *PPERSISTENT_RESERVE_COMMAND
     * }
     */
    public static final AddressLayout PPERSISTENT_RESERVE_COMMAND = wgl_h.C_POINTER;
    private static final int TCCollectionBugCheck = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _DEVICEDUMP_COLLECTION_TYPE.TCCollectionBugCheck = 1
     * }
     */
    public static int TCCollectionBugCheck() {
        return TCCollectionBugCheck;
    }
    private static final int TCCollectionApplicationRequested = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _DEVICEDUMP_COLLECTION_TYPE.TCCollectionApplicationRequested = 2
     * }
     */
    public static int TCCollectionApplicationRequested() {
        return TCCollectionApplicationRequested;
    }
    private static final int TCCollectionDeviceRequested = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _DEVICEDUMP_COLLECTION_TYPE.TCCollectionDeviceRequested = 3
     * }
     */
    public static int TCCollectionDeviceRequested() {
        return TCCollectionDeviceRequested;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _DEVICEDUMP_COLLECTION_TYPE {
     *     TCCollectionBugCheck = 1,
     *     TCCollectionApplicationRequested,
     *     TCCollectionDeviceRequested
     * } *PDEVICEDUMP_COLLECTION_TYPE
     * }
     */
    public static final AddressLayout PDEVICEDUMP_COLLECTION_TYPE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICEDUMP_SUBSECTION_POINTER {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     DWORD dwOffset;
     * } *PDEVICEDUMP_SUBSECTION_POINTER
     * }
     */
    public static final AddressLayout PDEVICEDUMP_SUBSECTION_POINTER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICEDUMP_STRUCTURE_VERSION {
     *     DWORD dwSignature;
     *     DWORD dwVersion;
     *     DWORD dwSize;
     * } *PDEVICEDUMP_STRUCTURE_VERSION
     * }
     */
    public static final AddressLayout PDEVICEDUMP_STRUCTURE_VERSION = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICEDUMP_SECTION_HEADER {
     *     GUID guidDeviceDataId;
     *     BYTE sOrganizationID[16];
     *     DWORD dwFirmwareRevision;
     *     BYTE sModelNumber[32];
     *     BYTE szDeviceManufacturingID[32];
     *     DWORD dwFlags;
     *     DWORD bRestrictedPrivateDataVersion;
     *     DWORD dwFirmwareIssueId;
     *     BYTE szIssueDescriptionString[132];
     * } *PDEVICEDUMP_SECTION_HEADER
     * }
     */
    public static final AddressLayout PDEVICEDUMP_SECTION_HEADER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _GP_LOG_PAGE_DESCRIPTOR {
     *     WORD LogAddress;
     *     WORD LogSectors;
     * } *PGP_LOG_PAGE_DESCRIPTOR
     * }
     */
    public static final AddressLayout PGP_LOG_PAGE_DESCRIPTOR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICEDUMP_PUBLIC_SUBSECTION {
     *     DWORD dwFlags;
     *     GP_LOG_PAGE_DESCRIPTOR GPLogTable[16];
     *     CHAR szDescription[16];
     *     BYTE bData[1];
     * } *PDEVICEDUMP_PUBLIC_SUBSECTION
     * }
     */
    public static final AddressLayout PDEVICEDUMP_PUBLIC_SUBSECTION = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICEDUMP_RESTRICTED_SUBSECTION {
     *     BYTE bData[1];
     * } *PDEVICEDUMP_RESTRICTED_SUBSECTION
     * }
     */
    public static final AddressLayout PDEVICEDUMP_RESTRICTED_SUBSECTION = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICEDUMP_PRIVATE_SUBSECTION {
     *     DWORD dwFlags;
     *     GP_LOG_PAGE_DESCRIPTOR GPLogId;
     *     BYTE bData[1];
     * } *PDEVICEDUMP_PRIVATE_SUBSECTION
     * }
     */
    public static final AddressLayout PDEVICEDUMP_PRIVATE_SUBSECTION = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICEDUMP_STORAGEDEVICE_DATA {
     *     DEVICEDUMP_STRUCTURE_VERSION Descriptor;
     *     DEVICEDUMP_SECTION_HEADER SectionHeader;
     *     DWORD dwBufferSize;
     *     DWORD dwReasonForCollection;
     *     DEVICEDUMP_SUBSECTION_POINTER PublicData;
     *     DEVICEDUMP_SUBSECTION_POINTER RestrictedData;
     *     DEVICEDUMP_SUBSECTION_POINTER PrivateData;
     * } *PDEVICEDUMP_STORAGEDEVICE_DATA
     * }
     */
    public static final AddressLayout PDEVICEDUMP_STORAGEDEVICE_DATA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD {
     *     BYTE Cdb[16];
     *     BYTE Command[16];
     *     DWORDLONG StartTime;
     *     DWORDLONG EndTime;
     *     DWORD OperationStatus;
     *     DWORD OperationError;
     *     union {
     *         struct {
     *             DWORD dwReserved;
     *         } ExternalStack;
     *         struct {
     *             DWORD dwAtaPortSpecific;
     *         } AtaPort;
     *         struct {
     *             DWORD SrbTag;
     *         } StorPort;
     *     } StackSpecific;
     * } *PDEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD
     * }
     */
    public static final AddressLayout PDEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP {
     *     DEVICEDUMP_STRUCTURE_VERSION Descriptor;
     *     DWORD dwReasonForCollection;
     *     BYTE cDriverName[16];
     *     DWORD uiNumRecords;
     *     DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD RecordArray[1];
     * } *PDEVICEDUMP_STORAGESTACK_PUBLIC_DUMP
     * }
     */
    public static final AddressLayout PDEVICEDUMP_STORAGESTACK_PUBLIC_DUMP = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_IDLE_POWER {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD WakeCapableHint : 1;
     *     DWORD D3ColdSupported : 1;
     *     DWORD Reserved : 30;
     *     DWORD D3IdleTimeout;
     * } *PSTORAGE_IDLE_POWER
     * }
     */
    public static final AddressLayout PSTORAGE_IDLE_POWER = wgl_h.C_POINTER;
    private static final int StoragePowerupUnknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_POWERUP_REASON_TYPE.StoragePowerupUnknown = 0
     * }
     */
    public static int StoragePowerupUnknown() {
        return StoragePowerupUnknown;
    }
    private static final int StoragePowerupIO = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_POWERUP_REASON_TYPE.StoragePowerupIO = 1
     * }
     */
    public static int StoragePowerupIO() {
        return StoragePowerupIO;
    }
    private static final int StoragePowerupDeviceAttention = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_POWERUP_REASON_TYPE.StoragePowerupDeviceAttention = 2
     * }
     */
    public static int StoragePowerupDeviceAttention() {
        return StoragePowerupDeviceAttention;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_POWERUP_REASON_TYPE {
     *     StoragePowerupUnknown = 0,
     *     StoragePowerupIO,
     *     StoragePowerupDeviceAttention
     * } *PSTORAGE_POWERUP_REASON_TYPE
     * }
     */
    public static final AddressLayout PSTORAGE_POWERUP_REASON_TYPE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_IDLE_POWERUP_REASON {
     *     DWORD Version;
     *     DWORD Size;
     *     STORAGE_POWERUP_REASON_TYPE PowerupReason;
     * } *PSTORAGE_IDLE_POWERUP_REASON
     * }
     */
    public static final AddressLayout PSTORAGE_IDLE_POWERUP_REASON = wgl_h.C_POINTER;
    private static final int StorageDevicePowerCapUnitsPercent = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DEVICE_POWER_CAP_UNITS.StorageDevicePowerCapUnitsPercent = 0
     * }
     */
    public static int StorageDevicePowerCapUnitsPercent() {
        return StorageDevicePowerCapUnitsPercent;
    }
    private static final int StorageDevicePowerCapUnitsMilliwatts = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_DEVICE_POWER_CAP_UNITS.StorageDevicePowerCapUnitsMilliwatts = 1
     * }
     */
    public static int StorageDevicePowerCapUnitsMilliwatts() {
        return StorageDevicePowerCapUnitsMilliwatts;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_DEVICE_POWER_CAP_UNITS {
     *     StorageDevicePowerCapUnitsPercent,
     *     StorageDevicePowerCapUnitsMilliwatts
     * } *PSTORAGE_DEVICE_POWER_CAP_UNITS
     * }
     */
    public static final AddressLayout PSTORAGE_DEVICE_POWER_CAP_UNITS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_DEVICE_POWER_CAP {
     *     DWORD Version;
     *     DWORD Size;
     *     STORAGE_DEVICE_POWER_CAP_UNITS Units;
     *     DWORDLONG MaxPower;
     * } *PSTORAGE_DEVICE_POWER_CAP
     * }
     */
    public static final AddressLayout PSTORAGE_DEVICE_POWER_CAP = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_RPMB_DATA_FRAME {
     *     BYTE Stuff[196];
     *     BYTE KeyOrMAC[32];
     *     BYTE Data[256];
     *     BYTE Nonce[16];
     *     BYTE WriteCounter[4];
     *     BYTE Address[2];
     *     BYTE BlockCount[2];
     *     BYTE OperationResult[2];
     *     BYTE RequestOrResponseType[2];
     * } *PSTORAGE_RPMB_DATA_FRAME
     * }
     */
    public static final AddressLayout PSTORAGE_RPMB_DATA_FRAME = wgl_h.C_POINTER;
    private static final int StorRpmbProgramAuthKey = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_RPMB_COMMAND_TYPE.StorRpmbProgramAuthKey = 1
     * }
     */
    public static int StorRpmbProgramAuthKey() {
        return StorRpmbProgramAuthKey;
    }
    private static final int StorRpmbQueryWriteCounter = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_RPMB_COMMAND_TYPE.StorRpmbQueryWriteCounter = 2
     * }
     */
    public static int StorRpmbQueryWriteCounter() {
        return StorRpmbQueryWriteCounter;
    }
    private static final int StorRpmbAuthenticatedWrite = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_RPMB_COMMAND_TYPE.StorRpmbAuthenticatedWrite = 3
     * }
     */
    public static int StorRpmbAuthenticatedWrite() {
        return StorRpmbAuthenticatedWrite;
    }
    private static final int StorRpmbAuthenticatedRead = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_RPMB_COMMAND_TYPE.StorRpmbAuthenticatedRead = 4
     * }
     */
    public static int StorRpmbAuthenticatedRead() {
        return StorRpmbAuthenticatedRead;
    }
    private static final int StorRpmbReadResultRequest = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_RPMB_COMMAND_TYPE.StorRpmbReadResultRequest = 5
     * }
     */
    public static int StorRpmbReadResultRequest() {
        return StorRpmbReadResultRequest;
    }
    private static final int StorRpmbAuthenticatedDeviceConfigWrite = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_RPMB_COMMAND_TYPE.StorRpmbAuthenticatedDeviceConfigWrite = 6
     * }
     */
    public static int StorRpmbAuthenticatedDeviceConfigWrite() {
        return StorRpmbAuthenticatedDeviceConfigWrite;
    }
    private static final int StorRpmbAuthenticatedDeviceConfigRead = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_RPMB_COMMAND_TYPE.StorRpmbAuthenticatedDeviceConfigRead = 7
     * }
     */
    public static int StorRpmbAuthenticatedDeviceConfigRead() {
        return StorRpmbAuthenticatedDeviceConfigRead;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_RPMB_COMMAND_TYPE {
     *     StorRpmbProgramAuthKey = 1,
     *     StorRpmbQueryWriteCounter = 2,
     *     StorRpmbAuthenticatedWrite = 3,
     *     StorRpmbAuthenticatedRead = 4,
     *     StorRpmbReadResultRequest = 5,
     *     StorRpmbAuthenticatedDeviceConfigWrite = 6,
     *     StorRpmbAuthenticatedDeviceConfigRead = 7
     * } *PSTORAGE_RPMB_COMMAND_TYPE
     * }
     */
    public static final AddressLayout PSTORAGE_RPMB_COMMAND_TYPE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_EVENT_NOTIFICATION {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORDLONG Events;
     * } *PSTORAGE_EVENT_NOTIFICATION
     * }
     */
    public static final AddressLayout PSTORAGE_EVENT_NOTIFICATION = wgl_h.C_POINTER;
    private static final int StorageCounterTypeUnknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeUnknown = 0
     * }
     */
    public static int StorageCounterTypeUnknown() {
        return StorageCounterTypeUnknown;
    }
    private static final int StorageCounterTypeTemperatureCelsius = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeTemperatureCelsius = 1
     * }
     */
    public static int StorageCounterTypeTemperatureCelsius() {
        return StorageCounterTypeTemperatureCelsius;
    }
    private static final int StorageCounterTypeTemperatureCelsiusMax = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeTemperatureCelsiusMax = 2
     * }
     */
    public static int StorageCounterTypeTemperatureCelsiusMax() {
        return StorageCounterTypeTemperatureCelsiusMax;
    }
    private static final int StorageCounterTypeReadErrorsTotal = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeReadErrorsTotal = 3
     * }
     */
    public static int StorageCounterTypeReadErrorsTotal() {
        return StorageCounterTypeReadErrorsTotal;
    }
    private static final int StorageCounterTypeReadErrorsCorrected = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeReadErrorsCorrected = 4
     * }
     */
    public static int StorageCounterTypeReadErrorsCorrected() {
        return StorageCounterTypeReadErrorsCorrected;
    }
    private static final int StorageCounterTypeReadErrorsUncorrected = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeReadErrorsUncorrected = 5
     * }
     */
    public static int StorageCounterTypeReadErrorsUncorrected() {
        return StorageCounterTypeReadErrorsUncorrected;
    }
    private static final int StorageCounterTypeWriteErrorsTotal = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeWriteErrorsTotal = 6
     * }
     */
    public static int StorageCounterTypeWriteErrorsTotal() {
        return StorageCounterTypeWriteErrorsTotal;
    }
    private static final int StorageCounterTypeWriteErrorsCorrected = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeWriteErrorsCorrected = 7
     * }
     */
    public static int StorageCounterTypeWriteErrorsCorrected() {
        return StorageCounterTypeWriteErrorsCorrected;
    }
    private static final int StorageCounterTypeWriteErrorsUncorrected = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeWriteErrorsUncorrected = 8
     * }
     */
    public static int StorageCounterTypeWriteErrorsUncorrected() {
        return StorageCounterTypeWriteErrorsUncorrected;
    }
    private static final int StorageCounterTypeManufactureDate = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeManufactureDate = 9
     * }
     */
    public static int StorageCounterTypeManufactureDate() {
        return StorageCounterTypeManufactureDate;
    }
    private static final int StorageCounterTypeStartStopCycleCount = (int)10L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeStartStopCycleCount = 10
     * }
     */
    public static int StorageCounterTypeStartStopCycleCount() {
        return StorageCounterTypeStartStopCycleCount;
    }
    private static final int StorageCounterTypeStartStopCycleCountMax = (int)11L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeStartStopCycleCountMax = 11
     * }
     */
    public static int StorageCounterTypeStartStopCycleCountMax() {
        return StorageCounterTypeStartStopCycleCountMax;
    }
    private static final int StorageCounterTypeLoadUnloadCycleCount = (int)12L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeLoadUnloadCycleCount = 12
     * }
     */
    public static int StorageCounterTypeLoadUnloadCycleCount() {
        return StorageCounterTypeLoadUnloadCycleCount;
    }
    private static final int StorageCounterTypeLoadUnloadCycleCountMax = (int)13L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeLoadUnloadCycleCountMax = 13
     * }
     */
    public static int StorageCounterTypeLoadUnloadCycleCountMax() {
        return StorageCounterTypeLoadUnloadCycleCountMax;
    }
    private static final int StorageCounterTypeWearPercentage = (int)14L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeWearPercentage = 14
     * }
     */
    public static int StorageCounterTypeWearPercentage() {
        return StorageCounterTypeWearPercentage;
    }
    private static final int StorageCounterTypeWearPercentageWarning = (int)15L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeWearPercentageWarning = 15
     * }
     */
    public static int StorageCounterTypeWearPercentageWarning() {
        return StorageCounterTypeWearPercentageWarning;
    }
    private static final int StorageCounterTypeWearPercentageMax = (int)16L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeWearPercentageMax = 16
     * }
     */
    public static int StorageCounterTypeWearPercentageMax() {
        return StorageCounterTypeWearPercentageMax;
    }
    private static final int StorageCounterTypePowerOnHours = (int)17L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypePowerOnHours = 17
     * }
     */
    public static int StorageCounterTypePowerOnHours() {
        return StorageCounterTypePowerOnHours;
    }
    private static final int StorageCounterTypeReadLatency100NSMax = (int)18L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeReadLatency100NSMax = 18
     * }
     */
    public static int StorageCounterTypeReadLatency100NSMax() {
        return StorageCounterTypeReadLatency100NSMax;
    }
    private static final int StorageCounterTypeWriteLatency100NSMax = (int)19L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeWriteLatency100NSMax = 19
     * }
     */
    public static int StorageCounterTypeWriteLatency100NSMax() {
        return StorageCounterTypeWriteLatency100NSMax;
    }
    private static final int StorageCounterTypeFlushLatency100NSMax = (int)20L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeFlushLatency100NSMax = 20
     * }
     */
    public static int StorageCounterTypeFlushLatency100NSMax() {
        return StorageCounterTypeFlushLatency100NSMax;
    }
    private static final int StorageCounterTypeMax = (int)21L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_COUNTER_TYPE.StorageCounterTypeMax = 21
     * }
     */
    public static int StorageCounterTypeMax() {
        return StorageCounterTypeMax;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_COUNTER_TYPE {
     *     StorageCounterTypeUnknown = 0,
     *     StorageCounterTypeTemperatureCelsius,
     *     StorageCounterTypeTemperatureCelsiusMax,
     *     StorageCounterTypeReadErrorsTotal,
     *     StorageCounterTypeReadErrorsCorrected,
     *     StorageCounterTypeReadErrorsUncorrected,
     *     StorageCounterTypeWriteErrorsTotal,
     *     StorageCounterTypeWriteErrorsCorrected,
     *     StorageCounterTypeWriteErrorsUncorrected,
     *     StorageCounterTypeManufactureDate,
     *     StorageCounterTypeStartStopCycleCount,
     *     StorageCounterTypeStartStopCycleCountMax,
     *     StorageCounterTypeLoadUnloadCycleCount,
     *     StorageCounterTypeLoadUnloadCycleCountMax,
     *     StorageCounterTypeWearPercentage,
     *     StorageCounterTypeWearPercentageWarning,
     *     StorageCounterTypeWearPercentageMax,
     *     StorageCounterTypePowerOnHours,
     *     StorageCounterTypeReadLatency100NSMax,
     *     StorageCounterTypeWriteLatency100NSMax,
     *     StorageCounterTypeFlushLatency100NSMax,
     *     StorageCounterTypeMax
     * } *PSTORAGE_COUNTER_TYPE
     * }
     */
    public static final AddressLayout PSTORAGE_COUNTER_TYPE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_COUNTER {
     *     STORAGE_COUNTER_TYPE Type;
     *     union {
     *         struct {
     *             DWORD Week;
     *             DWORD Year;
     *         } ManufactureDate;
     *         DWORDLONG AsUlonglong;
     *     } Value;
     * } *PSTORAGE_COUNTER
     * }
     */
    public static final AddressLayout PSTORAGE_COUNTER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_COUNTERS {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD NumberOfCounters;
     *     STORAGE_COUNTER Counters[1];
     * } *PSTORAGE_COUNTERS
     * }
     */
    public static final AddressLayout PSTORAGE_COUNTERS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_HW_FIRMWARE_INFO_QUERY {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD Flags;
     *     DWORD Reserved;
     * } *PSTORAGE_HW_FIRMWARE_INFO_QUERY
     * }
     */
    public static final AddressLayout PSTORAGE_HW_FIRMWARE_INFO_QUERY = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_HW_FIRMWARE_SLOT_INFO {
     *     DWORD Version;
     *     DWORD Size;
     *     BYTE SlotNumber;
     *     BYTE ReadOnly : 1;
     *     BYTE Reserved0 : 7;
     *     BYTE Reserved1[6];
     *     BYTE Revision[16];
     * } *PSTORAGE_HW_FIRMWARE_SLOT_INFO
     * }
     */
    public static final AddressLayout PSTORAGE_HW_FIRMWARE_SLOT_INFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_HW_FIRMWARE_INFO {
     *     DWORD Version;
     *     DWORD Size;
     *     BYTE SupportUpgrade : 1;
     *     BYTE Reserved0 : 7;
     *     BYTE SlotCount;
     *     BYTE ActiveSlot;
     *     BYTE PendingActivateSlot;
     *     BOOLEAN FirmwareShared;
     *     BYTE Reserved[3];
     *     DWORD ImagePayloadAlignment;
     *     DWORD ImagePayloadMaxSize;
     *     STORAGE_HW_FIRMWARE_SLOT_INFO Slot[1];
     * } *PSTORAGE_HW_FIRMWARE_INFO
     * }
     */
    public static final AddressLayout PSTORAGE_HW_FIRMWARE_INFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_HW_FIRMWARE_DOWNLOAD {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD Flags;
     *     BYTE Slot;
     *     BYTE Reserved[3];
     *     DWORDLONG Offset;
     *     DWORDLONG BufferSize;
     *     BYTE ImageBuffer[1];
     * } *PSTORAGE_HW_FIRMWARE_DOWNLOAD
     * }
     */
    public static final AddressLayout PSTORAGE_HW_FIRMWARE_DOWNLOAD = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_HW_FIRMWARE_DOWNLOAD_V2 {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD Flags;
     *     BYTE Slot;
     *     BYTE Reserved[3];
     *     DWORDLONG Offset;
     *     DWORDLONG BufferSize;
     *     DWORD ImageSize;
     *     DWORD Reserved2;
     *     BYTE ImageBuffer[1];
     * } *PSTORAGE_HW_FIRMWARE_DOWNLOAD_V2
     * }
     */
    public static final AddressLayout PSTORAGE_HW_FIRMWARE_DOWNLOAD_V2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_HW_FIRMWARE_ACTIVATE {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD Flags;
     *     BYTE Slot;
     *     BYTE Reserved0[3];
     * } *PSTORAGE_HW_FIRMWARE_ACTIVATE
     * }
     */
    public static final AddressLayout PSTORAGE_HW_FIRMWARE_ACTIVATE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_PROTOCOL_COMMAND {
     *     DWORD Version;
     *     DWORD Length;
     *     STORAGE_PROTOCOL_TYPE ProtocolType;
     *     DWORD Flags;
     *     DWORD ReturnStatus;
     *     DWORD ErrorCode;
     *     DWORD CommandLength;
     *     DWORD ErrorInfoLength;
     *     DWORD DataToDeviceTransferLength;
     *     DWORD DataFromDeviceTransferLength;
     *     DWORD TimeOutValue;
     *     DWORD ErrorInfoOffset;
     *     DWORD DataToDeviceBufferOffset;
     *     DWORD DataFromDeviceBufferOffset;
     *     DWORD CommandSpecific;
     *     DWORD Reserved0;
     *     DWORD FixedProtocolReturnData;
     *     DWORD Reserved1[3];
     *     BYTE Command[1];
     * } *PSTORAGE_PROTOCOL_COMMAND
     * }
     */
    public static final AddressLayout PSTORAGE_PROTOCOL_COMMAND = wgl_h.C_POINTER;
    private static final int StorAttributeMgmt_ClearAttribute = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ATTRIBUTE_MGMT_ACTION.StorAttributeMgmt_ClearAttribute = 0
     * }
     */
    public static int StorAttributeMgmt_ClearAttribute() {
        return StorAttributeMgmt_ClearAttribute;
    }
    private static final int StorAttributeMgmt_SetAttribute = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ATTRIBUTE_MGMT_ACTION.StorAttributeMgmt_SetAttribute = 1
     * }
     */
    public static int StorAttributeMgmt_SetAttribute() {
        return StorAttributeMgmt_SetAttribute;
    }
    private static final int StorAttributeMgmt_ResetAttribute = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_ATTRIBUTE_MGMT_ACTION.StorAttributeMgmt_ResetAttribute = 2
     * }
     */
    public static int StorAttributeMgmt_ResetAttribute() {
        return StorAttributeMgmt_ResetAttribute;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_ATTRIBUTE_MGMT_ACTION {
     *     StorAttributeMgmt_ClearAttribute = 0,
     *     StorAttributeMgmt_SetAttribute = 1,
     *     StorAttributeMgmt_ResetAttribute = 2
     * } *PSTORAGE_ATTRIBUTE_MGMT_ACTION
     * }
     */
    public static final AddressLayout PSTORAGE_ATTRIBUTE_MGMT_ACTION = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_ATTRIBUTE_MGMT {
     *     DWORD Version;
     *     DWORD Size;
     *     STORAGE_ATTRIBUTE_MGMT_ACTION Action;
     *     DWORD Attribute;
     * } *PSTORAGE_ATTRIBUTE_MGMT
     * }
     */
    public static final AddressLayout PSTORAGE_ATTRIBUTE_MGMT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_HEALTH_NOTIFICATION_DATA {
     *     GUID DeviceGuid;
     * } *PSCM_PD_HEALTH_NOTIFICATION_DATA
     * }
     */
    public static final AddressLayout PSCM_PD_HEALTH_NOTIFICATION_DATA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_LOGICAL_DEVICE_INSTANCE {
     *     DWORD Version;
     *     DWORD Size;
     *     GUID DeviceGuid;
     *     WCHAR SymbolicLink[256];
     * } *PSCM_LOGICAL_DEVICE_INSTANCE
     * }
     */
    public static final AddressLayout PSCM_LOGICAL_DEVICE_INSTANCE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_LOGICAL_DEVICES {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD DeviceCount;
     *     SCM_LOGICAL_DEVICE_INSTANCE Devices[1];
     * } *PSCM_LOGICAL_DEVICES
     * }
     */
    public static final AddressLayout PSCM_LOGICAL_DEVICES = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PHYSICAL_DEVICE_INSTANCE {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD NfitHandle;
     *     WCHAR SymbolicLink[256];
     * } *PSCM_PHYSICAL_DEVICE_INSTANCE
     * }
     */
    public static final AddressLayout PSCM_PHYSICAL_DEVICE_INSTANCE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PHYSICAL_DEVICES {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD DeviceCount;
     *     SCM_PHYSICAL_DEVICE_INSTANCE Devices[1];
     * } *PSCM_PHYSICAL_DEVICES
     * }
     */
    public static final AddressLayout PSCM_PHYSICAL_DEVICES = wgl_h.C_POINTER;
    private static final int ScmRegionFlagNone = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _SCM_REGION_FLAG.ScmRegionFlagNone = 0
     * }
     */
    public static int ScmRegionFlagNone() {
        return ScmRegionFlagNone;
    }
    private static final int ScmRegionFlagLabel = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _SCM_REGION_FLAG.ScmRegionFlagLabel = 1
     * }
     */
    public static int ScmRegionFlagLabel() {
        return ScmRegionFlagLabel;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _SCM_REGION_FLAG {
     *     ScmRegionFlagNone = 0,
     *     ScmRegionFlagLabel = 1
     * } *PSCM_REGION_FLAG
     * }
     */
    public static final AddressLayout PSCM_REGION_FLAG = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_REGION {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD Flags;
     *     DWORD NfitHandle;
     *     GUID LogicalDeviceGuid;
     *     GUID AddressRangeType;
     *     DWORD AssociatedId;
     *     DWORD64 Length;
     *     DWORD64 StartingDPA;
     *     DWORD64 BaseSPA;
     *     DWORD64 SPAOffset;
     *     DWORD64 RegionOffset;
     * } *PSCM_REGION
     * }
     */
    public static final AddressLayout PSCM_REGION = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_REGIONS {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD RegionCount;
     *     SCM_REGION Regions[1];
     * } *PSCM_REGIONS
     * }
     */
    public static final AddressLayout PSCM_REGIONS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_INTERLEAVED_PD_INFO {
     *     DWORD DeviceHandle;
     *     GUID DeviceGuid;
     * } *PSCM_INTERLEAVED_PD_INFO
     * }
     */
    public static final AddressLayout PSCM_INTERLEAVED_PD_INFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_LD_INTERLEAVE_SET_INFO {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD InterleaveSetSize;
     *     SCM_INTERLEAVED_PD_INFO InterleaveSet[1];
     * } *PSCM_LD_INTERLEAVE_SET_INFO
     * }
     */
    public static final AddressLayout PSCM_LD_INTERLEAVE_SET_INFO = wgl_h.C_POINTER;
    private static final int ScmPhysicalDeviceQuery_Descriptor = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_QUERY_TYPE.ScmPhysicalDeviceQuery_Descriptor = 0
     * }
     */
    public static int ScmPhysicalDeviceQuery_Descriptor() {
        return ScmPhysicalDeviceQuery_Descriptor;
    }
    private static final int ScmPhysicalDeviceQuery_IsSupported = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_QUERY_TYPE.ScmPhysicalDeviceQuery_IsSupported = 1
     * }
     */
    public static int ScmPhysicalDeviceQuery_IsSupported() {
        return ScmPhysicalDeviceQuery_IsSupported;
    }
    private static final int ScmPhysicalDeviceQuery_Max = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_QUERY_TYPE.ScmPhysicalDeviceQuery_Max = 2
     * }
     */
    public static int ScmPhysicalDeviceQuery_Max() {
        return ScmPhysicalDeviceQuery_Max;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _SCM_PD_QUERY_TYPE {
     *     ScmPhysicalDeviceQuery_Descriptor = 0,
     *     ScmPhysicalDeviceQuery_IsSupported,
     *     ScmPhysicalDeviceQuery_Max
     * } *PSCM_PD_QUERY_TYPE
     * }
     */
    public static final AddressLayout PSCM_PD_QUERY_TYPE = wgl_h.C_POINTER;
    private static final int ScmPhysicalDeviceProperty_DeviceInfo = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_PROPERTY_ID.ScmPhysicalDeviceProperty_DeviceInfo = 0
     * }
     */
    public static int ScmPhysicalDeviceProperty_DeviceInfo() {
        return ScmPhysicalDeviceProperty_DeviceInfo;
    }
    private static final int ScmPhysicalDeviceProperty_ManagementStatus = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_PROPERTY_ID.ScmPhysicalDeviceProperty_ManagementStatus = 1
     * }
     */
    public static int ScmPhysicalDeviceProperty_ManagementStatus() {
        return ScmPhysicalDeviceProperty_ManagementStatus;
    }
    private static final int ScmPhysicalDeviceProperty_FirmwareInfo = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_PROPERTY_ID.ScmPhysicalDeviceProperty_FirmwareInfo = 2
     * }
     */
    public static int ScmPhysicalDeviceProperty_FirmwareInfo() {
        return ScmPhysicalDeviceProperty_FirmwareInfo;
    }
    private static final int ScmPhysicalDeviceProperty_LocationString = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_PROPERTY_ID.ScmPhysicalDeviceProperty_LocationString = 3
     * }
     */
    public static int ScmPhysicalDeviceProperty_LocationString() {
        return ScmPhysicalDeviceProperty_LocationString;
    }
    private static final int ScmPhysicalDeviceProperty_DeviceSpecificInfo = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_PROPERTY_ID.ScmPhysicalDeviceProperty_DeviceSpecificInfo = 4
     * }
     */
    public static int ScmPhysicalDeviceProperty_DeviceSpecificInfo() {
        return ScmPhysicalDeviceProperty_DeviceSpecificInfo;
    }
    private static final int ScmPhysicalDeviceProperty_DeviceHandle = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_PROPERTY_ID.ScmPhysicalDeviceProperty_DeviceHandle = 5
     * }
     */
    public static int ScmPhysicalDeviceProperty_DeviceHandle() {
        return ScmPhysicalDeviceProperty_DeviceHandle;
    }
    private static final int ScmPhysicalDeviceProperty_Max = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_PROPERTY_ID.ScmPhysicalDeviceProperty_Max = 6
     * }
     */
    public static int ScmPhysicalDeviceProperty_Max() {
        return ScmPhysicalDeviceProperty_Max;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _SCM_PD_PROPERTY_ID {
     *     ScmPhysicalDeviceProperty_DeviceInfo = 0,
     *     ScmPhysicalDeviceProperty_ManagementStatus,
     *     ScmPhysicalDeviceProperty_FirmwareInfo,
     *     ScmPhysicalDeviceProperty_LocationString,
     *     ScmPhysicalDeviceProperty_DeviceSpecificInfo,
     *     ScmPhysicalDeviceProperty_DeviceHandle,
     *     ScmPhysicalDeviceProperty_Max
     * } *PSCM_PD_PROPERTY_ID
     * }
     */
    public static final AddressLayout PSCM_PD_PROPERTY_ID = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_PROPERTY_QUERY {
     *     DWORD Version;
     *     DWORD Size;
     *     SCM_PD_PROPERTY_ID PropertyId;
     *     SCM_PD_QUERY_TYPE QueryType;
     *     BYTE AdditionalParameters[1];
     * } *PSCM_PD_PROPERTY_QUERY
     * }
     */
    public static final AddressLayout PSCM_PD_PROPERTY_QUERY = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_DESCRIPTOR_HEADER {
     *     DWORD Version;
     *     DWORD Size;
     * } *PSCM_PD_DESCRIPTOR_HEADER
     * }
     */
    public static final AddressLayout PSCM_PD_DESCRIPTOR_HEADER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_DEVICE_HANDLE {
     *     DWORD Version;
     *     DWORD Size;
     *     GUID DeviceGuid;
     *     DWORD DeviceHandle;
     * } *PSCM_PD_DEVICE_HANDLE
     * }
     */
    public static final AddressLayout PSCM_PD_DEVICE_HANDLE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_DEVICE_INFO {
     *     DWORD Version;
     *     DWORD Size;
     *     GUID DeviceGuid;
     *     DWORD UnsafeShutdownCount;
     *     DWORD64 PersistentMemorySizeInBytes;
     *     DWORD64 VolatileMemorySizeInBytes;
     *     DWORD64 TotalMemorySizeInBytes;
     *     DWORD SlotNumber;
     *     DWORD DeviceHandle;
     *     WORD PhysicalId;
     *     BYTE NumberOfFormatInterfaceCodes;
     *     WORD FormatInterfaceCodes[8];
     *     DWORD VendorId;
     *     DWORD ProductId;
     *     DWORD SubsystemDeviceId;
     *     DWORD SubsystemVendorId;
     *     BYTE ManufacturingLocation;
     *     BYTE ManufacturingWeek;
     *     BYTE ManufacturingYear;
     *     DWORD SerialNumber4Byte;
     *     DWORD SerialNumberLengthInChars;
     *     CHAR SerialNumber[1];
     * } *PSCM_PD_DEVICE_INFO
     * }
     */
    public static final AddressLayout PSCM_PD_DEVICE_INFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_DEVICE_SPECIFIC_PROPERTY {
     *     WCHAR Name[128];
     *     LONGLONG Value;
     * } *PSCM_PD_DEVICE_SPECIFIC_PROPERTY
     * }
     */
    public static final AddressLayout PSCM_PD_DEVICE_SPECIFIC_PROPERTY = wgl_h.C_POINTER;
}

