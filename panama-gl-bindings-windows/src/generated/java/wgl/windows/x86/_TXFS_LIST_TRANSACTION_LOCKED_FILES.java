// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _TXFS_LIST_TRANSACTION_LOCKED_FILES {
 *     GUID KtmTransaction;
 *     DWORDLONG NumberOfFiles;
 *     DWORDLONG BufferSizeRequired;
 *     DWORDLONG Offset;
 * }
 * }
 */
public class _TXFS_LIST_TRANSACTION_LOCKED_FILES {

    _TXFS_LIST_TRANSACTION_LOCKED_FILES() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _GUID.layout().withName("KtmTransaction"),
        wgl_h.C_LONG_LONG.withName("NumberOfFiles"),
        wgl_h.C_LONG_LONG.withName("BufferSizeRequired"),
        wgl_h.C_LONG_LONG.withName("Offset")
    ).withName("_TXFS_LIST_TRANSACTION_LOCKED_FILES");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout KtmTransaction$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("KtmTransaction"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GUID KtmTransaction
     * }
     */
    public static final GroupLayout KtmTransaction$layout() {
        return KtmTransaction$LAYOUT;
    }

    private static final long KtmTransaction$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GUID KtmTransaction
     * }
     */
    public static final long KtmTransaction$offset() {
        return KtmTransaction$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GUID KtmTransaction
     * }
     */
    public static MemorySegment KtmTransaction(MemorySegment struct) {
        return struct.asSlice(KtmTransaction$OFFSET, KtmTransaction$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GUID KtmTransaction
     * }
     */
    public static void KtmTransaction(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, KtmTransaction$OFFSET, KtmTransaction$LAYOUT.byteSize());
    }

    private static final OfLong NumberOfFiles$LAYOUT = (OfLong)$LAYOUT.select(groupElement("NumberOfFiles"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG NumberOfFiles
     * }
     */
    public static final OfLong NumberOfFiles$layout() {
        return NumberOfFiles$LAYOUT;
    }

    private static final long NumberOfFiles$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG NumberOfFiles
     * }
     */
    public static final long NumberOfFiles$offset() {
        return NumberOfFiles$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG NumberOfFiles
     * }
     */
    public static long NumberOfFiles(MemorySegment struct) {
        return struct.get(NumberOfFiles$LAYOUT, NumberOfFiles$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG NumberOfFiles
     * }
     */
    public static void NumberOfFiles(MemorySegment struct, long fieldValue) {
        struct.set(NumberOfFiles$LAYOUT, NumberOfFiles$OFFSET, fieldValue);
    }

    private static final OfLong BufferSizeRequired$LAYOUT = (OfLong)$LAYOUT.select(groupElement("BufferSizeRequired"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG BufferSizeRequired
     * }
     */
    public static final OfLong BufferSizeRequired$layout() {
        return BufferSizeRequired$LAYOUT;
    }

    private static final long BufferSizeRequired$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG BufferSizeRequired
     * }
     */
    public static final long BufferSizeRequired$offset() {
        return BufferSizeRequired$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG BufferSizeRequired
     * }
     */
    public static long BufferSizeRequired(MemorySegment struct) {
        return struct.get(BufferSizeRequired$LAYOUT, BufferSizeRequired$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG BufferSizeRequired
     * }
     */
    public static void BufferSizeRequired(MemorySegment struct, long fieldValue) {
        struct.set(BufferSizeRequired$LAYOUT, BufferSizeRequired$OFFSET, fieldValue);
    }

    private static final OfLong Offset$LAYOUT = (OfLong)$LAYOUT.select(groupElement("Offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG Offset
     * }
     */
    public static final OfLong Offset$layout() {
        return Offset$LAYOUT;
    }

    private static final long Offset$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG Offset
     * }
     */
    public static final long Offset$offset() {
        return Offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG Offset
     * }
     */
    public static long Offset(MemorySegment struct) {
        return struct.get(Offset$LAYOUT, Offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG Offset
     * }
     */
    public static void Offset(MemorySegment struct, long fieldValue) {
        struct.set(Offset$LAYOUT, Offset$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

