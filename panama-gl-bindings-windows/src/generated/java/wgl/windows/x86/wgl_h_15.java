// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class wgl_h_15 extends wgl_h_14 {

    public static OfAddress PCACTIVATION_CONTEXT_DETAILED_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHARDWARE_COUNTER_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPERFORMANCE_DATA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RtlGetDeviceFamilyInfoEnum$MH() {
        return RuntimeHelper.requireNonNull(constants$121.RtlGetDeviceFamilyInfoEnum$MH,"RtlGetDeviceFamilyInfoEnum");
    }
    public static void RtlGetDeviceFamilyInfoEnum ( Addressable pullUAPInfo,  Addressable pulDeviceFamily,  Addressable pulDeviceForm) {
        var mh$ = RtlGetDeviceFamilyInfoEnum$MH();
        try {
            mh$.invokeExact(pullUAPInfo, pulDeviceFamily, pulDeviceForm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlConvertDeviceFamilyInfoToString$MH() {
        return RuntimeHelper.requireNonNull(constants$121.RtlConvertDeviceFamilyInfoToString$MH,"RtlConvertDeviceFamilyInfoToString");
    }
    public static int RtlConvertDeviceFamilyInfoToString ( Addressable pulDeviceFamilyBufferSize,  Addressable pulDeviceFormBufferSize,  Addressable DeviceFamily,  Addressable DeviceForm) {
        var mh$ = RtlConvertDeviceFamilyInfoToString$MH();
        try {
            return (int)mh$.invokeExact(pulDeviceFamilyBufferSize, pulDeviceFormBufferSize, DeviceFamily, DeviceForm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlSwitchedVVI$MH() {
        return RuntimeHelper.requireNonNull(constants$121.RtlSwitchedVVI$MH,"RtlSwitchedVVI");
    }
    public static int RtlSwitchedVVI ( Addressable VersionInfo,  int TypeMask,  long ConditionMask) {
        var mh$ = RtlSwitchedVVI$MH();
        try {
            return (int)mh$.invokeExact(VersionInfo, TypeMask, ConditionMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PEVENTLOGRECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEVENTSFORLOGFILE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPACKEDEVENTINFO = Constants$root.C_POINTER$LAYOUT;
    public static int DriverType() {
        return (int)1L;
    }
    public static int FileSystemType() {
        return (int)2L;
    }
    public static int Win32ServiceOwnProcess() {
        return (int)16L;
    }
    public static int Win32ServiceShareProcess() {
        return (int)32L;
    }
    public static int AdapterType() {
        return (int)4L;
    }
    public static int RecognizerType() {
        return (int)8L;
    }
    public static int BootLoad() {
        return (int)0L;
    }
    public static int SystemLoad() {
        return (int)1L;
    }
    public static int AutoLoad() {
        return (int)2L;
    }
    public static int DemandLoad() {
        return (int)3L;
    }
    public static int DisableLoad() {
        return (int)4L;
    }
    public static int IgnoreError() {
        return (int)0L;
    }
    public static int NormalError() {
        return (int)1L;
    }
    public static int SevereError() {
        return (int)2L;
    }
    public static int CriticalError() {
        return (int)3L;
    }
    public static OfAddress PTAPE_ERASE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTAPE_PREPARE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTAPE_WRITE_MARKS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTAPE_GET_POSITION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTAPE_SET_POSITION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTAPE_GET_DRIVE_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTAPE_SET_DRIVE_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTAPE_GET_MEDIA_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTAPE_SET_MEDIA_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTAPE_CREATE_PARTITION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTAPE_WMI_OPERATIONS = Constants$root.C_POINTER$LAYOUT;
    public static int TapeDriveProblemNone() {
        return (int)0L;
    }
    public static int TapeDriveReadWriteWarning() {
        return (int)1L;
    }
    public static int TapeDriveReadWriteError() {
        return (int)2L;
    }
    public static int TapeDriveReadWarning() {
        return (int)3L;
    }
    public static int TapeDriveWriteWarning() {
        return (int)4L;
    }
    public static int TapeDriveReadError() {
        return (int)5L;
    }
    public static int TapeDriveWriteError() {
        return (int)6L;
    }
    public static int TapeDriveHardwareError() {
        return (int)7L;
    }
    public static int TapeDriveUnsupportedMedia() {
        return (int)8L;
    }
    public static int TapeDriveScsiConnectionError() {
        return (int)9L;
    }
    public static int TapeDriveTimetoClean() {
        return (int)10L;
    }
    public static int TapeDriveCleanDriveNow() {
        return (int)11L;
    }
    public static int TapeDriveMediaLifeExpired() {
        return (int)12L;
    }
    public static int TapeDriveSnappedTape() {
        return (int)13L;
    }
    public static OfAddress PUOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRM_PROTOCOL_ID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTION_NOTIFICATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSAVEPOINT_ID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PKCRM_MARSHAL_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRKCRM_MARSHAL_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PKCRM_TRANSACTION_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRKCRM_TRANSACTION_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PKCRM_PROTOCOL_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRKCRM_PROTOCOL_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static int TransactionOutcomeUndetermined() {
        return (int)1L;
    }
    public static int TransactionOutcomeCommitted() {
        return (int)2L;
    }
    public static int TransactionOutcomeAborted() {
        return (int)3L;
    }
    public static int TransactionStateNormal() {
        return (int)1L;
    }
    public static int TransactionStateIndoubt() {
        return (int)2L;
    }
    public static int TransactionStateCommittedNotify() {
        return (int)3L;
    }
    public static OfAddress PTRANSACTION_BASIC_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTIONMANAGER_BASIC_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTIONMANAGER_LOG_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTIONMANAGER_LOGPATH_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTIONMANAGER_RECOVERY_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTIONMANAGER_OLDEST_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTION_PROPERTIES_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTION_BIND_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTION_ENLISTMENT_PAIR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTION_ENLISTMENTS_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRESOURCEMANAGER_BASIC_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRESOURCEMANAGER_COMPLETION_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static int TransactionBasicInformation() {
        return (int)0L;
    }
    public static int TransactionPropertiesInformation() {
        return (int)1L;
    }
    public static int TransactionEnlistmentInformation() {
        return (int)2L;
    }
    public static int TransactionSuperiorEnlistmentInformation() {
        return (int)3L;
    }
    public static int TransactionBindInformation() {
        return (int)4L;
    }
    public static int TransactionDTCPrivateInformation() {
        return (int)5L;
    }
    public static int TransactionManagerBasicInformation() {
        return (int)0L;
    }
    public static int TransactionManagerLogInformation() {
        return (int)1L;
    }
    public static int TransactionManagerLogPathInformation() {
        return (int)2L;
    }
    public static int TransactionManagerRecoveryInformation() {
        return (int)4L;
    }
    public static int TransactionManagerOnlineProbeInformation() {
        return (int)3L;
    }
    public static int TransactionManagerOldestTransactionInformation() {
        return (int)5L;
    }
    public static int ResourceManagerBasicInformation() {
        return (int)0L;
    }
    public static int ResourceManagerCompletionInformation() {
        return (int)1L;
    }
    public static OfAddress PENLISTMENT_BASIC_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENLISTMENT_CRM_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static int EnlistmentBasicInformation() {
        return (int)0L;
    }
    public static int EnlistmentRecoveryInformation() {
        return (int)1L;
    }
    public static int EnlistmentCrmInformation() {
        return (int)2L;
    }
    public static OfAddress PTRANSACTION_LIST_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTION_LIST_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static int KTMOBJECT_TRANSACTION() {
        return (int)0L;
    }
    public static int KTMOBJECT_TRANSACTION_MANAGER() {
        return (int)1L;
    }
    public static int KTMOBJECT_RESOURCE_MANAGER() {
        return (int)2L;
    }
    public static int KTMOBJECT_ENLISTMENT() {
        return (int)3L;
    }
    public static int KTMOBJECT_INVALID() {
        return (int)4L;
    }
    public static OfAddress PKTMOBJECT_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PKTMOBJECT_CURSOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTP_VERSION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTP_CALLBACK_INSTANCE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTP_POOL = Constants$root.C_POINTER$LAYOUT;
    public static int TP_CALLBACK_PRIORITY_HIGH() {
        return (int)0L;
    }
    public static int TP_CALLBACK_PRIORITY_NORMAL() {
        return (int)1L;
    }
    public static int TP_CALLBACK_PRIORITY_LOW() {
        return (int)2L;
    }
    public static int TP_CALLBACK_PRIORITY_INVALID() {
        return (int)3L;
    }
    public static int TP_CALLBACK_PRIORITY_COUNT() {
        return (int)3L;
    }
    public static OfAddress PTP_POOL_STACK_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTP_CLEANUP_GROUP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTP_CALLBACK_ENVIRON = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle TpInitializeCallbackEnviron$MH() {
        return RuntimeHelper.requireNonNull(constants$122.TpInitializeCallbackEnviron$MH,"TpInitializeCallbackEnviron");
    }
    public static void TpInitializeCallbackEnviron ( Addressable CallbackEnviron) {
        var mh$ = TpInitializeCallbackEnviron$MH();
        try {
            mh$.invokeExact(CallbackEnviron);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpSetCallbackThreadpool$MH() {
        return RuntimeHelper.requireNonNull(constants$122.TpSetCallbackThreadpool$MH,"TpSetCallbackThreadpool");
    }
    public static void TpSetCallbackThreadpool ( Addressable CallbackEnviron,  Addressable Pool) {
        var mh$ = TpSetCallbackThreadpool$MH();
        try {
            mh$.invokeExact(CallbackEnviron, Pool);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpSetCallbackCleanupGroup$MH() {
        return RuntimeHelper.requireNonNull(constants$123.TpSetCallbackCleanupGroup$MH,"TpSetCallbackCleanupGroup");
    }
    public static void TpSetCallbackCleanupGroup ( Addressable CallbackEnviron,  Addressable CleanupGroup,  Addressable CleanupGroupCancelCallback) {
        var mh$ = TpSetCallbackCleanupGroup$MH();
        try {
            mh$.invokeExact(CallbackEnviron, CleanupGroup, CleanupGroupCancelCallback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpSetCallbackActivationContext$MH() {
        return RuntimeHelper.requireNonNull(constants$123.TpSetCallbackActivationContext$MH,"TpSetCallbackActivationContext");
    }
    public static void TpSetCallbackActivationContext ( Addressable CallbackEnviron,  Addressable ActivationContext) {
        var mh$ = TpSetCallbackActivationContext$MH();
        try {
            mh$.invokeExact(CallbackEnviron, ActivationContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpSetCallbackNoActivationContext$MH() {
        return RuntimeHelper.requireNonNull(constants$123.TpSetCallbackNoActivationContext$MH,"TpSetCallbackNoActivationContext");
    }
    public static void TpSetCallbackNoActivationContext ( Addressable CallbackEnviron) {
        var mh$ = TpSetCallbackNoActivationContext$MH();
        try {
            mh$.invokeExact(CallbackEnviron);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpSetCallbackLongFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$123.TpSetCallbackLongFunction$MH,"TpSetCallbackLongFunction");
    }
    public static void TpSetCallbackLongFunction ( Addressable CallbackEnviron) {
        var mh$ = TpSetCallbackLongFunction$MH();
        try {
            mh$.invokeExact(CallbackEnviron);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpSetCallbackRaceWithDll$MH() {
        return RuntimeHelper.requireNonNull(constants$123.TpSetCallbackRaceWithDll$MH,"TpSetCallbackRaceWithDll");
    }
    public static void TpSetCallbackRaceWithDll ( Addressable CallbackEnviron,  Addressable DllHandle) {
        var mh$ = TpSetCallbackRaceWithDll$MH();
        try {
            mh$.invokeExact(CallbackEnviron, DllHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpSetCallbackFinalizationCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$123.TpSetCallbackFinalizationCallback$MH,"TpSetCallbackFinalizationCallback");
    }
    public static void TpSetCallbackFinalizationCallback ( Addressable CallbackEnviron,  Addressable FinalizationCallback) {
        var mh$ = TpSetCallbackFinalizationCallback$MH();
        try {
            mh$.invokeExact(CallbackEnviron, FinalizationCallback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpSetCallbackPriority$MH() {
        return RuntimeHelper.requireNonNull(constants$124.TpSetCallbackPriority$MH,"TpSetCallbackPriority");
    }
    public static void TpSetCallbackPriority ( Addressable CallbackEnviron,  int Priority) {
        var mh$ = TpSetCallbackPriority$MH();
        try {
            mh$.invokeExact(CallbackEnviron, Priority);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpSetCallbackPersistent$MH() {
        return RuntimeHelper.requireNonNull(constants$124.TpSetCallbackPersistent$MH,"TpSetCallbackPersistent");
    }
    public static void TpSetCallbackPersistent ( Addressable CallbackEnviron) {
        var mh$ = TpSetCallbackPersistent$MH();
        try {
            mh$.invokeExact(CallbackEnviron);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpDestroyCallbackEnviron$MH() {
        return RuntimeHelper.requireNonNull(constants$124.TpDestroyCallbackEnviron$MH,"TpDestroyCallbackEnviron");
    }
    public static void TpDestroyCallbackEnviron ( Addressable CallbackEnviron) {
        var mh$ = TpDestroyCallbackEnviron$MH();
        try {
            mh$.invokeExact(CallbackEnviron);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PTP_WORK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTP_TIMER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTP_WAIT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTP_IO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle NtCurrentTeb$MH() {
        return RuntimeHelper.requireNonNull(constants$125.NtCurrentTeb$MH,"NtCurrentTeb");
    }
    public static MemoryAddress NtCurrentTeb () {
        var mh$ = NtCurrentTeb$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentFiber$MH() {
        return RuntimeHelper.requireNonNull(constants$125.GetCurrentFiber$MH,"GetCurrentFiber");
    }
    public static MemoryAddress GetCurrentFiber () {
        var mh$ = GetCurrentFiber$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFiberData$MH() {
        return RuntimeHelper.requireNonNull(constants$125.GetFiberData$MH,"GetFiberData");
    }
    public static MemoryAddress GetFiberData () {
        var mh$ = GetFiberData$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong LPARAM = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong LRESULT = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress SPHANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPHANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HGLOBAL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HLOCAL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GLOBALHANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LOCALHANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HKEY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHKEY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HMETAFILE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HINSTANCE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HMODULE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HRGN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HRSRC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HSPRITE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HLSURF = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HTASK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HWINSTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HKL = Constants$root.C_POINTER$LAYOUT;
    public static OfInt HFILE = Constants$root.C_LONG$LAYOUT;
    public static OfAddress PFILETIME = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPFILETIME = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HWND = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HHOOK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HGDIOBJ = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HACCEL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HBITMAP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HBRUSH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HCOLORSPACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HDC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HGLRC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HDESK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HENHMETAFILE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HFONT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HICON = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HMENU = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HPALETTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HPEN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HWINEVENTHOOK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HMONITOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HUMPD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HCURSOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCOLORREF = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPRECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPRECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCRECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRECTL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPRECTL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCRECTL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOINT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPPOINT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPOINT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOINTL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSIZE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSIZE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSIZEL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSIZEL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOINTS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPOINTS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress DPI_AWARENESS_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static int DPI_AWARENESS_INVALID() {
        return (int)-1L;
    }
    public static int DPI_AWARENESS_UNAWARE() {
        return (int)0L;
    }
    public static int DPI_AWARENESS_SYSTEM_AWARE() {
        return (int)1L;
    }
    public static int DPI_AWARENESS_PER_MONITOR_AWARE() {
        return (int)2L;
    }
    public static int DPI_HOSTING_BEHAVIOR_INVALID() {
        return (int)-1L;
    }
    public static int DPI_HOSTING_BEHAVIOR_DEFAULT() {
        return (int)0L;
    }
    public static int DPI_HOSTING_BEHAVIOR_MIXED() {
        return (int)1L;
    }
    public static OfAddress PSECURITY_ATTRIBUTES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSECURITY_ATTRIBUTES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOVERLAPPED = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOVERLAPPED_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEMTIME = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSYSTEMTIME = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWIN32_FIND_DATAA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWIN32_FIND_DATAA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWIN32_FIND_DATAW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWIN32_FIND_DATAW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWIN32_FIND_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWIN32_FIND_DATA = Constants$root.C_POINTER$LAYOUT;
    public static int FindExInfoStandard() {
        return (int)0L;
    }
    public static int FindExInfoBasic() {
        return (int)1L;
    }
    public static int FindExInfoMaxInfoLevel() {
        return (int)2L;
    }
    public static int FindExSearchNameMatch() {
        return (int)0L;
    }
    public static int FindExSearchLimitToDirectories() {
        return (int)1L;
    }
    public static int FindExSearchLimitToDevices() {
        return (int)2L;
    }
    public static int FindExSearchMaxSearchOp() {
        return (int)3L;
    }
    public static int ReadDirectoryNotifyInformation() {
        return (int)1L;
    }
    public static int ReadDirectoryNotifyExtendedInformation() {
        return (int)2L;
    }
    public static OfAddress PREAD_DIRECTORY_NOTIFY_INFORMATION_CLASS = Constants$root.C_POINTER$LAYOUT;
    public static int GetFileExInfoStandard() {
        return (int)0L;
    }
    public static int GetFileExMaxInfoLevel() {
        return (int)1L;
    }
    public static int FileBasicInfo() {
        return (int)0L;
    }
    public static int FileStandardInfo() {
        return (int)1L;
    }
    public static int FileNameInfo() {
        return (int)2L;
    }
    public static int FileRenameInfo() {
        return (int)3L;
    }
    public static int FileDispositionInfo() {
        return (int)4L;
    }
    public static int FileAllocationInfo() {
        return (int)5L;
    }
    public static int FileEndOfFileInfo() {
        return (int)6L;
    }
    public static int FileStreamInfo() {
        return (int)7L;
    }
    public static int FileCompressionInfo() {
        return (int)8L;
    }
    public static int FileAttributeTagInfo() {
        return (int)9L;
    }
    public static int FileIdBothDirectoryInfo() {
        return (int)10L;
    }
    public static int FileIdBothDirectoryRestartInfo() {
        return (int)11L;
    }
    public static int FileIoPriorityHintInfo() {
        return (int)12L;
    }
    public static int FileRemoteProtocolInfo() {
        return (int)13L;
    }
    public static int FileFullDirectoryInfo() {
        return (int)14L;
    }
    public static int FileFullDirectoryRestartInfo() {
        return (int)15L;
    }
    public static int FileStorageInfo() {
        return (int)16L;
    }
    public static int FileAlignmentInfo() {
        return (int)17L;
    }
    public static int FileIdInfo() {
        return (int)18L;
    }
    public static int FileIdExtdDirectoryInfo() {
        return (int)19L;
    }
    public static int FileIdExtdDirectoryRestartInfo() {
        return (int)20L;
    }
    public static int FileDispositionInfoEx() {
        return (int)21L;
    }
    public static int FileRenameInfoEx() {
        return (int)22L;
    }
    public static int FileCaseSensitiveInfo() {
        return (int)23L;
    }
    public static int FileNormalizedNameInfo() {
        return (int)24L;
    }
    public static int MaximumFileInfoByHandleClass() {
        return (int)25L;
    }
    public static OfAddress PFILE_INFO_BY_HANDLE_CLASS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRITICAL_SECTION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCRITICAL_SECTION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRITICAL_SECTION_DEBUG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCRITICAL_SECTION_DEBUG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPROCESS_HEAP_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_HEAP_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREASON_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPEXCEPTION_DEBUG_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCREATE_THREAD_DEBUG_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCREATE_PROCESS_DEBUG_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPEXIT_THREAD_DEBUG_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPEXIT_PROCESS_DEBUG_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPLOAD_DLL_DEBUG_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPUNLOAD_DLL_DEBUG_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOUTPUT_DEBUG_STRING_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPRIP_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDEBUG_EVENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle IsApiSetImplemented$MH() {
        return RuntimeHelper.requireNonNull(constants$128.IsApiSetImplemented$MH,"IsApiSetImplemented");
    }
    public static int IsApiSetImplemented ( Addressable Contract) {
        var mh$ = IsApiSetImplemented$MH();
        try {
            return (int)mh$.invokeExact(Contract);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetEnvironmentStringsW$MH() {
        return RuntimeHelper.requireNonNull(constants$128.SetEnvironmentStringsW$MH,"SetEnvironmentStringsW");
    }
    public static int SetEnvironmentStringsW ( Addressable NewEnvironment) {
        var mh$ = SetEnvironmentStringsW$MH();
        try {
            return (int)mh$.invokeExact(NewEnvironment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetStdHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$129.GetStdHandle$MH,"GetStdHandle");
    }
    public static MemoryAddress GetStdHandle ( int nStdHandle) {
        var mh$ = GetStdHandle$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(nStdHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetStdHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$129.SetStdHandle$MH,"SetStdHandle");
    }
    public static int SetStdHandle ( int nStdHandle,  Addressable hHandle) {
        var mh$ = SetStdHandle$MH();
        try {
            return (int)mh$.invokeExact(nStdHandle, hHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetStdHandleEx$MH() {
        return RuntimeHelper.requireNonNull(constants$129.SetStdHandleEx$MH,"SetStdHandleEx");
    }
    public static int SetStdHandleEx ( int nStdHandle,  Addressable hHandle,  Addressable phPrevValue) {
        var mh$ = SetStdHandleEx$MH();
        try {
            return (int)mh$.invokeExact(nStdHandle, hHandle, phPrevValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCommandLineA$MH() {
        return RuntimeHelper.requireNonNull(constants$129.GetCommandLineA$MH,"GetCommandLineA");
    }
    public static MemoryAddress GetCommandLineA () {
        var mh$ = GetCommandLineA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCommandLineW$MH() {
        return RuntimeHelper.requireNonNull(constants$129.GetCommandLineW$MH,"GetCommandLineW");
    }
    public static MemoryAddress GetCommandLineW () {
        var mh$ = GetCommandLineW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnvironmentStrings$MH() {
        return RuntimeHelper.requireNonNull(constants$129.GetEnvironmentStrings$MH,"GetEnvironmentStrings");
    }
    public static MemoryAddress GetEnvironmentStrings () {
        var mh$ = GetEnvironmentStrings$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnvironmentStringsW$MH() {
        return RuntimeHelper.requireNonNull(constants$130.GetEnvironmentStringsW$MH,"GetEnvironmentStringsW");
    }
    public static MemoryAddress GetEnvironmentStringsW () {
        var mh$ = GetEnvironmentStringsW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeEnvironmentStringsA$MH() {
        return RuntimeHelper.requireNonNull(constants$130.FreeEnvironmentStringsA$MH,"FreeEnvironmentStringsA");
    }
    public static int FreeEnvironmentStringsA ( Addressable penv) {
        var mh$ = FreeEnvironmentStringsA$MH();
        try {
            return (int)mh$.invokeExact(penv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeEnvironmentStringsW$MH() {
        return RuntimeHelper.requireNonNull(constants$130.FreeEnvironmentStringsW$MH,"FreeEnvironmentStringsW");
    }
    public static int FreeEnvironmentStringsW ( Addressable penv) {
        var mh$ = FreeEnvironmentStringsW$MH();
        try {
            return (int)mh$.invokeExact(penv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnvironmentVariableA$MH() {
        return RuntimeHelper.requireNonNull(constants$130.GetEnvironmentVariableA$MH,"GetEnvironmentVariableA");
    }
    public static int GetEnvironmentVariableA ( Addressable lpName,  Addressable lpBuffer,  int nSize) {
        var mh$ = GetEnvironmentVariableA$MH();
        try {
            return (int)mh$.invokeExact(lpName, lpBuffer, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnvironmentVariableW$MH() {
        return RuntimeHelper.requireNonNull(constants$130.GetEnvironmentVariableW$MH,"GetEnvironmentVariableW");
    }
    public static int GetEnvironmentVariableW ( Addressable lpName,  Addressable lpBuffer,  int nSize) {
        var mh$ = GetEnvironmentVariableW$MH();
        try {
            return (int)mh$.invokeExact(lpName, lpBuffer, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetEnvironmentVariableA$MH() {
        return RuntimeHelper.requireNonNull(constants$130.SetEnvironmentVariableA$MH,"SetEnvironmentVariableA");
    }
    public static int SetEnvironmentVariableA ( Addressable lpName,  Addressable lpValue) {
        var mh$ = SetEnvironmentVariableA$MH();
        try {
            return (int)mh$.invokeExact(lpName, lpValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetEnvironmentVariableW$MH() {
        return RuntimeHelper.requireNonNull(constants$131.SetEnvironmentVariableW$MH,"SetEnvironmentVariableW");
    }
    public static int SetEnvironmentVariableW ( Addressable lpName,  Addressable lpValue) {
        var mh$ = SetEnvironmentVariableW$MH();
        try {
            return (int)mh$.invokeExact(lpName, lpValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExpandEnvironmentStringsA$MH() {
        return RuntimeHelper.requireNonNull(constants$131.ExpandEnvironmentStringsA$MH,"ExpandEnvironmentStringsA");
    }
    public static int ExpandEnvironmentStringsA ( Addressable lpSrc,  Addressable lpDst,  int nSize) {
        var mh$ = ExpandEnvironmentStringsA$MH();
        try {
            return (int)mh$.invokeExact(lpSrc, lpDst, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExpandEnvironmentStringsW$MH() {
        return RuntimeHelper.requireNonNull(constants$131.ExpandEnvironmentStringsW$MH,"ExpandEnvironmentStringsW");
    }
    public static int ExpandEnvironmentStringsW ( Addressable lpSrc,  Addressable lpDst,  int nSize) {
        var mh$ = ExpandEnvironmentStringsW$MH();
        try {
            return (int)mh$.invokeExact(lpSrc, lpDst, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCurrentDirectoryA$MH() {
        return RuntimeHelper.requireNonNull(constants$131.SetCurrentDirectoryA$MH,"SetCurrentDirectoryA");
    }
    public static int SetCurrentDirectoryA ( Addressable lpPathName) {
        var mh$ = SetCurrentDirectoryA$MH();
        try {
            return (int)mh$.invokeExact(lpPathName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCurrentDirectoryW$MH() {
        return RuntimeHelper.requireNonNull(constants$131.SetCurrentDirectoryW$MH,"SetCurrentDirectoryW");
    }
    public static int SetCurrentDirectoryW ( Addressable lpPathName) {
        var mh$ = SetCurrentDirectoryW$MH();
        try {
            return (int)mh$.invokeExact(lpPathName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentDirectoryA$MH() {
        return RuntimeHelper.requireNonNull(constants$131.GetCurrentDirectoryA$MH,"GetCurrentDirectoryA");
    }
    public static int GetCurrentDirectoryA ( int nBufferLength,  Addressable lpBuffer) {
        var mh$ = GetCurrentDirectoryA$MH();
        try {
            return (int)mh$.invokeExact(nBufferLength, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentDirectoryW$MH() {
        return RuntimeHelper.requireNonNull(constants$132.GetCurrentDirectoryW$MH,"GetCurrentDirectoryW");
    }
    public static int GetCurrentDirectoryW ( int nBufferLength,  Addressable lpBuffer) {
        var mh$ = GetCurrentDirectoryW$MH();
        try {
            return (int)mh$.invokeExact(nBufferLength, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SearchPathW$MH() {
        return RuntimeHelper.requireNonNull(constants$132.SearchPathW$MH,"SearchPathW");
    }
    public static int SearchPathW ( Addressable lpPath,  Addressable lpFileName,  Addressable lpExtension,  int nBufferLength,  Addressable lpBuffer,  Addressable lpFilePart) {
        var mh$ = SearchPathW$MH();
        try {
            return (int)mh$.invokeExact(lpPath, lpFileName, lpExtension, nBufferLength, lpBuffer, lpFilePart);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SearchPathA$MH() {
        return RuntimeHelper.requireNonNull(constants$132.SearchPathA$MH,"SearchPathA");
    }
    public static int SearchPathA ( Addressable lpPath,  Addressable lpFileName,  Addressable lpExtension,  int nBufferLength,  Addressable lpBuffer,  Addressable lpFilePart) {
        var mh$ = SearchPathA$MH();
        try {
            return (int)mh$.invokeExact(lpPath, lpFileName, lpExtension, nBufferLength, lpBuffer, lpFilePart);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NeedCurrentDirectoryForExePathA$MH() {
        return RuntimeHelper.requireNonNull(constants$132.NeedCurrentDirectoryForExePathA$MH,"NeedCurrentDirectoryForExePathA");
    }
    public static int NeedCurrentDirectoryForExePathA ( Addressable ExeName) {
        var mh$ = NeedCurrentDirectoryForExePathA$MH();
        try {
            return (int)mh$.invokeExact(ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NeedCurrentDirectoryForExePathW$MH() {
        return RuntimeHelper.requireNonNull(constants$132.NeedCurrentDirectoryForExePathW$MH,"NeedCurrentDirectoryForExePathW");
    }
    public static int NeedCurrentDirectoryForExePathW ( Addressable ExeName) {
        var mh$ = NeedCurrentDirectoryForExePathW$MH();
        try {
            return (int)mh$.invokeExact(ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CompareFileTime$MH() {
        return RuntimeHelper.requireNonNull(constants$132.CompareFileTime$MH,"CompareFileTime");
    }
    public static int CompareFileTime ( Addressable lpFileTime1,  Addressable lpFileTime2) {
        var mh$ = CompareFileTime$MH();
        try {
            return (int)mh$.invokeExact(lpFileTime1, lpFileTime2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDirectoryA$MH() {
        return RuntimeHelper.requireNonNull(constants$133.CreateDirectoryA$MH,"CreateDirectoryA");
    }
    public static int CreateDirectoryA ( Addressable lpPathName,  Addressable lpSecurityAttributes) {
        var mh$ = CreateDirectoryA$MH();
        try {
            return (int)mh$.invokeExact(lpPathName, lpSecurityAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDirectoryW$MH() {
        return RuntimeHelper.requireNonNull(constants$133.CreateDirectoryW$MH,"CreateDirectoryW");
    }
    public static int CreateDirectoryW ( Addressable lpPathName,  Addressable lpSecurityAttributes) {
        var mh$ = CreateDirectoryW$MH();
        try {
            return (int)mh$.invokeExact(lpPathName, lpSecurityAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$133.CreateFileA$MH,"CreateFileA");
    }
    public static MemoryAddress CreateFileA ( Addressable lpFileName,  int dwDesiredAccess,  int dwShareMode,  Addressable lpSecurityAttributes,  int dwCreationDisposition,  int dwFlagsAndAttributes,  Addressable hTemplateFile) {
        var mh$ = CreateFileA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$133.CreateFileW$MH,"CreateFileW");
    }
    public static MemoryAddress CreateFileW ( Addressable lpFileName,  int dwDesiredAccess,  int dwShareMode,  Addressable lpSecurityAttributes,  int dwCreationDisposition,  int dwFlagsAndAttributes,  Addressable hTemplateFile) {
        var mh$ = CreateFileW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DefineDosDeviceW$MH() {
        return RuntimeHelper.requireNonNull(constants$133.DefineDosDeviceW$MH,"DefineDosDeviceW");
    }
    public static int DefineDosDeviceW ( int dwFlags,  Addressable lpDeviceName,  Addressable lpTargetPath) {
        var mh$ = DefineDosDeviceW$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpDeviceName, lpTargetPath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$133.DeleteFileA$MH,"DeleteFileA");
    }
    public static int DeleteFileA ( Addressable lpFileName) {
        var mh$ = DeleteFileA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$134.DeleteFileW$MH,"DeleteFileW");
    }
    public static int DeleteFileW ( Addressable lpFileName) {
        var mh$ = DeleteFileW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteVolumeMountPointW$MH() {
        return RuntimeHelper.requireNonNull(constants$134.DeleteVolumeMountPointW$MH,"DeleteVolumeMountPointW");
    }
    public static int DeleteVolumeMountPointW ( Addressable lpszVolumeMountPoint) {
        var mh$ = DeleteVolumeMountPointW$MH();
        try {
            return (int)mh$.invokeExact(lpszVolumeMountPoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FileTimeToLocalFileTime$MH() {
        return RuntimeHelper.requireNonNull(constants$134.FileTimeToLocalFileTime$MH,"FileTimeToLocalFileTime");
    }
    public static int FileTimeToLocalFileTime ( Addressable lpFileTime,  Addressable lpLocalFileTime) {
        var mh$ = FileTimeToLocalFileTime$MH();
        try {
            return (int)mh$.invokeExact(lpFileTime, lpLocalFileTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindClose$MH() {
        return RuntimeHelper.requireNonNull(constants$134.FindClose$MH,"FindClose");
    }
    public static int FindClose ( Addressable hFindFile) {
        var mh$ = FindClose$MH();
        try {
            return (int)mh$.invokeExact(hFindFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindCloseChangeNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$134.FindCloseChangeNotification$MH,"FindCloseChangeNotification");
    }
    public static int FindCloseChangeNotification ( Addressable hChangeHandle) {
        var mh$ = FindCloseChangeNotification$MH();
        try {
            return (int)mh$.invokeExact(hChangeHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstChangeNotificationA$MH() {
        return RuntimeHelper.requireNonNull(constants$134.FindFirstChangeNotificationA$MH,"FindFirstChangeNotificationA");
    }
    public static MemoryAddress FindFirstChangeNotificationA ( Addressable lpPathName,  int bWatchSubtree,  int dwNotifyFilter) {
        var mh$ = FindFirstChangeNotificationA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpPathName, bWatchSubtree, dwNotifyFilter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstChangeNotificationW$MH() {
        return RuntimeHelper.requireNonNull(constants$135.FindFirstChangeNotificationW$MH,"FindFirstChangeNotificationW");
    }
    public static MemoryAddress FindFirstChangeNotificationW ( Addressable lpPathName,  int bWatchSubtree,  int dwNotifyFilter) {
        var mh$ = FindFirstChangeNotificationW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpPathName, bWatchSubtree, dwNotifyFilter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$135.FindFirstFileA$MH,"FindFirstFileA");
    }
    public static MemoryAddress FindFirstFileA ( Addressable lpFileName,  Addressable lpFindFileData) {
        var mh$ = FindFirstFileA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpFileName, lpFindFileData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$135.FindFirstFileW$MH,"FindFirstFileW");
    }
    public static MemoryAddress FindFirstFileW ( Addressable lpFileName,  Addressable lpFindFileData) {
        var mh$ = FindFirstFileW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpFileName, lpFindFileData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstFileExA$MH() {
        return RuntimeHelper.requireNonNull(constants$135.FindFirstFileExA$MH,"FindFirstFileExA");
    }
    public static MemoryAddress FindFirstFileExA ( Addressable lpFileName,  int fInfoLevelId,  Addressable lpFindFileData,  int fSearchOp,  Addressable lpSearchFilter,  int dwAdditionalFlags) {
        var mh$ = FindFirstFileExA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpFileName, fInfoLevelId, lpFindFileData, fSearchOp, lpSearchFilter, dwAdditionalFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstFileExW$MH() {
        return RuntimeHelper.requireNonNull(constants$135.FindFirstFileExW$MH,"FindFirstFileExW");
    }
    public static MemoryAddress FindFirstFileExW ( Addressable lpFileName,  int fInfoLevelId,  Addressable lpFindFileData,  int fSearchOp,  Addressable lpSearchFilter,  int dwAdditionalFlags) {
        var mh$ = FindFirstFileExW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpFileName, fInfoLevelId, lpFindFileData, fSearchOp, lpSearchFilter, dwAdditionalFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstVolumeW$MH() {
        return RuntimeHelper.requireNonNull(constants$135.FindFirstVolumeW$MH,"FindFirstVolumeW");
    }
    public static MemoryAddress FindFirstVolumeW ( Addressable lpszVolumeName,  int cchBufferLength) {
        var mh$ = FindFirstVolumeW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszVolumeName, cchBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindNextChangeNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$136.FindNextChangeNotification$MH,"FindNextChangeNotification");
    }
    public static int FindNextChangeNotification ( Addressable hChangeHandle) {
        var mh$ = FindNextChangeNotification$MH();
        try {
            return (int)mh$.invokeExact(hChangeHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindNextFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$136.FindNextFileA$MH,"FindNextFileA");
    }
    public static int FindNextFileA ( Addressable hFindFile,  Addressable lpFindFileData) {
        var mh$ = FindNextFileA$MH();
        try {
            return (int)mh$.invokeExact(hFindFile, lpFindFileData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindNextFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$136.FindNextFileW$MH,"FindNextFileW");
    }
    public static int FindNextFileW ( Addressable hFindFile,  Addressable lpFindFileData) {
        var mh$ = FindNextFileW$MH();
        try {
            return (int)mh$.invokeExact(hFindFile, lpFindFileData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindNextVolumeW$MH() {
        return RuntimeHelper.requireNonNull(constants$136.FindNextVolumeW$MH,"FindNextVolumeW");
    }
    public static int FindNextVolumeW ( Addressable hFindVolume,  Addressable lpszVolumeName,  int cchBufferLength) {
        var mh$ = FindNextVolumeW$MH();
        try {
            return (int)mh$.invokeExact(hFindVolume, lpszVolumeName, cchBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindVolumeClose$MH() {
        return RuntimeHelper.requireNonNull(constants$136.FindVolumeClose$MH,"FindVolumeClose");
    }
    public static int FindVolumeClose ( Addressable hFindVolume) {
        var mh$ = FindVolumeClose$MH();
        try {
            return (int)mh$.invokeExact(hFindVolume);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlushFileBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$136.FlushFileBuffers$MH,"FlushFileBuffers");
    }
    public static int FlushFileBuffers ( Addressable hFile) {
        var mh$ = FlushFileBuffers$MH();
        try {
            return (int)mh$.invokeExact(hFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDiskFreeSpaceA$MH() {
        return RuntimeHelper.requireNonNull(constants$137.GetDiskFreeSpaceA$MH,"GetDiskFreeSpaceA");
    }
    public static int GetDiskFreeSpaceA ( Addressable lpRootPathName,  Addressable lpSectorsPerCluster,  Addressable lpBytesPerSector,  Addressable lpNumberOfFreeClusters,  Addressable lpTotalNumberOfClusters) {
        var mh$ = GetDiskFreeSpaceA$MH();
        try {
            return (int)mh$.invokeExact(lpRootPathName, lpSectorsPerCluster, lpBytesPerSector, lpNumberOfFreeClusters, lpTotalNumberOfClusters);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDiskFreeSpaceW$MH() {
        return RuntimeHelper.requireNonNull(constants$137.GetDiskFreeSpaceW$MH,"GetDiskFreeSpaceW");
    }
    public static int GetDiskFreeSpaceW ( Addressable lpRootPathName,  Addressable lpSectorsPerCluster,  Addressable lpBytesPerSector,  Addressable lpNumberOfFreeClusters,  Addressable lpTotalNumberOfClusters) {
        var mh$ = GetDiskFreeSpaceW$MH();
        try {
            return (int)mh$.invokeExact(lpRootPathName, lpSectorsPerCluster, lpBytesPerSector, lpNumberOfFreeClusters, lpTotalNumberOfClusters);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDiskFreeSpaceExA$MH() {
        return RuntimeHelper.requireNonNull(constants$137.GetDiskFreeSpaceExA$MH,"GetDiskFreeSpaceExA");
    }
    public static int GetDiskFreeSpaceExA ( Addressable lpDirectoryName,  Addressable lpFreeBytesAvailableToCaller,  Addressable lpTotalNumberOfBytes,  Addressable lpTotalNumberOfFreeBytes) {
        var mh$ = GetDiskFreeSpaceExA$MH();
        try {
            return (int)mh$.invokeExact(lpDirectoryName, lpFreeBytesAvailableToCaller, lpTotalNumberOfBytes, lpTotalNumberOfFreeBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDiskFreeSpaceExW$MH() {
        return RuntimeHelper.requireNonNull(constants$137.GetDiskFreeSpaceExW$MH,"GetDiskFreeSpaceExW");
    }
    public static int GetDiskFreeSpaceExW ( Addressable lpDirectoryName,  Addressable lpFreeBytesAvailableToCaller,  Addressable lpTotalNumberOfBytes,  Addressable lpTotalNumberOfFreeBytes) {
        var mh$ = GetDiskFreeSpaceExW$MH();
        try {
            return (int)mh$.invokeExact(lpDirectoryName, lpFreeBytesAvailableToCaller, lpTotalNumberOfBytes, lpTotalNumberOfFreeBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDiskSpaceInformationA$MH() {
        return RuntimeHelper.requireNonNull(constants$137.GetDiskSpaceInformationA$MH,"GetDiskSpaceInformationA");
    }
    public static int GetDiskSpaceInformationA ( Addressable rootPath,  Addressable diskSpaceInfo) {
        var mh$ = GetDiskSpaceInformationA$MH();
        try {
            return (int)mh$.invokeExact(rootPath, diskSpaceInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDiskSpaceInformationW$MH() {
        return RuntimeHelper.requireNonNull(constants$137.GetDiskSpaceInformationW$MH,"GetDiskSpaceInformationW");
    }
    public static int GetDiskSpaceInformationW ( Addressable rootPath,  Addressable diskSpaceInfo) {
        var mh$ = GetDiskSpaceInformationW$MH();
        try {
            return (int)mh$.invokeExact(rootPath, diskSpaceInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDriveTypeA$MH() {
        return RuntimeHelper.requireNonNull(constants$138.GetDriveTypeA$MH,"GetDriveTypeA");
    }
    public static int GetDriveTypeA ( Addressable lpRootPathName) {
        var mh$ = GetDriveTypeA$MH();
        try {
            return (int)mh$.invokeExact(lpRootPathName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDriveTypeW$MH() {
        return RuntimeHelper.requireNonNull(constants$138.GetDriveTypeW$MH,"GetDriveTypeW");
    }
    public static int GetDriveTypeW ( Addressable lpRootPathName) {
        var mh$ = GetDriveTypeW$MH();
        try {
            return (int)mh$.invokeExact(lpRootPathName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPWIN32_FILE_ATTRIBUTE_DATA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetFileAttributesA$MH() {
        return RuntimeHelper.requireNonNull(constants$138.GetFileAttributesA$MH,"GetFileAttributesA");
    }
    public static int GetFileAttributesA ( Addressable lpFileName) {
        var mh$ = GetFileAttributesA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileAttributesW$MH() {
        return RuntimeHelper.requireNonNull(constants$138.GetFileAttributesW$MH,"GetFileAttributesW");
    }
    public static int GetFileAttributesW ( Addressable lpFileName) {
        var mh$ = GetFileAttributesW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileAttributesExA$MH() {
        return RuntimeHelper.requireNonNull(constants$138.GetFileAttributesExA$MH,"GetFileAttributesExA");
    }
    public static int GetFileAttributesExA ( Addressable lpFileName,  int fInfoLevelId,  Addressable lpFileInformation) {
        var mh$ = GetFileAttributesExA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, fInfoLevelId, lpFileInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileAttributesExW$MH() {
        return RuntimeHelper.requireNonNull(constants$138.GetFileAttributesExW$MH,"GetFileAttributesExW");
    }
    public static int GetFileAttributesExW ( Addressable lpFileName,  int fInfoLevelId,  Addressable lpFileInformation) {
        var mh$ = GetFileAttributesExW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, fInfoLevelId, lpFileInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PBY_HANDLE_FILE_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPBY_HANDLE_FILE_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetFileInformationByHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$139.GetFileInformationByHandle$MH,"GetFileInformationByHandle");
    }
    public static int GetFileInformationByHandle ( Addressable hFile,  Addressable lpFileInformation) {
        var mh$ = GetFileInformationByHandle$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpFileInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileSize$MH() {
        return RuntimeHelper.requireNonNull(constants$139.GetFileSize$MH,"GetFileSize");
    }
    public static int GetFileSize ( Addressable hFile,  Addressable lpFileSizeHigh) {
        var mh$ = GetFileSize$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpFileSizeHigh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileSizeEx$MH() {
        return RuntimeHelper.requireNonNull(constants$139.GetFileSizeEx$MH,"GetFileSizeEx");
    }
    public static int GetFileSizeEx ( Addressable hFile,  Addressable lpFileSize) {
        var mh$ = GetFileSizeEx$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpFileSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileType$MH() {
        return RuntimeHelper.requireNonNull(constants$139.GetFileType$MH,"GetFileType");
    }
    public static int GetFileType ( Addressable hFile) {
        var mh$ = GetFileType$MH();
        try {
            return (int)mh$.invokeExact(hFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFinalPathNameByHandleA$MH() {
        return RuntimeHelper.requireNonNull(constants$139.GetFinalPathNameByHandleA$MH,"GetFinalPathNameByHandleA");
    }
    public static int GetFinalPathNameByHandleA ( Addressable hFile,  Addressable lpszFilePath,  int cchFilePath,  int dwFlags) {
        var mh$ = GetFinalPathNameByHandleA$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpszFilePath, cchFilePath, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFinalPathNameByHandleW$MH() {
        return RuntimeHelper.requireNonNull(constants$139.GetFinalPathNameByHandleW$MH,"GetFinalPathNameByHandleW");
    }
    public static int GetFinalPathNameByHandleW ( Addressable hFile,  Addressable lpszFilePath,  int cchFilePath,  int dwFlags) {
        var mh$ = GetFinalPathNameByHandleW$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpszFilePath, cchFilePath, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileTime$MH() {
        return RuntimeHelper.requireNonNull(constants$140.GetFileTime$MH,"GetFileTime");
    }
    public static int GetFileTime ( Addressable hFile,  Addressable lpCreationTime,  Addressable lpLastAccessTime,  Addressable lpLastWriteTime) {
        var mh$ = GetFileTime$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpCreationTime, lpLastAccessTime, lpLastWriteTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFullPathNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$140.GetFullPathNameW$MH,"GetFullPathNameW");
    }
    public static int GetFullPathNameW ( Addressable lpFileName,  int nBufferLength,  Addressable lpBuffer,  Addressable lpFilePart) {
        var mh$ = GetFullPathNameW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, nBufferLength, lpBuffer, lpFilePart);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFullPathNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$140.GetFullPathNameA$MH,"GetFullPathNameA");
    }
    public static int GetFullPathNameA ( Addressable lpFileName,  int nBufferLength,  Addressable lpBuffer,  Addressable lpFilePart) {
        var mh$ = GetFullPathNameA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, nBufferLength, lpBuffer, lpFilePart);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLogicalDrives$MH() {
        return RuntimeHelper.requireNonNull(constants$140.GetLogicalDrives$MH,"GetLogicalDrives");
    }
    public static int GetLogicalDrives () {
        var mh$ = GetLogicalDrives$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLogicalDriveStringsW$MH() {
        return RuntimeHelper.requireNonNull(constants$140.GetLogicalDriveStringsW$MH,"GetLogicalDriveStringsW");
    }
    public static int GetLogicalDriveStringsW ( int nBufferLength,  Addressable lpBuffer) {
        var mh$ = GetLogicalDriveStringsW$MH();
        try {
            return (int)mh$.invokeExact(nBufferLength, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLongPathNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$140.GetLongPathNameA$MH,"GetLongPathNameA");
    }
    public static int GetLongPathNameA ( Addressable lpszShortPath,  Addressable lpszLongPath,  int cchBuffer) {
        var mh$ = GetLongPathNameA$MH();
        try {
            return (int)mh$.invokeExact(lpszShortPath, lpszLongPath, cchBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLongPathNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$141.GetLongPathNameW$MH,"GetLongPathNameW");
    }
    public static int GetLongPathNameW ( Addressable lpszShortPath,  Addressable lpszLongPath,  int cchBuffer) {
        var mh$ = GetLongPathNameW$MH();
        try {
            return (int)mh$.invokeExact(lpszShortPath, lpszLongPath, cchBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetShortPathNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$141.GetShortPathNameW$MH,"GetShortPathNameW");
    }
    public static int GetShortPathNameW ( Addressable lpszLongPath,  Addressable lpszShortPath,  int cchBuffer) {
        var mh$ = GetShortPathNameW$MH();
        try {
            return (int)mh$.invokeExact(lpszLongPath, lpszShortPath, cchBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTempFileNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$141.GetTempFileNameW$MH,"GetTempFileNameW");
    }
    public static int GetTempFileNameW ( Addressable lpPathName,  Addressable lpPrefixString,  int uUnique,  Addressable lpTempFileName) {
        var mh$ = GetTempFileNameW$MH();
        try {
            return (int)mh$.invokeExact(lpPathName, lpPrefixString, uUnique, lpTempFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetVolumeInformationByHandleW$MH() {
        return RuntimeHelper.requireNonNull(constants$141.GetVolumeInformationByHandleW$MH,"GetVolumeInformationByHandleW");
    }
    public static int GetVolumeInformationByHandleW ( Addressable hFile,  Addressable lpVolumeNameBuffer,  int nVolumeNameSize,  Addressable lpVolumeSerialNumber,  Addressable lpMaximumComponentLength,  Addressable lpFileSystemFlags,  Addressable lpFileSystemNameBuffer,  int nFileSystemNameSize) {
        var mh$ = GetVolumeInformationByHandleW$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpVolumeNameBuffer, nVolumeNameSize, lpVolumeSerialNumber, lpMaximumComponentLength, lpFileSystemFlags, lpFileSystemNameBuffer, nFileSystemNameSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetVolumeInformationW$MH() {
        return RuntimeHelper.requireNonNull(constants$141.GetVolumeInformationW$MH,"GetVolumeInformationW");
    }
    public static int GetVolumeInformationW ( Addressable lpRootPathName,  Addressable lpVolumeNameBuffer,  int nVolumeNameSize,  Addressable lpVolumeSerialNumber,  Addressable lpMaximumComponentLength,  Addressable lpFileSystemFlags,  Addressable lpFileSystemNameBuffer,  int nFileSystemNameSize) {
        var mh$ = GetVolumeInformationW$MH();
        try {
            return (int)mh$.invokeExact(lpRootPathName, lpVolumeNameBuffer, nVolumeNameSize, lpVolumeSerialNumber, lpMaximumComponentLength, lpFileSystemFlags, lpFileSystemNameBuffer, nFileSystemNameSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetVolumePathNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$141.GetVolumePathNameW$MH,"GetVolumePathNameW");
    }
    public static int GetVolumePathNameW ( Addressable lpszFileName,  Addressable lpszVolumePathName,  int cchBufferLength) {
        var mh$ = GetVolumePathNameW$MH();
        try {
            return (int)mh$.invokeExact(lpszFileName, lpszVolumePathName, cchBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LocalFileTimeToFileTime$MH() {
        return RuntimeHelper.requireNonNull(constants$142.LocalFileTimeToFileTime$MH,"LocalFileTimeToFileTime");
    }
    public static int LocalFileTimeToFileTime ( Addressable lpLocalFileTime,  Addressable lpFileTime) {
        var mh$ = LocalFileTimeToFileTime$MH();
        try {
            return (int)mh$.invokeExact(lpLocalFileTime, lpFileTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LockFile$MH() {
        return RuntimeHelper.requireNonNull(constants$142.LockFile$MH,"LockFile");
    }
    public static int LockFile ( Addressable hFile,  int dwFileOffsetLow,  int dwFileOffsetHigh,  int nNumberOfBytesToLockLow,  int nNumberOfBytesToLockHigh) {
        var mh$ = LockFile$MH();
        try {
            return (int)mh$.invokeExact(hFile, dwFileOffsetLow, dwFileOffsetHigh, nNumberOfBytesToLockLow, nNumberOfBytesToLockHigh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LockFileEx$MH() {
        return RuntimeHelper.requireNonNull(constants$142.LockFileEx$MH,"LockFileEx");
    }
    public static int LockFileEx ( Addressable hFile,  int dwFlags,  int dwReserved,  int nNumberOfBytesToLockLow,  int nNumberOfBytesToLockHigh,  Addressable lpOverlapped) {
        var mh$ = LockFileEx$MH();
        try {
            return (int)mh$.invokeExact(hFile, dwFlags, dwReserved, nNumberOfBytesToLockLow, nNumberOfBytesToLockHigh, lpOverlapped);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryDosDeviceW$MH() {
        return RuntimeHelper.requireNonNull(constants$142.QueryDosDeviceW$MH,"QueryDosDeviceW");
    }
    public static int QueryDosDeviceW ( Addressable lpDeviceName,  Addressable lpTargetPath,  int ucchMax) {
        var mh$ = QueryDosDeviceW$MH();
        try {
            return (int)mh$.invokeExact(lpDeviceName, lpTargetPath, ucchMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadFile$MH() {
        return RuntimeHelper.requireNonNull(constants$142.ReadFile$MH,"ReadFile");
    }
    public static int ReadFile ( Addressable hFile,  Addressable lpBuffer,  int nNumberOfBytesToRead,  Addressable lpNumberOfBytesRead,  Addressable lpOverlapped) {
        var mh$ = ReadFile$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpBuffer, nNumberOfBytesToRead, lpNumberOfBytesRead, lpOverlapped);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadFileEx$MH() {
        return RuntimeHelper.requireNonNull(constants$142.ReadFileEx$MH,"ReadFileEx");
    }
    public static int ReadFileEx ( Addressable hFile,  Addressable lpBuffer,  int nNumberOfBytesToRead,  Addressable lpOverlapped,  Addressable lpCompletionRoutine) {
        var mh$ = ReadFileEx$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpBuffer, nNumberOfBytesToRead, lpOverlapped, lpCompletionRoutine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadFileScatter$MH() {
        return RuntimeHelper.requireNonNull(constants$143.ReadFileScatter$MH,"ReadFileScatter");
    }
    public static int ReadFileScatter ( Addressable hFile,  Addressable aSegmentArray,  int nNumberOfBytesToRead,  Addressable lpReserved,  Addressable lpOverlapped) {
        var mh$ = ReadFileScatter$MH();
        try {
            return (int)mh$.invokeExact(hFile, aSegmentArray, nNumberOfBytesToRead, lpReserved, lpOverlapped);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveDirectoryA$MH() {
        return RuntimeHelper.requireNonNull(constants$143.RemoveDirectoryA$MH,"RemoveDirectoryA");
    }
    public static int RemoveDirectoryA ( Addressable lpPathName) {
        var mh$ = RemoveDirectoryA$MH();
        try {
            return (int)mh$.invokeExact(lpPathName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveDirectoryW$MH() {
        return RuntimeHelper.requireNonNull(constants$143.RemoveDirectoryW$MH,"RemoveDirectoryW");
    }
    public static int RemoveDirectoryW ( Addressable lpPathName) {
        var mh$ = RemoveDirectoryW$MH();
        try {
            return (int)mh$.invokeExact(lpPathName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetEndOfFile$MH() {
        return RuntimeHelper.requireNonNull(constants$143.SetEndOfFile$MH,"SetEndOfFile");
    }
    public static int SetEndOfFile ( Addressable hFile) {
        var mh$ = SetEndOfFile$MH();
        try {
            return (int)mh$.invokeExact(hFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileAttributesA$MH() {
        return RuntimeHelper.requireNonNull(constants$143.SetFileAttributesA$MH,"SetFileAttributesA");
    }
    public static int SetFileAttributesA ( Addressable lpFileName,  int dwFileAttributes) {
        var mh$ = SetFileAttributesA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, dwFileAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileAttributesW$MH() {
        return RuntimeHelper.requireNonNull(constants$143.SetFileAttributesW$MH,"SetFileAttributesW");
    }
    public static int SetFileAttributesW ( Addressable lpFileName,  int dwFileAttributes) {
        var mh$ = SetFileAttributesW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, dwFileAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileInformationByHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$144.SetFileInformationByHandle$MH,"SetFileInformationByHandle");
    }
    public static int SetFileInformationByHandle ( Addressable hFile,  int FileInformationClass,  Addressable lpFileInformation,  int dwBufferSize) {
        var mh$ = SetFileInformationByHandle$MH();
        try {
            return (int)mh$.invokeExact(hFile, FileInformationClass, lpFileInformation, dwBufferSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFilePointer$MH() {
        return RuntimeHelper.requireNonNull(constants$144.SetFilePointer$MH,"SetFilePointer");
    }
    public static int SetFilePointer ( Addressable hFile,  int lDistanceToMove,  Addressable lpDistanceToMoveHigh,  int dwMoveMethod) {
        var mh$ = SetFilePointer$MH();
        try {
            return (int)mh$.invokeExact(hFile, lDistanceToMove, lpDistanceToMoveHigh, dwMoveMethod);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFilePointerEx$MH() {
        return RuntimeHelper.requireNonNull(constants$144.SetFilePointerEx$MH,"SetFilePointerEx");
    }
    public static int SetFilePointerEx ( Addressable hFile,  MemorySegment liDistanceToMove,  Addressable lpNewFilePointer,  int dwMoveMethod) {
        var mh$ = SetFilePointerEx$MH();
        try {
            return (int)mh$.invokeExact(hFile, liDistanceToMove, lpNewFilePointer, dwMoveMethod);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileTime$MH() {
        return RuntimeHelper.requireNonNull(constants$144.SetFileTime$MH,"SetFileTime");
    }
    public static int SetFileTime ( Addressable hFile,  Addressable lpCreationTime,  Addressable lpLastAccessTime,  Addressable lpLastWriteTime) {
        var mh$ = SetFileTime$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpCreationTime, lpLastAccessTime, lpLastWriteTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileValidData$MH() {
        return RuntimeHelper.requireNonNull(constants$144.SetFileValidData$MH,"SetFileValidData");
    }
    public static int SetFileValidData ( Addressable hFile,  long ValidDataLength) {
        var mh$ = SetFileValidData$MH();
        try {
            return (int)mh$.invokeExact(hFile, ValidDataLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnlockFile$MH() {
        return RuntimeHelper.requireNonNull(constants$144.UnlockFile$MH,"UnlockFile");
    }
    public static int UnlockFile ( Addressable hFile,  int dwFileOffsetLow,  int dwFileOffsetHigh,  int nNumberOfBytesToUnlockLow,  int nNumberOfBytesToUnlockHigh) {
        var mh$ = UnlockFile$MH();
        try {
            return (int)mh$.invokeExact(hFile, dwFileOffsetLow, dwFileOffsetHigh, nNumberOfBytesToUnlockLow, nNumberOfBytesToUnlockHigh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnlockFileEx$MH() {
        return RuntimeHelper.requireNonNull(constants$145.UnlockFileEx$MH,"UnlockFileEx");
    }
    public static int UnlockFileEx ( Addressable hFile,  int dwReserved,  int nNumberOfBytesToUnlockLow,  int nNumberOfBytesToUnlockHigh,  Addressable lpOverlapped) {
        var mh$ = UnlockFileEx$MH();
        try {
            return (int)mh$.invokeExact(hFile, dwReserved, nNumberOfBytesToUnlockLow, nNumberOfBytesToUnlockHigh, lpOverlapped);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteFile$MH() {
        return RuntimeHelper.requireNonNull(constants$145.WriteFile$MH,"WriteFile");
    }
    public static int WriteFile ( Addressable hFile,  Addressable lpBuffer,  int nNumberOfBytesToWrite,  Addressable lpNumberOfBytesWritten,  Addressable lpOverlapped) {
        var mh$ = WriteFile$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpBuffer, nNumberOfBytesToWrite, lpNumberOfBytesWritten, lpOverlapped);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteFileEx$MH() {
        return RuntimeHelper.requireNonNull(constants$145.WriteFileEx$MH,"WriteFileEx");
    }
    public static int WriteFileEx ( Addressable hFile,  Addressable lpBuffer,  int nNumberOfBytesToWrite,  Addressable lpOverlapped,  Addressable lpCompletionRoutine) {
        var mh$ = WriteFileEx$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpBuffer, nNumberOfBytesToWrite, lpOverlapped, lpCompletionRoutine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteFileGather$MH() {
        return RuntimeHelper.requireNonNull(constants$145.WriteFileGather$MH,"WriteFileGather");
    }
    public static int WriteFileGather ( Addressable hFile,  Addressable aSegmentArray,  int nNumberOfBytesToWrite,  Addressable lpReserved,  Addressable lpOverlapped) {
        var mh$ = WriteFileGather$MH();
        try {
            return (int)mh$.invokeExact(hFile, aSegmentArray, nNumberOfBytesToWrite, lpReserved, lpOverlapped);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTempPathW$MH() {
        return RuntimeHelper.requireNonNull(constants$145.GetTempPathW$MH,"GetTempPathW");
    }
    public static int GetTempPathW ( int nBufferLength,  Addressable lpBuffer) {
        var mh$ = GetTempPathW$MH();
        try {
            return (int)mh$.invokeExact(nBufferLength, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetVolumeNameForVolumeMountPointW$MH() {
        return RuntimeHelper.requireNonNull(constants$145.GetVolumeNameForVolumeMountPointW$MH,"GetVolumeNameForVolumeMountPointW");
    }
    public static int GetVolumeNameForVolumeMountPointW ( Addressable lpszVolumeMountPoint,  Addressable lpszVolumeName,  int cchBufferLength) {
        var mh$ = GetVolumeNameForVolumeMountPointW$MH();
        try {
            return (int)mh$.invokeExact(lpszVolumeMountPoint, lpszVolumeName, cchBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetVolumePathNamesForVolumeNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$146.GetVolumePathNamesForVolumeNameW$MH,"GetVolumePathNamesForVolumeNameW");
    }
    public static int GetVolumePathNamesForVolumeNameW ( Addressable lpszVolumeName,  Addressable lpszVolumePathNames,  int cchBufferLength,  Addressable lpcchReturnLength) {
        var mh$ = GetVolumePathNamesForVolumeNameW$MH();
        try {
            return (int)mh$.invokeExact(lpszVolumeName, lpszVolumePathNames, cchBufferLength, lpcchReturnLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCREATEFILE2_EXTENDED_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCREATEFILE2_EXTENDED_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CreateFile2$MH() {
        return RuntimeHelper.requireNonNull(constants$146.CreateFile2$MH,"CreateFile2");
    }
    public static MemoryAddress CreateFile2 ( Addressable lpFileName,  int dwDesiredAccess,  int dwShareMode,  int dwCreationDisposition,  Addressable pCreateExParams) {
        var mh$ = CreateFile2$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpFileName, dwDesiredAccess, dwShareMode, dwCreationDisposition, pCreateExParams);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileIoOverlappedRange$MH() {
        return RuntimeHelper.requireNonNull(constants$146.SetFileIoOverlappedRange$MH,"SetFileIoOverlappedRange");
    }
    public static int SetFileIoOverlappedRange ( Addressable FileHandle,  Addressable OverlappedRangeStart,  int Length) {
        var mh$ = SetFileIoOverlappedRange$MH();
        try {
            return (int)mh$.invokeExact(FileHandle, OverlappedRangeStart, Length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCompressedFileSizeA$MH() {
        return RuntimeHelper.requireNonNull(constants$146.GetCompressedFileSizeA$MH,"GetCompressedFileSizeA");
    }
    public static int GetCompressedFileSizeA ( Addressable lpFileName,  Addressable lpFileSizeHigh) {
        var mh$ = GetCompressedFileSizeA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, lpFileSizeHigh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCompressedFileSizeW$MH() {
        return RuntimeHelper.requireNonNull(constants$146.GetCompressedFileSizeW$MH,"GetCompressedFileSizeW");
    }
    public static int GetCompressedFileSizeW ( Addressable lpFileName,  Addressable lpFileSizeHigh) {
        var mh$ = GetCompressedFileSizeW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, lpFileSizeHigh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int FindStreamInfoStandard() {
        return (int)0L;
    }
    public static int FindStreamInfoMaxInfoLevel() {
        return (int)1L;
    }
    public static OfAddress PWIN32_FIND_STREAM_DATA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle FindFirstStreamW$MH() {
        return RuntimeHelper.requireNonNull(constants$146.FindFirstStreamW$MH,"FindFirstStreamW");
    }
    public static MemoryAddress FindFirstStreamW ( Addressable lpFileName,  int InfoLevel,  Addressable lpFindStreamData,  int dwFlags) {
        var mh$ = FindFirstStreamW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpFileName, InfoLevel, lpFindStreamData, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindNextStreamW$MH() {
        return RuntimeHelper.requireNonNull(constants$147.FindNextStreamW$MH,"FindNextStreamW");
    }
    public static int FindNextStreamW ( Addressable hFindStream,  Addressable lpFindStreamData) {
        var mh$ = FindNextStreamW$MH();
        try {
            return (int)mh$.invokeExact(hFindStream, lpFindStreamData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AreFileApisANSI$MH() {
        return RuntimeHelper.requireNonNull(constants$147.AreFileApisANSI$MH,"AreFileApisANSI");
    }
    public static int AreFileApisANSI () {
        var mh$ = AreFileApisANSI$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTempPathA$MH() {
        return RuntimeHelper.requireNonNull(constants$147.GetTempPathA$MH,"GetTempPathA");
    }
    public static int GetTempPathA ( int nBufferLength,  Addressable lpBuffer) {
        var mh$ = GetTempPathA$MH();
        try {
            return (int)mh$.invokeExact(nBufferLength, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstFileNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$147.FindFirstFileNameW$MH,"FindFirstFileNameW");
    }
    public static MemoryAddress FindFirstFileNameW ( Addressable lpFileName,  int dwFlags,  Addressable StringLength,  Addressable LinkName) {
        var mh$ = FindFirstFileNameW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpFileName, dwFlags, StringLength, LinkName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindNextFileNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$147.FindNextFileNameW$MH,"FindNextFileNameW");
    }
    public static int FindNextFileNameW ( Addressable hFindStream,  Addressable StringLength,  Addressable LinkName) {
        var mh$ = FindNextFileNameW$MH();
        try {
            return (int)mh$.invokeExact(hFindStream, StringLength, LinkName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetVolumeInformationA$MH() {
        return RuntimeHelper.requireNonNull(constants$147.GetVolumeInformationA$MH,"GetVolumeInformationA");
    }
    public static int GetVolumeInformationA ( Addressable lpRootPathName,  Addressable lpVolumeNameBuffer,  int nVolumeNameSize,  Addressable lpVolumeSerialNumber,  Addressable lpMaximumComponentLength,  Addressable lpFileSystemFlags,  Addressable lpFileSystemNameBuffer,  int nFileSystemNameSize) {
        var mh$ = GetVolumeInformationA$MH();
        try {
            return (int)mh$.invokeExact(lpRootPathName, lpVolumeNameBuffer, nVolumeNameSize, lpVolumeSerialNumber, lpMaximumComponentLength, lpFileSystemFlags, lpFileSystemNameBuffer, nFileSystemNameSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTempFileNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$148.GetTempFileNameA$MH,"GetTempFileNameA");
    }
    public static int GetTempFileNameA ( Addressable lpPathName,  Addressable lpPrefixString,  int uUnique,  Addressable lpTempFileName) {
        var mh$ = GetTempFileNameA$MH();
        try {
            return (int)mh$.invokeExact(lpPathName, lpPrefixString, uUnique, lpTempFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileApisToOEM$MH() {
        return RuntimeHelper.requireNonNull(constants$148.SetFileApisToOEM$MH,"SetFileApisToOEM");
    }
    public static void SetFileApisToOEM () {
        var mh$ = SetFileApisToOEM$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileApisToANSI$MH() {
        return RuntimeHelper.requireNonNull(constants$148.SetFileApisToANSI$MH,"SetFileApisToANSI");
    }
    public static void SetFileApisToANSI () {
        var mh$ = SetFileApisToANSI$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyFileFromAppW$MH() {
        return RuntimeHelper.requireNonNull(constants$148.CopyFileFromAppW$MH,"CopyFileFromAppW");
    }
    public static int CopyFileFromAppW ( Addressable lpExistingFileName,  Addressable lpNewFileName,  int bFailIfExists) {
        var mh$ = CopyFileFromAppW$MH();
        try {
            return (int)mh$.invokeExact(lpExistingFileName, lpNewFileName, bFailIfExists);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDirectoryFromAppW$MH() {
        return RuntimeHelper.requireNonNull(constants$148.CreateDirectoryFromAppW$MH,"CreateDirectoryFromAppW");
    }
    public static int CreateDirectoryFromAppW ( Addressable lpPathName,  Addressable lpSecurityAttributes) {
        var mh$ = CreateDirectoryFromAppW$MH();
        try {
            return (int)mh$.invokeExact(lpPathName, lpSecurityAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFileFromAppW$MH() {
        return RuntimeHelper.requireNonNull(constants$148.CreateFileFromAppW$MH,"CreateFileFromAppW");
    }
    public static MemoryAddress CreateFileFromAppW ( Addressable lpFileName,  int dwDesiredAccess,  int dwShareMode,  Addressable lpSecurityAttributes,  int dwCreationDisposition,  int dwFlagsAndAttributes,  Addressable hTemplateFile) {
        var mh$ = CreateFileFromAppW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFile2FromAppW$MH() {
        return RuntimeHelper.requireNonNull(constants$149.CreateFile2FromAppW$MH,"CreateFile2FromAppW");
    }
    public static MemoryAddress CreateFile2FromAppW ( Addressable lpFileName,  int dwDesiredAccess,  int dwShareMode,  int dwCreationDisposition,  Addressable pCreateExParams) {
        var mh$ = CreateFile2FromAppW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpFileName, dwDesiredAccess, dwShareMode, dwCreationDisposition, pCreateExParams);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteFileFromAppW$MH() {
        return RuntimeHelper.requireNonNull(constants$149.DeleteFileFromAppW$MH,"DeleteFileFromAppW");
    }
    public static int DeleteFileFromAppW ( Addressable lpFileName) {
        var mh$ = DeleteFileFromAppW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstFileExFromAppW$MH() {
        return RuntimeHelper.requireNonNull(constants$149.FindFirstFileExFromAppW$MH,"FindFirstFileExFromAppW");
    }
    public static MemoryAddress FindFirstFileExFromAppW ( Addressable lpFileName,  int fInfoLevelId,  Addressable lpFindFileData,  int fSearchOp,  Addressable lpSearchFilter,  int dwAdditionalFlags) {
        var mh$ = FindFirstFileExFromAppW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpFileName, fInfoLevelId, lpFindFileData, fSearchOp, lpSearchFilter, dwAdditionalFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileAttributesExFromAppW$MH() {
        return RuntimeHelper.requireNonNull(constants$149.GetFileAttributesExFromAppW$MH,"GetFileAttributesExFromAppW");
    }
    public static int GetFileAttributesExFromAppW ( Addressable lpFileName,  int fInfoLevelId,  Addressable lpFileInformation) {
        var mh$ = GetFileAttributesExFromAppW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, fInfoLevelId, lpFileInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MoveFileFromAppW$MH() {
        return RuntimeHelper.requireNonNull(constants$149.MoveFileFromAppW$MH,"MoveFileFromAppW");
    }
    public static int MoveFileFromAppW ( Addressable lpExistingFileName,  Addressable lpNewFileName) {
        var mh$ = MoveFileFromAppW$MH();
        try {
            return (int)mh$.invokeExact(lpExistingFileName, lpNewFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveDirectoryFromAppW$MH() {
        return RuntimeHelper.requireNonNull(constants$149.RemoveDirectoryFromAppW$MH,"RemoveDirectoryFromAppW");
    }
    public static int RemoveDirectoryFromAppW ( Addressable lpPathName) {
        var mh$ = RemoveDirectoryFromAppW$MH();
        try {
            return (int)mh$.invokeExact(lpPathName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReplaceFileFromAppW$MH() {
        return RuntimeHelper.requireNonNull(constants$150.ReplaceFileFromAppW$MH,"ReplaceFileFromAppW");
    }
    public static int ReplaceFileFromAppW ( Addressable lpReplacedFileName,  Addressable lpReplacementFileName,  Addressable lpBackupFileName,  int dwReplaceFlags,  Addressable lpExclude,  Addressable lpReserved) {
        var mh$ = ReplaceFileFromAppW$MH();
        try {
            return (int)mh$.invokeExact(lpReplacedFileName, lpReplacementFileName, lpBackupFileName, dwReplaceFlags, lpExclude, lpReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileAttributesFromAppW$MH() {
        return RuntimeHelper.requireNonNull(constants$150.SetFileAttributesFromAppW$MH,"SetFileAttributesFromAppW");
    }
    public static int SetFileAttributesFromAppW ( Addressable lpFileName,  int dwFileAttributes) {
        var mh$ = SetFileAttributesFromAppW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, dwFileAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsDebuggerPresent$MH() {
        return RuntimeHelper.requireNonNull(constants$150.IsDebuggerPresent$MH,"IsDebuggerPresent");
    }
    public static int IsDebuggerPresent () {
        var mh$ = IsDebuggerPresent$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DebugBreak$MH() {
        return RuntimeHelper.requireNonNull(constants$150.DebugBreak$MH,"DebugBreak");
    }
    public static void DebugBreak () {
        var mh$ = DebugBreak$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OutputDebugStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$150.OutputDebugStringA$MH,"OutputDebugStringA");
    }
    public static void OutputDebugStringA ( Addressable lpOutputString) {
        var mh$ = OutputDebugStringA$MH();
        try {
            mh$.invokeExact(lpOutputString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OutputDebugStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$150.OutputDebugStringW$MH,"OutputDebugStringW");
    }
    public static void OutputDebugStringW ( Addressable lpOutputString) {
        var mh$ = OutputDebugStringW$MH();
        try {
            mh$.invokeExact(lpOutputString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ContinueDebugEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$151.ContinueDebugEvent$MH,"ContinueDebugEvent");
    }
    public static int ContinueDebugEvent ( int dwProcessId,  int dwThreadId,  int dwContinueStatus) {
        var mh$ = ContinueDebugEvent$MH();
        try {
            return (int)mh$.invokeExact(dwProcessId, dwThreadId, dwContinueStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitForDebugEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$151.WaitForDebugEvent$MH,"WaitForDebugEvent");
    }
    public static int WaitForDebugEvent ( Addressable lpDebugEvent,  int dwMilliseconds) {
        var mh$ = WaitForDebugEvent$MH();
        try {
            return (int)mh$.invokeExact(lpDebugEvent, dwMilliseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DebugActiveProcess$MH() {
        return RuntimeHelper.requireNonNull(constants$151.DebugActiveProcess$MH,"DebugActiveProcess");
    }
    public static int DebugActiveProcess ( int dwProcessId) {
        var mh$ = DebugActiveProcess$MH();
        try {
            return (int)mh$.invokeExact(dwProcessId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DebugActiveProcessStop$MH() {
        return RuntimeHelper.requireNonNull(constants$151.DebugActiveProcessStop$MH,"DebugActiveProcessStop");
    }
    public static int DebugActiveProcessStop ( int dwProcessId) {
        var mh$ = DebugActiveProcessStop$MH();
        try {
            return (int)mh$.invokeExact(dwProcessId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckRemoteDebuggerPresent$MH() {
        return RuntimeHelper.requireNonNull(constants$151.CheckRemoteDebuggerPresent$MH,"CheckRemoteDebuggerPresent");
    }
    public static int CheckRemoteDebuggerPresent ( Addressable hProcess,  Addressable pbDebuggerPresent) {
        var mh$ = CheckRemoteDebuggerPresent$MH();
        try {
            return (int)mh$.invokeExact(hProcess, pbDebuggerPresent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitForDebugEventEx$MH() {
        return RuntimeHelper.requireNonNull(constants$151.WaitForDebugEventEx$MH,"WaitForDebugEventEx");
    }
    public static int WaitForDebugEventEx ( Addressable lpDebugEvent,  int dwMilliseconds) {
        var mh$ = WaitForDebugEventEx$MH();
        try {
            return (int)mh$.invokeExact(lpDebugEvent, dwMilliseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EncodePointer$MH() {
        return RuntimeHelper.requireNonNull(constants$152.EncodePointer$MH,"EncodePointer");
    }
    public static MemoryAddress EncodePointer ( Addressable Ptr) {
        var mh$ = EncodePointer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DecodePointer$MH() {
        return RuntimeHelper.requireNonNull(constants$152.DecodePointer$MH,"DecodePointer");
    }
    public static MemoryAddress DecodePointer ( Addressable Ptr) {
        var mh$ = DecodePointer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EncodeSystemPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$152.EncodeSystemPointer$MH,"EncodeSystemPointer");
    }
    public static MemoryAddress EncodeSystemPointer ( Addressable Ptr) {
        var mh$ = EncodeSystemPointer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DecodeSystemPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$152.DecodeSystemPointer$MH,"DecodeSystemPointer");
    }
    public static MemoryAddress DecodeSystemPointer ( Addressable Ptr) {
        var mh$ = DecodeSystemPointer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EncodeRemotePointer$MH() {
        return RuntimeHelper.requireNonNull(constants$152.EncodeRemotePointer$MH,"EncodeRemotePointer");
    }
    public static int EncodeRemotePointer ( Addressable ProcessHandle,  Addressable Ptr,  Addressable EncodedPtr) {
        var mh$ = EncodeRemotePointer$MH();
        try {
            return (int)mh$.invokeExact(ProcessHandle, Ptr, EncodedPtr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DecodeRemotePointer$MH() {
        return RuntimeHelper.requireNonNull(constants$152.DecodeRemotePointer$MH,"DecodeRemotePointer");
    }
    public static int DecodeRemotePointer ( Addressable ProcessHandle,  Addressable Ptr,  Addressable DecodedPtr) {
        var mh$ = DecodeRemotePointer$MH();
        try {
            return (int)mh$.invokeExact(ProcessHandle, Ptr, DecodedPtr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Beep$MH() {
        return RuntimeHelper.requireNonNull(constants$153.Beep$MH,"Beep");
    }
    public static int Beep ( int dwFreq,  int dwDuration) {
        var mh$ = Beep$MH();
        try {
            return (int)mh$.invokeExact(dwFreq, dwDuration);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$153.CloseHandle$MH,"CloseHandle");
    }
    public static int CloseHandle ( Addressable hObject) {
        var mh$ = CloseHandle$MH();
        try {
            return (int)mh$.invokeExact(hObject);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DuplicateHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$153.DuplicateHandle$MH,"DuplicateHandle");
    }
    public static int DuplicateHandle ( Addressable hSourceProcessHandle,  Addressable hSourceHandle,  Addressable hTargetProcessHandle,  Addressable lpTargetHandle,  int dwDesiredAccess,  int bInheritHandle,  int dwOptions) {
        var mh$ = DuplicateHandle$MH();
        try {
            return (int)mh$.invokeExact(hSourceProcessHandle, hSourceHandle, hTargetProcessHandle, lpTargetHandle, dwDesiredAccess, bInheritHandle, dwOptions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CompareObjectHandles$MH() {
        return RuntimeHelper.requireNonNull(constants$153.CompareObjectHandles$MH,"CompareObjectHandles");
    }
    public static int CompareObjectHandles ( Addressable hFirstObjectHandle,  Addressable hSecondObjectHandle) {
        var mh$ = CompareObjectHandles$MH();
        try {
            return (int)mh$.invokeExact(hFirstObjectHandle, hSecondObjectHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetHandleInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$153.GetHandleInformation$MH,"GetHandleInformation");
    }
    public static int GetHandleInformation ( Addressable hObject,  Addressable lpdwFlags) {
        var mh$ = GetHandleInformation$MH();
        try {
            return (int)mh$.invokeExact(hObject, lpdwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetHandleInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$153.SetHandleInformation$MH,"SetHandleInformation");
    }
    public static int SetHandleInformation ( Addressable hObject,  int dwMask,  int dwFlags) {
        var mh$ = SetHandleInformation$MH();
        try {
            return (int)mh$.invokeExact(hObject, dwMask, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RaiseException$MH() {
        return RuntimeHelper.requireNonNull(constants$154.RaiseException$MH,"RaiseException");
    }
    public static void RaiseException ( int dwExceptionCode,  int dwExceptionFlags,  int nNumberOfArguments,  Addressable lpArguments) {
        var mh$ = RaiseException$MH();
        try {
            mh$.invokeExact(dwExceptionCode, dwExceptionFlags, nNumberOfArguments, lpArguments);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnhandledExceptionFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$154.UnhandledExceptionFilter$MH,"UnhandledExceptionFilter");
    }
    public static int UnhandledExceptionFilter ( Addressable ExceptionInfo) {
        var mh$ = UnhandledExceptionFilter$MH();
        try {
            return (int)mh$.invokeExact(ExceptionInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetUnhandledExceptionFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$155.SetUnhandledExceptionFilter$MH,"SetUnhandledExceptionFilter");
    }
    public static MemoryAddress SetUnhandledExceptionFilter ( Addressable lpTopLevelExceptionFilter) {
        var mh$ = SetUnhandledExceptionFilter$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpTopLevelExceptionFilter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLastError$MH() {
        return RuntimeHelper.requireNonNull(constants$155.GetLastError$MH,"GetLastError");
    }
    public static int GetLastError () {
        var mh$ = GetLastError$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetLastError$MH() {
        return RuntimeHelper.requireNonNull(constants$155.SetLastError$MH,"SetLastError");
    }
    public static void SetLastError ( int dwErrCode) {
        var mh$ = SetLastError$MH();
        try {
            mh$.invokeExact(dwErrCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetErrorMode$MH() {
        return RuntimeHelper.requireNonNull(constants$155.GetErrorMode$MH,"GetErrorMode");
    }
    public static int GetErrorMode () {
        var mh$ = GetErrorMode$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetErrorMode$MH() {
        return RuntimeHelper.requireNonNull(constants$155.SetErrorMode$MH,"SetErrorMode");
    }
    public static int SetErrorMode ( int uMode) {
        var mh$ = SetErrorMode$MH();
        try {
            return (int)mh$.invokeExact(uMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddVectoredExceptionHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$155.AddVectoredExceptionHandler$MH,"AddVectoredExceptionHandler");
    }
    public static MemoryAddress AddVectoredExceptionHandler ( int First,  Addressable Handler) {
        var mh$ = AddVectoredExceptionHandler$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(First, Handler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveVectoredExceptionHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$156.RemoveVectoredExceptionHandler$MH,"RemoveVectoredExceptionHandler");
    }
    public static int RemoveVectoredExceptionHandler ( Addressable Handle) {
        var mh$ = RemoveVectoredExceptionHandler$MH();
        try {
            return (int)mh$.invokeExact(Handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddVectoredContinueHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$156.AddVectoredContinueHandler$MH,"AddVectoredContinueHandler");
    }
    public static MemoryAddress AddVectoredContinueHandler ( int First,  Addressable Handler) {
        var mh$ = AddVectoredContinueHandler$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(First, Handler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveVectoredContinueHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$156.RemoveVectoredContinueHandler$MH,"RemoveVectoredContinueHandler");
    }
    public static int RemoveVectoredContinueHandler ( Addressable Handle) {
        var mh$ = RemoveVectoredContinueHandler$MH();
        try {
            return (int)mh$.invokeExact(Handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RaiseFailFastException$MH() {
        return RuntimeHelper.requireNonNull(constants$156.RaiseFailFastException$MH,"RaiseFailFastException");
    }
    public static void RaiseFailFastException ( Addressable pExceptionRecord,  Addressable pContextRecord,  int dwFlags) {
        var mh$ = RaiseFailFastException$MH();
        try {
            mh$.invokeExact(pExceptionRecord, pContextRecord, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FatalAppExitA$MH() {
        return RuntimeHelper.requireNonNull(constants$156.FatalAppExitA$MH,"FatalAppExitA");
    }
    public static void FatalAppExitA ( int uAction,  Addressable lpMessageText) {
        var mh$ = FatalAppExitA$MH();
        try {
            mh$.invokeExact(uAction, lpMessageText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FatalAppExitW$MH() {
        return RuntimeHelper.requireNonNull(constants$156.FatalAppExitW$MH,"FatalAppExitW");
    }
    public static void FatalAppExitW ( int uAction,  Addressable lpMessageText) {
        var mh$ = FatalAppExitW$MH();
        try {
            mh$.invokeExact(uAction, lpMessageText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadErrorMode$MH() {
        return RuntimeHelper.requireNonNull(constants$157.GetThreadErrorMode$MH,"GetThreadErrorMode");
    }
    public static int GetThreadErrorMode () {
        var mh$ = GetThreadErrorMode$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadErrorMode$MH() {
        return RuntimeHelper.requireNonNull(constants$157.SetThreadErrorMode$MH,"SetThreadErrorMode");
    }
    public static int SetThreadErrorMode ( int dwNewMode,  Addressable lpOldMode) {
        var mh$ = SetThreadErrorMode$MH();
        try {
            return (int)mh$.invokeExact(dwNewMode, lpOldMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TerminateProcessOnMemoryExhaustion$MH() {
        return RuntimeHelper.requireNonNull(constants$157.TerminateProcessOnMemoryExhaustion$MH,"TerminateProcessOnMemoryExhaustion");
    }
    public static void TerminateProcessOnMemoryExhaustion ( long FailedAllocationSize) {
        var mh$ = TerminateProcessOnMemoryExhaustion$MH();
        try {
            mh$.invokeExact(FailedAllocationSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlsAlloc$MH() {
        return RuntimeHelper.requireNonNull(constants$157.FlsAlloc$MH,"FlsAlloc");
    }
    public static int FlsAlloc ( Addressable lpCallback) {
        var mh$ = FlsAlloc$MH();
        try {
            return (int)mh$.invokeExact(lpCallback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlsGetValue$MH() {
        return RuntimeHelper.requireNonNull(constants$157.FlsGetValue$MH,"FlsGetValue");
    }
    public static MemoryAddress FlsGetValue ( int dwFlsIndex) {
        var mh$ = FlsGetValue$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwFlsIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlsSetValue$MH() {
        return RuntimeHelper.requireNonNull(constants$157.FlsSetValue$MH,"FlsSetValue");
    }
    public static int FlsSetValue ( int dwFlsIndex,  Addressable lpFlsData) {
        var mh$ = FlsSetValue$MH();
        try {
            return (int)mh$.invokeExact(dwFlsIndex, lpFlsData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlsFree$MH() {
        return RuntimeHelper.requireNonNull(constants$158.FlsFree$MH,"FlsFree");
    }
    public static int FlsFree ( int dwFlsIndex) {
        var mh$ = FlsFree$MH();
        try {
            return (int)mh$.invokeExact(dwFlsIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsThreadAFiber$MH() {
        return RuntimeHelper.requireNonNull(constants$158.IsThreadAFiber$MH,"IsThreadAFiber");
    }
    public static int IsThreadAFiber () {
        var mh$ = IsThreadAFiber$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePipe$MH() {
        return RuntimeHelper.requireNonNull(constants$158.CreatePipe$MH,"CreatePipe");
    }
    public static int CreatePipe ( Addressable hReadPipe,  Addressable hWritePipe,  Addressable lpPipeAttributes,  int nSize) {
        var mh$ = CreatePipe$MH();
        try {
            return (int)mh$.invokeExact(hReadPipe, hWritePipe, lpPipeAttributes, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ConnectNamedPipe$MH() {
        return RuntimeHelper.requireNonNull(constants$158.ConnectNamedPipe$MH,"ConnectNamedPipe");
    }
    public static int ConnectNamedPipe ( Addressable hNamedPipe,  Addressable lpOverlapped) {
        var mh$ = ConnectNamedPipe$MH();
        try {
            return (int)mh$.invokeExact(hNamedPipe, lpOverlapped);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DisconnectNamedPipe$MH() {
        return RuntimeHelper.requireNonNull(constants$158.DisconnectNamedPipe$MH,"DisconnectNamedPipe");
    }
    public static int DisconnectNamedPipe ( Addressable hNamedPipe) {
        var mh$ = DisconnectNamedPipe$MH();
        try {
            return (int)mh$.invokeExact(hNamedPipe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetNamedPipeHandleState$MH() {
        return RuntimeHelper.requireNonNull(constants$158.SetNamedPipeHandleState$MH,"SetNamedPipeHandleState");
    }
    public static int SetNamedPipeHandleState ( Addressable hNamedPipe,  Addressable lpMode,  Addressable lpMaxCollectionCount,  Addressable lpCollectDataTimeout) {
        var mh$ = SetNamedPipeHandleState$MH();
        try {
            return (int)mh$.invokeExact(hNamedPipe, lpMode, lpMaxCollectionCount, lpCollectDataTimeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PeekNamedPipe$MH() {
        return RuntimeHelper.requireNonNull(constants$159.PeekNamedPipe$MH,"PeekNamedPipe");
    }
    public static int PeekNamedPipe ( Addressable hNamedPipe,  Addressable lpBuffer,  int nBufferSize,  Addressable lpBytesRead,  Addressable lpTotalBytesAvail,  Addressable lpBytesLeftThisMessage) {
        var mh$ = PeekNamedPipe$MH();
        try {
            return (int)mh$.invokeExact(hNamedPipe, lpBuffer, nBufferSize, lpBytesRead, lpTotalBytesAvail, lpBytesLeftThisMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TransactNamedPipe$MH() {
        return RuntimeHelper.requireNonNull(constants$159.TransactNamedPipe$MH,"TransactNamedPipe");
    }
    public static int TransactNamedPipe ( Addressable hNamedPipe,  Addressable lpInBuffer,  int nInBufferSize,  Addressable lpOutBuffer,  int nOutBufferSize,  Addressable lpBytesRead,  Addressable lpOverlapped) {
        var mh$ = TransactNamedPipe$MH();
        try {
            return (int)mh$.invokeExact(hNamedPipe, lpInBuffer, nInBufferSize, lpOutBuffer, nOutBufferSize, lpBytesRead, lpOverlapped);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateNamedPipeW$MH() {
        return RuntimeHelper.requireNonNull(constants$159.CreateNamedPipeW$MH,"CreateNamedPipeW");
    }
    public static MemoryAddress CreateNamedPipeW ( Addressable lpName,  int dwOpenMode,  int dwPipeMode,  int nMaxInstances,  int nOutBufferSize,  int nInBufferSize,  int nDefaultTimeOut,  Addressable lpSecurityAttributes) {
        var mh$ = CreateNamedPipeW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpName, dwOpenMode, dwPipeMode, nMaxInstances, nOutBufferSize, nInBufferSize, nDefaultTimeOut, lpSecurityAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitNamedPipeW$MH() {
        return RuntimeHelper.requireNonNull(constants$159.WaitNamedPipeW$MH,"WaitNamedPipeW");
    }
    public static int WaitNamedPipeW ( Addressable lpNamedPipeName,  int nTimeOut) {
        var mh$ = WaitNamedPipeW$MH();
        try {
            return (int)mh$.invokeExact(lpNamedPipeName, nTimeOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNamedPipeClientComputerNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$159.GetNamedPipeClientComputerNameW$MH,"GetNamedPipeClientComputerNameW");
    }
    public static int GetNamedPipeClientComputerNameW ( Addressable Pipe,  Addressable ClientComputerName,  int ClientComputerNameLength) {
        var mh$ = GetNamedPipeClientComputerNameW$MH();
        try {
            return (int)mh$.invokeExact(Pipe, ClientComputerName, ClientComputerNameLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImpersonateNamedPipeClient$MH() {
        return RuntimeHelper.requireNonNull(constants$159.ImpersonateNamedPipeClient$MH,"ImpersonateNamedPipeClient");
    }
    public static int ImpersonateNamedPipeClient ( Addressable hNamedPipe) {
        var mh$ = ImpersonateNamedPipeClient$MH();
        try {
            return (int)mh$.invokeExact(hNamedPipe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNamedPipeInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$160.GetNamedPipeInfo$MH,"GetNamedPipeInfo");
    }
    public static int GetNamedPipeInfo ( Addressable hNamedPipe,  Addressable lpFlags,  Addressable lpOutBufferSize,  Addressable lpInBufferSize,  Addressable lpMaxInstances) {
        var mh$ = GetNamedPipeInfo$MH();
        try {
            return (int)mh$.invokeExact(hNamedPipe, lpFlags, lpOutBufferSize, lpInBufferSize, lpMaxInstances);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNamedPipeHandleStateW$MH() {
        return RuntimeHelper.requireNonNull(constants$160.GetNamedPipeHandleStateW$MH,"GetNamedPipeHandleStateW");
    }
    public static int GetNamedPipeHandleStateW ( Addressable hNamedPipe,  Addressable lpState,  Addressable lpCurInstances,  Addressable lpMaxCollectionCount,  Addressable lpCollectDataTimeout,  Addressable lpUserName,  int nMaxUserNameSize) {
        var mh$ = GetNamedPipeHandleStateW$MH();
        try {
            return (int)mh$.invokeExact(hNamedPipe, lpState, lpCurInstances, lpMaxCollectionCount, lpCollectDataTimeout, lpUserName, nMaxUserNameSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CallNamedPipeW$MH() {
        return RuntimeHelper.requireNonNull(constants$160.CallNamedPipeW$MH,"CallNamedPipeW");
    }
    public static int CallNamedPipeW ( Addressable lpNamedPipeName,  Addressable lpInBuffer,  int nInBufferSize,  Addressable lpOutBuffer,  int nOutBufferSize,  Addressable lpBytesRead,  int nTimeOut) {
        var mh$ = CallNamedPipeW$MH();
        try {
            return (int)mh$.invokeExact(lpNamedPipeName, lpInBuffer, nInBufferSize, lpOutBuffer, nOutBufferSize, lpBytesRead, nTimeOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryPerformanceCounter$MH() {
        return RuntimeHelper.requireNonNull(constants$160.QueryPerformanceCounter$MH,"QueryPerformanceCounter");
    }
    public static int QueryPerformanceCounter ( Addressable lpPerformanceCount) {
        var mh$ = QueryPerformanceCounter$MH();
        try {
            return (int)mh$.invokeExact(lpPerformanceCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryPerformanceFrequency$MH() {
        return RuntimeHelper.requireNonNull(constants$160.QueryPerformanceFrequency$MH,"QueryPerformanceFrequency");
    }
    public static int QueryPerformanceFrequency ( Addressable lpFrequency) {
        var mh$ = QueryPerformanceFrequency$MH();
        try {
            return (int)mh$.invokeExact(lpFrequency);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PHEAP_SUMMARY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPHEAP_SUMMARY = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle HeapCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$160.HeapCreate$MH,"HeapCreate");
    }
    public static MemoryAddress HeapCreate ( int flOptions,  long dwInitialSize,  long dwMaximumSize) {
        var mh$ = HeapCreate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(flOptions, dwInitialSize, dwMaximumSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapDestroy$MH() {
        return RuntimeHelper.requireNonNull(constants$161.HeapDestroy$MH,"HeapDestroy");
    }
    public static int HeapDestroy ( Addressable hHeap) {
        var mh$ = HeapDestroy$MH();
        try {
            return (int)mh$.invokeExact(hHeap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapAlloc$MH() {
        return RuntimeHelper.requireNonNull(constants$161.HeapAlloc$MH,"HeapAlloc");
    }
    public static MemoryAddress HeapAlloc ( Addressable hHeap,  int dwFlags,  long dwBytes) {
        var mh$ = HeapAlloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hHeap, dwFlags, dwBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapReAlloc$MH() {
        return RuntimeHelper.requireNonNull(constants$161.HeapReAlloc$MH,"HeapReAlloc");
    }
    public static MemoryAddress HeapReAlloc ( Addressable hHeap,  int dwFlags,  Addressable lpMem,  long dwBytes) {
        var mh$ = HeapReAlloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hHeap, dwFlags, lpMem, dwBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapFree$MH() {
        return RuntimeHelper.requireNonNull(constants$161.HeapFree$MH,"HeapFree");
    }
    public static int HeapFree ( Addressable hHeap,  int dwFlags,  Addressable lpMem) {
        var mh$ = HeapFree$MH();
        try {
            return (int)mh$.invokeExact(hHeap, dwFlags, lpMem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapSize$MH() {
        return RuntimeHelper.requireNonNull(constants$161.HeapSize$MH,"HeapSize");
    }
    public static long HeapSize ( Addressable hHeap,  int dwFlags,  Addressable lpMem) {
        var mh$ = HeapSize$MH();
        try {
            return (long)mh$.invokeExact(hHeap, dwFlags, lpMem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessHeap$MH() {
        return RuntimeHelper.requireNonNull(constants$161.GetProcessHeap$MH,"GetProcessHeap");
    }
    public static MemoryAddress GetProcessHeap () {
        var mh$ = GetProcessHeap$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapCompact$MH() {
        return RuntimeHelper.requireNonNull(constants$162.HeapCompact$MH,"HeapCompact");
    }
    public static long HeapCompact ( Addressable hHeap,  int dwFlags) {
        var mh$ = HeapCompact$MH();
        try {
            return (long)mh$.invokeExact(hHeap, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapSetInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$162.HeapSetInformation$MH,"HeapSetInformation");
    }
    public static int HeapSetInformation ( Addressable HeapHandle,  int HeapInformationClass,  Addressable HeapInformation,  long HeapInformationLength) {
        var mh$ = HeapSetInformation$MH();
        try {
            return (int)mh$.invokeExact(HeapHandle, HeapInformationClass, HeapInformation, HeapInformationLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapValidate$MH() {
        return RuntimeHelper.requireNonNull(constants$162.HeapValidate$MH,"HeapValidate");
    }
    public static int HeapValidate ( Addressable hHeap,  int dwFlags,  Addressable lpMem) {
        var mh$ = HeapValidate$MH();
        try {
            return (int)mh$.invokeExact(hHeap, dwFlags, lpMem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapSummary$MH() {
        return RuntimeHelper.requireNonNull(constants$162.HeapSummary$MH,"HeapSummary");
    }
    public static int HeapSummary ( Addressable hHeap,  int dwFlags,  Addressable lpSummary) {
        var mh$ = HeapSummary$MH();
        try {
            return (int)mh$.invokeExact(hHeap, dwFlags, lpSummary);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessHeaps$MH() {
        return RuntimeHelper.requireNonNull(constants$162.GetProcessHeaps$MH,"GetProcessHeaps");
    }
    public static int GetProcessHeaps ( int NumberOfHeaps,  Addressable ProcessHeaps) {
        var mh$ = GetProcessHeaps$MH();
        try {
            return (int)mh$.invokeExact(NumberOfHeaps, ProcessHeaps);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapLock$MH() {
        return RuntimeHelper.requireNonNull(constants$162.HeapLock$MH,"HeapLock");
    }
    public static int HeapLock ( Addressable hHeap) {
        var mh$ = HeapLock$MH();
        try {
            return (int)mh$.invokeExact(hHeap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapUnlock$MH() {
        return RuntimeHelper.requireNonNull(constants$163.HeapUnlock$MH,"HeapUnlock");
    }
    public static int HeapUnlock ( Addressable hHeap) {
        var mh$ = HeapUnlock$MH();
        try {
            return (int)mh$.invokeExact(hHeap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapWalk$MH() {
        return RuntimeHelper.requireNonNull(constants$163.HeapWalk$MH,"HeapWalk");
    }
    public static int HeapWalk ( Addressable hHeap,  Addressable lpEntry) {
        var mh$ = HeapWalk$MH();
        try {
            return (int)mh$.invokeExact(hHeap, lpEntry);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HeapQueryInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$163.HeapQueryInformation$MH,"HeapQueryInformation");
    }
    public static int HeapQueryInformation ( Addressable HeapHandle,  int HeapInformationClass,  Addressable HeapInformation,  long HeapInformationLength,  Addressable ReturnLength) {
        var mh$ = HeapQueryInformation$MH();
        try {
            return (int)mh$.invokeExact(HeapHandle, HeapInformationClass, HeapInformation, HeapInformationLength, ReturnLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateIoCompletionPort$MH() {
        return RuntimeHelper.requireNonNull(constants$163.CreateIoCompletionPort$MH,"CreateIoCompletionPort");
    }
    public static MemoryAddress CreateIoCompletionPort ( Addressable FileHandle,  Addressable ExistingCompletionPort,  long CompletionKey,  int NumberOfConcurrentThreads) {
        var mh$ = CreateIoCompletionPort$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(FileHandle, ExistingCompletionPort, CompletionKey, NumberOfConcurrentThreads);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetQueuedCompletionStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$163.GetQueuedCompletionStatus$MH,"GetQueuedCompletionStatus");
    }
    public static int GetQueuedCompletionStatus ( Addressable CompletionPort,  Addressable lpNumberOfBytesTransferred,  Addressable lpCompletionKey,  Addressable lpOverlapped,  int dwMilliseconds) {
        var mh$ = GetQueuedCompletionStatus$MH();
        try {
            return (int)mh$.invokeExact(CompletionPort, lpNumberOfBytesTransferred, lpCompletionKey, lpOverlapped, dwMilliseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetQueuedCompletionStatusEx$MH() {
        return RuntimeHelper.requireNonNull(constants$163.GetQueuedCompletionStatusEx$MH,"GetQueuedCompletionStatusEx");
    }
    public static int GetQueuedCompletionStatusEx ( Addressable CompletionPort,  Addressable lpCompletionPortEntries,  int ulCount,  Addressable ulNumEntriesRemoved,  int dwMilliseconds,  int fAlertable) {
        var mh$ = GetQueuedCompletionStatusEx$MH();
        try {
            return (int)mh$.invokeExact(CompletionPort, lpCompletionPortEntries, ulCount, ulNumEntriesRemoved, dwMilliseconds, fAlertable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PostQueuedCompletionStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$164.PostQueuedCompletionStatus$MH,"PostQueuedCompletionStatus");
    }
    public static int PostQueuedCompletionStatus ( Addressable CompletionPort,  int dwNumberOfBytesTransferred,  long dwCompletionKey,  Addressable lpOverlapped) {
        var mh$ = PostQueuedCompletionStatus$MH();
        try {
            return (int)mh$.invokeExact(CompletionPort, dwNumberOfBytesTransferred, dwCompletionKey, lpOverlapped);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceIoControl$MH() {
        return RuntimeHelper.requireNonNull(constants$164.DeviceIoControl$MH,"DeviceIoControl");
    }
    public static int DeviceIoControl ( Addressable hDevice,  int dwIoControlCode,  Addressable lpInBuffer,  int nInBufferSize,  Addressable lpOutBuffer,  int nOutBufferSize,  Addressable lpBytesReturned,  Addressable lpOverlapped) {
        var mh$ = DeviceIoControl$MH();
        try {
            return (int)mh$.invokeExact(hDevice, dwIoControlCode, lpInBuffer, nInBufferSize, lpOutBuffer, nOutBufferSize, lpBytesReturned, lpOverlapped);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetOverlappedResult$MH() {
        return RuntimeHelper.requireNonNull(constants$164.GetOverlappedResult$MH,"GetOverlappedResult");
    }
    public static int GetOverlappedResult ( Addressable hFile,  Addressable lpOverlapped,  Addressable lpNumberOfBytesTransferred,  int bWait) {
        var mh$ = GetOverlappedResult$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpOverlapped, lpNumberOfBytesTransferred, bWait);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CancelIoEx$MH() {
        return RuntimeHelper.requireNonNull(constants$164.CancelIoEx$MH,"CancelIoEx");
    }
    public static int CancelIoEx ( Addressable hFile,  Addressable lpOverlapped) {
        var mh$ = CancelIoEx$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpOverlapped);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CancelIo$MH() {
        return RuntimeHelper.requireNonNull(constants$164.CancelIo$MH,"CancelIo");
    }
    public static int CancelIo ( Addressable hFile) {
        var mh$ = CancelIo$MH();
        try {
            return (int)mh$.invokeExact(hFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetOverlappedResultEx$MH() {
        return RuntimeHelper.requireNonNull(constants$164.GetOverlappedResultEx$MH,"GetOverlappedResultEx");
    }
    public static int GetOverlappedResultEx ( Addressable hFile,  Addressable lpOverlapped,  Addressable lpNumberOfBytesTransferred,  int dwMilliseconds,  int bAlertable) {
        var mh$ = GetOverlappedResultEx$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpOverlapped, lpNumberOfBytesTransferred, dwMilliseconds, bAlertable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CancelSynchronousIo$MH() {
        return RuntimeHelper.requireNonNull(constants$165.CancelSynchronousIo$MH,"CancelSynchronousIo");
    }
    public static int CancelSynchronousIo ( Addressable hThread) {
        var mh$ = CancelSynchronousIo$MH();
        try {
            return (int)mh$.invokeExact(hThread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PSRWLOCK = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle InitializeSRWLock$MH() {
        return RuntimeHelper.requireNonNull(constants$165.InitializeSRWLock$MH,"InitializeSRWLock");
    }
    public static void InitializeSRWLock ( Addressable SRWLock) {
        var mh$ = InitializeSRWLock$MH();
        try {
            mh$.invokeExact(SRWLock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReleaseSRWLockExclusive$MH() {
        return RuntimeHelper.requireNonNull(constants$165.ReleaseSRWLockExclusive$MH,"ReleaseSRWLockExclusive");
    }
    public static void ReleaseSRWLockExclusive ( Addressable SRWLock) {
        var mh$ = ReleaseSRWLockExclusive$MH();
        try {
            mh$.invokeExact(SRWLock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReleaseSRWLockShared$MH() {
        return RuntimeHelper.requireNonNull(constants$165.ReleaseSRWLockShared$MH,"ReleaseSRWLockShared");
    }
    public static void ReleaseSRWLockShared ( Addressable SRWLock) {
        var mh$ = ReleaseSRWLockShared$MH();
        try {
            mh$.invokeExact(SRWLock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AcquireSRWLockExclusive$MH() {
        return RuntimeHelper.requireNonNull(constants$165.AcquireSRWLockExclusive$MH,"AcquireSRWLockExclusive");
    }
    public static void AcquireSRWLockExclusive ( Addressable SRWLock) {
        var mh$ = AcquireSRWLockExclusive$MH();
        try {
            mh$.invokeExact(SRWLock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AcquireSRWLockShared$MH() {
        return RuntimeHelper.requireNonNull(constants$165.AcquireSRWLockShared$MH,"AcquireSRWLockShared");
    }
    public static void AcquireSRWLockShared ( Addressable SRWLock) {
        var mh$ = AcquireSRWLockShared$MH();
        try {
            mh$.invokeExact(SRWLock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TryAcquireSRWLockExclusive$MH() {
        return RuntimeHelper.requireNonNull(constants$166.TryAcquireSRWLockExclusive$MH,"TryAcquireSRWLockExclusive");
    }
    public static byte TryAcquireSRWLockExclusive ( Addressable SRWLock) {
        var mh$ = TryAcquireSRWLockExclusive$MH();
        try {
            return (byte)mh$.invokeExact(SRWLock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TryAcquireSRWLockShared$MH() {
        return RuntimeHelper.requireNonNull(constants$166.TryAcquireSRWLockShared$MH,"TryAcquireSRWLockShared");
    }
    public static byte TryAcquireSRWLockShared ( Addressable SRWLock) {
        var mh$ = TryAcquireSRWLockShared$MH();
        try {
            return (byte)mh$.invokeExact(SRWLock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitializeCriticalSection$MH() {
        return RuntimeHelper.requireNonNull(constants$166.InitializeCriticalSection$MH,"InitializeCriticalSection");
    }
    public static void InitializeCriticalSection ( Addressable lpCriticalSection) {
        var mh$ = InitializeCriticalSection$MH();
        try {
            mh$.invokeExact(lpCriticalSection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnterCriticalSection$MH() {
        return RuntimeHelper.requireNonNull(constants$166.EnterCriticalSection$MH,"EnterCriticalSection");
    }
    public static void EnterCriticalSection ( Addressable lpCriticalSection) {
        var mh$ = EnterCriticalSection$MH();
        try {
            mh$.invokeExact(lpCriticalSection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LeaveCriticalSection$MH() {
        return RuntimeHelper.requireNonNull(constants$166.LeaveCriticalSection$MH,"LeaveCriticalSection");
    }
    public static void LeaveCriticalSection ( Addressable lpCriticalSection) {
        var mh$ = LeaveCriticalSection$MH();
        try {
            mh$.invokeExact(lpCriticalSection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitializeCriticalSectionAndSpinCount$MH() {
        return RuntimeHelper.requireNonNull(constants$166.InitializeCriticalSectionAndSpinCount$MH,"InitializeCriticalSectionAndSpinCount");
    }
    public static int InitializeCriticalSectionAndSpinCount ( Addressable lpCriticalSection,  int dwSpinCount) {
        var mh$ = InitializeCriticalSectionAndSpinCount$MH();
        try {
            return (int)mh$.invokeExact(lpCriticalSection, dwSpinCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitializeCriticalSectionEx$MH() {
        return RuntimeHelper.requireNonNull(constants$167.InitializeCriticalSectionEx$MH,"InitializeCriticalSectionEx");
    }
    public static int InitializeCriticalSectionEx ( Addressable lpCriticalSection,  int dwSpinCount,  int Flags) {
        var mh$ = InitializeCriticalSectionEx$MH();
        try {
            return (int)mh$.invokeExact(lpCriticalSection, dwSpinCount, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCriticalSectionSpinCount$MH() {
        return RuntimeHelper.requireNonNull(constants$167.SetCriticalSectionSpinCount$MH,"SetCriticalSectionSpinCount");
    }
    public static int SetCriticalSectionSpinCount ( Addressable lpCriticalSection,  int dwSpinCount) {
        var mh$ = SetCriticalSectionSpinCount$MH();
        try {
            return (int)mh$.invokeExact(lpCriticalSection, dwSpinCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TryEnterCriticalSection$MH() {
        return RuntimeHelper.requireNonNull(constants$167.TryEnterCriticalSection$MH,"TryEnterCriticalSection");
    }
    public static int TryEnterCriticalSection ( Addressable lpCriticalSection) {
        var mh$ = TryEnterCriticalSection$MH();
        try {
            return (int)mh$.invokeExact(lpCriticalSection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteCriticalSection$MH() {
        return RuntimeHelper.requireNonNull(constants$167.DeleteCriticalSection$MH,"DeleteCriticalSection");
    }
    public static void DeleteCriticalSection ( Addressable lpCriticalSection) {
        var mh$ = DeleteCriticalSection$MH();
        try {
            mh$.invokeExact(lpCriticalSection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PINIT_ONCE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPINIT_ONCE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle InitOnceInitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$168.InitOnceInitialize$MH,"InitOnceInitialize");
    }
    public static void InitOnceInitialize ( Addressable InitOnce) {
        var mh$ = InitOnceInitialize$MH();
        try {
            mh$.invokeExact(InitOnce);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitOnceExecuteOnce$MH() {
        return RuntimeHelper.requireNonNull(constants$168.InitOnceExecuteOnce$MH,"InitOnceExecuteOnce");
    }
    public static int InitOnceExecuteOnce ( Addressable InitOnce,  Addressable InitFn,  Addressable Parameter,  Addressable Context) {
        var mh$ = InitOnceExecuteOnce$MH();
        try {
            return (int)mh$.invokeExact(InitOnce, InitFn, Parameter, Context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitOnceBeginInitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$168.InitOnceBeginInitialize$MH,"InitOnceBeginInitialize");
    }
    public static int InitOnceBeginInitialize ( Addressable lpInitOnce,  int dwFlags,  Addressable fPending,  Addressable lpContext) {
        var mh$ = InitOnceBeginInitialize$MH();
        try {
            return (int)mh$.invokeExact(lpInitOnce, dwFlags, fPending, lpContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitOnceComplete$MH() {
        return RuntimeHelper.requireNonNull(constants$168.InitOnceComplete$MH,"InitOnceComplete");
    }
    public static int InitOnceComplete ( Addressable lpInitOnce,  int dwFlags,  Addressable lpContext) {
        var mh$ = InitOnceComplete$MH();
        try {
            return (int)mh$.invokeExact(lpInitOnce, dwFlags, lpContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCONDITION_VARIABLE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle InitializeConditionVariable$MH() {
        return RuntimeHelper.requireNonNull(constants$168.InitializeConditionVariable$MH,"InitializeConditionVariable");
    }
    public static void InitializeConditionVariable ( Addressable ConditionVariable) {
        var mh$ = InitializeConditionVariable$MH();
        try {
            mh$.invokeExact(ConditionVariable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WakeConditionVariable$MH() {
        return RuntimeHelper.requireNonNull(constants$168.WakeConditionVariable$MH,"WakeConditionVariable");
    }
    public static void WakeConditionVariable ( Addressable ConditionVariable) {
        var mh$ = WakeConditionVariable$MH();
        try {
            mh$.invokeExact(ConditionVariable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WakeAllConditionVariable$MH() {
        return RuntimeHelper.requireNonNull(constants$169.WakeAllConditionVariable$MH,"WakeAllConditionVariable");
    }
    public static void WakeAllConditionVariable ( Addressable ConditionVariable) {
        var mh$ = WakeAllConditionVariable$MH();
        try {
            mh$.invokeExact(ConditionVariable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SleepConditionVariableCS$MH() {
        return RuntimeHelper.requireNonNull(constants$169.SleepConditionVariableCS$MH,"SleepConditionVariableCS");
    }
    public static int SleepConditionVariableCS ( Addressable ConditionVariable,  Addressable CriticalSection,  int dwMilliseconds) {
        var mh$ = SleepConditionVariableCS$MH();
        try {
            return (int)mh$.invokeExact(ConditionVariable, CriticalSection, dwMilliseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SleepConditionVariableSRW$MH() {
        return RuntimeHelper.requireNonNull(constants$169.SleepConditionVariableSRW$MH,"SleepConditionVariableSRW");
    }
    public static int SleepConditionVariableSRW ( Addressable ConditionVariable,  Addressable SRWLock,  int dwMilliseconds,  int Flags) {
        var mh$ = SleepConditionVariableSRW$MH();
        try {
            return (int)mh$.invokeExact(ConditionVariable, SRWLock, dwMilliseconds, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$169.SetEvent$MH,"SetEvent");
    }
    public static int SetEvent ( Addressable hEvent) {
        var mh$ = SetEvent$MH();
        try {
            return (int)mh$.invokeExact(hEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ResetEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$169.ResetEvent$MH,"ResetEvent");
    }
    public static int ResetEvent ( Addressable hEvent) {
        var mh$ = ResetEvent$MH();
        try {
            return (int)mh$.invokeExact(hEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReleaseSemaphore$MH() {
        return RuntimeHelper.requireNonNull(constants$169.ReleaseSemaphore$MH,"ReleaseSemaphore");
    }
    public static int ReleaseSemaphore ( Addressable hSemaphore,  int lReleaseCount,  Addressable lpPreviousCount) {
        var mh$ = ReleaseSemaphore$MH();
        try {
            return (int)mh$.invokeExact(hSemaphore, lReleaseCount, lpPreviousCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReleaseMutex$MH() {
        return RuntimeHelper.requireNonNull(constants$170.ReleaseMutex$MH,"ReleaseMutex");
    }
    public static int ReleaseMutex ( Addressable hMutex) {
        var mh$ = ReleaseMutex$MH();
        try {
            return (int)mh$.invokeExact(hMutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitForSingleObject$MH() {
        return RuntimeHelper.requireNonNull(constants$170.WaitForSingleObject$MH,"WaitForSingleObject");
    }
    public static int WaitForSingleObject ( Addressable hHandle,  int dwMilliseconds) {
        var mh$ = WaitForSingleObject$MH();
        try {
            return (int)mh$.invokeExact(hHandle, dwMilliseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SleepEx$MH() {
        return RuntimeHelper.requireNonNull(constants$170.SleepEx$MH,"SleepEx");
    }
    public static int SleepEx ( int dwMilliseconds,  int bAlertable) {
        var mh$ = SleepEx$MH();
        try {
            return (int)mh$.invokeExact(dwMilliseconds, bAlertable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitForSingleObjectEx$MH() {
        return RuntimeHelper.requireNonNull(constants$170.WaitForSingleObjectEx$MH,"WaitForSingleObjectEx");
    }
    public static int WaitForSingleObjectEx ( Addressable hHandle,  int dwMilliseconds,  int bAlertable) {
        var mh$ = WaitForSingleObjectEx$MH();
        try {
            return (int)mh$.invokeExact(hHandle, dwMilliseconds, bAlertable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitForMultipleObjectsEx$MH() {
        return RuntimeHelper.requireNonNull(constants$170.WaitForMultipleObjectsEx$MH,"WaitForMultipleObjectsEx");
    }
    public static int WaitForMultipleObjectsEx ( int nCount,  Addressable lpHandles,  int bWaitAll,  int dwMilliseconds,  int bAlertable) {
        var mh$ = WaitForMultipleObjectsEx$MH();
        try {
            return (int)mh$.invokeExact(nCount, lpHandles, bWaitAll, dwMilliseconds, bAlertable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateMutexA$MH() {
        return RuntimeHelper.requireNonNull(constants$170.CreateMutexA$MH,"CreateMutexA");
    }
    public static MemoryAddress CreateMutexA ( Addressable lpMutexAttributes,  int bInitialOwner,  Addressable lpName) {
        var mh$ = CreateMutexA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpMutexAttributes, bInitialOwner, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateMutexW$MH() {
        return RuntimeHelper.requireNonNull(constants$171.CreateMutexW$MH,"CreateMutexW");
    }
    public static MemoryAddress CreateMutexW ( Addressable lpMutexAttributes,  int bInitialOwner,  Addressable lpName) {
        var mh$ = CreateMutexW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpMutexAttributes, bInitialOwner, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenMutexW$MH() {
        return RuntimeHelper.requireNonNull(constants$171.OpenMutexW$MH,"OpenMutexW");
    }
    public static MemoryAddress OpenMutexW ( int dwDesiredAccess,  int bInheritHandle,  Addressable lpName) {
        var mh$ = OpenMutexW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwDesiredAccess, bInheritHandle, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateEventA$MH() {
        return RuntimeHelper.requireNonNull(constants$171.CreateEventA$MH,"CreateEventA");
    }
    public static MemoryAddress CreateEventA ( Addressable lpEventAttributes,  int bManualReset,  int bInitialState,  Addressable lpName) {
        var mh$ = CreateEventA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpEventAttributes, bManualReset, bInitialState, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateEventW$MH() {
        return RuntimeHelper.requireNonNull(constants$171.CreateEventW$MH,"CreateEventW");
    }
    public static MemoryAddress CreateEventW ( Addressable lpEventAttributes,  int bManualReset,  int bInitialState,  Addressable lpName) {
        var mh$ = CreateEventW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpEventAttributes, bManualReset, bInitialState, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenEventA$MH() {
        return RuntimeHelper.requireNonNull(constants$171.OpenEventA$MH,"OpenEventA");
    }
    public static MemoryAddress OpenEventA ( int dwDesiredAccess,  int bInheritHandle,  Addressable lpName) {
        var mh$ = OpenEventA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwDesiredAccess, bInheritHandle, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenEventW$MH() {
        return RuntimeHelper.requireNonNull(constants$171.OpenEventW$MH,"OpenEventW");
    }
    public static MemoryAddress OpenEventW ( int dwDesiredAccess,  int bInheritHandle,  Addressable lpName) {
        var mh$ = OpenEventW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwDesiredAccess, bInheritHandle, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenSemaphoreW$MH() {
        return RuntimeHelper.requireNonNull(constants$172.OpenSemaphoreW$MH,"OpenSemaphoreW");
    }
    public static MemoryAddress OpenSemaphoreW ( int dwDesiredAccess,  int bInheritHandle,  Addressable lpName) {
        var mh$ = OpenSemaphoreW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwDesiredAccess, bInheritHandle, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenWaitableTimerW$MH() {
        return RuntimeHelper.requireNonNull(constants$172.OpenWaitableTimerW$MH,"OpenWaitableTimerW");
    }
    public static MemoryAddress OpenWaitableTimerW ( int dwDesiredAccess,  int bInheritHandle,  Addressable lpTimerName) {
        var mh$ = OpenWaitableTimerW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwDesiredAccess, bInheritHandle, lpTimerName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWaitableTimerEx$MH() {
        return RuntimeHelper.requireNonNull(constants$172.SetWaitableTimerEx$MH,"SetWaitableTimerEx");
    }
    public static int SetWaitableTimerEx ( Addressable hTimer,  Addressable lpDueTime,  int lPeriod,  Addressable pfnCompletionRoutine,  Addressable lpArgToCompletionRoutine,  Addressable WakeContext,  int TolerableDelay) {
        var mh$ = SetWaitableTimerEx$MH();
        try {
            return (int)mh$.invokeExact(hTimer, lpDueTime, lPeriod, pfnCompletionRoutine, lpArgToCompletionRoutine, WakeContext, TolerableDelay);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWaitableTimer$MH() {
        return RuntimeHelper.requireNonNull(constants$172.SetWaitableTimer$MH,"SetWaitableTimer");
    }
    public static int SetWaitableTimer ( Addressable hTimer,  Addressable lpDueTime,  int lPeriod,  Addressable pfnCompletionRoutine,  Addressable lpArgToCompletionRoutine,  int fResume) {
        var mh$ = SetWaitableTimer$MH();
        try {
            return (int)mh$.invokeExact(hTimer, lpDueTime, lPeriod, pfnCompletionRoutine, lpArgToCompletionRoutine, fResume);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CancelWaitableTimer$MH() {
        return RuntimeHelper.requireNonNull(constants$173.CancelWaitableTimer$MH,"CancelWaitableTimer");
    }
    public static int CancelWaitableTimer ( Addressable hTimer) {
        var mh$ = CancelWaitableTimer$MH();
        try {
            return (int)mh$.invokeExact(hTimer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateMutexExA$MH() {
        return RuntimeHelper.requireNonNull(constants$173.CreateMutexExA$MH,"CreateMutexExA");
    }
    public static MemoryAddress CreateMutexExA ( Addressable lpMutexAttributes,  Addressable lpName,  int dwFlags,  int dwDesiredAccess) {
        var mh$ = CreateMutexExA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpMutexAttributes, lpName, dwFlags, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateMutexExW$MH() {
        return RuntimeHelper.requireNonNull(constants$173.CreateMutexExW$MH,"CreateMutexExW");
    }
    public static MemoryAddress CreateMutexExW ( Addressable lpMutexAttributes,  Addressable lpName,  int dwFlags,  int dwDesiredAccess) {
        var mh$ = CreateMutexExW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpMutexAttributes, lpName, dwFlags, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateEventExA$MH() {
        return RuntimeHelper.requireNonNull(constants$173.CreateEventExA$MH,"CreateEventExA");
    }
    public static MemoryAddress CreateEventExA ( Addressable lpEventAttributes,  Addressable lpName,  int dwFlags,  int dwDesiredAccess) {
        var mh$ = CreateEventExA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpEventAttributes, lpName, dwFlags, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateEventExW$MH() {
        return RuntimeHelper.requireNonNull(constants$173.CreateEventExW$MH,"CreateEventExW");
    }
    public static MemoryAddress CreateEventExW ( Addressable lpEventAttributes,  Addressable lpName,  int dwFlags,  int dwDesiredAccess) {
        var mh$ = CreateEventExW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpEventAttributes, lpName, dwFlags, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateSemaphoreExW$MH() {
        return RuntimeHelper.requireNonNull(constants$173.CreateSemaphoreExW$MH,"CreateSemaphoreExW");
    }
    public static MemoryAddress CreateSemaphoreExW ( Addressable lpSemaphoreAttributes,  int lInitialCount,  int lMaximumCount,  Addressable lpName,  int dwFlags,  int dwDesiredAccess) {
        var mh$ = CreateSemaphoreExW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpSemaphoreAttributes, lInitialCount, lMaximumCount, lpName, dwFlags, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateWaitableTimerExW$MH() {
        return RuntimeHelper.requireNonNull(constants$174.CreateWaitableTimerExW$MH,"CreateWaitableTimerExW");
    }
    public static MemoryAddress CreateWaitableTimerExW ( Addressable lpTimerAttributes,  Addressable lpTimerName,  int dwFlags,  int dwDesiredAccess) {
        var mh$ = CreateWaitableTimerExW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpTimerAttributes, lpTimerName, dwFlags, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PSYNCHRONIZATION_BARRIER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSYNCHRONIZATION_BARRIER = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle EnterSynchronizationBarrier$MH() {
        return RuntimeHelper.requireNonNull(constants$174.EnterSynchronizationBarrier$MH,"EnterSynchronizationBarrier");
    }
    public static int EnterSynchronizationBarrier ( Addressable lpBarrier,  int dwFlags) {
        var mh$ = EnterSynchronizationBarrier$MH();
        try {
            return (int)mh$.invokeExact(lpBarrier, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitializeSynchronizationBarrier$MH() {
        return RuntimeHelper.requireNonNull(constants$174.InitializeSynchronizationBarrier$MH,"InitializeSynchronizationBarrier");
    }
    public static int InitializeSynchronizationBarrier ( Addressable lpBarrier,  int lTotalThreads,  int lSpinCount) {
        var mh$ = InitializeSynchronizationBarrier$MH();
        try {
            return (int)mh$.invokeExact(lpBarrier, lTotalThreads, lSpinCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteSynchronizationBarrier$MH() {
        return RuntimeHelper.requireNonNull(constants$174.DeleteSynchronizationBarrier$MH,"DeleteSynchronizationBarrier");
    }
    public static int DeleteSynchronizationBarrier ( Addressable lpBarrier) {
        var mh$ = DeleteSynchronizationBarrier$MH();
        try {
            return (int)mh$.invokeExact(lpBarrier);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Sleep$MH() {
        return RuntimeHelper.requireNonNull(constants$174.Sleep$MH,"Sleep");
    }
    public static void Sleep ( int dwMilliseconds) {
        var mh$ = Sleep$MH();
        try {
            mh$.invokeExact(dwMilliseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitOnAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$174.WaitOnAddress$MH,"WaitOnAddress");
    }
    public static int WaitOnAddress ( Addressable Address,  Addressable CompareAddress,  long AddressSize,  int dwMilliseconds) {
        var mh$ = WaitOnAddress$MH();
        try {
            return (int)mh$.invokeExact(Address, CompareAddress, AddressSize, dwMilliseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WakeByAddressSingle$MH() {
        return RuntimeHelper.requireNonNull(constants$175.WakeByAddressSingle$MH,"WakeByAddressSingle");
    }
    public static void WakeByAddressSingle ( Addressable Address) {
        var mh$ = WakeByAddressSingle$MH();
        try {
            mh$.invokeExact(Address);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WakeByAddressAll$MH() {
        return RuntimeHelper.requireNonNull(constants$175.WakeByAddressAll$MH,"WakeByAddressAll");
    }
    public static void WakeByAddressAll ( Addressable Address) {
        var mh$ = WakeByAddressAll$MH();
        try {
            mh$.invokeExact(Address);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SignalObjectAndWait$MH() {
        return RuntimeHelper.requireNonNull(constants$175.SignalObjectAndWait$MH,"SignalObjectAndWait");
    }
    public static int SignalObjectAndWait ( Addressable hObjectToSignal,  Addressable hObjectToWaitOn,  int dwMilliseconds,  int bAlertable) {
        var mh$ = SignalObjectAndWait$MH();
        try {
            return (int)mh$.invokeExact(hObjectToSignal, hObjectToWaitOn, dwMilliseconds, bAlertable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitForMultipleObjects$MH() {
        return RuntimeHelper.requireNonNull(constants$175.WaitForMultipleObjects$MH,"WaitForMultipleObjects");
    }
    public static int WaitForMultipleObjects ( int nCount,  Addressable lpHandles,  int bWaitAll,  int dwMilliseconds) {
        var mh$ = WaitForMultipleObjects$MH();
        try {
            return (int)mh$.invokeExact(nCount, lpHandles, bWaitAll, dwMilliseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateSemaphoreW$MH() {
        return RuntimeHelper.requireNonNull(constants$175.CreateSemaphoreW$MH,"CreateSemaphoreW");
    }
    public static MemoryAddress CreateSemaphoreW ( Addressable lpSemaphoreAttributes,  int lInitialCount,  int lMaximumCount,  Addressable lpName) {
        var mh$ = CreateSemaphoreW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpSemaphoreAttributes, lInitialCount, lMaximumCount, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateWaitableTimerW$MH() {
        return RuntimeHelper.requireNonNull(constants$175.CreateWaitableTimerW$MH,"CreateWaitableTimerW");
    }
    public static MemoryAddress CreateWaitableTimerW ( Addressable lpTimerAttributes,  int bManualReset,  Addressable lpTimerName) {
        var mh$ = CreateWaitableTimerW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpTimerAttributes, bManualReset, lpTimerName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitializeSListHead$MH() {
        return RuntimeHelper.requireNonNull(constants$176.InitializeSListHead$MH,"InitializeSListHead");
    }
    public static void InitializeSListHead ( Addressable ListHead) {
        var mh$ = InitializeSListHead$MH();
        try {
            mh$.invokeExact(ListHead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InterlockedPopEntrySList$MH() {
        return RuntimeHelper.requireNonNull(constants$176.InterlockedPopEntrySList$MH,"InterlockedPopEntrySList");
    }
    public static MemoryAddress InterlockedPopEntrySList ( Addressable ListHead) {
        var mh$ = InterlockedPopEntrySList$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ListHead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InterlockedPushEntrySList$MH() {
        return RuntimeHelper.requireNonNull(constants$176.InterlockedPushEntrySList$MH,"InterlockedPushEntrySList");
    }
    public static MemoryAddress InterlockedPushEntrySList ( Addressable ListHead,  Addressable ListEntry) {
        var mh$ = InterlockedPushEntrySList$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ListHead, ListEntry);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InterlockedPushListSListEx$MH() {
        return RuntimeHelper.requireNonNull(constants$176.InterlockedPushListSListEx$MH,"InterlockedPushListSListEx");
    }
    public static MemoryAddress InterlockedPushListSListEx ( Addressable ListHead,  Addressable List,  Addressable ListEnd,  int Count) {
        var mh$ = InterlockedPushListSListEx$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ListHead, List, ListEnd, Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InterlockedFlushSList$MH() {
        return RuntimeHelper.requireNonNull(constants$176.InterlockedFlushSList$MH,"InterlockedFlushSList");
    }
    public static MemoryAddress InterlockedFlushSList ( Addressable ListHead) {
        var mh$ = InterlockedFlushSList$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ListHead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryDepthSList$MH() {
        return RuntimeHelper.requireNonNull(constants$176.QueryDepthSList$MH,"QueryDepthSList");
    }
    public static short QueryDepthSList ( Addressable ListHead) {
        var mh$ = QueryDepthSList$MH();
        try {
            return (short)mh$.invokeExact(ListHead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PPROCESS_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPROCESS_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSTARTUPINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSTARTUPINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSTARTUPINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle QueueUserAPC$MH() {
        return RuntimeHelper.requireNonNull(constants$177.QueueUserAPC$MH,"QueueUserAPC");
    }
    public static int QueueUserAPC ( Addressable pfnAPC,  Addressable hThread,  long dwData) {
        var mh$ = QueueUserAPC$MH();
        try {
            return (int)mh$.invokeExact(pfnAPC, hThread, dwData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessTimes$MH() {
        return RuntimeHelper.requireNonNull(constants$177.GetProcessTimes$MH,"GetProcessTimes");
    }
    public static int GetProcessTimes ( Addressable hProcess,  Addressable lpCreationTime,  Addressable lpExitTime,  Addressable lpKernelTime,  Addressable lpUserTime) {
        var mh$ = GetProcessTimes$MH();
        try {
            return (int)mh$.invokeExact(hProcess, lpCreationTime, lpExitTime, lpKernelTime, lpUserTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentProcess$MH() {
        return RuntimeHelper.requireNonNull(constants$177.GetCurrentProcess$MH,"GetCurrentProcess");
    }
    public static MemoryAddress GetCurrentProcess () {
        var mh$ = GetCurrentProcess$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentProcessId$MH() {
        return RuntimeHelper.requireNonNull(constants$177.GetCurrentProcessId$MH,"GetCurrentProcessId");
    }
    public static int GetCurrentProcessId () {
        var mh$ = GetCurrentProcessId$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExitProcess$MH() {
        return RuntimeHelper.requireNonNull(constants$177.ExitProcess$MH,"ExitProcess");
    }
    public static void ExitProcess ( int uExitCode) {
        var mh$ = ExitProcess$MH();
        try {
            mh$.invokeExact(uExitCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TerminateProcess$MH() {
        return RuntimeHelper.requireNonNull(constants$177.TerminateProcess$MH,"TerminateProcess");
    }
    public static int TerminateProcess ( Addressable hProcess,  int uExitCode) {
        var mh$ = TerminateProcess$MH();
        try {
            return (int)mh$.invokeExact(hProcess, uExitCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetExitCodeProcess$MH() {
        return RuntimeHelper.requireNonNull(constants$178.GetExitCodeProcess$MH,"GetExitCodeProcess");
    }
    public static int GetExitCodeProcess ( Addressable hProcess,  Addressable lpExitCode) {
        var mh$ = GetExitCodeProcess$MH();
        try {
            return (int)mh$.invokeExact(hProcess, lpExitCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SwitchToThread$MH() {
        return RuntimeHelper.requireNonNull(constants$178.SwitchToThread$MH,"SwitchToThread");
    }
    public static int SwitchToThread () {
        var mh$ = SwitchToThread$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateThread$MH() {
        return RuntimeHelper.requireNonNull(constants$178.CreateThread$MH,"CreateThread");
    }
    public static MemoryAddress CreateThread ( Addressable lpThreadAttributes,  long dwStackSize,  Addressable lpStartAddress,  Addressable lpParameter,  int dwCreationFlags,  Addressable lpThreadId) {
        var mh$ = CreateThread$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpThreadAttributes, dwStackSize, lpStartAddress, lpParameter, dwCreationFlags, lpThreadId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateRemoteThread$MH() {
        return RuntimeHelper.requireNonNull(constants$178.CreateRemoteThread$MH,"CreateRemoteThread");
    }
    public static MemoryAddress CreateRemoteThread ( Addressable hProcess,  Addressable lpThreadAttributes,  long dwStackSize,  Addressable lpStartAddress,  Addressable lpParameter,  int dwCreationFlags,  Addressable lpThreadId) {
        var mh$ = CreateRemoteThread$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hProcess, lpThreadAttributes, dwStackSize, lpStartAddress, lpParameter, dwCreationFlags, lpThreadId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentThread$MH() {
        return RuntimeHelper.requireNonNull(constants$178.GetCurrentThread$MH,"GetCurrentThread");
    }
    public static MemoryAddress GetCurrentThread () {
        var mh$ = GetCurrentThread$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentThreadId$MH() {
        return RuntimeHelper.requireNonNull(constants$178.GetCurrentThreadId$MH,"GetCurrentThreadId");
    }
    public static int GetCurrentThreadId () {
        var mh$ = GetCurrentThreadId$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenThread$MH() {
        return RuntimeHelper.requireNonNull(constants$179.OpenThread$MH,"OpenThread");
    }
    public static MemoryAddress OpenThread ( int dwDesiredAccess,  int bInheritHandle,  int dwThreadId) {
        var mh$ = OpenThread$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwDesiredAccess, bInheritHandle, dwThreadId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadPriority$MH() {
        return RuntimeHelper.requireNonNull(constants$179.SetThreadPriority$MH,"SetThreadPriority");
    }
    public static int SetThreadPriority ( Addressable hThread,  int nPriority) {
        var mh$ = SetThreadPriority$MH();
        try {
            return (int)mh$.invokeExact(hThread, nPriority);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadPriorityBoost$MH() {
        return RuntimeHelper.requireNonNull(constants$179.SetThreadPriorityBoost$MH,"SetThreadPriorityBoost");
    }
    public static int SetThreadPriorityBoost ( Addressable hThread,  int bDisablePriorityBoost) {
        var mh$ = SetThreadPriorityBoost$MH();
        try {
            return (int)mh$.invokeExact(hThread, bDisablePriorityBoost);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadPriorityBoost$MH() {
        return RuntimeHelper.requireNonNull(constants$179.GetThreadPriorityBoost$MH,"GetThreadPriorityBoost");
    }
    public static int GetThreadPriorityBoost ( Addressable hThread,  Addressable pDisablePriorityBoost) {
        var mh$ = GetThreadPriorityBoost$MH();
        try {
            return (int)mh$.invokeExact(hThread, pDisablePriorityBoost);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadPriority$MH() {
        return RuntimeHelper.requireNonNull(constants$179.GetThreadPriority$MH,"GetThreadPriority");
    }
    public static int GetThreadPriority ( Addressable hThread) {
        var mh$ = GetThreadPriority$MH();
        try {
            return (int)mh$.invokeExact(hThread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExitThread$MH() {
        return RuntimeHelper.requireNonNull(constants$179.ExitThread$MH,"ExitThread");
    }
    public static void ExitThread ( int dwExitCode) {
        var mh$ = ExitThread$MH();
        try {
            mh$.invokeExact(dwExitCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TerminateThread$MH() {
        return RuntimeHelper.requireNonNull(constants$180.TerminateThread$MH,"TerminateThread");
    }
    public static int TerminateThread ( Addressable hThread,  int dwExitCode) {
        var mh$ = TerminateThread$MH();
        try {
            return (int)mh$.invokeExact(hThread, dwExitCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetExitCodeThread$MH() {
        return RuntimeHelper.requireNonNull(constants$180.GetExitCodeThread$MH,"GetExitCodeThread");
    }
    public static int GetExitCodeThread ( Addressable hThread,  Addressable lpExitCode) {
        var mh$ = GetExitCodeThread$MH();
        try {
            return (int)mh$.invokeExact(hThread, lpExitCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SuspendThread$MH() {
        return RuntimeHelper.requireNonNull(constants$180.SuspendThread$MH,"SuspendThread");
    }
    public static int SuspendThread ( Addressable hThread) {
        var mh$ = SuspendThread$MH();
        try {
            return (int)mh$.invokeExact(hThread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ResumeThread$MH() {
        return RuntimeHelper.requireNonNull(constants$180.ResumeThread$MH,"ResumeThread");
    }
    public static int ResumeThread ( Addressable hThread) {
        var mh$ = ResumeThread$MH();
        try {
            return (int)mh$.invokeExact(hThread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TlsAlloc$MH() {
        return RuntimeHelper.requireNonNull(constants$180.TlsAlloc$MH,"TlsAlloc");
    }
    public static int TlsAlloc () {
        var mh$ = TlsAlloc$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TlsGetValue$MH() {
        return RuntimeHelper.requireNonNull(constants$180.TlsGetValue$MH,"TlsGetValue");
    }
    public static MemoryAddress TlsGetValue ( int dwTlsIndex) {
        var mh$ = TlsGetValue$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwTlsIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TlsSetValue$MH() {
        return RuntimeHelper.requireNonNull(constants$181.TlsSetValue$MH,"TlsSetValue");
    }
    public static int TlsSetValue ( int dwTlsIndex,  Addressable lpTlsValue) {
        var mh$ = TlsSetValue$MH();
        try {
            return (int)mh$.invokeExact(dwTlsIndex, lpTlsValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TlsFree$MH() {
        return RuntimeHelper.requireNonNull(constants$181.TlsFree$MH,"TlsFree");
    }
    public static int TlsFree ( int dwTlsIndex) {
        var mh$ = TlsFree$MH();
        try {
            return (int)mh$.invokeExact(dwTlsIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateProcessA$MH() {
        return RuntimeHelper.requireNonNull(constants$181.CreateProcessA$MH,"CreateProcessA");
    }
    public static int CreateProcessA ( Addressable lpApplicationName,  Addressable lpCommandLine,  Addressable lpProcessAttributes,  Addressable lpThreadAttributes,  int bInheritHandles,  int dwCreationFlags,  Addressable lpEnvironment,  Addressable lpCurrentDirectory,  Addressable lpStartupInfo,  Addressable lpProcessInformation) {
        var mh$ = CreateProcessA$MH();
        try {
            return (int)mh$.invokeExact(lpApplicationName, lpCommandLine, lpProcessAttributes, lpThreadAttributes, bInheritHandles, dwCreationFlags, lpEnvironment, lpCurrentDirectory, lpStartupInfo, lpProcessInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateProcessW$MH() {
        return RuntimeHelper.requireNonNull(constants$181.CreateProcessW$MH,"CreateProcessW");
    }
    public static int CreateProcessW ( Addressable lpApplicationName,  Addressable lpCommandLine,  Addressable lpProcessAttributes,  Addressable lpThreadAttributes,  int bInheritHandles,  int dwCreationFlags,  Addressable lpEnvironment,  Addressable lpCurrentDirectory,  Addressable lpStartupInfo,  Addressable lpProcessInformation) {
        var mh$ = CreateProcessW$MH();
        try {
            return (int)mh$.invokeExact(lpApplicationName, lpCommandLine, lpProcessAttributes, lpThreadAttributes, bInheritHandles, dwCreationFlags, lpEnvironment, lpCurrentDirectory, lpStartupInfo, lpProcessInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessShutdownParameters$MH() {
        return RuntimeHelper.requireNonNull(constants$181.SetProcessShutdownParameters$MH,"SetProcessShutdownParameters");
    }
    public static int SetProcessShutdownParameters ( int dwLevel,  int dwFlags) {
        var mh$ = SetProcessShutdownParameters$MH();
        try {
            return (int)mh$.invokeExact(dwLevel, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$181.GetProcessVersion$MH,"GetProcessVersion");
    }
    public static int GetProcessVersion ( int ProcessId) {
        var mh$ = GetProcessVersion$MH();
        try {
            return (int)mh$.invokeExact(ProcessId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetStartupInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$182.GetStartupInfoW$MH,"GetStartupInfoW");
    }
    public static void GetStartupInfoW ( Addressable lpStartupInfo) {
        var mh$ = GetStartupInfoW$MH();
        try {
            mh$.invokeExact(lpStartupInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateProcessAsUserW$MH() {
        return RuntimeHelper.requireNonNull(constants$182.CreateProcessAsUserW$MH,"CreateProcessAsUserW");
    }
    public static int CreateProcessAsUserW ( Addressable hToken,  Addressable lpApplicationName,  Addressable lpCommandLine,  Addressable lpProcessAttributes,  Addressable lpThreadAttributes,  int bInheritHandles,  int dwCreationFlags,  Addressable lpEnvironment,  Addressable lpCurrentDirectory,  Addressable lpStartupInfo,  Addressable lpProcessInformation) {
        var mh$ = CreateProcessAsUserW$MH();
        try {
            return (int)mh$.invokeExact(hToken, lpApplicationName, lpCommandLine, lpProcessAttributes, lpThreadAttributes, bInheritHandles, dwCreationFlags, lpEnvironment, lpCurrentDirectory, lpStartupInfo, lpProcessInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentProcessToken$MH() {
        return RuntimeHelper.requireNonNull(constants$182.GetCurrentProcessToken$MH,"GetCurrentProcessToken");
    }
    public static MemoryAddress GetCurrentProcessToken () {
        var mh$ = GetCurrentProcessToken$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentThreadToken$MH() {
        return RuntimeHelper.requireNonNull(constants$182.GetCurrentThreadToken$MH,"GetCurrentThreadToken");
    }
    public static MemoryAddress GetCurrentThreadToken () {
        var mh$ = GetCurrentThreadToken$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentThreadEffectiveToken$MH() {
        return RuntimeHelper.requireNonNull(constants$182.GetCurrentThreadEffectiveToken$MH,"GetCurrentThreadEffectiveToken");
    }
    public static MemoryAddress GetCurrentThreadEffectiveToken () {
        var mh$ = GetCurrentThreadEffectiveToken$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadToken$MH() {
        return RuntimeHelper.requireNonNull(constants$182.SetThreadToken$MH,"SetThreadToken");
    }
    public static int SetThreadToken ( Addressable Thread,  Addressable Token) {
        var mh$ = SetThreadToken$MH();
        try {
            return (int)mh$.invokeExact(Thread, Token);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenProcessToken$MH() {
        return RuntimeHelper.requireNonNull(constants$183.OpenProcessToken$MH,"OpenProcessToken");
    }
    public static int OpenProcessToken ( Addressable ProcessHandle,  int DesiredAccess,  Addressable TokenHandle) {
        var mh$ = OpenProcessToken$MH();
        try {
            return (int)mh$.invokeExact(ProcessHandle, DesiredAccess, TokenHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenThreadToken$MH() {
        return RuntimeHelper.requireNonNull(constants$183.OpenThreadToken$MH,"OpenThreadToken");
    }
    public static int OpenThreadToken ( Addressable ThreadHandle,  int DesiredAccess,  int OpenAsSelf,  Addressable TokenHandle) {
        var mh$ = OpenThreadToken$MH();
        try {
            return (int)mh$.invokeExact(ThreadHandle, DesiredAccess, OpenAsSelf, TokenHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPriorityClass$MH() {
        return RuntimeHelper.requireNonNull(constants$183.SetPriorityClass$MH,"SetPriorityClass");
    }
    public static int SetPriorityClass ( Addressable hProcess,  int dwPriorityClass) {
        var mh$ = SetPriorityClass$MH();
        try {
            return (int)mh$.invokeExact(hProcess, dwPriorityClass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPriorityClass$MH() {
        return RuntimeHelper.requireNonNull(constants$183.GetPriorityClass$MH,"GetPriorityClass");
    }
    public static int GetPriorityClass ( Addressable hProcess) {
        var mh$ = GetPriorityClass$MH();
        try {
            return (int)mh$.invokeExact(hProcess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadStackGuarantee$MH() {
        return RuntimeHelper.requireNonNull(constants$183.SetThreadStackGuarantee$MH,"SetThreadStackGuarantee");
    }
    public static int SetThreadStackGuarantee ( Addressable StackSizeInBytes) {
        var mh$ = SetThreadStackGuarantee$MH();
        try {
            return (int)mh$.invokeExact(StackSizeInBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ProcessIdToSessionId$MH() {
        return RuntimeHelper.requireNonNull(constants$183.ProcessIdToSessionId$MH,"ProcessIdToSessionId");
    }
    public static int ProcessIdToSessionId ( int dwProcessId,  Addressable pSessionId) {
        var mh$ = ProcessIdToSessionId$MH();
        try {
            return (int)mh$.invokeExact(dwProcessId, pSessionId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PPROC_THREAD_ATTRIBUTE_LIST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPROC_THREAD_ATTRIBUTE_LIST = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetProcessId$MH() {
        return RuntimeHelper.requireNonNull(constants$184.GetProcessId$MH,"GetProcessId");
    }
    public static int GetProcessId ( Addressable Process) {
        var mh$ = GetProcessId$MH();
        try {
            return (int)mh$.invokeExact(Process);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadId$MH() {
        return RuntimeHelper.requireNonNull(constants$184.GetThreadId$MH,"GetThreadId");
    }
    public static int GetThreadId ( Addressable Thread) {
        var mh$ = GetThreadId$MH();
        try {
            return (int)mh$.invokeExact(Thread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlushProcessWriteBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$184.FlushProcessWriteBuffers$MH,"FlushProcessWriteBuffers");
    }
    public static void FlushProcessWriteBuffers () {
        var mh$ = FlushProcessWriteBuffers$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessIdOfThread$MH() {
        return RuntimeHelper.requireNonNull(constants$184.GetProcessIdOfThread$MH,"GetProcessIdOfThread");
    }
    public static int GetProcessIdOfThread ( Addressable Thread) {
        var mh$ = GetProcessIdOfThread$MH();
        try {
            return (int)mh$.invokeExact(Thread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitializeProcThreadAttributeList$MH() {
        return RuntimeHelper.requireNonNull(constants$184.InitializeProcThreadAttributeList$MH,"InitializeProcThreadAttributeList");
    }
    public static int InitializeProcThreadAttributeList ( Addressable lpAttributeList,  int dwAttributeCount,  int dwFlags,  Addressable lpSize) {
        var mh$ = InitializeProcThreadAttributeList$MH();
        try {
            return (int)mh$.invokeExact(lpAttributeList, dwAttributeCount, dwFlags, lpSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteProcThreadAttributeList$MH() {
        return RuntimeHelper.requireNonNull(constants$184.DeleteProcThreadAttributeList$MH,"DeleteProcThreadAttributeList");
    }
    public static void DeleteProcThreadAttributeList ( Addressable lpAttributeList) {
        var mh$ = DeleteProcThreadAttributeList$MH();
        try {
            mh$.invokeExact(lpAttributeList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UpdateProcThreadAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$185.UpdateProcThreadAttribute$MH,"UpdateProcThreadAttribute");
    }
    public static int UpdateProcThreadAttribute ( Addressable lpAttributeList,  int dwFlags,  long Attribute,  Addressable lpValue,  long cbSize,  Addressable lpPreviousValue,  Addressable lpReturnSize) {
        var mh$ = UpdateProcThreadAttribute$MH();
        try {
            return (int)mh$.invokeExact(lpAttributeList, dwFlags, Attribute, lpValue, cbSize, lpPreviousValue, lpReturnSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessDynamicEHContinuationTargets$MH() {
        return RuntimeHelper.requireNonNull(constants$185.SetProcessDynamicEHContinuationTargets$MH,"SetProcessDynamicEHContinuationTargets");
    }
    public static int SetProcessDynamicEHContinuationTargets ( Addressable Process,  short NumberOfTargets,  Addressable Targets) {
        var mh$ = SetProcessDynamicEHContinuationTargets$MH();
        try {
            return (int)mh$.invokeExact(Process, NumberOfTargets, Targets);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessDynamicEnforcedCetCompatibleRanges$MH() {
        return RuntimeHelper.requireNonNull(constants$185.SetProcessDynamicEnforcedCetCompatibleRanges$MH,"SetProcessDynamicEnforcedCetCompatibleRanges");
    }
    public static int SetProcessDynamicEnforcedCetCompatibleRanges ( Addressable Process,  short NumberOfRanges,  Addressable Ranges) {
        var mh$ = SetProcessDynamicEnforcedCetCompatibleRanges$MH();
        try {
            return (int)mh$.invokeExact(Process, NumberOfRanges, Ranges);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessAffinityUpdateMode$MH() {
        return RuntimeHelper.requireNonNull(constants$185.SetProcessAffinityUpdateMode$MH,"SetProcessAffinityUpdateMode");
    }
    public static int SetProcessAffinityUpdateMode ( Addressable hProcess,  int dwFlags) {
        var mh$ = SetProcessAffinityUpdateMode$MH();
        try {
            return (int)mh$.invokeExact(hProcess, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryProcessAffinityUpdateMode$MH() {
        return RuntimeHelper.requireNonNull(constants$185.QueryProcessAffinityUpdateMode$MH,"QueryProcessAffinityUpdateMode");
    }
    public static int QueryProcessAffinityUpdateMode ( Addressable hProcess,  Addressable lpdwFlags) {
        var mh$ = QueryProcessAffinityUpdateMode$MH();
        try {
            return (int)mh$.invokeExact(hProcess, lpdwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateRemoteThreadEx$MH() {
        return RuntimeHelper.requireNonNull(constants$185.CreateRemoteThreadEx$MH,"CreateRemoteThreadEx");
    }
    public static MemoryAddress CreateRemoteThreadEx ( Addressable hProcess,  Addressable lpThreadAttributes,  long dwStackSize,  Addressable lpStartAddress,  Addressable lpParameter,  int dwCreationFlags,  Addressable lpAttributeList,  Addressable lpThreadId) {
        var mh$ = CreateRemoteThreadEx$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hProcess, lpThreadAttributes, dwStackSize, lpStartAddress, lpParameter, dwCreationFlags, lpAttributeList, lpThreadId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentThreadStackLimits$MH() {
        return RuntimeHelper.requireNonNull(constants$186.GetCurrentThreadStackLimits$MH,"GetCurrentThreadStackLimits");
    }
    public static void GetCurrentThreadStackLimits ( Addressable LowLimit,  Addressable HighLimit) {
        var mh$ = GetCurrentThreadStackLimits$MH();
        try {
            mh$.invokeExact(LowLimit, HighLimit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadContext$MH() {
        return RuntimeHelper.requireNonNull(constants$186.GetThreadContext$MH,"GetThreadContext");
    }
    public static int GetThreadContext ( Addressable hThread,  Addressable lpContext) {
        var mh$ = GetThreadContext$MH();
        try {
            return (int)mh$.invokeExact(hThread, lpContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessMitigationPolicy$MH() {
        return RuntimeHelper.requireNonNull(constants$186.GetProcessMitigationPolicy$MH,"GetProcessMitigationPolicy");
    }
    public static int GetProcessMitigationPolicy ( Addressable hProcess,  int MitigationPolicy,  Addressable lpBuffer,  long dwLength) {
        var mh$ = GetProcessMitigationPolicy$MH();
        try {
            return (int)mh$.invokeExact(hProcess, MitigationPolicy, lpBuffer, dwLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadContext$MH() {
        return RuntimeHelper.requireNonNull(constants$186.SetThreadContext$MH,"SetThreadContext");
    }
    public static int SetThreadContext ( Addressable hThread,  Addressable lpContext) {
        var mh$ = SetThreadContext$MH();
        try {
            return (int)mh$.invokeExact(hThread, lpContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessMitigationPolicy$MH() {
        return RuntimeHelper.requireNonNull(constants$186.SetProcessMitigationPolicy$MH,"SetProcessMitigationPolicy");
    }
    public static int SetProcessMitigationPolicy ( int MitigationPolicy,  Addressable lpBuffer,  long dwLength) {
        var mh$ = SetProcessMitigationPolicy$MH();
        try {
            return (int)mh$.invokeExact(MitigationPolicy, lpBuffer, dwLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlushInstructionCache$MH() {
        return RuntimeHelper.requireNonNull(constants$186.FlushInstructionCache$MH,"FlushInstructionCache");
    }
    public static int FlushInstructionCache ( Addressable hProcess,  Addressable lpBaseAddress,  long dwSize) {
        var mh$ = FlushInstructionCache$MH();
        try {
            return (int)mh$.invokeExact(hProcess, lpBaseAddress, dwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadTimes$MH() {
        return RuntimeHelper.requireNonNull(constants$187.GetThreadTimes$MH,"GetThreadTimes");
    }
    public static int GetThreadTimes ( Addressable hThread,  Addressable lpCreationTime,  Addressable lpExitTime,  Addressable lpKernelTime,  Addressable lpUserTime) {
        var mh$ = GetThreadTimes$MH();
        try {
            return (int)mh$.invokeExact(hThread, lpCreationTime, lpExitTime, lpKernelTime, lpUserTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenProcess$MH() {
        return RuntimeHelper.requireNonNull(constants$187.OpenProcess$MH,"OpenProcess");
    }
    public static MemoryAddress OpenProcess ( int dwDesiredAccess,  int bInheritHandle,  int dwProcessId) {
        var mh$ = OpenProcess$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwDesiredAccess, bInheritHandle, dwProcessId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsProcessorFeaturePresent$MH() {
        return RuntimeHelper.requireNonNull(constants$187.IsProcessorFeaturePresent$MH,"IsProcessorFeaturePresent");
    }
    public static int IsProcessorFeaturePresent ( int ProcessorFeature) {
        var mh$ = IsProcessorFeaturePresent$MH();
        try {
            return (int)mh$.invokeExact(ProcessorFeature);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessHandleCount$MH() {
        return RuntimeHelper.requireNonNull(constants$187.GetProcessHandleCount$MH,"GetProcessHandleCount");
    }
    public static int GetProcessHandleCount ( Addressable hProcess,  Addressable pdwHandleCount) {
        var mh$ = GetProcessHandleCount$MH();
        try {
            return (int)mh$.invokeExact(hProcess, pdwHandleCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentProcessorNumber$MH() {
        return RuntimeHelper.requireNonNull(constants$187.GetCurrentProcessorNumber$MH,"GetCurrentProcessorNumber");
    }
    public static int GetCurrentProcessorNumber () {
        var mh$ = GetCurrentProcessorNumber$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadIdealProcessorEx$MH() {
        return RuntimeHelper.requireNonNull(constants$187.SetThreadIdealProcessorEx$MH,"SetThreadIdealProcessorEx");
    }
    public static int SetThreadIdealProcessorEx ( Addressable hThread,  Addressable lpIdealProcessor,  Addressable lpPreviousIdealProcessor) {
        var mh$ = SetThreadIdealProcessorEx$MH();
        try {
            return (int)mh$.invokeExact(hThread, lpIdealProcessor, lpPreviousIdealProcessor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadIdealProcessorEx$MH() {
        return RuntimeHelper.requireNonNull(constants$188.GetThreadIdealProcessorEx$MH,"GetThreadIdealProcessorEx");
    }
    public static int GetThreadIdealProcessorEx ( Addressable hThread,  Addressable lpIdealProcessor) {
        var mh$ = GetThreadIdealProcessorEx$MH();
        try {
            return (int)mh$.invokeExact(hThread, lpIdealProcessor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentProcessorNumberEx$MH() {
        return RuntimeHelper.requireNonNull(constants$188.GetCurrentProcessorNumberEx$MH,"GetCurrentProcessorNumberEx");
    }
    public static void GetCurrentProcessorNumberEx ( Addressable ProcNumber) {
        var mh$ = GetCurrentProcessorNumberEx$MH();
        try {
            mh$.invokeExact(ProcNumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessPriorityBoost$MH() {
        return RuntimeHelper.requireNonNull(constants$188.GetProcessPriorityBoost$MH,"GetProcessPriorityBoost");
    }
    public static int GetProcessPriorityBoost ( Addressable hProcess,  Addressable pDisablePriorityBoost) {
        var mh$ = GetProcessPriorityBoost$MH();
        try {
            return (int)mh$.invokeExact(hProcess, pDisablePriorityBoost);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessPriorityBoost$MH() {
        return RuntimeHelper.requireNonNull(constants$188.SetProcessPriorityBoost$MH,"SetProcessPriorityBoost");
    }
    public static int SetProcessPriorityBoost ( Addressable hProcess,  int bDisablePriorityBoost) {
        var mh$ = SetProcessPriorityBoost$MH();
        try {
            return (int)mh$.invokeExact(hProcess, bDisablePriorityBoost);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadIOPendingFlag$MH() {
        return RuntimeHelper.requireNonNull(constants$188.GetThreadIOPendingFlag$MH,"GetThreadIOPendingFlag");
    }
    public static int GetThreadIOPendingFlag ( Addressable hThread,  Addressable lpIOIsPending) {
        var mh$ = GetThreadIOPendingFlag$MH();
        try {
            return (int)mh$.invokeExact(hThread, lpIOIsPending);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemTimes$MH() {
        return RuntimeHelper.requireNonNull(constants$188.GetSystemTimes$MH,"GetSystemTimes");
    }
    public static int GetSystemTimes ( Addressable lpIdleTime,  Addressable lpKernelTime,  Addressable lpUserTime) {
        var mh$ = GetSystemTimes$MH();
        try {
            return (int)mh$.invokeExact(lpIdleTime, lpKernelTime, lpUserTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int ThreadMemoryPriority() {
        return (int)0L;
    }
    public static int ThreadAbsoluteCpuPriority() {
        return (int)1L;
    }
    public static int ThreadDynamicCodePolicy() {
        return (int)2L;
    }
    public static int ThreadPowerThrottling() {
        return (int)3L;
    }
    public static int ThreadInformationClassMax() {
        return (int)4L;
    }
    public static OfAddress PMEMORY_PRIORITY_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetThreadInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$189.GetThreadInformation$MH,"GetThreadInformation");
    }
    public static int GetThreadInformation ( Addressable hThread,  int ThreadInformationClass,  Addressable ThreadInformation,  int ThreadInformationSize) {
        var mh$ = GetThreadInformation$MH();
        try {
            return (int)mh$.invokeExact(hThread, ThreadInformationClass, ThreadInformation, ThreadInformationSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$189.SetThreadInformation$MH,"SetThreadInformation");
    }
    public static int SetThreadInformation ( Addressable hThread,  int ThreadInformationClass,  Addressable ThreadInformation,  int ThreadInformationSize) {
        var mh$ = SetThreadInformation$MH();
        try {
            return (int)mh$.invokeExact(hThread, ThreadInformationClass, ThreadInformation, ThreadInformationSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsProcessCritical$MH() {
        return RuntimeHelper.requireNonNull(constants$189.IsProcessCritical$MH,"IsProcessCritical");
    }
    public static int IsProcessCritical ( Addressable hProcess,  Addressable Critical) {
        var mh$ = IsProcessCritical$MH();
        try {
            return (int)mh$.invokeExact(hProcess, Critical);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProtectedPolicy$MH() {
        return RuntimeHelper.requireNonNull(constants$189.SetProtectedPolicy$MH,"SetProtectedPolicy");
    }
    public static int SetProtectedPolicy ( Addressable PolicyGuid,  long PolicyValue,  Addressable OldPolicyValue) {
        var mh$ = SetProtectedPolicy$MH();
        try {
            return (int)mh$.invokeExact(PolicyGuid, PolicyValue, OldPolicyValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryProtectedPolicy$MH() {
        return RuntimeHelper.requireNonNull(constants$189.QueryProtectedPolicy$MH,"QueryProtectedPolicy");
    }
    public static int QueryProtectedPolicy ( Addressable PolicyGuid,  Addressable PolicyValue) {
        var mh$ = QueryProtectedPolicy$MH();
        try {
            return (int)mh$.invokeExact(PolicyGuid, PolicyValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadIdealProcessor$MH() {
        return RuntimeHelper.requireNonNull(constants$189.SetThreadIdealProcessor$MH,"SetThreadIdealProcessor");
    }
    public static int SetThreadIdealProcessor ( Addressable hThread,  int dwIdealProcessor) {
        var mh$ = SetThreadIdealProcessor$MH();
        try {
            return (int)mh$.invokeExact(hThread, dwIdealProcessor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int ProcessMemoryPriority() {
        return (int)0L;
    }
    public static int ProcessMemoryExhaustionInfo() {
        return (int)1L;
    }
    public static int ProcessAppMemoryInfo() {
        return (int)2L;
    }
    public static int ProcessInPrivateInfo() {
        return (int)3L;
    }
    public static int ProcessPowerThrottling() {
        return (int)4L;
    }
    public static int ProcessReservedValue1() {
        return (int)5L;
    }
    public static int ProcessTelemetryCoverageInfo() {
        return (int)6L;
    }
    public static int ProcessProtectionLevelInfo() {
        return (int)7L;
    }
    public static int ProcessLeapSecondInfo() {
        return (int)8L;
    }
    public static int ProcessInformationClassMax() {
        return (int)9L;
    }
    public static OfAddress PAPP_MEMORY_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static int PMETypeFailFastOnCommitFailure() {
        return (int)0L;
    }
    public static int PMETypeMax() {
        return (int)1L;
    }
    public static OfAddress PPROCESS_MEMORY_EXHAUSTION_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MEMORY_EXHAUSTION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_POWER_THROTTLING_STATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_LEAP_SECOND_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SetProcessInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$190.SetProcessInformation$MH,"SetProcessInformation");
    }
    public static int SetProcessInformation ( Addressable hProcess,  int ProcessInformationClass,  Addressable ProcessInformation,  int ProcessInformationSize) {
        var mh$ = SetProcessInformation$MH();
        try {
            return (int)mh$.invokeExact(hProcess, ProcessInformationClass, ProcessInformation, ProcessInformationSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$190.GetProcessInformation$MH,"GetProcessInformation");
    }
    public static int GetProcessInformation ( Addressable hProcess,  int ProcessInformationClass,  Addressable ProcessInformation,  int ProcessInformationSize) {
        var mh$ = GetProcessInformation$MH();
        try {
            return (int)mh$.invokeExact(hProcess, ProcessInformationClass, ProcessInformation, ProcessInformationSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemCpuSetInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$190.GetSystemCpuSetInformation$MH,"GetSystemCpuSetInformation");
    }
    public static int GetSystemCpuSetInformation ( Addressable Information,  int BufferLength,  Addressable ReturnedLength,  Addressable Process,  int Flags) {
        var mh$ = GetSystemCpuSetInformation$MH();
        try {
            return (int)mh$.invokeExact(Information, BufferLength, ReturnedLength, Process, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessDefaultCpuSets$MH() {
        return RuntimeHelper.requireNonNull(constants$190.GetProcessDefaultCpuSets$MH,"GetProcessDefaultCpuSets");
    }
    public static int GetProcessDefaultCpuSets ( Addressable Process,  Addressable CpuSetIds,  int CpuSetIdCount,  Addressable RequiredIdCount) {
        var mh$ = GetProcessDefaultCpuSets$MH();
        try {
            return (int)mh$.invokeExact(Process, CpuSetIds, CpuSetIdCount, RequiredIdCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessDefaultCpuSets$MH() {
        return RuntimeHelper.requireNonNull(constants$190.SetProcessDefaultCpuSets$MH,"SetProcessDefaultCpuSets");
    }
    public static int SetProcessDefaultCpuSets ( Addressable Process,  Addressable CpuSetIds,  int CpuSetIdCount) {
        var mh$ = SetProcessDefaultCpuSets$MH();
        try {
            return (int)mh$.invokeExact(Process, CpuSetIds, CpuSetIdCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadSelectedCpuSets$MH() {
        return RuntimeHelper.requireNonNull(constants$190.GetThreadSelectedCpuSets$MH,"GetThreadSelectedCpuSets");
    }
    public static int GetThreadSelectedCpuSets ( Addressable Thread,  Addressable CpuSetIds,  int CpuSetIdCount,  Addressable RequiredIdCount) {
        var mh$ = GetThreadSelectedCpuSets$MH();
        try {
            return (int)mh$.invokeExact(Thread, CpuSetIds, CpuSetIdCount, RequiredIdCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadSelectedCpuSets$MH() {
        return RuntimeHelper.requireNonNull(constants$191.SetThreadSelectedCpuSets$MH,"SetThreadSelectedCpuSets");
    }
    public static int SetThreadSelectedCpuSets ( Addressable Thread,  Addressable CpuSetIds,  int CpuSetIdCount) {
        var mh$ = SetThreadSelectedCpuSets$MH();
        try {
            return (int)mh$.invokeExact(Thread, CpuSetIds, CpuSetIdCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateProcessAsUserA$MH() {
        return RuntimeHelper.requireNonNull(constants$191.CreateProcessAsUserA$MH,"CreateProcessAsUserA");
    }
    public static int CreateProcessAsUserA ( Addressable hToken,  Addressable lpApplicationName,  Addressable lpCommandLine,  Addressable lpProcessAttributes,  Addressable lpThreadAttributes,  int bInheritHandles,  int dwCreationFlags,  Addressable lpEnvironment,  Addressable lpCurrentDirectory,  Addressable lpStartupInfo,  Addressable lpProcessInformation) {
        var mh$ = CreateProcessAsUserA$MH();
        try {
            return (int)mh$.invokeExact(hToken, lpApplicationName, lpCommandLine, lpProcessAttributes, lpThreadAttributes, bInheritHandles, dwCreationFlags, lpEnvironment, lpCurrentDirectory, lpStartupInfo, lpProcessInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessShutdownParameters$MH() {
        return RuntimeHelper.requireNonNull(constants$191.GetProcessShutdownParameters$MH,"GetProcessShutdownParameters");
    }
    public static int GetProcessShutdownParameters ( Addressable lpdwLevel,  Addressable lpdwFlags) {
        var mh$ = GetProcessShutdownParameters$MH();
        try {
            return (int)mh$.invokeExact(lpdwLevel, lpdwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadDescription$MH() {
        return RuntimeHelper.requireNonNull(constants$191.SetThreadDescription$MH,"SetThreadDescription");
    }
    public static int SetThreadDescription ( Addressable hThread,  Addressable lpThreadDescription) {
        var mh$ = SetThreadDescription$MH();
        try {
            return (int)mh$.invokeExact(hThread, lpThreadDescription);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadDescription$MH() {
        return RuntimeHelper.requireNonNull(constants$191.GetThreadDescription$MH,"GetThreadDescription");
    }
    public static int GetThreadDescription ( Addressable hThread,  Addressable ppszThreadDescription) {
        var mh$ = GetThreadDescription$MH();
        try {
            return (int)mh$.invokeExact(hThread, ppszThreadDescription);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPSYSTEM_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMEMORYSTATUSEX = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GlobalMemoryStatusEx$MH() {
        return RuntimeHelper.requireNonNull(constants$191.GlobalMemoryStatusEx$MH,"GlobalMemoryStatusEx");
    }
    public static int GlobalMemoryStatusEx ( Addressable lpBuffer) {
        var mh$ = GlobalMemoryStatusEx$MH();
        try {
            return (int)mh$.invokeExact(lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$192.GetSystemInfo$MH,"GetSystemInfo");
    }
    public static void GetSystemInfo ( Addressable lpSystemInfo) {
        var mh$ = GetSystemInfo$MH();
        try {
            mh$.invokeExact(lpSystemInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemTime$MH() {
        return RuntimeHelper.requireNonNull(constants$192.GetSystemTime$MH,"GetSystemTime");
    }
    public static void GetSystemTime ( Addressable lpSystemTime) {
        var mh$ = GetSystemTime$MH();
        try {
            mh$.invokeExact(lpSystemTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemTimeAsFileTime$MH() {
        return RuntimeHelper.requireNonNull(constants$192.GetSystemTimeAsFileTime$MH,"GetSystemTimeAsFileTime");
    }
    public static void GetSystemTimeAsFileTime ( Addressable lpSystemTimeAsFileTime) {
        var mh$ = GetSystemTimeAsFileTime$MH();
        try {
            mh$.invokeExact(lpSystemTimeAsFileTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLocalTime$MH() {
        return RuntimeHelper.requireNonNull(constants$192.GetLocalTime$MH,"GetLocalTime");
    }
    public static void GetLocalTime ( Addressable lpSystemTime) {
        var mh$ = GetLocalTime$MH();
        try {
            mh$.invokeExact(lpSystemTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsUserCetAvailableInEnvironment$MH() {
        return RuntimeHelper.requireNonNull(constants$192.IsUserCetAvailableInEnvironment$MH,"IsUserCetAvailableInEnvironment");
    }
    public static int IsUserCetAvailableInEnvironment ( int UserCetEnvironment) {
        var mh$ = IsUserCetAvailableInEnvironment$MH();
        try {
            return (int)mh$.invokeExact(UserCetEnvironment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemLeapSecondInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$192.GetSystemLeapSecondInformation$MH,"GetSystemLeapSecondInformation");
    }
    public static int GetSystemLeapSecondInformation ( Addressable Enabled,  Addressable Flags) {
        var mh$ = GetSystemLeapSecondInformation$MH();
        try {
            return (int)mh$.invokeExact(Enabled, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$193.GetVersion$MH,"GetVersion");
    }
    public static int GetVersion () {
        var mh$ = GetVersion$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetLocalTime$MH() {
        return RuntimeHelper.requireNonNull(constants$193.SetLocalTime$MH,"SetLocalTime");
    }
    public static int SetLocalTime ( Addressable lpSystemTime) {
        var mh$ = SetLocalTime$MH();
        try {
            return (int)mh$.invokeExact(lpSystemTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTickCount$MH() {
        return RuntimeHelper.requireNonNull(constants$193.GetTickCount$MH,"GetTickCount");
    }
    public static int GetTickCount () {
        var mh$ = GetTickCount$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTickCount64$MH() {
        return RuntimeHelper.requireNonNull(constants$193.GetTickCount64$MH,"GetTickCount64");
    }
    public static long GetTickCount64 () {
        var mh$ = GetTickCount64$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemTimeAdjustment$MH() {
        return RuntimeHelper.requireNonNull(constants$193.GetSystemTimeAdjustment$MH,"GetSystemTimeAdjustment");
    }
    public static int GetSystemTimeAdjustment ( Addressable lpTimeAdjustment,  Addressable lpTimeIncrement,  Addressable lpTimeAdjustmentDisabled) {
        var mh$ = GetSystemTimeAdjustment$MH();
        try {
            return (int)mh$.invokeExact(lpTimeAdjustment, lpTimeIncrement, lpTimeAdjustmentDisabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemTimeAdjustmentPrecise$MH() {
        return RuntimeHelper.requireNonNull(constants$193.GetSystemTimeAdjustmentPrecise$MH,"GetSystemTimeAdjustmentPrecise");
    }
    public static int GetSystemTimeAdjustmentPrecise ( Addressable lpTimeAdjustment,  Addressable lpTimeIncrement,  Addressable lpTimeAdjustmentDisabled) {
        var mh$ = GetSystemTimeAdjustmentPrecise$MH();
        try {
            return (int)mh$.invokeExact(lpTimeAdjustment, lpTimeIncrement, lpTimeAdjustmentDisabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemDirectoryA$MH() {
        return RuntimeHelper.requireNonNull(constants$194.GetSystemDirectoryA$MH,"GetSystemDirectoryA");
    }
    public static int GetSystemDirectoryA ( Addressable lpBuffer,  int uSize) {
        var mh$ = GetSystemDirectoryA$MH();
        try {
            return (int)mh$.invokeExact(lpBuffer, uSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemDirectoryW$MH() {
        return RuntimeHelper.requireNonNull(constants$194.GetSystemDirectoryW$MH,"GetSystemDirectoryW");
    }
    public static int GetSystemDirectoryW ( Addressable lpBuffer,  int uSize) {
        var mh$ = GetSystemDirectoryW$MH();
        try {
            return (int)mh$.invokeExact(lpBuffer, uSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowsDirectoryA$MH() {
        return RuntimeHelper.requireNonNull(constants$194.GetWindowsDirectoryA$MH,"GetWindowsDirectoryA");
    }
    public static int GetWindowsDirectoryA ( Addressable lpBuffer,  int uSize) {
        var mh$ = GetWindowsDirectoryA$MH();
        try {
            return (int)mh$.invokeExact(lpBuffer, uSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowsDirectoryW$MH() {
        return RuntimeHelper.requireNonNull(constants$194.GetWindowsDirectoryW$MH,"GetWindowsDirectoryW");
    }
    public static int GetWindowsDirectoryW ( Addressable lpBuffer,  int uSize) {
        var mh$ = GetWindowsDirectoryW$MH();
        try {
            return (int)mh$.invokeExact(lpBuffer, uSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemWindowsDirectoryA$MH() {
        return RuntimeHelper.requireNonNull(constants$194.GetSystemWindowsDirectoryA$MH,"GetSystemWindowsDirectoryA");
    }
    public static int GetSystemWindowsDirectoryA ( Addressable lpBuffer,  int uSize) {
        var mh$ = GetSystemWindowsDirectoryA$MH();
        try {
            return (int)mh$.invokeExact(lpBuffer, uSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemWindowsDirectoryW$MH() {
        return RuntimeHelper.requireNonNull(constants$194.GetSystemWindowsDirectoryW$MH,"GetSystemWindowsDirectoryW");
    }
    public static int GetSystemWindowsDirectoryW ( Addressable lpBuffer,  int uSize) {
        var mh$ = GetSystemWindowsDirectoryW$MH();
        try {
            return (int)mh$.invokeExact(lpBuffer, uSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int ComputerNameNetBIOS() {
        return (int)0L;
    }
    public static int ComputerNameDnsHostname() {
        return (int)1L;
    }
    public static int ComputerNameDnsDomain() {
        return (int)2L;
    }
    public static int ComputerNameDnsFullyQualified() {
        return (int)3L;
    }
    public static int ComputerNamePhysicalNetBIOS() {
        return (int)4L;
    }
    public static int ComputerNamePhysicalDnsHostname() {
        return (int)5L;
    }
    public static int ComputerNamePhysicalDnsDomain() {
        return (int)6L;
    }
    public static int ComputerNamePhysicalDnsFullyQualified() {
        return (int)7L;
    }
    public static int ComputerNameMax() {
        return (int)8L;
    }
    public static MethodHandle GetComputerNameExA$MH() {
        return RuntimeHelper.requireNonNull(constants$195.GetComputerNameExA$MH,"GetComputerNameExA");
    }
    public static int GetComputerNameExA ( int NameType,  Addressable lpBuffer,  Addressable nSize) {
        var mh$ = GetComputerNameExA$MH();
        try {
            return (int)mh$.invokeExact(NameType, lpBuffer, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetComputerNameExW$MH() {
        return RuntimeHelper.requireNonNull(constants$195.GetComputerNameExW$MH,"GetComputerNameExW");
    }
    public static int GetComputerNameExW ( int NameType,  Addressable lpBuffer,  Addressable nSize) {
        var mh$ = GetComputerNameExW$MH();
        try {
            return (int)mh$.invokeExact(NameType, lpBuffer, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetComputerNameExW$MH() {
        return RuntimeHelper.requireNonNull(constants$195.SetComputerNameExW$MH,"SetComputerNameExW");
    }
    public static int SetComputerNameExW ( int NameType,  Addressable lpBuffer) {
        var mh$ = SetComputerNameExW$MH();
        try {
            return (int)mh$.invokeExact(NameType, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetSystemTime$MH() {
        return RuntimeHelper.requireNonNull(constants$195.SetSystemTime$MH,"SetSystemTime");
    }
    public static int SetSystemTime ( Addressable lpSystemTime) {
        var mh$ = SetSystemTime$MH();
        try {
            return (int)mh$.invokeExact(lpSystemTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetVersionExA$MH() {
        return RuntimeHelper.requireNonNull(constants$195.GetVersionExA$MH,"GetVersionExA");
    }
    public static int GetVersionExA ( Addressable lpVersionInformation) {
        var mh$ = GetVersionExA$MH();
        try {
            return (int)mh$.invokeExact(lpVersionInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetVersionExW$MH() {
        return RuntimeHelper.requireNonNull(constants$195.GetVersionExW$MH,"GetVersionExW");
    }
    public static int GetVersionExW ( Addressable lpVersionInformation) {
        var mh$ = GetVersionExW$MH();
        try {
            return (int)mh$.invokeExact(lpVersionInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLogicalProcessorInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$196.GetLogicalProcessorInformation$MH,"GetLogicalProcessorInformation");
    }
    public static int GetLogicalProcessorInformation ( Addressable Buffer,  Addressable ReturnedLength) {
        var mh$ = GetLogicalProcessorInformation$MH();
        try {
            return (int)mh$.invokeExact(Buffer, ReturnedLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLogicalProcessorInformationEx$MH() {
        return RuntimeHelper.requireNonNull(constants$196.GetLogicalProcessorInformationEx$MH,"GetLogicalProcessorInformationEx");
    }
    public static int GetLogicalProcessorInformationEx ( int RelationshipType,  Addressable Buffer,  Addressable ReturnedLength) {
        var mh$ = GetLogicalProcessorInformationEx$MH();
        try {
            return (int)mh$.invokeExact(RelationshipType, Buffer, ReturnedLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNativeSystemInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$196.GetNativeSystemInfo$MH,"GetNativeSystemInfo");
    }
    public static void GetNativeSystemInfo ( Addressable lpSystemInfo) {
        var mh$ = GetNativeSystemInfo$MH();
        try {
            mh$.invokeExact(lpSystemInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemTimePreciseAsFileTime$MH() {
        return RuntimeHelper.requireNonNull(constants$196.GetSystemTimePreciseAsFileTime$MH,"GetSystemTimePreciseAsFileTime");
    }
    public static void GetSystemTimePreciseAsFileTime ( Addressable lpSystemTimeAsFileTime) {
        var mh$ = GetSystemTimePreciseAsFileTime$MH();
        try {
            mh$.invokeExact(lpSystemTimeAsFileTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProductInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$196.GetProductInfo$MH,"GetProductInfo");
    }
    public static int GetProductInfo ( int dwOSMajorVersion,  int dwOSMinorVersion,  int dwSpMajorVersion,  int dwSpMinorVersion,  Addressable pdwReturnedProductType) {
        var mh$ = GetProductInfo$MH();
        try {
            return (int)mh$.invokeExact(dwOSMajorVersion, dwOSMinorVersion, dwSpMajorVersion, dwSpMinorVersion, pdwReturnedProductType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetOsSafeBootMode$MH() {
        return RuntimeHelper.requireNonNull(constants$196.GetOsSafeBootMode$MH,"GetOsSafeBootMode");
    }
    public static int GetOsSafeBootMode ( Addressable Flags) {
        var mh$ = GetOsSafeBootMode$MH();
        try {
            return (int)mh$.invokeExact(Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemFirmwareTables$MH() {
        return RuntimeHelper.requireNonNull(constants$197.EnumSystemFirmwareTables$MH,"EnumSystemFirmwareTables");
    }
    public static int EnumSystemFirmwareTables ( int FirmwareTableProviderSignature,  Addressable pFirmwareTableEnumBuffer,  int BufferSize) {
        var mh$ = EnumSystemFirmwareTables$MH();
        try {
            return (int)mh$.invokeExact(FirmwareTableProviderSignature, pFirmwareTableEnumBuffer, BufferSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemFirmwareTable$MH() {
        return RuntimeHelper.requireNonNull(constants$197.GetSystemFirmwareTable$MH,"GetSystemFirmwareTable");
    }
    public static int GetSystemFirmwareTable ( int FirmwareTableProviderSignature,  int FirmwareTableID,  Addressable pFirmwareTableBuffer,  int BufferSize) {
        var mh$ = GetSystemFirmwareTable$MH();
        try {
            return (int)mh$.invokeExact(FirmwareTableProviderSignature, FirmwareTableID, pFirmwareTableBuffer, BufferSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DnsHostnameToComputerNameExW$MH() {
        return RuntimeHelper.requireNonNull(constants$197.DnsHostnameToComputerNameExW$MH,"DnsHostnameToComputerNameExW");
    }
    public static int DnsHostnameToComputerNameExW ( Addressable Hostname,  Addressable ComputerName,  Addressable nSize) {
        var mh$ = DnsHostnameToComputerNameExW$MH();
        try {
            return (int)mh$.invokeExact(Hostname, ComputerName, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPhysicallyInstalledSystemMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$197.GetPhysicallyInstalledSystemMemory$MH,"GetPhysicallyInstalledSystemMemory");
    }
    public static int GetPhysicallyInstalledSystemMemory ( Addressable TotalMemoryInKilobytes) {
        var mh$ = GetPhysicallyInstalledSystemMemory$MH();
        try {
            return (int)mh$.invokeExact(TotalMemoryInKilobytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetComputerNameEx2W$MH() {
        return RuntimeHelper.requireNonNull(constants$197.SetComputerNameEx2W$MH,"SetComputerNameEx2W");
    }
    public static int SetComputerNameEx2W ( int NameType,  int Flags,  Addressable lpBuffer) {
        var mh$ = SetComputerNameEx2W$MH();
        try {
            return (int)mh$.invokeExact(NameType, Flags, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetSystemTimeAdjustment$MH() {
        return RuntimeHelper.requireNonNull(constants$197.SetSystemTimeAdjustment$MH,"SetSystemTimeAdjustment");
    }
    public static int SetSystemTimeAdjustment ( int dwTimeAdjustment,  int bTimeAdjustmentDisabled) {
        var mh$ = SetSystemTimeAdjustment$MH();
        try {
            return (int)mh$.invokeExact(dwTimeAdjustment, bTimeAdjustmentDisabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetSystemTimeAdjustmentPrecise$MH() {
        return RuntimeHelper.requireNonNull(constants$198.SetSystemTimeAdjustmentPrecise$MH,"SetSystemTimeAdjustmentPrecise");
    }
    public static int SetSystemTimeAdjustmentPrecise ( long dwTimeAdjustment,  int bTimeAdjustmentDisabled) {
        var mh$ = SetSystemTimeAdjustmentPrecise$MH();
        try {
            return (int)mh$.invokeExact(dwTimeAdjustment, bTimeAdjustmentDisabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InstallELAMCertificateInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$198.InstallELAMCertificateInfo$MH,"InstallELAMCertificateInfo");
    }
    public static int InstallELAMCertificateInfo ( Addressable ELAMFile) {
        var mh$ = InstallELAMCertificateInfo$MH();
        try {
            return (int)mh$.invokeExact(ELAMFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessorSystemCycleTime$MH() {
        return RuntimeHelper.requireNonNull(constants$198.GetProcessorSystemCycleTime$MH,"GetProcessorSystemCycleTime");
    }
    public static int GetProcessorSystemCycleTime ( short Group,  Addressable Buffer,  Addressable ReturnedLength) {
        var mh$ = GetProcessorSystemCycleTime$MH();
        try {
            return (int)mh$.invokeExact(Group, Buffer, ReturnedLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetOsManufacturingMode$MH() {
        return RuntimeHelper.requireNonNull(constants$198.GetOsManufacturingMode$MH,"GetOsManufacturingMode");
    }
    public static int GetOsManufacturingMode ( Addressable pbEnabled) {
        var mh$ = GetOsManufacturingMode$MH();
        try {
            return (int)mh$.invokeExact(pbEnabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetIntegratedDisplaySize$MH() {
        return RuntimeHelper.requireNonNull(constants$198.GetIntegratedDisplaySize$MH,"GetIntegratedDisplaySize");
    }
    public static int GetIntegratedDisplaySize ( Addressable sizeInInches) {
        var mh$ = GetIntegratedDisplaySize$MH();
        try {
            return (int)mh$.invokeExact(sizeInInches);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetComputerNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$198.SetComputerNameA$MH,"SetComputerNameA");
    }
    public static int SetComputerNameA ( Addressable lpComputerName) {
        var mh$ = SetComputerNameA$MH();
        try {
            return (int)mh$.invokeExact(lpComputerName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetComputerNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$199.SetComputerNameW$MH,"SetComputerNameW");
    }
    public static int SetComputerNameW ( Addressable lpComputerName) {
        var mh$ = SetComputerNameW$MH();
        try {
            return (int)mh$.invokeExact(lpComputerName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetComputerNameExA$MH() {
        return RuntimeHelper.requireNonNull(constants$199.SetComputerNameExA$MH,"SetComputerNameExA");
    }
    public static int SetComputerNameExA ( int NameType,  Addressable lpBuffer) {
        var mh$ = SetComputerNameExA$MH();
        try {
            return (int)mh$.invokeExact(NameType, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualAlloc$MH() {
        return RuntimeHelper.requireNonNull(constants$199.VirtualAlloc$MH,"VirtualAlloc");
    }
    public static MemoryAddress VirtualAlloc ( Addressable lpAddress,  long dwSize,  int flAllocationType,  int flProtect) {
        var mh$ = VirtualAlloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpAddress, dwSize, flAllocationType, flProtect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualProtect$MH() {
        return RuntimeHelper.requireNonNull(constants$199.VirtualProtect$MH,"VirtualProtect");
    }
    public static int VirtualProtect ( Addressable lpAddress,  long dwSize,  int flNewProtect,  Addressable lpflOldProtect) {
        var mh$ = VirtualProtect$MH();
        try {
            return (int)mh$.invokeExact(lpAddress, dwSize, flNewProtect, lpflOldProtect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualFree$MH() {
        return RuntimeHelper.requireNonNull(constants$199.VirtualFree$MH,"VirtualFree");
    }
    public static int VirtualFree ( Addressable lpAddress,  long dwSize,  int dwFreeType) {
        var mh$ = VirtualFree$MH();
        try {
            return (int)mh$.invokeExact(lpAddress, dwSize, dwFreeType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualQuery$MH() {
        return RuntimeHelper.requireNonNull(constants$199.VirtualQuery$MH,"VirtualQuery");
    }
    public static long VirtualQuery ( Addressable lpAddress,  Addressable lpBuffer,  long dwLength) {
        var mh$ = VirtualQuery$MH();
        try {
            return (long)mh$.invokeExact(lpAddress, lpBuffer, dwLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualAllocEx$MH() {
        return RuntimeHelper.requireNonNull(constants$200.VirtualAllocEx$MH,"VirtualAllocEx");
    }
    public static MemoryAddress VirtualAllocEx ( Addressable hProcess,  Addressable lpAddress,  long dwSize,  int flAllocationType,  int flProtect) {
        var mh$ = VirtualAllocEx$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hProcess, lpAddress, dwSize, flAllocationType, flProtect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualProtectEx$MH() {
        return RuntimeHelper.requireNonNull(constants$200.VirtualProtectEx$MH,"VirtualProtectEx");
    }
    public static int VirtualProtectEx ( Addressable hProcess,  Addressable lpAddress,  long dwSize,  int flNewProtect,  Addressable lpflOldProtect) {
        var mh$ = VirtualProtectEx$MH();
        try {
            return (int)mh$.invokeExact(hProcess, lpAddress, dwSize, flNewProtect, lpflOldProtect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualQueryEx$MH() {
        return RuntimeHelper.requireNonNull(constants$200.VirtualQueryEx$MH,"VirtualQueryEx");
    }
    public static long VirtualQueryEx ( Addressable hProcess,  Addressable lpAddress,  Addressable lpBuffer,  long dwLength) {
        var mh$ = VirtualQueryEx$MH();
        try {
            return (long)mh$.invokeExact(hProcess, lpAddress, lpBuffer, dwLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadProcessMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$200.ReadProcessMemory$MH,"ReadProcessMemory");
    }
    public static int ReadProcessMemory ( Addressable hProcess,  Addressable lpBaseAddress,  Addressable lpBuffer,  long nSize,  Addressable lpNumberOfBytesRead) {
        var mh$ = ReadProcessMemory$MH();
        try {
            return (int)mh$.invokeExact(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesRead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteProcessMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$200.WriteProcessMemory$MH,"WriteProcessMemory");
    }
    public static int WriteProcessMemory ( Addressable hProcess,  Addressable lpBaseAddress,  Addressable lpBuffer,  long nSize,  Addressable lpNumberOfBytesWritten) {
        var mh$ = WriteProcessMemory$MH();
        try {
            return (int)mh$.invokeExact(hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFileMappingW$MH() {
        return RuntimeHelper.requireNonNull(constants$200.CreateFileMappingW$MH,"CreateFileMappingW");
    }
    public static MemoryAddress CreateFileMappingW ( Addressable hFile,  Addressable lpFileMappingAttributes,  int flProtect,  int dwMaximumSizeHigh,  int dwMaximumSizeLow,  Addressable lpName) {
        var mh$ = CreateFileMappingW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hFile, lpFileMappingAttributes, flProtect, dwMaximumSizeHigh, dwMaximumSizeLow, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenFileMappingW$MH() {
        return RuntimeHelper.requireNonNull(constants$201.OpenFileMappingW$MH,"OpenFileMappingW");
    }
    public static MemoryAddress OpenFileMappingW ( int dwDesiredAccess,  int bInheritHandle,  Addressable lpName) {
        var mh$ = OpenFileMappingW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwDesiredAccess, bInheritHandle, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapViewOfFile$MH() {
        return RuntimeHelper.requireNonNull(constants$201.MapViewOfFile$MH,"MapViewOfFile");
    }
    public static MemoryAddress MapViewOfFile ( Addressable hFileMappingObject,  int dwDesiredAccess,  int dwFileOffsetHigh,  int dwFileOffsetLow,  long dwNumberOfBytesToMap) {
        var mh$ = MapViewOfFile$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hFileMappingObject, dwDesiredAccess, dwFileOffsetHigh, dwFileOffsetLow, dwNumberOfBytesToMap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapViewOfFileEx$MH() {
        return RuntimeHelper.requireNonNull(constants$201.MapViewOfFileEx$MH,"MapViewOfFileEx");
    }
    public static MemoryAddress MapViewOfFileEx ( Addressable hFileMappingObject,  int dwDesiredAccess,  int dwFileOffsetHigh,  int dwFileOffsetLow,  long dwNumberOfBytesToMap,  Addressable lpBaseAddress) {
        var mh$ = MapViewOfFileEx$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hFileMappingObject, dwDesiredAccess, dwFileOffsetHigh, dwFileOffsetLow, dwNumberOfBytesToMap, lpBaseAddress);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualFreeEx$MH() {
        return RuntimeHelper.requireNonNull(constants$201.VirtualFreeEx$MH,"VirtualFreeEx");
    }
    public static int VirtualFreeEx ( Addressable hProcess,  Addressable lpAddress,  long dwSize,  int dwFreeType) {
        var mh$ = VirtualFreeEx$MH();
        try {
            return (int)mh$.invokeExact(hProcess, lpAddress, dwSize, dwFreeType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlushViewOfFile$MH() {
        return RuntimeHelper.requireNonNull(constants$201.FlushViewOfFile$MH,"FlushViewOfFile");
    }
    public static int FlushViewOfFile ( Addressable lpBaseAddress,  long dwNumberOfBytesToFlush) {
        var mh$ = FlushViewOfFile$MH();
        try {
            return (int)mh$.invokeExact(lpBaseAddress, dwNumberOfBytesToFlush);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnmapViewOfFile$MH() {
        return RuntimeHelper.requireNonNull(constants$201.UnmapViewOfFile$MH,"UnmapViewOfFile");
    }
    public static int UnmapViewOfFile ( Addressable lpBaseAddress) {
        var mh$ = UnmapViewOfFile$MH();
        try {
            return (int)mh$.invokeExact(lpBaseAddress);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLargePageMinimum$MH() {
        return RuntimeHelper.requireNonNull(constants$202.GetLargePageMinimum$MH,"GetLargePageMinimum");
    }
    public static long GetLargePageMinimum () {
        var mh$ = GetLargePageMinimum$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessWorkingSetSizeEx$MH() {
        return RuntimeHelper.requireNonNull(constants$202.GetProcessWorkingSetSizeEx$MH,"GetProcessWorkingSetSizeEx");
    }
    public static int GetProcessWorkingSetSizeEx ( Addressable hProcess,  Addressable lpMinimumWorkingSetSize,  Addressable lpMaximumWorkingSetSize,  Addressable Flags) {
        var mh$ = GetProcessWorkingSetSizeEx$MH();
        try {
            return (int)mh$.invokeExact(hProcess, lpMinimumWorkingSetSize, lpMaximumWorkingSetSize, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessWorkingSetSizeEx$MH() {
        return RuntimeHelper.requireNonNull(constants$202.SetProcessWorkingSetSizeEx$MH,"SetProcessWorkingSetSizeEx");
    }
    public static int SetProcessWorkingSetSizeEx ( Addressable hProcess,  long dwMinimumWorkingSetSize,  long dwMaximumWorkingSetSize,  int Flags) {
        var mh$ = SetProcessWorkingSetSizeEx$MH();
        try {
            return (int)mh$.invokeExact(hProcess, dwMinimumWorkingSetSize, dwMaximumWorkingSetSize, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualLock$MH() {
        return RuntimeHelper.requireNonNull(constants$202.VirtualLock$MH,"VirtualLock");
    }
    public static int VirtualLock ( Addressable lpAddress,  long dwSize) {
        var mh$ = VirtualLock$MH();
        try {
            return (int)mh$.invokeExact(lpAddress, dwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualUnlock$MH() {
        return RuntimeHelper.requireNonNull(constants$202.VirtualUnlock$MH,"VirtualUnlock");
    }
    public static int VirtualUnlock ( Addressable lpAddress,  long dwSize) {
        var mh$ = VirtualUnlock$MH();
        try {
            return (int)mh$.invokeExact(lpAddress, dwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWriteWatch$MH() {
        return RuntimeHelper.requireNonNull(constants$202.GetWriteWatch$MH,"GetWriteWatch");
    }
    public static int GetWriteWatch ( int dwFlags,  Addressable lpBaseAddress,  long dwRegionSize,  Addressable lpAddresses,  Addressable lpdwCount,  Addressable lpdwGranularity) {
        var mh$ = GetWriteWatch$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpBaseAddress, dwRegionSize, lpAddresses, lpdwCount, lpdwGranularity);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ResetWriteWatch$MH() {
        return RuntimeHelper.requireNonNull(constants$203.ResetWriteWatch$MH,"ResetWriteWatch");
    }
    public static int ResetWriteWatch ( Addressable lpBaseAddress,  long dwRegionSize) {
        var mh$ = ResetWriteWatch$MH();
        try {
            return (int)mh$.invokeExact(lpBaseAddress, dwRegionSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int LowMemoryResourceNotification() {
        return (int)0L;
    }
    public static int HighMemoryResourceNotification() {
        return (int)1L;
    }
    public static MethodHandle CreateMemoryResourceNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$203.CreateMemoryResourceNotification$MH,"CreateMemoryResourceNotification");
    }
    public static MemoryAddress CreateMemoryResourceNotification ( int NotificationType) {
        var mh$ = CreateMemoryResourceNotification$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(NotificationType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryMemoryResourceNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$203.QueryMemoryResourceNotification$MH,"QueryMemoryResourceNotification");
    }
    public static int QueryMemoryResourceNotification ( Addressable ResourceNotificationHandle,  Addressable ResourceState) {
        var mh$ = QueryMemoryResourceNotification$MH();
        try {
            return (int)mh$.invokeExact(ResourceNotificationHandle, ResourceState);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemFileCacheSize$MH() {
        return RuntimeHelper.requireNonNull(constants$203.GetSystemFileCacheSize$MH,"GetSystemFileCacheSize");
    }
    public static int GetSystemFileCacheSize ( Addressable lpMinimumFileCacheSize,  Addressable lpMaximumFileCacheSize,  Addressable lpFlags) {
        var mh$ = GetSystemFileCacheSize$MH();
        try {
            return (int)mh$.invokeExact(lpMinimumFileCacheSize, lpMaximumFileCacheSize, lpFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetSystemFileCacheSize$MH() {
        return RuntimeHelper.requireNonNull(constants$203.SetSystemFileCacheSize$MH,"SetSystemFileCacheSize");
    }
    public static int SetSystemFileCacheSize ( long MinimumFileCacheSize,  long MaximumFileCacheSize,  int Flags) {
        var mh$ = SetSystemFileCacheSize$MH();
        try {
            return (int)mh$.invokeExact(MinimumFileCacheSize, MaximumFileCacheSize, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFileMappingNumaW$MH() {
        return RuntimeHelper.requireNonNull(constants$203.CreateFileMappingNumaW$MH,"CreateFileMappingNumaW");
    }
    public static MemoryAddress CreateFileMappingNumaW ( Addressable hFile,  Addressable lpFileMappingAttributes,  int flProtect,  int dwMaximumSizeHigh,  int dwMaximumSizeLow,  Addressable lpName,  int nndPreferred) {
        var mh$ = CreateFileMappingNumaW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hFile, lpFileMappingAttributes, flProtect, dwMaximumSizeHigh, dwMaximumSizeLow, lpName, nndPreferred);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PWIN32_MEMORY_RANGE_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle PrefetchVirtualMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$204.PrefetchVirtualMemory$MH,"PrefetchVirtualMemory");
    }
    public static int PrefetchVirtualMemory ( Addressable hProcess,  long NumberOfEntries,  Addressable VirtualAddresses,  int Flags) {
        var mh$ = PrefetchVirtualMemory$MH();
        try {
            return (int)mh$.invokeExact(hProcess, NumberOfEntries, VirtualAddresses, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFileMappingFromApp$MH() {
        return RuntimeHelper.requireNonNull(constants$204.CreateFileMappingFromApp$MH,"CreateFileMappingFromApp");
    }
    public static MemoryAddress CreateFileMappingFromApp ( Addressable hFile,  Addressable SecurityAttributes,  int PageProtection,  long MaximumSize,  Addressable Name) {
        var mh$ = CreateFileMappingFromApp$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hFile, SecurityAttributes, PageProtection, MaximumSize, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapViewOfFileFromApp$MH() {
        return RuntimeHelper.requireNonNull(constants$204.MapViewOfFileFromApp$MH,"MapViewOfFileFromApp");
    }
    public static MemoryAddress MapViewOfFileFromApp ( Addressable hFileMappingObject,  int DesiredAccess,  long FileOffset,  long NumberOfBytesToMap) {
        var mh$ = MapViewOfFileFromApp$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hFileMappingObject, DesiredAccess, FileOffset, NumberOfBytesToMap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnmapViewOfFileEx$MH() {
        return RuntimeHelper.requireNonNull(constants$204.UnmapViewOfFileEx$MH,"UnmapViewOfFileEx");
    }
    public static int UnmapViewOfFileEx ( Addressable BaseAddress,  int UnmapFlags) {
        var mh$ = UnmapViewOfFileEx$MH();
        try {
            return (int)mh$.invokeExact(BaseAddress, UnmapFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AllocateUserPhysicalPages$MH() {
        return RuntimeHelper.requireNonNull(constants$204.AllocateUserPhysicalPages$MH,"AllocateUserPhysicalPages");
    }
    public static int AllocateUserPhysicalPages ( Addressable hProcess,  Addressable NumberOfPages,  Addressable PageArray) {
        var mh$ = AllocateUserPhysicalPages$MH();
        try {
            return (int)mh$.invokeExact(hProcess, NumberOfPages, PageArray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeUserPhysicalPages$MH() {
        return RuntimeHelper.requireNonNull(constants$204.FreeUserPhysicalPages$MH,"FreeUserPhysicalPages");
    }
    public static int FreeUserPhysicalPages ( Addressable hProcess,  Addressable NumberOfPages,  Addressable PageArray) {
        var mh$ = FreeUserPhysicalPages$MH();
        try {
            return (int)mh$.invokeExact(hProcess, NumberOfPages, PageArray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapUserPhysicalPages$MH() {
        return RuntimeHelper.requireNonNull(constants$205.MapUserPhysicalPages$MH,"MapUserPhysicalPages");
    }
    public static int MapUserPhysicalPages ( Addressable VirtualAddress,  long NumberOfPages,  Addressable PageArray) {
        var mh$ = MapUserPhysicalPages$MH();
        try {
            return (int)mh$.invokeExact(VirtualAddress, NumberOfPages, PageArray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AllocateUserPhysicalPagesNuma$MH() {
        return RuntimeHelper.requireNonNull(constants$205.AllocateUserPhysicalPagesNuma$MH,"AllocateUserPhysicalPagesNuma");
    }
    public static int AllocateUserPhysicalPagesNuma ( Addressable hProcess,  Addressable NumberOfPages,  Addressable PageArray,  int nndPreferred) {
        var mh$ = AllocateUserPhysicalPagesNuma$MH();
        try {
            return (int)mh$.invokeExact(hProcess, NumberOfPages, PageArray, nndPreferred);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualAllocExNuma$MH() {
        return RuntimeHelper.requireNonNull(constants$205.VirtualAllocExNuma$MH,"VirtualAllocExNuma");
    }
    public static MemoryAddress VirtualAllocExNuma ( Addressable hProcess,  Addressable lpAddress,  long dwSize,  int flAllocationType,  int flProtect,  int nndPreferred) {
        var mh$ = VirtualAllocExNuma$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hProcess, lpAddress, dwSize, flAllocationType, flProtect, nndPreferred);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMemoryErrorHandlingCapabilities$MH() {
        return RuntimeHelper.requireNonNull(constants$205.GetMemoryErrorHandlingCapabilities$MH,"GetMemoryErrorHandlingCapabilities");
    }
    public static int GetMemoryErrorHandlingCapabilities ( Addressable Capabilities) {
        var mh$ = GetMemoryErrorHandlingCapabilities$MH();
        try {
            return (int)mh$.invokeExact(Capabilities);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterBadMemoryNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$206.RegisterBadMemoryNotification$MH,"RegisterBadMemoryNotification");
    }
    public static MemoryAddress RegisterBadMemoryNotification ( Addressable Callback) {
        var mh$ = RegisterBadMemoryNotification$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterBadMemoryNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$206.UnregisterBadMemoryNotification$MH,"UnregisterBadMemoryNotification");
    }
    public static int UnregisterBadMemoryNotification ( Addressable RegistrationHandle) {
        var mh$ = UnregisterBadMemoryNotification$MH();
        try {
            return (int)mh$.invokeExact(RegistrationHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int VmOfferPriorityVeryLow() {
        return (int)1L;
    }
    public static int VmOfferPriorityLow() {
        return (int)2L;
    }
    public static int VmOfferPriorityBelowNormal() {
        return (int)3L;
    }
    public static int VmOfferPriorityNormal() {
        return (int)4L;
    }
    public static MethodHandle OfferVirtualMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$206.OfferVirtualMemory$MH,"OfferVirtualMemory");
    }
    public static int OfferVirtualMemory ( Addressable VirtualAddress,  long Size,  int Priority) {
        var mh$ = OfferVirtualMemory$MH();
        try {
            return (int)mh$.invokeExact(VirtualAddress, Size, Priority);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReclaimVirtualMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$206.ReclaimVirtualMemory$MH,"ReclaimVirtualMemory");
    }
    public static int ReclaimVirtualMemory ( Addressable VirtualAddress,  long Size) {
        var mh$ = ReclaimVirtualMemory$MH();
        try {
            return (int)mh$.invokeExact(VirtualAddress, Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DiscardVirtualMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$207.DiscardVirtualMemory$MH,"DiscardVirtualMemory");
    }
    public static int DiscardVirtualMemory ( Addressable VirtualAddress,  long Size) {
        var mh$ = DiscardVirtualMemory$MH();
        try {
            return (int)mh$.invokeExact(VirtualAddress, Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessValidCallTargets$MH() {
        return RuntimeHelper.requireNonNull(constants$207.SetProcessValidCallTargets$MH,"SetProcessValidCallTargets");
    }
    public static int SetProcessValidCallTargets ( Addressable hProcess,  Addressable VirtualAddress,  long RegionSize,  int NumberOfOffsets,  Addressable OffsetInformation) {
        var mh$ = SetProcessValidCallTargets$MH();
        try {
            return (int)mh$.invokeExact(hProcess, VirtualAddress, RegionSize, NumberOfOffsets, OffsetInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessValidCallTargetsForMappedView$MH() {
        return RuntimeHelper.requireNonNull(constants$207.SetProcessValidCallTargetsForMappedView$MH,"SetProcessValidCallTargetsForMappedView");
    }
    public static int SetProcessValidCallTargetsForMappedView ( Addressable Process,  Addressable VirtualAddress,  long RegionSize,  int NumberOfOffsets,  Addressable OffsetInformation,  Addressable Section,  long ExpectedFileOffset) {
        var mh$ = SetProcessValidCallTargetsForMappedView$MH();
        try {
            return (int)mh$.invokeExact(Process, VirtualAddress, RegionSize, NumberOfOffsets, OffsetInformation, Section, ExpectedFileOffset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualAllocFromApp$MH() {
        return RuntimeHelper.requireNonNull(constants$207.VirtualAllocFromApp$MH,"VirtualAllocFromApp");
    }
    public static MemoryAddress VirtualAllocFromApp ( Addressable BaseAddress,  long Size,  int AllocationType,  int Protection) {
        var mh$ = VirtualAllocFromApp$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(BaseAddress, Size, AllocationType, Protection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualProtectFromApp$MH() {
        return RuntimeHelper.requireNonNull(constants$207.VirtualProtectFromApp$MH,"VirtualProtectFromApp");
    }
    public static int VirtualProtectFromApp ( Addressable Address,  long Size,  int NewProtection,  Addressable OldProtection) {
        var mh$ = VirtualProtectFromApp$MH();
        try {
            return (int)mh$.invokeExact(Address, Size, NewProtection, OldProtection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenFileMappingFromApp$MH() {
        return RuntimeHelper.requireNonNull(constants$207.OpenFileMappingFromApp$MH,"OpenFileMappingFromApp");
    }
    public static MemoryAddress OpenFileMappingFromApp ( int DesiredAccess,  int InheritHandle,  Addressable Name) {
        var mh$ = OpenFileMappingFromApp$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(DesiredAccess, InheritHandle, Name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int MemoryRegionInfo() {
        return (int)0L;
    }
    public static MethodHandle QueryVirtualMemoryInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$208.QueryVirtualMemoryInformation$MH,"QueryVirtualMemoryInformation");
    }
    public static int QueryVirtualMemoryInformation ( Addressable Process,  Addressable VirtualAddress,  int MemoryInformationClass,  Addressable MemoryInformation,  long MemoryInformationSize,  Addressable ReturnSize) {
        var mh$ = QueryVirtualMemoryInformation$MH();
        try {
            return (int)mh$.invokeExact(Process, VirtualAddress, MemoryInformationClass, MemoryInformation, MemoryInformationSize, ReturnSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapViewOfFileNuma2$MH() {
        return RuntimeHelper.requireNonNull(constants$208.MapViewOfFileNuma2$MH,"MapViewOfFileNuma2");
    }
    public static MemoryAddress MapViewOfFileNuma2 ( Addressable FileMappingHandle,  Addressable ProcessHandle,  long Offset,  Addressable BaseAddress,  long ViewSize,  int AllocationType,  int PageProtection,  int PreferredNode) {
        var mh$ = MapViewOfFileNuma2$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(FileMappingHandle, ProcessHandle, Offset, BaseAddress, ViewSize, AllocationType, PageProtection, PreferredNode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapViewOfFile2$MH() {
        return RuntimeHelper.requireNonNull(constants$208.MapViewOfFile2$MH,"MapViewOfFile2");
    }
    public static MemoryAddress MapViewOfFile2 ( Addressable FileMappingHandle,  Addressable ProcessHandle,  long Offset,  Addressable BaseAddress,  long ViewSize,  int AllocationType,  int PageProtection) {
        var mh$ = MapViewOfFile2$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(FileMappingHandle, ProcessHandle, Offset, BaseAddress, ViewSize, AllocationType, PageProtection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnmapViewOfFile2$MH() {
        return RuntimeHelper.requireNonNull(constants$208.UnmapViewOfFile2$MH,"UnmapViewOfFile2");
    }
    public static int UnmapViewOfFile2 ( Addressable Process,  Addressable BaseAddress,  int UnmapFlags) {
        var mh$ = UnmapViewOfFile2$MH();
        try {
            return (int)mh$.invokeExact(Process, BaseAddress, UnmapFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualUnlockEx$MH() {
        return RuntimeHelper.requireNonNull(constants$208.VirtualUnlockEx$MH,"VirtualUnlockEx");
    }
    public static int VirtualUnlockEx ( Addressable Process,  Addressable Address,  long Size) {
        var mh$ = VirtualUnlockEx$MH();
        try {
            return (int)mh$.invokeExact(Process, Address, Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualAlloc2$MH() {
        return RuntimeHelper.requireNonNull(constants$208.VirtualAlloc2$MH,"VirtualAlloc2");
    }
    public static MemoryAddress VirtualAlloc2 ( Addressable Process,  Addressable BaseAddress,  long Size,  int AllocationType,  int PageProtection,  Addressable ExtendedParameters,  int ParameterCount) {
        var mh$ = VirtualAlloc2$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Process, BaseAddress, Size, AllocationType, PageProtection, ExtendedParameters, ParameterCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapViewOfFile3$MH() {
        return RuntimeHelper.requireNonNull(constants$209.MapViewOfFile3$MH,"MapViewOfFile3");
    }
    public static MemoryAddress MapViewOfFile3 ( Addressable FileMapping,  Addressable Process,  Addressable BaseAddress,  long Offset,  long ViewSize,  int AllocationType,  int PageProtection,  Addressable ExtendedParameters,  int ParameterCount) {
        var mh$ = MapViewOfFile3$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(FileMapping, Process, BaseAddress, Offset, ViewSize, AllocationType, PageProtection, ExtendedParameters, ParameterCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VirtualAlloc2FromApp$MH() {
        return RuntimeHelper.requireNonNull(constants$209.VirtualAlloc2FromApp$MH,"VirtualAlloc2FromApp");
    }
    public static MemoryAddress VirtualAlloc2FromApp ( Addressable Process,  Addressable BaseAddress,  long Size,  int AllocationType,  int PageProtection,  Addressable ExtendedParameters,  int ParameterCount) {
        var mh$ = VirtualAlloc2FromApp$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Process, BaseAddress, Size, AllocationType, PageProtection, ExtendedParameters, ParameterCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapViewOfFile3FromApp$MH() {
        return RuntimeHelper.requireNonNull(constants$209.MapViewOfFile3FromApp$MH,"MapViewOfFile3FromApp");
    }
    public static MemoryAddress MapViewOfFile3FromApp ( Addressable FileMapping,  Addressable Process,  Addressable BaseAddress,  long Offset,  long ViewSize,  int AllocationType,  int PageProtection,  Addressable ExtendedParameters,  int ParameterCount) {
        var mh$ = MapViewOfFile3FromApp$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(FileMapping, Process, BaseAddress, Offset, ViewSize, AllocationType, PageProtection, ExtendedParameters, ParameterCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFileMapping2$MH() {
        return RuntimeHelper.requireNonNull(constants$209.CreateFileMapping2$MH,"CreateFileMapping2");
    }
    public static MemoryAddress CreateFileMapping2 ( Addressable File,  Addressable SecurityAttributes,  int DesiredAccess,  int PageProtection,  int AllocationAttributes,  long MaximumSize,  Addressable Name,  Addressable ExtendedParameters,  int ParameterCount) {
        var mh$ = CreateFileMapping2$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(File, SecurityAttributes, DesiredAccess, PageProtection, AllocationAttributes, MaximumSize, Name, ExtendedParameters, ParameterCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsEnclaveTypeSupported$MH() {
        return RuntimeHelper.requireNonNull(constants$209.IsEnclaveTypeSupported$MH,"IsEnclaveTypeSupported");
    }
    public static int IsEnclaveTypeSupported ( int flEnclaveType) {
        var mh$ = IsEnclaveTypeSupported$MH();
        try {
            return (int)mh$.invokeExact(flEnclaveType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateEnclave$MH() {
        return RuntimeHelper.requireNonNull(constants$209.CreateEnclave$MH,"CreateEnclave");
    }
    public static MemoryAddress CreateEnclave ( Addressable hProcess,  Addressable lpAddress,  long dwSize,  long dwInitialCommitment,  int flEnclaveType,  Addressable lpEnclaveInformation,  int dwInfoLength,  Addressable lpEnclaveError) {
        var mh$ = CreateEnclave$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hProcess, lpAddress, dwSize, dwInitialCommitment, flEnclaveType, lpEnclaveInformation, dwInfoLength, lpEnclaveError);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadEnclaveData$MH() {
        return RuntimeHelper.requireNonNull(constants$210.LoadEnclaveData$MH,"LoadEnclaveData");
    }
    public static int LoadEnclaveData ( Addressable hProcess,  Addressable lpAddress,  Addressable lpBuffer,  long nSize,  int flProtect,  Addressable lpPageInformation,  int dwInfoLength,  Addressable lpNumberOfBytesWritten,  Addressable lpEnclaveError) {
        var mh$ = LoadEnclaveData$MH();
        try {
            return (int)mh$.invokeExact(hProcess, lpAddress, lpBuffer, nSize, flProtect, lpPageInformation, dwInfoLength, lpNumberOfBytesWritten, lpEnclaveError);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitializeEnclave$MH() {
        return RuntimeHelper.requireNonNull(constants$210.InitializeEnclave$MH,"InitializeEnclave");
    }
    public static int InitializeEnclave ( Addressable hProcess,  Addressable lpAddress,  Addressable lpEnclaveInformation,  int dwInfoLength,  Addressable lpEnclaveError) {
        var mh$ = InitializeEnclave$MH();
        try {
            return (int)mh$.invokeExact(hProcess, lpAddress, lpEnclaveInformation, dwInfoLength, lpEnclaveError);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadEnclaveImageA$MH() {
        return RuntimeHelper.requireNonNull(constants$210.LoadEnclaveImageA$MH,"LoadEnclaveImageA");
    }
    public static int LoadEnclaveImageA ( Addressable lpEnclaveAddress,  Addressable lpImageName) {
        var mh$ = LoadEnclaveImageA$MH();
        try {
            return (int)mh$.invokeExact(lpEnclaveAddress, lpImageName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadEnclaveImageW$MH() {
        return RuntimeHelper.requireNonNull(constants$210.LoadEnclaveImageW$MH,"LoadEnclaveImageW");
    }
    public static int LoadEnclaveImageW ( Addressable lpEnclaveAddress,  Addressable lpImageName) {
        var mh$ = LoadEnclaveImageW$MH();
        try {
            return (int)mh$.invokeExact(lpEnclaveAddress, lpImageName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CallEnclave$MH() {
        return RuntimeHelper.requireNonNull(constants$210.CallEnclave$MH,"CallEnclave");
    }
    public static int CallEnclave ( Addressable lpRoutine,  Addressable lpParameter,  int fWaitForThread,  Addressable lpReturnValue) {
        var mh$ = CallEnclave$MH();
        try {
            return (int)mh$.invokeExact(lpRoutine, lpParameter, fWaitForThread, lpReturnValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TerminateEnclave$MH() {
        return RuntimeHelper.requireNonNull(constants$210.TerminateEnclave$MH,"TerminateEnclave");
    }
    public static int TerminateEnclave ( Addressable lpAddress,  int fWait) {
        var mh$ = TerminateEnclave$MH();
        try {
            return (int)mh$.invokeExact(lpAddress, fWait);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteEnclave$MH() {
        return RuntimeHelper.requireNonNull(constants$211.DeleteEnclave$MH,"DeleteEnclave");
    }
    public static int DeleteEnclave ( Addressable lpAddress) {
        var mh$ = DeleteEnclave$MH();
        try {
            return (int)mh$.invokeExact(lpAddress);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueueUserWorkItem$MH() {
        return RuntimeHelper.requireNonNull(constants$211.QueueUserWorkItem$MH,"QueueUserWorkItem");
    }
    public static int QueueUserWorkItem ( Addressable Function,  Addressable Context,  int Flags) {
        var mh$ = QueueUserWorkItem$MH();
        try {
            return (int)mh$.invokeExact(Function, Context, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterWaitEx$MH() {
        return RuntimeHelper.requireNonNull(constants$211.UnregisterWaitEx$MH,"UnregisterWaitEx");
    }
    public static int UnregisterWaitEx ( Addressable WaitHandle,  Addressable CompletionEvent) {
        var mh$ = UnregisterWaitEx$MH();
        try {
            return (int)mh$.invokeExact(WaitHandle, CompletionEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateTimerQueue$MH() {
        return RuntimeHelper.requireNonNull(constants$211.CreateTimerQueue$MH,"CreateTimerQueue");
    }
    public static MemoryAddress CreateTimerQueue () {
        var mh$ = CreateTimerQueue$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateTimerQueueTimer$MH() {
        return RuntimeHelper.requireNonNull(constants$211.CreateTimerQueueTimer$MH,"CreateTimerQueueTimer");
    }
    public static int CreateTimerQueueTimer ( Addressable phNewTimer,  Addressable TimerQueue,  Addressable Callback,  Addressable Parameter,  int DueTime,  int Period,  int Flags) {
        var mh$ = CreateTimerQueueTimer$MH();
        try {
            return (int)mh$.invokeExact(phNewTimer, TimerQueue, Callback, Parameter, DueTime, Period, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChangeTimerQueueTimer$MH() {
        return RuntimeHelper.requireNonNull(constants$211.ChangeTimerQueueTimer$MH,"ChangeTimerQueueTimer");
    }
    public static int ChangeTimerQueueTimer ( Addressable TimerQueue,  Addressable Timer,  int DueTime,  int Period) {
        var mh$ = ChangeTimerQueueTimer$MH();
        try {
            return (int)mh$.invokeExact(TimerQueue, Timer, DueTime, Period);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteTimerQueueTimer$MH() {
        return RuntimeHelper.requireNonNull(constants$212.DeleteTimerQueueTimer$MH,"DeleteTimerQueueTimer");
    }
    public static int DeleteTimerQueueTimer ( Addressable TimerQueue,  Addressable Timer,  Addressable CompletionEvent) {
        var mh$ = DeleteTimerQueueTimer$MH();
        try {
            return (int)mh$.invokeExact(TimerQueue, Timer, CompletionEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteTimerQueueEx$MH() {
        return RuntimeHelper.requireNonNull(constants$212.DeleteTimerQueueEx$MH,"DeleteTimerQueueEx");
    }
    public static int DeleteTimerQueueEx ( Addressable TimerQueue,  Addressable CompletionEvent) {
        var mh$ = DeleteTimerQueueEx$MH();
        try {
            return (int)mh$.invokeExact(TimerQueue, CompletionEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateThreadpool$MH() {
        return RuntimeHelper.requireNonNull(constants$212.CreateThreadpool$MH,"CreateThreadpool");
    }
    public static MemoryAddress CreateThreadpool ( Addressable reserved) {
        var mh$ = CreateThreadpool$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(reserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadpoolThreadMaximum$MH() {
        return RuntimeHelper.requireNonNull(constants$212.SetThreadpoolThreadMaximum$MH,"SetThreadpoolThreadMaximum");
    }
    public static void SetThreadpoolThreadMaximum ( Addressable ptpp,  int cthrdMost) {
        var mh$ = SetThreadpoolThreadMaximum$MH();
        try {
            mh$.invokeExact(ptpp, cthrdMost);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadpoolThreadMinimum$MH() {
        return RuntimeHelper.requireNonNull(constants$213.SetThreadpoolThreadMinimum$MH,"SetThreadpoolThreadMinimum");
    }
    public static int SetThreadpoolThreadMinimum ( Addressable ptpp,  int cthrdMic) {
        var mh$ = SetThreadpoolThreadMinimum$MH();
        try {
            return (int)mh$.invokeExact(ptpp, cthrdMic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadpoolStackInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$213.SetThreadpoolStackInformation$MH,"SetThreadpoolStackInformation");
    }
    public static int SetThreadpoolStackInformation ( Addressable ptpp,  Addressable ptpsi) {
        var mh$ = SetThreadpoolStackInformation$MH();
        try {
            return (int)mh$.invokeExact(ptpp, ptpsi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryThreadpoolStackInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$213.QueryThreadpoolStackInformation$MH,"QueryThreadpoolStackInformation");
    }
    public static int QueryThreadpoolStackInformation ( Addressable ptpp,  Addressable ptpsi) {
        var mh$ = QueryThreadpoolStackInformation$MH();
        try {
            return (int)mh$.invokeExact(ptpp, ptpsi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseThreadpool$MH() {
        return RuntimeHelper.requireNonNull(constants$213.CloseThreadpool$MH,"CloseThreadpool");
    }
    public static void CloseThreadpool ( Addressable ptpp) {
        var mh$ = CloseThreadpool$MH();
        try {
            mh$.invokeExact(ptpp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateThreadpoolCleanupGroup$MH() {
        return RuntimeHelper.requireNonNull(constants$213.CreateThreadpoolCleanupGroup$MH,"CreateThreadpoolCleanupGroup");
    }
    public static MemoryAddress CreateThreadpoolCleanupGroup () {
        var mh$ = CreateThreadpoolCleanupGroup$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseThreadpoolCleanupGroupMembers$MH() {
        return RuntimeHelper.requireNonNull(constants$213.CloseThreadpoolCleanupGroupMembers$MH,"CloseThreadpoolCleanupGroupMembers");
    }
    public static void CloseThreadpoolCleanupGroupMembers ( Addressable ptpcg,  int fCancelPendingCallbacks,  Addressable pvCleanupContext) {
        var mh$ = CloseThreadpoolCleanupGroupMembers$MH();
        try {
            mh$.invokeExact(ptpcg, fCancelPendingCallbacks, pvCleanupContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseThreadpoolCleanupGroup$MH() {
        return RuntimeHelper.requireNonNull(constants$214.CloseThreadpoolCleanupGroup$MH,"CloseThreadpoolCleanupGroup");
    }
    public static void CloseThreadpoolCleanupGroup ( Addressable ptpcg) {
        var mh$ = CloseThreadpoolCleanupGroup$MH();
        try {
            mh$.invokeExact(ptpcg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetEventWhenCallbackReturns$MH() {
        return RuntimeHelper.requireNonNull(constants$214.SetEventWhenCallbackReturns$MH,"SetEventWhenCallbackReturns");
    }
    public static void SetEventWhenCallbackReturns ( Addressable pci,  Addressable evt) {
        var mh$ = SetEventWhenCallbackReturns$MH();
        try {
            mh$.invokeExact(pci, evt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReleaseSemaphoreWhenCallbackReturns$MH() {
        return RuntimeHelper.requireNonNull(constants$214.ReleaseSemaphoreWhenCallbackReturns$MH,"ReleaseSemaphoreWhenCallbackReturns");
    }
    public static void ReleaseSemaphoreWhenCallbackReturns ( Addressable pci,  Addressable sem,  int crel) {
        var mh$ = ReleaseSemaphoreWhenCallbackReturns$MH();
        try {
            mh$.invokeExact(pci, sem, crel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReleaseMutexWhenCallbackReturns$MH() {
        return RuntimeHelper.requireNonNull(constants$214.ReleaseMutexWhenCallbackReturns$MH,"ReleaseMutexWhenCallbackReturns");
    }
    public static void ReleaseMutexWhenCallbackReturns ( Addressable pci,  Addressable mut) {
        var mh$ = ReleaseMutexWhenCallbackReturns$MH();
        try {
            mh$.invokeExact(pci, mut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LeaveCriticalSectionWhenCallbackReturns$MH() {
        return RuntimeHelper.requireNonNull(constants$214.LeaveCriticalSectionWhenCallbackReturns$MH,"LeaveCriticalSectionWhenCallbackReturns");
    }
    public static void LeaveCriticalSectionWhenCallbackReturns ( Addressable pci,  Addressable pcs) {
        var mh$ = LeaveCriticalSectionWhenCallbackReturns$MH();
        try {
            mh$.invokeExact(pci, pcs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeLibraryWhenCallbackReturns$MH() {
        return RuntimeHelper.requireNonNull(constants$214.FreeLibraryWhenCallbackReturns$MH,"FreeLibraryWhenCallbackReturns");
    }
    public static void FreeLibraryWhenCallbackReturns ( Addressable pci,  Addressable mod) {
        var mh$ = FreeLibraryWhenCallbackReturns$MH();
        try {
            mh$.invokeExact(pci, mod);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CallbackMayRunLong$MH() {
        return RuntimeHelper.requireNonNull(constants$215.CallbackMayRunLong$MH,"CallbackMayRunLong");
    }
    public static int CallbackMayRunLong ( Addressable pci) {
        var mh$ = CallbackMayRunLong$MH();
        try {
            return (int)mh$.invokeExact(pci);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DisassociateCurrentThreadFromCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$215.DisassociateCurrentThreadFromCallback$MH,"DisassociateCurrentThreadFromCallback");
    }
    public static void DisassociateCurrentThreadFromCallback ( Addressable pci) {
        var mh$ = DisassociateCurrentThreadFromCallback$MH();
        try {
            mh$.invokeExact(pci);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TrySubmitThreadpoolCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$215.TrySubmitThreadpoolCallback$MH,"TrySubmitThreadpoolCallback");
    }
    public static int TrySubmitThreadpoolCallback ( Addressable pfns,  Addressable pv,  Addressable pcbe) {
        var mh$ = TrySubmitThreadpoolCallback$MH();
        try {
            return (int)mh$.invokeExact(pfns, pv, pcbe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateThreadpoolWork$MH() {
        return RuntimeHelper.requireNonNull(constants$215.CreateThreadpoolWork$MH,"CreateThreadpoolWork");
    }
    public static MemoryAddress CreateThreadpoolWork ( Addressable pfnwk,  Addressable pv,  Addressable pcbe) {
        var mh$ = CreateThreadpoolWork$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pfnwk, pv, pcbe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SubmitThreadpoolWork$MH() {
        return RuntimeHelper.requireNonNull(constants$215.SubmitThreadpoolWork$MH,"SubmitThreadpoolWork");
    }
    public static void SubmitThreadpoolWork ( Addressable pwk) {
        var mh$ = SubmitThreadpoolWork$MH();
        try {
            mh$.invokeExact(pwk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitForThreadpoolWorkCallbacks$MH() {
        return RuntimeHelper.requireNonNull(constants$215.WaitForThreadpoolWorkCallbacks$MH,"WaitForThreadpoolWorkCallbacks");
    }
    public static void WaitForThreadpoolWorkCallbacks ( Addressable pwk,  int fCancelPendingCallbacks) {
        var mh$ = WaitForThreadpoolWorkCallbacks$MH();
        try {
            mh$.invokeExact(pwk, fCancelPendingCallbacks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseThreadpoolWork$MH() {
        return RuntimeHelper.requireNonNull(constants$216.CloseThreadpoolWork$MH,"CloseThreadpoolWork");
    }
    public static void CloseThreadpoolWork ( Addressable pwk) {
        var mh$ = CloseThreadpoolWork$MH();
        try {
            mh$.invokeExact(pwk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateThreadpoolTimer$MH() {
        return RuntimeHelper.requireNonNull(constants$216.CreateThreadpoolTimer$MH,"CreateThreadpoolTimer");
    }
    public static MemoryAddress CreateThreadpoolTimer ( Addressable pfnti,  Addressable pv,  Addressable pcbe) {
        var mh$ = CreateThreadpoolTimer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pfnti, pv, pcbe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadpoolTimer$MH() {
        return RuntimeHelper.requireNonNull(constants$216.SetThreadpoolTimer$MH,"SetThreadpoolTimer");
    }
    public static void SetThreadpoolTimer ( Addressable pti,  Addressable pftDueTime,  int msPeriod,  int msWindowLength) {
        var mh$ = SetThreadpoolTimer$MH();
        try {
            mh$.invokeExact(pti, pftDueTime, msPeriod, msWindowLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsThreadpoolTimerSet$MH() {
        return RuntimeHelper.requireNonNull(constants$216.IsThreadpoolTimerSet$MH,"IsThreadpoolTimerSet");
    }
    public static int IsThreadpoolTimerSet ( Addressable pti) {
        var mh$ = IsThreadpoolTimerSet$MH();
        try {
            return (int)mh$.invokeExact(pti);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitForThreadpoolTimerCallbacks$MH() {
        return RuntimeHelper.requireNonNull(constants$216.WaitForThreadpoolTimerCallbacks$MH,"WaitForThreadpoolTimerCallbacks");
    }
    public static void WaitForThreadpoolTimerCallbacks ( Addressable pti,  int fCancelPendingCallbacks) {
        var mh$ = WaitForThreadpoolTimerCallbacks$MH();
        try {
            mh$.invokeExact(pti, fCancelPendingCallbacks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseThreadpoolTimer$MH() {
        return RuntimeHelper.requireNonNull(constants$216.CloseThreadpoolTimer$MH,"CloseThreadpoolTimer");
    }
    public static void CloseThreadpoolTimer ( Addressable pti) {
        var mh$ = CloseThreadpoolTimer$MH();
        try {
            mh$.invokeExact(pti);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateThreadpoolWait$MH() {
        return RuntimeHelper.requireNonNull(constants$217.CreateThreadpoolWait$MH,"CreateThreadpoolWait");
    }
    public static MemoryAddress CreateThreadpoolWait ( Addressable pfnwa,  Addressable pv,  Addressable pcbe) {
        var mh$ = CreateThreadpoolWait$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pfnwa, pv, pcbe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadpoolWait$MH() {
        return RuntimeHelper.requireNonNull(constants$217.SetThreadpoolWait$MH,"SetThreadpoolWait");
    }
    public static void SetThreadpoolWait ( Addressable pwa,  Addressable h,  Addressable pftTimeout) {
        var mh$ = SetThreadpoolWait$MH();
        try {
            mh$.invokeExact(pwa, h, pftTimeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitForThreadpoolWaitCallbacks$MH() {
        return RuntimeHelper.requireNonNull(constants$217.WaitForThreadpoolWaitCallbacks$MH,"WaitForThreadpoolWaitCallbacks");
    }
    public static void WaitForThreadpoolWaitCallbacks ( Addressable pwa,  int fCancelPendingCallbacks) {
        var mh$ = WaitForThreadpoolWaitCallbacks$MH();
        try {
            mh$.invokeExact(pwa, fCancelPendingCallbacks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseThreadpoolWait$MH() {
        return RuntimeHelper.requireNonNull(constants$217.CloseThreadpoolWait$MH,"CloseThreadpoolWait");
    }
    public static void CloseThreadpoolWait ( Addressable pwa) {
        var mh$ = CloseThreadpoolWait$MH();
        try {
            mh$.invokeExact(pwa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateThreadpoolIo$MH() {
        return RuntimeHelper.requireNonNull(constants$217.CreateThreadpoolIo$MH,"CreateThreadpoolIo");
    }
    public static MemoryAddress CreateThreadpoolIo ( Addressable fl,  Addressable pfnio,  Addressable pv,  Addressable pcbe) {
        var mh$ = CreateThreadpoolIo$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(fl, pfnio, pv, pcbe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StartThreadpoolIo$MH() {
        return RuntimeHelper.requireNonNull(constants$217.StartThreadpoolIo$MH,"StartThreadpoolIo");
    }
    public static void StartThreadpoolIo ( Addressable pio) {
        var mh$ = StartThreadpoolIo$MH();
        try {
            mh$.invokeExact(pio);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CancelThreadpoolIo$MH() {
        return RuntimeHelper.requireNonNull(constants$218.CancelThreadpoolIo$MH,"CancelThreadpoolIo");
    }
    public static void CancelThreadpoolIo ( Addressable pio) {
        var mh$ = CancelThreadpoolIo$MH();
        try {
            mh$.invokeExact(pio);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitForThreadpoolIoCallbacks$MH() {
        return RuntimeHelper.requireNonNull(constants$218.WaitForThreadpoolIoCallbacks$MH,"WaitForThreadpoolIoCallbacks");
    }
    public static void WaitForThreadpoolIoCallbacks ( Addressable pio,  int fCancelPendingCallbacks) {
        var mh$ = WaitForThreadpoolIoCallbacks$MH();
        try {
            mh$.invokeExact(pio, fCancelPendingCallbacks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseThreadpoolIo$MH() {
        return RuntimeHelper.requireNonNull(constants$218.CloseThreadpoolIo$MH,"CloseThreadpoolIo");
    }
    public static void CloseThreadpoolIo ( Addressable pio) {
        var mh$ = CloseThreadpoolIo$MH();
        try {
            mh$.invokeExact(pio);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadpoolTimerEx$MH() {
        return RuntimeHelper.requireNonNull(constants$218.SetThreadpoolTimerEx$MH,"SetThreadpoolTimerEx");
    }
    public static int SetThreadpoolTimerEx ( Addressable pti,  Addressable pftDueTime,  int msPeriod,  int msWindowLength) {
        var mh$ = SetThreadpoolTimerEx$MH();
        try {
            return (int)mh$.invokeExact(pti, pftDueTime, msPeriod, msWindowLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadpoolWaitEx$MH() {
        return RuntimeHelper.requireNonNull(constants$218.SetThreadpoolWaitEx$MH,"SetThreadpoolWaitEx");
    }
    public static int SetThreadpoolWaitEx ( Addressable pwa,  Addressable h,  Addressable pftTimeout,  Addressable Reserved) {
        var mh$ = SetThreadpoolWaitEx$MH();
        try {
            return (int)mh$.invokeExact(pwa, h, pftTimeout, Reserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsProcessInJob$MH() {
        return RuntimeHelper.requireNonNull(constants$218.IsProcessInJob$MH,"IsProcessInJob");
    }
    public static int IsProcessInJob ( Addressable ProcessHandle,  Addressable JobHandle,  Addressable Result) {
        var mh$ = IsProcessInJob$MH();
        try {
            return (int)mh$.invokeExact(ProcessHandle, JobHandle, Result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateJobObjectW$MH() {
        return RuntimeHelper.requireNonNull(constants$219.CreateJobObjectW$MH,"CreateJobObjectW");
    }
    public static MemoryAddress CreateJobObjectW ( Addressable lpJobAttributes,  Addressable lpName) {
        var mh$ = CreateJobObjectW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpJobAttributes, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeMemoryJobObject$MH() {
        return RuntimeHelper.requireNonNull(constants$219.FreeMemoryJobObject$MH,"FreeMemoryJobObject");
    }
    public static void FreeMemoryJobObject ( Addressable Buffer) {
        var mh$ = FreeMemoryJobObject$MH();
        try {
            mh$.invokeExact(Buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenJobObjectW$MH() {
        return RuntimeHelper.requireNonNull(constants$219.OpenJobObjectW$MH,"OpenJobObjectW");
    }
    public static MemoryAddress OpenJobObjectW ( int dwDesiredAccess,  int bInheritHandle,  Addressable lpName) {
        var mh$ = OpenJobObjectW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwDesiredAccess, bInheritHandle, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AssignProcessToJobObject$MH() {
        return RuntimeHelper.requireNonNull(constants$219.AssignProcessToJobObject$MH,"AssignProcessToJobObject");
    }
    public static int AssignProcessToJobObject ( Addressable hJob,  Addressable hProcess) {
        var mh$ = AssignProcessToJobObject$MH();
        try {
            return (int)mh$.invokeExact(hJob, hProcess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TerminateJobObject$MH() {
        return RuntimeHelper.requireNonNull(constants$219.TerminateJobObject$MH,"TerminateJobObject");
    }
    public static int TerminateJobObject ( Addressable hJob,  int uExitCode) {
        var mh$ = TerminateJobObject$MH();
        try {
            return (int)mh$.invokeExact(hJob, uExitCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetInformationJobObject$MH() {
        return RuntimeHelper.requireNonNull(constants$219.SetInformationJobObject$MH,"SetInformationJobObject");
    }
    public static int SetInformationJobObject ( Addressable hJob,  int JobObjectInformationClass,  Addressable lpJobObjectInformation,  int cbJobObjectInformationLength) {
        var mh$ = SetInformationJobObject$MH();
        try {
            return (int)mh$.invokeExact(hJob, JobObjectInformationClass, lpJobObjectInformation, cbJobObjectInformationLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetIoRateControlInformationJobObject$MH() {
        return RuntimeHelper.requireNonNull(constants$220.SetIoRateControlInformationJobObject$MH,"SetIoRateControlInformationJobObject");
    }
    public static int SetIoRateControlInformationJobObject ( Addressable hJob,  Addressable IoRateControlInfo) {
        var mh$ = SetIoRateControlInformationJobObject$MH();
        try {
            return (int)mh$.invokeExact(hJob, IoRateControlInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryInformationJobObject$MH() {
        return RuntimeHelper.requireNonNull(constants$220.QueryInformationJobObject$MH,"QueryInformationJobObject");
    }
    public static int QueryInformationJobObject ( Addressable hJob,  int JobObjectInformationClass,  Addressable lpJobObjectInformation,  int cbJobObjectInformationLength,  Addressable lpReturnLength) {
        var mh$ = QueryInformationJobObject$MH();
        try {
            return (int)mh$.invokeExact(hJob, JobObjectInformationClass, lpJobObjectInformation, cbJobObjectInformationLength, lpReturnLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryIoRateControlInformationJobObject$MH() {
        return RuntimeHelper.requireNonNull(constants$220.QueryIoRateControlInformationJobObject$MH,"QueryIoRateControlInformationJobObject");
    }
    public static int QueryIoRateControlInformationJobObject ( Addressable hJob,  Addressable VolumeName,  Addressable InfoBlocks,  Addressable InfoBlockCount) {
        var mh$ = QueryIoRateControlInformationJobObject$MH();
        try {
            return (int)mh$.invokeExact(hJob, VolumeName, InfoBlocks, InfoBlockCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Wow64DisableWow64FsRedirection$MH() {
        return RuntimeHelper.requireNonNull(constants$220.Wow64DisableWow64FsRedirection$MH,"Wow64DisableWow64FsRedirection");
    }
    public static int Wow64DisableWow64FsRedirection ( Addressable OldValue) {
        var mh$ = Wow64DisableWow64FsRedirection$MH();
        try {
            return (int)mh$.invokeExact(OldValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Wow64RevertWow64FsRedirection$MH() {
        return RuntimeHelper.requireNonNull(constants$220.Wow64RevertWow64FsRedirection$MH,"Wow64RevertWow64FsRedirection");
    }
    public static int Wow64RevertWow64FsRedirection ( Addressable OlValue) {
        var mh$ = Wow64RevertWow64FsRedirection$MH();
        try {
            return (int)mh$.invokeExact(OlValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsWow64Process$MH() {
        return RuntimeHelper.requireNonNull(constants$220.IsWow64Process$MH,"IsWow64Process");
    }
    public static int IsWow64Process ( Addressable hProcess,  Addressable Wow64Process) {
        var mh$ = IsWow64Process$MH();
        try {
            return (int)mh$.invokeExact(hProcess, Wow64Process);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemWow64DirectoryA$MH() {
        return RuntimeHelper.requireNonNull(constants$221.GetSystemWow64DirectoryA$MH,"GetSystemWow64DirectoryA");
    }
    public static int GetSystemWow64DirectoryA ( Addressable lpBuffer,  int uSize) {
        var mh$ = GetSystemWow64DirectoryA$MH();
        try {
            return (int)mh$.invokeExact(lpBuffer, uSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemWow64DirectoryW$MH() {
        return RuntimeHelper.requireNonNull(constants$221.GetSystemWow64DirectoryW$MH,"GetSystemWow64DirectoryW");
    }
    public static int GetSystemWow64DirectoryW ( Addressable lpBuffer,  int uSize) {
        var mh$ = GetSystemWow64DirectoryW$MH();
        try {
            return (int)mh$.invokeExact(lpBuffer, uSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Wow64SetThreadDefaultGuestMachine$MH() {
        return RuntimeHelper.requireNonNull(constants$221.Wow64SetThreadDefaultGuestMachine$MH,"Wow64SetThreadDefaultGuestMachine");
    }
    public static short Wow64SetThreadDefaultGuestMachine ( short Machine) {
        var mh$ = Wow64SetThreadDefaultGuestMachine$MH();
        try {
            return (short)mh$.invokeExact(Machine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsWow64Process2$MH() {
        return RuntimeHelper.requireNonNull(constants$221.IsWow64Process2$MH,"IsWow64Process2");
    }
    public static int IsWow64Process2 ( Addressable hProcess,  Addressable pProcessMachine,  Addressable pNativeMachine) {
        var mh$ = IsWow64Process2$MH();
        try {
            return (int)mh$.invokeExact(hProcess, pProcessMachine, pNativeMachine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemWow64Directory2A$MH() {
        return RuntimeHelper.requireNonNull(constants$221.GetSystemWow64Directory2A$MH,"GetSystemWow64Directory2A");
    }
    public static int GetSystemWow64Directory2A ( Addressable lpBuffer,  int uSize,  short ImageFileMachineType) {
        var mh$ = GetSystemWow64Directory2A$MH();
        try {
            return (int)mh$.invokeExact(lpBuffer, uSize, ImageFileMachineType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemWow64Directory2W$MH() {
        return RuntimeHelper.requireNonNull(constants$221.GetSystemWow64Directory2W$MH,"GetSystemWow64Directory2W");
    }
    public static int GetSystemWow64Directory2W ( Addressable lpBuffer,  int uSize,  short ImageFileMachineType) {
        var mh$ = GetSystemWow64Directory2W$MH();
        try {
            return (int)mh$.invokeExact(lpBuffer, uSize, ImageFileMachineType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsWow64GuestMachineSupported$MH() {
        return RuntimeHelper.requireNonNull(constants$222.IsWow64GuestMachineSupported$MH,"IsWow64GuestMachineSupported");
    }
    public static int IsWow64GuestMachineSupported ( short WowGuestMachine,  Addressable MachineIsSupported) {
        var mh$ = IsWow64GuestMachineSupported$MH();
        try {
            return (int)mh$.invokeExact(WowGuestMachine, MachineIsSupported);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Wow64GetThreadContext$MH() {
        return RuntimeHelper.requireNonNull(constants$222.Wow64GetThreadContext$MH,"Wow64GetThreadContext");
    }
    public static int Wow64GetThreadContext ( Addressable hThread,  Addressable lpContext) {
        var mh$ = Wow64GetThreadContext$MH();
        try {
            return (int)mh$.invokeExact(hThread, lpContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Wow64SetThreadContext$MH() {
        return RuntimeHelper.requireNonNull(constants$222.Wow64SetThreadContext$MH,"Wow64SetThreadContext");
    }
    public static int Wow64SetThreadContext ( Addressable hThread,  Addressable lpContext) {
        var mh$ = Wow64SetThreadContext$MH();
        try {
            return (int)mh$.invokeExact(hThread, lpContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Wow64SuspendThread$MH() {
        return RuntimeHelper.requireNonNull(constants$222.Wow64SuspendThread$MH,"Wow64SuspendThread");
    }
    public static int Wow64SuspendThread ( Addressable hThread) {
        var mh$ = Wow64SuspendThread$MH();
        try {
            return (int)mh$.invokeExact(hThread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PENUMUILANG = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle DisableThreadLibraryCalls$MH() {
        return RuntimeHelper.requireNonNull(constants$224.DisableThreadLibraryCalls$MH,"DisableThreadLibraryCalls");
    }
    public static int DisableThreadLibraryCalls ( Addressable hLibModule) {
        var mh$ = DisableThreadLibraryCalls$MH();
        try {
            return (int)mh$.invokeExact(hLibModule);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindResourceExW$MH() {
        return RuntimeHelper.requireNonNull(constants$224.FindResourceExW$MH,"FindResourceExW");
    }
    public static MemoryAddress FindResourceExW ( Addressable hModule,  Addressable lpType,  Addressable lpName,  short wLanguage) {
        var mh$ = FindResourceExW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hModule, lpType, lpName, wLanguage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindStringOrdinal$MH() {
        return RuntimeHelper.requireNonNull(constants$225.FindStringOrdinal$MH,"FindStringOrdinal");
    }
    public static int FindStringOrdinal ( int dwFindStringOrdinalFlags,  Addressable lpStringSource,  int cchSource,  Addressable lpStringValue,  int cchValue,  int bIgnoreCase) {
        var mh$ = FindStringOrdinal$MH();
        try {
            return (int)mh$.invokeExact(dwFindStringOrdinalFlags, lpStringSource, cchSource, lpStringValue, cchValue, bIgnoreCase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeLibrary$MH() {
        return RuntimeHelper.requireNonNull(constants$225.FreeLibrary$MH,"FreeLibrary");
    }
    public static int FreeLibrary ( Addressable hLibModule) {
        var mh$ = FreeLibrary$MH();
        try {
            return (int)mh$.invokeExact(hLibModule);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeLibraryAndExitThread$MH() {
        return RuntimeHelper.requireNonNull(constants$225.FreeLibraryAndExitThread$MH,"FreeLibraryAndExitThread");
    }
    public static void FreeLibraryAndExitThread ( Addressable hLibModule,  int dwExitCode) {
        var mh$ = FreeLibraryAndExitThread$MH();
        try {
            mh$.invokeExact(hLibModule, dwExitCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeResource$MH() {
        return RuntimeHelper.requireNonNull(constants$225.FreeResource$MH,"FreeResource");
    }
    public static int FreeResource ( Addressable hResData) {
        var mh$ = FreeResource$MH();
        try {
            return (int)mh$.invokeExact(hResData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetModuleFileNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$225.GetModuleFileNameA$MH,"GetModuleFileNameA");
    }
    public static int GetModuleFileNameA ( Addressable hModule,  Addressable lpFilename,  int nSize) {
        var mh$ = GetModuleFileNameA$MH();
        try {
            return (int)mh$.invokeExact(hModule, lpFilename, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetModuleFileNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$225.GetModuleFileNameW$MH,"GetModuleFileNameW");
    }
    public static int GetModuleFileNameW ( Addressable hModule,  Addressable lpFilename,  int nSize) {
        var mh$ = GetModuleFileNameW$MH();
        try {
            return (int)mh$.invokeExact(hModule, lpFilename, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetModuleHandleA$MH() {
        return RuntimeHelper.requireNonNull(constants$226.GetModuleHandleA$MH,"GetModuleHandleA");
    }
    public static MemoryAddress GetModuleHandleA ( Addressable lpModuleName) {
        var mh$ = GetModuleHandleA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpModuleName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetModuleHandleW$MH() {
        return RuntimeHelper.requireNonNull(constants$226.GetModuleHandleW$MH,"GetModuleHandleW");
    }
    public static MemoryAddress GetModuleHandleW ( Addressable lpModuleName) {
        var mh$ = GetModuleHandleW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpModuleName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetModuleHandleExA$MH() {
        return RuntimeHelper.requireNonNull(constants$227.GetModuleHandleExA$MH,"GetModuleHandleExA");
    }
    public static int GetModuleHandleExA ( int dwFlags,  Addressable lpModuleName,  Addressable phModule) {
        var mh$ = GetModuleHandleExA$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpModuleName, phModule);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetModuleHandleExW$MH() {
        return RuntimeHelper.requireNonNull(constants$227.GetModuleHandleExW$MH,"GetModuleHandleExW");
    }
    public static int GetModuleHandleExW ( int dwFlags,  Addressable lpModuleName,  Addressable phModule) {
        var mh$ = GetModuleHandleExW$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpModuleName, phModule);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$227.GetProcAddress$MH,"GetProcAddress");
    }
    public static MemoryAddress GetProcAddress ( Addressable hModule,  Addressable lpProcName) {
        var mh$ = GetProcAddress$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hModule, lpProcName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PREDIRECTION_FUNCTION_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCREDIRECTION_FUNCTION_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREDIRECTION_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCREDIRECTION_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle LoadLibraryExA$MH() {
        return RuntimeHelper.requireNonNull(constants$227.LoadLibraryExA$MH,"LoadLibraryExA");
    }
    public static MemoryAddress LoadLibraryExA ( Addressable lpLibFileName,  Addressable hFile,  int dwFlags) {
        var mh$ = LoadLibraryExA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpLibFileName, hFile, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadLibraryExW$MH() {
        return RuntimeHelper.requireNonNull(constants$227.LoadLibraryExW$MH,"LoadLibraryExW");
    }
    public static MemoryAddress LoadLibraryExW ( Addressable lpLibFileName,  Addressable hFile,  int dwFlags) {
        var mh$ = LoadLibraryExW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpLibFileName, hFile, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadResource$MH() {
        return RuntimeHelper.requireNonNull(constants$227.LoadResource$MH,"LoadResource");
    }
    public static MemoryAddress LoadResource ( Addressable hModule,  Addressable hResInfo) {
        var mh$ = LoadResource$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hModule, hResInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$228.LoadStringA$MH,"LoadStringA");
    }
    public static int LoadStringA ( Addressable hInstance,  int uID,  Addressable lpBuffer,  int cchBufferMax) {
        var mh$ = LoadStringA$MH();
        try {
            return (int)mh$.invokeExact(hInstance, uID, lpBuffer, cchBufferMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$228.LoadStringW$MH,"LoadStringW");
    }
    public static int LoadStringW ( Addressable hInstance,  int uID,  Addressable lpBuffer,  int cchBufferMax) {
        var mh$ = LoadStringW$MH();
        try {
            return (int)mh$.invokeExact(hInstance, uID, lpBuffer, cchBufferMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LockResource$MH() {
        return RuntimeHelper.requireNonNull(constants$228.LockResource$MH,"LockResource");
    }
    public static MemoryAddress LockResource ( Addressable hResData) {
        var mh$ = LockResource$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hResData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SizeofResource$MH() {
        return RuntimeHelper.requireNonNull(constants$228.SizeofResource$MH,"SizeofResource");
    }
    public static int SizeofResource ( Addressable hModule,  Addressable hResInfo) {
        var mh$ = SizeofResource$MH();
        try {
            return (int)mh$.invokeExact(hModule, hResInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress DLL_DIRECTORY_COOKIE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDLL_DIRECTORY_COOKIE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle AddDllDirectory$MH() {
        return RuntimeHelper.requireNonNull(constants$228.AddDllDirectory$MH,"AddDllDirectory");
    }
    public static MemoryAddress AddDllDirectory ( Addressable NewDirectory) {
        var mh$ = AddDllDirectory$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(NewDirectory);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveDllDirectory$MH() {
        return RuntimeHelper.requireNonNull(constants$228.RemoveDllDirectory$MH,"RemoveDllDirectory");
    }
    public static int RemoveDllDirectory ( Addressable Cookie) {
        var mh$ = RemoveDllDirectory$MH();
        try {
            return (int)mh$.invokeExact(Cookie);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDefaultDllDirectories$MH() {
        return RuntimeHelper.requireNonNull(constants$229.SetDefaultDllDirectories$MH,"SetDefaultDllDirectories");
    }
    public static int SetDefaultDllDirectories ( int DirectoryFlags) {
        var mh$ = SetDefaultDllDirectories$MH();
        try {
            return (int)mh$.invokeExact(DirectoryFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumResourceLanguagesExA$MH() {
        return RuntimeHelper.requireNonNull(constants$229.EnumResourceLanguagesExA$MH,"EnumResourceLanguagesExA");
    }
    public static int EnumResourceLanguagesExA ( Addressable hModule,  Addressable lpType,  Addressable lpName,  Addressable lpEnumFunc,  long lParam,  int dwFlags,  short LangId) {
        var mh$ = EnumResourceLanguagesExA$MH();
        try {
            return (int)mh$.invokeExact(hModule, lpType, lpName, lpEnumFunc, lParam, dwFlags, LangId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumResourceLanguagesExW$MH() {
        return RuntimeHelper.requireNonNull(constants$229.EnumResourceLanguagesExW$MH,"EnumResourceLanguagesExW");
    }
    public static int EnumResourceLanguagesExW ( Addressable hModule,  Addressable lpType,  Addressable lpName,  Addressable lpEnumFunc,  long lParam,  int dwFlags,  short LangId) {
        var mh$ = EnumResourceLanguagesExW$MH();
        try {
            return (int)mh$.invokeExact(hModule, lpType, lpName, lpEnumFunc, lParam, dwFlags, LangId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumResourceNamesExA$MH() {
        return RuntimeHelper.requireNonNull(constants$229.EnumResourceNamesExA$MH,"EnumResourceNamesExA");
    }
    public static int EnumResourceNamesExA ( Addressable hModule,  Addressable lpType,  Addressable lpEnumFunc,  long lParam,  int dwFlags,  short LangId) {
        var mh$ = EnumResourceNamesExA$MH();
        try {
            return (int)mh$.invokeExact(hModule, lpType, lpEnumFunc, lParam, dwFlags, LangId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumResourceNamesExW$MH() {
        return RuntimeHelper.requireNonNull(constants$229.EnumResourceNamesExW$MH,"EnumResourceNamesExW");
    }
    public static int EnumResourceNamesExW ( Addressable hModule,  Addressable lpType,  Addressable lpEnumFunc,  long lParam,  int dwFlags,  short LangId) {
        var mh$ = EnumResourceNamesExW$MH();
        try {
            return (int)mh$.invokeExact(hModule, lpType, lpEnumFunc, lParam, dwFlags, LangId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumResourceTypesExA$MH() {
        return RuntimeHelper.requireNonNull(constants$229.EnumResourceTypesExA$MH,"EnumResourceTypesExA");
    }
    public static int EnumResourceTypesExA ( Addressable hModule,  Addressable lpEnumFunc,  long lParam,  int dwFlags,  short LangId) {
        var mh$ = EnumResourceTypesExA$MH();
        try {
            return (int)mh$.invokeExact(hModule, lpEnumFunc, lParam, dwFlags, LangId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumResourceTypesExW$MH() {
        return RuntimeHelper.requireNonNull(constants$230.EnumResourceTypesExW$MH,"EnumResourceTypesExW");
    }
    public static int EnumResourceTypesExW ( Addressable hModule,  Addressable lpEnumFunc,  long lParam,  int dwFlags,  short LangId) {
        var mh$ = EnumResourceTypesExW$MH();
        try {
            return (int)mh$.invokeExact(hModule, lpEnumFunc, lParam, dwFlags, LangId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindResourceW$MH() {
        return RuntimeHelper.requireNonNull(constants$230.FindResourceW$MH,"FindResourceW");
    }
    public static MemoryAddress FindResourceW ( Addressable hModule,  Addressable lpName,  Addressable lpType) {
        var mh$ = FindResourceW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hModule, lpName, lpType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadLibraryA$MH() {
        return RuntimeHelper.requireNonNull(constants$230.LoadLibraryA$MH,"LoadLibraryA");
    }
    public static MemoryAddress LoadLibraryA ( Addressable lpLibFileName) {
        var mh$ = LoadLibraryA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpLibFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadLibraryW$MH() {
        return RuntimeHelper.requireNonNull(constants$230.LoadLibraryW$MH,"LoadLibraryW");
    }
    public static MemoryAddress LoadLibraryW ( Addressable lpLibFileName) {
        var mh$ = LoadLibraryW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpLibFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumResourceNamesW$MH() {
        return RuntimeHelper.requireNonNull(constants$230.EnumResourceNamesW$MH,"EnumResourceNamesW");
    }
    public static int EnumResourceNamesW ( Addressable hModule,  Addressable lpType,  Addressable lpEnumFunc,  long lParam) {
        var mh$ = EnumResourceNamesW$MH();
        try {
            return (int)mh$.invokeExact(hModule, lpType, lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AccessCheck$MH() {
        return RuntimeHelper.requireNonNull(constants$230.AccessCheck$MH,"AccessCheck");
    }
    public static int AccessCheck ( Addressable pSecurityDescriptor,  Addressable ClientToken,  int DesiredAccess,  Addressable GenericMapping,  Addressable PrivilegeSet,  Addressable PrivilegeSetLength,  Addressable GrantedAccess,  Addressable AccessStatus) {
        var mh$ = AccessCheck$MH();
        try {
            return (int)mh$.invokeExact(pSecurityDescriptor, ClientToken, DesiredAccess, GenericMapping, PrivilegeSet, PrivilegeSetLength, GrantedAccess, AccessStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AccessCheckAndAuditAlarmW$MH() {
        return RuntimeHelper.requireNonNull(constants$231.AccessCheckAndAuditAlarmW$MH,"AccessCheckAndAuditAlarmW");
    }
    public static int AccessCheckAndAuditAlarmW ( Addressable SubsystemName,  Addressable HandleId,  Addressable ObjectTypeName,  Addressable ObjectName,  Addressable SecurityDescriptor,  int DesiredAccess,  Addressable GenericMapping,  int ObjectCreation,  Addressable GrantedAccess,  Addressable AccessStatus,  Addressable pfGenerateOnClose) {
        var mh$ = AccessCheckAndAuditAlarmW$MH();
        try {
            return (int)mh$.invokeExact(SubsystemName, HandleId, ObjectTypeName, ObjectName, SecurityDescriptor, DesiredAccess, GenericMapping, ObjectCreation, GrantedAccess, AccessStatus, pfGenerateOnClose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AccessCheckByType$MH() {
        return RuntimeHelper.requireNonNull(constants$231.AccessCheckByType$MH,"AccessCheckByType");
    }
    public static int AccessCheckByType ( Addressable pSecurityDescriptor,  Addressable PrincipalSelfSid,  Addressable ClientToken,  int DesiredAccess,  Addressable ObjectTypeList,  int ObjectTypeListLength,  Addressable GenericMapping,  Addressable PrivilegeSet,  Addressable PrivilegeSetLength,  Addressable GrantedAccess,  Addressable AccessStatus) {
        var mh$ = AccessCheckByType$MH();
        try {
            return (int)mh$.invokeExact(pSecurityDescriptor, PrincipalSelfSid, ClientToken, DesiredAccess, ObjectTypeList, ObjectTypeListLength, GenericMapping, PrivilegeSet, PrivilegeSetLength, GrantedAccess, AccessStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AccessCheckByTypeResultList$MH() {
        return RuntimeHelper.requireNonNull(constants$231.AccessCheckByTypeResultList$MH,"AccessCheckByTypeResultList");
    }
    public static int AccessCheckByTypeResultList ( Addressable pSecurityDescriptor,  Addressable PrincipalSelfSid,  Addressable ClientToken,  int DesiredAccess,  Addressable ObjectTypeList,  int ObjectTypeListLength,  Addressable GenericMapping,  Addressable PrivilegeSet,  Addressable PrivilegeSetLength,  Addressable GrantedAccessList,  Addressable AccessStatusList) {
        var mh$ = AccessCheckByTypeResultList$MH();
        try {
            return (int)mh$.invokeExact(pSecurityDescriptor, PrincipalSelfSid, ClientToken, DesiredAccess, ObjectTypeList, ObjectTypeListLength, GenericMapping, PrivilegeSet, PrivilegeSetLength, GrantedAccessList, AccessStatusList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AccessCheckByTypeAndAuditAlarmW$MH() {
        return RuntimeHelper.requireNonNull(constants$231.AccessCheckByTypeAndAuditAlarmW$MH,"AccessCheckByTypeAndAuditAlarmW");
    }
    public static int AccessCheckByTypeAndAuditAlarmW ( Addressable SubsystemName,  Addressable HandleId,  Addressable ObjectTypeName,  Addressable ObjectName,  Addressable SecurityDescriptor,  Addressable PrincipalSelfSid,  int DesiredAccess,  int AuditType,  int Flags,  Addressable ObjectTypeList,  int ObjectTypeListLength,  Addressable GenericMapping,  int ObjectCreation,  Addressable GrantedAccess,  Addressable AccessStatus,  Addressable pfGenerateOnClose) {
        var mh$ = AccessCheckByTypeAndAuditAlarmW$MH();
        try {
            return (int)mh$.invokeExact(SubsystemName, HandleId, ObjectTypeName, ObjectName, SecurityDescriptor, PrincipalSelfSid, DesiredAccess, AuditType, Flags, ObjectTypeList, ObjectTypeListLength, GenericMapping, ObjectCreation, GrantedAccess, AccessStatus, pfGenerateOnClose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AccessCheckByTypeResultListAndAuditAlarmW$MH() {
        return RuntimeHelper.requireNonNull(constants$231.AccessCheckByTypeResultListAndAuditAlarmW$MH,"AccessCheckByTypeResultListAndAuditAlarmW");
    }
    public static int AccessCheckByTypeResultListAndAuditAlarmW ( Addressable SubsystemName,  Addressable HandleId,  Addressable ObjectTypeName,  Addressable ObjectName,  Addressable SecurityDescriptor,  Addressable PrincipalSelfSid,  int DesiredAccess,  int AuditType,  int Flags,  Addressable ObjectTypeList,  int ObjectTypeListLength,  Addressable GenericMapping,  int ObjectCreation,  Addressable GrantedAccessList,  Addressable AccessStatusList,  Addressable pfGenerateOnClose) {
        var mh$ = AccessCheckByTypeResultListAndAuditAlarmW$MH();
        try {
            return (int)mh$.invokeExact(SubsystemName, HandleId, ObjectTypeName, ObjectName, SecurityDescriptor, PrincipalSelfSid, DesiredAccess, AuditType, Flags, ObjectTypeList, ObjectTypeListLength, GenericMapping, ObjectCreation, GrantedAccessList, AccessStatusList, pfGenerateOnClose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AccessCheckByTypeResultListAndAuditAlarmByHandleW$MH() {
        return RuntimeHelper.requireNonNull(constants$231.AccessCheckByTypeResultListAndAuditAlarmByHandleW$MH,"AccessCheckByTypeResultListAndAuditAlarmByHandleW");
    }
    public static int AccessCheckByTypeResultListAndAuditAlarmByHandleW ( Addressable SubsystemName,  Addressable HandleId,  Addressable ClientToken,  Addressable ObjectTypeName,  Addressable ObjectName,  Addressable SecurityDescriptor,  Addressable PrincipalSelfSid,  int DesiredAccess,  int AuditType,  int Flags,  Addressable ObjectTypeList,  int ObjectTypeListLength,  Addressable GenericMapping,  int ObjectCreation,  Addressable GrantedAccessList,  Addressable AccessStatusList,  Addressable pfGenerateOnClose) {
        var mh$ = AccessCheckByTypeResultListAndAuditAlarmByHandleW$MH();
        try {
            return (int)mh$.invokeExact(SubsystemName, HandleId, ClientToken, ObjectTypeName, ObjectName, SecurityDescriptor, PrincipalSelfSid, DesiredAccess, AuditType, Flags, ObjectTypeList, ObjectTypeListLength, GenericMapping, ObjectCreation, GrantedAccessList, AccessStatusList, pfGenerateOnClose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddAccessAllowedAce$MH() {
        return RuntimeHelper.requireNonNull(constants$232.AddAccessAllowedAce$MH,"AddAccessAllowedAce");
    }
    public static int AddAccessAllowedAce ( Addressable pAcl,  int dwAceRevision,  int AccessMask,  Addressable pSid) {
        var mh$ = AddAccessAllowedAce$MH();
        try {
            return (int)mh$.invokeExact(pAcl, dwAceRevision, AccessMask, pSid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddAccessAllowedAceEx$MH() {
        return RuntimeHelper.requireNonNull(constants$232.AddAccessAllowedAceEx$MH,"AddAccessAllowedAceEx");
    }
    public static int AddAccessAllowedAceEx ( Addressable pAcl,  int dwAceRevision,  int AceFlags,  int AccessMask,  Addressable pSid) {
        var mh$ = AddAccessAllowedAceEx$MH();
        try {
            return (int)mh$.invokeExact(pAcl, dwAceRevision, AceFlags, AccessMask, pSid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddAccessAllowedObjectAce$MH() {
        return RuntimeHelper.requireNonNull(constants$232.AddAccessAllowedObjectAce$MH,"AddAccessAllowedObjectAce");
    }
    public static int AddAccessAllowedObjectAce ( Addressable pAcl,  int dwAceRevision,  int AceFlags,  int AccessMask,  Addressable ObjectTypeGuid,  Addressable InheritedObjectTypeGuid,  Addressable pSid) {
        var mh$ = AddAccessAllowedObjectAce$MH();
        try {
            return (int)mh$.invokeExact(pAcl, dwAceRevision, AceFlags, AccessMask, ObjectTypeGuid, InheritedObjectTypeGuid, pSid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddAccessDeniedAce$MH() {
        return RuntimeHelper.requireNonNull(constants$232.AddAccessDeniedAce$MH,"AddAccessDeniedAce");
    }
    public static int AddAccessDeniedAce ( Addressable pAcl,  int dwAceRevision,  int AccessMask,  Addressable pSid) {
        var mh$ = AddAccessDeniedAce$MH();
        try {
            return (int)mh$.invokeExact(pAcl, dwAceRevision, AccessMask, pSid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddAccessDeniedAceEx$MH() {
        return RuntimeHelper.requireNonNull(constants$232.AddAccessDeniedAceEx$MH,"AddAccessDeniedAceEx");
    }
    public static int AddAccessDeniedAceEx ( Addressable pAcl,  int dwAceRevision,  int AceFlags,  int AccessMask,  Addressable pSid) {
        var mh$ = AddAccessDeniedAceEx$MH();
        try {
            return (int)mh$.invokeExact(pAcl, dwAceRevision, AceFlags, AccessMask, pSid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddAccessDeniedObjectAce$MH() {
        return RuntimeHelper.requireNonNull(constants$232.AddAccessDeniedObjectAce$MH,"AddAccessDeniedObjectAce");
    }
    public static int AddAccessDeniedObjectAce ( Addressable pAcl,  int dwAceRevision,  int AceFlags,  int AccessMask,  Addressable ObjectTypeGuid,  Addressable InheritedObjectTypeGuid,  Addressable pSid) {
        var mh$ = AddAccessDeniedObjectAce$MH();
        try {
            return (int)mh$.invokeExact(pAcl, dwAceRevision, AceFlags, AccessMask, ObjectTypeGuid, InheritedObjectTypeGuid, pSid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddAce$MH() {
        return RuntimeHelper.requireNonNull(constants$233.AddAce$MH,"AddAce");
    }
    public static int AddAce ( Addressable pAcl,  int dwAceRevision,  int dwStartingAceIndex,  Addressable pAceList,  int nAceListLength) {
        var mh$ = AddAce$MH();
        try {
            return (int)mh$.invokeExact(pAcl, dwAceRevision, dwStartingAceIndex, pAceList, nAceListLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddAuditAccessAce$MH() {
        return RuntimeHelper.requireNonNull(constants$233.AddAuditAccessAce$MH,"AddAuditAccessAce");
    }
    public static int AddAuditAccessAce ( Addressable pAcl,  int dwAceRevision,  int dwAccessMask,  Addressable pSid,  int bAuditSuccess,  int bAuditFailure) {
        var mh$ = AddAuditAccessAce$MH();
        try {
            return (int)mh$.invokeExact(pAcl, dwAceRevision, dwAccessMask, pSid, bAuditSuccess, bAuditFailure);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddAuditAccessAceEx$MH() {
        return RuntimeHelper.requireNonNull(constants$233.AddAuditAccessAceEx$MH,"AddAuditAccessAceEx");
    }
    public static int AddAuditAccessAceEx ( Addressable pAcl,  int dwAceRevision,  int AceFlags,  int dwAccessMask,  Addressable pSid,  int bAuditSuccess,  int bAuditFailure) {
        var mh$ = AddAuditAccessAceEx$MH();
        try {
            return (int)mh$.invokeExact(pAcl, dwAceRevision, AceFlags, dwAccessMask, pSid, bAuditSuccess, bAuditFailure);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddAuditAccessObjectAce$MH() {
        return RuntimeHelper.requireNonNull(constants$233.AddAuditAccessObjectAce$MH,"AddAuditAccessObjectAce");
    }
    public static int AddAuditAccessObjectAce ( Addressable pAcl,  int dwAceRevision,  int AceFlags,  int AccessMask,  Addressable ObjectTypeGuid,  Addressable InheritedObjectTypeGuid,  Addressable pSid,  int bAuditSuccess,  int bAuditFailure) {
        var mh$ = AddAuditAccessObjectAce$MH();
        try {
            return (int)mh$.invokeExact(pAcl, dwAceRevision, AceFlags, AccessMask, ObjectTypeGuid, InheritedObjectTypeGuid, pSid, bAuditSuccess, bAuditFailure);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddMandatoryAce$MH() {
        return RuntimeHelper.requireNonNull(constants$233.AddMandatoryAce$MH,"AddMandatoryAce");
    }
    public static int AddMandatoryAce ( Addressable pAcl,  int dwAceRevision,  int AceFlags,  int MandatoryPolicy,  Addressable pLabelSid) {
        var mh$ = AddMandatoryAce$MH();
        try {
            return (int)mh$.invokeExact(pAcl, dwAceRevision, AceFlags, MandatoryPolicy, pLabelSid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddResourceAttributeAce$MH() {
        return RuntimeHelper.requireNonNull(constants$233.AddResourceAttributeAce$MH,"AddResourceAttributeAce");
    }
    public static int AddResourceAttributeAce ( Addressable pAcl,  int dwAceRevision,  int AceFlags,  int AccessMask,  Addressable pSid,  Addressable pAttributeInfo,  Addressable pReturnLength) {
        var mh$ = AddResourceAttributeAce$MH();
        try {
            return (int)mh$.invokeExact(pAcl, dwAceRevision, AceFlags, AccessMask, pSid, pAttributeInfo, pReturnLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddScopedPolicyIDAce$MH() {
        return RuntimeHelper.requireNonNull(constants$234.AddScopedPolicyIDAce$MH,"AddScopedPolicyIDAce");
    }
    public static int AddScopedPolicyIDAce ( Addressable pAcl,  int dwAceRevision,  int AceFlags,  int AccessMask,  Addressable pSid) {
        var mh$ = AddScopedPolicyIDAce$MH();
        try {
            return (int)mh$.invokeExact(pAcl, dwAceRevision, AceFlags, AccessMask, pSid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AdjustTokenGroups$MH() {
        return RuntimeHelper.requireNonNull(constants$234.AdjustTokenGroups$MH,"AdjustTokenGroups");
    }
    public static int AdjustTokenGroups ( Addressable TokenHandle,  int ResetToDefault,  Addressable NewState,  int BufferLength,  Addressable PreviousState,  Addressable ReturnLength) {
        var mh$ = AdjustTokenGroups$MH();
        try {
            return (int)mh$.invokeExact(TokenHandle, ResetToDefault, NewState, BufferLength, PreviousState, ReturnLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AdjustTokenPrivileges$MH() {
        return RuntimeHelper.requireNonNull(constants$234.AdjustTokenPrivileges$MH,"AdjustTokenPrivileges");
    }
    public static int AdjustTokenPrivileges ( Addressable TokenHandle,  int DisableAllPrivileges,  Addressable NewState,  int BufferLength,  Addressable PreviousState,  Addressable ReturnLength) {
        var mh$ = AdjustTokenPrivileges$MH();
        try {
            return (int)mh$.invokeExact(TokenHandle, DisableAllPrivileges, NewState, BufferLength, PreviousState, ReturnLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AllocateAndInitializeSid$MH() {
        return RuntimeHelper.requireNonNull(constants$234.AllocateAndInitializeSid$MH,"AllocateAndInitializeSid");
    }
    public static int AllocateAndInitializeSid ( Addressable pIdentifierAuthority,  byte nSubAuthorityCount,  int nSubAuthority0,  int nSubAuthority1,  int nSubAuthority2,  int nSubAuthority3,  int nSubAuthority4,  int nSubAuthority5,  int nSubAuthority6,  int nSubAuthority7,  Addressable pSid) {
        var mh$ = AllocateAndInitializeSid$MH();
        try {
            return (int)mh$.invokeExact(pIdentifierAuthority, nSubAuthorityCount, nSubAuthority0, nSubAuthority1, nSubAuthority2, nSubAuthority3, nSubAuthority4, nSubAuthority5, nSubAuthority6, nSubAuthority7, pSid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AllocateLocallyUniqueId$MH() {
        return RuntimeHelper.requireNonNull(constants$234.AllocateLocallyUniqueId$MH,"AllocateLocallyUniqueId");
    }
    public static int AllocateLocallyUniqueId ( Addressable Luid) {
        var mh$ = AllocateLocallyUniqueId$MH();
        try {
            return (int)mh$.invokeExact(Luid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AreAllAccessesGranted$MH() {
        return RuntimeHelper.requireNonNull(constants$234.AreAllAccessesGranted$MH,"AreAllAccessesGranted");
    }
    public static int AreAllAccessesGranted ( int GrantedAccess,  int DesiredAccess) {
        var mh$ = AreAllAccessesGranted$MH();
        try {
            return (int)mh$.invokeExact(GrantedAccess, DesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AreAnyAccessesGranted$MH() {
        return RuntimeHelper.requireNonNull(constants$235.AreAnyAccessesGranted$MH,"AreAnyAccessesGranted");
    }
    public static int AreAnyAccessesGranted ( int GrantedAccess,  int DesiredAccess) {
        var mh$ = AreAnyAccessesGranted$MH();
        try {
            return (int)mh$.invokeExact(GrantedAccess, DesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckTokenMembership$MH() {
        return RuntimeHelper.requireNonNull(constants$235.CheckTokenMembership$MH,"CheckTokenMembership");
    }
    public static int CheckTokenMembership ( Addressable TokenHandle,  Addressable SidToCheck,  Addressable IsMember) {
        var mh$ = CheckTokenMembership$MH();
        try {
            return (int)mh$.invokeExact(TokenHandle, SidToCheck, IsMember);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckTokenCapability$MH() {
        return RuntimeHelper.requireNonNull(constants$235.CheckTokenCapability$MH,"CheckTokenCapability");
    }
    public static int CheckTokenCapability ( Addressable TokenHandle,  Addressable CapabilitySidToCheck,  Addressable HasCapability) {
        var mh$ = CheckTokenCapability$MH();
        try {
            return (int)mh$.invokeExact(TokenHandle, CapabilitySidToCheck, HasCapability);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAppContainerAce$MH() {
        return RuntimeHelper.requireNonNull(constants$235.GetAppContainerAce$MH,"GetAppContainerAce");
    }
    public static int GetAppContainerAce ( Addressable Acl,  int StartingAceIndex,  Addressable AppContainerAce,  Addressable AppContainerAceIndex) {
        var mh$ = GetAppContainerAce$MH();
        try {
            return (int)mh$.invokeExact(Acl, StartingAceIndex, AppContainerAce, AppContainerAceIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckTokenMembershipEx$MH() {
        return RuntimeHelper.requireNonNull(constants$235.CheckTokenMembershipEx$MH,"CheckTokenMembershipEx");
    }
    public static int CheckTokenMembershipEx ( Addressable TokenHandle,  Addressable SidToCheck,  int Flags,  Addressable IsMember) {
        var mh$ = CheckTokenMembershipEx$MH();
        try {
            return (int)mh$.invokeExact(TokenHandle, SidToCheck, Flags, IsMember);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ConvertToAutoInheritPrivateObjectSecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$235.ConvertToAutoInheritPrivateObjectSecurity$MH,"ConvertToAutoInheritPrivateObjectSecurity");
    }
    public static int ConvertToAutoInheritPrivateObjectSecurity ( Addressable ParentDescriptor,  Addressable CurrentSecurityDescriptor,  Addressable NewSecurityDescriptor,  Addressable ObjectType,  byte IsDirectoryObject,  Addressable GenericMapping) {
        var mh$ = ConvertToAutoInheritPrivateObjectSecurity$MH();
        try {
            return (int)mh$.invokeExact(ParentDescriptor, CurrentSecurityDescriptor, NewSecurityDescriptor, ObjectType, IsDirectoryObject, GenericMapping);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopySid$MH() {
        return RuntimeHelper.requireNonNull(constants$236.CopySid$MH,"CopySid");
    }
    public static int CopySid ( int nDestinationSidLength,  Addressable pDestinationSid,  Addressable pSourceSid) {
        var mh$ = CopySid$MH();
        try {
            return (int)mh$.invokeExact(nDestinationSidLength, pDestinationSid, pSourceSid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePrivateObjectSecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$236.CreatePrivateObjectSecurity$MH,"CreatePrivateObjectSecurity");
    }
    public static int CreatePrivateObjectSecurity ( Addressable ParentDescriptor,  Addressable CreatorDescriptor,  Addressable NewDescriptor,  int IsDirectoryObject,  Addressable Token,  Addressable GenericMapping) {
        var mh$ = CreatePrivateObjectSecurity$MH();
        try {
            return (int)mh$.invokeExact(ParentDescriptor, CreatorDescriptor, NewDescriptor, IsDirectoryObject, Token, GenericMapping);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePrivateObjectSecurityEx$MH() {
        return RuntimeHelper.requireNonNull(constants$236.CreatePrivateObjectSecurityEx$MH,"CreatePrivateObjectSecurityEx");
    }
    public static int CreatePrivateObjectSecurityEx ( Addressable ParentDescriptor,  Addressable CreatorDescriptor,  Addressable NewDescriptor,  Addressable ObjectType,  int IsContainerObject,  int AutoInheritFlags,  Addressable Token,  Addressable GenericMapping) {
        var mh$ = CreatePrivateObjectSecurityEx$MH();
        try {
            return (int)mh$.invokeExact(ParentDescriptor, CreatorDescriptor, NewDescriptor, ObjectType, IsContainerObject, AutoInheritFlags, Token, GenericMapping);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePrivateObjectSecurityWithMultipleInheritance$MH() {
        return RuntimeHelper.requireNonNull(constants$236.CreatePrivateObjectSecurityWithMultipleInheritance$MH,"CreatePrivateObjectSecurityWithMultipleInheritance");
    }
    public static int CreatePrivateObjectSecurityWithMultipleInheritance ( Addressable ParentDescriptor,  Addressable CreatorDescriptor,  Addressable NewDescriptor,  Addressable ObjectTypes,  int GuidCount,  int IsContainerObject,  int AutoInheritFlags,  Addressable Token,  Addressable GenericMapping) {
        var mh$ = CreatePrivateObjectSecurityWithMultipleInheritance$MH();
        try {
            return (int)mh$.invokeExact(ParentDescriptor, CreatorDescriptor, NewDescriptor, ObjectTypes, GuidCount, IsContainerObject, AutoInheritFlags, Token, GenericMapping);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateRestrictedToken$MH() {
        return RuntimeHelper.requireNonNull(constants$236.CreateRestrictedToken$MH,"CreateRestrictedToken");
    }
    public static int CreateRestrictedToken ( Addressable ExistingTokenHandle,  int Flags,  int DisableSidCount,  Addressable SidsToDisable,  int DeletePrivilegeCount,  Addressable PrivilegesToDelete,  int RestrictedSidCount,  Addressable SidsToRestrict,  Addressable NewTokenHandle) {
        var mh$ = CreateRestrictedToken$MH();
        try {
            return (int)mh$.invokeExact(ExistingTokenHandle, Flags, DisableSidCount, SidsToDisable, DeletePrivilegeCount, PrivilegesToDelete, RestrictedSidCount, SidsToRestrict, NewTokenHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateWellKnownSid$MH() {
        return RuntimeHelper.requireNonNull(constants$236.CreateWellKnownSid$MH,"CreateWellKnownSid");
    }
    public static int CreateWellKnownSid ( int WellKnownSidType,  Addressable DomainSid,  Addressable pSid,  Addressable cbSid) {
        var mh$ = CreateWellKnownSid$MH();
        try {
            return (int)mh$.invokeExact(WellKnownSidType, DomainSid, pSid, cbSid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EqualDomainSid$MH() {
        return RuntimeHelper.requireNonNull(constants$237.EqualDomainSid$MH,"EqualDomainSid");
    }
    public static int EqualDomainSid ( Addressable pSid1,  Addressable pSid2,  Addressable pfEqual) {
        var mh$ = EqualDomainSid$MH();
        try {
            return (int)mh$.invokeExact(pSid1, pSid2, pfEqual);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteAce$MH() {
        return RuntimeHelper.requireNonNull(constants$237.DeleteAce$MH,"DeleteAce");
    }
    public static int DeleteAce ( Addressable pAcl,  int dwAceIndex) {
        var mh$ = DeleteAce$MH();
        try {
            return (int)mh$.invokeExact(pAcl, dwAceIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DestroyPrivateObjectSecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$237.DestroyPrivateObjectSecurity$MH,"DestroyPrivateObjectSecurity");
    }
    public static int DestroyPrivateObjectSecurity ( Addressable ObjectDescriptor) {
        var mh$ = DestroyPrivateObjectSecurity$MH();
        try {
            return (int)mh$.invokeExact(ObjectDescriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DuplicateToken$MH() {
        return RuntimeHelper.requireNonNull(constants$237.DuplicateToken$MH,"DuplicateToken");
    }
    public static int DuplicateToken ( Addressable ExistingTokenHandle,  int ImpersonationLevel,  Addressable DuplicateTokenHandle) {
        var mh$ = DuplicateToken$MH();
        try {
            return (int)mh$.invokeExact(ExistingTokenHandle, ImpersonationLevel, DuplicateTokenHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DuplicateTokenEx$MH() {
        return RuntimeHelper.requireNonNull(constants$237.DuplicateTokenEx$MH,"DuplicateTokenEx");
    }
    public static int DuplicateTokenEx ( Addressable hExistingToken,  int dwDesiredAccess,  Addressable lpTokenAttributes,  int ImpersonationLevel,  int TokenType,  Addressable phNewToken) {
        var mh$ = DuplicateTokenEx$MH();
        try {
            return (int)mh$.invokeExact(hExistingToken, dwDesiredAccess, lpTokenAttributes, ImpersonationLevel, TokenType, phNewToken);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EqualPrefixSid$MH() {
        return RuntimeHelper.requireNonNull(constants$237.EqualPrefixSid$MH,"EqualPrefixSid");
    }
    public static int EqualPrefixSid ( Addressable pSid1,  Addressable pSid2) {
        var mh$ = EqualPrefixSid$MH();
        try {
            return (int)mh$.invokeExact(pSid1, pSid2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EqualSid$MH() {
        return RuntimeHelper.requireNonNull(constants$238.EqualSid$MH,"EqualSid");
    }
    public static int EqualSid ( Addressable pSid1,  Addressable pSid2) {
        var mh$ = EqualSid$MH();
        try {
            return (int)mh$.invokeExact(pSid1, pSid2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstFreeAce$MH() {
        return RuntimeHelper.requireNonNull(constants$238.FindFirstFreeAce$MH,"FindFirstFreeAce");
    }
    public static int FindFirstFreeAce ( Addressable pAcl,  Addressable pAce) {
        var mh$ = FindFirstFreeAce$MH();
        try {
            return (int)mh$.invokeExact(pAcl, pAce);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeSid$MH() {
        return RuntimeHelper.requireNonNull(constants$238.FreeSid$MH,"FreeSid");
    }
    public static MemoryAddress FreeSid ( Addressable pSid) {
        var mh$ = FreeSid$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pSid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAce$MH() {
        return RuntimeHelper.requireNonNull(constants$238.GetAce$MH,"GetAce");
    }
    public static int GetAce ( Addressable pAcl,  int dwAceIndex,  Addressable pAce) {
        var mh$ = GetAce$MH();
        try {
            return (int)mh$.invokeExact(pAcl, dwAceIndex, pAce);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAclInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$238.GetAclInformation$MH,"GetAclInformation");
    }
    public static int GetAclInformation ( Addressable pAcl,  Addressable pAclInformation,  int nAclInformationLength,  int dwAclInformationClass) {
        var mh$ = GetAclInformation$MH();
        try {
            return (int)mh$.invokeExact(pAcl, pAclInformation, nAclInformationLength, dwAclInformationClass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileSecurityW$MH() {
        return RuntimeHelper.requireNonNull(constants$238.GetFileSecurityW$MH,"GetFileSecurityW");
    }
    public static int GetFileSecurityW ( Addressable lpFileName,  int RequestedInformation,  Addressable pSecurityDescriptor,  int nLength,  Addressable lpnLengthNeeded) {
        var mh$ = GetFileSecurityW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, RequestedInformation, pSecurityDescriptor, nLength, lpnLengthNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKernelObjectSecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$239.GetKernelObjectSecurity$MH,"GetKernelObjectSecurity");
    }
    public static int GetKernelObjectSecurity ( Addressable Handle,  int RequestedInformation,  Addressable pSecurityDescriptor,  int nLength,  Addressable lpnLengthNeeded) {
        var mh$ = GetKernelObjectSecurity$MH();
        try {
            return (int)mh$.invokeExact(Handle, RequestedInformation, pSecurityDescriptor, nLength, lpnLengthNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLengthSid$MH() {
        return RuntimeHelper.requireNonNull(constants$239.GetLengthSid$MH,"GetLengthSid");
    }
    public static int GetLengthSid ( Addressable pSid) {
        var mh$ = GetLengthSid$MH();
        try {
            return (int)mh$.invokeExact(pSid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPrivateObjectSecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$239.GetPrivateObjectSecurity$MH,"GetPrivateObjectSecurity");
    }
    public static int GetPrivateObjectSecurity ( Addressable ObjectDescriptor,  int SecurityInformation,  Addressable ResultantDescriptor,  int DescriptorLength,  Addressable ReturnLength) {
        var mh$ = GetPrivateObjectSecurity$MH();
        try {
            return (int)mh$.invokeExact(ObjectDescriptor, SecurityInformation, ResultantDescriptor, DescriptorLength, ReturnLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSecurityDescriptorControl$MH() {
        return RuntimeHelper.requireNonNull(constants$239.GetSecurityDescriptorControl$MH,"GetSecurityDescriptorControl");
    }
    public static int GetSecurityDescriptorControl ( Addressable pSecurityDescriptor,  Addressable pControl,  Addressable lpdwRevision) {
        var mh$ = GetSecurityDescriptorControl$MH();
        try {
            return (int)mh$.invokeExact(pSecurityDescriptor, pControl, lpdwRevision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSecurityDescriptorDacl$MH() {
        return RuntimeHelper.requireNonNull(constants$239.GetSecurityDescriptorDacl$MH,"GetSecurityDescriptorDacl");
    }
    public static int GetSecurityDescriptorDacl ( Addressable pSecurityDescriptor,  Addressable lpbDaclPresent,  Addressable pDacl,  Addressable lpbDaclDefaulted) {
        var mh$ = GetSecurityDescriptorDacl$MH();
        try {
            return (int)mh$.invokeExact(pSecurityDescriptor, lpbDaclPresent, pDacl, lpbDaclDefaulted);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSecurityDescriptorGroup$MH() {
        return RuntimeHelper.requireNonNull(constants$239.GetSecurityDescriptorGroup$MH,"GetSecurityDescriptorGroup");
    }
    public static int GetSecurityDescriptorGroup ( Addressable pSecurityDescriptor,  Addressable pGroup,  Addressable lpbGroupDefaulted) {
        var mh$ = GetSecurityDescriptorGroup$MH();
        try {
            return (int)mh$.invokeExact(pSecurityDescriptor, pGroup, lpbGroupDefaulted);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSecurityDescriptorLength$MH() {
        return RuntimeHelper.requireNonNull(constants$240.GetSecurityDescriptorLength$MH,"GetSecurityDescriptorLength");
    }
    public static int GetSecurityDescriptorLength ( Addressable pSecurityDescriptor) {
        var mh$ = GetSecurityDescriptorLength$MH();
        try {
            return (int)mh$.invokeExact(pSecurityDescriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSecurityDescriptorOwner$MH() {
        return RuntimeHelper.requireNonNull(constants$240.GetSecurityDescriptorOwner$MH,"GetSecurityDescriptorOwner");
    }
    public static int GetSecurityDescriptorOwner ( Addressable pSecurityDescriptor,  Addressable pOwner,  Addressable lpbOwnerDefaulted) {
        var mh$ = GetSecurityDescriptorOwner$MH();
        try {
            return (int)mh$.invokeExact(pSecurityDescriptor, pOwner, lpbOwnerDefaulted);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSecurityDescriptorRMControl$MH() {
        return RuntimeHelper.requireNonNull(constants$240.GetSecurityDescriptorRMControl$MH,"GetSecurityDescriptorRMControl");
    }
    public static int GetSecurityDescriptorRMControl ( Addressable SecurityDescriptor,  Addressable RMControl) {
        var mh$ = GetSecurityDescriptorRMControl$MH();
        try {
            return (int)mh$.invokeExact(SecurityDescriptor, RMControl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSecurityDescriptorSacl$MH() {
        return RuntimeHelper.requireNonNull(constants$240.GetSecurityDescriptorSacl$MH,"GetSecurityDescriptorSacl");
    }
    public static int GetSecurityDescriptorSacl ( Addressable pSecurityDescriptor,  Addressable lpbSaclPresent,  Addressable pSacl,  Addressable lpbSaclDefaulted) {
        var mh$ = GetSecurityDescriptorSacl$MH();
        try {
            return (int)mh$.invokeExact(pSecurityDescriptor, lpbSaclPresent, pSacl, lpbSaclDefaulted);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSidIdentifierAuthority$MH() {
        return RuntimeHelper.requireNonNull(constants$240.GetSidIdentifierAuthority$MH,"GetSidIdentifierAuthority");
    }
    public static MemoryAddress GetSidIdentifierAuthority ( Addressable pSid) {
        var mh$ = GetSidIdentifierAuthority$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pSid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSidLengthRequired$MH() {
        return RuntimeHelper.requireNonNull(constants$240.GetSidLengthRequired$MH,"GetSidLengthRequired");
    }
    public static int GetSidLengthRequired ( byte nSubAuthorityCount) {
        var mh$ = GetSidLengthRequired$MH();
        try {
            return (int)mh$.invokeExact(nSubAuthorityCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSidSubAuthority$MH() {
        return RuntimeHelper.requireNonNull(constants$241.GetSidSubAuthority$MH,"GetSidSubAuthority");
    }
    public static MemoryAddress GetSidSubAuthority ( Addressable pSid,  int nSubAuthority) {
        var mh$ = GetSidSubAuthority$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pSid, nSubAuthority);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSidSubAuthorityCount$MH() {
        return RuntimeHelper.requireNonNull(constants$241.GetSidSubAuthorityCount$MH,"GetSidSubAuthorityCount");
    }
    public static MemoryAddress GetSidSubAuthorityCount ( Addressable pSid) {
        var mh$ = GetSidSubAuthorityCount$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pSid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTokenInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$241.GetTokenInformation$MH,"GetTokenInformation");
    }
    public static int GetTokenInformation ( Addressable TokenHandle,  int TokenInformationClass,  Addressable TokenInformation,  int TokenInformationLength,  Addressable ReturnLength) {
        var mh$ = GetTokenInformation$MH();
        try {
            return (int)mh$.invokeExact(TokenHandle, TokenInformationClass, TokenInformation, TokenInformationLength, ReturnLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowsAccountDomainSid$MH() {
        return RuntimeHelper.requireNonNull(constants$241.GetWindowsAccountDomainSid$MH,"GetWindowsAccountDomainSid");
    }
    public static int GetWindowsAccountDomainSid ( Addressable pSid,  Addressable pDomainSid,  Addressable cbDomainSid) {
        var mh$ = GetWindowsAccountDomainSid$MH();
        try {
            return (int)mh$.invokeExact(pSid, pDomainSid, cbDomainSid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


