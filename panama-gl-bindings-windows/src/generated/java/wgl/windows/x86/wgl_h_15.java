// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class wgl_h_15 extends wgl_h_16 {

    wgl_h_15() {
        // Should not be called directly
    }
    private static final int BINDSTATUS_BEGINDOWNLOADDATA = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_BEGINDOWNLOADDATA = 4
     * }
     */
    public static int BINDSTATUS_BEGINDOWNLOADDATA() {
        return BINDSTATUS_BEGINDOWNLOADDATA;
    }
    private static final int BINDSTATUS_DOWNLOADINGDATA = (int)5L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_DOWNLOADINGDATA = 5
     * }
     */
    public static int BINDSTATUS_DOWNLOADINGDATA() {
        return BINDSTATUS_DOWNLOADINGDATA;
    }
    private static final int BINDSTATUS_ENDDOWNLOADDATA = (int)6L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_ENDDOWNLOADDATA = 6
     * }
     */
    public static int BINDSTATUS_ENDDOWNLOADDATA() {
        return BINDSTATUS_ENDDOWNLOADDATA;
    }
    private static final int BINDSTATUS_BEGINDOWNLOADCOMPONENTS = (int)7L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_BEGINDOWNLOADCOMPONENTS = 7
     * }
     */
    public static int BINDSTATUS_BEGINDOWNLOADCOMPONENTS() {
        return BINDSTATUS_BEGINDOWNLOADCOMPONENTS;
    }
    private static final int BINDSTATUS_INSTALLINGCOMPONENTS = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_INSTALLINGCOMPONENTS = 8
     * }
     */
    public static int BINDSTATUS_INSTALLINGCOMPONENTS() {
        return BINDSTATUS_INSTALLINGCOMPONENTS;
    }
    private static final int BINDSTATUS_ENDDOWNLOADCOMPONENTS = (int)9L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_ENDDOWNLOADCOMPONENTS = 9
     * }
     */
    public static int BINDSTATUS_ENDDOWNLOADCOMPONENTS() {
        return BINDSTATUS_ENDDOWNLOADCOMPONENTS;
    }
    private static final int BINDSTATUS_USINGCACHEDCOPY = (int)10L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_USINGCACHEDCOPY = 10
     * }
     */
    public static int BINDSTATUS_USINGCACHEDCOPY() {
        return BINDSTATUS_USINGCACHEDCOPY;
    }
    private static final int BINDSTATUS_SENDINGREQUEST = (int)11L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_SENDINGREQUEST = 11
     * }
     */
    public static int BINDSTATUS_SENDINGREQUEST() {
        return BINDSTATUS_SENDINGREQUEST;
    }
    private static final int BINDSTATUS_CLASSIDAVAILABLE = (int)12L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_CLASSIDAVAILABLE = 12
     * }
     */
    public static int BINDSTATUS_CLASSIDAVAILABLE() {
        return BINDSTATUS_CLASSIDAVAILABLE;
    }
    private static final int BINDSTATUS_MIMETYPEAVAILABLE = (int)13L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_MIMETYPEAVAILABLE = 13
     * }
     */
    public static int BINDSTATUS_MIMETYPEAVAILABLE() {
        return BINDSTATUS_MIMETYPEAVAILABLE;
    }
    private static final int BINDSTATUS_CACHEFILENAMEAVAILABLE = (int)14L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_CACHEFILENAMEAVAILABLE = 14
     * }
     */
    public static int BINDSTATUS_CACHEFILENAMEAVAILABLE() {
        return BINDSTATUS_CACHEFILENAMEAVAILABLE;
    }
    private static final int BINDSTATUS_BEGINSYNCOPERATION = (int)15L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_BEGINSYNCOPERATION = 15
     * }
     */
    public static int BINDSTATUS_BEGINSYNCOPERATION() {
        return BINDSTATUS_BEGINSYNCOPERATION;
    }
    private static final int BINDSTATUS_ENDSYNCOPERATION = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_ENDSYNCOPERATION = 16
     * }
     */
    public static int BINDSTATUS_ENDSYNCOPERATION() {
        return BINDSTATUS_ENDSYNCOPERATION;
    }
    private static final int BINDSTATUS_BEGINUPLOADDATA = (int)17L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_BEGINUPLOADDATA = 17
     * }
     */
    public static int BINDSTATUS_BEGINUPLOADDATA() {
        return BINDSTATUS_BEGINUPLOADDATA;
    }
    private static final int BINDSTATUS_UPLOADINGDATA = (int)18L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_UPLOADINGDATA = 18
     * }
     */
    public static int BINDSTATUS_UPLOADINGDATA() {
        return BINDSTATUS_UPLOADINGDATA;
    }
    private static final int BINDSTATUS_ENDUPLOADDATA = (int)19L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_ENDUPLOADDATA = 19
     * }
     */
    public static int BINDSTATUS_ENDUPLOADDATA() {
        return BINDSTATUS_ENDUPLOADDATA;
    }
    private static final int BINDSTATUS_PROTOCOLCLASSID = (int)20L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_PROTOCOLCLASSID = 20
     * }
     */
    public static int BINDSTATUS_PROTOCOLCLASSID() {
        return BINDSTATUS_PROTOCOLCLASSID;
    }
    private static final int BINDSTATUS_ENCODING = (int)21L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_ENCODING = 21
     * }
     */
    public static int BINDSTATUS_ENCODING() {
        return BINDSTATUS_ENCODING;
    }
    private static final int BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE = (int)22L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE = 22
     * }
     */
    public static int BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE() {
        return BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE;
    }
    private static final int BINDSTATUS_CLASSINSTALLLOCATION = (int)23L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_CLASSINSTALLLOCATION = 23
     * }
     */
    public static int BINDSTATUS_CLASSINSTALLLOCATION() {
        return BINDSTATUS_CLASSINSTALLLOCATION;
    }
    private static final int BINDSTATUS_DECODING = (int)24L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_DECODING = 24
     * }
     */
    public static int BINDSTATUS_DECODING() {
        return BINDSTATUS_DECODING;
    }
    private static final int BINDSTATUS_LOADINGMIMEHANDLER = (int)25L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_LOADINGMIMEHANDLER = 25
     * }
     */
    public static int BINDSTATUS_LOADINGMIMEHANDLER() {
        return BINDSTATUS_LOADINGMIMEHANDLER;
    }
    private static final int BINDSTATUS_CONTENTDISPOSITIONATTACH = (int)26L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_CONTENTDISPOSITIONATTACH = 26
     * }
     */
    public static int BINDSTATUS_CONTENTDISPOSITIONATTACH() {
        return BINDSTATUS_CONTENTDISPOSITIONATTACH;
    }
    private static final int BINDSTATUS_FILTERREPORTMIMETYPE = (int)27L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_FILTERREPORTMIMETYPE = 27
     * }
     */
    public static int BINDSTATUS_FILTERREPORTMIMETYPE() {
        return BINDSTATUS_FILTERREPORTMIMETYPE;
    }
    private static final int BINDSTATUS_CLSIDCANINSTANTIATE = (int)28L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_CLSIDCANINSTANTIATE = 28
     * }
     */
    public static int BINDSTATUS_CLSIDCANINSTANTIATE() {
        return BINDSTATUS_CLSIDCANINSTANTIATE;
    }
    private static final int BINDSTATUS_IUNKNOWNAVAILABLE = (int)29L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_IUNKNOWNAVAILABLE = 29
     * }
     */
    public static int BINDSTATUS_IUNKNOWNAVAILABLE() {
        return BINDSTATUS_IUNKNOWNAVAILABLE;
    }
    private static final int BINDSTATUS_DIRECTBIND = (int)30L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_DIRECTBIND = 30
     * }
     */
    public static int BINDSTATUS_DIRECTBIND() {
        return BINDSTATUS_DIRECTBIND;
    }
    private static final int BINDSTATUS_RAWMIMETYPE = (int)31L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RAWMIMETYPE = 31
     * }
     */
    public static int BINDSTATUS_RAWMIMETYPE() {
        return BINDSTATUS_RAWMIMETYPE;
    }
    private static final int BINDSTATUS_PROXYDETECTING = (int)32L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_PROXYDETECTING = 32
     * }
     */
    public static int BINDSTATUS_PROXYDETECTING() {
        return BINDSTATUS_PROXYDETECTING;
    }
    private static final int BINDSTATUS_ACCEPTRANGES = (int)33L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_ACCEPTRANGES = 33
     * }
     */
    public static int BINDSTATUS_ACCEPTRANGES() {
        return BINDSTATUS_ACCEPTRANGES;
    }
    private static final int BINDSTATUS_COOKIE_SENT = (int)34L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_COOKIE_SENT = 34
     * }
     */
    public static int BINDSTATUS_COOKIE_SENT() {
        return BINDSTATUS_COOKIE_SENT;
    }
    private static final int BINDSTATUS_COMPACT_POLICY_RECEIVED = (int)35L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_COMPACT_POLICY_RECEIVED = 35
     * }
     */
    public static int BINDSTATUS_COMPACT_POLICY_RECEIVED() {
        return BINDSTATUS_COMPACT_POLICY_RECEIVED;
    }
    private static final int BINDSTATUS_COOKIE_SUPPRESSED = (int)36L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_COOKIE_SUPPRESSED = 36
     * }
     */
    public static int BINDSTATUS_COOKIE_SUPPRESSED() {
        return BINDSTATUS_COOKIE_SUPPRESSED;
    }
    private static final int BINDSTATUS_COOKIE_STATE_UNKNOWN = (int)37L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_COOKIE_STATE_UNKNOWN = 37
     * }
     */
    public static int BINDSTATUS_COOKIE_STATE_UNKNOWN() {
        return BINDSTATUS_COOKIE_STATE_UNKNOWN;
    }
    private static final int BINDSTATUS_COOKIE_STATE_ACCEPT = (int)38L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_COOKIE_STATE_ACCEPT = 38
     * }
     */
    public static int BINDSTATUS_COOKIE_STATE_ACCEPT() {
        return BINDSTATUS_COOKIE_STATE_ACCEPT;
    }
    private static final int BINDSTATUS_COOKIE_STATE_REJECT = (int)39L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_COOKIE_STATE_REJECT = 39
     * }
     */
    public static int BINDSTATUS_COOKIE_STATE_REJECT() {
        return BINDSTATUS_COOKIE_STATE_REJECT;
    }
    private static final int BINDSTATUS_COOKIE_STATE_PROMPT = (int)40L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_COOKIE_STATE_PROMPT = 40
     * }
     */
    public static int BINDSTATUS_COOKIE_STATE_PROMPT() {
        return BINDSTATUS_COOKIE_STATE_PROMPT;
    }
    private static final int BINDSTATUS_COOKIE_STATE_LEASH = (int)41L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_COOKIE_STATE_LEASH = 41
     * }
     */
    public static int BINDSTATUS_COOKIE_STATE_LEASH() {
        return BINDSTATUS_COOKIE_STATE_LEASH;
    }
    private static final int BINDSTATUS_COOKIE_STATE_DOWNGRADE = (int)42L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_COOKIE_STATE_DOWNGRADE = 42
     * }
     */
    public static int BINDSTATUS_COOKIE_STATE_DOWNGRADE() {
        return BINDSTATUS_COOKIE_STATE_DOWNGRADE;
    }
    private static final int BINDSTATUS_POLICY_HREF = (int)43L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_POLICY_HREF = 43
     * }
     */
    public static int BINDSTATUS_POLICY_HREF() {
        return BINDSTATUS_POLICY_HREF;
    }
    private static final int BINDSTATUS_P3P_HEADER = (int)44L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_P3P_HEADER = 44
     * }
     */
    public static int BINDSTATUS_P3P_HEADER() {
        return BINDSTATUS_P3P_HEADER;
    }
    private static final int BINDSTATUS_SESSION_COOKIE_RECEIVED = (int)45L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_SESSION_COOKIE_RECEIVED = 45
     * }
     */
    public static int BINDSTATUS_SESSION_COOKIE_RECEIVED() {
        return BINDSTATUS_SESSION_COOKIE_RECEIVED;
    }
    private static final int BINDSTATUS_PERSISTENT_COOKIE_RECEIVED = (int)46L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_PERSISTENT_COOKIE_RECEIVED = 46
     * }
     */
    public static int BINDSTATUS_PERSISTENT_COOKIE_RECEIVED() {
        return BINDSTATUS_PERSISTENT_COOKIE_RECEIVED;
    }
    private static final int BINDSTATUS_SESSION_COOKIES_ALLOWED = (int)47L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_SESSION_COOKIES_ALLOWED = 47
     * }
     */
    public static int BINDSTATUS_SESSION_COOKIES_ALLOWED() {
        return BINDSTATUS_SESSION_COOKIES_ALLOWED;
    }
    private static final int BINDSTATUS_CACHECONTROL = (int)48L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_CACHECONTROL = 48
     * }
     */
    public static int BINDSTATUS_CACHECONTROL() {
        return BINDSTATUS_CACHECONTROL;
    }
    private static final int BINDSTATUS_CONTENTDISPOSITIONFILENAME = (int)49L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_CONTENTDISPOSITIONFILENAME = 49
     * }
     */
    public static int BINDSTATUS_CONTENTDISPOSITIONFILENAME() {
        return BINDSTATUS_CONTENTDISPOSITIONFILENAME;
    }
    private static final int BINDSTATUS_MIMETEXTPLAINMISMATCH = (int)50L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_MIMETEXTPLAINMISMATCH = 50
     * }
     */
    public static int BINDSTATUS_MIMETEXTPLAINMISMATCH() {
        return BINDSTATUS_MIMETEXTPLAINMISMATCH;
    }
    private static final int BINDSTATUS_PUBLISHERAVAILABLE = (int)51L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_PUBLISHERAVAILABLE = 51
     * }
     */
    public static int BINDSTATUS_PUBLISHERAVAILABLE() {
        return BINDSTATUS_PUBLISHERAVAILABLE;
    }
    private static final int BINDSTATUS_DISPLAYNAMEAVAILABLE = (int)52L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_DISPLAYNAMEAVAILABLE = 52
     * }
     */
    public static int BINDSTATUS_DISPLAYNAMEAVAILABLE() {
        return BINDSTATUS_DISPLAYNAMEAVAILABLE;
    }
    private static final int BINDSTATUS_SSLUX_NAVBLOCKED = (int)53L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_SSLUX_NAVBLOCKED = 53
     * }
     */
    public static int BINDSTATUS_SSLUX_NAVBLOCKED() {
        return BINDSTATUS_SSLUX_NAVBLOCKED;
    }
    private static final int BINDSTATUS_SERVER_MIMETYPEAVAILABLE = (int)54L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_SERVER_MIMETYPEAVAILABLE = 54
     * }
     */
    public static int BINDSTATUS_SERVER_MIMETYPEAVAILABLE() {
        return BINDSTATUS_SERVER_MIMETYPEAVAILABLE;
    }
    private static final int BINDSTATUS_SNIFFED_CLASSIDAVAILABLE = (int)55L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_SNIFFED_CLASSIDAVAILABLE = 55
     * }
     */
    public static int BINDSTATUS_SNIFFED_CLASSIDAVAILABLE() {
        return BINDSTATUS_SNIFFED_CLASSIDAVAILABLE;
    }
    private static final int BINDSTATUS_64BIT_PROGRESS = (int)56L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_64BIT_PROGRESS = 56
     * }
     */
    public static int BINDSTATUS_64BIT_PROGRESS() {
        return BINDSTATUS_64BIT_PROGRESS;
    }
    private static final int BINDSTATUS_LAST = (int)56L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_LAST = 56
     * }
     */
    public static int BINDSTATUS_LAST() {
        return BINDSTATUS_LAST;
    }
    private static final int BINDSTATUS_RESERVED_0 = (int)57L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_0 = 57
     * }
     */
    public static int BINDSTATUS_RESERVED_0() {
        return BINDSTATUS_RESERVED_0;
    }
    private static final int BINDSTATUS_RESERVED_1 = (int)58L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_1 = 58
     * }
     */
    public static int BINDSTATUS_RESERVED_1() {
        return BINDSTATUS_RESERVED_1;
    }
    private static final int BINDSTATUS_RESERVED_2 = (int)59L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_2 = 59
     * }
     */
    public static int BINDSTATUS_RESERVED_2() {
        return BINDSTATUS_RESERVED_2;
    }
    private static final int BINDSTATUS_RESERVED_3 = (int)60L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_3 = 60
     * }
     */
    public static int BINDSTATUS_RESERVED_3() {
        return BINDSTATUS_RESERVED_3;
    }
    private static final int BINDSTATUS_RESERVED_4 = (int)61L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_4 = 61
     * }
     */
    public static int BINDSTATUS_RESERVED_4() {
        return BINDSTATUS_RESERVED_4;
    }
    private static final int BINDSTATUS_RESERVED_5 = (int)62L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_5 = 62
     * }
     */
    public static int BINDSTATUS_RESERVED_5() {
        return BINDSTATUS_RESERVED_5;
    }
    private static final int BINDSTATUS_RESERVED_6 = (int)63L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_6 = 63
     * }
     */
    public static int BINDSTATUS_RESERVED_6() {
        return BINDSTATUS_RESERVED_6;
    }
    private static final int BINDSTATUS_RESERVED_7 = (int)64L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_7 = 64
     * }
     */
    public static int BINDSTATUS_RESERVED_7() {
        return BINDSTATUS_RESERVED_7;
    }
    private static final int BINDSTATUS_RESERVED_8 = (int)65L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_8 = 65
     * }
     */
    public static int BINDSTATUS_RESERVED_8() {
        return BINDSTATUS_RESERVED_8;
    }
    private static final int BINDSTATUS_RESERVED_9 = (int)66L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_9 = 66
     * }
     */
    public static int BINDSTATUS_RESERVED_9() {
        return BINDSTATUS_RESERVED_9;
    }
    private static final int BINDSTATUS_RESERVED_A = (int)67L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_A = 67
     * }
     */
    public static int BINDSTATUS_RESERVED_A() {
        return BINDSTATUS_RESERVED_A;
    }
    private static final int BINDSTATUS_RESERVED_B = (int)68L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_B = 68
     * }
     */
    public static int BINDSTATUS_RESERVED_B() {
        return BINDSTATUS_RESERVED_B;
    }
    private static final int BINDSTATUS_RESERVED_C = (int)69L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_C = 69
     * }
     */
    public static int BINDSTATUS_RESERVED_C() {
        return BINDSTATUS_RESERVED_C;
    }
    private static final int BINDSTATUS_RESERVED_D = (int)70L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_D = 70
     * }
     */
    public static int BINDSTATUS_RESERVED_D() {
        return BINDSTATUS_RESERVED_D;
    }
    private static final int BINDSTATUS_RESERVED_E = (int)71L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_E = 71
     * }
     */
    public static int BINDSTATUS_RESERVED_E() {
        return BINDSTATUS_RESERVED_E;
    }
    private static final int BINDSTATUS_RESERVED_F = (int)72L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_F = 72
     * }
     */
    public static int BINDSTATUS_RESERVED_F() {
        return BINDSTATUS_RESERVED_F;
    }
    private static final int BINDSTATUS_RESERVED_10 = (int)73L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_10 = 73
     * }
     */
    public static int BINDSTATUS_RESERVED_10() {
        return BINDSTATUS_RESERVED_10;
    }
    private static final int BINDSTATUS_RESERVED_11 = (int)74L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_11 = 74
     * }
     */
    public static int BINDSTATUS_RESERVED_11() {
        return BINDSTATUS_RESERVED_11;
    }
    private static final int BINDSTATUS_RESERVED_12 = (int)75L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_12 = 75
     * }
     */
    public static int BINDSTATUS_RESERVED_12() {
        return BINDSTATUS_RESERVED_12;
    }
    private static final int BINDSTATUS_RESERVED_13 = (int)76L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_RESERVED_13 = 76
     * }
     */
    public static int BINDSTATUS_RESERVED_13() {
        return BINDSTATUS_RESERVED_13;
    }
    private static final int BINDSTATUS_LAST_PRIVATE = (int)76L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_LAST_PRIVATE = 76
     * }
     */
    public static int BINDSTATUS_LAST_PRIVATE() {
        return BINDSTATUS_LAST_PRIVATE;
    }

    private static class IID_IBindStatusCallback$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IBindStatusCallback").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindStatusCallback
     * }
     */
    public static GroupLayout IID_IBindStatusCallback$layout() {
        return IID_IBindStatusCallback$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindStatusCallback
     * }
     */
    public static MemorySegment IID_IBindStatusCallback() {
        return IID_IBindStatusCallback$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindStatusCallback
     * }
     */
    public static void IID_IBindStatusCallback(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IBindStatusCallback$constants.SEGMENT, 0L, IID_IBindStatusCallback$constants.LAYOUT.byteSize());
    }

    private static class IBindStatusCallback_RemoteGetBindInfo_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IBindStatusCallback_RemoteGetBindInfo_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_RemoteGetBindInfo_Proxy(IBindStatusCallback *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed)
     * }
     */
    public static FunctionDescriptor IBindStatusCallback_RemoteGetBindInfo_Proxy$descriptor() {
        return IBindStatusCallback_RemoteGetBindInfo_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_RemoteGetBindInfo_Proxy(IBindStatusCallback *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed)
     * }
     */
    public static MethodHandle IBindStatusCallback_RemoteGetBindInfo_Proxy$handle() {
        return IBindStatusCallback_RemoteGetBindInfo_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_RemoteGetBindInfo_Proxy(IBindStatusCallback *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed)
     * }
     */
    public static MemorySegment IBindStatusCallback_RemoteGetBindInfo_Proxy$address() {
        return IBindStatusCallback_RemoteGetBindInfo_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_RemoteGetBindInfo_Proxy(IBindStatusCallback *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed)
     * }
     */
    public static int IBindStatusCallback_RemoteGetBindInfo_Proxy(MemorySegment This, MemorySegment grfBINDF, MemorySegment pbindinfo, MemorySegment pstgmed) {
        var mh$ = IBindStatusCallback_RemoteGetBindInfo_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindStatusCallback_RemoteGetBindInfo_Proxy", This, grfBINDF, pbindinfo, pstgmed);
            }
            return (int)mh$.invokeExact(This, grfBINDF, pbindinfo, pstgmed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindStatusCallback_RemoteGetBindInfo_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IBindStatusCallback_RemoteGetBindInfo_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IBindStatusCallback_RemoteGetBindInfo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IBindStatusCallback_RemoteGetBindInfo_Stub$descriptor() {
        return IBindStatusCallback_RemoteGetBindInfo_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IBindStatusCallback_RemoteGetBindInfo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IBindStatusCallback_RemoteGetBindInfo_Stub$handle() {
        return IBindStatusCallback_RemoteGetBindInfo_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IBindStatusCallback_RemoteGetBindInfo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IBindStatusCallback_RemoteGetBindInfo_Stub$address() {
        return IBindStatusCallback_RemoteGetBindInfo_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IBindStatusCallback_RemoteGetBindInfo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IBindStatusCallback_RemoteGetBindInfo_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IBindStatusCallback_RemoteGetBindInfo_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindStatusCallback_RemoteGetBindInfo_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindStatusCallback_RemoteOnDataAvailable_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IBindStatusCallback_RemoteOnDataAvailable_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_RemoteOnDataAvailable_Proxy(IBindStatusCallback *This, DWORD grfBSCF, DWORD dwSize, RemFORMATETC *pformatetc, RemSTGMEDIUM *pstgmed)
     * }
     */
    public static FunctionDescriptor IBindStatusCallback_RemoteOnDataAvailable_Proxy$descriptor() {
        return IBindStatusCallback_RemoteOnDataAvailable_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_RemoteOnDataAvailable_Proxy(IBindStatusCallback *This, DWORD grfBSCF, DWORD dwSize, RemFORMATETC *pformatetc, RemSTGMEDIUM *pstgmed)
     * }
     */
    public static MethodHandle IBindStatusCallback_RemoteOnDataAvailable_Proxy$handle() {
        return IBindStatusCallback_RemoteOnDataAvailable_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_RemoteOnDataAvailable_Proxy(IBindStatusCallback *This, DWORD grfBSCF, DWORD dwSize, RemFORMATETC *pformatetc, RemSTGMEDIUM *pstgmed)
     * }
     */
    public static MemorySegment IBindStatusCallback_RemoteOnDataAvailable_Proxy$address() {
        return IBindStatusCallback_RemoteOnDataAvailable_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_RemoteOnDataAvailable_Proxy(IBindStatusCallback *This, DWORD grfBSCF, DWORD dwSize, RemFORMATETC *pformatetc, RemSTGMEDIUM *pstgmed)
     * }
     */
    public static int IBindStatusCallback_RemoteOnDataAvailable_Proxy(MemorySegment This, int grfBSCF, int dwSize, MemorySegment pformatetc, MemorySegment pstgmed) {
        var mh$ = IBindStatusCallback_RemoteOnDataAvailable_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindStatusCallback_RemoteOnDataAvailable_Proxy", This, grfBSCF, dwSize, pformatetc, pstgmed);
            }
            return (int)mh$.invokeExact(This, grfBSCF, dwSize, pformatetc, pstgmed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindStatusCallback_RemoteOnDataAvailable_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IBindStatusCallback_RemoteOnDataAvailable_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IBindStatusCallback_RemoteOnDataAvailable_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IBindStatusCallback_RemoteOnDataAvailable_Stub$descriptor() {
        return IBindStatusCallback_RemoteOnDataAvailable_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IBindStatusCallback_RemoteOnDataAvailable_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IBindStatusCallback_RemoteOnDataAvailable_Stub$handle() {
        return IBindStatusCallback_RemoteOnDataAvailable_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IBindStatusCallback_RemoteOnDataAvailable_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IBindStatusCallback_RemoteOnDataAvailable_Stub$address() {
        return IBindStatusCallback_RemoteOnDataAvailable_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IBindStatusCallback_RemoteOnDataAvailable_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IBindStatusCallback_RemoteOnDataAvailable_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IBindStatusCallback_RemoteOnDataAvailable_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindStatusCallback_RemoteOnDataAvailable_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IBindStatusCallbackEx *LPBINDSTATUSCALLBACKEX
     * }
     */
    public static final AddressLayout LPBINDSTATUSCALLBACKEX = wgl_h.C_POINTER;
    private static final int BINDF2_DISABLEBASICOVERHTTP = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_DISABLEBASICOVERHTTP = 1
     * }
     */
    public static int BINDF2_DISABLEBASICOVERHTTP() {
        return BINDF2_DISABLEBASICOVERHTTP;
    }
    private static final int BINDF2_DISABLEAUTOCOOKIEHANDLING = (int)2L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_DISABLEAUTOCOOKIEHANDLING = 2
     * }
     */
    public static int BINDF2_DISABLEAUTOCOOKIEHANDLING() {
        return BINDF2_DISABLEAUTOCOOKIEHANDLING;
    }
    private static final int BINDF2_READ_DATA_GREATER_THAN_4GB = (int)4L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_READ_DATA_GREATER_THAN_4GB = 4
     * }
     */
    public static int BINDF2_READ_DATA_GREATER_THAN_4GB() {
        return BINDF2_READ_DATA_GREATER_THAN_4GB;
    }
    private static final int BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID = (int)8L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID = 8
     * }
     */
    public static int BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID() {
        return BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID;
    }
    private static final int BINDF2_SETDOWNLOADMODE = (int)32L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_SETDOWNLOADMODE = 32
     * }
     */
    public static int BINDF2_SETDOWNLOADMODE() {
        return BINDF2_SETDOWNLOADMODE;
    }
    private static final int BINDF2_DISABLE_HTTP_REDIRECT_CACHING = (int)64L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_DISABLE_HTTP_REDIRECT_CACHING = 64
     * }
     */
    public static int BINDF2_DISABLE_HTTP_REDIRECT_CACHING() {
        return BINDF2_DISABLE_HTTP_REDIRECT_CACHING;
    }
    private static final int BINDF2_KEEP_CALLBACK_MODULE_LOADED = (int)128L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_KEEP_CALLBACK_MODULE_LOADED = 128
     * }
     */
    public static int BINDF2_KEEP_CALLBACK_MODULE_LOADED() {
        return BINDF2_KEEP_CALLBACK_MODULE_LOADED;
    }
    private static final int BINDF2_ALLOW_PROXY_CRED_PROMPT = (int)256L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_ALLOW_PROXY_CRED_PROMPT = 256
     * }
     */
    public static int BINDF2_ALLOW_PROXY_CRED_PROMPT() {
        return BINDF2_ALLOW_PROXY_CRED_PROMPT;
    }
    private static final int BINDF2_RESERVED_17 = (int)512L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_17 = 512
     * }
     */
    public static int BINDF2_RESERVED_17() {
        return BINDF2_RESERVED_17;
    }
    private static final int BINDF2_RESERVED_16 = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_16 = 1024
     * }
     */
    public static int BINDF2_RESERVED_16() {
        return BINDF2_RESERVED_16;
    }
    private static final int BINDF2_RESERVED_15 = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_15 = 2048
     * }
     */
    public static int BINDF2_RESERVED_15() {
        return BINDF2_RESERVED_15;
    }
    private static final int BINDF2_RESERVED_14 = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_14 = 4096
     * }
     */
    public static int BINDF2_RESERVED_14() {
        return BINDF2_RESERVED_14;
    }
    private static final int BINDF2_RESERVED_13 = (int)8192L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_13 = 8192
     * }
     */
    public static int BINDF2_RESERVED_13() {
        return BINDF2_RESERVED_13;
    }
    private static final int BINDF2_RESERVED_12 = (int)16384L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_12 = 16384
     * }
     */
    public static int BINDF2_RESERVED_12() {
        return BINDF2_RESERVED_12;
    }
    private static final int BINDF2_RESERVED_11 = (int)32768L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_11 = 32768
     * }
     */
    public static int BINDF2_RESERVED_11() {
        return BINDF2_RESERVED_11;
    }
    private static final int BINDF2_RESERVED_10 = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_10 = 65536
     * }
     */
    public static int BINDF2_RESERVED_10() {
        return BINDF2_RESERVED_10;
    }
    private static final int BINDF2_RESERVED_F = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_F = 131072
     * }
     */
    public static int BINDF2_RESERVED_F() {
        return BINDF2_RESERVED_F;
    }
    private static final int BINDF2_RESERVED_E = (int)262144L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_E = 262144
     * }
     */
    public static int BINDF2_RESERVED_E() {
        return BINDF2_RESERVED_E;
    }
    private static final int BINDF2_RESERVED_D = (int)524288L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_D = 524288
     * }
     */
    public static int BINDF2_RESERVED_D() {
        return BINDF2_RESERVED_D;
    }
    private static final int BINDF2_RESERVED_C = (int)1048576L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_C = 1048576
     * }
     */
    public static int BINDF2_RESERVED_C() {
        return BINDF2_RESERVED_C;
    }
    private static final int BINDF2_RESERVED_B = (int)2097152L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_B = 2097152
     * }
     */
    public static int BINDF2_RESERVED_B() {
        return BINDF2_RESERVED_B;
    }
    private static final int BINDF2_RESERVED_A = (int)4194304L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_A = 4194304
     * }
     */
    public static int BINDF2_RESERVED_A() {
        return BINDF2_RESERVED_A;
    }
    private static final int BINDF2_RESERVED_9 = (int)8388608L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_9 = 8388608
     * }
     */
    public static int BINDF2_RESERVED_9() {
        return BINDF2_RESERVED_9;
    }
    private static final int BINDF2_RESERVED_8 = (int)16777216L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_8 = 16777216
     * }
     */
    public static int BINDF2_RESERVED_8() {
        return BINDF2_RESERVED_8;
    }
    private static final int BINDF2_RESERVED_7 = (int)33554432L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_7 = 33554432
     * }
     */
    public static int BINDF2_RESERVED_7() {
        return BINDF2_RESERVED_7;
    }
    private static final int BINDF2_RESERVED_6 = (int)67108864L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_6 = 67108864
     * }
     */
    public static int BINDF2_RESERVED_6() {
        return BINDF2_RESERVED_6;
    }
    private static final int BINDF2_RESERVED_5 = (int)134217728L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_5 = 134217728
     * }
     */
    public static int BINDF2_RESERVED_5() {
        return BINDF2_RESERVED_5;
    }
    private static final int BINDF2_RESERVED_4 = (int)268435456L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_4 = 268435456
     * }
     */
    public static int BINDF2_RESERVED_4() {
        return BINDF2_RESERVED_4;
    }
    private static final int BINDF2_RESERVED_3 = (int)536870912L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_3 = 536870912
     * }
     */
    public static int BINDF2_RESERVED_3() {
        return BINDF2_RESERVED_3;
    }
    private static final int BINDF2_RESERVED_2 = (int)1073741824L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_2 = 1073741824
     * }
     */
    public static int BINDF2_RESERVED_2() {
        return BINDF2_RESERVED_2;
    }
    private static final int BINDF2_RESERVED_1 = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallbackEx_0001.BINDF2_RESERVED_1 = -2147483648
     * }
     */
    public static int BINDF2_RESERVED_1() {
        return BINDF2_RESERVED_1;
    }

    private static class IID_IBindStatusCallbackEx$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IBindStatusCallbackEx").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindStatusCallbackEx
     * }
     */
    public static GroupLayout IID_IBindStatusCallbackEx$layout() {
        return IID_IBindStatusCallbackEx$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindStatusCallbackEx
     * }
     */
    public static MemorySegment IID_IBindStatusCallbackEx() {
        return IID_IBindStatusCallbackEx$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindStatusCallbackEx
     * }
     */
    public static void IID_IBindStatusCallbackEx(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IBindStatusCallbackEx$constants.SEGMENT, 0L, IID_IBindStatusCallbackEx$constants.LAYOUT.byteSize());
    }

    private static class IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy(IBindStatusCallbackEx *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed, DWORD *grfBINDF2, DWORD *pdwReserved)
     * }
     */
    public static FunctionDescriptor IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy$descriptor() {
        return IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy(IBindStatusCallbackEx *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed, DWORD *grfBINDF2, DWORD *pdwReserved)
     * }
     */
    public static MethodHandle IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy$handle() {
        return IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy(IBindStatusCallbackEx *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed, DWORD *grfBINDF2, DWORD *pdwReserved)
     * }
     */
    public static MemorySegment IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy$address() {
        return IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy(IBindStatusCallbackEx *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed, DWORD *grfBINDF2, DWORD *pdwReserved)
     * }
     */
    public static int IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy(MemorySegment This, MemorySegment grfBINDF, MemorySegment pbindinfo, MemorySegment pstgmed, MemorySegment grfBINDF2, MemorySegment pdwReserved) {
        var mh$ = IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy", This, grfBINDF, pbindinfo, pstgmed, grfBINDF2, pdwReserved);
            }
            return (int)mh$.invokeExact(This, grfBINDF, pbindinfo, pstgmed, grfBINDF2, pdwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub$descriptor() {
        return IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub$handle() {
        return IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub$address() {
        return IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IAuthenticate *LPAUTHENTICATION
     * }
     */
    public static final AddressLayout LPAUTHENTICATION = wgl_h.C_POINTER;

    private static class IID_IAuthenticate$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IAuthenticate").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAuthenticate
     * }
     */
    public static GroupLayout IID_IAuthenticate$layout() {
        return IID_IAuthenticate$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAuthenticate
     * }
     */
    public static MemorySegment IID_IAuthenticate() {
        return IID_IAuthenticate$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAuthenticate
     * }
     */
    public static void IID_IAuthenticate(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IAuthenticate$constants.SEGMENT, 0L, IID_IAuthenticate$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IAuthenticateEx *LPAUTHENTICATIONEX
     * }
     */
    public static final AddressLayout LPAUTHENTICATIONEX = wgl_h.C_POINTER;
    private static final int AUTHENTICATEF_PROXY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IAuthenticateEx_0001.AUTHENTICATEF_PROXY = 1
     * }
     */
    public static int AUTHENTICATEF_PROXY() {
        return AUTHENTICATEF_PROXY;
    }
    private static final int AUTHENTICATEF_BASIC = (int)2L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IAuthenticateEx_0001.AUTHENTICATEF_BASIC = 2
     * }
     */
    public static int AUTHENTICATEF_BASIC() {
        return AUTHENTICATEF_BASIC;
    }
    private static final int AUTHENTICATEF_HTTP = (int)4L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IAuthenticateEx_0001.AUTHENTICATEF_HTTP = 4
     * }
     */
    public static int AUTHENTICATEF_HTTP() {
        return AUTHENTICATEF_HTTP;
    }

    private static class IID_IAuthenticateEx$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IAuthenticateEx").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAuthenticateEx
     * }
     */
    public static GroupLayout IID_IAuthenticateEx$layout() {
        return IID_IAuthenticateEx$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAuthenticateEx
     * }
     */
    public static MemorySegment IID_IAuthenticateEx() {
        return IID_IAuthenticateEx$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAuthenticateEx
     * }
     */
    public static void IID_IAuthenticateEx(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IAuthenticateEx$constants.SEGMENT, 0L, IID_IAuthenticateEx$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IHttpNegotiate *LPHTTPNEGOTIATE
     * }
     */
    public static final AddressLayout LPHTTPNEGOTIATE = wgl_h.C_POINTER;

    private static class IID_IHttpNegotiate$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IHttpNegotiate").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IHttpNegotiate
     * }
     */
    public static GroupLayout IID_IHttpNegotiate$layout() {
        return IID_IHttpNegotiate$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IHttpNegotiate
     * }
     */
    public static MemorySegment IID_IHttpNegotiate() {
        return IID_IHttpNegotiate$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IHttpNegotiate
     * }
     */
    public static void IID_IHttpNegotiate(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IHttpNegotiate$constants.SEGMENT, 0L, IID_IHttpNegotiate$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IHttpNegotiate2 *LPHTTPNEGOTIATE2
     * }
     */
    public static final AddressLayout LPHTTPNEGOTIATE2 = wgl_h.C_POINTER;

    private static class IID_IHttpNegotiate2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IHttpNegotiate2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IHttpNegotiate2
     * }
     */
    public static GroupLayout IID_IHttpNegotiate2$layout() {
        return IID_IHttpNegotiate2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IHttpNegotiate2
     * }
     */
    public static MemorySegment IID_IHttpNegotiate2() {
        return IID_IHttpNegotiate2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IHttpNegotiate2
     * }
     */
    public static void IID_IHttpNegotiate2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IHttpNegotiate2$constants.SEGMENT, 0L, IID_IHttpNegotiate2$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IHttpNegotiate3 *LPHTTPNEGOTIATE3
     * }
     */
    public static final AddressLayout LPHTTPNEGOTIATE3 = wgl_h.C_POINTER;

    private static class IID_IHttpNegotiate3$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IHttpNegotiate3").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IHttpNegotiate3
     * }
     */
    public static GroupLayout IID_IHttpNegotiate3$layout() {
        return IID_IHttpNegotiate3$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IHttpNegotiate3
     * }
     */
    public static MemorySegment IID_IHttpNegotiate3() {
        return IID_IHttpNegotiate3$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IHttpNegotiate3
     * }
     */
    public static void IID_IHttpNegotiate3(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IHttpNegotiate3$constants.SEGMENT, 0L, IID_IHttpNegotiate3$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IWinInetFileStream *LPWININETFILESTREAM
     * }
     */
    public static final AddressLayout LPWININETFILESTREAM = wgl_h.C_POINTER;

    private static class IID_IWinInetFileStream$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IWinInetFileStream").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWinInetFileStream
     * }
     */
    public static GroupLayout IID_IWinInetFileStream$layout() {
        return IID_IWinInetFileStream$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWinInetFileStream
     * }
     */
    public static MemorySegment IID_IWinInetFileStream() {
        return IID_IWinInetFileStream$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWinInetFileStream
     * }
     */
    public static void IID_IWinInetFileStream(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IWinInetFileStream$constants.SEGMENT, 0L, IID_IWinInetFileStream$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IWindowForBindingUI *LPWINDOWFORBINDINGUI
     * }
     */
    public static final AddressLayout LPWINDOWFORBINDINGUI = wgl_h.C_POINTER;

    private static class IID_IWindowForBindingUI$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IWindowForBindingUI").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWindowForBindingUI
     * }
     */
    public static GroupLayout IID_IWindowForBindingUI$layout() {
        return IID_IWindowForBindingUI$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWindowForBindingUI
     * }
     */
    public static MemorySegment IID_IWindowForBindingUI() {
        return IID_IWindowForBindingUI$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWindowForBindingUI
     * }
     */
    public static void IID_IWindowForBindingUI(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IWindowForBindingUI$constants.SEGMENT, 0L, IID_IWindowForBindingUI$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef ICodeInstall *LPCODEINSTALL
     * }
     */
    public static final AddressLayout LPCODEINSTALL = wgl_h.C_POINTER;
    private static final int CIP_DISK_FULL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_ICodeInstall_0001.CIP_DISK_FULL = 0
     * }
     */
    public static int CIP_DISK_FULL() {
        return CIP_DISK_FULL;
    }
    private static final int CIP_ACCESS_DENIED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_ICodeInstall_0001.CIP_ACCESS_DENIED = 1
     * }
     */
    public static int CIP_ACCESS_DENIED() {
        return CIP_ACCESS_DENIED;
    }
    private static final int CIP_NEWER_VERSION_EXISTS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_ICodeInstall_0001.CIP_NEWER_VERSION_EXISTS = 2
     * }
     */
    public static int CIP_NEWER_VERSION_EXISTS() {
        return CIP_NEWER_VERSION_EXISTS;
    }
    private static final int CIP_OLDER_VERSION_EXISTS = (int)3L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_ICodeInstall_0001.CIP_OLDER_VERSION_EXISTS = 3
     * }
     */
    public static int CIP_OLDER_VERSION_EXISTS() {
        return CIP_OLDER_VERSION_EXISTS;
    }
    private static final int CIP_NAME_CONFLICT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_ICodeInstall_0001.CIP_NAME_CONFLICT = 4
     * }
     */
    public static int CIP_NAME_CONFLICT() {
        return CIP_NAME_CONFLICT;
    }
    private static final int CIP_TRUST_VERIFICATION_COMPONENT_MISSING = (int)5L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_ICodeInstall_0001.CIP_TRUST_VERIFICATION_COMPONENT_MISSING = 5
     * }
     */
    public static int CIP_TRUST_VERIFICATION_COMPONENT_MISSING() {
        return CIP_TRUST_VERIFICATION_COMPONENT_MISSING;
    }
    private static final int CIP_EXE_SELF_REGISTERATION_TIMEOUT = (int)6L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_ICodeInstall_0001.CIP_EXE_SELF_REGISTERATION_TIMEOUT = 6
     * }
     */
    public static int CIP_EXE_SELF_REGISTERATION_TIMEOUT() {
        return CIP_EXE_SELF_REGISTERATION_TIMEOUT;
    }
    private static final int CIP_UNSAFE_TO_ABORT = (int)7L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_ICodeInstall_0001.CIP_UNSAFE_TO_ABORT = 7
     * }
     */
    public static int CIP_UNSAFE_TO_ABORT() {
        return CIP_UNSAFE_TO_ABORT;
    }
    private static final int CIP_NEED_REBOOT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_ICodeInstall_0001.CIP_NEED_REBOOT = 8
     * }
     */
    public static int CIP_NEED_REBOOT() {
        return CIP_NEED_REBOOT;
    }
    private static final int CIP_NEED_REBOOT_UI_PERMISSION = (int)9L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_ICodeInstall_0001.CIP_NEED_REBOOT_UI_PERMISSION = 9
     * }
     */
    public static int CIP_NEED_REBOOT_UI_PERMISSION() {
        return CIP_NEED_REBOOT_UI_PERMISSION;
    }

    private static class IID_ICodeInstall$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_ICodeInstall").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICodeInstall
     * }
     */
    public static GroupLayout IID_ICodeInstall$layout() {
        return IID_ICodeInstall$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICodeInstall
     * }
     */
    public static MemorySegment IID_ICodeInstall() {
        return IID_ICodeInstall$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICodeInstall
     * }
     */
    public static void IID_ICodeInstall(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ICodeInstall$constants.SEGMENT, 0L, IID_ICodeInstall$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    private static final int Uri_PROPERTY_ABSOLUTE_URI = (int)0L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_ABSOLUTE_URI = 0
     * }
     */
    public static int Uri_PROPERTY_ABSOLUTE_URI() {
        return Uri_PROPERTY_ABSOLUTE_URI;
    }
    private static final int Uri_PROPERTY_STRING_START = (int)0L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_STRING_START = 0
     * }
     */
    public static int Uri_PROPERTY_STRING_START() {
        return Uri_PROPERTY_STRING_START;
    }
    private static final int Uri_PROPERTY_AUTHORITY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_AUTHORITY = 1
     * }
     */
    public static int Uri_PROPERTY_AUTHORITY() {
        return Uri_PROPERTY_AUTHORITY;
    }
    private static final int Uri_PROPERTY_DISPLAY_URI = (int)2L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_DISPLAY_URI = 2
     * }
     */
    public static int Uri_PROPERTY_DISPLAY_URI() {
        return Uri_PROPERTY_DISPLAY_URI;
    }
    private static final int Uri_PROPERTY_DOMAIN = (int)3L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_DOMAIN = 3
     * }
     */
    public static int Uri_PROPERTY_DOMAIN() {
        return Uri_PROPERTY_DOMAIN;
    }
    private static final int Uri_PROPERTY_EXTENSION = (int)4L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_EXTENSION = 4
     * }
     */
    public static int Uri_PROPERTY_EXTENSION() {
        return Uri_PROPERTY_EXTENSION;
    }
    private static final int Uri_PROPERTY_FRAGMENT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_FRAGMENT = 5
     * }
     */
    public static int Uri_PROPERTY_FRAGMENT() {
        return Uri_PROPERTY_FRAGMENT;
    }
    private static final int Uri_PROPERTY_HOST = (int)6L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_HOST = 6
     * }
     */
    public static int Uri_PROPERTY_HOST() {
        return Uri_PROPERTY_HOST;
    }
    private static final int Uri_PROPERTY_PASSWORD = (int)7L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_PASSWORD = 7
     * }
     */
    public static int Uri_PROPERTY_PASSWORD() {
        return Uri_PROPERTY_PASSWORD;
    }
    private static final int Uri_PROPERTY_PATH = (int)8L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_PATH = 8
     * }
     */
    public static int Uri_PROPERTY_PATH() {
        return Uri_PROPERTY_PATH;
    }
    private static final int Uri_PROPERTY_PATH_AND_QUERY = (int)9L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_PATH_AND_QUERY = 9
     * }
     */
    public static int Uri_PROPERTY_PATH_AND_QUERY() {
        return Uri_PROPERTY_PATH_AND_QUERY;
    }
    private static final int Uri_PROPERTY_QUERY = (int)10L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_QUERY = 10
     * }
     */
    public static int Uri_PROPERTY_QUERY() {
        return Uri_PROPERTY_QUERY;
    }
    private static final int Uri_PROPERTY_RAW_URI = (int)11L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_RAW_URI = 11
     * }
     */
    public static int Uri_PROPERTY_RAW_URI() {
        return Uri_PROPERTY_RAW_URI;
    }
    private static final int Uri_PROPERTY_SCHEME_NAME = (int)12L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_SCHEME_NAME = 12
     * }
     */
    public static int Uri_PROPERTY_SCHEME_NAME() {
        return Uri_PROPERTY_SCHEME_NAME;
    }
    private static final int Uri_PROPERTY_USER_INFO = (int)13L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_USER_INFO = 13
     * }
     */
    public static int Uri_PROPERTY_USER_INFO() {
        return Uri_PROPERTY_USER_INFO;
    }
    private static final int Uri_PROPERTY_USER_NAME = (int)14L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_USER_NAME = 14
     * }
     */
    public static int Uri_PROPERTY_USER_NAME() {
        return Uri_PROPERTY_USER_NAME;
    }
    private static final int Uri_PROPERTY_STRING_LAST = (int)14L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_STRING_LAST = 14
     * }
     */
    public static int Uri_PROPERTY_STRING_LAST() {
        return Uri_PROPERTY_STRING_LAST;
    }
    private static final int Uri_PROPERTY_HOST_TYPE = (int)15L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_HOST_TYPE = 15
     * }
     */
    public static int Uri_PROPERTY_HOST_TYPE() {
        return Uri_PROPERTY_HOST_TYPE;
    }
    private static final int Uri_PROPERTY_DWORD_START = (int)15L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_DWORD_START = 15
     * }
     */
    public static int Uri_PROPERTY_DWORD_START() {
        return Uri_PROPERTY_DWORD_START;
    }
    private static final int Uri_PROPERTY_PORT = (int)16L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_PORT = 16
     * }
     */
    public static int Uri_PROPERTY_PORT() {
        return Uri_PROPERTY_PORT;
    }
    private static final int Uri_PROPERTY_SCHEME = (int)17L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_SCHEME = 17
     * }
     */
    public static int Uri_PROPERTY_SCHEME() {
        return Uri_PROPERTY_SCHEME;
    }
    private static final int Uri_PROPERTY_ZONE = (int)18L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_ZONE = 18
     * }
     */
    public static int Uri_PROPERTY_ZONE() {
        return Uri_PROPERTY_ZONE;
    }
    private static final int Uri_PROPERTY_DWORD_LAST = (int)18L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0001.Uri_PROPERTY_DWORD_LAST = 18
     * }
     */
    public static int Uri_PROPERTY_DWORD_LAST() {
        return Uri_PROPERTY_DWORD_LAST;
    }
    private static final int Uri_HOST_UNKNOWN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0002.Uri_HOST_UNKNOWN = 0
     * }
     */
    public static int Uri_HOST_UNKNOWN() {
        return Uri_HOST_UNKNOWN;
    }
    private static final int Uri_HOST_DNS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0002.Uri_HOST_DNS = 1
     * }
     */
    public static int Uri_HOST_DNS() {
        return Uri_HOST_DNS;
    }
    private static final int Uri_HOST_IPV4 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0002.Uri_HOST_IPV4 = 2
     * }
     */
    public static int Uri_HOST_IPV4() {
        return Uri_HOST_IPV4;
    }
    private static final int Uri_HOST_IPV6 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0002.Uri_HOST_IPV6 = 3
     * }
     */
    public static int Uri_HOST_IPV6() {
        return Uri_HOST_IPV6;
    }
    private static final int Uri_HOST_IDN = (int)4L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IUri_0002.Uri_HOST_IDN = 4
     * }
     */
    public static int Uri_HOST_IDN() {
        return Uri_HOST_IDN;
    }

    private static class IID_IUri$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IUri").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUri
     * }
     */
    public static GroupLayout IID_IUri$layout() {
        return IID_IUri$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUri
     * }
     */
    public static MemorySegment IID_IUri() {
        return IID_IUri$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUri
     * }
     */
    public static void IID_IUri(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IUri$constants.SEGMENT, 0L, IID_IUri$constants.LAYOUT.byteSize());
    }

    private static class CreateUri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CreateUri");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateUri(LPCWSTR pwzURI, DWORD dwFlags, DWORD_PTR dwReserved, IUri **ppURI)
     * }
     */
    public static FunctionDescriptor CreateUri$descriptor() {
        return CreateUri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateUri(LPCWSTR pwzURI, DWORD dwFlags, DWORD_PTR dwReserved, IUri **ppURI)
     * }
     */
    public static MethodHandle CreateUri$handle() {
        return CreateUri.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CreateUri(LPCWSTR pwzURI, DWORD dwFlags, DWORD_PTR dwReserved, IUri **ppURI)
     * }
     */
    public static MemorySegment CreateUri$address() {
        return CreateUri.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CreateUri(LPCWSTR pwzURI, DWORD dwFlags, DWORD_PTR dwReserved, IUri **ppURI)
     * }
     */
    public static int CreateUri(MemorySegment pwzURI, int dwFlags, long dwReserved, MemorySegment ppURI) {
        var mh$ = CreateUri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateUri", pwzURI, dwFlags, dwReserved, ppURI);
            }
            return (int)mh$.invokeExact(pwzURI, dwFlags, dwReserved, ppURI);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateUriWithFragment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CreateUriWithFragment");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateUriWithFragment(LPCWSTR pwzURI, LPCWSTR pwzFragment, DWORD dwFlags, DWORD_PTR dwReserved, IUri **ppURI)
     * }
     */
    public static FunctionDescriptor CreateUriWithFragment$descriptor() {
        return CreateUriWithFragment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateUriWithFragment(LPCWSTR pwzURI, LPCWSTR pwzFragment, DWORD dwFlags, DWORD_PTR dwReserved, IUri **ppURI)
     * }
     */
    public static MethodHandle CreateUriWithFragment$handle() {
        return CreateUriWithFragment.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CreateUriWithFragment(LPCWSTR pwzURI, LPCWSTR pwzFragment, DWORD dwFlags, DWORD_PTR dwReserved, IUri **ppURI)
     * }
     */
    public static MemorySegment CreateUriWithFragment$address() {
        return CreateUriWithFragment.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CreateUriWithFragment(LPCWSTR pwzURI, LPCWSTR pwzFragment, DWORD dwFlags, DWORD_PTR dwReserved, IUri **ppURI)
     * }
     */
    public static int CreateUriWithFragment(MemorySegment pwzURI, MemorySegment pwzFragment, int dwFlags, long dwReserved, MemorySegment ppURI) {
        var mh$ = CreateUriWithFragment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateUriWithFragment", pwzURI, pwzFragment, dwFlags, dwReserved, ppURI);
            }
            return (int)mh$.invokeExact(pwzURI, pwzFragment, dwFlags, dwReserved, ppURI);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateUriFromMultiByteString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CreateUriFromMultiByteString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateUriFromMultiByteString(LPCSTR pszANSIInputUri, DWORD dwEncodingFlags, DWORD dwCodePage, DWORD dwCreateFlags, DWORD_PTR dwReserved, IUri **ppUri)
     * }
     */
    public static FunctionDescriptor CreateUriFromMultiByteString$descriptor() {
        return CreateUriFromMultiByteString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateUriFromMultiByteString(LPCSTR pszANSIInputUri, DWORD dwEncodingFlags, DWORD dwCodePage, DWORD dwCreateFlags, DWORD_PTR dwReserved, IUri **ppUri)
     * }
     */
    public static MethodHandle CreateUriFromMultiByteString$handle() {
        return CreateUriFromMultiByteString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CreateUriFromMultiByteString(LPCSTR pszANSIInputUri, DWORD dwEncodingFlags, DWORD dwCodePage, DWORD dwCreateFlags, DWORD_PTR dwReserved, IUri **ppUri)
     * }
     */
    public static MemorySegment CreateUriFromMultiByteString$address() {
        return CreateUriFromMultiByteString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CreateUriFromMultiByteString(LPCSTR pszANSIInputUri, DWORD dwEncodingFlags, DWORD dwCodePage, DWORD dwCreateFlags, DWORD_PTR dwReserved, IUri **ppUri)
     * }
     */
    public static int CreateUriFromMultiByteString(MemorySegment pszANSIInputUri, int dwEncodingFlags, int dwCodePage, int dwCreateFlags, long dwReserved, MemorySegment ppUri) {
        var mh$ = CreateUriFromMultiByteString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateUriFromMultiByteString", pszANSIInputUri, dwEncodingFlags, dwCodePage, dwCreateFlags, dwReserved, ppUri);
            }
            return (int)mh$.invokeExact(pszANSIInputUri, dwEncodingFlags, dwCodePage, dwCreateFlags, dwReserved, ppUri);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IUriContainer$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IUriContainer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUriContainer
     * }
     */
    public static GroupLayout IID_IUriContainer$layout() {
        return IID_IUriContainer$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUriContainer
     * }
     */
    public static MemorySegment IID_IUriContainer() {
        return IID_IUriContainer$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUriContainer
     * }
     */
    public static void IID_IUriContainer(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IUriContainer$constants.SEGMENT, 0L, IID_IUriContainer$constants.LAYOUT.byteSize());
    }

    private static class IID_IUriBuilder$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IUriBuilder").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUriBuilder
     * }
     */
    public static GroupLayout IID_IUriBuilder$layout() {
        return IID_IUriBuilder$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUriBuilder
     * }
     */
    public static MemorySegment IID_IUriBuilder() {
        return IID_IUriBuilder$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUriBuilder
     * }
     */
    public static void IID_IUriBuilder(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IUriBuilder$constants.SEGMENT, 0L, IID_IUriBuilder$constants.LAYOUT.byteSize());
    }

    private static class IID_IUriBuilderFactory$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IUriBuilderFactory").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUriBuilderFactory
     * }
     */
    public static GroupLayout IID_IUriBuilderFactory$layout() {
        return IID_IUriBuilderFactory$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUriBuilderFactory
     * }
     */
    public static MemorySegment IID_IUriBuilderFactory() {
        return IID_IUriBuilderFactory$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUriBuilderFactory
     * }
     */
    public static void IID_IUriBuilderFactory(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IUriBuilderFactory$constants.SEGMENT, 0L, IID_IUriBuilderFactory$constants.LAYOUT.byteSize());
    }

    private static class CreateIUriBuilder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CreateIUriBuilder");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateIUriBuilder(IUri *pIUri, DWORD dwFlags, DWORD_PTR dwReserved, IUriBuilder **ppIUriBuilder)
     * }
     */
    public static FunctionDescriptor CreateIUriBuilder$descriptor() {
        return CreateIUriBuilder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateIUriBuilder(IUri *pIUri, DWORD dwFlags, DWORD_PTR dwReserved, IUriBuilder **ppIUriBuilder)
     * }
     */
    public static MethodHandle CreateIUriBuilder$handle() {
        return CreateIUriBuilder.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CreateIUriBuilder(IUri *pIUri, DWORD dwFlags, DWORD_PTR dwReserved, IUriBuilder **ppIUriBuilder)
     * }
     */
    public static MemorySegment CreateIUriBuilder$address() {
        return CreateIUriBuilder.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CreateIUriBuilder(IUri *pIUri, DWORD dwFlags, DWORD_PTR dwReserved, IUriBuilder **ppIUriBuilder)
     * }
     */
    public static int CreateIUriBuilder(MemorySegment pIUri, int dwFlags, long dwReserved, MemorySegment ppIUriBuilder) {
        var mh$ = CreateIUriBuilder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateIUriBuilder", pIUri, dwFlags, dwReserved, ppIUriBuilder);
            }
            return (int)mh$.invokeExact(pIUri, dwFlags, dwReserved, ppIUriBuilder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IWinInetInfo *LPWININETINFO
     * }
     */
    public static final AddressLayout LPWININETINFO = wgl_h.C_POINTER;

    private static class IID_IWinInetInfo$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IWinInetInfo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWinInetInfo
     * }
     */
    public static GroupLayout IID_IWinInetInfo$layout() {
        return IID_IWinInetInfo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWinInetInfo
     * }
     */
    public static MemorySegment IID_IWinInetInfo() {
        return IID_IWinInetInfo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWinInetInfo
     * }
     */
    public static void IID_IWinInetInfo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IWinInetInfo$constants.SEGMENT, 0L, IID_IWinInetInfo$constants.LAYOUT.byteSize());
    }

    private static class IWinInetInfo_RemoteQueryOption_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IWinInetInfo_RemoteQueryOption_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IWinInetInfo_RemoteQueryOption_Proxy(IWinInetInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf)
     * }
     */
    public static FunctionDescriptor IWinInetInfo_RemoteQueryOption_Proxy$descriptor() {
        return IWinInetInfo_RemoteQueryOption_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IWinInetInfo_RemoteQueryOption_Proxy(IWinInetInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf)
     * }
     */
    public static MethodHandle IWinInetInfo_RemoteQueryOption_Proxy$handle() {
        return IWinInetInfo_RemoteQueryOption_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IWinInetInfo_RemoteQueryOption_Proxy(IWinInetInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf)
     * }
     */
    public static MemorySegment IWinInetInfo_RemoteQueryOption_Proxy$address() {
        return IWinInetInfo_RemoteQueryOption_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IWinInetInfo_RemoteQueryOption_Proxy(IWinInetInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf)
     * }
     */
    public static int IWinInetInfo_RemoteQueryOption_Proxy(MemorySegment This, int dwOption, MemorySegment pBuffer, MemorySegment pcbBuf) {
        var mh$ = IWinInetInfo_RemoteQueryOption_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IWinInetInfo_RemoteQueryOption_Proxy", This, dwOption, pBuffer, pcbBuf);
            }
            return (int)mh$.invokeExact(This, dwOption, pBuffer, pcbBuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IWinInetInfo_RemoteQueryOption_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IWinInetInfo_RemoteQueryOption_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IWinInetInfo_RemoteQueryOption_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IWinInetInfo_RemoteQueryOption_Stub$descriptor() {
        return IWinInetInfo_RemoteQueryOption_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IWinInetInfo_RemoteQueryOption_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IWinInetInfo_RemoteQueryOption_Stub$handle() {
        return IWinInetInfo_RemoteQueryOption_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IWinInetInfo_RemoteQueryOption_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IWinInetInfo_RemoteQueryOption_Stub$address() {
        return IWinInetInfo_RemoteQueryOption_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IWinInetInfo_RemoteQueryOption_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IWinInetInfo_RemoteQueryOption_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IWinInetInfo_RemoteQueryOption_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IWinInetInfo_RemoteQueryOption_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IHttpSecurity *LPHTTPSECURITY
     * }
     */
    public static final AddressLayout LPHTTPSECURITY = wgl_h.C_POINTER;

    private static class IID_IHttpSecurity$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IHttpSecurity").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IHttpSecurity
     * }
     */
    public static GroupLayout IID_IHttpSecurity$layout() {
        return IID_IHttpSecurity$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IHttpSecurity
     * }
     */
    public static MemorySegment IID_IHttpSecurity() {
        return IID_IHttpSecurity$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IHttpSecurity
     * }
     */
    public static void IID_IHttpSecurity(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IHttpSecurity$constants.SEGMENT, 0L, IID_IHttpSecurity$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IWinInetHttpInfo *LPWININETHTTPINFO
     * }
     */
    public static final AddressLayout LPWININETHTTPINFO = wgl_h.C_POINTER;

    private static class IID_IWinInetHttpInfo$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IWinInetHttpInfo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWinInetHttpInfo
     * }
     */
    public static GroupLayout IID_IWinInetHttpInfo$layout() {
        return IID_IWinInetHttpInfo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWinInetHttpInfo
     * }
     */
    public static MemorySegment IID_IWinInetHttpInfo() {
        return IID_IWinInetHttpInfo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWinInetHttpInfo
     * }
     */
    public static void IID_IWinInetHttpInfo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IWinInetHttpInfo$constants.SEGMENT, 0L, IID_IWinInetHttpInfo$constants.LAYOUT.byteSize());
    }

    private static class IWinInetHttpInfo_RemoteQueryInfo_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IWinInetHttpInfo_RemoteQueryInfo_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IWinInetHttpInfo_RemoteQueryInfo_Proxy(IWinInetHttpInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved)
     * }
     */
    public static FunctionDescriptor IWinInetHttpInfo_RemoteQueryInfo_Proxy$descriptor() {
        return IWinInetHttpInfo_RemoteQueryInfo_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IWinInetHttpInfo_RemoteQueryInfo_Proxy(IWinInetHttpInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved)
     * }
     */
    public static MethodHandle IWinInetHttpInfo_RemoteQueryInfo_Proxy$handle() {
        return IWinInetHttpInfo_RemoteQueryInfo_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IWinInetHttpInfo_RemoteQueryInfo_Proxy(IWinInetHttpInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved)
     * }
     */
    public static MemorySegment IWinInetHttpInfo_RemoteQueryInfo_Proxy$address() {
        return IWinInetHttpInfo_RemoteQueryInfo_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IWinInetHttpInfo_RemoteQueryInfo_Proxy(IWinInetHttpInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved)
     * }
     */
    public static int IWinInetHttpInfo_RemoteQueryInfo_Proxy(MemorySegment This, int dwOption, MemorySegment pBuffer, MemorySegment pcbBuf, MemorySegment pdwFlags, MemorySegment pdwReserved) {
        var mh$ = IWinInetHttpInfo_RemoteQueryInfo_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IWinInetHttpInfo_RemoteQueryInfo_Proxy", This, dwOption, pBuffer, pcbBuf, pdwFlags, pdwReserved);
            }
            return (int)mh$.invokeExact(This, dwOption, pBuffer, pcbBuf, pdwFlags, pdwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IWinInetHttpInfo_RemoteQueryInfo_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IWinInetHttpInfo_RemoteQueryInfo_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IWinInetHttpInfo_RemoteQueryInfo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IWinInetHttpInfo_RemoteQueryInfo_Stub$descriptor() {
        return IWinInetHttpInfo_RemoteQueryInfo_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IWinInetHttpInfo_RemoteQueryInfo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IWinInetHttpInfo_RemoteQueryInfo_Stub$handle() {
        return IWinInetHttpInfo_RemoteQueryInfo_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IWinInetHttpInfo_RemoteQueryInfo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IWinInetHttpInfo_RemoteQueryInfo_Stub$address() {
        return IWinInetHttpInfo_RemoteQueryInfo_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IWinInetHttpInfo_RemoteQueryInfo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IWinInetHttpInfo_RemoteQueryInfo_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IWinInetHttpInfo_RemoteQueryInfo_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IWinInetHttpInfo_RemoteQueryInfo_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IWinInetHttpTimeouts$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IWinInetHttpTimeouts").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWinInetHttpTimeouts
     * }
     */
    public static GroupLayout IID_IWinInetHttpTimeouts$layout() {
        return IID_IWinInetHttpTimeouts$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWinInetHttpTimeouts
     * }
     */
    public static MemorySegment IID_IWinInetHttpTimeouts() {
        return IID_IWinInetHttpTimeouts$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWinInetHttpTimeouts
     * }
     */
    public static void IID_IWinInetHttpTimeouts(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IWinInetHttpTimeouts$constants.SEGMENT, 0L, IID_IWinInetHttpTimeouts$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IWinInetCacheHints *LPWININETCACHEHINTS
     * }
     */
    public static final AddressLayout LPWININETCACHEHINTS = wgl_h.C_POINTER;

    private static class IID_IWinInetCacheHints$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IWinInetCacheHints").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWinInetCacheHints
     * }
     */
    public static GroupLayout IID_IWinInetCacheHints$layout() {
        return IID_IWinInetCacheHints$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWinInetCacheHints
     * }
     */
    public static MemorySegment IID_IWinInetCacheHints() {
        return IID_IWinInetCacheHints$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWinInetCacheHints
     * }
     */
    public static void IID_IWinInetCacheHints(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IWinInetCacheHints$constants.SEGMENT, 0L, IID_IWinInetCacheHints$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IWinInetCacheHints2 *LPWININETCACHEHINTS2
     * }
     */
    public static final AddressLayout LPWININETCACHEHINTS2 = wgl_h.C_POINTER;

    private static class IID_IWinInetCacheHints2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IWinInetCacheHints2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWinInetCacheHints2
     * }
     */
    public static GroupLayout IID_IWinInetCacheHints2$layout() {
        return IID_IWinInetCacheHints2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWinInetCacheHints2
     * }
     */
    public static MemorySegment IID_IWinInetCacheHints2() {
        return IID_IWinInetCacheHints2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWinInetCacheHints2
     * }
     */
    public static void IID_IWinInetCacheHints2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IWinInetCacheHints2$constants.SEGMENT, 0L, IID_IWinInetCacheHints2$constants.LAYOUT.byteSize());
    }

    private static class SID_BindHost$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("SID_BindHost").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID SID_BindHost
     * }
     */
    public static GroupLayout SID_BindHost$layout() {
        return SID_BindHost$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID SID_BindHost
     * }
     */
    public static MemorySegment SID_BindHost() {
        return SID_BindHost$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID SID_BindHost
     * }
     */
    public static void SID_BindHost(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, SID_BindHost$constants.SEGMENT, 0L, SID_BindHost$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IBindHost *LPBINDHOST
     * }
     */
    public static final AddressLayout LPBINDHOST = wgl_h.C_POINTER;

    private static class IID_IBindHost$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IBindHost").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindHost
     * }
     */
    public static GroupLayout IID_IBindHost$layout() {
        return IID_IBindHost$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindHost
     * }
     */
    public static MemorySegment IID_IBindHost() {
        return IID_IBindHost$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindHost
     * }
     */
    public static void IID_IBindHost(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IBindHost$constants.SEGMENT, 0L, IID_IBindHost$constants.LAYOUT.byteSize());
    }

    private static class IBindHost_RemoteMonikerBindToStorage_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IBindHost_RemoteMonikerBindToStorage_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindHost_RemoteMonikerBindToStorage_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static FunctionDescriptor IBindHost_RemoteMonikerBindToStorage_Proxy$descriptor() {
        return IBindHost_RemoteMonikerBindToStorage_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindHost_RemoteMonikerBindToStorage_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static MethodHandle IBindHost_RemoteMonikerBindToStorage_Proxy$handle() {
        return IBindHost_RemoteMonikerBindToStorage_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBindHost_RemoteMonikerBindToStorage_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static MemorySegment IBindHost_RemoteMonikerBindToStorage_Proxy$address() {
        return IBindHost_RemoteMonikerBindToStorage_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBindHost_RemoteMonikerBindToStorage_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static int IBindHost_RemoteMonikerBindToStorage_Proxy(MemorySegment This, MemorySegment pMk, MemorySegment pBC, MemorySegment pBSC, MemorySegment riid, MemorySegment ppvObj) {
        var mh$ = IBindHost_RemoteMonikerBindToStorage_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindHost_RemoteMonikerBindToStorage_Proxy", This, pMk, pBC, pBSC, riid, ppvObj);
            }
            return (int)mh$.invokeExact(This, pMk, pBC, pBSC, riid, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindHost_RemoteMonikerBindToStorage_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IBindHost_RemoteMonikerBindToStorage_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IBindHost_RemoteMonikerBindToStorage_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IBindHost_RemoteMonikerBindToStorage_Stub$descriptor() {
        return IBindHost_RemoteMonikerBindToStorage_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IBindHost_RemoteMonikerBindToStorage_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IBindHost_RemoteMonikerBindToStorage_Stub$handle() {
        return IBindHost_RemoteMonikerBindToStorage_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IBindHost_RemoteMonikerBindToStorage_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IBindHost_RemoteMonikerBindToStorage_Stub$address() {
        return IBindHost_RemoteMonikerBindToStorage_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IBindHost_RemoteMonikerBindToStorage_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IBindHost_RemoteMonikerBindToStorage_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IBindHost_RemoteMonikerBindToStorage_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindHost_RemoteMonikerBindToStorage_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindHost_RemoteMonikerBindToObject_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IBindHost_RemoteMonikerBindToObject_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindHost_RemoteMonikerBindToObject_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static FunctionDescriptor IBindHost_RemoteMonikerBindToObject_Proxy$descriptor() {
        return IBindHost_RemoteMonikerBindToObject_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindHost_RemoteMonikerBindToObject_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static MethodHandle IBindHost_RemoteMonikerBindToObject_Proxy$handle() {
        return IBindHost_RemoteMonikerBindToObject_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBindHost_RemoteMonikerBindToObject_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static MemorySegment IBindHost_RemoteMonikerBindToObject_Proxy$address() {
        return IBindHost_RemoteMonikerBindToObject_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBindHost_RemoteMonikerBindToObject_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static int IBindHost_RemoteMonikerBindToObject_Proxy(MemorySegment This, MemorySegment pMk, MemorySegment pBC, MemorySegment pBSC, MemorySegment riid, MemorySegment ppvObj) {
        var mh$ = IBindHost_RemoteMonikerBindToObject_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindHost_RemoteMonikerBindToObject_Proxy", This, pMk, pBC, pBSC, riid, ppvObj);
            }
            return (int)mh$.invokeExact(This, pMk, pBC, pBSC, riid, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindHost_RemoteMonikerBindToObject_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IBindHost_RemoteMonikerBindToObject_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IBindHost_RemoteMonikerBindToObject_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IBindHost_RemoteMonikerBindToObject_Stub$descriptor() {
        return IBindHost_RemoteMonikerBindToObject_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IBindHost_RemoteMonikerBindToObject_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IBindHost_RemoteMonikerBindToObject_Stub$handle() {
        return IBindHost_RemoteMonikerBindToObject_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IBindHost_RemoteMonikerBindToObject_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IBindHost_RemoteMonikerBindToObject_Stub$address() {
        return IBindHost_RemoteMonikerBindToObject_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IBindHost_RemoteMonikerBindToObject_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IBindHost_RemoteMonikerBindToObject_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IBindHost_RemoteMonikerBindToObject_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindHost_RemoteMonikerBindToObject_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HlinkSimpleNavigateToString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HlinkSimpleNavigateToString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT HlinkSimpleNavigateToString(LPCWSTR szTarget, LPCWSTR szLocation, LPCWSTR szTargetFrameName, IUnknown *pUnk, IBindCtx *pbc, IBindStatusCallback *, DWORD grfHLNF, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor HlinkSimpleNavigateToString$descriptor() {
        return HlinkSimpleNavigateToString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT HlinkSimpleNavigateToString(LPCWSTR szTarget, LPCWSTR szLocation, LPCWSTR szTargetFrameName, IUnknown *pUnk, IBindCtx *pbc, IBindStatusCallback *, DWORD grfHLNF, DWORD dwReserved)
     * }
     */
    public static MethodHandle HlinkSimpleNavigateToString$handle() {
        return HlinkSimpleNavigateToString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT HlinkSimpleNavigateToString(LPCWSTR szTarget, LPCWSTR szLocation, LPCWSTR szTargetFrameName, IUnknown *pUnk, IBindCtx *pbc, IBindStatusCallback *, DWORD grfHLNF, DWORD dwReserved)
     * }
     */
    public static MemorySegment HlinkSimpleNavigateToString$address() {
        return HlinkSimpleNavigateToString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT HlinkSimpleNavigateToString(LPCWSTR szTarget, LPCWSTR szLocation, LPCWSTR szTargetFrameName, IUnknown *pUnk, IBindCtx *pbc, IBindStatusCallback *, DWORD grfHLNF, DWORD dwReserved)
     * }
     */
    public static int HlinkSimpleNavigateToString(MemorySegment szTarget, MemorySegment szLocation, MemorySegment szTargetFrameName, MemorySegment pUnk, MemorySegment pbc, MemorySegment x5, int grfHLNF, int dwReserved) {
        var mh$ = HlinkSimpleNavigateToString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HlinkSimpleNavigateToString", szTarget, szLocation, szTargetFrameName, pUnk, pbc, x5, grfHLNF, dwReserved);
            }
            return (int)mh$.invokeExact(szTarget, szLocation, szTargetFrameName, pUnk, pbc, x5, grfHLNF, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HlinkSimpleNavigateToMoniker {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HlinkSimpleNavigateToMoniker");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT HlinkSimpleNavigateToMoniker(IMoniker *pmkTarget, LPCWSTR szLocation, LPCWSTR szTargetFrameName, IUnknown *pUnk, IBindCtx *pbc, IBindStatusCallback *, DWORD grfHLNF, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor HlinkSimpleNavigateToMoniker$descriptor() {
        return HlinkSimpleNavigateToMoniker.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT HlinkSimpleNavigateToMoniker(IMoniker *pmkTarget, LPCWSTR szLocation, LPCWSTR szTargetFrameName, IUnknown *pUnk, IBindCtx *pbc, IBindStatusCallback *, DWORD grfHLNF, DWORD dwReserved)
     * }
     */
    public static MethodHandle HlinkSimpleNavigateToMoniker$handle() {
        return HlinkSimpleNavigateToMoniker.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT HlinkSimpleNavigateToMoniker(IMoniker *pmkTarget, LPCWSTR szLocation, LPCWSTR szTargetFrameName, IUnknown *pUnk, IBindCtx *pbc, IBindStatusCallback *, DWORD grfHLNF, DWORD dwReserved)
     * }
     */
    public static MemorySegment HlinkSimpleNavigateToMoniker$address() {
        return HlinkSimpleNavigateToMoniker.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT HlinkSimpleNavigateToMoniker(IMoniker *pmkTarget, LPCWSTR szLocation, LPCWSTR szTargetFrameName, IUnknown *pUnk, IBindCtx *pbc, IBindStatusCallback *, DWORD grfHLNF, DWORD dwReserved)
     * }
     */
    public static int HlinkSimpleNavigateToMoniker(MemorySegment pmkTarget, MemorySegment szLocation, MemorySegment szTargetFrameName, MemorySegment pUnk, MemorySegment pbc, MemorySegment x5, int grfHLNF, int dwReserved) {
        var mh$ = HlinkSimpleNavigateToMoniker.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HlinkSimpleNavigateToMoniker", pmkTarget, szLocation, szTargetFrameName, pUnk, pbc, x5, grfHLNF, dwReserved);
            }
            return (int)mh$.invokeExact(pmkTarget, szLocation, szTargetFrameName, pUnk, pbc, x5, grfHLNF, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class URLOpenStreamA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("URLOpenStreamA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT URLOpenStreamA(LPUNKNOWN, LPCSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static FunctionDescriptor URLOpenStreamA$descriptor() {
        return URLOpenStreamA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT URLOpenStreamA(LPUNKNOWN, LPCSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static MethodHandle URLOpenStreamA$handle() {
        return URLOpenStreamA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT URLOpenStreamA(LPUNKNOWN, LPCSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static MemorySegment URLOpenStreamA$address() {
        return URLOpenStreamA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT URLOpenStreamA(LPUNKNOWN, LPCSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static int URLOpenStreamA(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = URLOpenStreamA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("URLOpenStreamA", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class URLOpenStreamW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("URLOpenStreamW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT URLOpenStreamW(LPUNKNOWN, LPCWSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static FunctionDescriptor URLOpenStreamW$descriptor() {
        return URLOpenStreamW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT URLOpenStreamW(LPUNKNOWN, LPCWSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static MethodHandle URLOpenStreamW$handle() {
        return URLOpenStreamW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT URLOpenStreamW(LPUNKNOWN, LPCWSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static MemorySegment URLOpenStreamW$address() {
        return URLOpenStreamW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT URLOpenStreamW(LPUNKNOWN, LPCWSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static int URLOpenStreamW(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = URLOpenStreamW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("URLOpenStreamW", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class URLOpenPullStreamA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("URLOpenPullStreamA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT URLOpenPullStreamA(LPUNKNOWN, LPCSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static FunctionDescriptor URLOpenPullStreamA$descriptor() {
        return URLOpenPullStreamA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT URLOpenPullStreamA(LPUNKNOWN, LPCSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static MethodHandle URLOpenPullStreamA$handle() {
        return URLOpenPullStreamA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT URLOpenPullStreamA(LPUNKNOWN, LPCSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static MemorySegment URLOpenPullStreamA$address() {
        return URLOpenPullStreamA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT URLOpenPullStreamA(LPUNKNOWN, LPCSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static int URLOpenPullStreamA(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = URLOpenPullStreamA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("URLOpenPullStreamA", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class URLOpenPullStreamW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("URLOpenPullStreamW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT URLOpenPullStreamW(LPUNKNOWN, LPCWSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static FunctionDescriptor URLOpenPullStreamW$descriptor() {
        return URLOpenPullStreamW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT URLOpenPullStreamW(LPUNKNOWN, LPCWSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static MethodHandle URLOpenPullStreamW$handle() {
        return URLOpenPullStreamW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT URLOpenPullStreamW(LPUNKNOWN, LPCWSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static MemorySegment URLOpenPullStreamW$address() {
        return URLOpenPullStreamW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT URLOpenPullStreamW(LPUNKNOWN, LPCWSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static int URLOpenPullStreamW(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = URLOpenPullStreamW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("URLOpenPullStreamW", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class URLDownloadToFileA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("URLDownloadToFileA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT URLDownloadToFileA(LPUNKNOWN, LPCSTR, LPCSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static FunctionDescriptor URLDownloadToFileA$descriptor() {
        return URLDownloadToFileA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT URLDownloadToFileA(LPUNKNOWN, LPCSTR, LPCSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static MethodHandle URLDownloadToFileA$handle() {
        return URLDownloadToFileA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT URLDownloadToFileA(LPUNKNOWN, LPCSTR, LPCSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static MemorySegment URLDownloadToFileA$address() {
        return URLDownloadToFileA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT URLDownloadToFileA(LPUNKNOWN, LPCSTR, LPCSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static int URLDownloadToFileA(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, MemorySegment x4) {
        var mh$ = URLDownloadToFileA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("URLDownloadToFileA", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class URLDownloadToFileW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("URLDownloadToFileW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT URLDownloadToFileW(LPUNKNOWN, LPCWSTR, LPCWSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static FunctionDescriptor URLDownloadToFileW$descriptor() {
        return URLDownloadToFileW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT URLDownloadToFileW(LPUNKNOWN, LPCWSTR, LPCWSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static MethodHandle URLDownloadToFileW$handle() {
        return URLDownloadToFileW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT URLDownloadToFileW(LPUNKNOWN, LPCWSTR, LPCWSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static MemorySegment URLDownloadToFileW$address() {
        return URLDownloadToFileW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT URLDownloadToFileW(LPUNKNOWN, LPCWSTR, LPCWSTR, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static int URLDownloadToFileW(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, MemorySegment x4) {
        var mh$ = URLDownloadToFileW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("URLDownloadToFileW", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class URLDownloadToCacheFileA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("URLDownloadToCacheFileA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT URLDownloadToCacheFileA(LPUNKNOWN, LPCSTR, LPSTR, DWORD cchFileName, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static FunctionDescriptor URLDownloadToCacheFileA$descriptor() {
        return URLDownloadToCacheFileA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT URLDownloadToCacheFileA(LPUNKNOWN, LPCSTR, LPSTR, DWORD cchFileName, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static MethodHandle URLDownloadToCacheFileA$handle() {
        return URLDownloadToCacheFileA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT URLDownloadToCacheFileA(LPUNKNOWN, LPCSTR, LPSTR, DWORD cchFileName, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static MemorySegment URLDownloadToCacheFileA$address() {
        return URLDownloadToCacheFileA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT URLDownloadToCacheFileA(LPUNKNOWN, LPCSTR, LPSTR, DWORD cchFileName, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static int URLDownloadToCacheFileA(MemorySegment x0, MemorySegment x1, MemorySegment x2, int cchFileName, int x4, MemorySegment x5) {
        var mh$ = URLDownloadToCacheFileA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("URLDownloadToCacheFileA", x0, x1, x2, cchFileName, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, cchFileName, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class URLDownloadToCacheFileW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("URLDownloadToCacheFileW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT URLDownloadToCacheFileW(LPUNKNOWN, LPCWSTR, LPWSTR, DWORD cchFileName, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static FunctionDescriptor URLDownloadToCacheFileW$descriptor() {
        return URLDownloadToCacheFileW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT URLDownloadToCacheFileW(LPUNKNOWN, LPCWSTR, LPWSTR, DWORD cchFileName, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static MethodHandle URLDownloadToCacheFileW$handle() {
        return URLDownloadToCacheFileW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT URLDownloadToCacheFileW(LPUNKNOWN, LPCWSTR, LPWSTR, DWORD cchFileName, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static MemorySegment URLDownloadToCacheFileW$address() {
        return URLDownloadToCacheFileW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT URLDownloadToCacheFileW(LPUNKNOWN, LPCWSTR, LPWSTR, DWORD cchFileName, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static int URLDownloadToCacheFileW(MemorySegment x0, MemorySegment x1, MemorySegment x2, int cchFileName, int x4, MemorySegment x5) {
        var mh$ = URLDownloadToCacheFileW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("URLDownloadToCacheFileW", x0, x1, x2, cchFileName, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, cchFileName, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class URLOpenBlockingStreamA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("URLOpenBlockingStreamA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT URLOpenBlockingStreamA(LPUNKNOWN, LPCSTR, LPSTREAM *, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static FunctionDescriptor URLOpenBlockingStreamA$descriptor() {
        return URLOpenBlockingStreamA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT URLOpenBlockingStreamA(LPUNKNOWN, LPCSTR, LPSTREAM *, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static MethodHandle URLOpenBlockingStreamA$handle() {
        return URLOpenBlockingStreamA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT URLOpenBlockingStreamA(LPUNKNOWN, LPCSTR, LPSTREAM *, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static MemorySegment URLOpenBlockingStreamA$address() {
        return URLOpenBlockingStreamA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT URLOpenBlockingStreamA(LPUNKNOWN, LPCSTR, LPSTREAM *, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static int URLOpenBlockingStreamA(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, MemorySegment x4) {
        var mh$ = URLOpenBlockingStreamA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("URLOpenBlockingStreamA", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class URLOpenBlockingStreamW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("URLOpenBlockingStreamW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT URLOpenBlockingStreamW(LPUNKNOWN, LPCWSTR, LPSTREAM *, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static FunctionDescriptor URLOpenBlockingStreamW$descriptor() {
        return URLOpenBlockingStreamW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT URLOpenBlockingStreamW(LPUNKNOWN, LPCWSTR, LPSTREAM *, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static MethodHandle URLOpenBlockingStreamW$handle() {
        return URLOpenBlockingStreamW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT URLOpenBlockingStreamW(LPUNKNOWN, LPCWSTR, LPSTREAM *, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static MemorySegment URLOpenBlockingStreamW$address() {
        return URLOpenBlockingStreamW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT URLOpenBlockingStreamW(LPUNKNOWN, LPCWSTR, LPSTREAM *, DWORD, LPBINDSTATUSCALLBACK)
     * }
     */
    public static int URLOpenBlockingStreamW(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, MemorySegment x4) {
        var mh$ = URLOpenBlockingStreamW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("URLOpenBlockingStreamW", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HlinkGoBack {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HlinkGoBack");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT HlinkGoBack(IUnknown *pUnk)
     * }
     */
    public static FunctionDescriptor HlinkGoBack$descriptor() {
        return HlinkGoBack.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT HlinkGoBack(IUnknown *pUnk)
     * }
     */
    public static MethodHandle HlinkGoBack$handle() {
        return HlinkGoBack.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT HlinkGoBack(IUnknown *pUnk)
     * }
     */
    public static MemorySegment HlinkGoBack$address() {
        return HlinkGoBack.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT HlinkGoBack(IUnknown *pUnk)
     * }
     */
    public static int HlinkGoBack(MemorySegment pUnk) {
        var mh$ = HlinkGoBack.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HlinkGoBack", pUnk);
            }
            return (int)mh$.invokeExact(pUnk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HlinkGoForward {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HlinkGoForward");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT HlinkGoForward(IUnknown *pUnk)
     * }
     */
    public static FunctionDescriptor HlinkGoForward$descriptor() {
        return HlinkGoForward.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT HlinkGoForward(IUnknown *pUnk)
     * }
     */
    public static MethodHandle HlinkGoForward$handle() {
        return HlinkGoForward.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT HlinkGoForward(IUnknown *pUnk)
     * }
     */
    public static MemorySegment HlinkGoForward$address() {
        return HlinkGoForward.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT HlinkGoForward(IUnknown *pUnk)
     * }
     */
    public static int HlinkGoForward(MemorySegment pUnk) {
        var mh$ = HlinkGoForward.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HlinkGoForward", pUnk);
            }
            return (int)mh$.invokeExact(pUnk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HlinkNavigateString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HlinkNavigateString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT HlinkNavigateString(IUnknown *pUnk, LPCWSTR szTarget)
     * }
     */
    public static FunctionDescriptor HlinkNavigateString$descriptor() {
        return HlinkNavigateString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT HlinkNavigateString(IUnknown *pUnk, LPCWSTR szTarget)
     * }
     */
    public static MethodHandle HlinkNavigateString$handle() {
        return HlinkNavigateString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT HlinkNavigateString(IUnknown *pUnk, LPCWSTR szTarget)
     * }
     */
    public static MemorySegment HlinkNavigateString$address() {
        return HlinkNavigateString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT HlinkNavigateString(IUnknown *pUnk, LPCWSTR szTarget)
     * }
     */
    public static int HlinkNavigateString(MemorySegment pUnk, MemorySegment szTarget) {
        var mh$ = HlinkNavigateString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HlinkNavigateString", pUnk, szTarget);
            }
            return (int)mh$.invokeExact(pUnk, szTarget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HlinkNavigateMoniker {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HlinkNavigateMoniker");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT HlinkNavigateMoniker(IUnknown *pUnk, IMoniker *pmkTarget)
     * }
     */
    public static FunctionDescriptor HlinkNavigateMoniker$descriptor() {
        return HlinkNavigateMoniker.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT HlinkNavigateMoniker(IUnknown *pUnk, IMoniker *pmkTarget)
     * }
     */
    public static MethodHandle HlinkNavigateMoniker$handle() {
        return HlinkNavigateMoniker.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT HlinkNavigateMoniker(IUnknown *pUnk, IMoniker *pmkTarget)
     * }
     */
    public static MemorySegment HlinkNavigateMoniker$address() {
        return HlinkNavigateMoniker.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT HlinkNavigateMoniker(IUnknown *pUnk, IMoniker *pmkTarget)
     * }
     */
    public static int HlinkNavigateMoniker(MemorySegment pUnk, MemorySegment pmkTarget) {
        var mh$ = HlinkNavigateMoniker.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HlinkNavigateMoniker", pUnk, pmkTarget);
            }
            return (int)mh$.invokeExact(pUnk, pmkTarget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IInternet *LPIINTERNET
     * }
     */
    public static final AddressLayout LPIINTERNET = wgl_h.C_POINTER;

    private static class IID_IInternet$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IInternet").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternet
     * }
     */
    public static GroupLayout IID_IInternet$layout() {
        return IID_IInternet$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternet
     * }
     */
    public static MemorySegment IID_IInternet() {
        return IID_IInternet$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternet
     * }
     */
    public static void IID_IInternet(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternet$constants.SEGMENT, 0L, IID_IInternet$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IInternetBindInfo *LPIINTERNETBINDINFO
     * }
     */
    public static final AddressLayout LPIINTERNETBINDINFO = wgl_h.C_POINTER;
    private static final int BINDSTRING_HEADERS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_HEADERS = 1
     * }
     */
    public static int BINDSTRING_HEADERS() {
        return BINDSTRING_HEADERS;
    }
    private static final int BINDSTRING_ACCEPT_MIMES = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_ACCEPT_MIMES = 2
     * }
     */
    public static int BINDSTRING_ACCEPT_MIMES() {
        return BINDSTRING_ACCEPT_MIMES;
    }
    private static final int BINDSTRING_EXTRA_URL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_EXTRA_URL = 3
     * }
     */
    public static int BINDSTRING_EXTRA_URL() {
        return BINDSTRING_EXTRA_URL;
    }
    private static final int BINDSTRING_LANGUAGE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_LANGUAGE = 4
     * }
     */
    public static int BINDSTRING_LANGUAGE() {
        return BINDSTRING_LANGUAGE;
    }
    private static final int BINDSTRING_USERNAME = (int)5L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_USERNAME = 5
     * }
     */
    public static int BINDSTRING_USERNAME() {
        return BINDSTRING_USERNAME;
    }
    private static final int BINDSTRING_PASSWORD = (int)6L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_PASSWORD = 6
     * }
     */
    public static int BINDSTRING_PASSWORD() {
        return BINDSTRING_PASSWORD;
    }
    private static final int BINDSTRING_UA_PIXELS = (int)7L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_UA_PIXELS = 7
     * }
     */
    public static int BINDSTRING_UA_PIXELS() {
        return BINDSTRING_UA_PIXELS;
    }
    private static final int BINDSTRING_UA_COLOR = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_UA_COLOR = 8
     * }
     */
    public static int BINDSTRING_UA_COLOR() {
        return BINDSTRING_UA_COLOR;
    }
    private static final int BINDSTRING_OS = (int)9L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_OS = 9
     * }
     */
    public static int BINDSTRING_OS() {
        return BINDSTRING_OS;
    }
    private static final int BINDSTRING_USER_AGENT = (int)10L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_USER_AGENT = 10
     * }
     */
    public static int BINDSTRING_USER_AGENT() {
        return BINDSTRING_USER_AGENT;
    }
    private static final int BINDSTRING_ACCEPT_ENCODINGS = (int)11L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_ACCEPT_ENCODINGS = 11
     * }
     */
    public static int BINDSTRING_ACCEPT_ENCODINGS() {
        return BINDSTRING_ACCEPT_ENCODINGS;
    }
    private static final int BINDSTRING_POST_COOKIE = (int)12L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_POST_COOKIE = 12
     * }
     */
    public static int BINDSTRING_POST_COOKIE() {
        return BINDSTRING_POST_COOKIE;
    }
    private static final int BINDSTRING_POST_DATA_MIME = (int)13L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_POST_DATA_MIME = 13
     * }
     */
    public static int BINDSTRING_POST_DATA_MIME() {
        return BINDSTRING_POST_DATA_MIME;
    }
    private static final int BINDSTRING_URL = (int)14L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_URL = 14
     * }
     */
    public static int BINDSTRING_URL() {
        return BINDSTRING_URL;
    }
    private static final int BINDSTRING_IID = (int)15L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_IID = 15
     * }
     */
    public static int BINDSTRING_IID() {
        return BINDSTRING_IID;
    }
    private static final int BINDSTRING_FLAG_BIND_TO_OBJECT = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_FLAG_BIND_TO_OBJECT = 16
     * }
     */
    public static int BINDSTRING_FLAG_BIND_TO_OBJECT() {
        return BINDSTRING_FLAG_BIND_TO_OBJECT;
    }
    private static final int BINDSTRING_PTR_BIND_CONTEXT = (int)17L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_PTR_BIND_CONTEXT = 17
     * }
     */
    public static int BINDSTRING_PTR_BIND_CONTEXT() {
        return BINDSTRING_PTR_BIND_CONTEXT;
    }
    private static final int BINDSTRING_XDR_ORIGIN = (int)18L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_XDR_ORIGIN = 18
     * }
     */
    public static int BINDSTRING_XDR_ORIGIN() {
        return BINDSTRING_XDR_ORIGIN;
    }
    private static final int BINDSTRING_DOWNLOADPATH = (int)19L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_DOWNLOADPATH = 19
     * }
     */
    public static int BINDSTRING_DOWNLOADPATH() {
        return BINDSTRING_DOWNLOADPATH;
    }
    private static final int BINDSTRING_ROOTDOC_URL = (int)20L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_ROOTDOC_URL = 20
     * }
     */
    public static int BINDSTRING_ROOTDOC_URL() {
        return BINDSTRING_ROOTDOC_URL;
    }
    private static final int BINDSTRING_INITIAL_FILENAME = (int)21L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_INITIAL_FILENAME = 21
     * }
     */
    public static int BINDSTRING_INITIAL_FILENAME() {
        return BINDSTRING_INITIAL_FILENAME;
    }
    private static final int BINDSTRING_PROXY_USERNAME = (int)22L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_PROXY_USERNAME = 22
     * }
     */
    public static int BINDSTRING_PROXY_USERNAME() {
        return BINDSTRING_PROXY_USERNAME;
    }
    private static final int BINDSTRING_PROXY_PASSWORD = (int)23L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_PROXY_PASSWORD = 23
     * }
     */
    public static int BINDSTRING_PROXY_PASSWORD() {
        return BINDSTRING_PROXY_PASSWORD;
    }
    private static final int BINDSTRING_ENTERPRISE_ID = (int)24L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_ENTERPRISE_ID = 24
     * }
     */
    public static int BINDSTRING_ENTERPRISE_ID() {
        return BINDSTRING_ENTERPRISE_ID;
    }
    private static final int BINDSTRING_DOC_URL = (int)25L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_DOC_URL = 25
     * }
     */
    public static int BINDSTRING_DOC_URL() {
        return BINDSTRING_DOC_URL;
    }
    private static final int BINDSTRING_SAMESITE_COOKIE_LEVEL = (int)26L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTRING.BINDSTRING_SAMESITE_COOKIE_LEVEL = 26
     * }
     */
    public static int BINDSTRING_SAMESITE_COOKIE_LEVEL() {
        return BINDSTRING_SAMESITE_COOKIE_LEVEL;
    }

    private static class IID_IInternetBindInfo$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IInternetBindInfo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetBindInfo
     * }
     */
    public static GroupLayout IID_IInternetBindInfo$layout() {
        return IID_IInternetBindInfo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetBindInfo
     * }
     */
    public static MemorySegment IID_IInternetBindInfo() {
        return IID_IInternetBindInfo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetBindInfo
     * }
     */
    public static void IID_IInternetBindInfo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetBindInfo$constants.SEGMENT, 0L, IID_IInternetBindInfo$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IInternetBindInfoEx *LPIINTERNETBINDINFOEX
     * }
     */
    public static final AddressLayout LPIINTERNETBINDINFOEX = wgl_h.C_POINTER;

    private static class IID_IInternetBindInfoEx$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IInternetBindInfoEx").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetBindInfoEx
     * }
     */
    public static GroupLayout IID_IInternetBindInfoEx$layout() {
        return IID_IInternetBindInfoEx$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetBindInfoEx
     * }
     */
    public static MemorySegment IID_IInternetBindInfoEx() {
        return IID_IInternetBindInfoEx$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetBindInfoEx
     * }
     */
    public static void IID_IInternetBindInfoEx(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetBindInfoEx$constants.SEGMENT, 0L, IID_IInternetBindInfoEx$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IInternetProtocolRoot *LPIINTERNETPROTOCOLROOT
     * }
     */
    public static final AddressLayout LPIINTERNETPROTOCOLROOT = wgl_h.C_POINTER;
    private static final int PI_PARSE_URL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_PARSE_URL = 1
     * }
     */
    public static int PI_PARSE_URL() {
        return PI_PARSE_URL;
    }
    private static final int PI_FILTER_MODE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_FILTER_MODE = 2
     * }
     */
    public static int PI_FILTER_MODE() {
        return PI_FILTER_MODE;
    }
    private static final int PI_FORCE_ASYNC = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_FORCE_ASYNC = 4
     * }
     */
    public static int PI_FORCE_ASYNC() {
        return PI_FORCE_ASYNC;
    }
    private static final int PI_USE_WORKERTHREAD = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_USE_WORKERTHREAD = 8
     * }
     */
    public static int PI_USE_WORKERTHREAD() {
        return PI_USE_WORKERTHREAD;
    }
    private static final int PI_MIMEVERIFICATION = (int)16L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_MIMEVERIFICATION = 16
     * }
     */
    public static int PI_MIMEVERIFICATION() {
        return PI_MIMEVERIFICATION;
    }
    private static final int PI_CLSIDLOOKUP = (int)32L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_CLSIDLOOKUP = 32
     * }
     */
    public static int PI_CLSIDLOOKUP() {
        return PI_CLSIDLOOKUP;
    }
    private static final int PI_DATAPROGRESS = (int)64L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_DATAPROGRESS = 64
     * }
     */
    public static int PI_DATAPROGRESS() {
        return PI_DATAPROGRESS;
    }
    private static final int PI_SYNCHRONOUS = (int)128L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_SYNCHRONOUS = 128
     * }
     */
    public static int PI_SYNCHRONOUS() {
        return PI_SYNCHRONOUS;
    }
    private static final int PI_APARTMENTTHREADED = (int)256L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_APARTMENTTHREADED = 256
     * }
     */
    public static int PI_APARTMENTTHREADED() {
        return PI_APARTMENTTHREADED;
    }
    private static final int PI_CLASSINSTALL = (int)512L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_CLASSINSTALL = 512
     * }
     */
    public static int PI_CLASSINSTALL() {
        return PI_CLASSINSTALL;
    }
    private static final int PI_PASSONBINDCTX = (int)8192L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_PASSONBINDCTX = 8192
     * }
     */
    public static int PI_PASSONBINDCTX() {
        return PI_PASSONBINDCTX;
    }
    private static final int PI_NOMIMEHANDLER = (int)32768L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_NOMIMEHANDLER = 32768
     * }
     */
    public static int PI_NOMIMEHANDLER() {
        return PI_NOMIMEHANDLER;
    }
    private static final int PI_LOADAPPDIRECT = (int)16384L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_LOADAPPDIRECT = 16384
     * }
     */
    public static int PI_LOADAPPDIRECT() {
        return PI_LOADAPPDIRECT;
    }
    private static final int PD_FORCE_SWITCH = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PD_FORCE_SWITCH = 65536
     * }
     */
    public static int PD_FORCE_SWITCH() {
        return PD_FORCE_SWITCH;
    }
    private static final int PI_PREFERDEFAULTHANDLER = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_PREFERDEFAULTHANDLER = 131072
     * }
     */
    public static int PI_PREFERDEFAULTHANDLER() {
        return PI_PREFERDEFAULTHANDLER;
    }

    private static class IID_IInternetProtocolRoot$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IInternetProtocolRoot").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolRoot
     * }
     */
    public static GroupLayout IID_IInternetProtocolRoot$layout() {
        return IID_IInternetProtocolRoot$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolRoot
     * }
     */
    public static MemorySegment IID_IInternetProtocolRoot() {
        return IID_IInternetProtocolRoot$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolRoot
     * }
     */
    public static void IID_IInternetProtocolRoot(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetProtocolRoot$constants.SEGMENT, 0L, IID_IInternetProtocolRoot$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IInternetProtocol *LPIINTERNETPROTOCOL
     * }
     */
    public static final AddressLayout LPIINTERNETPROTOCOL = wgl_h.C_POINTER;

    private static class IID_IInternetProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IInternetProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocol
     * }
     */
    public static GroupLayout IID_IInternetProtocol$layout() {
        return IID_IInternetProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocol
     * }
     */
    public static MemorySegment IID_IInternetProtocol() {
        return IID_IInternetProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocol
     * }
     */
    public static void IID_IInternetProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetProtocol$constants.SEGMENT, 0L, IID_IInternetProtocol$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IInternetProtocolEx$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IInternetProtocolEx").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolEx
     * }
     */
    public static GroupLayout IID_IInternetProtocolEx$layout() {
        return IID_IInternetProtocolEx$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolEx
     * }
     */
    public static MemorySegment IID_IInternetProtocolEx() {
        return IID_IInternetProtocolEx$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolEx
     * }
     */
    public static void IID_IInternetProtocolEx(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetProtocolEx$constants.SEGMENT, 0L, IID_IInternetProtocolEx$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IInternetProtocolSink *LPIINTERNETPROTOCOLSINK
     * }
     */
    public static final AddressLayout LPIINTERNETPROTOCOLSINK = wgl_h.C_POINTER;

    private static class IID_IInternetProtocolSink$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IInternetProtocolSink").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolSink
     * }
     */
    public static GroupLayout IID_IInternetProtocolSink$layout() {
        return IID_IInternetProtocolSink$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolSink
     * }
     */
    public static MemorySegment IID_IInternetProtocolSink() {
        return IID_IInternetProtocolSink$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolSink
     * }
     */
    public static void IID_IInternetProtocolSink(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetProtocolSink$constants.SEGMENT, 0L, IID_IInternetProtocolSink$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IInternetProtocolSinkStackable *LPIINTERNETPROTOCOLSINKStackable
     * }
     */
    public static final AddressLayout LPIINTERNETPROTOCOLSINKStackable = wgl_h.C_POINTER;

    private static class IID_IInternetProtocolSinkStackable$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IInternetProtocolSinkStackable").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolSinkStackable
     * }
     */
    public static GroupLayout IID_IInternetProtocolSinkStackable$layout() {
        return IID_IInternetProtocolSinkStackable$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolSinkStackable
     * }
     */
    public static MemorySegment IID_IInternetProtocolSinkStackable() {
        return IID_IInternetProtocolSinkStackable$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolSinkStackable
     * }
     */
    public static void IID_IInternetProtocolSinkStackable(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetProtocolSinkStackable$constants.SEGMENT, 0L, IID_IInternetProtocolSinkStackable$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IInternetSession *LPIINTERNETSESSION
     * }
     */
    public static final AddressLayout LPIINTERNETSESSION = wgl_h.C_POINTER;
    private static final int OIBDG_APARTMENTTHREADED = (int)256L;
    /**
     * {@snippet lang=c :
     * enum _tagOIBDG_FLAGS.OIBDG_APARTMENTTHREADED = 256
     * }
     */
    public static int OIBDG_APARTMENTTHREADED() {
        return OIBDG_APARTMENTTHREADED;
    }
    private static final int OIBDG_DATAONLY = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum _tagOIBDG_FLAGS.OIBDG_DATAONLY = 4096
     * }
     */
    public static int OIBDG_DATAONLY() {
        return OIBDG_DATAONLY;
    }

    private static class IID_IInternetSession$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IInternetSession").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSession
     * }
     */
    public static GroupLayout IID_IInternetSession$layout() {
        return IID_IInternetSession$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSession
     * }
     */
    public static MemorySegment IID_IInternetSession() {
        return IID_IInternetSession$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSession
     * }
     */
    public static void IID_IInternetSession(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetSession$constants.SEGMENT, 0L, IID_IInternetSession$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IInternetThreadSwitch *LPIINTERNETTHREADSWITCH
     * }
     */
    public static final AddressLayout LPIINTERNETTHREADSWITCH = wgl_h.C_POINTER;

    private static class IID_IInternetThreadSwitch$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IInternetThreadSwitch").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetThreadSwitch
     * }
     */
    public static GroupLayout IID_IInternetThreadSwitch$layout() {
        return IID_IInternetThreadSwitch$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetThreadSwitch
     * }
     */
    public static MemorySegment IID_IInternetThreadSwitch() {
        return IID_IInternetThreadSwitch$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetThreadSwitch
     * }
     */
    public static void IID_IInternetThreadSwitch(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetThreadSwitch$constants.SEGMENT, 0L, IID_IInternetThreadSwitch$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IInternetPriority *LPIINTERNETPRIORITY
     * }
     */
    public static final AddressLayout LPIINTERNETPRIORITY = wgl_h.C_POINTER;

    private static class IID_IInternetPriority$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IInternetPriority").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetPriority
     * }
     */
    public static GroupLayout IID_IInternetPriority$layout() {
        return IID_IInternetPriority$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetPriority
     * }
     */
    public static MemorySegment IID_IInternetPriority() {
        return IID_IInternetPriority$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetPriority
     * }
     */
    public static void IID_IInternetPriority(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetPriority$constants.SEGMENT, 0L, IID_IInternetPriority$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IInternetProtocolInfo *LPIINTERNETPROTOCOLINFO
     * }
     */
    public static final AddressLayout LPIINTERNETPROTOCOLINFO = wgl_h.C_POINTER;
    private static final int PARSE_CANONICALIZE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_CANONICALIZE = 1
     * }
     */
    public static int PARSE_CANONICALIZE() {
        return PARSE_CANONICALIZE;
    }
    private static final int PARSE_FRIENDLY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_FRIENDLY = 2
     * }
     */
    public static int PARSE_FRIENDLY() {
        return PARSE_FRIENDLY;
    }
    private static final int PARSE_SECURITY_URL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_SECURITY_URL = 3
     * }
     */
    public static int PARSE_SECURITY_URL() {
        return PARSE_SECURITY_URL;
    }
    private static final int PARSE_ROOTDOCUMENT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_ROOTDOCUMENT = 4
     * }
     */
    public static int PARSE_ROOTDOCUMENT() {
        return PARSE_ROOTDOCUMENT;
    }
    private static final int PARSE_DOCUMENT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_DOCUMENT = 5
     * }
     */
    public static int PARSE_DOCUMENT() {
        return PARSE_DOCUMENT;
    }
    private static final int PARSE_ANCHOR = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_ANCHOR = 6
     * }
     */
    public static int PARSE_ANCHOR() {
        return PARSE_ANCHOR;
    }
    private static final int PARSE_ENCODE_IS_UNESCAPE = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_ENCODE_IS_UNESCAPE = 7
     * }
     */
    public static int PARSE_ENCODE_IS_UNESCAPE() {
        return PARSE_ENCODE_IS_UNESCAPE;
    }
    private static final int PARSE_DECODE_IS_ESCAPE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_DECODE_IS_ESCAPE = 8
     * }
     */
    public static int PARSE_DECODE_IS_ESCAPE() {
        return PARSE_DECODE_IS_ESCAPE;
    }
    private static final int PARSE_PATH_FROM_URL = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_PATH_FROM_URL = 9
     * }
     */
    public static int PARSE_PATH_FROM_URL() {
        return PARSE_PATH_FROM_URL;
    }
    private static final int PARSE_URL_FROM_PATH = (int)10L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_URL_FROM_PATH = 10
     * }
     */
    public static int PARSE_URL_FROM_PATH() {
        return PARSE_URL_FROM_PATH;
    }
    private static final int PARSE_MIME = (int)11L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_MIME = 11
     * }
     */
    public static int PARSE_MIME() {
        return PARSE_MIME;
    }
    private static final int PARSE_SERVER = (int)12L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_SERVER = 12
     * }
     */
    public static int PARSE_SERVER() {
        return PARSE_SERVER;
    }
    private static final int PARSE_SCHEMA = (int)13L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_SCHEMA = 13
     * }
     */
    public static int PARSE_SCHEMA() {
        return PARSE_SCHEMA;
    }
    private static final int PARSE_SITE = (int)14L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_SITE = 14
     * }
     */
    public static int PARSE_SITE() {
        return PARSE_SITE;
    }
    private static final int PARSE_DOMAIN = (int)15L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_DOMAIN = 15
     * }
     */
    public static int PARSE_DOMAIN() {
        return PARSE_DOMAIN;
    }
    private static final int PARSE_LOCATION = (int)16L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_LOCATION = 16
     * }
     */
    public static int PARSE_LOCATION() {
        return PARSE_LOCATION;
    }
    private static final int PARSE_SECURITY_DOMAIN = (int)17L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_SECURITY_DOMAIN = 17
     * }
     */
    public static int PARSE_SECURITY_DOMAIN() {
        return PARSE_SECURITY_DOMAIN;
    }
    private static final int PARSE_ESCAPE = (int)18L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_ESCAPE = 18
     * }
     */
    public static int PARSE_ESCAPE() {
        return PARSE_ESCAPE;
    }
    private static final int PARSE_UNESCAPE = (int)19L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_UNESCAPE = 19
     * }
     */
    public static int PARSE_UNESCAPE() {
        return PARSE_UNESCAPE;
    }
    private static final int PSU_DEFAULT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _tagPSUACTION.PSU_DEFAULT = 1
     * }
     */
    public static int PSU_DEFAULT() {
        return PSU_DEFAULT;
    }
    private static final int PSU_SECURITY_URL_ONLY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _tagPSUACTION.PSU_SECURITY_URL_ONLY = 2
     * }
     */
    public static int PSU_SECURITY_URL_ONLY() {
        return PSU_SECURITY_URL_ONLY;
    }
    private static final int QUERY_EXPIRATION_DATE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_EXPIRATION_DATE = 1
     * }
     */
    public static int QUERY_EXPIRATION_DATE() {
        return QUERY_EXPIRATION_DATE;
    }
    private static final int QUERY_TIME_OF_LAST_CHANGE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_TIME_OF_LAST_CHANGE = 2
     * }
     */
    public static int QUERY_TIME_OF_LAST_CHANGE() {
        return QUERY_TIME_OF_LAST_CHANGE;
    }
    private static final int QUERY_CONTENT_ENCODING = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_CONTENT_ENCODING = 3
     * }
     */
    public static int QUERY_CONTENT_ENCODING() {
        return QUERY_CONTENT_ENCODING;
    }
    private static final int QUERY_CONTENT_TYPE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_CONTENT_TYPE = 4
     * }
     */
    public static int QUERY_CONTENT_TYPE() {
        return QUERY_CONTENT_TYPE;
    }
    private static final int QUERY_REFRESH = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_REFRESH = 5
     * }
     */
    public static int QUERY_REFRESH() {
        return QUERY_REFRESH;
    }
    private static final int QUERY_RECOMBINE = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_RECOMBINE = 6
     * }
     */
    public static int QUERY_RECOMBINE() {
        return QUERY_RECOMBINE;
    }
    private static final int QUERY_CAN_NAVIGATE = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_CAN_NAVIGATE = 7
     * }
     */
    public static int QUERY_CAN_NAVIGATE() {
        return QUERY_CAN_NAVIGATE;
    }
    private static final int QUERY_USES_NETWORK = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_USES_NETWORK = 8
     * }
     */
    public static int QUERY_USES_NETWORK() {
        return QUERY_USES_NETWORK;
    }
    private static final int QUERY_IS_CACHED = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_IS_CACHED = 9
     * }
     */
    public static int QUERY_IS_CACHED() {
        return QUERY_IS_CACHED;
    }
    private static final int QUERY_IS_INSTALLEDENTRY = (int)10L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_IS_INSTALLEDENTRY = 10
     * }
     */
    public static int QUERY_IS_INSTALLEDENTRY() {
        return QUERY_IS_INSTALLEDENTRY;
    }
    private static final int QUERY_IS_CACHED_OR_MAPPED = (int)11L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_IS_CACHED_OR_MAPPED = 11
     * }
     */
    public static int QUERY_IS_CACHED_OR_MAPPED() {
        return QUERY_IS_CACHED_OR_MAPPED;
    }
    private static final int QUERY_USES_CACHE = (int)12L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_USES_CACHE = 12
     * }
     */
    public static int QUERY_USES_CACHE() {
        return QUERY_USES_CACHE;
    }
    private static final int QUERY_IS_SECURE = (int)13L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_IS_SECURE = 13
     * }
     */
    public static int QUERY_IS_SECURE() {
        return QUERY_IS_SECURE;
    }
    private static final int QUERY_IS_SAFE = (int)14L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_IS_SAFE = 14
     * }
     */
    public static int QUERY_IS_SAFE() {
        return QUERY_IS_SAFE;
    }
    private static final int QUERY_USES_HISTORYFOLDER = (int)15L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_USES_HISTORYFOLDER = 15
     * }
     */
    public static int QUERY_USES_HISTORYFOLDER() {
        return QUERY_USES_HISTORYFOLDER;
    }
    private static final int QUERY_IS_CACHED_AND_USABLE_OFFLINE = (int)16L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_IS_CACHED_AND_USABLE_OFFLINE = 16
     * }
     */
    public static int QUERY_IS_CACHED_AND_USABLE_OFFLINE() {
        return QUERY_IS_CACHED_AND_USABLE_OFFLINE;
    }

    private static class IID_IInternetProtocolInfo$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IInternetProtocolInfo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolInfo
     * }
     */
    public static GroupLayout IID_IInternetProtocolInfo$layout() {
        return IID_IInternetProtocolInfo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolInfo
     * }
     */
    public static MemorySegment IID_IInternetProtocolInfo() {
        return IID_IInternetProtocolInfo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolInfo
     * }
     */
    public static void IID_IInternetProtocolInfo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetProtocolInfo$constants.SEGMENT, 0L, IID_IInternetProtocolInfo$constants.LAYOUT.byteSize());
    }

    private static class CoInternetParseUrl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoInternetParseUrl");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetParseUrl(LPCWSTR pwzUrl, PARSEACTION ParseAction, DWORD dwFlags, LPWSTR pszResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor CoInternetParseUrl$descriptor() {
        return CoInternetParseUrl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetParseUrl(LPCWSTR pwzUrl, PARSEACTION ParseAction, DWORD dwFlags, LPWSTR pszResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved)
     * }
     */
    public static MethodHandle CoInternetParseUrl$handle() {
        return CoInternetParseUrl.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetParseUrl(LPCWSTR pwzUrl, PARSEACTION ParseAction, DWORD dwFlags, LPWSTR pszResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved)
     * }
     */
    public static MemorySegment CoInternetParseUrl$address() {
        return CoInternetParseUrl.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetParseUrl(LPCWSTR pwzUrl, PARSEACTION ParseAction, DWORD dwFlags, LPWSTR pszResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved)
     * }
     */
    public static int CoInternetParseUrl(MemorySegment pwzUrl, int ParseAction, int dwFlags, MemorySegment pszResult, int cchResult, MemorySegment pcchResult, int dwReserved) {
        var mh$ = CoInternetParseUrl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetParseUrl", pwzUrl, ParseAction, dwFlags, pszResult, cchResult, pcchResult, dwReserved);
            }
            return (int)mh$.invokeExact(pwzUrl, ParseAction, dwFlags, pszResult, cchResult, pcchResult, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetParseIUri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoInternetParseIUri");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetParseIUri(IUri *pIUri, PARSEACTION ParseAction, DWORD dwFlags, LPWSTR pwzResult, DWORD cchResult, DWORD *pcchResult, DWORD_PTR dwReserved)
     * }
     */
    public static FunctionDescriptor CoInternetParseIUri$descriptor() {
        return CoInternetParseIUri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetParseIUri(IUri *pIUri, PARSEACTION ParseAction, DWORD dwFlags, LPWSTR pwzResult, DWORD cchResult, DWORD *pcchResult, DWORD_PTR dwReserved)
     * }
     */
    public static MethodHandle CoInternetParseIUri$handle() {
        return CoInternetParseIUri.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetParseIUri(IUri *pIUri, PARSEACTION ParseAction, DWORD dwFlags, LPWSTR pwzResult, DWORD cchResult, DWORD *pcchResult, DWORD_PTR dwReserved)
     * }
     */
    public static MemorySegment CoInternetParseIUri$address() {
        return CoInternetParseIUri.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetParseIUri(IUri *pIUri, PARSEACTION ParseAction, DWORD dwFlags, LPWSTR pwzResult, DWORD cchResult, DWORD *pcchResult, DWORD_PTR dwReserved)
     * }
     */
    public static int CoInternetParseIUri(MemorySegment pIUri, int ParseAction, int dwFlags, MemorySegment pwzResult, int cchResult, MemorySegment pcchResult, long dwReserved) {
        var mh$ = CoInternetParseIUri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetParseIUri", pIUri, ParseAction, dwFlags, pwzResult, cchResult, pcchResult, dwReserved);
            }
            return (int)mh$.invokeExact(pIUri, ParseAction, dwFlags, pwzResult, cchResult, pcchResult, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetCombineUrl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoInternetCombineUrl");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCombineUrl(LPCWSTR pwzBaseUrl, LPCWSTR pwzRelativeUrl, DWORD dwCombineFlags, LPWSTR pszResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor CoInternetCombineUrl$descriptor() {
        return CoInternetCombineUrl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCombineUrl(LPCWSTR pwzBaseUrl, LPCWSTR pwzRelativeUrl, DWORD dwCombineFlags, LPWSTR pszResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved)
     * }
     */
    public static MethodHandle CoInternetCombineUrl$handle() {
        return CoInternetCombineUrl.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCombineUrl(LPCWSTR pwzBaseUrl, LPCWSTR pwzRelativeUrl, DWORD dwCombineFlags, LPWSTR pszResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved)
     * }
     */
    public static MemorySegment CoInternetCombineUrl$address() {
        return CoInternetCombineUrl.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetCombineUrl(LPCWSTR pwzBaseUrl, LPCWSTR pwzRelativeUrl, DWORD dwCombineFlags, LPWSTR pszResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved)
     * }
     */
    public static int CoInternetCombineUrl(MemorySegment pwzBaseUrl, MemorySegment pwzRelativeUrl, int dwCombineFlags, MemorySegment pszResult, int cchResult, MemorySegment pcchResult, int dwReserved) {
        var mh$ = CoInternetCombineUrl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetCombineUrl", pwzBaseUrl, pwzRelativeUrl, dwCombineFlags, pszResult, cchResult, pcchResult, dwReserved);
            }
            return (int)mh$.invokeExact(pwzBaseUrl, pwzRelativeUrl, dwCombineFlags, pszResult, cchResult, pcchResult, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetCombineUrlEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoInternetCombineUrlEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCombineUrlEx(IUri *pBaseUri, LPCWSTR pwzRelativeUrl, DWORD dwCombineFlags, IUri **ppCombinedUri, DWORD_PTR dwReserved)
     * }
     */
    public static FunctionDescriptor CoInternetCombineUrlEx$descriptor() {
        return CoInternetCombineUrlEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCombineUrlEx(IUri *pBaseUri, LPCWSTR pwzRelativeUrl, DWORD dwCombineFlags, IUri **ppCombinedUri, DWORD_PTR dwReserved)
     * }
     */
    public static MethodHandle CoInternetCombineUrlEx$handle() {
        return CoInternetCombineUrlEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCombineUrlEx(IUri *pBaseUri, LPCWSTR pwzRelativeUrl, DWORD dwCombineFlags, IUri **ppCombinedUri, DWORD_PTR dwReserved)
     * }
     */
    public static MemorySegment CoInternetCombineUrlEx$address() {
        return CoInternetCombineUrlEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetCombineUrlEx(IUri *pBaseUri, LPCWSTR pwzRelativeUrl, DWORD dwCombineFlags, IUri **ppCombinedUri, DWORD_PTR dwReserved)
     * }
     */
    public static int CoInternetCombineUrlEx(MemorySegment pBaseUri, MemorySegment pwzRelativeUrl, int dwCombineFlags, MemorySegment ppCombinedUri, long dwReserved) {
        var mh$ = CoInternetCombineUrlEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetCombineUrlEx", pBaseUri, pwzRelativeUrl, dwCombineFlags, ppCombinedUri, dwReserved);
            }
            return (int)mh$.invokeExact(pBaseUri, pwzRelativeUrl, dwCombineFlags, ppCombinedUri, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetCombineIUri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoInternetCombineIUri");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCombineIUri(IUri *pBaseUri, IUri *pRelativeUri, DWORD dwCombineFlags, IUri **ppCombinedUri, DWORD_PTR dwReserved)
     * }
     */
    public static FunctionDescriptor CoInternetCombineIUri$descriptor() {
        return CoInternetCombineIUri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCombineIUri(IUri *pBaseUri, IUri *pRelativeUri, DWORD dwCombineFlags, IUri **ppCombinedUri, DWORD_PTR dwReserved)
     * }
     */
    public static MethodHandle CoInternetCombineIUri$handle() {
        return CoInternetCombineIUri.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCombineIUri(IUri *pBaseUri, IUri *pRelativeUri, DWORD dwCombineFlags, IUri **ppCombinedUri, DWORD_PTR dwReserved)
     * }
     */
    public static MemorySegment CoInternetCombineIUri$address() {
        return CoInternetCombineIUri.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetCombineIUri(IUri *pBaseUri, IUri *pRelativeUri, DWORD dwCombineFlags, IUri **ppCombinedUri, DWORD_PTR dwReserved)
     * }
     */
    public static int CoInternetCombineIUri(MemorySegment pBaseUri, MemorySegment pRelativeUri, int dwCombineFlags, MemorySegment ppCombinedUri, long dwReserved) {
        var mh$ = CoInternetCombineIUri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetCombineIUri", pBaseUri, pRelativeUri, dwCombineFlags, ppCombinedUri, dwReserved);
            }
            return (int)mh$.invokeExact(pBaseUri, pRelativeUri, dwCombineFlags, ppCombinedUri, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetCompareUrl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoInternetCompareUrl");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCompareUrl(LPCWSTR pwzUrl1, LPCWSTR pwzUrl2, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor CoInternetCompareUrl$descriptor() {
        return CoInternetCompareUrl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCompareUrl(LPCWSTR pwzUrl1, LPCWSTR pwzUrl2, DWORD dwFlags)
     * }
     */
    public static MethodHandle CoInternetCompareUrl$handle() {
        return CoInternetCompareUrl.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCompareUrl(LPCWSTR pwzUrl1, LPCWSTR pwzUrl2, DWORD dwFlags)
     * }
     */
    public static MemorySegment CoInternetCompareUrl$address() {
        return CoInternetCompareUrl.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetCompareUrl(LPCWSTR pwzUrl1, LPCWSTR pwzUrl2, DWORD dwFlags)
     * }
     */
    public static int CoInternetCompareUrl(MemorySegment pwzUrl1, MemorySegment pwzUrl2, int dwFlags) {
        var mh$ = CoInternetCompareUrl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetCompareUrl", pwzUrl1, pwzUrl2, dwFlags);
            }
            return (int)mh$.invokeExact(pwzUrl1, pwzUrl2, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetGetProtocolFlags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoInternetGetProtocolFlags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetProtocolFlags(LPCWSTR pwzUrl, DWORD *pdwFlags, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor CoInternetGetProtocolFlags$descriptor() {
        return CoInternetGetProtocolFlags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetProtocolFlags(LPCWSTR pwzUrl, DWORD *pdwFlags, DWORD dwReserved)
     * }
     */
    public static MethodHandle CoInternetGetProtocolFlags$handle() {
        return CoInternetGetProtocolFlags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetProtocolFlags(LPCWSTR pwzUrl, DWORD *pdwFlags, DWORD dwReserved)
     * }
     */
    public static MemorySegment CoInternetGetProtocolFlags$address() {
        return CoInternetGetProtocolFlags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetProtocolFlags(LPCWSTR pwzUrl, DWORD *pdwFlags, DWORD dwReserved)
     * }
     */
    public static int CoInternetGetProtocolFlags(MemorySegment pwzUrl, MemorySegment pdwFlags, int dwReserved) {
        var mh$ = CoInternetGetProtocolFlags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetGetProtocolFlags", pwzUrl, pdwFlags, dwReserved);
            }
            return (int)mh$.invokeExact(pwzUrl, pdwFlags, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetQueryInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoInternetQueryInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetQueryInfo(LPCWSTR pwzUrl, QUERYOPTION QueryOptions, DWORD dwQueryFlags, LPVOID pvBuffer, DWORD cbBuffer, DWORD *pcbBuffer, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor CoInternetQueryInfo$descriptor() {
        return CoInternetQueryInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetQueryInfo(LPCWSTR pwzUrl, QUERYOPTION QueryOptions, DWORD dwQueryFlags, LPVOID pvBuffer, DWORD cbBuffer, DWORD *pcbBuffer, DWORD dwReserved)
     * }
     */
    public static MethodHandle CoInternetQueryInfo$handle() {
        return CoInternetQueryInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetQueryInfo(LPCWSTR pwzUrl, QUERYOPTION QueryOptions, DWORD dwQueryFlags, LPVOID pvBuffer, DWORD cbBuffer, DWORD *pcbBuffer, DWORD dwReserved)
     * }
     */
    public static MemorySegment CoInternetQueryInfo$address() {
        return CoInternetQueryInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetQueryInfo(LPCWSTR pwzUrl, QUERYOPTION QueryOptions, DWORD dwQueryFlags, LPVOID pvBuffer, DWORD cbBuffer, DWORD *pcbBuffer, DWORD dwReserved)
     * }
     */
    public static int CoInternetQueryInfo(MemorySegment pwzUrl, int QueryOptions, int dwQueryFlags, MemorySegment pvBuffer, int cbBuffer, MemorySegment pcbBuffer, int dwReserved) {
        var mh$ = CoInternetQueryInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetQueryInfo", pwzUrl, QueryOptions, dwQueryFlags, pvBuffer, cbBuffer, pcbBuffer, dwReserved);
            }
            return (int)mh$.invokeExact(pwzUrl, QueryOptions, dwQueryFlags, pvBuffer, cbBuffer, pcbBuffer, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetGetSession {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoInternetGetSession");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetSession(DWORD dwSessionMode, IInternetSession **ppIInternetSession, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor CoInternetGetSession$descriptor() {
        return CoInternetGetSession.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetSession(DWORD dwSessionMode, IInternetSession **ppIInternetSession, DWORD dwReserved)
     * }
     */
    public static MethodHandle CoInternetGetSession$handle() {
        return CoInternetGetSession.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetSession(DWORD dwSessionMode, IInternetSession **ppIInternetSession, DWORD dwReserved)
     * }
     */
    public static MemorySegment CoInternetGetSession$address() {
        return CoInternetGetSession.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetSession(DWORD dwSessionMode, IInternetSession **ppIInternetSession, DWORD dwReserved)
     * }
     */
    public static int CoInternetGetSession(int dwSessionMode, MemorySegment ppIInternetSession, int dwReserved) {
        var mh$ = CoInternetGetSession.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetGetSession", dwSessionMode, ppIInternetSession, dwReserved);
            }
            return (int)mh$.invokeExact(dwSessionMode, ppIInternetSession, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetGetSecurityUrl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoInternetGetSecurityUrl");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetSecurityUrl(LPCWSTR pwszUrl, LPWSTR *ppwszSecUrl, PSUACTION psuAction, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor CoInternetGetSecurityUrl$descriptor() {
        return CoInternetGetSecurityUrl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetSecurityUrl(LPCWSTR pwszUrl, LPWSTR *ppwszSecUrl, PSUACTION psuAction, DWORD dwReserved)
     * }
     */
    public static MethodHandle CoInternetGetSecurityUrl$handle() {
        return CoInternetGetSecurityUrl.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetSecurityUrl(LPCWSTR pwszUrl, LPWSTR *ppwszSecUrl, PSUACTION psuAction, DWORD dwReserved)
     * }
     */
    public static MemorySegment CoInternetGetSecurityUrl$address() {
        return CoInternetGetSecurityUrl.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetSecurityUrl(LPCWSTR pwszUrl, LPWSTR *ppwszSecUrl, PSUACTION psuAction, DWORD dwReserved)
     * }
     */
    public static int CoInternetGetSecurityUrl(MemorySegment pwszUrl, MemorySegment ppwszSecUrl, int psuAction, int dwReserved) {
        var mh$ = CoInternetGetSecurityUrl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetGetSecurityUrl", pwszUrl, ppwszSecUrl, psuAction, dwReserved);
            }
            return (int)mh$.invokeExact(pwszUrl, ppwszSecUrl, psuAction, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncInstallDistributionUnit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncInstallDistributionUnit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT AsyncInstallDistributionUnit(LPCWSTR szDistUnit, LPCWSTR szTYPE, LPCWSTR szExt, DWORD dwFileVersionMS, DWORD dwFileVersionLS, LPCWSTR szURL, IBindCtx *pbc, LPVOID pvReserved, DWORD flags)
     * }
     */
    public static FunctionDescriptor AsyncInstallDistributionUnit$descriptor() {
        return AsyncInstallDistributionUnit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT AsyncInstallDistributionUnit(LPCWSTR szDistUnit, LPCWSTR szTYPE, LPCWSTR szExt, DWORD dwFileVersionMS, DWORD dwFileVersionLS, LPCWSTR szURL, IBindCtx *pbc, LPVOID pvReserved, DWORD flags)
     * }
     */
    public static MethodHandle AsyncInstallDistributionUnit$handle() {
        return AsyncInstallDistributionUnit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT AsyncInstallDistributionUnit(LPCWSTR szDistUnit, LPCWSTR szTYPE, LPCWSTR szExt, DWORD dwFileVersionMS, DWORD dwFileVersionLS, LPCWSTR szURL, IBindCtx *pbc, LPVOID pvReserved, DWORD flags)
     * }
     */
    public static MemorySegment AsyncInstallDistributionUnit$address() {
        return AsyncInstallDistributionUnit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT AsyncInstallDistributionUnit(LPCWSTR szDistUnit, LPCWSTR szTYPE, LPCWSTR szExt, DWORD dwFileVersionMS, DWORD dwFileVersionLS, LPCWSTR szURL, IBindCtx *pbc, LPVOID pvReserved, DWORD flags)
     * }
     */
    public static int AsyncInstallDistributionUnit(MemorySegment szDistUnit, MemorySegment szTYPE, MemorySegment szExt, int dwFileVersionMS, int dwFileVersionLS, MemorySegment szURL, MemorySegment pbc, MemorySegment pvReserved, int flags) {
        var mh$ = AsyncInstallDistributionUnit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncInstallDistributionUnit", szDistUnit, szTYPE, szExt, dwFileVersionMS, dwFileVersionLS, szURL, pbc, pvReserved, flags);
            }
            return (int)mh$.invokeExact(szDistUnit, szTYPE, szExt, dwFileVersionMS, dwFileVersionLS, szURL, pbc, pvReserved, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetGetSecurityUrlEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoInternetGetSecurityUrlEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetSecurityUrlEx(IUri *pUri, IUri **ppSecUri, PSUACTION psuAction, DWORD_PTR dwReserved)
     * }
     */
    public static FunctionDescriptor CoInternetGetSecurityUrlEx$descriptor() {
        return CoInternetGetSecurityUrlEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetSecurityUrlEx(IUri *pUri, IUri **ppSecUri, PSUACTION psuAction, DWORD_PTR dwReserved)
     * }
     */
    public static MethodHandle CoInternetGetSecurityUrlEx$handle() {
        return CoInternetGetSecurityUrlEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetSecurityUrlEx(IUri *pUri, IUri **ppSecUri, PSUACTION psuAction, DWORD_PTR dwReserved)
     * }
     */
    public static MemorySegment CoInternetGetSecurityUrlEx$address() {
        return CoInternetGetSecurityUrlEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetSecurityUrlEx(IUri *pUri, IUri **ppSecUri, PSUACTION psuAction, DWORD_PTR dwReserved)
     * }
     */
    public static int CoInternetGetSecurityUrlEx(MemorySegment pUri, MemorySegment ppSecUri, int psuAction, long dwReserved) {
        var mh$ = CoInternetGetSecurityUrlEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetGetSecurityUrlEx", pUri, ppSecUri, psuAction, dwReserved);
            }
            return (int)mh$.invokeExact(pUri, ppSecUri, psuAction, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int FEATURE_OBJECT_CACHING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_OBJECT_CACHING = 0
     * }
     */
    public static int FEATURE_OBJECT_CACHING() {
        return FEATURE_OBJECT_CACHING;
    }
    private static final int FEATURE_ZONE_ELEVATION = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_ZONE_ELEVATION = 1
     * }
     */
    public static int FEATURE_ZONE_ELEVATION() {
        return FEATURE_ZONE_ELEVATION;
    }
    private static final int FEATURE_MIME_HANDLING = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_MIME_HANDLING = 2
     * }
     */
    public static int FEATURE_MIME_HANDLING() {
        return FEATURE_MIME_HANDLING;
    }
    private static final int FEATURE_MIME_SNIFFING = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_MIME_SNIFFING = 3
     * }
     */
    public static int FEATURE_MIME_SNIFFING() {
        return FEATURE_MIME_SNIFFING;
    }
    private static final int FEATURE_WINDOW_RESTRICTIONS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_WINDOW_RESTRICTIONS = 4
     * }
     */
    public static int FEATURE_WINDOW_RESTRICTIONS() {
        return FEATURE_WINDOW_RESTRICTIONS;
    }
    private static final int FEATURE_WEBOC_POPUPMANAGEMENT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_WEBOC_POPUPMANAGEMENT = 5
     * }
     */
    public static int FEATURE_WEBOC_POPUPMANAGEMENT() {
        return FEATURE_WEBOC_POPUPMANAGEMENT;
    }
    private static final int FEATURE_BEHAVIORS = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_BEHAVIORS = 6
     * }
     */
    public static int FEATURE_BEHAVIORS() {
        return FEATURE_BEHAVIORS;
    }
    private static final int FEATURE_DISABLE_MK_PROTOCOL = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_DISABLE_MK_PROTOCOL = 7
     * }
     */
    public static int FEATURE_DISABLE_MK_PROTOCOL() {
        return FEATURE_DISABLE_MK_PROTOCOL;
    }
    private static final int FEATURE_LOCALMACHINE_LOCKDOWN = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_LOCALMACHINE_LOCKDOWN = 8
     * }
     */
    public static int FEATURE_LOCALMACHINE_LOCKDOWN() {
        return FEATURE_LOCALMACHINE_LOCKDOWN;
    }
    private static final int FEATURE_SECURITYBAND = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_SECURITYBAND = 9
     * }
     */
    public static int FEATURE_SECURITYBAND() {
        return FEATURE_SECURITYBAND;
    }
    private static final int FEATURE_RESTRICT_ACTIVEXINSTALL = (int)10L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_RESTRICT_ACTIVEXINSTALL = 10
     * }
     */
    public static int FEATURE_RESTRICT_ACTIVEXINSTALL() {
        return FEATURE_RESTRICT_ACTIVEXINSTALL;
    }
    private static final int FEATURE_VALIDATE_NAVIGATE_URL = (int)11L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_VALIDATE_NAVIGATE_URL = 11
     * }
     */
    public static int FEATURE_VALIDATE_NAVIGATE_URL() {
        return FEATURE_VALIDATE_NAVIGATE_URL;
    }
    private static final int FEATURE_RESTRICT_FILEDOWNLOAD = (int)12L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_RESTRICT_FILEDOWNLOAD = 12
     * }
     */
    public static int FEATURE_RESTRICT_FILEDOWNLOAD() {
        return FEATURE_RESTRICT_FILEDOWNLOAD;
    }
    private static final int FEATURE_ADDON_MANAGEMENT = (int)13L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_ADDON_MANAGEMENT = 13
     * }
     */
    public static int FEATURE_ADDON_MANAGEMENT() {
        return FEATURE_ADDON_MANAGEMENT;
    }
    private static final int FEATURE_PROTOCOL_LOCKDOWN = (int)14L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_PROTOCOL_LOCKDOWN = 14
     * }
     */
    public static int FEATURE_PROTOCOL_LOCKDOWN() {
        return FEATURE_PROTOCOL_LOCKDOWN;
    }
    private static final int FEATURE_HTTP_USERNAME_PASSWORD_DISABLE = (int)15L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_HTTP_USERNAME_PASSWORD_DISABLE = 15
     * }
     */
    public static int FEATURE_HTTP_USERNAME_PASSWORD_DISABLE() {
        return FEATURE_HTTP_USERNAME_PASSWORD_DISABLE;
    }
    private static final int FEATURE_SAFE_BINDTOOBJECT = (int)16L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_SAFE_BINDTOOBJECT = 16
     * }
     */
    public static int FEATURE_SAFE_BINDTOOBJECT() {
        return FEATURE_SAFE_BINDTOOBJECT;
    }
    private static final int FEATURE_UNC_SAVEDFILECHECK = (int)17L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_UNC_SAVEDFILECHECK = 17
     * }
     */
    public static int FEATURE_UNC_SAVEDFILECHECK() {
        return FEATURE_UNC_SAVEDFILECHECK;
    }
    private static final int FEATURE_GET_URL_DOM_FILEPATH_UNENCODED = (int)18L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_GET_URL_DOM_FILEPATH_UNENCODED = 18
     * }
     */
    public static int FEATURE_GET_URL_DOM_FILEPATH_UNENCODED() {
        return FEATURE_GET_URL_DOM_FILEPATH_UNENCODED;
    }
    private static final int FEATURE_TABBED_BROWSING = (int)19L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_TABBED_BROWSING = 19
     * }
     */
    public static int FEATURE_TABBED_BROWSING() {
        return FEATURE_TABBED_BROWSING;
    }
    private static final int FEATURE_SSLUX = (int)20L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_SSLUX = 20
     * }
     */
    public static int FEATURE_SSLUX() {
        return FEATURE_SSLUX;
    }
    private static final int FEATURE_DISABLE_NAVIGATION_SOUNDS = (int)21L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_DISABLE_NAVIGATION_SOUNDS = 21
     * }
     */
    public static int FEATURE_DISABLE_NAVIGATION_SOUNDS() {
        return FEATURE_DISABLE_NAVIGATION_SOUNDS;
    }
    private static final int FEATURE_DISABLE_LEGACY_COMPRESSION = (int)22L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_DISABLE_LEGACY_COMPRESSION = 22
     * }
     */
    public static int FEATURE_DISABLE_LEGACY_COMPRESSION() {
        return FEATURE_DISABLE_LEGACY_COMPRESSION;
    }
    private static final int FEATURE_FORCE_ADDR_AND_STATUS = (int)23L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_FORCE_ADDR_AND_STATUS = 23
     * }
     */
    public static int FEATURE_FORCE_ADDR_AND_STATUS() {
        return FEATURE_FORCE_ADDR_AND_STATUS;
    }
    private static final int FEATURE_XMLHTTP = (int)24L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_XMLHTTP = 24
     * }
     */
    public static int FEATURE_XMLHTTP() {
        return FEATURE_XMLHTTP;
    }
    private static final int FEATURE_DISABLE_TELNET_PROTOCOL = (int)25L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_DISABLE_TELNET_PROTOCOL = 25
     * }
     */
    public static int FEATURE_DISABLE_TELNET_PROTOCOL() {
        return FEATURE_DISABLE_TELNET_PROTOCOL;
    }
    private static final int FEATURE_FEEDS = (int)26L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_FEEDS = 26
     * }
     */
    public static int FEATURE_FEEDS() {
        return FEATURE_FEEDS;
    }
    private static final int FEATURE_BLOCK_INPUT_PROMPTS = (int)27L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_BLOCK_INPUT_PROMPTS = 27
     * }
     */
    public static int FEATURE_BLOCK_INPUT_PROMPTS() {
        return FEATURE_BLOCK_INPUT_PROMPTS;
    }
    private static final int FEATURE_ENTRY_COUNT = (int)28L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_ENTRY_COUNT = 28
     * }
     */
    public static int FEATURE_ENTRY_COUNT() {
        return FEATURE_ENTRY_COUNT;
    }

    private static class CoInternetSetFeatureEnabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_INT,
            wgl_h.C_LONG,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoInternetSetFeatureEnabled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetSetFeatureEnabled(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, BOOL fEnable)
     * }
     */
    public static FunctionDescriptor CoInternetSetFeatureEnabled$descriptor() {
        return CoInternetSetFeatureEnabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetSetFeatureEnabled(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, BOOL fEnable)
     * }
     */
    public static MethodHandle CoInternetSetFeatureEnabled$handle() {
        return CoInternetSetFeatureEnabled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetSetFeatureEnabled(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, BOOL fEnable)
     * }
     */
    public static MemorySegment CoInternetSetFeatureEnabled$address() {
        return CoInternetSetFeatureEnabled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetSetFeatureEnabled(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, BOOL fEnable)
     * }
     */
    public static int CoInternetSetFeatureEnabled(int FeatureEntry, int dwFlags, int fEnable) {
        var mh$ = CoInternetSetFeatureEnabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetSetFeatureEnabled", FeatureEntry, dwFlags, fEnable);
            }
            return (int)mh$.invokeExact(FeatureEntry, dwFlags, fEnable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetIsFeatureEnabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_INT,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoInternetIsFeatureEnabled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureEnabled(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor CoInternetIsFeatureEnabled$descriptor() {
        return CoInternetIsFeatureEnabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureEnabled(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags)
     * }
     */
    public static MethodHandle CoInternetIsFeatureEnabled$handle() {
        return CoInternetIsFeatureEnabled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureEnabled(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags)
     * }
     */
    public static MemorySegment CoInternetIsFeatureEnabled$address() {
        return CoInternetIsFeatureEnabled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureEnabled(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags)
     * }
     */
    public static int CoInternetIsFeatureEnabled(int FeatureEntry, int dwFlags) {
        var mh$ = CoInternetIsFeatureEnabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetIsFeatureEnabled", FeatureEntry, dwFlags);
            }
            return (int)mh$.invokeExact(FeatureEntry, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetIsFeatureEnabledForUrl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_INT,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoInternetIsFeatureEnabledForUrl");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureEnabledForUrl(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, LPCWSTR szURL, IInternetSecurityManager *pSecMgr)
     * }
     */
    public static FunctionDescriptor CoInternetIsFeatureEnabledForUrl$descriptor() {
        return CoInternetIsFeatureEnabledForUrl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureEnabledForUrl(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, LPCWSTR szURL, IInternetSecurityManager *pSecMgr)
     * }
     */
    public static MethodHandle CoInternetIsFeatureEnabledForUrl$handle() {
        return CoInternetIsFeatureEnabledForUrl.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureEnabledForUrl(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, LPCWSTR szURL, IInternetSecurityManager *pSecMgr)
     * }
     */
    public static MemorySegment CoInternetIsFeatureEnabledForUrl$address() {
        return CoInternetIsFeatureEnabledForUrl.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureEnabledForUrl(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, LPCWSTR szURL, IInternetSecurityManager *pSecMgr)
     * }
     */
    public static int CoInternetIsFeatureEnabledForUrl(int FeatureEntry, int dwFlags, MemorySegment szURL, MemorySegment pSecMgr) {
        var mh$ = CoInternetIsFeatureEnabledForUrl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetIsFeatureEnabledForUrl", FeatureEntry, dwFlags, szURL, pSecMgr);
            }
            return (int)mh$.invokeExact(FeatureEntry, dwFlags, szURL, pSecMgr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetIsFeatureEnabledForIUri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_INT,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoInternetIsFeatureEnabledForIUri");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureEnabledForIUri(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, IUri *pIUri, IInternetSecurityManagerEx2 *pSecMgr)
     * }
     */
    public static FunctionDescriptor CoInternetIsFeatureEnabledForIUri$descriptor() {
        return CoInternetIsFeatureEnabledForIUri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureEnabledForIUri(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, IUri *pIUri, IInternetSecurityManagerEx2 *pSecMgr)
     * }
     */
    public static MethodHandle CoInternetIsFeatureEnabledForIUri$handle() {
        return CoInternetIsFeatureEnabledForIUri.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureEnabledForIUri(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, IUri *pIUri, IInternetSecurityManagerEx2 *pSecMgr)
     * }
     */
    public static MemorySegment CoInternetIsFeatureEnabledForIUri$address() {
        return CoInternetIsFeatureEnabledForIUri.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureEnabledForIUri(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, IUri *pIUri, IInternetSecurityManagerEx2 *pSecMgr)
     * }
     */
    public static int CoInternetIsFeatureEnabledForIUri(int FeatureEntry, int dwFlags, MemorySegment pIUri, MemorySegment pSecMgr) {
        var mh$ = CoInternetIsFeatureEnabledForIUri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetIsFeatureEnabledForIUri", FeatureEntry, dwFlags, pIUri, pSecMgr);
            }
            return (int)mh$.invokeExact(FeatureEntry, dwFlags, pIUri, pSecMgr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetIsFeatureZoneElevationEnabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoInternetIsFeatureZoneElevationEnabled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureZoneElevationEnabled(LPCWSTR szFromURL, LPCWSTR szToURL, IInternetSecurityManager *pSecMgr, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor CoInternetIsFeatureZoneElevationEnabled$descriptor() {
        return CoInternetIsFeatureZoneElevationEnabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureZoneElevationEnabled(LPCWSTR szFromURL, LPCWSTR szToURL, IInternetSecurityManager *pSecMgr, DWORD dwFlags)
     * }
     */
    public static MethodHandle CoInternetIsFeatureZoneElevationEnabled$handle() {
        return CoInternetIsFeatureZoneElevationEnabled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureZoneElevationEnabled(LPCWSTR szFromURL, LPCWSTR szToURL, IInternetSecurityManager *pSecMgr, DWORD dwFlags)
     * }
     */
    public static MemorySegment CoInternetIsFeatureZoneElevationEnabled$address() {
        return CoInternetIsFeatureZoneElevationEnabled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureZoneElevationEnabled(LPCWSTR szFromURL, LPCWSTR szToURL, IInternetSecurityManager *pSecMgr, DWORD dwFlags)
     * }
     */
    public static int CoInternetIsFeatureZoneElevationEnabled(MemorySegment szFromURL, MemorySegment szToURL, MemorySegment pSecMgr, int dwFlags) {
        var mh$ = CoInternetIsFeatureZoneElevationEnabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetIsFeatureZoneElevationEnabled", szFromURL, szToURL, pSecMgr, dwFlags);
            }
            return (int)mh$.invokeExact(szFromURL, szToURL, pSecMgr, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CopyStgMedium {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CopyStgMedium");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CopyStgMedium(const STGMEDIUM *pcstgmedSrc, STGMEDIUM *pstgmedDest)
     * }
     */
    public static FunctionDescriptor CopyStgMedium$descriptor() {
        return CopyStgMedium.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CopyStgMedium(const STGMEDIUM *pcstgmedSrc, STGMEDIUM *pstgmedDest)
     * }
     */
    public static MethodHandle CopyStgMedium$handle() {
        return CopyStgMedium.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CopyStgMedium(const STGMEDIUM *pcstgmedSrc, STGMEDIUM *pstgmedDest)
     * }
     */
    public static MemorySegment CopyStgMedium$address() {
        return CopyStgMedium.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CopyStgMedium(const STGMEDIUM *pcstgmedSrc, STGMEDIUM *pstgmedDest)
     * }
     */
    public static int CopyStgMedium(MemorySegment pcstgmedSrc, MemorySegment pstgmedDest) {
        var mh$ = CopyStgMedium.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CopyStgMedium", pcstgmedSrc, pstgmedDest);
            }
            return (int)mh$.invokeExact(pcstgmedSrc, pstgmedDest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CopyBindInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CopyBindInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CopyBindInfo(const BINDINFO *pcbiSrc, BINDINFO *pbiDest)
     * }
     */
    public static FunctionDescriptor CopyBindInfo$descriptor() {
        return CopyBindInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CopyBindInfo(const BINDINFO *pcbiSrc, BINDINFO *pbiDest)
     * }
     */
    public static MethodHandle CopyBindInfo$handle() {
        return CopyBindInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CopyBindInfo(const BINDINFO *pcbiSrc, BINDINFO *pbiDest)
     * }
     */
    public static MemorySegment CopyBindInfo$address() {
        return CopyBindInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CopyBindInfo(const BINDINFO *pcbiSrc, BINDINFO *pbiDest)
     * }
     */
    public static int CopyBindInfo(MemorySegment pcbiSrc, MemorySegment pbiDest) {
        var mh$ = CopyBindInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CopyBindInfo", pcbiSrc, pbiDest);
            }
            return (int)mh$.invokeExact(pcbiSrc, pbiDest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ReleaseBindInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ReleaseBindInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ReleaseBindInfo(BINDINFO *pbindinfo)
     * }
     */
    public static FunctionDescriptor ReleaseBindInfo$descriptor() {
        return ReleaseBindInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ReleaseBindInfo(BINDINFO *pbindinfo)
     * }
     */
    public static MethodHandle ReleaseBindInfo$handle() {
        return ReleaseBindInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ReleaseBindInfo(BINDINFO *pbindinfo)
     * }
     */
    public static MemorySegment ReleaseBindInfo$address() {
        return ReleaseBindInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ReleaseBindInfo(BINDINFO *pbindinfo)
     * }
     */
    public static void ReleaseBindInfo(MemorySegment pbindinfo) {
        var mh$ = ReleaseBindInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ReleaseBindInfo", pbindinfo);
            }
            mh$.invokeExact(pbindinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEGetUserPrivateNamespaceName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEGetUserPrivateNamespaceName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PWSTR IEGetUserPrivateNamespaceName()
     * }
     */
    public static FunctionDescriptor IEGetUserPrivateNamespaceName$descriptor() {
        return IEGetUserPrivateNamespaceName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PWSTR IEGetUserPrivateNamespaceName()
     * }
     */
    public static MethodHandle IEGetUserPrivateNamespaceName$handle() {
        return IEGetUserPrivateNamespaceName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern PWSTR IEGetUserPrivateNamespaceName()
     * }
     */
    public static MemorySegment IEGetUserPrivateNamespaceName$address() {
        return IEGetUserPrivateNamespaceName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern PWSTR IEGetUserPrivateNamespaceName()
     * }
     */
    public static MemorySegment IEGetUserPrivateNamespaceName() {
        var mh$ = IEGetUserPrivateNamespaceName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEGetUserPrivateNamespaceName");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetCreateSecurityManager {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoInternetCreateSecurityManager");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCreateSecurityManager(IServiceProvider *pSP, IInternetSecurityManager **ppSM, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor CoInternetCreateSecurityManager$descriptor() {
        return CoInternetCreateSecurityManager.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCreateSecurityManager(IServiceProvider *pSP, IInternetSecurityManager **ppSM, DWORD dwReserved)
     * }
     */
    public static MethodHandle CoInternetCreateSecurityManager$handle() {
        return CoInternetCreateSecurityManager.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCreateSecurityManager(IServiceProvider *pSP, IInternetSecurityManager **ppSM, DWORD dwReserved)
     * }
     */
    public static MemorySegment CoInternetCreateSecurityManager$address() {
        return CoInternetCreateSecurityManager.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetCreateSecurityManager(IServiceProvider *pSP, IInternetSecurityManager **ppSM, DWORD dwReserved)
     * }
     */
    public static int CoInternetCreateSecurityManager(MemorySegment pSP, MemorySegment ppSM, int dwReserved) {
        var mh$ = CoInternetCreateSecurityManager.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetCreateSecurityManager", pSP, ppSM, dwReserved);
            }
            return (int)mh$.invokeExact(pSP, ppSM, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetCreateZoneManager {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoInternetCreateZoneManager");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCreateZoneManager(IServiceProvider *pSP, IInternetZoneManager **ppZM, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor CoInternetCreateZoneManager$descriptor() {
        return CoInternetCreateZoneManager.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCreateZoneManager(IServiceProvider *pSP, IInternetZoneManager **ppZM, DWORD dwReserved)
     * }
     */
    public static MethodHandle CoInternetCreateZoneManager$handle() {
        return CoInternetCreateZoneManager.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCreateZoneManager(IServiceProvider *pSP, IInternetZoneManager **ppZM, DWORD dwReserved)
     * }
     */
    public static MemorySegment CoInternetCreateZoneManager$address() {
        return CoInternetCreateZoneManager.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetCreateZoneManager(IServiceProvider *pSP, IInternetZoneManager **ppZM, DWORD dwReserved)
     * }
     */
    public static int CoInternetCreateZoneManager(MemorySegment pSP, MemorySegment ppZM, int dwReserved) {
        var mh$ = CoInternetCreateZoneManager.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetCreateZoneManager", pSP, ppZM, dwReserved);
            }
            return (int)mh$.invokeExact(pSP, ppZM, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLSID_InternetSecurityManager$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_InternetSecurityManager").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_InternetSecurityManager
     * }
     */
    public static GroupLayout CLSID_InternetSecurityManager$layout() {
        return CLSID_InternetSecurityManager$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_InternetSecurityManager
     * }
     */
    public static MemorySegment CLSID_InternetSecurityManager() {
        return CLSID_InternetSecurityManager$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_InternetSecurityManager
     * }
     */
    public static void CLSID_InternetSecurityManager(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_InternetSecurityManager$constants.SEGMENT, 0L, CLSID_InternetSecurityManager$constants.LAYOUT.byteSize());
    }

    private static class CLSID_InternetZoneManager$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_InternetZoneManager").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_InternetZoneManager
     * }
     */
    public static GroupLayout CLSID_InternetZoneManager$layout() {
        return CLSID_InternetZoneManager$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_InternetZoneManager
     * }
     */
    public static MemorySegment CLSID_InternetZoneManager() {
        return CLSID_InternetZoneManager$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_InternetZoneManager
     * }
     */
    public static void CLSID_InternetZoneManager(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_InternetZoneManager$constants.SEGMENT, 0L, CLSID_InternetZoneManager$constants.LAYOUT.byteSize());
    }

    private static class CLSID_PersistentZoneIdentifier$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_PersistentZoneIdentifier").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_PersistentZoneIdentifier
     * }
     */
    public static GroupLayout CLSID_PersistentZoneIdentifier$layout() {
        return CLSID_PersistentZoneIdentifier$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_PersistentZoneIdentifier
     * }
     */
    public static MemorySegment CLSID_PersistentZoneIdentifier() {
        return CLSID_PersistentZoneIdentifier$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_PersistentZoneIdentifier
     * }
     */
    public static void CLSID_PersistentZoneIdentifier(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_PersistentZoneIdentifier$constants.SEGMENT, 0L, CLSID_PersistentZoneIdentifier$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IInternetSecurityMgrSite$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IInternetSecurityMgrSite").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSecurityMgrSite
     * }
     */
    public static GroupLayout IID_IInternetSecurityMgrSite$layout() {
        return IID_IInternetSecurityMgrSite$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSecurityMgrSite
     * }
     */
    public static MemorySegment IID_IInternetSecurityMgrSite() {
        return IID_IInternetSecurityMgrSite$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSecurityMgrSite
     * }
     */
    public static void IID_IInternetSecurityMgrSite(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetSecurityMgrSite$constants.SEGMENT, 0L, IID_IInternetSecurityMgrSite$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    private static final int PUAF_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_DEFAULT = 0
     * }
     */
    public static int PUAF_DEFAULT() {
        return PUAF_DEFAULT;
    }
    private static final int PUAF_NOUI = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_NOUI = 1
     * }
     */
    public static int PUAF_NOUI() {
        return PUAF_NOUI;
    }
    private static final int PUAF_ISFILE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_ISFILE = 2
     * }
     */
    public static int PUAF_ISFILE() {
        return PUAF_ISFILE;
    }
    private static final int PUAF_WARN_IF_DENIED = (int)4L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_WARN_IF_DENIED = 4
     * }
     */
    public static int PUAF_WARN_IF_DENIED() {
        return PUAF_WARN_IF_DENIED;
    }
    private static final int PUAF_FORCEUI_FOREGROUND = (int)8L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_FORCEUI_FOREGROUND = 8
     * }
     */
    public static int PUAF_FORCEUI_FOREGROUND() {
        return PUAF_FORCEUI_FOREGROUND;
    }
    private static final int PUAF_CHECK_TIFS = (int)16L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_CHECK_TIFS = 16
     * }
     */
    public static int PUAF_CHECK_TIFS() {
        return PUAF_CHECK_TIFS;
    }
    private static final int PUAF_DONTCHECKBOXINDIALOG = (int)32L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_DONTCHECKBOXINDIALOG = 32
     * }
     */
    public static int PUAF_DONTCHECKBOXINDIALOG() {
        return PUAF_DONTCHECKBOXINDIALOG;
    }
    private static final int PUAF_TRUSTED = (int)64L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_TRUSTED = 64
     * }
     */
    public static int PUAF_TRUSTED() {
        return PUAF_TRUSTED;
    }
    private static final int PUAF_ACCEPT_WILDCARD_SCHEME = (int)128L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_ACCEPT_WILDCARD_SCHEME = 128
     * }
     */
    public static int PUAF_ACCEPT_WILDCARD_SCHEME() {
        return PUAF_ACCEPT_WILDCARD_SCHEME;
    }
    private static final int PUAF_ENFORCERESTRICTED = (int)256L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_ENFORCERESTRICTED = 256
     * }
     */
    public static int PUAF_ENFORCERESTRICTED() {
        return PUAF_ENFORCERESTRICTED;
    }
    private static final int PUAF_NOSAVEDFILECHECK = (int)512L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_NOSAVEDFILECHECK = 512
     * }
     */
    public static int PUAF_NOSAVEDFILECHECK() {
        return PUAF_NOSAVEDFILECHECK;
    }
    private static final int PUAF_REQUIRESAVEDFILECHECK = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_REQUIRESAVEDFILECHECK = 1024
     * }
     */
    public static int PUAF_REQUIRESAVEDFILECHECK() {
        return PUAF_REQUIRESAVEDFILECHECK;
    }
    private static final int PUAF_DONT_USE_CACHE = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_DONT_USE_CACHE = 4096
     * }
     */
    public static int PUAF_DONT_USE_CACHE() {
        return PUAF_DONT_USE_CACHE;
    }
    private static final int PUAF_RESERVED1 = (int)8192L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_RESERVED1 = 8192
     * }
     */
    public static int PUAF_RESERVED1() {
        return PUAF_RESERVED1;
    }
    private static final int PUAF_RESERVED2 = (int)16384L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_RESERVED2 = 16384
     * }
     */
    public static int PUAF_RESERVED2() {
        return PUAF_RESERVED2;
    }
    private static final int PUAF_LMZ_UNLOCKED = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_LMZ_UNLOCKED = 65536
     * }
     */
    public static int PUAF_LMZ_UNLOCKED() {
        return PUAF_LMZ_UNLOCKED;
    }
    private static final int PUAF_LMZ_LOCKED = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_LMZ_LOCKED = 131072
     * }
     */
    public static int PUAF_LMZ_LOCKED() {
        return PUAF_LMZ_LOCKED;
    }
    private static final int PUAF_DEFAULTZONEPOL = (int)262144L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_DEFAULTZONEPOL = 262144
     * }
     */
    public static int PUAF_DEFAULTZONEPOL() {
        return PUAF_DEFAULTZONEPOL;
    }
    private static final int PUAF_NPL_USE_LOCKED_IF_RESTRICTED = (int)524288L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_NPL_USE_LOCKED_IF_RESTRICTED = 524288
     * }
     */
    public static int PUAF_NPL_USE_LOCKED_IF_RESTRICTED() {
        return PUAF_NPL_USE_LOCKED_IF_RESTRICTED;
    }
    private static final int PUAF_NOUIIFLOCKED = (int)1048576L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_NOUIIFLOCKED = 1048576
     * }
     */
    public static int PUAF_NOUIIFLOCKED() {
        return PUAF_NOUIIFLOCKED;
    }
    private static final int PUAF_DRAGPROTOCOLCHECK = (int)2097152L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_DRAGPROTOCOLCHECK = 2097152
     * }
     */
    public static int PUAF_DRAGPROTOCOLCHECK() {
        return PUAF_DRAGPROTOCOLCHECK;
    }
    private static final int PUAFOUT_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0002.PUAFOUT_DEFAULT = 0
     * }
     */
    public static int PUAFOUT_DEFAULT() {
        return PUAFOUT_DEFAULT;
    }
    private static final int PUAFOUT_ISLOCKZONEPOLICY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0002.PUAFOUT_ISLOCKZONEPOLICY = 1
     * }
     */
    public static int PUAFOUT_ISLOCKZONEPOLICY() {
        return PUAFOUT_ISLOCKZONEPOLICY;
    }
    private static final int SZM_CREATE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0003.SZM_CREATE = 0
     * }
     */
    public static int SZM_CREATE() {
        return SZM_CREATE;
    }
    private static final int SZM_DELETE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0003.SZM_DELETE = 1
     * }
     */
    public static int SZM_DELETE() {
        return SZM_DELETE;
    }

    private static class IID_IInternetSecurityManager$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IInternetSecurityManager").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSecurityManager
     * }
     */
    public static GroupLayout IID_IInternetSecurityManager$layout() {
        return IID_IInternetSecurityManager$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSecurityManager
     * }
     */
    public static MemorySegment IID_IInternetSecurityManager() {
        return IID_IInternetSecurityManager$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSecurityManager
     * }
     */
    public static void IID_IInternetSecurityManager(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetSecurityManager$constants.SEGMENT, 0L, IID_IInternetSecurityManager$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IInternetSecurityManagerEx$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IInternetSecurityManagerEx").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSecurityManagerEx
     * }
     */
    public static GroupLayout IID_IInternetSecurityManagerEx$layout() {
        return IID_IInternetSecurityManagerEx$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSecurityManagerEx
     * }
     */
    public static MemorySegment IID_IInternetSecurityManagerEx() {
        return IID_IInternetSecurityManagerEx$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSecurityManagerEx
     * }
     */
    public static void IID_IInternetSecurityManagerEx(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetSecurityManagerEx$constants.SEGMENT, 0L, IID_IInternetSecurityManagerEx$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IInternetSecurityManagerEx2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IInternetSecurityManagerEx2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSecurityManagerEx2
     * }
     */
    public static GroupLayout IID_IInternetSecurityManagerEx2$layout() {
        return IID_IInternetSecurityManagerEx2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSecurityManagerEx2
     * }
     */
    public static MemorySegment IID_IInternetSecurityManagerEx2() {
        return IID_IInternetSecurityManagerEx2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSecurityManagerEx2
     * }
     */
    public static void IID_IInternetSecurityManagerEx2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetSecurityManagerEx2$constants.SEGMENT, 0L, IID_IInternetSecurityManagerEx2$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IZoneIdentifier$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IZoneIdentifier").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IZoneIdentifier
     * }
     */
    public static GroupLayout IID_IZoneIdentifier$layout() {
        return IID_IZoneIdentifier$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IZoneIdentifier
     * }
     */
    public static MemorySegment IID_IZoneIdentifier() {
        return IID_IZoneIdentifier$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IZoneIdentifier
     * }
     */
    public static void IID_IZoneIdentifier(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IZoneIdentifier$constants.SEGMENT, 0L, IID_IZoneIdentifier$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IZoneIdentifier2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IZoneIdentifier2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IZoneIdentifier2
     * }
     */
    public static GroupLayout IID_IZoneIdentifier2$layout() {
        return IID_IZoneIdentifier2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IZoneIdentifier2
     * }
     */
    public static MemorySegment IID_IZoneIdentifier2() {
        return IID_IZoneIdentifier2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IZoneIdentifier2
     * }
     */
    public static void IID_IZoneIdentifier2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IZoneIdentifier2$constants.SEGMENT, 0L, IID_IZoneIdentifier2$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IInternetHostSecurityManager$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IInternetHostSecurityManager").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetHostSecurityManager
     * }
     */
    public static GroupLayout IID_IInternetHostSecurityManager$layout() {
        return IID_IInternetHostSecurityManager$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetHostSecurityManager
     * }
     */
    public static MemorySegment IID_IInternetHostSecurityManager() {
        return IID_IInternetHostSecurityManager$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetHostSecurityManager
     * }
     */
    public static void IID_IInternetHostSecurityManager(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetHostSecurityManager$constants.SEGMENT, 0L, IID_IInternetHostSecurityManager$constants.LAYOUT.byteSize());
    }

    private static class GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED
     * }
     */
    public static GroupLayout GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED$layout() {
        return GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED
     * }
     */
    public static MemorySegment GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED() {
        return GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED
     * }
     */
    public static void GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED$constants.SEGMENT, 0L, GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IInternetZoneManager *LPURLZONEMANAGER
     * }
     */
    public static final AddressLayout LPURLZONEMANAGER = wgl_h.C_POINTER;
    private static final int URLZONE_INVALID = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum tagURLZONE.URLZONE_INVALID = -1
     * }
     */
    public static int URLZONE_INVALID() {
        return URLZONE_INVALID;
    }
    private static final int URLZONE_PREDEFINED_MIN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagURLZONE.URLZONE_PREDEFINED_MIN = 0
     * }
     */
    public static int URLZONE_PREDEFINED_MIN() {
        return URLZONE_PREDEFINED_MIN;
    }
    private static final int URLZONE_LOCAL_MACHINE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagURLZONE.URLZONE_LOCAL_MACHINE = 0
     * }
     */
    public static int URLZONE_LOCAL_MACHINE() {
        return URLZONE_LOCAL_MACHINE;
    }
    private static final int URLZONE_INTRANET = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagURLZONE.URLZONE_INTRANET = 1
     * }
     */
    public static int URLZONE_INTRANET() {
        return URLZONE_INTRANET;
    }
    private static final int URLZONE_TRUSTED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagURLZONE.URLZONE_TRUSTED = 2
     * }
     */
    public static int URLZONE_TRUSTED() {
        return URLZONE_TRUSTED;
    }
    private static final int URLZONE_INTERNET = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagURLZONE.URLZONE_INTERNET = 3
     * }
     */
    public static int URLZONE_INTERNET() {
        return URLZONE_INTERNET;
    }
    private static final int URLZONE_UNTRUSTED = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagURLZONE.URLZONE_UNTRUSTED = 4
     * }
     */
    public static int URLZONE_UNTRUSTED() {
        return URLZONE_UNTRUSTED;
    }
    private static final int URLZONE_PREDEFINED_MAX = (int)999L;
    /**
     * {@snippet lang=c :
     * enum tagURLZONE.URLZONE_PREDEFINED_MAX = 999
     * }
     */
    public static int URLZONE_PREDEFINED_MAX() {
        return URLZONE_PREDEFINED_MAX;
    }
    private static final int URLZONE_USER_MIN = (int)1000L;
    /**
     * {@snippet lang=c :
     * enum tagURLZONE.URLZONE_USER_MIN = 1000
     * }
     */
    public static int URLZONE_USER_MIN() {
        return URLZONE_USER_MIN;
    }
    private static final int URLZONE_USER_MAX = (int)10000L;
    /**
     * {@snippet lang=c :
     * enum tagURLZONE.URLZONE_USER_MAX = 10000
     * }
     */
    public static int URLZONE_USER_MAX() {
        return URLZONE_USER_MAX;
    }
    private static final int URLTEMPLATE_CUSTOM = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagURLTEMPLATE.URLTEMPLATE_CUSTOM = 0
     * }
     */
    public static int URLTEMPLATE_CUSTOM() {
        return URLTEMPLATE_CUSTOM;
    }
    private static final int URLTEMPLATE_PREDEFINED_MIN = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum tagURLTEMPLATE.URLTEMPLATE_PREDEFINED_MIN = 65536
     * }
     */
    public static int URLTEMPLATE_PREDEFINED_MIN() {
        return URLTEMPLATE_PREDEFINED_MIN;
    }
    private static final int URLTEMPLATE_LOW = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum tagURLTEMPLATE.URLTEMPLATE_LOW = 65536
     * }
     */
    public static int URLTEMPLATE_LOW() {
        return URLTEMPLATE_LOW;
    }
    private static final int URLTEMPLATE_MEDLOW = (int)66816L;
    /**
     * {@snippet lang=c :
     * enum tagURLTEMPLATE.URLTEMPLATE_MEDLOW = 66816
     * }
     */
    public static int URLTEMPLATE_MEDLOW() {
        return URLTEMPLATE_MEDLOW;
    }
    private static final int URLTEMPLATE_MEDIUM = (int)69632L;
    /**
     * {@snippet lang=c :
     * enum tagURLTEMPLATE.URLTEMPLATE_MEDIUM = 69632
     * }
     */
    public static int URLTEMPLATE_MEDIUM() {
        return URLTEMPLATE_MEDIUM;
    }
    private static final int URLTEMPLATE_MEDHIGH = (int)70912L;
    /**
     * {@snippet lang=c :
     * enum tagURLTEMPLATE.URLTEMPLATE_MEDHIGH = 70912
     * }
     */
    public static int URLTEMPLATE_MEDHIGH() {
        return URLTEMPLATE_MEDHIGH;
    }
    private static final int URLTEMPLATE_HIGH = (int)73728L;
    /**
     * {@snippet lang=c :
     * enum tagURLTEMPLATE.URLTEMPLATE_HIGH = 73728
     * }
     */
    public static int URLTEMPLATE_HIGH() {
        return URLTEMPLATE_HIGH;
    }
    private static final int URLTEMPLATE_PREDEFINED_MAX = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum tagURLTEMPLATE.URLTEMPLATE_PREDEFINED_MAX = 131072
     * }
     */
    public static int URLTEMPLATE_PREDEFINED_MAX() {
        return URLTEMPLATE_PREDEFINED_MAX;
    }
    private static final int MAX_ZONE_PATH = (int)260L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0001.MAX_ZONE_PATH = 260
     * }
     */
    public static int MAX_ZONE_PATH() {
        return MAX_ZONE_PATH;
    }
    private static final int MAX_ZONE_DESCRIPTION = (int)200L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0001.MAX_ZONE_DESCRIPTION = 200
     * }
     */
    public static int MAX_ZONE_DESCRIPTION() {
        return MAX_ZONE_DESCRIPTION;
    }
    private static final int ZAFLAGS_CUSTOM_EDIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0002.ZAFLAGS_CUSTOM_EDIT = 1
     * }
     */
    public static int ZAFLAGS_CUSTOM_EDIT() {
        return ZAFLAGS_CUSTOM_EDIT;
    }
    private static final int ZAFLAGS_ADD_SITES = (int)2L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0002.ZAFLAGS_ADD_SITES = 2
     * }
     */
    public static int ZAFLAGS_ADD_SITES() {
        return ZAFLAGS_ADD_SITES;
    }
    private static final int ZAFLAGS_REQUIRE_VERIFICATION = (int)4L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0002.ZAFLAGS_REQUIRE_VERIFICATION = 4
     * }
     */
    public static int ZAFLAGS_REQUIRE_VERIFICATION() {
        return ZAFLAGS_REQUIRE_VERIFICATION;
    }
    private static final int ZAFLAGS_INCLUDE_PROXY_OVERRIDE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0002.ZAFLAGS_INCLUDE_PROXY_OVERRIDE = 8
     * }
     */
    public static int ZAFLAGS_INCLUDE_PROXY_OVERRIDE() {
        return ZAFLAGS_INCLUDE_PROXY_OVERRIDE;
    }
    private static final int ZAFLAGS_INCLUDE_INTRANET_SITES = (int)16L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0002.ZAFLAGS_INCLUDE_INTRANET_SITES = 16
     * }
     */
    public static int ZAFLAGS_INCLUDE_INTRANET_SITES() {
        return ZAFLAGS_INCLUDE_INTRANET_SITES;
    }
    private static final int ZAFLAGS_NO_UI = (int)32L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0002.ZAFLAGS_NO_UI = 32
     * }
     */
    public static int ZAFLAGS_NO_UI() {
        return ZAFLAGS_NO_UI;
    }
    private static final int ZAFLAGS_SUPPORTS_VERIFICATION = (int)64L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0002.ZAFLAGS_SUPPORTS_VERIFICATION = 64
     * }
     */
    public static int ZAFLAGS_SUPPORTS_VERIFICATION() {
        return ZAFLAGS_SUPPORTS_VERIFICATION;
    }
    private static final int ZAFLAGS_UNC_AS_INTRANET = (int)128L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0002.ZAFLAGS_UNC_AS_INTRANET = 128
     * }
     */
    public static int ZAFLAGS_UNC_AS_INTRANET() {
        return ZAFLAGS_UNC_AS_INTRANET;
    }
    private static final int ZAFLAGS_DETECT_INTRANET = (int)256L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0002.ZAFLAGS_DETECT_INTRANET = 256
     * }
     */
    public static int ZAFLAGS_DETECT_INTRANET() {
        return ZAFLAGS_DETECT_INTRANET;
    }
    private static final int ZAFLAGS_USE_LOCKED_ZONES = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0002.ZAFLAGS_USE_LOCKED_ZONES = 65536
     * }
     */
    public static int ZAFLAGS_USE_LOCKED_ZONES() {
        return ZAFLAGS_USE_LOCKED_ZONES;
    }
    private static final int ZAFLAGS_VERIFY_TEMPLATE_SETTINGS = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0002.ZAFLAGS_VERIFY_TEMPLATE_SETTINGS = 131072
     * }
     */
    public static int ZAFLAGS_VERIFY_TEMPLATE_SETTINGS() {
        return ZAFLAGS_VERIFY_TEMPLATE_SETTINGS;
    }
    private static final int ZAFLAGS_NO_CACHE = (int)262144L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0002.ZAFLAGS_NO_CACHE = 262144
     * }
     */
    public static int ZAFLAGS_NO_CACHE() {
        return ZAFLAGS_NO_CACHE;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _ZONEATTRIBUTES {
     *     ULONG cbSize;
     *     WCHAR szDisplayName[260];
     *     WCHAR szDescription[200];
     *     WCHAR szIconPath[260];
     *     DWORD dwTemplateMinLevel;
     *     DWORD dwTemplateRecommended;
     *     DWORD dwTemplateCurrentLevel;
     *     DWORD dwFlags;
     * } *LPZONEATTRIBUTES
     * }
     */
    public static final AddressLayout LPZONEATTRIBUTES = wgl_h.C_POINTER;
    private static final int URLZONEREG_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _URLZONEREG.URLZONEREG_DEFAULT = 0
     * }
     */
    public static int URLZONEREG_DEFAULT() {
        return URLZONEREG_DEFAULT;
    }
    private static final int URLZONEREG_HKLM = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _URLZONEREG.URLZONEREG_HKLM = 1
     * }
     */
    public static int URLZONEREG_HKLM() {
        return URLZONEREG_HKLM;
    }
    private static final int URLZONEREG_HKCU = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _URLZONEREG.URLZONEREG_HKCU = 2
     * }
     */
    public static int URLZONEREG_HKCU() {
        return URLZONEREG_HKCU;
    }

    private static class IID_IInternetZoneManager$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IInternetZoneManager").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetZoneManager
     * }
     */
    public static GroupLayout IID_IInternetZoneManager$layout() {
        return IID_IInternetZoneManager$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetZoneManager
     * }
     */
    public static MemorySegment IID_IInternetZoneManager() {
        return IID_IInternetZoneManager$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetZoneManager
     * }
     */
    public static void IID_IInternetZoneManager(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetZoneManager$constants.SEGMENT, 0L, IID_IInternetZoneManager$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IInternetZoneManagerEx$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IInternetZoneManagerEx").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetZoneManagerEx
     * }
     */
    public static GroupLayout IID_IInternetZoneManagerEx$layout() {
        return IID_IInternetZoneManagerEx$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetZoneManagerEx
     * }
     */
    public static MemorySegment IID_IInternetZoneManagerEx() {
        return IID_IInternetZoneManagerEx$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetZoneManagerEx
     * }
     */
    public static void IID_IInternetZoneManagerEx(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetZoneManagerEx$constants.SEGMENT, 0L, IID_IInternetZoneManagerEx$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IInternetZoneManagerEx2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IInternetZoneManagerEx2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetZoneManagerEx2
     * }
     */
    public static GroupLayout IID_IInternetZoneManagerEx2$layout() {
        return IID_IInternetZoneManagerEx2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetZoneManagerEx2
     * }
     */
    public static MemorySegment IID_IInternetZoneManagerEx2() {
        return IID_IInternetZoneManagerEx2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetZoneManagerEx2
     * }
     */
    public static void IID_IInternetZoneManagerEx2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetZoneManagerEx2$constants.SEGMENT, 0L, IID_IInternetZoneManagerEx2$constants.LAYOUT.byteSize());
    }

    private static class CLSID_SoftDistExt$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_SoftDistExt").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SoftDistExt
     * }
     */
    public static GroupLayout CLSID_SoftDistExt$layout() {
        return CLSID_SoftDistExt$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SoftDistExt
     * }
     */
    public static MemorySegment CLSID_SoftDistExt() {
        return CLSID_SoftDistExt$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SoftDistExt
     * }
     */
    public static void CLSID_SoftDistExt(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_SoftDistExt$constants.SEGMENT, 0L, CLSID_SoftDistExt$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef struct _tagCODEBASEHOLD {
     *     ULONG cbSize;
     *     LPWSTR szDistUnit;
     *     LPWSTR szCodeBase;
     *     DWORD dwVersionMS;
     *     DWORD dwVersionLS;
     *     DWORD dwStyle;
     * } *LPCODEBASEHOLD
     * }
     */
    public static final AddressLayout LPCODEBASEHOLD = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _tagSOFTDISTINFO {
     *     ULONG cbSize;
     *     DWORD dwFlags;
     *     DWORD dwAdState;
     *     LPWSTR szTitle;
     *     LPWSTR szAbstract;
     *     LPWSTR szHREF;
     *     DWORD dwInstalledVersionMS;
     *     DWORD dwInstalledVersionLS;
     *     DWORD dwUpdateVersionMS;
     *     DWORD dwUpdateVersionLS;
     *     DWORD dwAdvertisedVersionMS;
     *     DWORD dwAdvertisedVersionLS;
     *     DWORD dwReserved;
     * } *LPSOFTDISTINFO
     * }
     */
    public static final AddressLayout LPSOFTDISTINFO = wgl_h.C_POINTER;

    private static class __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_ISoftDistExt$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_ISoftDistExt").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISoftDistExt
     * }
     */
    public static GroupLayout IID_ISoftDistExt$layout() {
        return IID_ISoftDistExt$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISoftDistExt
     * }
     */
    public static MemorySegment IID_ISoftDistExt() {
        return IID_ISoftDistExt$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISoftDistExt
     * }
     */
    public static void IID_ISoftDistExt(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ISoftDistExt$constants.SEGMENT, 0L, IID_ISoftDistExt$constants.LAYOUT.byteSize());
    }

    private static class GetSoftwareUpdateInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetSoftwareUpdateInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT GetSoftwareUpdateInfo(LPCWSTR szDistUnit, LPSOFTDISTINFO psdi)
     * }
     */
    public static FunctionDescriptor GetSoftwareUpdateInfo$descriptor() {
        return GetSoftwareUpdateInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT GetSoftwareUpdateInfo(LPCWSTR szDistUnit, LPSOFTDISTINFO psdi)
     * }
     */
    public static MethodHandle GetSoftwareUpdateInfo$handle() {
        return GetSoftwareUpdateInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT GetSoftwareUpdateInfo(LPCWSTR szDistUnit, LPSOFTDISTINFO psdi)
     * }
     */
    public static MemorySegment GetSoftwareUpdateInfo$address() {
        return GetSoftwareUpdateInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT GetSoftwareUpdateInfo(LPCWSTR szDistUnit, LPSOFTDISTINFO psdi)
     * }
     */
    public static int GetSoftwareUpdateInfo(MemorySegment szDistUnit, MemorySegment psdi) {
        var mh$ = GetSoftwareUpdateInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetSoftwareUpdateInfo", szDistUnit, psdi);
            }
            return (int)mh$.invokeExact(szDistUnit, psdi);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetSoftwareUpdateAdvertisementState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SetSoftwareUpdateAdvertisementState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SetSoftwareUpdateAdvertisementState(LPCWSTR szDistUnit, DWORD dwAdState, DWORD dwAdvertisedVersionMS, DWORD dwAdvertisedVersionLS)
     * }
     */
    public static FunctionDescriptor SetSoftwareUpdateAdvertisementState$descriptor() {
        return SetSoftwareUpdateAdvertisementState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SetSoftwareUpdateAdvertisementState(LPCWSTR szDistUnit, DWORD dwAdState, DWORD dwAdvertisedVersionMS, DWORD dwAdvertisedVersionLS)
     * }
     */
    public static MethodHandle SetSoftwareUpdateAdvertisementState$handle() {
        return SetSoftwareUpdateAdvertisementState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SetSoftwareUpdateAdvertisementState(LPCWSTR szDistUnit, DWORD dwAdState, DWORD dwAdvertisedVersionMS, DWORD dwAdvertisedVersionLS)
     * }
     */
    public static MemorySegment SetSoftwareUpdateAdvertisementState$address() {
        return SetSoftwareUpdateAdvertisementState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SetSoftwareUpdateAdvertisementState(LPCWSTR szDistUnit, DWORD dwAdState, DWORD dwAdvertisedVersionMS, DWORD dwAdvertisedVersionLS)
     * }
     */
    public static int SetSoftwareUpdateAdvertisementState(MemorySegment szDistUnit, int dwAdState, int dwAdvertisedVersionMS, int dwAdvertisedVersionLS) {
        var mh$ = SetSoftwareUpdateAdvertisementState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetSoftwareUpdateAdvertisementState", szDistUnit, dwAdState, dwAdvertisedVersionMS, dwAdvertisedVersionLS);
            }
            return (int)mh$.invokeExact(szDistUnit, dwAdState, dwAdvertisedVersionMS, dwAdvertisedVersionLS);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef ICatalogFileInfo *LPCATALOGFILEINFO
     * }
     */
    public static final AddressLayout LPCATALOGFILEINFO = wgl_h.C_POINTER;

    private static class IID_ICatalogFileInfo$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_ICatalogFileInfo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICatalogFileInfo
     * }
     */
    public static GroupLayout IID_ICatalogFileInfo$layout() {
        return IID_ICatalogFileInfo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICatalogFileInfo
     * }
     */
    public static MemorySegment IID_ICatalogFileInfo() {
        return IID_ICatalogFileInfo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICatalogFileInfo
     * }
     */
    public static void IID_ICatalogFileInfo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ICatalogFileInfo$constants.SEGMENT, 0L, IID_ICatalogFileInfo$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IDataFilter *LPDATAFILTER
     * }
     */
    public static final AddressLayout LPDATAFILTER = wgl_h.C_POINTER;

    private static class IID_IDataFilter$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IDataFilter").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDataFilter
     * }
     */
    public static GroupLayout IID_IDataFilter$layout() {
        return IID_IDataFilter$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDataFilter
     * }
     */
    public static MemorySegment IID_IDataFilter() {
        return IID_IDataFilter$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDataFilter
     * }
     */
    public static void IID_IDataFilter(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IDataFilter$constants.SEGMENT, 0L, IID_IDataFilter$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IEncodingFilterFactory *LPENCODINGFILTERFACTORY
     * }
     */
    public static final AddressLayout LPENCODINGFILTERFACTORY = wgl_h.C_POINTER;

    private static class IID_IEncodingFilterFactory$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IEncodingFilterFactory").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEncodingFilterFactory
     * }
     */
    public static GroupLayout IID_IEncodingFilterFactory$layout() {
        return IID_IEncodingFilterFactory$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEncodingFilterFactory
     * }
     */
    public static MemorySegment IID_IEncodingFilterFactory() {
        return IID_IEncodingFilterFactory$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEncodingFilterFactory
     * }
     */
    public static void IID_IEncodingFilterFactory(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IEncodingFilterFactory$constants.SEGMENT, 0L, IID_IEncodingFilterFactory$constants.LAYOUT.byteSize());
    }

    private static class IsLoggingEnabledA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IsLoggingEnabledA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL IsLoggingEnabledA(LPCSTR pszUrl)
     * }
     */
    public static FunctionDescriptor IsLoggingEnabledA$descriptor() {
        return IsLoggingEnabledA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL IsLoggingEnabledA(LPCSTR pszUrl)
     * }
     */
    public static MethodHandle IsLoggingEnabledA$handle() {
        return IsLoggingEnabledA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL IsLoggingEnabledA(LPCSTR pszUrl)
     * }
     */
    public static MemorySegment IsLoggingEnabledA$address() {
        return IsLoggingEnabledA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL IsLoggingEnabledA(LPCSTR pszUrl)
     * }
     */
    public static int IsLoggingEnabledA(MemorySegment pszUrl) {
        var mh$ = IsLoggingEnabledA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IsLoggingEnabledA", pszUrl);
            }
            return (int)mh$.invokeExact(pszUrl);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IsLoggingEnabledW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IsLoggingEnabledW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL IsLoggingEnabledW(LPCWSTR pwszUrl)
     * }
     */
    public static FunctionDescriptor IsLoggingEnabledW$descriptor() {
        return IsLoggingEnabledW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL IsLoggingEnabledW(LPCWSTR pwszUrl)
     * }
     */
    public static MethodHandle IsLoggingEnabledW$handle() {
        return IsLoggingEnabledW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL IsLoggingEnabledW(LPCWSTR pwszUrl)
     * }
     */
    public static MemorySegment IsLoggingEnabledW$address() {
        return IsLoggingEnabledW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL IsLoggingEnabledW(LPCWSTR pwszUrl)
     * }
     */
    public static int IsLoggingEnabledW(MemorySegment pwszUrl) {
        var mh$ = IsLoggingEnabledW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IsLoggingEnabledW", pwszUrl);
            }
            return (int)mh$.invokeExact(pwszUrl);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _tagHIT_LOGGING_INFO {
     *     DWORD dwStructSize;
     *     LPSTR lpszLoggedUrlName;
     *     SYSTEMTIME StartTime;
     *     SYSTEMTIME EndTime;
     *     LPSTR lpszExtendedInfo;
     * } *LPHIT_LOGGING_INFO
     * }
     */
    public static final AddressLayout LPHIT_LOGGING_INFO = wgl_h.C_POINTER;

    private static class WriteHitLogging {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("WriteHitLogging");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL WriteHitLogging(LPHIT_LOGGING_INFO lpLogginginfo)
     * }
     */
    public static FunctionDescriptor WriteHitLogging$descriptor() {
        return WriteHitLogging.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL WriteHitLogging(LPHIT_LOGGING_INFO lpLogginginfo)
     * }
     */
    public static MethodHandle WriteHitLogging$handle() {
        return WriteHitLogging.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL WriteHitLogging(LPHIT_LOGGING_INFO lpLogginginfo)
     * }
     */
    public static MemorySegment WriteHitLogging$address() {
        return WriteHitLogging.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL WriteHitLogging(LPHIT_LOGGING_INFO lpLogginginfo)
     * }
     */
    public static int WriteHitLogging(MemorySegment lpLogginginfo) {
        var mh$ = WriteHitLogging.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WriteHitLogging", lpLogginginfo);
            }
            return (int)mh$.invokeExact(lpLogginginfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GUID_CUSTOM_CONFIRMOBJECTSAFETY$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("GUID_CUSTOM_CONFIRMOBJECTSAFETY").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_CUSTOM_CONFIRMOBJECTSAFETY
     * }
     */
    public static GroupLayout GUID_CUSTOM_CONFIRMOBJECTSAFETY$layout() {
        return GUID_CUSTOM_CONFIRMOBJECTSAFETY$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_CUSTOM_CONFIRMOBJECTSAFETY
     * }
     */
    public static MemorySegment GUID_CUSTOM_CONFIRMOBJECTSAFETY() {
        return GUID_CUSTOM_CONFIRMOBJECTSAFETY$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_CUSTOM_CONFIRMOBJECTSAFETY
     * }
     */
    public static void GUID_CUSTOM_CONFIRMOBJECTSAFETY(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_CUSTOM_CONFIRMOBJECTSAFETY$constants.SEGMENT, 0L, GUID_CUSTOM_CONFIRMOBJECTSAFETY$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IWrappedProtocol *LPIWRAPPEDPROTOCOL
     * }
     */
    public static final AddressLayout LPIWRAPPEDPROTOCOL = wgl_h.C_POINTER;

    private static class IID_IWrappedProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IWrappedProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWrappedProtocol
     * }
     */
    public static GroupLayout IID_IWrappedProtocol$layout() {
        return IID_IWrappedProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWrappedProtocol
     * }
     */
    public static MemorySegment IID_IWrappedProtocol() {
        return IID_IWrappedProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWrappedProtocol
     * }
     */
    public static void IID_IWrappedProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IWrappedProtocol$constants.SEGMENT, 0L, IID_IWrappedProtocol$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IGetBindHandle *LPGETBINDHANDLE
     * }
     */
    public static final AddressLayout LPGETBINDHANDLE = wgl_h.C_POINTER;
    private static final int BINDHANDLETYPES_APPCACHE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IGetBindHandle_0001.BINDHANDLETYPES_APPCACHE = 0
     * }
     */
    public static int BINDHANDLETYPES_APPCACHE() {
        return BINDHANDLETYPES_APPCACHE;
    }
    private static final int BINDHANDLETYPES_DEPENDENCY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IGetBindHandle_0001.BINDHANDLETYPES_DEPENDENCY = 1
     * }
     */
    public static int BINDHANDLETYPES_DEPENDENCY() {
        return BINDHANDLETYPES_DEPENDENCY;
    }
    private static final int BINDHANDLETYPES_COUNT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IGetBindHandle_0001.BINDHANDLETYPES_COUNT = 2
     * }
     */
    public static int BINDHANDLETYPES_COUNT() {
        return BINDHANDLETYPES_COUNT;
    }

    private static class IID_IGetBindHandle$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IGetBindHandle").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IGetBindHandle
     * }
     */
    public static GroupLayout IID_IGetBindHandle$layout() {
        return IID_IGetBindHandle$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IGetBindHandle
     * }
     */
    public static MemorySegment IID_IGetBindHandle() {
        return IID_IGetBindHandle$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IGetBindHandle
     * }
     */
    public static void IID_IGetBindHandle(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IGetBindHandle$constants.SEGMENT, 0L, IID_IGetBindHandle$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef struct _tagPROTOCOL_ARGUMENT {
     *     LPCWSTR szMethod;
     *     LPCWSTR szTargetUrl;
     * } *LPPROTOCOL_ARGUMENT
     * }
     */
    public static final AddressLayout LPPROTOCOL_ARGUMENT = wgl_h.C_POINTER;

    private static class __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IBindCallbackRedirect *LPBINDCALLBACKREDIRECT
     * }
     */
    public static final AddressLayout LPBINDCALLBACKREDIRECT = wgl_h.C_POINTER;

    private static class IID_IBindCallbackRedirect$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IBindCallbackRedirect").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindCallbackRedirect
     * }
     */
    public static GroupLayout IID_IBindCallbackRedirect$layout() {
        return IID_IBindCallbackRedirect$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindCallbackRedirect
     * }
     */
    public static MemorySegment IID_IBindCallbackRedirect() {
        return IID_IBindCallbackRedirect$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindCallbackRedirect
     * }
     */
    public static void IID_IBindCallbackRedirect(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IBindCallbackRedirect$constants.SEGMENT, 0L, IID_IBindCallbackRedirect$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IBindHttpSecurity$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IBindHttpSecurity").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindHttpSecurity
     * }
     */
    public static GroupLayout IID_IBindHttpSecurity$layout() {
        return IID_IBindHttpSecurity$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindHttpSecurity
     * }
     */
    public static MemorySegment IID_IBindHttpSecurity() {
        return IID_IBindHttpSecurity$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindHttpSecurity
     * }
     */
    public static void IID_IBindHttpSecurity(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IBindHttpSecurity$constants.SEGMENT, 0L, IID_IBindHttpSecurity$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IBinding_GetBindResult_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IBinding_GetBindResult_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBinding_GetBindResult_Proxy(IBinding *This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD *pdwReserved)
     * }
     */
    public static FunctionDescriptor IBinding_GetBindResult_Proxy$descriptor() {
        return IBinding_GetBindResult_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBinding_GetBindResult_Proxy(IBinding *This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD *pdwReserved)
     * }
     */
    public static MethodHandle IBinding_GetBindResult_Proxy$handle() {
        return IBinding_GetBindResult_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBinding_GetBindResult_Proxy(IBinding *This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD *pdwReserved)
     * }
     */
    public static MemorySegment IBinding_GetBindResult_Proxy$address() {
        return IBinding_GetBindResult_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBinding_GetBindResult_Proxy(IBinding *This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD *pdwReserved)
     * }
     */
    public static int IBinding_GetBindResult_Proxy(MemorySegment This, MemorySegment pclsidProtocol, MemorySegment pdwResult, MemorySegment pszResult, MemorySegment pdwReserved) {
        var mh$ = IBinding_GetBindResult_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBinding_GetBindResult_Proxy", This, pclsidProtocol, pdwResult, pszResult, pdwReserved);
            }
            return (int)mh$.invokeExact(This, pclsidProtocol, pdwResult, pszResult, pdwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBinding_GetBindResult_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IBinding_GetBindResult_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBinding_GetBindResult_Stub(IBinding *This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor IBinding_GetBindResult_Stub$descriptor() {
        return IBinding_GetBindResult_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBinding_GetBindResult_Stub(IBinding *This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD dwReserved)
     * }
     */
    public static MethodHandle IBinding_GetBindResult_Stub$handle() {
        return IBinding_GetBindResult_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBinding_GetBindResult_Stub(IBinding *This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD dwReserved)
     * }
     */
    public static MemorySegment IBinding_GetBindResult_Stub$address() {
        return IBinding_GetBindResult_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBinding_GetBindResult_Stub(IBinding *This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD dwReserved)
     * }
     */
    public static int IBinding_GetBindResult_Stub(MemorySegment This, MemorySegment pclsidProtocol, MemorySegment pdwResult, MemorySegment pszResult, int dwReserved) {
        var mh$ = IBinding_GetBindResult_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBinding_GetBindResult_Stub", This, pclsidProtocol, pdwResult, pszResult, dwReserved);
            }
            return (int)mh$.invokeExact(This, pclsidProtocol, pdwResult, pszResult, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindStatusCallback_GetBindInfo_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IBindStatusCallback_GetBindInfo_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_GetBindInfo_Proxy(IBindStatusCallback *This, DWORD *grfBINDF, BINDINFO *pbindinfo)
     * }
     */
    public static FunctionDescriptor IBindStatusCallback_GetBindInfo_Proxy$descriptor() {
        return IBindStatusCallback_GetBindInfo_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_GetBindInfo_Proxy(IBindStatusCallback *This, DWORD *grfBINDF, BINDINFO *pbindinfo)
     * }
     */
    public static MethodHandle IBindStatusCallback_GetBindInfo_Proxy$handle() {
        return IBindStatusCallback_GetBindInfo_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_GetBindInfo_Proxy(IBindStatusCallback *This, DWORD *grfBINDF, BINDINFO *pbindinfo)
     * }
     */
    public static MemorySegment IBindStatusCallback_GetBindInfo_Proxy$address() {
        return IBindStatusCallback_GetBindInfo_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_GetBindInfo_Proxy(IBindStatusCallback *This, DWORD *grfBINDF, BINDINFO *pbindinfo)
     * }
     */
    public static int IBindStatusCallback_GetBindInfo_Proxy(MemorySegment This, MemorySegment grfBINDF, MemorySegment pbindinfo) {
        var mh$ = IBindStatusCallback_GetBindInfo_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindStatusCallback_GetBindInfo_Proxy", This, grfBINDF, pbindinfo);
            }
            return (int)mh$.invokeExact(This, grfBINDF, pbindinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindStatusCallback_GetBindInfo_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IBindStatusCallback_GetBindInfo_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_GetBindInfo_Stub(IBindStatusCallback *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed)
     * }
     */
    public static FunctionDescriptor IBindStatusCallback_GetBindInfo_Stub$descriptor() {
        return IBindStatusCallback_GetBindInfo_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_GetBindInfo_Stub(IBindStatusCallback *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed)
     * }
     */
    public static MethodHandle IBindStatusCallback_GetBindInfo_Stub$handle() {
        return IBindStatusCallback_GetBindInfo_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_GetBindInfo_Stub(IBindStatusCallback *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed)
     * }
     */
    public static MemorySegment IBindStatusCallback_GetBindInfo_Stub$address() {
        return IBindStatusCallback_GetBindInfo_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_GetBindInfo_Stub(IBindStatusCallback *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed)
     * }
     */
    public static int IBindStatusCallback_GetBindInfo_Stub(MemorySegment This, MemorySegment grfBINDF, MemorySegment pbindinfo, MemorySegment pstgmed) {
        var mh$ = IBindStatusCallback_GetBindInfo_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindStatusCallback_GetBindInfo_Stub", This, grfBINDF, pbindinfo, pstgmed);
            }
            return (int)mh$.invokeExact(This, grfBINDF, pbindinfo, pstgmed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindStatusCallback_OnDataAvailable_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IBindStatusCallback_OnDataAvailable_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_OnDataAvailable_Proxy(IBindStatusCallback *This, DWORD grfBSCF, DWORD dwSize, FORMATETC *pformatetc, STGMEDIUM *pstgmed)
     * }
     */
    public static FunctionDescriptor IBindStatusCallback_OnDataAvailable_Proxy$descriptor() {
        return IBindStatusCallback_OnDataAvailable_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_OnDataAvailable_Proxy(IBindStatusCallback *This, DWORD grfBSCF, DWORD dwSize, FORMATETC *pformatetc, STGMEDIUM *pstgmed)
     * }
     */
    public static MethodHandle IBindStatusCallback_OnDataAvailable_Proxy$handle() {
        return IBindStatusCallback_OnDataAvailable_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_OnDataAvailable_Proxy(IBindStatusCallback *This, DWORD grfBSCF, DWORD dwSize, FORMATETC *pformatetc, STGMEDIUM *pstgmed)
     * }
     */
    public static MemorySegment IBindStatusCallback_OnDataAvailable_Proxy$address() {
        return IBindStatusCallback_OnDataAvailable_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_OnDataAvailable_Proxy(IBindStatusCallback *This, DWORD grfBSCF, DWORD dwSize, FORMATETC *pformatetc, STGMEDIUM *pstgmed)
     * }
     */
    public static int IBindStatusCallback_OnDataAvailable_Proxy(MemorySegment This, int grfBSCF, int dwSize, MemorySegment pformatetc, MemorySegment pstgmed) {
        var mh$ = IBindStatusCallback_OnDataAvailable_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindStatusCallback_OnDataAvailable_Proxy", This, grfBSCF, dwSize, pformatetc, pstgmed);
            }
            return (int)mh$.invokeExact(This, grfBSCF, dwSize, pformatetc, pstgmed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindStatusCallback_OnDataAvailable_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IBindStatusCallback_OnDataAvailable_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_OnDataAvailable_Stub(IBindStatusCallback *This, DWORD grfBSCF, DWORD dwSize, RemFORMATETC *pformatetc, RemSTGMEDIUM *pstgmed)
     * }
     */
    public static FunctionDescriptor IBindStatusCallback_OnDataAvailable_Stub$descriptor() {
        return IBindStatusCallback_OnDataAvailable_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_OnDataAvailable_Stub(IBindStatusCallback *This, DWORD grfBSCF, DWORD dwSize, RemFORMATETC *pformatetc, RemSTGMEDIUM *pstgmed)
     * }
     */
    public static MethodHandle IBindStatusCallback_OnDataAvailable_Stub$handle() {
        return IBindStatusCallback_OnDataAvailable_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_OnDataAvailable_Stub(IBindStatusCallback *This, DWORD grfBSCF, DWORD dwSize, RemFORMATETC *pformatetc, RemSTGMEDIUM *pstgmed)
     * }
     */
    public static MemorySegment IBindStatusCallback_OnDataAvailable_Stub$address() {
        return IBindStatusCallback_OnDataAvailable_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_OnDataAvailable_Stub(IBindStatusCallback *This, DWORD grfBSCF, DWORD dwSize, RemFORMATETC *pformatetc, RemSTGMEDIUM *pstgmed)
     * }
     */
    public static int IBindStatusCallback_OnDataAvailable_Stub(MemorySegment This, int grfBSCF, int dwSize, MemorySegment pformatetc, MemorySegment pstgmed) {
        var mh$ = IBindStatusCallback_OnDataAvailable_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindStatusCallback_OnDataAvailable_Stub", This, grfBSCF, dwSize, pformatetc, pstgmed);
            }
            return (int)mh$.invokeExact(This, grfBSCF, dwSize, pformatetc, pstgmed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindStatusCallbackEx_GetBindInfoEx_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IBindStatusCallbackEx_GetBindInfoEx_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallbackEx_GetBindInfoEx_Proxy(IBindStatusCallbackEx *This, DWORD *grfBINDF, BINDINFO *pbindinfo, DWORD *grfBINDF2, DWORD *pdwReserved)
     * }
     */
    public static FunctionDescriptor IBindStatusCallbackEx_GetBindInfoEx_Proxy$descriptor() {
        return IBindStatusCallbackEx_GetBindInfoEx_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallbackEx_GetBindInfoEx_Proxy(IBindStatusCallbackEx *This, DWORD *grfBINDF, BINDINFO *pbindinfo, DWORD *grfBINDF2, DWORD *pdwReserved)
     * }
     */
    public static MethodHandle IBindStatusCallbackEx_GetBindInfoEx_Proxy$handle() {
        return IBindStatusCallbackEx_GetBindInfoEx_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallbackEx_GetBindInfoEx_Proxy(IBindStatusCallbackEx *This, DWORD *grfBINDF, BINDINFO *pbindinfo, DWORD *grfBINDF2, DWORD *pdwReserved)
     * }
     */
    public static MemorySegment IBindStatusCallbackEx_GetBindInfoEx_Proxy$address() {
        return IBindStatusCallbackEx_GetBindInfoEx_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBindStatusCallbackEx_GetBindInfoEx_Proxy(IBindStatusCallbackEx *This, DWORD *grfBINDF, BINDINFO *pbindinfo, DWORD *grfBINDF2, DWORD *pdwReserved)
     * }
     */
    public static int IBindStatusCallbackEx_GetBindInfoEx_Proxy(MemorySegment This, MemorySegment grfBINDF, MemorySegment pbindinfo, MemorySegment grfBINDF2, MemorySegment pdwReserved) {
        var mh$ = IBindStatusCallbackEx_GetBindInfoEx_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindStatusCallbackEx_GetBindInfoEx_Proxy", This, grfBINDF, pbindinfo, grfBINDF2, pdwReserved);
            }
            return (int)mh$.invokeExact(This, grfBINDF, pbindinfo, grfBINDF2, pdwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindStatusCallbackEx_GetBindInfoEx_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IBindStatusCallbackEx_GetBindInfoEx_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallbackEx_GetBindInfoEx_Stub(IBindStatusCallbackEx *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed, DWORD *grfBINDF2, DWORD *pdwReserved)
     * }
     */
    public static FunctionDescriptor IBindStatusCallbackEx_GetBindInfoEx_Stub$descriptor() {
        return IBindStatusCallbackEx_GetBindInfoEx_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallbackEx_GetBindInfoEx_Stub(IBindStatusCallbackEx *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed, DWORD *grfBINDF2, DWORD *pdwReserved)
     * }
     */
    public static MethodHandle IBindStatusCallbackEx_GetBindInfoEx_Stub$handle() {
        return IBindStatusCallbackEx_GetBindInfoEx_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallbackEx_GetBindInfoEx_Stub(IBindStatusCallbackEx *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed, DWORD *grfBINDF2, DWORD *pdwReserved)
     * }
     */
    public static MemorySegment IBindStatusCallbackEx_GetBindInfoEx_Stub$address() {
        return IBindStatusCallbackEx_GetBindInfoEx_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBindStatusCallbackEx_GetBindInfoEx_Stub(IBindStatusCallbackEx *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed, DWORD *grfBINDF2, DWORD *pdwReserved)
     * }
     */
    public static int IBindStatusCallbackEx_GetBindInfoEx_Stub(MemorySegment This, MemorySegment grfBINDF, MemorySegment pbindinfo, MemorySegment pstgmed, MemorySegment grfBINDF2, MemorySegment pdwReserved) {
        var mh$ = IBindStatusCallbackEx_GetBindInfoEx_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindStatusCallbackEx_GetBindInfoEx_Stub", This, grfBINDF, pbindinfo, pstgmed, grfBINDF2, pdwReserved);
            }
            return (int)mh$.invokeExact(This, grfBINDF, pbindinfo, pstgmed, grfBINDF2, pdwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IWinInetInfo_QueryOption_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IWinInetInfo_QueryOption_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IWinInetInfo_QueryOption_Proxy(IWinInetInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf)
     * }
     */
    public static FunctionDescriptor IWinInetInfo_QueryOption_Proxy$descriptor() {
        return IWinInetInfo_QueryOption_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IWinInetInfo_QueryOption_Proxy(IWinInetInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf)
     * }
     */
    public static MethodHandle IWinInetInfo_QueryOption_Proxy$handle() {
        return IWinInetInfo_QueryOption_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IWinInetInfo_QueryOption_Proxy(IWinInetInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf)
     * }
     */
    public static MemorySegment IWinInetInfo_QueryOption_Proxy$address() {
        return IWinInetInfo_QueryOption_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IWinInetInfo_QueryOption_Proxy(IWinInetInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf)
     * }
     */
    public static int IWinInetInfo_QueryOption_Proxy(MemorySegment This, int dwOption, MemorySegment pBuffer, MemorySegment pcbBuf) {
        var mh$ = IWinInetInfo_QueryOption_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IWinInetInfo_QueryOption_Proxy", This, dwOption, pBuffer, pcbBuf);
            }
            return (int)mh$.invokeExact(This, dwOption, pBuffer, pcbBuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IWinInetInfo_QueryOption_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IWinInetInfo_QueryOption_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IWinInetInfo_QueryOption_Stub(IWinInetInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf)
     * }
     */
    public static FunctionDescriptor IWinInetInfo_QueryOption_Stub$descriptor() {
        return IWinInetInfo_QueryOption_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IWinInetInfo_QueryOption_Stub(IWinInetInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf)
     * }
     */
    public static MethodHandle IWinInetInfo_QueryOption_Stub$handle() {
        return IWinInetInfo_QueryOption_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IWinInetInfo_QueryOption_Stub(IWinInetInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf)
     * }
     */
    public static MemorySegment IWinInetInfo_QueryOption_Stub$address() {
        return IWinInetInfo_QueryOption_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IWinInetInfo_QueryOption_Stub(IWinInetInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf)
     * }
     */
    public static int IWinInetInfo_QueryOption_Stub(MemorySegment This, int dwOption, MemorySegment pBuffer, MemorySegment pcbBuf) {
        var mh$ = IWinInetInfo_QueryOption_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IWinInetInfo_QueryOption_Stub", This, dwOption, pBuffer, pcbBuf);
            }
            return (int)mh$.invokeExact(This, dwOption, pBuffer, pcbBuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IWinInetHttpInfo_QueryInfo_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IWinInetHttpInfo_QueryInfo_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IWinInetHttpInfo_QueryInfo_Proxy(IWinInetHttpInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved)
     * }
     */
    public static FunctionDescriptor IWinInetHttpInfo_QueryInfo_Proxy$descriptor() {
        return IWinInetHttpInfo_QueryInfo_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IWinInetHttpInfo_QueryInfo_Proxy(IWinInetHttpInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved)
     * }
     */
    public static MethodHandle IWinInetHttpInfo_QueryInfo_Proxy$handle() {
        return IWinInetHttpInfo_QueryInfo_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IWinInetHttpInfo_QueryInfo_Proxy(IWinInetHttpInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved)
     * }
     */
    public static MemorySegment IWinInetHttpInfo_QueryInfo_Proxy$address() {
        return IWinInetHttpInfo_QueryInfo_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IWinInetHttpInfo_QueryInfo_Proxy(IWinInetHttpInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved)
     * }
     */
    public static int IWinInetHttpInfo_QueryInfo_Proxy(MemorySegment This, int dwOption, MemorySegment pBuffer, MemorySegment pcbBuf, MemorySegment pdwFlags, MemorySegment pdwReserved) {
        var mh$ = IWinInetHttpInfo_QueryInfo_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IWinInetHttpInfo_QueryInfo_Proxy", This, dwOption, pBuffer, pcbBuf, pdwFlags, pdwReserved);
            }
            return (int)mh$.invokeExact(This, dwOption, pBuffer, pcbBuf, pdwFlags, pdwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IWinInetHttpInfo_QueryInfo_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IWinInetHttpInfo_QueryInfo_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IWinInetHttpInfo_QueryInfo_Stub(IWinInetHttpInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved)
     * }
     */
    public static FunctionDescriptor IWinInetHttpInfo_QueryInfo_Stub$descriptor() {
        return IWinInetHttpInfo_QueryInfo_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IWinInetHttpInfo_QueryInfo_Stub(IWinInetHttpInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved)
     * }
     */
    public static MethodHandle IWinInetHttpInfo_QueryInfo_Stub$handle() {
        return IWinInetHttpInfo_QueryInfo_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IWinInetHttpInfo_QueryInfo_Stub(IWinInetHttpInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved)
     * }
     */
    public static MemorySegment IWinInetHttpInfo_QueryInfo_Stub$address() {
        return IWinInetHttpInfo_QueryInfo_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IWinInetHttpInfo_QueryInfo_Stub(IWinInetHttpInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved)
     * }
     */
    public static int IWinInetHttpInfo_QueryInfo_Stub(MemorySegment This, int dwOption, MemorySegment pBuffer, MemorySegment pcbBuf, MemorySegment pdwFlags, MemorySegment pdwReserved) {
        var mh$ = IWinInetHttpInfo_QueryInfo_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IWinInetHttpInfo_QueryInfo_Stub", This, dwOption, pBuffer, pcbBuf, pdwFlags, pdwReserved);
            }
            return (int)mh$.invokeExact(This, dwOption, pBuffer, pcbBuf, pdwFlags, pdwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindHost_MonikerBindToStorage_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IBindHost_MonikerBindToStorage_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToStorage_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, void **ppvObj)
     * }
     */
    public static FunctionDescriptor IBindHost_MonikerBindToStorage_Proxy$descriptor() {
        return IBindHost_MonikerBindToStorage_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToStorage_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, void **ppvObj)
     * }
     */
    public static MethodHandle IBindHost_MonikerBindToStorage_Proxy$handle() {
        return IBindHost_MonikerBindToStorage_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToStorage_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, void **ppvObj)
     * }
     */
    public static MemorySegment IBindHost_MonikerBindToStorage_Proxy$address() {
        return IBindHost_MonikerBindToStorage_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToStorage_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, void **ppvObj)
     * }
     */
    public static int IBindHost_MonikerBindToStorage_Proxy(MemorySegment This, MemorySegment pMk, MemorySegment pBC, MemorySegment pBSC, MemorySegment riid, MemorySegment ppvObj) {
        var mh$ = IBindHost_MonikerBindToStorage_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindHost_MonikerBindToStorage_Proxy", This, pMk, pBC, pBSC, riid, ppvObj);
            }
            return (int)mh$.invokeExact(This, pMk, pBC, pBSC, riid, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindHost_MonikerBindToStorage_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IBindHost_MonikerBindToStorage_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToStorage_Stub(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static FunctionDescriptor IBindHost_MonikerBindToStorage_Stub$descriptor() {
        return IBindHost_MonikerBindToStorage_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToStorage_Stub(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static MethodHandle IBindHost_MonikerBindToStorage_Stub$handle() {
        return IBindHost_MonikerBindToStorage_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToStorage_Stub(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static MemorySegment IBindHost_MonikerBindToStorage_Stub$address() {
        return IBindHost_MonikerBindToStorage_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToStorage_Stub(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static int IBindHost_MonikerBindToStorage_Stub(MemorySegment This, MemorySegment pMk, MemorySegment pBC, MemorySegment pBSC, MemorySegment riid, MemorySegment ppvObj) {
        var mh$ = IBindHost_MonikerBindToStorage_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindHost_MonikerBindToStorage_Stub", This, pMk, pBC, pBSC, riid, ppvObj);
            }
            return (int)mh$.invokeExact(This, pMk, pBC, pBSC, riid, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindHost_MonikerBindToObject_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IBindHost_MonikerBindToObject_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToObject_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, void **ppvObj)
     * }
     */
    public static FunctionDescriptor IBindHost_MonikerBindToObject_Proxy$descriptor() {
        return IBindHost_MonikerBindToObject_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToObject_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, void **ppvObj)
     * }
     */
    public static MethodHandle IBindHost_MonikerBindToObject_Proxy$handle() {
        return IBindHost_MonikerBindToObject_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToObject_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, void **ppvObj)
     * }
     */
    public static MemorySegment IBindHost_MonikerBindToObject_Proxy$address() {
        return IBindHost_MonikerBindToObject_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToObject_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, void **ppvObj)
     * }
     */
    public static int IBindHost_MonikerBindToObject_Proxy(MemorySegment This, MemorySegment pMk, MemorySegment pBC, MemorySegment pBSC, MemorySegment riid, MemorySegment ppvObj) {
        var mh$ = IBindHost_MonikerBindToObject_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindHost_MonikerBindToObject_Proxy", This, pMk, pBC, pBSC, riid, ppvObj);
            }
            return (int)mh$.invokeExact(This, pMk, pBC, pBSC, riid, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindHost_MonikerBindToObject_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IBindHost_MonikerBindToObject_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToObject_Stub(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static FunctionDescriptor IBindHost_MonikerBindToObject_Stub$descriptor() {
        return IBindHost_MonikerBindToObject_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToObject_Stub(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static MethodHandle IBindHost_MonikerBindToObject_Stub$handle() {
        return IBindHost_MonikerBindToObject_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToObject_Stub(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static MemorySegment IBindHost_MonikerBindToObject_Stub$address() {
        return IBindHost_MonikerBindToObject_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToObject_Stub(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static int IBindHost_MonikerBindToObject_Stub(MemorySegment This, MemorySegment pMk, MemorySegment pBC, MemorySegment pBSC, MemorySegment riid, MemorySegment ppvObj) {
        var mh$ = IBindHost_MonikerBindToObject_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindHost_MonikerBindToObject_Stub", This, pMk, pBC, pBSC, riid, ppvObj);
            }
            return (int)mh$.invokeExact(This, pMk, pBC, pBSC, riid, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int PIDMSI_STATUS_NORMAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum PIDMSI_STATUS_VALUE.PIDMSI_STATUS_NORMAL = 0
     * }
     */
    public static int PIDMSI_STATUS_NORMAL() {
        return PIDMSI_STATUS_NORMAL;
    }
    private static final int PIDMSI_STATUS_NEW = (int)1L;
    /**
     * {@snippet lang=c :
     * enum PIDMSI_STATUS_VALUE.PIDMSI_STATUS_NEW = 1
     * }
     */
    public static int PIDMSI_STATUS_NEW() {
        return PIDMSI_STATUS_NEW;
    }
    private static final int PIDMSI_STATUS_PRELIM = (int)2L;
    /**
     * {@snippet lang=c :
     * enum PIDMSI_STATUS_VALUE.PIDMSI_STATUS_PRELIM = 2
     * }
     */
    public static int PIDMSI_STATUS_PRELIM() {
        return PIDMSI_STATUS_PRELIM;
    }
    private static final int PIDMSI_STATUS_DRAFT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum PIDMSI_STATUS_VALUE.PIDMSI_STATUS_DRAFT = 3
     * }
     */
    public static int PIDMSI_STATUS_DRAFT() {
        return PIDMSI_STATUS_DRAFT;
    }
    private static final int PIDMSI_STATUS_INPROGRESS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum PIDMSI_STATUS_VALUE.PIDMSI_STATUS_INPROGRESS = 4
     * }
     */
    public static int PIDMSI_STATUS_INPROGRESS() {
        return PIDMSI_STATUS_INPROGRESS;
    }
    private static final int PIDMSI_STATUS_EDIT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum PIDMSI_STATUS_VALUE.PIDMSI_STATUS_EDIT = 5
     * }
     */
    public static int PIDMSI_STATUS_EDIT() {
        return PIDMSI_STATUS_EDIT;
    }
    private static final int PIDMSI_STATUS_REVIEW = (int)6L;
    /**
     * {@snippet lang=c :
     * enum PIDMSI_STATUS_VALUE.PIDMSI_STATUS_REVIEW = 6
     * }
     */
    public static int PIDMSI_STATUS_REVIEW() {
        return PIDMSI_STATUS_REVIEW;
    }
    private static final int PIDMSI_STATUS_PROOF = (int)7L;
    /**
     * {@snippet lang=c :
     * enum PIDMSI_STATUS_VALUE.PIDMSI_STATUS_PROOF = 7
     * }
     */
    public static int PIDMSI_STATUS_PROOF() {
        return PIDMSI_STATUS_PROOF;
    }
    private static final int PIDMSI_STATUS_FINAL = (int)8L;
    /**
     * {@snippet lang=c :
     * enum PIDMSI_STATUS_VALUE.PIDMSI_STATUS_FINAL = 8
     * }
     */
    public static int PIDMSI_STATUS_FINAL() {
        return PIDMSI_STATUS_FINAL;
    }
    private static final int PIDMSI_STATUS_OTHER = (int)32767L;
    /**
     * {@snippet lang=c :
     * enum PIDMSI_STATUS_VALUE.PIDMSI_STATUS_OTHER = 32767
     * }
     */
    public static int PIDMSI_STATUS_OTHER() {
        return PIDMSI_STATUS_OTHER;
    }

    private static class StgConvertVariantToProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_CHAR,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("StgConvertVariantToProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern SERIALIZEDPROPERTYVALUE *StgConvertVariantToProperty(const PROPVARIANT *pvar, USHORT CodePage, SERIALIZEDPROPERTYVALUE *pprop, ULONG *pcb, PROPID pid, BOOLEAN fReserved, ULONG *pcIndirect)
     * }
     */
    public static FunctionDescriptor StgConvertVariantToProperty$descriptor() {
        return StgConvertVariantToProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern SERIALIZEDPROPERTYVALUE *StgConvertVariantToProperty(const PROPVARIANT *pvar, USHORT CodePage, SERIALIZEDPROPERTYVALUE *pprop, ULONG *pcb, PROPID pid, BOOLEAN fReserved, ULONG *pcIndirect)
     * }
     */
    public static MethodHandle StgConvertVariantToProperty$handle() {
        return StgConvertVariantToProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern SERIALIZEDPROPERTYVALUE *StgConvertVariantToProperty(const PROPVARIANT *pvar, USHORT CodePage, SERIALIZEDPROPERTYVALUE *pprop, ULONG *pcb, PROPID pid, BOOLEAN fReserved, ULONG *pcIndirect)
     * }
     */
    public static MemorySegment StgConvertVariantToProperty$address() {
        return StgConvertVariantToProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern SERIALIZEDPROPERTYVALUE *StgConvertVariantToProperty(const PROPVARIANT *pvar, USHORT CodePage, SERIALIZEDPROPERTYVALUE *pprop, ULONG *pcb, PROPID pid, BOOLEAN fReserved, ULONG *pcIndirect)
     * }
     */
    public static MemorySegment StgConvertVariantToProperty(MemorySegment pvar, short CodePage, MemorySegment pprop, MemorySegment pcb, int pid, byte fReserved, MemorySegment pcIndirect) {
        var mh$ = StgConvertVariantToProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StgConvertVariantToProperty", pvar, CodePage, pprop, pcb, pid, fReserved, pcIndirect);
            }
            return (MemorySegment)mh$.invokeExact(pvar, CodePage, pprop, pcb, pid, fReserved, pcIndirect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_propidl_0000_0004_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec$layout() {
        return __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec$segment() {
        return __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec() {
        return __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_propidl_0000_0004_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_propidl_0000_0004_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_propidl_0000_0004_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec$layout() {
        return __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec$segment() {
        return __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec() {
        return __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_propidl_0000_0004_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_propidl_0000_0004_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class CreateStdProgressIndicator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CreateStdProgressIndicator");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateStdProgressIndicator(HWND hwndParent, LPCOLESTR pszTitle, IBindStatusCallback *pIbscCaller, IBindStatusCallback **ppIbsc)
     * }
     */
    public static FunctionDescriptor CreateStdProgressIndicator$descriptor() {
        return CreateStdProgressIndicator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateStdProgressIndicator(HWND hwndParent, LPCOLESTR pszTitle, IBindStatusCallback *pIbscCaller, IBindStatusCallback **ppIbsc)
     * }
     */
    public static MethodHandle CreateStdProgressIndicator$handle() {
        return CreateStdProgressIndicator.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CreateStdProgressIndicator(HWND hwndParent, LPCOLESTR pszTitle, IBindStatusCallback *pIbscCaller, IBindStatusCallback **ppIbsc)
     * }
     */
    public static MemorySegment CreateStdProgressIndicator$address() {
        return CreateStdProgressIndicator.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CreateStdProgressIndicator(HWND hwndParent, LPCOLESTR pszTitle, IBindStatusCallback *pIbscCaller, IBindStatusCallback **ppIbsc)
     * }
     */
    public static int CreateStdProgressIndicator(MemorySegment hwndParent, MemorySegment pszTitle, MemorySegment pIbscCaller, MemorySegment ppIbsc) {
        var mh$ = CreateStdProgressIndicator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateStdProgressIndicator", hwndParent, pszTitle, pIbscCaller, ppIbsc);
            }
            return (int)mh$.invokeExact(hwndParent, pszTitle, pIbscCaller, ppIbsc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IID_StdOle$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_StdOle").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_StdOle
     * }
     */
    public static GroupLayout IID_StdOle$layout() {
        return IID_StdOle$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_StdOle
     * }
     */
    public static MemorySegment IID_StdOle() {
        return IID_StdOle$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_StdOle
     * }
     */
    public static void IID_StdOle(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_StdOle$constants.SEGMENT, 0L, IID_StdOle$constants.LAYOUT.byteSize());
    }

    private static class SysAllocString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SysAllocString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BSTR SysAllocString(const OLECHAR *psz)
     * }
     */
    public static FunctionDescriptor SysAllocString$descriptor() {
        return SysAllocString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BSTR SysAllocString(const OLECHAR *psz)
     * }
     */
    public static MethodHandle SysAllocString$handle() {
        return SysAllocString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern BSTR SysAllocString(const OLECHAR *psz)
     * }
     */
    public static MemorySegment SysAllocString$address() {
        return SysAllocString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern BSTR SysAllocString(const OLECHAR *psz)
     * }
     */
    public static MemorySegment SysAllocString(MemorySegment psz) {
        var mh$ = SysAllocString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SysAllocString", psz);
            }
            return (MemorySegment)mh$.invokeExact(psz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SysReAllocString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SysReAllocString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern INT SysReAllocString(BSTR *pbstr, const OLECHAR *psz)
     * }
     */
    public static FunctionDescriptor SysReAllocString$descriptor() {
        return SysReAllocString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern INT SysReAllocString(BSTR *pbstr, const OLECHAR *psz)
     * }
     */
    public static MethodHandle SysReAllocString$handle() {
        return SysReAllocString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern INT SysReAllocString(BSTR *pbstr, const OLECHAR *psz)
     * }
     */
    public static MemorySegment SysReAllocString$address() {
        return SysReAllocString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern INT SysReAllocString(BSTR *pbstr, const OLECHAR *psz)
     * }
     */
    public static int SysReAllocString(MemorySegment pbstr, MemorySegment psz) {
        var mh$ = SysReAllocString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SysReAllocString", pbstr, psz);
            }
            return (int)mh$.invokeExact(pbstr, psz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SysAllocStringLen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SysAllocStringLen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BSTR SysAllocStringLen(const OLECHAR *strIn, UINT ui)
     * }
     */
    public static FunctionDescriptor SysAllocStringLen$descriptor() {
        return SysAllocStringLen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BSTR SysAllocStringLen(const OLECHAR *strIn, UINT ui)
     * }
     */
    public static MethodHandle SysAllocStringLen$handle() {
        return SysAllocStringLen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern BSTR SysAllocStringLen(const OLECHAR *strIn, UINT ui)
     * }
     */
    public static MemorySegment SysAllocStringLen$address() {
        return SysAllocStringLen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern BSTR SysAllocStringLen(const OLECHAR *strIn, UINT ui)
     * }
     */
    public static MemorySegment SysAllocStringLen(MemorySegment strIn, int ui) {
        var mh$ = SysAllocStringLen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SysAllocStringLen", strIn, ui);
            }
            return (MemorySegment)mh$.invokeExact(strIn, ui);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SysReAllocStringLen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SysReAllocStringLen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern INT SysReAllocStringLen(BSTR *pbstr, const OLECHAR *psz, unsigned int len)
     * }
     */
    public static FunctionDescriptor SysReAllocStringLen$descriptor() {
        return SysReAllocStringLen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern INT SysReAllocStringLen(BSTR *pbstr, const OLECHAR *psz, unsigned int len)
     * }
     */
    public static MethodHandle SysReAllocStringLen$handle() {
        return SysReAllocStringLen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern INT SysReAllocStringLen(BSTR *pbstr, const OLECHAR *psz, unsigned int len)
     * }
     */
    public static MemorySegment SysReAllocStringLen$address() {
        return SysReAllocStringLen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern INT SysReAllocStringLen(BSTR *pbstr, const OLECHAR *psz, unsigned int len)
     * }
     */
    public static int SysReAllocStringLen(MemorySegment pbstr, MemorySegment psz, int len) {
        var mh$ = SysReAllocStringLen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SysReAllocStringLen", pbstr, psz, len);
            }
            return (int)mh$.invokeExact(pbstr, psz, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SysAddRefString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SysAddRefString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SysAddRefString(BSTR bstrString)
     * }
     */
    public static FunctionDescriptor SysAddRefString$descriptor() {
        return SysAddRefString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SysAddRefString(BSTR bstrString)
     * }
     */
    public static MethodHandle SysAddRefString$handle() {
        return SysAddRefString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SysAddRefString(BSTR bstrString)
     * }
     */
    public static MemorySegment SysAddRefString$address() {
        return SysAddRefString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SysAddRefString(BSTR bstrString)
     * }
     */
    public static int SysAddRefString(MemorySegment bstrString) {
        var mh$ = SysAddRefString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SysAddRefString", bstrString);
            }
            return (int)mh$.invokeExact(bstrString);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SysReleaseString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SysReleaseString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void SysReleaseString(BSTR bstrString)
     * }
     */
    public static FunctionDescriptor SysReleaseString$descriptor() {
        return SysReleaseString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void SysReleaseString(BSTR bstrString)
     * }
     */
    public static MethodHandle SysReleaseString$handle() {
        return SysReleaseString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void SysReleaseString(BSTR bstrString)
     * }
     */
    public static MemorySegment SysReleaseString$address() {
        return SysReleaseString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void SysReleaseString(BSTR bstrString)
     * }
     */
    public static void SysReleaseString(MemorySegment bstrString) {
        var mh$ = SysReleaseString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SysReleaseString", bstrString);
            }
            mh$.invokeExact(bstrString);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SysFreeString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SysFreeString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void SysFreeString(BSTR bstrString)
     * }
     */
    public static FunctionDescriptor SysFreeString$descriptor() {
        return SysFreeString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void SysFreeString(BSTR bstrString)
     * }
     */
    public static MethodHandle SysFreeString$handle() {
        return SysFreeString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void SysFreeString(BSTR bstrString)
     * }
     */
    public static MemorySegment SysFreeString$address() {
        return SysFreeString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void SysFreeString(BSTR bstrString)
     * }
     */
    public static void SysFreeString(MemorySegment bstrString) {
        var mh$ = SysFreeString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SysFreeString", bstrString);
            }
            mh$.invokeExact(bstrString);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SysStringLen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SysStringLen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern UINT SysStringLen(BSTR pbstr)
     * }
     */
    public static FunctionDescriptor SysStringLen$descriptor() {
        return SysStringLen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern UINT SysStringLen(BSTR pbstr)
     * }
     */
    public static MethodHandle SysStringLen$handle() {
        return SysStringLen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern UINT SysStringLen(BSTR pbstr)
     * }
     */
    public static MemorySegment SysStringLen$address() {
        return SysStringLen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern UINT SysStringLen(BSTR pbstr)
     * }
     */
    public static int SysStringLen(MemorySegment pbstr) {
        var mh$ = SysStringLen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SysStringLen", pbstr);
            }
            return (int)mh$.invokeExact(pbstr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SysStringByteLen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SysStringByteLen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern UINT SysStringByteLen(BSTR bstr)
     * }
     */
    public static FunctionDescriptor SysStringByteLen$descriptor() {
        return SysStringByteLen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern UINT SysStringByteLen(BSTR bstr)
     * }
     */
    public static MethodHandle SysStringByteLen$handle() {
        return SysStringByteLen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern UINT SysStringByteLen(BSTR bstr)
     * }
     */
    public static MemorySegment SysStringByteLen$address() {
        return SysStringByteLen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern UINT SysStringByteLen(BSTR bstr)
     * }
     */
    public static int SysStringByteLen(MemorySegment bstr) {
        var mh$ = SysStringByteLen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SysStringByteLen", bstr);
            }
            return (int)mh$.invokeExact(bstr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SysAllocStringByteLen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SysAllocStringByteLen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BSTR SysAllocStringByteLen(LPCSTR psz, UINT len)
     * }
     */
    public static FunctionDescriptor SysAllocStringByteLen$descriptor() {
        return SysAllocStringByteLen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BSTR SysAllocStringByteLen(LPCSTR psz, UINT len)
     * }
     */
    public static MethodHandle SysAllocStringByteLen$handle() {
        return SysAllocStringByteLen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern BSTR SysAllocStringByteLen(LPCSTR psz, UINT len)
     * }
     */
    public static MemorySegment SysAllocStringByteLen$address() {
        return SysAllocStringByteLen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern BSTR SysAllocStringByteLen(LPCSTR psz, UINT len)
     * }
     */
    public static MemorySegment SysAllocStringByteLen(MemorySegment psz, int len) {
        var mh$ = SysAllocStringByteLen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SysAllocStringByteLen", psz, len);
            }
            return (MemorySegment)mh$.invokeExact(psz, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DosDateTimeToVariantTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_SHORT,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DosDateTimeToVariantTime");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern INT DosDateTimeToVariantTime(USHORT wDosDate, USHORT wDosTime, DOUBLE *pvtime)
     * }
     */
    public static FunctionDescriptor DosDateTimeToVariantTime$descriptor() {
        return DosDateTimeToVariantTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern INT DosDateTimeToVariantTime(USHORT wDosDate, USHORT wDosTime, DOUBLE *pvtime)
     * }
     */
    public static MethodHandle DosDateTimeToVariantTime$handle() {
        return DosDateTimeToVariantTime.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern INT DosDateTimeToVariantTime(USHORT wDosDate, USHORT wDosTime, DOUBLE *pvtime)
     * }
     */
    public static MemorySegment DosDateTimeToVariantTime$address() {
        return DosDateTimeToVariantTime.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern INT DosDateTimeToVariantTime(USHORT wDosDate, USHORT wDosTime, DOUBLE *pvtime)
     * }
     */
    public static int DosDateTimeToVariantTime(short wDosDate, short wDosTime, MemorySegment pvtime) {
        var mh$ = DosDateTimeToVariantTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DosDateTimeToVariantTime", wDosDate, wDosTime, pvtime);
            }
            return (int)mh$.invokeExact(wDosDate, wDosTime, pvtime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VariantTimeToDosDateTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_DOUBLE,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VariantTimeToDosDateTime");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern INT VariantTimeToDosDateTime(DOUBLE vtime, USHORT *pwDosDate, USHORT *pwDosTime)
     * }
     */
    public static FunctionDescriptor VariantTimeToDosDateTime$descriptor() {
        return VariantTimeToDosDateTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern INT VariantTimeToDosDateTime(DOUBLE vtime, USHORT *pwDosDate, USHORT *pwDosTime)
     * }
     */
    public static MethodHandle VariantTimeToDosDateTime$handle() {
        return VariantTimeToDosDateTime.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern INT VariantTimeToDosDateTime(DOUBLE vtime, USHORT *pwDosDate, USHORT *pwDosTime)
     * }
     */
    public static MemorySegment VariantTimeToDosDateTime$address() {
        return VariantTimeToDosDateTime.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern INT VariantTimeToDosDateTime(DOUBLE vtime, USHORT *pwDosDate, USHORT *pwDosTime)
     * }
     */
    public static int VariantTimeToDosDateTime(double vtime, MemorySegment pwDosDate, MemorySegment pwDosTime) {
        var mh$ = VariantTimeToDosDateTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VariantTimeToDosDateTime", vtime, pwDosDate, pwDosTime);
            }
            return (int)mh$.invokeExact(vtime, pwDosDate, pwDosTime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SystemTimeToVariantTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SystemTimeToVariantTime");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern INT SystemTimeToVariantTime(LPSYSTEMTIME lpSystemTime, DOUBLE *pvtime)
     * }
     */
    public static FunctionDescriptor SystemTimeToVariantTime$descriptor() {
        return SystemTimeToVariantTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern INT SystemTimeToVariantTime(LPSYSTEMTIME lpSystemTime, DOUBLE *pvtime)
     * }
     */
    public static MethodHandle SystemTimeToVariantTime$handle() {
        return SystemTimeToVariantTime.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern INT SystemTimeToVariantTime(LPSYSTEMTIME lpSystemTime, DOUBLE *pvtime)
     * }
     */
    public static MemorySegment SystemTimeToVariantTime$address() {
        return SystemTimeToVariantTime.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern INT SystemTimeToVariantTime(LPSYSTEMTIME lpSystemTime, DOUBLE *pvtime)
     * }
     */
    public static int SystemTimeToVariantTime(MemorySegment lpSystemTime, MemorySegment pvtime) {
        var mh$ = SystemTimeToVariantTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SystemTimeToVariantTime", lpSystemTime, pvtime);
            }
            return (int)mh$.invokeExact(lpSystemTime, pvtime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VariantTimeToSystemTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_DOUBLE,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VariantTimeToSystemTime");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern INT VariantTimeToSystemTime(DOUBLE vtime, LPSYSTEMTIME lpSystemTime)
     * }
     */
    public static FunctionDescriptor VariantTimeToSystemTime$descriptor() {
        return VariantTimeToSystemTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern INT VariantTimeToSystemTime(DOUBLE vtime, LPSYSTEMTIME lpSystemTime)
     * }
     */
    public static MethodHandle VariantTimeToSystemTime$handle() {
        return VariantTimeToSystemTime.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern INT VariantTimeToSystemTime(DOUBLE vtime, LPSYSTEMTIME lpSystemTime)
     * }
     */
    public static MemorySegment VariantTimeToSystemTime$address() {
        return VariantTimeToSystemTime.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern INT VariantTimeToSystemTime(DOUBLE vtime, LPSYSTEMTIME lpSystemTime)
     * }
     */
    public static int VariantTimeToSystemTime(double vtime, MemorySegment lpSystemTime) {
        var mh$ = VariantTimeToSystemTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VariantTimeToSystemTime", vtime, lpSystemTime);
            }
            return (int)mh$.invokeExact(vtime, lpSystemTime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayAllocDescriptor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SafeArrayAllocDescriptor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAllocDescriptor(UINT cDims, SAFEARRAY **ppsaOut)
     * }
     */
    public static FunctionDescriptor SafeArrayAllocDescriptor$descriptor() {
        return SafeArrayAllocDescriptor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAllocDescriptor(UINT cDims, SAFEARRAY **ppsaOut)
     * }
     */
    public static MethodHandle SafeArrayAllocDescriptor$handle() {
        return SafeArrayAllocDescriptor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAllocDescriptor(UINT cDims, SAFEARRAY **ppsaOut)
     * }
     */
    public static MemorySegment SafeArrayAllocDescriptor$address() {
        return SafeArrayAllocDescriptor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAllocDescriptor(UINT cDims, SAFEARRAY **ppsaOut)
     * }
     */
    public static int SafeArrayAllocDescriptor(int cDims, MemorySegment ppsaOut) {
        var mh$ = SafeArrayAllocDescriptor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayAllocDescriptor", cDims, ppsaOut);
            }
            return (int)mh$.invokeExact(cDims, ppsaOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayAllocDescriptorEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SafeArrayAllocDescriptorEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAllocDescriptorEx(VARTYPE vt, UINT cDims, SAFEARRAY **ppsaOut)
     * }
     */
    public static FunctionDescriptor SafeArrayAllocDescriptorEx$descriptor() {
        return SafeArrayAllocDescriptorEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAllocDescriptorEx(VARTYPE vt, UINT cDims, SAFEARRAY **ppsaOut)
     * }
     */
    public static MethodHandle SafeArrayAllocDescriptorEx$handle() {
        return SafeArrayAllocDescriptorEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAllocDescriptorEx(VARTYPE vt, UINT cDims, SAFEARRAY **ppsaOut)
     * }
     */
    public static MemorySegment SafeArrayAllocDescriptorEx$address() {
        return SafeArrayAllocDescriptorEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAllocDescriptorEx(VARTYPE vt, UINT cDims, SAFEARRAY **ppsaOut)
     * }
     */
    public static int SafeArrayAllocDescriptorEx(short vt, int cDims, MemorySegment ppsaOut) {
        var mh$ = SafeArrayAllocDescriptorEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayAllocDescriptorEx", vt, cDims, ppsaOut);
            }
            return (int)mh$.invokeExact(vt, cDims, ppsaOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayAllocData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SafeArrayAllocData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAllocData(SAFEARRAY *psa)
     * }
     */
    public static FunctionDescriptor SafeArrayAllocData$descriptor() {
        return SafeArrayAllocData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAllocData(SAFEARRAY *psa)
     * }
     */
    public static MethodHandle SafeArrayAllocData$handle() {
        return SafeArrayAllocData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAllocData(SAFEARRAY *psa)
     * }
     */
    public static MemorySegment SafeArrayAllocData$address() {
        return SafeArrayAllocData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAllocData(SAFEARRAY *psa)
     * }
     */
    public static int SafeArrayAllocData(MemorySegment psa) {
        var mh$ = SafeArrayAllocData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayAllocData", psa);
            }
            return (int)mh$.invokeExact(psa);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_SHORT,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SafeArrayCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreate(VARTYPE vt, UINT cDims, SAFEARRAYBOUND *rgsabound)
     * }
     */
    public static FunctionDescriptor SafeArrayCreate$descriptor() {
        return SafeArrayCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreate(VARTYPE vt, UINT cDims, SAFEARRAYBOUND *rgsabound)
     * }
     */
    public static MethodHandle SafeArrayCreate$handle() {
        return SafeArrayCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreate(VARTYPE vt, UINT cDims, SAFEARRAYBOUND *rgsabound)
     * }
     */
    public static MemorySegment SafeArrayCreate$address() {
        return SafeArrayCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreate(VARTYPE vt, UINT cDims, SAFEARRAYBOUND *rgsabound)
     * }
     */
    public static MemorySegment SafeArrayCreate(short vt, int cDims, MemorySegment rgsabound) {
        var mh$ = SafeArrayCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayCreate", vt, cDims, rgsabound);
            }
            return (MemorySegment)mh$.invokeExact(vt, cDims, rgsabound);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayCreateEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_SHORT,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SafeArrayCreateEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreateEx(VARTYPE vt, UINT cDims, SAFEARRAYBOUND *rgsabound, PVOID pvExtra)
     * }
     */
    public static FunctionDescriptor SafeArrayCreateEx$descriptor() {
        return SafeArrayCreateEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreateEx(VARTYPE vt, UINT cDims, SAFEARRAYBOUND *rgsabound, PVOID pvExtra)
     * }
     */
    public static MethodHandle SafeArrayCreateEx$handle() {
        return SafeArrayCreateEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreateEx(VARTYPE vt, UINT cDims, SAFEARRAYBOUND *rgsabound, PVOID pvExtra)
     * }
     */
    public static MemorySegment SafeArrayCreateEx$address() {
        return SafeArrayCreateEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreateEx(VARTYPE vt, UINT cDims, SAFEARRAYBOUND *rgsabound, PVOID pvExtra)
     * }
     */
    public static MemorySegment SafeArrayCreateEx(short vt, int cDims, MemorySegment rgsabound, MemorySegment pvExtra) {
        var mh$ = SafeArrayCreateEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayCreateEx", vt, cDims, rgsabound, pvExtra);
            }
            return (MemorySegment)mh$.invokeExact(vt, cDims, rgsabound, pvExtra);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayCopyData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SafeArrayCopyData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayCopyData(SAFEARRAY *psaSource, SAFEARRAY *psaTarget)
     * }
     */
    public static FunctionDescriptor SafeArrayCopyData$descriptor() {
        return SafeArrayCopyData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayCopyData(SAFEARRAY *psaSource, SAFEARRAY *psaTarget)
     * }
     */
    public static MethodHandle SafeArrayCopyData$handle() {
        return SafeArrayCopyData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayCopyData(SAFEARRAY *psaSource, SAFEARRAY *psaTarget)
     * }
     */
    public static MemorySegment SafeArrayCopyData$address() {
        return SafeArrayCopyData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayCopyData(SAFEARRAY *psaSource, SAFEARRAY *psaTarget)
     * }
     */
    public static int SafeArrayCopyData(MemorySegment psaSource, MemorySegment psaTarget) {
        var mh$ = SafeArrayCopyData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayCopyData", psaSource, psaTarget);
            }
            return (int)mh$.invokeExact(psaSource, psaTarget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayReleaseDescriptor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SafeArrayReleaseDescriptor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void SafeArrayReleaseDescriptor(SAFEARRAY *psa)
     * }
     */
    public static FunctionDescriptor SafeArrayReleaseDescriptor$descriptor() {
        return SafeArrayReleaseDescriptor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void SafeArrayReleaseDescriptor(SAFEARRAY *psa)
     * }
     */
    public static MethodHandle SafeArrayReleaseDescriptor$handle() {
        return SafeArrayReleaseDescriptor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void SafeArrayReleaseDescriptor(SAFEARRAY *psa)
     * }
     */
    public static MemorySegment SafeArrayReleaseDescriptor$address() {
        return SafeArrayReleaseDescriptor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void SafeArrayReleaseDescriptor(SAFEARRAY *psa)
     * }
     */
    public static void SafeArrayReleaseDescriptor(MemorySegment psa) {
        var mh$ = SafeArrayReleaseDescriptor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayReleaseDescriptor", psa);
            }
            mh$.invokeExact(psa);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayDestroyDescriptor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SafeArrayDestroyDescriptor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayDestroyDescriptor(SAFEARRAY *psa)
     * }
     */
    public static FunctionDescriptor SafeArrayDestroyDescriptor$descriptor() {
        return SafeArrayDestroyDescriptor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayDestroyDescriptor(SAFEARRAY *psa)
     * }
     */
    public static MethodHandle SafeArrayDestroyDescriptor$handle() {
        return SafeArrayDestroyDescriptor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayDestroyDescriptor(SAFEARRAY *psa)
     * }
     */
    public static MemorySegment SafeArrayDestroyDescriptor$address() {
        return SafeArrayDestroyDescriptor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayDestroyDescriptor(SAFEARRAY *psa)
     * }
     */
    public static int SafeArrayDestroyDescriptor(MemorySegment psa) {
        var mh$ = SafeArrayDestroyDescriptor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayDestroyDescriptor", psa);
            }
            return (int)mh$.invokeExact(psa);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayReleaseData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SafeArrayReleaseData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void SafeArrayReleaseData(PVOID pData)
     * }
     */
    public static FunctionDescriptor SafeArrayReleaseData$descriptor() {
        return SafeArrayReleaseData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void SafeArrayReleaseData(PVOID pData)
     * }
     */
    public static MethodHandle SafeArrayReleaseData$handle() {
        return SafeArrayReleaseData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void SafeArrayReleaseData(PVOID pData)
     * }
     */
    public static MemorySegment SafeArrayReleaseData$address() {
        return SafeArrayReleaseData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void SafeArrayReleaseData(PVOID pData)
     * }
     */
    public static void SafeArrayReleaseData(MemorySegment pData) {
        var mh$ = SafeArrayReleaseData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayReleaseData", pData);
            }
            mh$.invokeExact(pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayDestroyData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SafeArrayDestroyData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayDestroyData(SAFEARRAY *psa)
     * }
     */
    public static FunctionDescriptor SafeArrayDestroyData$descriptor() {
        return SafeArrayDestroyData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayDestroyData(SAFEARRAY *psa)
     * }
     */
    public static MethodHandle SafeArrayDestroyData$handle() {
        return SafeArrayDestroyData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayDestroyData(SAFEARRAY *psa)
     * }
     */
    public static MemorySegment SafeArrayDestroyData$address() {
        return SafeArrayDestroyData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayDestroyData(SAFEARRAY *psa)
     * }
     */
    public static int SafeArrayDestroyData(MemorySegment psa) {
        var mh$ = SafeArrayDestroyData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayDestroyData", psa);
            }
            return (int)mh$.invokeExact(psa);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayAddRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SafeArrayAddRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAddRef(SAFEARRAY *psa, PVOID *ppDataToRelease)
     * }
     */
    public static FunctionDescriptor SafeArrayAddRef$descriptor() {
        return SafeArrayAddRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAddRef(SAFEARRAY *psa, PVOID *ppDataToRelease)
     * }
     */
    public static MethodHandle SafeArrayAddRef$handle() {
        return SafeArrayAddRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAddRef(SAFEARRAY *psa, PVOID *ppDataToRelease)
     * }
     */
    public static MemorySegment SafeArrayAddRef$address() {
        return SafeArrayAddRef.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAddRef(SAFEARRAY *psa, PVOID *ppDataToRelease)
     * }
     */
    public static int SafeArrayAddRef(MemorySegment psa, MemorySegment ppDataToRelease) {
        var mh$ = SafeArrayAddRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayAddRef", psa, ppDataToRelease);
            }
            return (int)mh$.invokeExact(psa, ppDataToRelease);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayDestroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SafeArrayDestroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayDestroy(SAFEARRAY *psa)
     * }
     */
    public static FunctionDescriptor SafeArrayDestroy$descriptor() {
        return SafeArrayDestroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayDestroy(SAFEARRAY *psa)
     * }
     */
    public static MethodHandle SafeArrayDestroy$handle() {
        return SafeArrayDestroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayDestroy(SAFEARRAY *psa)
     * }
     */
    public static MemorySegment SafeArrayDestroy$address() {
        return SafeArrayDestroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayDestroy(SAFEARRAY *psa)
     * }
     */
    public static int SafeArrayDestroy(MemorySegment psa) {
        var mh$ = SafeArrayDestroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayDestroy", psa);
            }
            return (int)mh$.invokeExact(psa);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayRedim {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SafeArrayRedim");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayRedim(SAFEARRAY *psa, SAFEARRAYBOUND *psaboundNew)
     * }
     */
    public static FunctionDescriptor SafeArrayRedim$descriptor() {
        return SafeArrayRedim.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayRedim(SAFEARRAY *psa, SAFEARRAYBOUND *psaboundNew)
     * }
     */
    public static MethodHandle SafeArrayRedim$handle() {
        return SafeArrayRedim.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayRedim(SAFEARRAY *psa, SAFEARRAYBOUND *psaboundNew)
     * }
     */
    public static MemorySegment SafeArrayRedim$address() {
        return SafeArrayRedim.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayRedim(SAFEARRAY *psa, SAFEARRAYBOUND *psaboundNew)
     * }
     */
    public static int SafeArrayRedim(MemorySegment psa, MemorySegment psaboundNew) {
        var mh$ = SafeArrayRedim.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayRedim", psa, psaboundNew);
            }
            return (int)mh$.invokeExact(psa, psaboundNew);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayGetDim {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SafeArrayGetDim");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern UINT SafeArrayGetDim(SAFEARRAY *psa)
     * }
     */
    public static FunctionDescriptor SafeArrayGetDim$descriptor() {
        return SafeArrayGetDim.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern UINT SafeArrayGetDim(SAFEARRAY *psa)
     * }
     */
    public static MethodHandle SafeArrayGetDim$handle() {
        return SafeArrayGetDim.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern UINT SafeArrayGetDim(SAFEARRAY *psa)
     * }
     */
    public static MemorySegment SafeArrayGetDim$address() {
        return SafeArrayGetDim.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern UINT SafeArrayGetDim(SAFEARRAY *psa)
     * }
     */
    public static int SafeArrayGetDim(MemorySegment psa) {
        var mh$ = SafeArrayGetDim.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayGetDim", psa);
            }
            return (int)mh$.invokeExact(psa);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayGetElemsize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SafeArrayGetElemsize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern UINT SafeArrayGetElemsize(SAFEARRAY *psa)
     * }
     */
    public static FunctionDescriptor SafeArrayGetElemsize$descriptor() {
        return SafeArrayGetElemsize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern UINT SafeArrayGetElemsize(SAFEARRAY *psa)
     * }
     */
    public static MethodHandle SafeArrayGetElemsize$handle() {
        return SafeArrayGetElemsize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern UINT SafeArrayGetElemsize(SAFEARRAY *psa)
     * }
     */
    public static MemorySegment SafeArrayGetElemsize$address() {
        return SafeArrayGetElemsize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern UINT SafeArrayGetElemsize(SAFEARRAY *psa)
     * }
     */
    public static int SafeArrayGetElemsize(MemorySegment psa) {
        var mh$ = SafeArrayGetElemsize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayGetElemsize", psa);
            }
            return (int)mh$.invokeExact(psa);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayGetUBound {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SafeArrayGetUBound");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetUBound(SAFEARRAY *psa, UINT nDim, LONG *plUbound)
     * }
     */
    public static FunctionDescriptor SafeArrayGetUBound$descriptor() {
        return SafeArrayGetUBound.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetUBound(SAFEARRAY *psa, UINT nDim, LONG *plUbound)
     * }
     */
    public static MethodHandle SafeArrayGetUBound$handle() {
        return SafeArrayGetUBound.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetUBound(SAFEARRAY *psa, UINT nDim, LONG *plUbound)
     * }
     */
    public static MemorySegment SafeArrayGetUBound$address() {
        return SafeArrayGetUBound.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetUBound(SAFEARRAY *psa, UINT nDim, LONG *plUbound)
     * }
     */
    public static int SafeArrayGetUBound(MemorySegment psa, int nDim, MemorySegment plUbound) {
        var mh$ = SafeArrayGetUBound.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayGetUBound", psa, nDim, plUbound);
            }
            return (int)mh$.invokeExact(psa, nDim, plUbound);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayGetLBound {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SafeArrayGetLBound");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetLBound(SAFEARRAY *psa, UINT nDim, LONG *plLbound)
     * }
     */
    public static FunctionDescriptor SafeArrayGetLBound$descriptor() {
        return SafeArrayGetLBound.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetLBound(SAFEARRAY *psa, UINT nDim, LONG *plLbound)
     * }
     */
    public static MethodHandle SafeArrayGetLBound$handle() {
        return SafeArrayGetLBound.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetLBound(SAFEARRAY *psa, UINT nDim, LONG *plLbound)
     * }
     */
    public static MemorySegment SafeArrayGetLBound$address() {
        return SafeArrayGetLBound.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetLBound(SAFEARRAY *psa, UINT nDim, LONG *plLbound)
     * }
     */
    public static int SafeArrayGetLBound(MemorySegment psa, int nDim, MemorySegment plLbound) {
        var mh$ = SafeArrayGetLBound.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayGetLBound", psa, nDim, plLbound);
            }
            return (int)mh$.invokeExact(psa, nDim, plLbound);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayLock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SafeArrayLock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayLock(SAFEARRAY *psa)
     * }
     */
    public static FunctionDescriptor SafeArrayLock$descriptor() {
        return SafeArrayLock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayLock(SAFEARRAY *psa)
     * }
     */
    public static MethodHandle SafeArrayLock$handle() {
        return SafeArrayLock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayLock(SAFEARRAY *psa)
     * }
     */
    public static MemorySegment SafeArrayLock$address() {
        return SafeArrayLock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayLock(SAFEARRAY *psa)
     * }
     */
    public static int SafeArrayLock(MemorySegment psa) {
        var mh$ = SafeArrayLock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayLock", psa);
            }
            return (int)mh$.invokeExact(psa);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayUnlock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SafeArrayUnlock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayUnlock(SAFEARRAY *psa)
     * }
     */
    public static FunctionDescriptor SafeArrayUnlock$descriptor() {
        return SafeArrayUnlock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayUnlock(SAFEARRAY *psa)
     * }
     */
    public static MethodHandle SafeArrayUnlock$handle() {
        return SafeArrayUnlock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayUnlock(SAFEARRAY *psa)
     * }
     */
    public static MemorySegment SafeArrayUnlock$address() {
        return SafeArrayUnlock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayUnlock(SAFEARRAY *psa)
     * }
     */
    public static int SafeArrayUnlock(MemorySegment psa) {
        var mh$ = SafeArrayUnlock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayUnlock", psa);
            }
            return (int)mh$.invokeExact(psa);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayAccessData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SafeArrayAccessData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAccessData(SAFEARRAY *psa, void **ppvData)
     * }
     */
    public static FunctionDescriptor SafeArrayAccessData$descriptor() {
        return SafeArrayAccessData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAccessData(SAFEARRAY *psa, void **ppvData)
     * }
     */
    public static MethodHandle SafeArrayAccessData$handle() {
        return SafeArrayAccessData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAccessData(SAFEARRAY *psa, void **ppvData)
     * }
     */
    public static MemorySegment SafeArrayAccessData$address() {
        return SafeArrayAccessData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAccessData(SAFEARRAY *psa, void **ppvData)
     * }
     */
    public static int SafeArrayAccessData(MemorySegment psa, MemorySegment ppvData) {
        var mh$ = SafeArrayAccessData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayAccessData", psa, ppvData);
            }
            return (int)mh$.invokeExact(psa, ppvData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayUnaccessData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SafeArrayUnaccessData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayUnaccessData(SAFEARRAY *psa)
     * }
     */
    public static FunctionDescriptor SafeArrayUnaccessData$descriptor() {
        return SafeArrayUnaccessData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayUnaccessData(SAFEARRAY *psa)
     * }
     */
    public static MethodHandle SafeArrayUnaccessData$handle() {
        return SafeArrayUnaccessData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayUnaccessData(SAFEARRAY *psa)
     * }
     */
    public static MemorySegment SafeArrayUnaccessData$address() {
        return SafeArrayUnaccessData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayUnaccessData(SAFEARRAY *psa)
     * }
     */
    public static int SafeArrayUnaccessData(MemorySegment psa) {
        var mh$ = SafeArrayUnaccessData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayUnaccessData", psa);
            }
            return (int)mh$.invokeExact(psa);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayGetElement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SafeArrayGetElement");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetElement(SAFEARRAY *psa, LONG *rgIndices, void *pv)
     * }
     */
    public static FunctionDescriptor SafeArrayGetElement$descriptor() {
        return SafeArrayGetElement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetElement(SAFEARRAY *psa, LONG *rgIndices, void *pv)
     * }
     */
    public static MethodHandle SafeArrayGetElement$handle() {
        return SafeArrayGetElement.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetElement(SAFEARRAY *psa, LONG *rgIndices, void *pv)
     * }
     */
    public static MemorySegment SafeArrayGetElement$address() {
        return SafeArrayGetElement.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetElement(SAFEARRAY *psa, LONG *rgIndices, void *pv)
     * }
     */
    public static int SafeArrayGetElement(MemorySegment psa, MemorySegment rgIndices, MemorySegment pv) {
        var mh$ = SafeArrayGetElement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayGetElement", psa, rgIndices, pv);
            }
            return (int)mh$.invokeExact(psa, rgIndices, pv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayPutElement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SafeArrayPutElement");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayPutElement(SAFEARRAY *psa, LONG *rgIndices, void *pv)
     * }
     */
    public static FunctionDescriptor SafeArrayPutElement$descriptor() {
        return SafeArrayPutElement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayPutElement(SAFEARRAY *psa, LONG *rgIndices, void *pv)
     * }
     */
    public static MethodHandle SafeArrayPutElement$handle() {
        return SafeArrayPutElement.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayPutElement(SAFEARRAY *psa, LONG *rgIndices, void *pv)
     * }
     */
    public static MemorySegment SafeArrayPutElement$address() {
        return SafeArrayPutElement.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayPutElement(SAFEARRAY *psa, LONG *rgIndices, void *pv)
     * }
     */
    public static int SafeArrayPutElement(MemorySegment psa, MemorySegment rgIndices, MemorySegment pv) {
        var mh$ = SafeArrayPutElement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayPutElement", psa, rgIndices, pv);
            }
            return (int)mh$.invokeExact(psa, rgIndices, pv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayCopy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SafeArrayCopy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayCopy(SAFEARRAY *psa, SAFEARRAY **ppsaOut)
     * }
     */
    public static FunctionDescriptor SafeArrayCopy$descriptor() {
        return SafeArrayCopy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayCopy(SAFEARRAY *psa, SAFEARRAY **ppsaOut)
     * }
     */
    public static MethodHandle SafeArrayCopy$handle() {
        return SafeArrayCopy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayCopy(SAFEARRAY *psa, SAFEARRAY **ppsaOut)
     * }
     */
    public static MemorySegment SafeArrayCopy$address() {
        return SafeArrayCopy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayCopy(SAFEARRAY *psa, SAFEARRAY **ppsaOut)
     * }
     */
    public static int SafeArrayCopy(MemorySegment psa, MemorySegment ppsaOut) {
        var mh$ = SafeArrayCopy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayCopy", psa, ppsaOut);
            }
            return (int)mh$.invokeExact(psa, ppsaOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayPtrOfIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SafeArrayPtrOfIndex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayPtrOfIndex(SAFEARRAY *psa, LONG *rgIndices, void **ppvData)
     * }
     */
    public static FunctionDescriptor SafeArrayPtrOfIndex$descriptor() {
        return SafeArrayPtrOfIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayPtrOfIndex(SAFEARRAY *psa, LONG *rgIndices, void **ppvData)
     * }
     */
    public static MethodHandle SafeArrayPtrOfIndex$handle() {
        return SafeArrayPtrOfIndex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayPtrOfIndex(SAFEARRAY *psa, LONG *rgIndices, void **ppvData)
     * }
     */
    public static MemorySegment SafeArrayPtrOfIndex$address() {
        return SafeArrayPtrOfIndex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayPtrOfIndex(SAFEARRAY *psa, LONG *rgIndices, void **ppvData)
     * }
     */
    public static int SafeArrayPtrOfIndex(MemorySegment psa, MemorySegment rgIndices, MemorySegment ppvData) {
        var mh$ = SafeArrayPtrOfIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayPtrOfIndex", psa, rgIndices, ppvData);
            }
            return (int)mh$.invokeExact(psa, rgIndices, ppvData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArraySetRecordInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SafeArraySetRecordInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArraySetRecordInfo(SAFEARRAY *psa, IRecordInfo *prinfo)
     * }
     */
    public static FunctionDescriptor SafeArraySetRecordInfo$descriptor() {
        return SafeArraySetRecordInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArraySetRecordInfo(SAFEARRAY *psa, IRecordInfo *prinfo)
     * }
     */
    public static MethodHandle SafeArraySetRecordInfo$handle() {
        return SafeArraySetRecordInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArraySetRecordInfo(SAFEARRAY *psa, IRecordInfo *prinfo)
     * }
     */
    public static MemorySegment SafeArraySetRecordInfo$address() {
        return SafeArraySetRecordInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArraySetRecordInfo(SAFEARRAY *psa, IRecordInfo *prinfo)
     * }
     */
    public static int SafeArraySetRecordInfo(MemorySegment psa, MemorySegment prinfo) {
        var mh$ = SafeArraySetRecordInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArraySetRecordInfo", psa, prinfo);
            }
            return (int)mh$.invokeExact(psa, prinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayGetRecordInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SafeArrayGetRecordInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetRecordInfo(SAFEARRAY *psa, IRecordInfo **prinfo)
     * }
     */
    public static FunctionDescriptor SafeArrayGetRecordInfo$descriptor() {
        return SafeArrayGetRecordInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetRecordInfo(SAFEARRAY *psa, IRecordInfo **prinfo)
     * }
     */
    public static MethodHandle SafeArrayGetRecordInfo$handle() {
        return SafeArrayGetRecordInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetRecordInfo(SAFEARRAY *psa, IRecordInfo **prinfo)
     * }
     */
    public static MemorySegment SafeArrayGetRecordInfo$address() {
        return SafeArrayGetRecordInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetRecordInfo(SAFEARRAY *psa, IRecordInfo **prinfo)
     * }
     */
    public static int SafeArrayGetRecordInfo(MemorySegment psa, MemorySegment prinfo) {
        var mh$ = SafeArrayGetRecordInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayGetRecordInfo", psa, prinfo);
            }
            return (int)mh$.invokeExact(psa, prinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArraySetIID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SafeArraySetIID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArraySetIID(SAFEARRAY *psa, const GUID *const guid)
     * }
     */
    public static FunctionDescriptor SafeArraySetIID$descriptor() {
        return SafeArraySetIID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArraySetIID(SAFEARRAY *psa, const GUID *const guid)
     * }
     */
    public static MethodHandle SafeArraySetIID$handle() {
        return SafeArraySetIID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArraySetIID(SAFEARRAY *psa, const GUID *const guid)
     * }
     */
    public static MemorySegment SafeArraySetIID$address() {
        return SafeArraySetIID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArraySetIID(SAFEARRAY *psa, const GUID *const guid)
     * }
     */
    public static int SafeArraySetIID(MemorySegment psa, MemorySegment guid) {
        var mh$ = SafeArraySetIID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArraySetIID", psa, guid);
            }
            return (int)mh$.invokeExact(psa, guid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayGetIID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SafeArrayGetIID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetIID(SAFEARRAY *psa, GUID *pguid)
     * }
     */
    public static FunctionDescriptor SafeArrayGetIID$descriptor() {
        return SafeArrayGetIID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetIID(SAFEARRAY *psa, GUID *pguid)
     * }
     */
    public static MethodHandle SafeArrayGetIID$handle() {
        return SafeArrayGetIID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetIID(SAFEARRAY *psa, GUID *pguid)
     * }
     */
    public static MemorySegment SafeArrayGetIID$address() {
        return SafeArrayGetIID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetIID(SAFEARRAY *psa, GUID *pguid)
     * }
     */
    public static int SafeArrayGetIID(MemorySegment psa, MemorySegment pguid) {
        var mh$ = SafeArrayGetIID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayGetIID", psa, pguid);
            }
            return (int)mh$.invokeExact(psa, pguid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayGetVartype {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SafeArrayGetVartype");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetVartype(SAFEARRAY *psa, VARTYPE *pvt)
     * }
     */
    public static FunctionDescriptor SafeArrayGetVartype$descriptor() {
        return SafeArrayGetVartype.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetVartype(SAFEARRAY *psa, VARTYPE *pvt)
     * }
     */
    public static MethodHandle SafeArrayGetVartype$handle() {
        return SafeArrayGetVartype.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetVartype(SAFEARRAY *psa, VARTYPE *pvt)
     * }
     */
    public static MemorySegment SafeArrayGetVartype$address() {
        return SafeArrayGetVartype.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetVartype(SAFEARRAY *psa, VARTYPE *pvt)
     * }
     */
    public static int SafeArrayGetVartype(MemorySegment psa, MemorySegment pvt) {
        var mh$ = SafeArrayGetVartype.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayGetVartype", psa, pvt);
            }
            return (int)mh$.invokeExact(psa, pvt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayCreateVector {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_SHORT,
            wgl_h.C_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SafeArrayCreateVector");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreateVector(VARTYPE vt, LONG lLbound, ULONG cElements)
     * }
     */
    public static FunctionDescriptor SafeArrayCreateVector$descriptor() {
        return SafeArrayCreateVector.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreateVector(VARTYPE vt, LONG lLbound, ULONG cElements)
     * }
     */
    public static MethodHandle SafeArrayCreateVector$handle() {
        return SafeArrayCreateVector.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreateVector(VARTYPE vt, LONG lLbound, ULONG cElements)
     * }
     */
    public static MemorySegment SafeArrayCreateVector$address() {
        return SafeArrayCreateVector.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreateVector(VARTYPE vt, LONG lLbound, ULONG cElements)
     * }
     */
    public static MemorySegment SafeArrayCreateVector(short vt, int lLbound, int cElements) {
        var mh$ = SafeArrayCreateVector.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayCreateVector", vt, lLbound, cElements);
            }
            return (MemorySegment)mh$.invokeExact(vt, lLbound, cElements);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayCreateVectorEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_SHORT,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SafeArrayCreateVectorEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreateVectorEx(VARTYPE vt, LONG lLbound, ULONG cElements, PVOID pvExtra)
     * }
     */
    public static FunctionDescriptor SafeArrayCreateVectorEx$descriptor() {
        return SafeArrayCreateVectorEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreateVectorEx(VARTYPE vt, LONG lLbound, ULONG cElements, PVOID pvExtra)
     * }
     */
    public static MethodHandle SafeArrayCreateVectorEx$handle() {
        return SafeArrayCreateVectorEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreateVectorEx(VARTYPE vt, LONG lLbound, ULONG cElements, PVOID pvExtra)
     * }
     */
    public static MemorySegment SafeArrayCreateVectorEx$address() {
        return SafeArrayCreateVectorEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreateVectorEx(VARTYPE vt, LONG lLbound, ULONG cElements, PVOID pvExtra)
     * }
     */
    public static MemorySegment SafeArrayCreateVectorEx(short vt, int lLbound, int cElements, MemorySegment pvExtra) {
        var mh$ = SafeArrayCreateVectorEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayCreateVectorEx", vt, lLbound, cElements, pvExtra);
            }
            return (MemorySegment)mh$.invokeExact(vt, lLbound, cElements, pvExtra);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VariantInit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VariantInit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void VariantInit(VARIANTARG *pvarg)
     * }
     */
    public static FunctionDescriptor VariantInit$descriptor() {
        return VariantInit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void VariantInit(VARIANTARG *pvarg)
     * }
     */
    public static MethodHandle VariantInit$handle() {
        return VariantInit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void VariantInit(VARIANTARG *pvarg)
     * }
     */
    public static MemorySegment VariantInit$address() {
        return VariantInit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void VariantInit(VARIANTARG *pvarg)
     * }
     */
    public static void VariantInit(MemorySegment pvarg) {
        var mh$ = VariantInit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VariantInit", pvarg);
            }
            mh$.invokeExact(pvarg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VariantClear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VariantClear");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VariantClear(VARIANTARG *pvarg)
     * }
     */
    public static FunctionDescriptor VariantClear$descriptor() {
        return VariantClear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VariantClear(VARIANTARG *pvarg)
     * }
     */
    public static MethodHandle VariantClear$handle() {
        return VariantClear.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VariantClear(VARIANTARG *pvarg)
     * }
     */
    public static MemorySegment VariantClear$address() {
        return VariantClear.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VariantClear(VARIANTARG *pvarg)
     * }
     */
    public static int VariantClear(MemorySegment pvarg) {
        var mh$ = VariantClear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VariantClear", pvarg);
            }
            return (int)mh$.invokeExact(pvarg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VariantCopy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VariantCopy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VariantCopy(VARIANTARG *pvargDest, const VARIANTARG *pvargSrc)
     * }
     */
    public static FunctionDescriptor VariantCopy$descriptor() {
        return VariantCopy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VariantCopy(VARIANTARG *pvargDest, const VARIANTARG *pvargSrc)
     * }
     */
    public static MethodHandle VariantCopy$handle() {
        return VariantCopy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VariantCopy(VARIANTARG *pvargDest, const VARIANTARG *pvargSrc)
     * }
     */
    public static MemorySegment VariantCopy$address() {
        return VariantCopy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VariantCopy(VARIANTARG *pvargDest, const VARIANTARG *pvargSrc)
     * }
     */
    public static int VariantCopy(MemorySegment pvargDest, MemorySegment pvargSrc) {
        var mh$ = VariantCopy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VariantCopy", pvargDest, pvargSrc);
            }
            return (int)mh$.invokeExact(pvargDest, pvargSrc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VariantCopyInd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VariantCopyInd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VariantCopyInd(VARIANT *pvarDest, const VARIANTARG *pvargSrc)
     * }
     */
    public static FunctionDescriptor VariantCopyInd$descriptor() {
        return VariantCopyInd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VariantCopyInd(VARIANT *pvarDest, const VARIANTARG *pvargSrc)
     * }
     */
    public static MethodHandle VariantCopyInd$handle() {
        return VariantCopyInd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VariantCopyInd(VARIANT *pvarDest, const VARIANTARG *pvargSrc)
     * }
     */
    public static MemorySegment VariantCopyInd$address() {
        return VariantCopyInd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VariantCopyInd(VARIANT *pvarDest, const VARIANTARG *pvargSrc)
     * }
     */
    public static int VariantCopyInd(MemorySegment pvarDest, MemorySegment pvargSrc) {
        var mh$ = VariantCopyInd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VariantCopyInd", pvarDest, pvargSrc);
            }
            return (int)mh$.invokeExact(pvarDest, pvargSrc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VariantChangeType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_SHORT,
            wgl_h.C_SHORT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VariantChangeType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VariantChangeType(VARIANTARG *pvargDest, const VARIANTARG *pvarSrc, USHORT wFlags, VARTYPE vt)
     * }
     */
    public static FunctionDescriptor VariantChangeType$descriptor() {
        return VariantChangeType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VariantChangeType(VARIANTARG *pvargDest, const VARIANTARG *pvarSrc, USHORT wFlags, VARTYPE vt)
     * }
     */
    public static MethodHandle VariantChangeType$handle() {
        return VariantChangeType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VariantChangeType(VARIANTARG *pvargDest, const VARIANTARG *pvarSrc, USHORT wFlags, VARTYPE vt)
     * }
     */
    public static MemorySegment VariantChangeType$address() {
        return VariantChangeType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VariantChangeType(VARIANTARG *pvargDest, const VARIANTARG *pvarSrc, USHORT wFlags, VARTYPE vt)
     * }
     */
    public static int VariantChangeType(MemorySegment pvargDest, MemorySegment pvarSrc, short wFlags, short vt) {
        var mh$ = VariantChangeType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VariantChangeType", pvargDest, pvarSrc, wFlags, vt);
            }
            return (int)mh$.invokeExact(pvargDest, pvarSrc, wFlags, vt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VariantChangeTypeEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_SHORT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VariantChangeTypeEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VariantChangeTypeEx(VARIANTARG *pvargDest, const VARIANTARG *pvarSrc, LCID lcid, USHORT wFlags, VARTYPE vt)
     * }
     */
    public static FunctionDescriptor VariantChangeTypeEx$descriptor() {
        return VariantChangeTypeEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VariantChangeTypeEx(VARIANTARG *pvargDest, const VARIANTARG *pvarSrc, LCID lcid, USHORT wFlags, VARTYPE vt)
     * }
     */
    public static MethodHandle VariantChangeTypeEx$handle() {
        return VariantChangeTypeEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VariantChangeTypeEx(VARIANTARG *pvargDest, const VARIANTARG *pvarSrc, LCID lcid, USHORT wFlags, VARTYPE vt)
     * }
     */
    public static MemorySegment VariantChangeTypeEx$address() {
        return VariantChangeTypeEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VariantChangeTypeEx(VARIANTARG *pvargDest, const VARIANTARG *pvarSrc, LCID lcid, USHORT wFlags, VARTYPE vt)
     * }
     */
    public static int VariantChangeTypeEx(MemorySegment pvargDest, MemorySegment pvarSrc, int lcid, short wFlags, short vt) {
        var mh$ = VariantChangeTypeEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VariantChangeTypeEx", pvargDest, pvarSrc, lcid, wFlags, vt);
            }
            return (int)mh$.invokeExact(pvargDest, pvarSrc, lcid, wFlags, vt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VectorFromBstr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VectorFromBstr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VectorFromBstr(BSTR bstr, SAFEARRAY **ppsa)
     * }
     */
    public static FunctionDescriptor VectorFromBstr$descriptor() {
        return VectorFromBstr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VectorFromBstr(BSTR bstr, SAFEARRAY **ppsa)
     * }
     */
    public static MethodHandle VectorFromBstr$handle() {
        return VectorFromBstr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VectorFromBstr(BSTR bstr, SAFEARRAY **ppsa)
     * }
     */
    public static MemorySegment VectorFromBstr$address() {
        return VectorFromBstr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VectorFromBstr(BSTR bstr, SAFEARRAY **ppsa)
     * }
     */
    public static int VectorFromBstr(MemorySegment bstr, MemorySegment ppsa) {
        var mh$ = VectorFromBstr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VectorFromBstr", bstr, ppsa);
            }
            return (int)mh$.invokeExact(bstr, ppsa);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BstrFromVector {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("BstrFromVector");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT BstrFromVector(SAFEARRAY *psa, BSTR *pbstr)
     * }
     */
    public static FunctionDescriptor BstrFromVector$descriptor() {
        return BstrFromVector.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT BstrFromVector(SAFEARRAY *psa, BSTR *pbstr)
     * }
     */
    public static MethodHandle BstrFromVector$handle() {
        return BstrFromVector.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT BstrFromVector(SAFEARRAY *psa, BSTR *pbstr)
     * }
     */
    public static MemorySegment BstrFromVector$address() {
        return BstrFromVector.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT BstrFromVector(SAFEARRAY *psa, BSTR *pbstr)
     * }
     */
    public static int BstrFromVector(MemorySegment psa, MemorySegment pbstr) {
        var mh$ = BstrFromVector.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BstrFromVector", psa, pbstr);
            }
            return (int)mh$.invokeExact(psa, pbstr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI1FromI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI2(SHORT sIn, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromI2$descriptor() {
        return VarUI1FromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI2(SHORT sIn, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromI2$handle() {
        return VarUI1FromI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI2(SHORT sIn, BYTE *pbOut)
     * }
     */
    public static MemorySegment VarUI1FromI2$address() {
        return VarUI1FromI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI2(SHORT sIn, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromI2(short sIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromI2", sIn, pbOut);
            }
            return (int)mh$.invokeExact(sIn, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI1FromI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI4(LONG lIn, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromI4$descriptor() {
        return VarUI1FromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI4(LONG lIn, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromI4$handle() {
        return VarUI1FromI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI4(LONG lIn, BYTE *pbOut)
     * }
     */
    public static MemorySegment VarUI1FromI4$address() {
        return VarUI1FromI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI4(LONG lIn, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromI4(int lIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromI4", lIn, pbOut);
            }
            return (int)mh$.invokeExact(lIn, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI1FromI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI8(LONG64 i64In, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromI8$descriptor() {
        return VarUI1FromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI8(LONG64 i64In, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromI8$handle() {
        return VarUI1FromI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI8(LONG64 i64In, BYTE *pbOut)
     * }
     */
    public static MemorySegment VarUI1FromI8$address() {
        return VarUI1FromI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI8(LONG64 i64In, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromI8(long i64In, MemorySegment pbOut) {
        var mh$ = VarUI1FromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromI8", i64In, pbOut);
            }
            return (int)mh$.invokeExact(i64In, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_FLOAT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI1FromR4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromR4(FLOAT fltIn, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromR4$descriptor() {
        return VarUI1FromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromR4(FLOAT fltIn, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromR4$handle() {
        return VarUI1FromR4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromR4(FLOAT fltIn, BYTE *pbOut)
     * }
     */
    public static MemorySegment VarUI1FromR4$address() {
        return VarUI1FromR4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromR4(FLOAT fltIn, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromR4(float fltIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromR4", fltIn, pbOut);
            }
            return (int)mh$.invokeExact(fltIn, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_DOUBLE,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI1FromR8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromR8(DOUBLE dblIn, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromR8$descriptor() {
        return VarUI1FromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromR8(DOUBLE dblIn, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromR8$handle() {
        return VarUI1FromR8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromR8(DOUBLE dblIn, BYTE *pbOut)
     * }
     */
    public static MemorySegment VarUI1FromR8$address() {
        return VarUI1FromR8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromR8(DOUBLE dblIn, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromR8(double dblIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromR8", dblIn, pbOut);
            }
            return (int)mh$.invokeExact(dblIn, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            tagCY.layout(),
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI1FromCy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromCy(CY cyIn, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromCy$descriptor() {
        return VarUI1FromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromCy(CY cyIn, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromCy$handle() {
        return VarUI1FromCy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromCy(CY cyIn, BYTE *pbOut)
     * }
     */
    public static MemorySegment VarUI1FromCy$address() {
        return VarUI1FromCy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromCy(CY cyIn, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromCy(MemorySegment cyIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromCy", cyIn, pbOut);
            }
            return (int)mh$.invokeExact(cyIn, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_DOUBLE,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI1FromDate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromDate(DATE dateIn, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromDate$descriptor() {
        return VarUI1FromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromDate(DATE dateIn, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromDate$handle() {
        return VarUI1FromDate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromDate(DATE dateIn, BYTE *pbOut)
     * }
     */
    public static MemorySegment VarUI1FromDate$address() {
        return VarUI1FromDate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromDate(DATE dateIn, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromDate(double dateIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromDate", dateIn, pbOut);
            }
            return (int)mh$.invokeExact(dateIn, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI1FromStr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromStr$descriptor() {
        return VarUI1FromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromStr$handle() {
        return VarUI1FromStr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, BYTE *pbOut)
     * }
     */
    public static MemorySegment VarUI1FromStr$address() {
        return VarUI1FromStr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pbOut) {
        var mh$ = VarUI1FromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromStr", strIn, lcid, dwFlags, pbOut);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI1FromDisp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromDisp(IDispatch *pdispIn, LCID lcid, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromDisp$descriptor() {
        return VarUI1FromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromDisp(IDispatch *pdispIn, LCID lcid, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromDisp$handle() {
        return VarUI1FromDisp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromDisp(IDispatch *pdispIn, LCID lcid, BYTE *pbOut)
     * }
     */
    public static MemorySegment VarUI1FromDisp$address() {
        return VarUI1FromDisp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromDisp(IDispatch *pdispIn, LCID lcid, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromDisp(MemorySegment pdispIn, int lcid, MemorySegment pbOut) {
        var mh$ = VarUI1FromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromDisp", pdispIn, lcid, pbOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI1FromBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromBool(VARIANT_BOOL boolIn, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromBool$descriptor() {
        return VarUI1FromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromBool(VARIANT_BOOL boolIn, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromBool$handle() {
        return VarUI1FromBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromBool(VARIANT_BOOL boolIn, BYTE *pbOut)
     * }
     */
    public static MemorySegment VarUI1FromBool$address() {
        return VarUI1FromBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromBool(VARIANT_BOOL boolIn, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromBool(short boolIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromBool", boolIn, pbOut);
            }
            return (int)mh$.invokeExact(boolIn, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_CHAR,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI1FromI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI1(CHAR cIn, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromI1$descriptor() {
        return VarUI1FromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI1(CHAR cIn, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromI1$handle() {
        return VarUI1FromI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI1(CHAR cIn, BYTE *pbOut)
     * }
     */
    public static MemorySegment VarUI1FromI1$address() {
        return VarUI1FromI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI1(CHAR cIn, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromI1(byte cIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromI1", cIn, pbOut);
            }
            return (int)mh$.invokeExact(cIn, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI1FromUI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromUI2(USHORT uiIn, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromUI2$descriptor() {
        return VarUI1FromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromUI2(USHORT uiIn, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromUI2$handle() {
        return VarUI1FromUI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromUI2(USHORT uiIn, BYTE *pbOut)
     * }
     */
    public static MemorySegment VarUI1FromUI2$address() {
        return VarUI1FromUI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromUI2(USHORT uiIn, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromUI2(short uiIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromUI2", uiIn, pbOut);
            }
            return (int)mh$.invokeExact(uiIn, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI1FromUI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromUI4(ULONG ulIn, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromUI4$descriptor() {
        return VarUI1FromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromUI4(ULONG ulIn, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromUI4$handle() {
        return VarUI1FromUI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromUI4(ULONG ulIn, BYTE *pbOut)
     * }
     */
    public static MemorySegment VarUI1FromUI4$address() {
        return VarUI1FromUI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromUI4(ULONG ulIn, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromUI4(int ulIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromUI4", ulIn, pbOut);
            }
            return (int)mh$.invokeExact(ulIn, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI1FromUI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromUI8(ULONG64 ui64In, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromUI8$descriptor() {
        return VarUI1FromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromUI8(ULONG64 ui64In, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromUI8$handle() {
        return VarUI1FromUI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromUI8(ULONG64 ui64In, BYTE *pbOut)
     * }
     */
    public static MemorySegment VarUI1FromUI8$address() {
        return VarUI1FromUI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromUI8(ULONG64 ui64In, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromUI8(long ui64In, MemorySegment pbOut) {
        var mh$ = VarUI1FromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromUI8", ui64In, pbOut);
            }
            return (int)mh$.invokeExact(ui64In, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI1FromDec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromDec(const DECIMAL *pdecIn, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromDec$descriptor() {
        return VarUI1FromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromDec(const DECIMAL *pdecIn, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromDec$handle() {
        return VarUI1FromDec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromDec(const DECIMAL *pdecIn, BYTE *pbOut)
     * }
     */
    public static MemorySegment VarUI1FromDec$address() {
        return VarUI1FromDec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromDec(const DECIMAL *pdecIn, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromDec(MemorySegment pdecIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromDec", pdecIn, pbOut);
            }
            return (int)mh$.invokeExact(pdecIn, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_CHAR,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI2FromUI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI1(BYTE bIn, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromUI1$descriptor() {
        return VarI2FromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI1(BYTE bIn, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromUI1$handle() {
        return VarI2FromUI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI1(BYTE bIn, SHORT *psOut)
     * }
     */
    public static MemorySegment VarI2FromUI1$address() {
        return VarI2FromUI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI1(BYTE bIn, SHORT *psOut)
     * }
     */
    public static int VarI2FromUI1(byte bIn, MemorySegment psOut) {
        var mh$ = VarI2FromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromUI1", bIn, psOut);
            }
            return (int)mh$.invokeExact(bIn, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI2FromI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromI4(LONG lIn, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromI4$descriptor() {
        return VarI2FromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromI4(LONG lIn, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromI4$handle() {
        return VarI2FromI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromI4(LONG lIn, SHORT *psOut)
     * }
     */
    public static MemorySegment VarI2FromI4$address() {
        return VarI2FromI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromI4(LONG lIn, SHORT *psOut)
     * }
     */
    public static int VarI2FromI4(int lIn, MemorySegment psOut) {
        var mh$ = VarI2FromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromI4", lIn, psOut);
            }
            return (int)mh$.invokeExact(lIn, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI2FromI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromI8(LONG64 i64In, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromI8$descriptor() {
        return VarI2FromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromI8(LONG64 i64In, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromI8$handle() {
        return VarI2FromI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromI8(LONG64 i64In, SHORT *psOut)
     * }
     */
    public static MemorySegment VarI2FromI8$address() {
        return VarI2FromI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromI8(LONG64 i64In, SHORT *psOut)
     * }
     */
    public static int VarI2FromI8(long i64In, MemorySegment psOut) {
        var mh$ = VarI2FromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromI8", i64In, psOut);
            }
            return (int)mh$.invokeExact(i64In, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_FLOAT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI2FromR4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromR4(FLOAT fltIn, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromR4$descriptor() {
        return VarI2FromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromR4(FLOAT fltIn, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromR4$handle() {
        return VarI2FromR4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromR4(FLOAT fltIn, SHORT *psOut)
     * }
     */
    public static MemorySegment VarI2FromR4$address() {
        return VarI2FromR4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromR4(FLOAT fltIn, SHORT *psOut)
     * }
     */
    public static int VarI2FromR4(float fltIn, MemorySegment psOut) {
        var mh$ = VarI2FromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromR4", fltIn, psOut);
            }
            return (int)mh$.invokeExact(fltIn, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_DOUBLE,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI2FromR8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromR8(DOUBLE dblIn, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromR8$descriptor() {
        return VarI2FromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromR8(DOUBLE dblIn, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromR8$handle() {
        return VarI2FromR8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromR8(DOUBLE dblIn, SHORT *psOut)
     * }
     */
    public static MemorySegment VarI2FromR8$address() {
        return VarI2FromR8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromR8(DOUBLE dblIn, SHORT *psOut)
     * }
     */
    public static int VarI2FromR8(double dblIn, MemorySegment psOut) {
        var mh$ = VarI2FromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromR8", dblIn, psOut);
            }
            return (int)mh$.invokeExact(dblIn, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            tagCY.layout(),
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI2FromCy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromCy(CY cyIn, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromCy$descriptor() {
        return VarI2FromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromCy(CY cyIn, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromCy$handle() {
        return VarI2FromCy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromCy(CY cyIn, SHORT *psOut)
     * }
     */
    public static MemorySegment VarI2FromCy$address() {
        return VarI2FromCy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromCy(CY cyIn, SHORT *psOut)
     * }
     */
    public static int VarI2FromCy(MemorySegment cyIn, MemorySegment psOut) {
        var mh$ = VarI2FromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromCy", cyIn, psOut);
            }
            return (int)mh$.invokeExact(cyIn, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_DOUBLE,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI2FromDate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromDate(DATE dateIn, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromDate$descriptor() {
        return VarI2FromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromDate(DATE dateIn, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromDate$handle() {
        return VarI2FromDate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromDate(DATE dateIn, SHORT *psOut)
     * }
     */
    public static MemorySegment VarI2FromDate$address() {
        return VarI2FromDate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromDate(DATE dateIn, SHORT *psOut)
     * }
     */
    public static int VarI2FromDate(double dateIn, MemorySegment psOut) {
        var mh$ = VarI2FromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromDate", dateIn, psOut);
            }
            return (int)mh$.invokeExact(dateIn, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI2FromStr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromStr$descriptor() {
        return VarI2FromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromStr$handle() {
        return VarI2FromStr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, SHORT *psOut)
     * }
     */
    public static MemorySegment VarI2FromStr$address() {
        return VarI2FromStr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, SHORT *psOut)
     * }
     */
    public static int VarI2FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment psOut) {
        var mh$ = VarI2FromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromStr", strIn, lcid, dwFlags, psOut);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI2FromDisp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromDisp(IDispatch *pdispIn, LCID lcid, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromDisp$descriptor() {
        return VarI2FromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromDisp(IDispatch *pdispIn, LCID lcid, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromDisp$handle() {
        return VarI2FromDisp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromDisp(IDispatch *pdispIn, LCID lcid, SHORT *psOut)
     * }
     */
    public static MemorySegment VarI2FromDisp$address() {
        return VarI2FromDisp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromDisp(IDispatch *pdispIn, LCID lcid, SHORT *psOut)
     * }
     */
    public static int VarI2FromDisp(MemorySegment pdispIn, int lcid, MemorySegment psOut) {
        var mh$ = VarI2FromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromDisp", pdispIn, lcid, psOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI2FromBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromBool(VARIANT_BOOL boolIn, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromBool$descriptor() {
        return VarI2FromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromBool(VARIANT_BOOL boolIn, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromBool$handle() {
        return VarI2FromBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromBool(VARIANT_BOOL boolIn, SHORT *psOut)
     * }
     */
    public static MemorySegment VarI2FromBool$address() {
        return VarI2FromBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromBool(VARIANT_BOOL boolIn, SHORT *psOut)
     * }
     */
    public static int VarI2FromBool(short boolIn, MemorySegment psOut) {
        var mh$ = VarI2FromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromBool", boolIn, psOut);
            }
            return (int)mh$.invokeExact(boolIn, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_CHAR,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI2FromI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromI1(CHAR cIn, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromI1$descriptor() {
        return VarI2FromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromI1(CHAR cIn, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromI1$handle() {
        return VarI2FromI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromI1(CHAR cIn, SHORT *psOut)
     * }
     */
    public static MemorySegment VarI2FromI1$address() {
        return VarI2FromI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromI1(CHAR cIn, SHORT *psOut)
     * }
     */
    public static int VarI2FromI1(byte cIn, MemorySegment psOut) {
        var mh$ = VarI2FromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromI1", cIn, psOut);
            }
            return (int)mh$.invokeExact(cIn, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI2FromUI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI2(USHORT uiIn, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromUI2$descriptor() {
        return VarI2FromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI2(USHORT uiIn, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromUI2$handle() {
        return VarI2FromUI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI2(USHORT uiIn, SHORT *psOut)
     * }
     */
    public static MemorySegment VarI2FromUI2$address() {
        return VarI2FromUI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI2(USHORT uiIn, SHORT *psOut)
     * }
     */
    public static int VarI2FromUI2(short uiIn, MemorySegment psOut) {
        var mh$ = VarI2FromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromUI2", uiIn, psOut);
            }
            return (int)mh$.invokeExact(uiIn, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI2FromUI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI4(ULONG ulIn, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromUI4$descriptor() {
        return VarI2FromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI4(ULONG ulIn, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromUI4$handle() {
        return VarI2FromUI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI4(ULONG ulIn, SHORT *psOut)
     * }
     */
    public static MemorySegment VarI2FromUI4$address() {
        return VarI2FromUI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI4(ULONG ulIn, SHORT *psOut)
     * }
     */
    public static int VarI2FromUI4(int ulIn, MemorySegment psOut) {
        var mh$ = VarI2FromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromUI4", ulIn, psOut);
            }
            return (int)mh$.invokeExact(ulIn, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI2FromUI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI8(ULONG64 ui64In, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromUI8$descriptor() {
        return VarI2FromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI8(ULONG64 ui64In, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromUI8$handle() {
        return VarI2FromUI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI8(ULONG64 ui64In, SHORT *psOut)
     * }
     */
    public static MemorySegment VarI2FromUI8$address() {
        return VarI2FromUI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI8(ULONG64 ui64In, SHORT *psOut)
     * }
     */
    public static int VarI2FromUI8(long ui64In, MemorySegment psOut) {
        var mh$ = VarI2FromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromUI8", ui64In, psOut);
            }
            return (int)mh$.invokeExact(ui64In, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI2FromDec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromDec(const DECIMAL *pdecIn, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromDec$descriptor() {
        return VarI2FromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromDec(const DECIMAL *pdecIn, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromDec$handle() {
        return VarI2FromDec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromDec(const DECIMAL *pdecIn, SHORT *psOut)
     * }
     */
    public static MemorySegment VarI2FromDec$address() {
        return VarI2FromDec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromDec(const DECIMAL *pdecIn, SHORT *psOut)
     * }
     */
    public static int VarI2FromDec(MemorySegment pdecIn, MemorySegment psOut) {
        var mh$ = VarI2FromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromDec", pdecIn, psOut);
            }
            return (int)mh$.invokeExact(pdecIn, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_CHAR,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI4FromUI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI1(BYTE bIn, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromUI1$descriptor() {
        return VarI4FromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI1(BYTE bIn, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromUI1$handle() {
        return VarI4FromUI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI1(BYTE bIn, LONG *plOut)
     * }
     */
    public static MemorySegment VarI4FromUI1$address() {
        return VarI4FromUI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI1(BYTE bIn, LONG *plOut)
     * }
     */
    public static int VarI4FromUI1(byte bIn, MemorySegment plOut) {
        var mh$ = VarI4FromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromUI1", bIn, plOut);
            }
            return (int)mh$.invokeExact(bIn, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI4FromI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromI2(SHORT sIn, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromI2$descriptor() {
        return VarI4FromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromI2(SHORT sIn, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromI2$handle() {
        return VarI4FromI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromI2(SHORT sIn, LONG *plOut)
     * }
     */
    public static MemorySegment VarI4FromI2$address() {
        return VarI4FromI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromI2(SHORT sIn, LONG *plOut)
     * }
     */
    public static int VarI4FromI2(short sIn, MemorySegment plOut) {
        var mh$ = VarI4FromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromI2", sIn, plOut);
            }
            return (int)mh$.invokeExact(sIn, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI4FromI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromI8(LONG64 i64In, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromI8$descriptor() {
        return VarI4FromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromI8(LONG64 i64In, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromI8$handle() {
        return VarI4FromI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromI8(LONG64 i64In, LONG *plOut)
     * }
     */
    public static MemorySegment VarI4FromI8$address() {
        return VarI4FromI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromI8(LONG64 i64In, LONG *plOut)
     * }
     */
    public static int VarI4FromI8(long i64In, MemorySegment plOut) {
        var mh$ = VarI4FromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromI8", i64In, plOut);
            }
            return (int)mh$.invokeExact(i64In, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_FLOAT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI4FromR4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromR4(FLOAT fltIn, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromR4$descriptor() {
        return VarI4FromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromR4(FLOAT fltIn, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromR4$handle() {
        return VarI4FromR4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromR4(FLOAT fltIn, LONG *plOut)
     * }
     */
    public static MemorySegment VarI4FromR4$address() {
        return VarI4FromR4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromR4(FLOAT fltIn, LONG *plOut)
     * }
     */
    public static int VarI4FromR4(float fltIn, MemorySegment plOut) {
        var mh$ = VarI4FromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromR4", fltIn, plOut);
            }
            return (int)mh$.invokeExact(fltIn, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_DOUBLE,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI4FromR8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromR8(DOUBLE dblIn, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromR8$descriptor() {
        return VarI4FromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromR8(DOUBLE dblIn, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromR8$handle() {
        return VarI4FromR8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromR8(DOUBLE dblIn, LONG *plOut)
     * }
     */
    public static MemorySegment VarI4FromR8$address() {
        return VarI4FromR8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromR8(DOUBLE dblIn, LONG *plOut)
     * }
     */
    public static int VarI4FromR8(double dblIn, MemorySegment plOut) {
        var mh$ = VarI4FromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromR8", dblIn, plOut);
            }
            return (int)mh$.invokeExact(dblIn, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            tagCY.layout(),
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI4FromCy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromCy(CY cyIn, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromCy$descriptor() {
        return VarI4FromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromCy(CY cyIn, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromCy$handle() {
        return VarI4FromCy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromCy(CY cyIn, LONG *plOut)
     * }
     */
    public static MemorySegment VarI4FromCy$address() {
        return VarI4FromCy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromCy(CY cyIn, LONG *plOut)
     * }
     */
    public static int VarI4FromCy(MemorySegment cyIn, MemorySegment plOut) {
        var mh$ = VarI4FromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromCy", cyIn, plOut);
            }
            return (int)mh$.invokeExact(cyIn, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_DOUBLE,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI4FromDate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromDate(DATE dateIn, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromDate$descriptor() {
        return VarI4FromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromDate(DATE dateIn, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromDate$handle() {
        return VarI4FromDate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromDate(DATE dateIn, LONG *plOut)
     * }
     */
    public static MemorySegment VarI4FromDate$address() {
        return VarI4FromDate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromDate(DATE dateIn, LONG *plOut)
     * }
     */
    public static int VarI4FromDate(double dateIn, MemorySegment plOut) {
        var mh$ = VarI4FromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromDate", dateIn, plOut);
            }
            return (int)mh$.invokeExact(dateIn, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI4FromStr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromStr$descriptor() {
        return VarI4FromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromStr$handle() {
        return VarI4FromStr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, LONG *plOut)
     * }
     */
    public static MemorySegment VarI4FromStr$address() {
        return VarI4FromStr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, LONG *plOut)
     * }
     */
    public static int VarI4FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment plOut) {
        var mh$ = VarI4FromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromStr", strIn, lcid, dwFlags, plOut);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI4FromDisp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromDisp(IDispatch *pdispIn, LCID lcid, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromDisp$descriptor() {
        return VarI4FromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromDisp(IDispatch *pdispIn, LCID lcid, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromDisp$handle() {
        return VarI4FromDisp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromDisp(IDispatch *pdispIn, LCID lcid, LONG *plOut)
     * }
     */
    public static MemorySegment VarI4FromDisp$address() {
        return VarI4FromDisp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromDisp(IDispatch *pdispIn, LCID lcid, LONG *plOut)
     * }
     */
    public static int VarI4FromDisp(MemorySegment pdispIn, int lcid, MemorySegment plOut) {
        var mh$ = VarI4FromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromDisp", pdispIn, lcid, plOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI4FromBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromBool(VARIANT_BOOL boolIn, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromBool$descriptor() {
        return VarI4FromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromBool(VARIANT_BOOL boolIn, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromBool$handle() {
        return VarI4FromBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromBool(VARIANT_BOOL boolIn, LONG *plOut)
     * }
     */
    public static MemorySegment VarI4FromBool$address() {
        return VarI4FromBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromBool(VARIANT_BOOL boolIn, LONG *plOut)
     * }
     */
    public static int VarI4FromBool(short boolIn, MemorySegment plOut) {
        var mh$ = VarI4FromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromBool", boolIn, plOut);
            }
            return (int)mh$.invokeExact(boolIn, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_CHAR,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI4FromI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromI1(CHAR cIn, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromI1$descriptor() {
        return VarI4FromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromI1(CHAR cIn, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromI1$handle() {
        return VarI4FromI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromI1(CHAR cIn, LONG *plOut)
     * }
     */
    public static MemorySegment VarI4FromI1$address() {
        return VarI4FromI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromI1(CHAR cIn, LONG *plOut)
     * }
     */
    public static int VarI4FromI1(byte cIn, MemorySegment plOut) {
        var mh$ = VarI4FromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromI1", cIn, plOut);
            }
            return (int)mh$.invokeExact(cIn, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI4FromUI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI2(USHORT uiIn, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromUI2$descriptor() {
        return VarI4FromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI2(USHORT uiIn, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromUI2$handle() {
        return VarI4FromUI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI2(USHORT uiIn, LONG *plOut)
     * }
     */
    public static MemorySegment VarI4FromUI2$address() {
        return VarI4FromUI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI2(USHORT uiIn, LONG *plOut)
     * }
     */
    public static int VarI4FromUI2(short uiIn, MemorySegment plOut) {
        var mh$ = VarI4FromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromUI2", uiIn, plOut);
            }
            return (int)mh$.invokeExact(uiIn, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI4FromUI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI4(ULONG ulIn, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromUI4$descriptor() {
        return VarI4FromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI4(ULONG ulIn, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromUI4$handle() {
        return VarI4FromUI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI4(ULONG ulIn, LONG *plOut)
     * }
     */
    public static MemorySegment VarI4FromUI4$address() {
        return VarI4FromUI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI4(ULONG ulIn, LONG *plOut)
     * }
     */
    public static int VarI4FromUI4(int ulIn, MemorySegment plOut) {
        var mh$ = VarI4FromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromUI4", ulIn, plOut);
            }
            return (int)mh$.invokeExact(ulIn, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI4FromUI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI8(ULONG64 ui64In, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromUI8$descriptor() {
        return VarI4FromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI8(ULONG64 ui64In, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromUI8$handle() {
        return VarI4FromUI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI8(ULONG64 ui64In, LONG *plOut)
     * }
     */
    public static MemorySegment VarI4FromUI8$address() {
        return VarI4FromUI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI8(ULONG64 ui64In, LONG *plOut)
     * }
     */
    public static int VarI4FromUI8(long ui64In, MemorySegment plOut) {
        var mh$ = VarI4FromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromUI8", ui64In, plOut);
            }
            return (int)mh$.invokeExact(ui64In, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI4FromDec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromDec(const DECIMAL *pdecIn, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromDec$descriptor() {
        return VarI4FromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromDec(const DECIMAL *pdecIn, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromDec$handle() {
        return VarI4FromDec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromDec(const DECIMAL *pdecIn, LONG *plOut)
     * }
     */
    public static MemorySegment VarI4FromDec$address() {
        return VarI4FromDec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromDec(const DECIMAL *pdecIn, LONG *plOut)
     * }
     */
    public static int VarI4FromDec(MemorySegment pdecIn, MemorySegment plOut) {
        var mh$ = VarI4FromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromDec", pdecIn, plOut);
            }
            return (int)mh$.invokeExact(pdecIn, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_CHAR,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI8FromUI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI1(BYTE bIn, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromUI1$descriptor() {
        return VarI8FromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI1(BYTE bIn, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromUI1$handle() {
        return VarI8FromUI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI1(BYTE bIn, LONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarI8FromUI1$address() {
        return VarI8FromUI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI1(BYTE bIn, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromUI1(byte bIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromUI1", bIn, pi64Out);
            }
            return (int)mh$.invokeExact(bIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI8FromI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromI2(SHORT sIn, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromI2$descriptor() {
        return VarI8FromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromI2(SHORT sIn, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromI2$handle() {
        return VarI8FromI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromI2(SHORT sIn, LONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarI8FromI2$address() {
        return VarI8FromI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromI2(SHORT sIn, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromI2(short sIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromI2", sIn, pi64Out);
            }
            return (int)mh$.invokeExact(sIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_FLOAT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI8FromR4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromR4(FLOAT fltIn, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromR4$descriptor() {
        return VarI8FromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromR4(FLOAT fltIn, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromR4$handle() {
        return VarI8FromR4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromR4(FLOAT fltIn, LONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarI8FromR4$address() {
        return VarI8FromR4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromR4(FLOAT fltIn, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromR4(float fltIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromR4", fltIn, pi64Out);
            }
            return (int)mh$.invokeExact(fltIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_DOUBLE,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI8FromR8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromR8(DOUBLE dblIn, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromR8$descriptor() {
        return VarI8FromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromR8(DOUBLE dblIn, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromR8$handle() {
        return VarI8FromR8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromR8(DOUBLE dblIn, LONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarI8FromR8$address() {
        return VarI8FromR8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromR8(DOUBLE dblIn, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromR8(double dblIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromR8", dblIn, pi64Out);
            }
            return (int)mh$.invokeExact(dblIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            tagCY.layout(),
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI8FromCy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromCy(CY cyIn, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromCy$descriptor() {
        return VarI8FromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromCy(CY cyIn, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromCy$handle() {
        return VarI8FromCy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromCy(CY cyIn, LONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarI8FromCy$address() {
        return VarI8FromCy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromCy(CY cyIn, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromCy(MemorySegment cyIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromCy", cyIn, pi64Out);
            }
            return (int)mh$.invokeExact(cyIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_DOUBLE,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI8FromDate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromDate(DATE dateIn, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromDate$descriptor() {
        return VarI8FromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromDate(DATE dateIn, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromDate$handle() {
        return VarI8FromDate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromDate(DATE dateIn, LONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarI8FromDate$address() {
        return VarI8FromDate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromDate(DATE dateIn, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromDate(double dateIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromDate", dateIn, pi64Out);
            }
            return (int)mh$.invokeExact(dateIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI8FromStr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromStr$descriptor() {
        return VarI8FromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromStr$handle() {
        return VarI8FromStr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, LONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarI8FromStr$address() {
        return VarI8FromStr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pi64Out) {
        var mh$ = VarI8FromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromStr", strIn, lcid, dwFlags, pi64Out);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI8FromDisp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromDisp(IDispatch *pdispIn, LCID lcid, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromDisp$descriptor() {
        return VarI8FromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromDisp(IDispatch *pdispIn, LCID lcid, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromDisp$handle() {
        return VarI8FromDisp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromDisp(IDispatch *pdispIn, LCID lcid, LONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarI8FromDisp$address() {
        return VarI8FromDisp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromDisp(IDispatch *pdispIn, LCID lcid, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromDisp(MemorySegment pdispIn, int lcid, MemorySegment pi64Out) {
        var mh$ = VarI8FromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromDisp", pdispIn, lcid, pi64Out);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI8FromBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromBool(VARIANT_BOOL boolIn, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromBool$descriptor() {
        return VarI8FromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromBool(VARIANT_BOOL boolIn, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromBool$handle() {
        return VarI8FromBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromBool(VARIANT_BOOL boolIn, LONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarI8FromBool$address() {
        return VarI8FromBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromBool(VARIANT_BOOL boolIn, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromBool(short boolIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromBool", boolIn, pi64Out);
            }
            return (int)mh$.invokeExact(boolIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_CHAR,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI8FromI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromI1(CHAR cIn, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromI1$descriptor() {
        return VarI8FromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromI1(CHAR cIn, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromI1$handle() {
        return VarI8FromI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromI1(CHAR cIn, LONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarI8FromI1$address() {
        return VarI8FromI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromI1(CHAR cIn, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromI1(byte cIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromI1", cIn, pi64Out);
            }
            return (int)mh$.invokeExact(cIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI8FromUI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI2(USHORT uiIn, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromUI2$descriptor() {
        return VarI8FromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI2(USHORT uiIn, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromUI2$handle() {
        return VarI8FromUI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI2(USHORT uiIn, LONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarI8FromUI2$address() {
        return VarI8FromUI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI2(USHORT uiIn, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromUI2(short uiIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromUI2", uiIn, pi64Out);
            }
            return (int)mh$.invokeExact(uiIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI8FromUI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI4(ULONG ulIn, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromUI4$descriptor() {
        return VarI8FromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI4(ULONG ulIn, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromUI4$handle() {
        return VarI8FromUI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI4(ULONG ulIn, LONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarI8FromUI4$address() {
        return VarI8FromUI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI4(ULONG ulIn, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromUI4(int ulIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromUI4", ulIn, pi64Out);
            }
            return (int)mh$.invokeExact(ulIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI8FromUI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI8(ULONG64 ui64In, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromUI8$descriptor() {
        return VarI8FromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI8(ULONG64 ui64In, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromUI8$handle() {
        return VarI8FromUI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI8(ULONG64 ui64In, LONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarI8FromUI8$address() {
        return VarI8FromUI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI8(ULONG64 ui64In, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromUI8(long ui64In, MemorySegment pi64Out) {
        var mh$ = VarI8FromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromUI8", ui64In, pi64Out);
            }
            return (int)mh$.invokeExact(ui64In, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI8FromDec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromDec(const DECIMAL *pdecIn, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromDec$descriptor() {
        return VarI8FromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromDec(const DECIMAL *pdecIn, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromDec$handle() {
        return VarI8FromDec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromDec(const DECIMAL *pdecIn, LONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarI8FromDec$address() {
        return VarI8FromDec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromDec(const DECIMAL *pdecIn, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromDec(MemorySegment pdecIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromDec", pdecIn, pi64Out);
            }
            return (int)mh$.invokeExact(pdecIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_CHAR,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarR4FromUI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI1(BYTE bIn, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromUI1$descriptor() {
        return VarR4FromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI1(BYTE bIn, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromUI1$handle() {
        return VarR4FromUI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI1(BYTE bIn, FLOAT *pfltOut)
     * }
     */
    public static MemorySegment VarR4FromUI1$address() {
        return VarR4FromUI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI1(BYTE bIn, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromUI1(byte bIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromUI1", bIn, pfltOut);
            }
            return (int)mh$.invokeExact(bIn, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarR4FromI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI2(SHORT sIn, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromI2$descriptor() {
        return VarR4FromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI2(SHORT sIn, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromI2$handle() {
        return VarR4FromI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI2(SHORT sIn, FLOAT *pfltOut)
     * }
     */
    public static MemorySegment VarR4FromI2$address() {
        return VarR4FromI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI2(SHORT sIn, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromI2(short sIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromI2", sIn, pfltOut);
            }
            return (int)mh$.invokeExact(sIn, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarR4FromI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI4(LONG lIn, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromI4$descriptor() {
        return VarR4FromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI4(LONG lIn, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromI4$handle() {
        return VarR4FromI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI4(LONG lIn, FLOAT *pfltOut)
     * }
     */
    public static MemorySegment VarR4FromI4$address() {
        return VarR4FromI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI4(LONG lIn, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromI4(int lIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromI4", lIn, pfltOut);
            }
            return (int)mh$.invokeExact(lIn, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarR4FromI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI8(LONG64 i64In, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromI8$descriptor() {
        return VarR4FromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI8(LONG64 i64In, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromI8$handle() {
        return VarR4FromI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI8(LONG64 i64In, FLOAT *pfltOut)
     * }
     */
    public static MemorySegment VarR4FromI8$address() {
        return VarR4FromI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI8(LONG64 i64In, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromI8(long i64In, MemorySegment pfltOut) {
        var mh$ = VarR4FromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromI8", i64In, pfltOut);
            }
            return (int)mh$.invokeExact(i64In, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_DOUBLE,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarR4FromR8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromR8(DOUBLE dblIn, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromR8$descriptor() {
        return VarR4FromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromR8(DOUBLE dblIn, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromR8$handle() {
        return VarR4FromR8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromR8(DOUBLE dblIn, FLOAT *pfltOut)
     * }
     */
    public static MemorySegment VarR4FromR8$address() {
        return VarR4FromR8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromR8(DOUBLE dblIn, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromR8(double dblIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromR8", dblIn, pfltOut);
            }
            return (int)mh$.invokeExact(dblIn, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            tagCY.layout(),
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarR4FromCy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromCy(CY cyIn, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromCy$descriptor() {
        return VarR4FromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromCy(CY cyIn, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromCy$handle() {
        return VarR4FromCy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromCy(CY cyIn, FLOAT *pfltOut)
     * }
     */
    public static MemorySegment VarR4FromCy$address() {
        return VarR4FromCy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromCy(CY cyIn, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromCy(MemorySegment cyIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromCy", cyIn, pfltOut);
            }
            return (int)mh$.invokeExact(cyIn, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_DOUBLE,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarR4FromDate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromDate(DATE dateIn, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromDate$descriptor() {
        return VarR4FromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromDate(DATE dateIn, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromDate$handle() {
        return VarR4FromDate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromDate(DATE dateIn, FLOAT *pfltOut)
     * }
     */
    public static MemorySegment VarR4FromDate$address() {
        return VarR4FromDate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromDate(DATE dateIn, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromDate(double dateIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromDate", dateIn, pfltOut);
            }
            return (int)mh$.invokeExact(dateIn, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarR4FromStr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromStr$descriptor() {
        return VarR4FromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromStr$handle() {
        return VarR4FromStr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, FLOAT *pfltOut)
     * }
     */
    public static MemorySegment VarR4FromStr$address() {
        return VarR4FromStr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pfltOut) {
        var mh$ = VarR4FromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromStr", strIn, lcid, dwFlags, pfltOut);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarR4FromDisp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromDisp(IDispatch *pdispIn, LCID lcid, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromDisp$descriptor() {
        return VarR4FromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromDisp(IDispatch *pdispIn, LCID lcid, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromDisp$handle() {
        return VarR4FromDisp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromDisp(IDispatch *pdispIn, LCID lcid, FLOAT *pfltOut)
     * }
     */
    public static MemorySegment VarR4FromDisp$address() {
        return VarR4FromDisp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromDisp(IDispatch *pdispIn, LCID lcid, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromDisp(MemorySegment pdispIn, int lcid, MemorySegment pfltOut) {
        var mh$ = VarR4FromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromDisp", pdispIn, lcid, pfltOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarR4FromBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromBool(VARIANT_BOOL boolIn, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromBool$descriptor() {
        return VarR4FromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromBool(VARIANT_BOOL boolIn, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromBool$handle() {
        return VarR4FromBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromBool(VARIANT_BOOL boolIn, FLOAT *pfltOut)
     * }
     */
    public static MemorySegment VarR4FromBool$address() {
        return VarR4FromBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromBool(VARIANT_BOOL boolIn, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromBool(short boolIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromBool", boolIn, pfltOut);
            }
            return (int)mh$.invokeExact(boolIn, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_CHAR,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarR4FromI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI1(CHAR cIn, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromI1$descriptor() {
        return VarR4FromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI1(CHAR cIn, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromI1$handle() {
        return VarR4FromI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI1(CHAR cIn, FLOAT *pfltOut)
     * }
     */
    public static MemorySegment VarR4FromI1$address() {
        return VarR4FromI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI1(CHAR cIn, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromI1(byte cIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromI1", cIn, pfltOut);
            }
            return (int)mh$.invokeExact(cIn, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarR4FromUI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI2(USHORT uiIn, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromUI2$descriptor() {
        return VarR4FromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI2(USHORT uiIn, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromUI2$handle() {
        return VarR4FromUI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI2(USHORT uiIn, FLOAT *pfltOut)
     * }
     */
    public static MemorySegment VarR4FromUI2$address() {
        return VarR4FromUI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI2(USHORT uiIn, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromUI2(short uiIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromUI2", uiIn, pfltOut);
            }
            return (int)mh$.invokeExact(uiIn, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarR4FromUI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI4(ULONG ulIn, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromUI4$descriptor() {
        return VarR4FromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI4(ULONG ulIn, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromUI4$handle() {
        return VarR4FromUI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI4(ULONG ulIn, FLOAT *pfltOut)
     * }
     */
    public static MemorySegment VarR4FromUI4$address() {
        return VarR4FromUI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI4(ULONG ulIn, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromUI4(int ulIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromUI4", ulIn, pfltOut);
            }
            return (int)mh$.invokeExact(ulIn, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarR4FromUI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI8(ULONG64 ui64In, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromUI8$descriptor() {
        return VarR4FromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI8(ULONG64 ui64In, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromUI8$handle() {
        return VarR4FromUI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI8(ULONG64 ui64In, FLOAT *pfltOut)
     * }
     */
    public static MemorySegment VarR4FromUI8$address() {
        return VarR4FromUI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI8(ULONG64 ui64In, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromUI8(long ui64In, MemorySegment pfltOut) {
        var mh$ = VarR4FromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromUI8", ui64In, pfltOut);
            }
            return (int)mh$.invokeExact(ui64In, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarR4FromDec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromDec(const DECIMAL *pdecIn, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromDec$descriptor() {
        return VarR4FromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromDec(const DECIMAL *pdecIn, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromDec$handle() {
        return VarR4FromDec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromDec(const DECIMAL *pdecIn, FLOAT *pfltOut)
     * }
     */
    public static MemorySegment VarR4FromDec$address() {
        return VarR4FromDec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromDec(const DECIMAL *pdecIn, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromDec(MemorySegment pdecIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromDec", pdecIn, pfltOut);
            }
            return (int)mh$.invokeExact(pdecIn, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_CHAR,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarR8FromUI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI1(BYTE bIn, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromUI1$descriptor() {
        return VarR8FromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI1(BYTE bIn, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromUI1$handle() {
        return VarR8FromUI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI1(BYTE bIn, DOUBLE *pdblOut)
     * }
     */
    public static MemorySegment VarR8FromUI1$address() {
        return VarR8FromUI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI1(BYTE bIn, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromUI1(byte bIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromUI1", bIn, pdblOut);
            }
            return (int)mh$.invokeExact(bIn, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarR8FromI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI2(SHORT sIn, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromI2$descriptor() {
        return VarR8FromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI2(SHORT sIn, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromI2$handle() {
        return VarR8FromI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI2(SHORT sIn, DOUBLE *pdblOut)
     * }
     */
    public static MemorySegment VarR8FromI2$address() {
        return VarR8FromI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI2(SHORT sIn, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromI2(short sIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromI2", sIn, pdblOut);
            }
            return (int)mh$.invokeExact(sIn, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarR8FromI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI4(LONG lIn, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromI4$descriptor() {
        return VarR8FromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI4(LONG lIn, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromI4$handle() {
        return VarR8FromI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI4(LONG lIn, DOUBLE *pdblOut)
     * }
     */
    public static MemorySegment VarR8FromI4$address() {
        return VarR8FromI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI4(LONG lIn, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromI4(int lIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromI4", lIn, pdblOut);
            }
            return (int)mh$.invokeExact(lIn, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarR8FromI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI8(LONG64 i64In, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromI8$descriptor() {
        return VarR8FromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI8(LONG64 i64In, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromI8$handle() {
        return VarR8FromI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI8(LONG64 i64In, DOUBLE *pdblOut)
     * }
     */
    public static MemorySegment VarR8FromI8$address() {
        return VarR8FromI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI8(LONG64 i64In, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromI8(long i64In, MemorySegment pdblOut) {
        var mh$ = VarR8FromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromI8", i64In, pdblOut);
            }
            return (int)mh$.invokeExact(i64In, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_FLOAT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarR8FromR4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromR4(FLOAT fltIn, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromR4$descriptor() {
        return VarR8FromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromR4(FLOAT fltIn, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromR4$handle() {
        return VarR8FromR4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromR4(FLOAT fltIn, DOUBLE *pdblOut)
     * }
     */
    public static MemorySegment VarR8FromR4$address() {
        return VarR8FromR4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromR4(FLOAT fltIn, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromR4(float fltIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromR4", fltIn, pdblOut);
            }
            return (int)mh$.invokeExact(fltIn, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            tagCY.layout(),
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarR8FromCy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromCy(CY cyIn, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromCy$descriptor() {
        return VarR8FromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromCy(CY cyIn, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromCy$handle() {
        return VarR8FromCy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromCy(CY cyIn, DOUBLE *pdblOut)
     * }
     */
    public static MemorySegment VarR8FromCy$address() {
        return VarR8FromCy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromCy(CY cyIn, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromCy(MemorySegment cyIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromCy", cyIn, pdblOut);
            }
            return (int)mh$.invokeExact(cyIn, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_DOUBLE,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarR8FromDate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromDate(DATE dateIn, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromDate$descriptor() {
        return VarR8FromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromDate(DATE dateIn, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromDate$handle() {
        return VarR8FromDate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromDate(DATE dateIn, DOUBLE *pdblOut)
     * }
     */
    public static MemorySegment VarR8FromDate$address() {
        return VarR8FromDate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromDate(DATE dateIn, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromDate(double dateIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromDate", dateIn, pdblOut);
            }
            return (int)mh$.invokeExact(dateIn, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarR8FromStr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromStr$descriptor() {
        return VarR8FromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromStr$handle() {
        return VarR8FromStr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DOUBLE *pdblOut)
     * }
     */
    public static MemorySegment VarR8FromStr$address() {
        return VarR8FromStr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pdblOut) {
        var mh$ = VarR8FromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromStr", strIn, lcid, dwFlags, pdblOut);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarR8FromDisp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromDisp(IDispatch *pdispIn, LCID lcid, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromDisp$descriptor() {
        return VarR8FromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromDisp(IDispatch *pdispIn, LCID lcid, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromDisp$handle() {
        return VarR8FromDisp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromDisp(IDispatch *pdispIn, LCID lcid, DOUBLE *pdblOut)
     * }
     */
    public static MemorySegment VarR8FromDisp$address() {
        return VarR8FromDisp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromDisp(IDispatch *pdispIn, LCID lcid, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromDisp(MemorySegment pdispIn, int lcid, MemorySegment pdblOut) {
        var mh$ = VarR8FromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromDisp", pdispIn, lcid, pdblOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarR8FromBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromBool(VARIANT_BOOL boolIn, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromBool$descriptor() {
        return VarR8FromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromBool(VARIANT_BOOL boolIn, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromBool$handle() {
        return VarR8FromBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromBool(VARIANT_BOOL boolIn, DOUBLE *pdblOut)
     * }
     */
    public static MemorySegment VarR8FromBool$address() {
        return VarR8FromBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromBool(VARIANT_BOOL boolIn, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromBool(short boolIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromBool", boolIn, pdblOut);
            }
            return (int)mh$.invokeExact(boolIn, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_CHAR,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarR8FromI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI1(CHAR cIn, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromI1$descriptor() {
        return VarR8FromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI1(CHAR cIn, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromI1$handle() {
        return VarR8FromI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI1(CHAR cIn, DOUBLE *pdblOut)
     * }
     */
    public static MemorySegment VarR8FromI1$address() {
        return VarR8FromI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI1(CHAR cIn, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromI1(byte cIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromI1", cIn, pdblOut);
            }
            return (int)mh$.invokeExact(cIn, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarR8FromUI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI2(USHORT uiIn, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromUI2$descriptor() {
        return VarR8FromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI2(USHORT uiIn, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromUI2$handle() {
        return VarR8FromUI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI2(USHORT uiIn, DOUBLE *pdblOut)
     * }
     */
    public static MemorySegment VarR8FromUI2$address() {
        return VarR8FromUI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI2(USHORT uiIn, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromUI2(short uiIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromUI2", uiIn, pdblOut);
            }
            return (int)mh$.invokeExact(uiIn, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarR8FromUI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI4(ULONG ulIn, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromUI4$descriptor() {
        return VarR8FromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI4(ULONG ulIn, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromUI4$handle() {
        return VarR8FromUI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI4(ULONG ulIn, DOUBLE *pdblOut)
     * }
     */
    public static MemorySegment VarR8FromUI4$address() {
        return VarR8FromUI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI4(ULONG ulIn, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromUI4(int ulIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromUI4", ulIn, pdblOut);
            }
            return (int)mh$.invokeExact(ulIn, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarR8FromUI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI8(ULONG64 ui64In, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromUI8$descriptor() {
        return VarR8FromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI8(ULONG64 ui64In, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromUI8$handle() {
        return VarR8FromUI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI8(ULONG64 ui64In, DOUBLE *pdblOut)
     * }
     */
    public static MemorySegment VarR8FromUI8$address() {
        return VarR8FromUI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI8(ULONG64 ui64In, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromUI8(long ui64In, MemorySegment pdblOut) {
        var mh$ = VarR8FromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromUI8", ui64In, pdblOut);
            }
            return (int)mh$.invokeExact(ui64In, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarR8FromDec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromDec(const DECIMAL *pdecIn, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromDec$descriptor() {
        return VarR8FromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromDec(const DECIMAL *pdecIn, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromDec$handle() {
        return VarR8FromDec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromDec(const DECIMAL *pdecIn, DOUBLE *pdblOut)
     * }
     */
    public static MemorySegment VarR8FromDec$address() {
        return VarR8FromDec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromDec(const DECIMAL *pdecIn, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromDec(MemorySegment pdecIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromDec", pdecIn, pdblOut);
            }
            return (int)mh$.invokeExact(pdecIn, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_CHAR,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDateFromUI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI1(BYTE bIn, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromUI1$descriptor() {
        return VarDateFromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI1(BYTE bIn, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromUI1$handle() {
        return VarDateFromUI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI1(BYTE bIn, DATE *pdateOut)
     * }
     */
    public static MemorySegment VarDateFromUI1$address() {
        return VarDateFromUI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI1(BYTE bIn, DATE *pdateOut)
     * }
     */
    public static int VarDateFromUI1(byte bIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromUI1", bIn, pdateOut);
            }
            return (int)mh$.invokeExact(bIn, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDateFromI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI2(SHORT sIn, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromI2$descriptor() {
        return VarDateFromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI2(SHORT sIn, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromI2$handle() {
        return VarDateFromI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI2(SHORT sIn, DATE *pdateOut)
     * }
     */
    public static MemorySegment VarDateFromI2$address() {
        return VarDateFromI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI2(SHORT sIn, DATE *pdateOut)
     * }
     */
    public static int VarDateFromI2(short sIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromI2", sIn, pdateOut);
            }
            return (int)mh$.invokeExact(sIn, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDateFromI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI4(LONG lIn, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromI4$descriptor() {
        return VarDateFromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI4(LONG lIn, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromI4$handle() {
        return VarDateFromI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI4(LONG lIn, DATE *pdateOut)
     * }
     */
    public static MemorySegment VarDateFromI4$address() {
        return VarDateFromI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI4(LONG lIn, DATE *pdateOut)
     * }
     */
    public static int VarDateFromI4(int lIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromI4", lIn, pdateOut);
            }
            return (int)mh$.invokeExact(lIn, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDateFromI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI8(LONG64 i64In, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromI8$descriptor() {
        return VarDateFromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI8(LONG64 i64In, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromI8$handle() {
        return VarDateFromI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI8(LONG64 i64In, DATE *pdateOut)
     * }
     */
    public static MemorySegment VarDateFromI8$address() {
        return VarDateFromI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI8(LONG64 i64In, DATE *pdateOut)
     * }
     */
    public static int VarDateFromI8(long i64In, MemorySegment pdateOut) {
        var mh$ = VarDateFromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromI8", i64In, pdateOut);
            }
            return (int)mh$.invokeExact(i64In, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_FLOAT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDateFromR4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromR4(FLOAT fltIn, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromR4$descriptor() {
        return VarDateFromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromR4(FLOAT fltIn, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromR4$handle() {
        return VarDateFromR4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromR4(FLOAT fltIn, DATE *pdateOut)
     * }
     */
    public static MemorySegment VarDateFromR4$address() {
        return VarDateFromR4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromR4(FLOAT fltIn, DATE *pdateOut)
     * }
     */
    public static int VarDateFromR4(float fltIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromR4", fltIn, pdateOut);
            }
            return (int)mh$.invokeExact(fltIn, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_DOUBLE,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDateFromR8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromR8(DOUBLE dblIn, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromR8$descriptor() {
        return VarDateFromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromR8(DOUBLE dblIn, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromR8$handle() {
        return VarDateFromR8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromR8(DOUBLE dblIn, DATE *pdateOut)
     * }
     */
    public static MemorySegment VarDateFromR8$address() {
        return VarDateFromR8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromR8(DOUBLE dblIn, DATE *pdateOut)
     * }
     */
    public static int VarDateFromR8(double dblIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromR8", dblIn, pdateOut);
            }
            return (int)mh$.invokeExact(dblIn, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            tagCY.layout(),
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDateFromCy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromCy(CY cyIn, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromCy$descriptor() {
        return VarDateFromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromCy(CY cyIn, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromCy$handle() {
        return VarDateFromCy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromCy(CY cyIn, DATE *pdateOut)
     * }
     */
    public static MemorySegment VarDateFromCy$address() {
        return VarDateFromCy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromCy(CY cyIn, DATE *pdateOut)
     * }
     */
    public static int VarDateFromCy(MemorySegment cyIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromCy", cyIn, pdateOut);
            }
            return (int)mh$.invokeExact(cyIn, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDateFromStr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromStr$descriptor() {
        return VarDateFromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromStr$handle() {
        return VarDateFromStr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DATE *pdateOut)
     * }
     */
    public static MemorySegment VarDateFromStr$address() {
        return VarDateFromStr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DATE *pdateOut)
     * }
     */
    public static int VarDateFromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pdateOut) {
        var mh$ = VarDateFromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromStr", strIn, lcid, dwFlags, pdateOut);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDateFromDisp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromDisp(IDispatch *pdispIn, LCID lcid, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromDisp$descriptor() {
        return VarDateFromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromDisp(IDispatch *pdispIn, LCID lcid, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromDisp$handle() {
        return VarDateFromDisp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromDisp(IDispatch *pdispIn, LCID lcid, DATE *pdateOut)
     * }
     */
    public static MemorySegment VarDateFromDisp$address() {
        return VarDateFromDisp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromDisp(IDispatch *pdispIn, LCID lcid, DATE *pdateOut)
     * }
     */
    public static int VarDateFromDisp(MemorySegment pdispIn, int lcid, MemorySegment pdateOut) {
        var mh$ = VarDateFromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromDisp", pdispIn, lcid, pdateOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDateFromBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromBool(VARIANT_BOOL boolIn, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromBool$descriptor() {
        return VarDateFromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromBool(VARIANT_BOOL boolIn, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromBool$handle() {
        return VarDateFromBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromBool(VARIANT_BOOL boolIn, DATE *pdateOut)
     * }
     */
    public static MemorySegment VarDateFromBool$address() {
        return VarDateFromBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromBool(VARIANT_BOOL boolIn, DATE *pdateOut)
     * }
     */
    public static int VarDateFromBool(short boolIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromBool", boolIn, pdateOut);
            }
            return (int)mh$.invokeExact(boolIn, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_CHAR,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDateFromI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI1(CHAR cIn, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromI1$descriptor() {
        return VarDateFromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI1(CHAR cIn, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromI1$handle() {
        return VarDateFromI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI1(CHAR cIn, DATE *pdateOut)
     * }
     */
    public static MemorySegment VarDateFromI1$address() {
        return VarDateFromI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI1(CHAR cIn, DATE *pdateOut)
     * }
     */
    public static int VarDateFromI1(byte cIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromI1", cIn, pdateOut);
            }
            return (int)mh$.invokeExact(cIn, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDateFromUI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI2(USHORT uiIn, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromUI2$descriptor() {
        return VarDateFromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI2(USHORT uiIn, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromUI2$handle() {
        return VarDateFromUI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI2(USHORT uiIn, DATE *pdateOut)
     * }
     */
    public static MemorySegment VarDateFromUI2$address() {
        return VarDateFromUI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI2(USHORT uiIn, DATE *pdateOut)
     * }
     */
    public static int VarDateFromUI2(short uiIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromUI2", uiIn, pdateOut);
            }
            return (int)mh$.invokeExact(uiIn, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDateFromUI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI4(ULONG ulIn, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromUI4$descriptor() {
        return VarDateFromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI4(ULONG ulIn, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromUI4$handle() {
        return VarDateFromUI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI4(ULONG ulIn, DATE *pdateOut)
     * }
     */
    public static MemorySegment VarDateFromUI4$address() {
        return VarDateFromUI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI4(ULONG ulIn, DATE *pdateOut)
     * }
     */
    public static int VarDateFromUI4(int ulIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromUI4", ulIn, pdateOut);
            }
            return (int)mh$.invokeExact(ulIn, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDateFromUI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI8(ULONG64 ui64In, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromUI8$descriptor() {
        return VarDateFromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI8(ULONG64 ui64In, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromUI8$handle() {
        return VarDateFromUI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI8(ULONG64 ui64In, DATE *pdateOut)
     * }
     */
    public static MemorySegment VarDateFromUI8$address() {
        return VarDateFromUI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI8(ULONG64 ui64In, DATE *pdateOut)
     * }
     */
    public static int VarDateFromUI8(long ui64In, MemorySegment pdateOut) {
        var mh$ = VarDateFromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromUI8", ui64In, pdateOut);
            }
            return (int)mh$.invokeExact(ui64In, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDateFromDec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromDec(const DECIMAL *pdecIn, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromDec$descriptor() {
        return VarDateFromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromDec(const DECIMAL *pdecIn, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromDec$handle() {
        return VarDateFromDec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromDec(const DECIMAL *pdecIn, DATE *pdateOut)
     * }
     */
    public static MemorySegment VarDateFromDec$address() {
        return VarDateFromDec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromDec(const DECIMAL *pdecIn, DATE *pdateOut)
     * }
     */
    public static int VarDateFromDec(MemorySegment pdecIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromDec", pdecIn, pdateOut);
            }
            return (int)mh$.invokeExact(pdecIn, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_CHAR,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarCyFromUI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI1(BYTE bIn, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromUI1$descriptor() {
        return VarCyFromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI1(BYTE bIn, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromUI1$handle() {
        return VarCyFromUI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI1(BYTE bIn, CY *pcyOut)
     * }
     */
    public static MemorySegment VarCyFromUI1$address() {
        return VarCyFromUI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI1(BYTE bIn, CY *pcyOut)
     * }
     */
    public static int VarCyFromUI1(byte bIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromUI1", bIn, pcyOut);
            }
            return (int)mh$.invokeExact(bIn, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarCyFromI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI2(SHORT sIn, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromI2$descriptor() {
        return VarCyFromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI2(SHORT sIn, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromI2$handle() {
        return VarCyFromI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI2(SHORT sIn, CY *pcyOut)
     * }
     */
    public static MemorySegment VarCyFromI2$address() {
        return VarCyFromI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI2(SHORT sIn, CY *pcyOut)
     * }
     */
    public static int VarCyFromI2(short sIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromI2", sIn, pcyOut);
            }
            return (int)mh$.invokeExact(sIn, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarCyFromI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI4(LONG lIn, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromI4$descriptor() {
        return VarCyFromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI4(LONG lIn, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromI4$handle() {
        return VarCyFromI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI4(LONG lIn, CY *pcyOut)
     * }
     */
    public static MemorySegment VarCyFromI4$address() {
        return VarCyFromI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI4(LONG lIn, CY *pcyOut)
     * }
     */
    public static int VarCyFromI4(int lIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromI4", lIn, pcyOut);
            }
            return (int)mh$.invokeExact(lIn, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarCyFromI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI8(LONG64 i64In, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromI8$descriptor() {
        return VarCyFromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI8(LONG64 i64In, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromI8$handle() {
        return VarCyFromI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI8(LONG64 i64In, CY *pcyOut)
     * }
     */
    public static MemorySegment VarCyFromI8$address() {
        return VarCyFromI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI8(LONG64 i64In, CY *pcyOut)
     * }
     */
    public static int VarCyFromI8(long i64In, MemorySegment pcyOut) {
        var mh$ = VarCyFromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromI8", i64In, pcyOut);
            }
            return (int)mh$.invokeExact(i64In, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_FLOAT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarCyFromR4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromR4(FLOAT fltIn, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromR4$descriptor() {
        return VarCyFromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromR4(FLOAT fltIn, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromR4$handle() {
        return VarCyFromR4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromR4(FLOAT fltIn, CY *pcyOut)
     * }
     */
    public static MemorySegment VarCyFromR4$address() {
        return VarCyFromR4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromR4(FLOAT fltIn, CY *pcyOut)
     * }
     */
    public static int VarCyFromR4(float fltIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromR4", fltIn, pcyOut);
            }
            return (int)mh$.invokeExact(fltIn, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_DOUBLE,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarCyFromR8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromR8(DOUBLE dblIn, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromR8$descriptor() {
        return VarCyFromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromR8(DOUBLE dblIn, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromR8$handle() {
        return VarCyFromR8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromR8(DOUBLE dblIn, CY *pcyOut)
     * }
     */
    public static MemorySegment VarCyFromR8$address() {
        return VarCyFromR8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromR8(DOUBLE dblIn, CY *pcyOut)
     * }
     */
    public static int VarCyFromR8(double dblIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromR8", dblIn, pcyOut);
            }
            return (int)mh$.invokeExact(dblIn, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_DOUBLE,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarCyFromDate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromDate(DATE dateIn, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromDate$descriptor() {
        return VarCyFromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromDate(DATE dateIn, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromDate$handle() {
        return VarCyFromDate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromDate(DATE dateIn, CY *pcyOut)
     * }
     */
    public static MemorySegment VarCyFromDate$address() {
        return VarCyFromDate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromDate(DATE dateIn, CY *pcyOut)
     * }
     */
    public static int VarCyFromDate(double dateIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromDate", dateIn, pcyOut);
            }
            return (int)mh$.invokeExact(dateIn, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarCyFromStr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromStr$descriptor() {
        return VarCyFromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromStr$handle() {
        return VarCyFromStr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, CY *pcyOut)
     * }
     */
    public static MemorySegment VarCyFromStr$address() {
        return VarCyFromStr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, CY *pcyOut)
     * }
     */
    public static int VarCyFromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pcyOut) {
        var mh$ = VarCyFromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromStr", strIn, lcid, dwFlags, pcyOut);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarCyFromDisp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromDisp(IDispatch *pdispIn, LCID lcid, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromDisp$descriptor() {
        return VarCyFromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromDisp(IDispatch *pdispIn, LCID lcid, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromDisp$handle() {
        return VarCyFromDisp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromDisp(IDispatch *pdispIn, LCID lcid, CY *pcyOut)
     * }
     */
    public static MemorySegment VarCyFromDisp$address() {
        return VarCyFromDisp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromDisp(IDispatch *pdispIn, LCID lcid, CY *pcyOut)
     * }
     */
    public static int VarCyFromDisp(MemorySegment pdispIn, int lcid, MemorySegment pcyOut) {
        var mh$ = VarCyFromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromDisp", pdispIn, lcid, pcyOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarCyFromBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromBool(VARIANT_BOOL boolIn, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromBool$descriptor() {
        return VarCyFromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromBool(VARIANT_BOOL boolIn, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromBool$handle() {
        return VarCyFromBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromBool(VARIANT_BOOL boolIn, CY *pcyOut)
     * }
     */
    public static MemorySegment VarCyFromBool$address() {
        return VarCyFromBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromBool(VARIANT_BOOL boolIn, CY *pcyOut)
     * }
     */
    public static int VarCyFromBool(short boolIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromBool", boolIn, pcyOut);
            }
            return (int)mh$.invokeExact(boolIn, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_CHAR,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarCyFromI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI1(CHAR cIn, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromI1$descriptor() {
        return VarCyFromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI1(CHAR cIn, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromI1$handle() {
        return VarCyFromI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI1(CHAR cIn, CY *pcyOut)
     * }
     */
    public static MemorySegment VarCyFromI1$address() {
        return VarCyFromI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI1(CHAR cIn, CY *pcyOut)
     * }
     */
    public static int VarCyFromI1(byte cIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromI1", cIn, pcyOut);
            }
            return (int)mh$.invokeExact(cIn, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarCyFromUI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI2(USHORT uiIn, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromUI2$descriptor() {
        return VarCyFromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI2(USHORT uiIn, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromUI2$handle() {
        return VarCyFromUI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI2(USHORT uiIn, CY *pcyOut)
     * }
     */
    public static MemorySegment VarCyFromUI2$address() {
        return VarCyFromUI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI2(USHORT uiIn, CY *pcyOut)
     * }
     */
    public static int VarCyFromUI2(short uiIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromUI2", uiIn, pcyOut);
            }
            return (int)mh$.invokeExact(uiIn, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarCyFromUI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI4(ULONG ulIn, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromUI4$descriptor() {
        return VarCyFromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI4(ULONG ulIn, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromUI4$handle() {
        return VarCyFromUI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI4(ULONG ulIn, CY *pcyOut)
     * }
     */
    public static MemorySegment VarCyFromUI4$address() {
        return VarCyFromUI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI4(ULONG ulIn, CY *pcyOut)
     * }
     */
    public static int VarCyFromUI4(int ulIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromUI4", ulIn, pcyOut);
            }
            return (int)mh$.invokeExact(ulIn, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarCyFromUI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI8(ULONG64 ui64In, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromUI8$descriptor() {
        return VarCyFromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI8(ULONG64 ui64In, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromUI8$handle() {
        return VarCyFromUI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI8(ULONG64 ui64In, CY *pcyOut)
     * }
     */
    public static MemorySegment VarCyFromUI8$address() {
        return VarCyFromUI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI8(ULONG64 ui64In, CY *pcyOut)
     * }
     */
    public static int VarCyFromUI8(long ui64In, MemorySegment pcyOut) {
        var mh$ = VarCyFromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromUI8", ui64In, pcyOut);
            }
            return (int)mh$.invokeExact(ui64In, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarCyFromDec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromDec(const DECIMAL *pdecIn, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromDec$descriptor() {
        return VarCyFromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromDec(const DECIMAL *pdecIn, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromDec$handle() {
        return VarCyFromDec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromDec(const DECIMAL *pdecIn, CY *pcyOut)
     * }
     */
    public static MemorySegment VarCyFromDec$address() {
        return VarCyFromDec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromDec(const DECIMAL *pdecIn, CY *pcyOut)
     * }
     */
    public static int VarCyFromDec(MemorySegment pdecIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromDec", pdecIn, pcyOut);
            }
            return (int)mh$.invokeExact(pdecIn, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_CHAR,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarBstrFromUI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI1(BYTE bVal, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromUI1$descriptor() {
        return VarBstrFromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI1(BYTE bVal, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromUI1$handle() {
        return VarBstrFromUI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI1(BYTE bVal, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarBstrFromUI1$address() {
        return VarBstrFromUI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI1(BYTE bVal, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromUI1(byte bVal, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromUI1", bVal, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(bVal, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarBstrFromI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI2(SHORT iVal, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromI2$descriptor() {
        return VarBstrFromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI2(SHORT iVal, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromI2$handle() {
        return VarBstrFromI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI2(SHORT iVal, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarBstrFromI2$address() {
        return VarBstrFromI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI2(SHORT iVal, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromI2(short iVal, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromI2", iVal, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(iVal, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarBstrFromI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI4(LONG lIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromI4$descriptor() {
        return VarBstrFromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI4(LONG lIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromI4$handle() {
        return VarBstrFromI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI4(LONG lIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarBstrFromI4$address() {
        return VarBstrFromI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI4(LONG lIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromI4(int lIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromI4", lIn, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(lIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarBstrFromI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI8(LONG64 i64In, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromI8$descriptor() {
        return VarBstrFromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI8(LONG64 i64In, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromI8$handle() {
        return VarBstrFromI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI8(LONG64 i64In, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarBstrFromI8$address() {
        return VarBstrFromI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI8(LONG64 i64In, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromI8(long i64In, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromI8", i64In, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(i64In, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_FLOAT,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarBstrFromR4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromR4(FLOAT fltIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromR4$descriptor() {
        return VarBstrFromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromR4(FLOAT fltIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromR4$handle() {
        return VarBstrFromR4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromR4(FLOAT fltIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarBstrFromR4$address() {
        return VarBstrFromR4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromR4(FLOAT fltIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromR4(float fltIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromR4", fltIn, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(fltIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_DOUBLE,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarBstrFromR8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromR8(DOUBLE dblIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromR8$descriptor() {
        return VarBstrFromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromR8(DOUBLE dblIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromR8$handle() {
        return VarBstrFromR8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromR8(DOUBLE dblIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarBstrFromR8$address() {
        return VarBstrFromR8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromR8(DOUBLE dblIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromR8(double dblIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromR8", dblIn, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(dblIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            tagCY.layout(),
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarBstrFromCy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromCy(CY cyIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromCy$descriptor() {
        return VarBstrFromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromCy(CY cyIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromCy$handle() {
        return VarBstrFromCy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromCy(CY cyIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarBstrFromCy$address() {
        return VarBstrFromCy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromCy(CY cyIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromCy(MemorySegment cyIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromCy", cyIn, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(cyIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_DOUBLE,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarBstrFromDate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromDate(DATE dateIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromDate$descriptor() {
        return VarBstrFromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromDate(DATE dateIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromDate$handle() {
        return VarBstrFromDate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromDate(DATE dateIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarBstrFromDate$address() {
        return VarBstrFromDate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromDate(DATE dateIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromDate(double dateIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromDate", dateIn, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(dateIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarBstrFromDisp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromDisp(IDispatch *pdispIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromDisp$descriptor() {
        return VarBstrFromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromDisp(IDispatch *pdispIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromDisp$handle() {
        return VarBstrFromDisp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromDisp(IDispatch *pdispIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarBstrFromDisp$address() {
        return VarBstrFromDisp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromDisp(IDispatch *pdispIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromDisp(MemorySegment pdispIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromDisp", pdispIn, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarBstrFromBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromBool(VARIANT_BOOL boolIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromBool$descriptor() {
        return VarBstrFromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromBool(VARIANT_BOOL boolIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromBool$handle() {
        return VarBstrFromBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromBool(VARIANT_BOOL boolIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarBstrFromBool$address() {
        return VarBstrFromBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromBool(VARIANT_BOOL boolIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromBool(short boolIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromBool", boolIn, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(boolIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_CHAR,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarBstrFromI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI1(CHAR cIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromI1$descriptor() {
        return VarBstrFromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI1(CHAR cIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromI1$handle() {
        return VarBstrFromI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI1(CHAR cIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarBstrFromI1$address() {
        return VarBstrFromI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI1(CHAR cIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromI1(byte cIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromI1", cIn, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(cIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarBstrFromUI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI2(USHORT uiIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromUI2$descriptor() {
        return VarBstrFromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI2(USHORT uiIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromUI2$handle() {
        return VarBstrFromUI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI2(USHORT uiIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarBstrFromUI2$address() {
        return VarBstrFromUI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI2(USHORT uiIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromUI2(short uiIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromUI2", uiIn, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(uiIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarBstrFromUI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI4(ULONG ulIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromUI4$descriptor() {
        return VarBstrFromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI4(ULONG ulIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromUI4$handle() {
        return VarBstrFromUI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI4(ULONG ulIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarBstrFromUI4$address() {
        return VarBstrFromUI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI4(ULONG ulIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromUI4(int ulIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromUI4", ulIn, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(ulIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarBstrFromUI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI8(ULONG64 ui64In, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromUI8$descriptor() {
        return VarBstrFromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI8(ULONG64 ui64In, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromUI8$handle() {
        return VarBstrFromUI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI8(ULONG64 ui64In, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarBstrFromUI8$address() {
        return VarBstrFromUI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI8(ULONG64 ui64In, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromUI8(long ui64In, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromUI8", ui64In, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(ui64In, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarBstrFromDec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromDec(const DECIMAL *pdecIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromDec$descriptor() {
        return VarBstrFromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromDec(const DECIMAL *pdecIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromDec$handle() {
        return VarBstrFromDec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromDec(const DECIMAL *pdecIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarBstrFromDec$address() {
        return VarBstrFromDec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromDec(const DECIMAL *pdecIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromDec(MemorySegment pdecIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromDec", pdecIn, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(pdecIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_CHAR,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarBoolFromUI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI1(BYTE bIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromUI1$descriptor() {
        return VarBoolFromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI1(BYTE bIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromUI1$handle() {
        return VarBoolFromUI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI1(BYTE bIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MemorySegment VarBoolFromUI1$address() {
        return VarBoolFromUI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI1(BYTE bIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromUI1(byte bIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromUI1", bIn, pboolOut);
            }
            return (int)mh$.invokeExact(bIn, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarBoolFromI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI2(SHORT sIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromI2$descriptor() {
        return VarBoolFromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI2(SHORT sIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromI2$handle() {
        return VarBoolFromI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI2(SHORT sIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MemorySegment VarBoolFromI2$address() {
        return VarBoolFromI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI2(SHORT sIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromI2(short sIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromI2", sIn, pboolOut);
            }
            return (int)mh$.invokeExact(sIn, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarBoolFromI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI4(LONG lIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromI4$descriptor() {
        return VarBoolFromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI4(LONG lIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromI4$handle() {
        return VarBoolFromI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI4(LONG lIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MemorySegment VarBoolFromI4$address() {
        return VarBoolFromI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI4(LONG lIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromI4(int lIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromI4", lIn, pboolOut);
            }
            return (int)mh$.invokeExact(lIn, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarBoolFromI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI8(LONG64 i64In, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromI8$descriptor() {
        return VarBoolFromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI8(LONG64 i64In, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromI8$handle() {
        return VarBoolFromI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI8(LONG64 i64In, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MemorySegment VarBoolFromI8$address() {
        return VarBoolFromI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI8(LONG64 i64In, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromI8(long i64In, MemorySegment pboolOut) {
        var mh$ = VarBoolFromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromI8", i64In, pboolOut);
            }
            return (int)mh$.invokeExact(i64In, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_FLOAT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarBoolFromR4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromR4(FLOAT fltIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromR4$descriptor() {
        return VarBoolFromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromR4(FLOAT fltIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromR4$handle() {
        return VarBoolFromR4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromR4(FLOAT fltIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MemorySegment VarBoolFromR4$address() {
        return VarBoolFromR4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromR4(FLOAT fltIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromR4(float fltIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromR4", fltIn, pboolOut);
            }
            return (int)mh$.invokeExact(fltIn, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_DOUBLE,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarBoolFromR8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromR8(DOUBLE dblIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromR8$descriptor() {
        return VarBoolFromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromR8(DOUBLE dblIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromR8$handle() {
        return VarBoolFromR8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromR8(DOUBLE dblIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MemorySegment VarBoolFromR8$address() {
        return VarBoolFromR8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromR8(DOUBLE dblIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromR8(double dblIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromR8", dblIn, pboolOut);
            }
            return (int)mh$.invokeExact(dblIn, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_DOUBLE,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarBoolFromDate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromDate(DATE dateIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromDate$descriptor() {
        return VarBoolFromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromDate(DATE dateIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromDate$handle() {
        return VarBoolFromDate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromDate(DATE dateIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MemorySegment VarBoolFromDate$address() {
        return VarBoolFromDate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromDate(DATE dateIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromDate(double dateIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromDate", dateIn, pboolOut);
            }
            return (int)mh$.invokeExact(dateIn, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            tagCY.layout(),
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarBoolFromCy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromCy(CY cyIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromCy$descriptor() {
        return VarBoolFromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromCy(CY cyIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromCy$handle() {
        return VarBoolFromCy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromCy(CY cyIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MemorySegment VarBoolFromCy$address() {
        return VarBoolFromCy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromCy(CY cyIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromCy(MemorySegment cyIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromCy", cyIn, pboolOut);
            }
            return (int)mh$.invokeExact(cyIn, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarBoolFromStr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromStr$descriptor() {
        return VarBoolFromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromStr$handle() {
        return VarBoolFromStr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MemorySegment VarBoolFromStr$address() {
        return VarBoolFromStr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pboolOut) {
        var mh$ = VarBoolFromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromStr", strIn, lcid, dwFlags, pboolOut);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarBoolFromDisp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromDisp(IDispatch *pdispIn, LCID lcid, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromDisp$descriptor() {
        return VarBoolFromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromDisp(IDispatch *pdispIn, LCID lcid, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromDisp$handle() {
        return VarBoolFromDisp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromDisp(IDispatch *pdispIn, LCID lcid, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MemorySegment VarBoolFromDisp$address() {
        return VarBoolFromDisp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromDisp(IDispatch *pdispIn, LCID lcid, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromDisp(MemorySegment pdispIn, int lcid, MemorySegment pboolOut) {
        var mh$ = VarBoolFromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromDisp", pdispIn, lcid, pboolOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_CHAR,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarBoolFromI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI1(CHAR cIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromI1$descriptor() {
        return VarBoolFromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI1(CHAR cIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromI1$handle() {
        return VarBoolFromI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI1(CHAR cIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MemorySegment VarBoolFromI1$address() {
        return VarBoolFromI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI1(CHAR cIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromI1(byte cIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromI1", cIn, pboolOut);
            }
            return (int)mh$.invokeExact(cIn, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarBoolFromUI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI2(USHORT uiIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromUI2$descriptor() {
        return VarBoolFromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI2(USHORT uiIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromUI2$handle() {
        return VarBoolFromUI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI2(USHORT uiIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MemorySegment VarBoolFromUI2$address() {
        return VarBoolFromUI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI2(USHORT uiIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromUI2(short uiIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromUI2", uiIn, pboolOut);
            }
            return (int)mh$.invokeExact(uiIn, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarBoolFromUI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI4(ULONG ulIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromUI4$descriptor() {
        return VarBoolFromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI4(ULONG ulIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromUI4$handle() {
        return VarBoolFromUI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI4(ULONG ulIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MemorySegment VarBoolFromUI4$address() {
        return VarBoolFromUI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI4(ULONG ulIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromUI4(int ulIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromUI4", ulIn, pboolOut);
            }
            return (int)mh$.invokeExact(ulIn, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarBoolFromUI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI8(ULONG64 i64In, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromUI8$descriptor() {
        return VarBoolFromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI8(ULONG64 i64In, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromUI8$handle() {
        return VarBoolFromUI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI8(ULONG64 i64In, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MemorySegment VarBoolFromUI8$address() {
        return VarBoolFromUI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI8(ULONG64 i64In, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromUI8(long i64In, MemorySegment pboolOut) {
        var mh$ = VarBoolFromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromUI8", i64In, pboolOut);
            }
            return (int)mh$.invokeExact(i64In, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarBoolFromDec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromDec(const DECIMAL *pdecIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromDec$descriptor() {
        return VarBoolFromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromDec(const DECIMAL *pdecIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromDec$handle() {
        return VarBoolFromDec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromDec(const DECIMAL *pdecIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MemorySegment VarBoolFromDec$address() {
        return VarBoolFromDec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromDec(const DECIMAL *pdecIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromDec(MemorySegment pdecIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromDec", pdecIn, pboolOut);
            }
            return (int)mh$.invokeExact(pdecIn, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_CHAR,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI1FromUI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI1(BYTE bIn, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromUI1$descriptor() {
        return VarI1FromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI1(BYTE bIn, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromUI1$handle() {
        return VarI1FromUI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI1(BYTE bIn, CHAR *pcOut)
     * }
     */
    public static MemorySegment VarI1FromUI1$address() {
        return VarI1FromUI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI1(BYTE bIn, CHAR *pcOut)
     * }
     */
    public static int VarI1FromUI1(byte bIn, MemorySegment pcOut) {
        var mh$ = VarI1FromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromUI1", bIn, pcOut);
            }
            return (int)mh$.invokeExact(bIn, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI1FromI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromI2(SHORT uiIn, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromI2$descriptor() {
        return VarI1FromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromI2(SHORT uiIn, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromI2$handle() {
        return VarI1FromI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromI2(SHORT uiIn, CHAR *pcOut)
     * }
     */
    public static MemorySegment VarI1FromI2$address() {
        return VarI1FromI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromI2(SHORT uiIn, CHAR *pcOut)
     * }
     */
    public static int VarI1FromI2(short uiIn, MemorySegment pcOut) {
        var mh$ = VarI1FromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromI2", uiIn, pcOut);
            }
            return (int)mh$.invokeExact(uiIn, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI1FromI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromI4(LONG lIn, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromI4$descriptor() {
        return VarI1FromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromI4(LONG lIn, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromI4$handle() {
        return VarI1FromI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromI4(LONG lIn, CHAR *pcOut)
     * }
     */
    public static MemorySegment VarI1FromI4$address() {
        return VarI1FromI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromI4(LONG lIn, CHAR *pcOut)
     * }
     */
    public static int VarI1FromI4(int lIn, MemorySegment pcOut) {
        var mh$ = VarI1FromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromI4", lIn, pcOut);
            }
            return (int)mh$.invokeExact(lIn, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI1FromI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromI8(LONG64 i64In, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromI8$descriptor() {
        return VarI1FromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromI8(LONG64 i64In, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromI8$handle() {
        return VarI1FromI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromI8(LONG64 i64In, CHAR *pcOut)
     * }
     */
    public static MemorySegment VarI1FromI8$address() {
        return VarI1FromI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromI8(LONG64 i64In, CHAR *pcOut)
     * }
     */
    public static int VarI1FromI8(long i64In, MemorySegment pcOut) {
        var mh$ = VarI1FromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromI8", i64In, pcOut);
            }
            return (int)mh$.invokeExact(i64In, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_FLOAT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI1FromR4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromR4(FLOAT fltIn, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromR4$descriptor() {
        return VarI1FromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromR4(FLOAT fltIn, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromR4$handle() {
        return VarI1FromR4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromR4(FLOAT fltIn, CHAR *pcOut)
     * }
     */
    public static MemorySegment VarI1FromR4$address() {
        return VarI1FromR4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromR4(FLOAT fltIn, CHAR *pcOut)
     * }
     */
    public static int VarI1FromR4(float fltIn, MemorySegment pcOut) {
        var mh$ = VarI1FromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromR4", fltIn, pcOut);
            }
            return (int)mh$.invokeExact(fltIn, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_DOUBLE,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI1FromR8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromR8(DOUBLE dblIn, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromR8$descriptor() {
        return VarI1FromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromR8(DOUBLE dblIn, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromR8$handle() {
        return VarI1FromR8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromR8(DOUBLE dblIn, CHAR *pcOut)
     * }
     */
    public static MemorySegment VarI1FromR8$address() {
        return VarI1FromR8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromR8(DOUBLE dblIn, CHAR *pcOut)
     * }
     */
    public static int VarI1FromR8(double dblIn, MemorySegment pcOut) {
        var mh$ = VarI1FromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromR8", dblIn, pcOut);
            }
            return (int)mh$.invokeExact(dblIn, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_DOUBLE,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI1FromDate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromDate(DATE dateIn, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromDate$descriptor() {
        return VarI1FromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromDate(DATE dateIn, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromDate$handle() {
        return VarI1FromDate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromDate(DATE dateIn, CHAR *pcOut)
     * }
     */
    public static MemorySegment VarI1FromDate$address() {
        return VarI1FromDate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromDate(DATE dateIn, CHAR *pcOut)
     * }
     */
    public static int VarI1FromDate(double dateIn, MemorySegment pcOut) {
        var mh$ = VarI1FromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromDate", dateIn, pcOut);
            }
            return (int)mh$.invokeExact(dateIn, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            tagCY.layout(),
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI1FromCy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromCy(CY cyIn, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromCy$descriptor() {
        return VarI1FromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromCy(CY cyIn, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromCy$handle() {
        return VarI1FromCy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromCy(CY cyIn, CHAR *pcOut)
     * }
     */
    public static MemorySegment VarI1FromCy$address() {
        return VarI1FromCy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromCy(CY cyIn, CHAR *pcOut)
     * }
     */
    public static int VarI1FromCy(MemorySegment cyIn, MemorySegment pcOut) {
        var mh$ = VarI1FromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromCy", cyIn, pcOut);
            }
            return (int)mh$.invokeExact(cyIn, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI1FromStr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromStr$descriptor() {
        return VarI1FromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromStr$handle() {
        return VarI1FromStr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, CHAR *pcOut)
     * }
     */
    public static MemorySegment VarI1FromStr$address() {
        return VarI1FromStr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, CHAR *pcOut)
     * }
     */
    public static int VarI1FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pcOut) {
        var mh$ = VarI1FromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromStr", strIn, lcid, dwFlags, pcOut);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI1FromDisp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromDisp(IDispatch *pdispIn, LCID lcid, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromDisp$descriptor() {
        return VarI1FromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromDisp(IDispatch *pdispIn, LCID lcid, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromDisp$handle() {
        return VarI1FromDisp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromDisp(IDispatch *pdispIn, LCID lcid, CHAR *pcOut)
     * }
     */
    public static MemorySegment VarI1FromDisp$address() {
        return VarI1FromDisp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromDisp(IDispatch *pdispIn, LCID lcid, CHAR *pcOut)
     * }
     */
    public static int VarI1FromDisp(MemorySegment pdispIn, int lcid, MemorySegment pcOut) {
        var mh$ = VarI1FromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromDisp", pdispIn, lcid, pcOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI1FromBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromBool(VARIANT_BOOL boolIn, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromBool$descriptor() {
        return VarI1FromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromBool(VARIANT_BOOL boolIn, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromBool$handle() {
        return VarI1FromBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromBool(VARIANT_BOOL boolIn, CHAR *pcOut)
     * }
     */
    public static MemorySegment VarI1FromBool$address() {
        return VarI1FromBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromBool(VARIANT_BOOL boolIn, CHAR *pcOut)
     * }
     */
    public static int VarI1FromBool(short boolIn, MemorySegment pcOut) {
        var mh$ = VarI1FromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromBool", boolIn, pcOut);
            }
            return (int)mh$.invokeExact(boolIn, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI1FromUI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI2(USHORT uiIn, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromUI2$descriptor() {
        return VarI1FromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI2(USHORT uiIn, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromUI2$handle() {
        return VarI1FromUI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI2(USHORT uiIn, CHAR *pcOut)
     * }
     */
    public static MemorySegment VarI1FromUI2$address() {
        return VarI1FromUI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI2(USHORT uiIn, CHAR *pcOut)
     * }
     */
    public static int VarI1FromUI2(short uiIn, MemorySegment pcOut) {
        var mh$ = VarI1FromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromUI2", uiIn, pcOut);
            }
            return (int)mh$.invokeExact(uiIn, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI1FromUI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI4(ULONG ulIn, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromUI4$descriptor() {
        return VarI1FromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI4(ULONG ulIn, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromUI4$handle() {
        return VarI1FromUI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI4(ULONG ulIn, CHAR *pcOut)
     * }
     */
    public static MemorySegment VarI1FromUI4$address() {
        return VarI1FromUI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI4(ULONG ulIn, CHAR *pcOut)
     * }
     */
    public static int VarI1FromUI4(int ulIn, MemorySegment pcOut) {
        var mh$ = VarI1FromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromUI4", ulIn, pcOut);
            }
            return (int)mh$.invokeExact(ulIn, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI1FromUI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI8(ULONG64 i64In, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromUI8$descriptor() {
        return VarI1FromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI8(ULONG64 i64In, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromUI8$handle() {
        return VarI1FromUI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI8(ULONG64 i64In, CHAR *pcOut)
     * }
     */
    public static MemorySegment VarI1FromUI8$address() {
        return VarI1FromUI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI8(ULONG64 i64In, CHAR *pcOut)
     * }
     */
    public static int VarI1FromUI8(long i64In, MemorySegment pcOut) {
        var mh$ = VarI1FromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromUI8", i64In, pcOut);
            }
            return (int)mh$.invokeExact(i64In, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarI1FromDec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromDec(const DECIMAL *pdecIn, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromDec$descriptor() {
        return VarI1FromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromDec(const DECIMAL *pdecIn, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromDec$handle() {
        return VarI1FromDec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromDec(const DECIMAL *pdecIn, CHAR *pcOut)
     * }
     */
    public static MemorySegment VarI1FromDec$address() {
        return VarI1FromDec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromDec(const DECIMAL *pdecIn, CHAR *pcOut)
     * }
     */
    public static int VarI1FromDec(MemorySegment pdecIn, MemorySegment pcOut) {
        var mh$ = VarI1FromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromDec", pdecIn, pcOut);
            }
            return (int)mh$.invokeExact(pdecIn, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_CHAR,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI2FromUI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromUI1(BYTE bIn, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromUI1$descriptor() {
        return VarUI2FromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromUI1(BYTE bIn, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromUI1$handle() {
        return VarUI2FromUI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromUI1(BYTE bIn, USHORT *puiOut)
     * }
     */
    public static MemorySegment VarUI2FromUI1$address() {
        return VarUI2FromUI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromUI1(BYTE bIn, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromUI1(byte bIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromUI1", bIn, puiOut);
            }
            return (int)mh$.invokeExact(bIn, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI2FromI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI2(SHORT uiIn, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromI2$descriptor() {
        return VarUI2FromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI2(SHORT uiIn, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromI2$handle() {
        return VarUI2FromI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI2(SHORT uiIn, USHORT *puiOut)
     * }
     */
    public static MemorySegment VarUI2FromI2$address() {
        return VarUI2FromI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI2(SHORT uiIn, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromI2(short uiIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromI2", uiIn, puiOut);
            }
            return (int)mh$.invokeExact(uiIn, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI2FromI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI4(LONG lIn, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromI4$descriptor() {
        return VarUI2FromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI4(LONG lIn, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromI4$handle() {
        return VarUI2FromI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI4(LONG lIn, USHORT *puiOut)
     * }
     */
    public static MemorySegment VarUI2FromI4$address() {
        return VarUI2FromI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI4(LONG lIn, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromI4(int lIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromI4", lIn, puiOut);
            }
            return (int)mh$.invokeExact(lIn, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI2FromI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI8(LONG64 i64In, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromI8$descriptor() {
        return VarUI2FromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI8(LONG64 i64In, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromI8$handle() {
        return VarUI2FromI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI8(LONG64 i64In, USHORT *puiOut)
     * }
     */
    public static MemorySegment VarUI2FromI8$address() {
        return VarUI2FromI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI8(LONG64 i64In, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromI8(long i64In, MemorySegment puiOut) {
        var mh$ = VarUI2FromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromI8", i64In, puiOut);
            }
            return (int)mh$.invokeExact(i64In, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_FLOAT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI2FromR4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromR4(FLOAT fltIn, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromR4$descriptor() {
        return VarUI2FromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromR4(FLOAT fltIn, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromR4$handle() {
        return VarUI2FromR4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromR4(FLOAT fltIn, USHORT *puiOut)
     * }
     */
    public static MemorySegment VarUI2FromR4$address() {
        return VarUI2FromR4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromR4(FLOAT fltIn, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromR4(float fltIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromR4", fltIn, puiOut);
            }
            return (int)mh$.invokeExact(fltIn, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_DOUBLE,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI2FromR8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromR8(DOUBLE dblIn, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromR8$descriptor() {
        return VarUI2FromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromR8(DOUBLE dblIn, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromR8$handle() {
        return VarUI2FromR8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromR8(DOUBLE dblIn, USHORT *puiOut)
     * }
     */
    public static MemorySegment VarUI2FromR8$address() {
        return VarUI2FromR8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromR8(DOUBLE dblIn, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromR8(double dblIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromR8", dblIn, puiOut);
            }
            return (int)mh$.invokeExact(dblIn, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_DOUBLE,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI2FromDate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromDate(DATE dateIn, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromDate$descriptor() {
        return VarUI2FromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromDate(DATE dateIn, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromDate$handle() {
        return VarUI2FromDate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromDate(DATE dateIn, USHORT *puiOut)
     * }
     */
    public static MemorySegment VarUI2FromDate$address() {
        return VarUI2FromDate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromDate(DATE dateIn, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromDate(double dateIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromDate", dateIn, puiOut);
            }
            return (int)mh$.invokeExact(dateIn, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            tagCY.layout(),
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI2FromCy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromCy(CY cyIn, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromCy$descriptor() {
        return VarUI2FromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromCy(CY cyIn, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromCy$handle() {
        return VarUI2FromCy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromCy(CY cyIn, USHORT *puiOut)
     * }
     */
    public static MemorySegment VarUI2FromCy$address() {
        return VarUI2FromCy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromCy(CY cyIn, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromCy(MemorySegment cyIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromCy", cyIn, puiOut);
            }
            return (int)mh$.invokeExact(cyIn, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI2FromStr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromStr$descriptor() {
        return VarUI2FromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromStr$handle() {
        return VarUI2FromStr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, USHORT *puiOut)
     * }
     */
    public static MemorySegment VarUI2FromStr$address() {
        return VarUI2FromStr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment puiOut) {
        var mh$ = VarUI2FromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromStr", strIn, lcid, dwFlags, puiOut);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI2FromDisp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromDisp(IDispatch *pdispIn, LCID lcid, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromDisp$descriptor() {
        return VarUI2FromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromDisp(IDispatch *pdispIn, LCID lcid, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromDisp$handle() {
        return VarUI2FromDisp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromDisp(IDispatch *pdispIn, LCID lcid, USHORT *puiOut)
     * }
     */
    public static MemorySegment VarUI2FromDisp$address() {
        return VarUI2FromDisp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromDisp(IDispatch *pdispIn, LCID lcid, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromDisp(MemorySegment pdispIn, int lcid, MemorySegment puiOut) {
        var mh$ = VarUI2FromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromDisp", pdispIn, lcid, puiOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI2FromBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromBool(VARIANT_BOOL boolIn, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromBool$descriptor() {
        return VarUI2FromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromBool(VARIANT_BOOL boolIn, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromBool$handle() {
        return VarUI2FromBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromBool(VARIANT_BOOL boolIn, USHORT *puiOut)
     * }
     */
    public static MemorySegment VarUI2FromBool$address() {
        return VarUI2FromBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromBool(VARIANT_BOOL boolIn, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromBool(short boolIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromBool", boolIn, puiOut);
            }
            return (int)mh$.invokeExact(boolIn, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_CHAR,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI2FromI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI1(CHAR cIn, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromI1$descriptor() {
        return VarUI2FromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI1(CHAR cIn, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromI1$handle() {
        return VarUI2FromI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI1(CHAR cIn, USHORT *puiOut)
     * }
     */
    public static MemorySegment VarUI2FromI1$address() {
        return VarUI2FromI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI1(CHAR cIn, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromI1(byte cIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromI1", cIn, puiOut);
            }
            return (int)mh$.invokeExact(cIn, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI2FromUI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromUI4(ULONG ulIn, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromUI4$descriptor() {
        return VarUI2FromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromUI4(ULONG ulIn, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromUI4$handle() {
        return VarUI2FromUI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromUI4(ULONG ulIn, USHORT *puiOut)
     * }
     */
    public static MemorySegment VarUI2FromUI4$address() {
        return VarUI2FromUI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromUI4(ULONG ulIn, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromUI4(int ulIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromUI4", ulIn, puiOut);
            }
            return (int)mh$.invokeExact(ulIn, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI2FromUI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromUI8(ULONG64 i64In, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromUI8$descriptor() {
        return VarUI2FromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromUI8(ULONG64 i64In, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromUI8$handle() {
        return VarUI2FromUI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromUI8(ULONG64 i64In, USHORT *puiOut)
     * }
     */
    public static MemorySegment VarUI2FromUI8$address() {
        return VarUI2FromUI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromUI8(ULONG64 i64In, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromUI8(long i64In, MemorySegment puiOut) {
        var mh$ = VarUI2FromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromUI8", i64In, puiOut);
            }
            return (int)mh$.invokeExact(i64In, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI2FromDec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromDec(const DECIMAL *pdecIn, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromDec$descriptor() {
        return VarUI2FromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromDec(const DECIMAL *pdecIn, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromDec$handle() {
        return VarUI2FromDec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromDec(const DECIMAL *pdecIn, USHORT *puiOut)
     * }
     */
    public static MemorySegment VarUI2FromDec$address() {
        return VarUI2FromDec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromDec(const DECIMAL *pdecIn, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromDec(MemorySegment pdecIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromDec", pdecIn, puiOut);
            }
            return (int)mh$.invokeExact(pdecIn, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_CHAR,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI4FromUI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromUI1(BYTE bIn, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromUI1$descriptor() {
        return VarUI4FromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromUI1(BYTE bIn, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromUI1$handle() {
        return VarUI4FromUI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromUI1(BYTE bIn, ULONG *pulOut)
     * }
     */
    public static MemorySegment VarUI4FromUI1$address() {
        return VarUI4FromUI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromUI1(BYTE bIn, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromUI1(byte bIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromUI1", bIn, pulOut);
            }
            return (int)mh$.invokeExact(bIn, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI4FromI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI2(SHORT uiIn, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromI2$descriptor() {
        return VarUI4FromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI2(SHORT uiIn, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromI2$handle() {
        return VarUI4FromI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI2(SHORT uiIn, ULONG *pulOut)
     * }
     */
    public static MemorySegment VarUI4FromI2$address() {
        return VarUI4FromI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI2(SHORT uiIn, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromI2(short uiIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromI2", uiIn, pulOut);
            }
            return (int)mh$.invokeExact(uiIn, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI4FromI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI4(LONG lIn, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromI4$descriptor() {
        return VarUI4FromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI4(LONG lIn, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromI4$handle() {
        return VarUI4FromI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI4(LONG lIn, ULONG *pulOut)
     * }
     */
    public static MemorySegment VarUI4FromI4$address() {
        return VarUI4FromI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI4(LONG lIn, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromI4(int lIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromI4", lIn, pulOut);
            }
            return (int)mh$.invokeExact(lIn, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI4FromI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI8(LONG64 i64In, ULONG *plOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromI8$descriptor() {
        return VarUI4FromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI8(LONG64 i64In, ULONG *plOut)
     * }
     */
    public static MethodHandle VarUI4FromI8$handle() {
        return VarUI4FromI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI8(LONG64 i64In, ULONG *plOut)
     * }
     */
    public static MemorySegment VarUI4FromI8$address() {
        return VarUI4FromI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI8(LONG64 i64In, ULONG *plOut)
     * }
     */
    public static int VarUI4FromI8(long i64In, MemorySegment plOut) {
        var mh$ = VarUI4FromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromI8", i64In, plOut);
            }
            return (int)mh$.invokeExact(i64In, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_FLOAT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI4FromR4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromR4(FLOAT fltIn, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromR4$descriptor() {
        return VarUI4FromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromR4(FLOAT fltIn, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromR4$handle() {
        return VarUI4FromR4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromR4(FLOAT fltIn, ULONG *pulOut)
     * }
     */
    public static MemorySegment VarUI4FromR4$address() {
        return VarUI4FromR4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromR4(FLOAT fltIn, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromR4(float fltIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromR4", fltIn, pulOut);
            }
            return (int)mh$.invokeExact(fltIn, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_DOUBLE,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI4FromR8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromR8(DOUBLE dblIn, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromR8$descriptor() {
        return VarUI4FromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromR8(DOUBLE dblIn, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromR8$handle() {
        return VarUI4FromR8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromR8(DOUBLE dblIn, ULONG *pulOut)
     * }
     */
    public static MemorySegment VarUI4FromR8$address() {
        return VarUI4FromR8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromR8(DOUBLE dblIn, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromR8(double dblIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromR8", dblIn, pulOut);
            }
            return (int)mh$.invokeExact(dblIn, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_DOUBLE,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI4FromDate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromDate(DATE dateIn, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromDate$descriptor() {
        return VarUI4FromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromDate(DATE dateIn, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromDate$handle() {
        return VarUI4FromDate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromDate(DATE dateIn, ULONG *pulOut)
     * }
     */
    public static MemorySegment VarUI4FromDate$address() {
        return VarUI4FromDate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromDate(DATE dateIn, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromDate(double dateIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromDate", dateIn, pulOut);
            }
            return (int)mh$.invokeExact(dateIn, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            tagCY.layout(),
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI4FromCy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromCy(CY cyIn, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromCy$descriptor() {
        return VarUI4FromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromCy(CY cyIn, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromCy$handle() {
        return VarUI4FromCy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromCy(CY cyIn, ULONG *pulOut)
     * }
     */
    public static MemorySegment VarUI4FromCy$address() {
        return VarUI4FromCy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromCy(CY cyIn, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromCy(MemorySegment cyIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromCy", cyIn, pulOut);
            }
            return (int)mh$.invokeExact(cyIn, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI4FromStr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromStr$descriptor() {
        return VarUI4FromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromStr$handle() {
        return VarUI4FromStr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, ULONG *pulOut)
     * }
     */
    public static MemorySegment VarUI4FromStr$address() {
        return VarUI4FromStr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pulOut) {
        var mh$ = VarUI4FromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromStr", strIn, lcid, dwFlags, pulOut);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI4FromDisp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromDisp(IDispatch *pdispIn, LCID lcid, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromDisp$descriptor() {
        return VarUI4FromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromDisp(IDispatch *pdispIn, LCID lcid, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromDisp$handle() {
        return VarUI4FromDisp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromDisp(IDispatch *pdispIn, LCID lcid, ULONG *pulOut)
     * }
     */
    public static MemorySegment VarUI4FromDisp$address() {
        return VarUI4FromDisp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromDisp(IDispatch *pdispIn, LCID lcid, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromDisp(MemorySegment pdispIn, int lcid, MemorySegment pulOut) {
        var mh$ = VarUI4FromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromDisp", pdispIn, lcid, pulOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI4FromBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromBool(VARIANT_BOOL boolIn, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromBool$descriptor() {
        return VarUI4FromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromBool(VARIANT_BOOL boolIn, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromBool$handle() {
        return VarUI4FromBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromBool(VARIANT_BOOL boolIn, ULONG *pulOut)
     * }
     */
    public static MemorySegment VarUI4FromBool$address() {
        return VarUI4FromBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromBool(VARIANT_BOOL boolIn, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromBool(short boolIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromBool", boolIn, pulOut);
            }
            return (int)mh$.invokeExact(boolIn, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_CHAR,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI4FromI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI1(CHAR cIn, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromI1$descriptor() {
        return VarUI4FromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI1(CHAR cIn, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromI1$handle() {
        return VarUI4FromI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI1(CHAR cIn, ULONG *pulOut)
     * }
     */
    public static MemorySegment VarUI4FromI1$address() {
        return VarUI4FromI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI1(CHAR cIn, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromI1(byte cIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromI1", cIn, pulOut);
            }
            return (int)mh$.invokeExact(cIn, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI4FromUI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromUI2(USHORT uiIn, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromUI2$descriptor() {
        return VarUI4FromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromUI2(USHORT uiIn, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromUI2$handle() {
        return VarUI4FromUI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromUI2(USHORT uiIn, ULONG *pulOut)
     * }
     */
    public static MemorySegment VarUI4FromUI2$address() {
        return VarUI4FromUI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromUI2(USHORT uiIn, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromUI2(short uiIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromUI2", uiIn, pulOut);
            }
            return (int)mh$.invokeExact(uiIn, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI4FromUI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromUI8(ULONG64 ui64In, ULONG *plOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromUI8$descriptor() {
        return VarUI4FromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromUI8(ULONG64 ui64In, ULONG *plOut)
     * }
     */
    public static MethodHandle VarUI4FromUI8$handle() {
        return VarUI4FromUI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromUI8(ULONG64 ui64In, ULONG *plOut)
     * }
     */
    public static MemorySegment VarUI4FromUI8$address() {
        return VarUI4FromUI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromUI8(ULONG64 ui64In, ULONG *plOut)
     * }
     */
    public static int VarUI4FromUI8(long ui64In, MemorySegment plOut) {
        var mh$ = VarUI4FromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromUI8", ui64In, plOut);
            }
            return (int)mh$.invokeExact(ui64In, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI4FromDec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromDec(const DECIMAL *pdecIn, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromDec$descriptor() {
        return VarUI4FromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromDec(const DECIMAL *pdecIn, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromDec$handle() {
        return VarUI4FromDec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromDec(const DECIMAL *pdecIn, ULONG *pulOut)
     * }
     */
    public static MemorySegment VarUI4FromDec$address() {
        return VarUI4FromDec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromDec(const DECIMAL *pdecIn, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromDec(MemorySegment pdecIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromDec", pdecIn, pulOut);
            }
            return (int)mh$.invokeExact(pdecIn, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_CHAR,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI8FromUI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromUI1(BYTE bIn, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromUI1$descriptor() {
        return VarUI8FromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromUI1(BYTE bIn, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromUI1$handle() {
        return VarUI8FromUI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromUI1(BYTE bIn, ULONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarUI8FromUI1$address() {
        return VarUI8FromUI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromUI1(BYTE bIn, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromUI1(byte bIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromUI1", bIn, pi64Out);
            }
            return (int)mh$.invokeExact(bIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI8FromI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI2(SHORT sIn, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromI2$descriptor() {
        return VarUI8FromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI2(SHORT sIn, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromI2$handle() {
        return VarUI8FromI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI2(SHORT sIn, ULONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarUI8FromI2$address() {
        return VarUI8FromI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI2(SHORT sIn, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromI2(short sIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromI2", sIn, pi64Out);
            }
            return (int)mh$.invokeExact(sIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI8FromI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI4(LONG lIn, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromI4$descriptor() {
        return VarUI8FromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI4(LONG lIn, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromI4$handle() {
        return VarUI8FromI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI4(LONG lIn, ULONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarUI8FromI4$address() {
        return VarUI8FromI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI4(LONG lIn, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromI4(int lIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromI4", lIn, pi64Out);
            }
            return (int)mh$.invokeExact(lIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI8FromI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI8(LONG64 ui64In, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromI8$descriptor() {
        return VarUI8FromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI8(LONG64 ui64In, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromI8$handle() {
        return VarUI8FromI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI8(LONG64 ui64In, ULONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarUI8FromI8$address() {
        return VarUI8FromI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI8(LONG64 ui64In, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromI8(long ui64In, MemorySegment pi64Out) {
        var mh$ = VarUI8FromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromI8", ui64In, pi64Out);
            }
            return (int)mh$.invokeExact(ui64In, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_FLOAT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI8FromR4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromR4(FLOAT fltIn, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromR4$descriptor() {
        return VarUI8FromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromR4(FLOAT fltIn, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromR4$handle() {
        return VarUI8FromR4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromR4(FLOAT fltIn, ULONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarUI8FromR4$address() {
        return VarUI8FromR4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromR4(FLOAT fltIn, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromR4(float fltIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromR4", fltIn, pi64Out);
            }
            return (int)mh$.invokeExact(fltIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_DOUBLE,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI8FromR8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromR8(DOUBLE dblIn, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromR8$descriptor() {
        return VarUI8FromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromR8(DOUBLE dblIn, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromR8$handle() {
        return VarUI8FromR8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromR8(DOUBLE dblIn, ULONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarUI8FromR8$address() {
        return VarUI8FromR8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromR8(DOUBLE dblIn, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromR8(double dblIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromR8", dblIn, pi64Out);
            }
            return (int)mh$.invokeExact(dblIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            tagCY.layout(),
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI8FromCy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromCy(CY cyIn, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromCy$descriptor() {
        return VarUI8FromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromCy(CY cyIn, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromCy$handle() {
        return VarUI8FromCy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromCy(CY cyIn, ULONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarUI8FromCy$address() {
        return VarUI8FromCy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromCy(CY cyIn, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromCy(MemorySegment cyIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromCy", cyIn, pi64Out);
            }
            return (int)mh$.invokeExact(cyIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_DOUBLE,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI8FromDate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromDate(DATE dateIn, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromDate$descriptor() {
        return VarUI8FromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromDate(DATE dateIn, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromDate$handle() {
        return VarUI8FromDate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromDate(DATE dateIn, ULONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarUI8FromDate$address() {
        return VarUI8FromDate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromDate(DATE dateIn, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromDate(double dateIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromDate", dateIn, pi64Out);
            }
            return (int)mh$.invokeExact(dateIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI8FromStr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromStr$descriptor() {
        return VarUI8FromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromStr$handle() {
        return VarUI8FromStr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, ULONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarUI8FromStr$address() {
        return VarUI8FromStr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pi64Out) {
        var mh$ = VarUI8FromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromStr", strIn, lcid, dwFlags, pi64Out);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI8FromDisp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromDisp(IDispatch *pdispIn, LCID lcid, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromDisp$descriptor() {
        return VarUI8FromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromDisp(IDispatch *pdispIn, LCID lcid, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromDisp$handle() {
        return VarUI8FromDisp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromDisp(IDispatch *pdispIn, LCID lcid, ULONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarUI8FromDisp$address() {
        return VarUI8FromDisp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromDisp(IDispatch *pdispIn, LCID lcid, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromDisp(MemorySegment pdispIn, int lcid, MemorySegment pi64Out) {
        var mh$ = VarUI8FromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromDisp", pdispIn, lcid, pi64Out);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI8FromBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromBool(VARIANT_BOOL boolIn, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromBool$descriptor() {
        return VarUI8FromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromBool(VARIANT_BOOL boolIn, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromBool$handle() {
        return VarUI8FromBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromBool(VARIANT_BOOL boolIn, ULONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarUI8FromBool$address() {
        return VarUI8FromBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromBool(VARIANT_BOOL boolIn, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromBool(short boolIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromBool", boolIn, pi64Out);
            }
            return (int)mh$.invokeExact(boolIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_CHAR,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI8FromI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI1(CHAR cIn, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromI1$descriptor() {
        return VarUI8FromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI1(CHAR cIn, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromI1$handle() {
        return VarUI8FromI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI1(CHAR cIn, ULONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarUI8FromI1$address() {
        return VarUI8FromI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI1(CHAR cIn, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromI1(byte cIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromI1", cIn, pi64Out);
            }
            return (int)mh$.invokeExact(cIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI8FromUI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromUI2(USHORT uiIn, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromUI2$descriptor() {
        return VarUI8FromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromUI2(USHORT uiIn, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromUI2$handle() {
        return VarUI8FromUI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromUI2(USHORT uiIn, ULONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarUI8FromUI2$address() {
        return VarUI8FromUI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromUI2(USHORT uiIn, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromUI2(short uiIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromUI2", uiIn, pi64Out);
            }
            return (int)mh$.invokeExact(uiIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI8FromUI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromUI4(ULONG ulIn, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromUI4$descriptor() {
        return VarUI8FromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromUI4(ULONG ulIn, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromUI4$handle() {
        return VarUI8FromUI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromUI4(ULONG ulIn, ULONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarUI8FromUI4$address() {
        return VarUI8FromUI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromUI4(ULONG ulIn, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromUI4(int ulIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromUI4", ulIn, pi64Out);
            }
            return (int)mh$.invokeExact(ulIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUI8FromDec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromDec(const DECIMAL *pdecIn, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromDec$descriptor() {
        return VarUI8FromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromDec(const DECIMAL *pdecIn, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromDec$handle() {
        return VarUI8FromDec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromDec(const DECIMAL *pdecIn, ULONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarUI8FromDec$address() {
        return VarUI8FromDec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromDec(const DECIMAL *pdecIn, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromDec(MemorySegment pdecIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromDec", pdecIn, pi64Out);
            }
            return (int)mh$.invokeExact(pdecIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_CHAR,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDecFromUI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI1(BYTE bIn, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromUI1$descriptor() {
        return VarDecFromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI1(BYTE bIn, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromUI1$handle() {
        return VarDecFromUI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI1(BYTE bIn, DECIMAL *pdecOut)
     * }
     */
    public static MemorySegment VarDecFromUI1$address() {
        return VarDecFromUI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI1(BYTE bIn, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromUI1(byte bIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromUI1", bIn, pdecOut);
            }
            return (int)mh$.invokeExact(bIn, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDecFromI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI2(SHORT uiIn, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromI2$descriptor() {
        return VarDecFromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI2(SHORT uiIn, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromI2$handle() {
        return VarDecFromI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI2(SHORT uiIn, DECIMAL *pdecOut)
     * }
     */
    public static MemorySegment VarDecFromI2$address() {
        return VarDecFromI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI2(SHORT uiIn, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromI2(short uiIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromI2", uiIn, pdecOut);
            }
            return (int)mh$.invokeExact(uiIn, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDecFromI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI4(LONG lIn, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromI4$descriptor() {
        return VarDecFromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI4(LONG lIn, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromI4$handle() {
        return VarDecFromI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI4(LONG lIn, DECIMAL *pdecOut)
     * }
     */
    public static MemorySegment VarDecFromI4$address() {
        return VarDecFromI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI4(LONG lIn, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromI4(int lIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromI4", lIn, pdecOut);
            }
            return (int)mh$.invokeExact(lIn, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDecFromI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI8(LONG64 i64In, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromI8$descriptor() {
        return VarDecFromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI8(LONG64 i64In, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromI8$handle() {
        return VarDecFromI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI8(LONG64 i64In, DECIMAL *pdecOut)
     * }
     */
    public static MemorySegment VarDecFromI8$address() {
        return VarDecFromI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI8(LONG64 i64In, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromI8(long i64In, MemorySegment pdecOut) {
        var mh$ = VarDecFromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromI8", i64In, pdecOut);
            }
            return (int)mh$.invokeExact(i64In, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_FLOAT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDecFromR4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromR4(FLOAT fltIn, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromR4$descriptor() {
        return VarDecFromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromR4(FLOAT fltIn, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromR4$handle() {
        return VarDecFromR4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromR4(FLOAT fltIn, DECIMAL *pdecOut)
     * }
     */
    public static MemorySegment VarDecFromR4$address() {
        return VarDecFromR4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromR4(FLOAT fltIn, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromR4(float fltIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromR4", fltIn, pdecOut);
            }
            return (int)mh$.invokeExact(fltIn, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_DOUBLE,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDecFromR8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromR8(DOUBLE dblIn, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromR8$descriptor() {
        return VarDecFromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromR8(DOUBLE dblIn, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromR8$handle() {
        return VarDecFromR8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromR8(DOUBLE dblIn, DECIMAL *pdecOut)
     * }
     */
    public static MemorySegment VarDecFromR8$address() {
        return VarDecFromR8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromR8(DOUBLE dblIn, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromR8(double dblIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromR8", dblIn, pdecOut);
            }
            return (int)mh$.invokeExact(dblIn, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_DOUBLE,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDecFromDate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromDate(DATE dateIn, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromDate$descriptor() {
        return VarDecFromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromDate(DATE dateIn, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromDate$handle() {
        return VarDecFromDate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromDate(DATE dateIn, DECIMAL *pdecOut)
     * }
     */
    public static MemorySegment VarDecFromDate$address() {
        return VarDecFromDate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromDate(DATE dateIn, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromDate(double dateIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromDate", dateIn, pdecOut);
            }
            return (int)mh$.invokeExact(dateIn, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            tagCY.layout(),
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDecFromCy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromCy(CY cyIn, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromCy$descriptor() {
        return VarDecFromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromCy(CY cyIn, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromCy$handle() {
        return VarDecFromCy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromCy(CY cyIn, DECIMAL *pdecOut)
     * }
     */
    public static MemorySegment VarDecFromCy$address() {
        return VarDecFromCy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromCy(CY cyIn, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromCy(MemorySegment cyIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromCy", cyIn, pdecOut);
            }
            return (int)mh$.invokeExact(cyIn, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDecFromStr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromStr$descriptor() {
        return VarDecFromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromStr$handle() {
        return VarDecFromStr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DECIMAL *pdecOut)
     * }
     */
    public static MemorySegment VarDecFromStr$address() {
        return VarDecFromStr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pdecOut) {
        var mh$ = VarDecFromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromStr", strIn, lcid, dwFlags, pdecOut);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDecFromDisp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromDisp(IDispatch *pdispIn, LCID lcid, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromDisp$descriptor() {
        return VarDecFromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromDisp(IDispatch *pdispIn, LCID lcid, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromDisp$handle() {
        return VarDecFromDisp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromDisp(IDispatch *pdispIn, LCID lcid, DECIMAL *pdecOut)
     * }
     */
    public static MemorySegment VarDecFromDisp$address() {
        return VarDecFromDisp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromDisp(IDispatch *pdispIn, LCID lcid, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromDisp(MemorySegment pdispIn, int lcid, MemorySegment pdecOut) {
        var mh$ = VarDecFromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromDisp", pdispIn, lcid, pdecOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDecFromBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromBool(VARIANT_BOOL boolIn, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromBool$descriptor() {
        return VarDecFromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromBool(VARIANT_BOOL boolIn, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromBool$handle() {
        return VarDecFromBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromBool(VARIANT_BOOL boolIn, DECIMAL *pdecOut)
     * }
     */
    public static MemorySegment VarDecFromBool$address() {
        return VarDecFromBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromBool(VARIANT_BOOL boolIn, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromBool(short boolIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromBool", boolIn, pdecOut);
            }
            return (int)mh$.invokeExact(boolIn, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_CHAR,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDecFromI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI1(CHAR cIn, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromI1$descriptor() {
        return VarDecFromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI1(CHAR cIn, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromI1$handle() {
        return VarDecFromI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI1(CHAR cIn, DECIMAL *pdecOut)
     * }
     */
    public static MemorySegment VarDecFromI1$address() {
        return VarDecFromI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI1(CHAR cIn, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromI1(byte cIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromI1", cIn, pdecOut);
            }
            return (int)mh$.invokeExact(cIn, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDecFromUI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI2(USHORT uiIn, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromUI2$descriptor() {
        return VarDecFromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI2(USHORT uiIn, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromUI2$handle() {
        return VarDecFromUI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI2(USHORT uiIn, DECIMAL *pdecOut)
     * }
     */
    public static MemorySegment VarDecFromUI2$address() {
        return VarDecFromUI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI2(USHORT uiIn, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromUI2(short uiIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromUI2", uiIn, pdecOut);
            }
            return (int)mh$.invokeExact(uiIn, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDecFromUI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI4(ULONG ulIn, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromUI4$descriptor() {
        return VarDecFromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI4(ULONG ulIn, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromUI4$handle() {
        return VarDecFromUI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI4(ULONG ulIn, DECIMAL *pdecOut)
     * }
     */
    public static MemorySegment VarDecFromUI4$address() {
        return VarDecFromUI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI4(ULONG ulIn, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromUI4(int ulIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromUI4", ulIn, pdecOut);
            }
            return (int)mh$.invokeExact(ulIn, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDecFromUI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI8(ULONG64 ui64In, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromUI8$descriptor() {
        return VarDecFromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI8(ULONG64 ui64In, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromUI8$handle() {
        return VarDecFromUI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI8(ULONG64 ui64In, DECIMAL *pdecOut)
     * }
     */
    public static MemorySegment VarDecFromUI8$address() {
        return VarDecFromUI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI8(ULONG64 ui64In, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromUI8(long ui64In, MemorySegment pdecOut) {
        var mh$ = VarDecFromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromUI8", ui64In, pdecOut);
            }
            return (int)mh$.invokeExact(ui64In, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarParseNumFromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarParseNumFromStr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarParseNumFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, NUMPARSE *pnumprs, BYTE *rgbDig)
     * }
     */
    public static FunctionDescriptor VarParseNumFromStr$descriptor() {
        return VarParseNumFromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarParseNumFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, NUMPARSE *pnumprs, BYTE *rgbDig)
     * }
     */
    public static MethodHandle VarParseNumFromStr$handle() {
        return VarParseNumFromStr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarParseNumFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, NUMPARSE *pnumprs, BYTE *rgbDig)
     * }
     */
    public static MemorySegment VarParseNumFromStr$address() {
        return VarParseNumFromStr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarParseNumFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, NUMPARSE *pnumprs, BYTE *rgbDig)
     * }
     */
    public static int VarParseNumFromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pnumprs, MemorySegment rgbDig) {
        var mh$ = VarParseNumFromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarParseNumFromStr", strIn, lcid, dwFlags, pnumprs, rgbDig);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pnumprs, rgbDig);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarNumFromParseNum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarNumFromParseNum");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarNumFromParseNum(NUMPARSE *pnumprs, BYTE *rgbDig, ULONG dwVtBits, VARIANT *pvar)
     * }
     */
    public static FunctionDescriptor VarNumFromParseNum$descriptor() {
        return VarNumFromParseNum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarNumFromParseNum(NUMPARSE *pnumprs, BYTE *rgbDig, ULONG dwVtBits, VARIANT *pvar)
     * }
     */
    public static MethodHandle VarNumFromParseNum$handle() {
        return VarNumFromParseNum.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarNumFromParseNum(NUMPARSE *pnumprs, BYTE *rgbDig, ULONG dwVtBits, VARIANT *pvar)
     * }
     */
    public static MemorySegment VarNumFromParseNum$address() {
        return VarNumFromParseNum.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarNumFromParseNum(NUMPARSE *pnumprs, BYTE *rgbDig, ULONG dwVtBits, VARIANT *pvar)
     * }
     */
    public static int VarNumFromParseNum(MemorySegment pnumprs, MemorySegment rgbDig, int dwVtBits, MemorySegment pvar) {
        var mh$ = VarNumFromParseNum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarNumFromParseNum", pnumprs, rgbDig, dwVtBits, pvar);
            }
            return (int)mh$.invokeExact(pnumprs, rgbDig, dwVtBits, pvar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarAdd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarAdd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarAdd(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarAdd$descriptor() {
        return VarAdd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarAdd(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarAdd$handle() {
        return VarAdd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarAdd(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarAdd$address() {
        return VarAdd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarAdd(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarAdd(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarAdd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarAdd", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarAnd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarAnd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarAnd(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarAnd$descriptor() {
        return VarAnd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarAnd(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarAnd$handle() {
        return VarAnd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarAnd(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarAnd$address() {
        return VarAnd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarAnd(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarAnd(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarAnd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarAnd", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarCat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCat(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarCat$descriptor() {
        return VarCat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCat(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarCat$handle() {
        return VarCat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCat(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarCat$address() {
        return VarCat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCat(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarCat(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarCat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCat", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDiv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDiv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarDiv$descriptor() {
        return VarDiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDiv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarDiv$handle() {
        return VarDiv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDiv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarDiv$address() {
        return VarDiv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDiv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarDiv(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarDiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDiv", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarEqv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarEqv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarEqv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarEqv$descriptor() {
        return VarEqv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarEqv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarEqv$handle() {
        return VarEqv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarEqv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarEqv$address() {
        return VarEqv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarEqv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarEqv(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarEqv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarEqv", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarIdiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarIdiv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarIdiv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarIdiv$descriptor() {
        return VarIdiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarIdiv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarIdiv$handle() {
        return VarIdiv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarIdiv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarIdiv$address() {
        return VarIdiv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarIdiv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarIdiv(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarIdiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarIdiv", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarImp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarImp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarImp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarImp$descriptor() {
        return VarImp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarImp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarImp$handle() {
        return VarImp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarImp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarImp$address() {
        return VarImp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarImp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarImp(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarImp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarImp", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarMod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarMod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarMod(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarMod$descriptor() {
        return VarMod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarMod(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarMod$handle() {
        return VarMod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarMod(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarMod$address() {
        return VarMod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarMod(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarMod(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarMod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarMod", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarMul {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarMul");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarMul(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarMul$descriptor() {
        return VarMul.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarMul(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarMul$handle() {
        return VarMul.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarMul(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarMul$address() {
        return VarMul.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarMul(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarMul(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarMul.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarMul", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarOr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarOr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarOr(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarOr$descriptor() {
        return VarOr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarOr(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarOr$handle() {
        return VarOr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarOr(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarOr$address() {
        return VarOr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarOr(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarOr(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarOr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarOr", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarPow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarPow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarPow(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarPow$descriptor() {
        return VarPow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarPow(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarPow$handle() {
        return VarPow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarPow(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarPow$address() {
        return VarPow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarPow(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarPow(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarPow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarPow", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarSub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarSub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarSub(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarSub$descriptor() {
        return VarSub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarSub(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarSub$handle() {
        return VarSub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarSub(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarSub$address() {
        return VarSub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarSub(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarSub(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarSub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarSub", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarXor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarXor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarXor(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarXor$descriptor() {
        return VarXor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarXor(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarXor$handle() {
        return VarXor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarXor(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarXor$address() {
        return VarXor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarXor(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarXor(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarXor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarXor", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarAbs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarAbs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarAbs(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarAbs$descriptor() {
        return VarAbs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarAbs(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarAbs$handle() {
        return VarAbs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarAbs(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarAbs$address() {
        return VarAbs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarAbs(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static int VarAbs(MemorySegment pvarIn, MemorySegment pvarResult) {
        var mh$ = VarAbs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarAbs", pvarIn, pvarResult);
            }
            return (int)mh$.invokeExact(pvarIn, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarFix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarFix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarFix(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarFix$descriptor() {
        return VarFix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarFix(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarFix$handle() {
        return VarFix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarFix(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarFix$address() {
        return VarFix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarFix(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static int VarFix(MemorySegment pvarIn, MemorySegment pvarResult) {
        var mh$ = VarFix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarFix", pvarIn, pvarResult);
            }
            return (int)mh$.invokeExact(pvarIn, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarInt(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarInt$descriptor() {
        return VarInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarInt(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarInt$handle() {
        return VarInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarInt(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarInt$address() {
        return VarInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarInt(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static int VarInt(MemorySegment pvarIn, MemorySegment pvarResult) {
        var mh$ = VarInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarInt", pvarIn, pvarResult);
            }
            return (int)mh$.invokeExact(pvarIn, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarNeg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarNeg");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarNeg(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarNeg$descriptor() {
        return VarNeg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarNeg(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarNeg$handle() {
        return VarNeg.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarNeg(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarNeg$address() {
        return VarNeg.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarNeg(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static int VarNeg(MemorySegment pvarIn, MemorySegment pvarResult) {
        var mh$ = VarNeg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarNeg", pvarIn, pvarResult);
            }
            return (int)mh$.invokeExact(pvarIn, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarNot {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarNot");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarNot(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarNot$descriptor() {
        return VarNot.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarNot(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarNot$handle() {
        return VarNot.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarNot(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarNot$address() {
        return VarNot.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarNot(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static int VarNot(MemorySegment pvarIn, MemorySegment pvarResult) {
        var mh$ = VarNot.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarNot", pvarIn, pvarResult);
            }
            return (int)mh$.invokeExact(pvarIn, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarRound {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarRound");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarRound(LPVARIANT pvarIn, int cDecimals, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarRound$descriptor() {
        return VarRound.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarRound(LPVARIANT pvarIn, int cDecimals, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarRound$handle() {
        return VarRound.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarRound(LPVARIANT pvarIn, int cDecimals, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarRound$address() {
        return VarRound.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarRound(LPVARIANT pvarIn, int cDecimals, LPVARIANT pvarResult)
     * }
     */
    public static int VarRound(MemorySegment pvarIn, int cDecimals, MemorySegment pvarResult) {
        var mh$ = VarRound.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarRound", pvarIn, cDecimals, pvarResult);
            }
            return (int)mh$.invokeExact(pvarIn, cDecimals, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarCmp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCmp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LCID lcid, ULONG dwFlags)
     * }
     */
    public static FunctionDescriptor VarCmp$descriptor() {
        return VarCmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCmp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LCID lcid, ULONG dwFlags)
     * }
     */
    public static MethodHandle VarCmp$handle() {
        return VarCmp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCmp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LCID lcid, ULONG dwFlags)
     * }
     */
    public static MemorySegment VarCmp$address() {
        return VarCmp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCmp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LCID lcid, ULONG dwFlags)
     * }
     */
    public static int VarCmp(MemorySegment pvarLeft, MemorySegment pvarRight, int lcid, int dwFlags) {
        var mh$ = VarCmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCmp", pvarLeft, pvarRight, lcid, dwFlags);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, lcid, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecAdd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDecAdd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecAdd(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static FunctionDescriptor VarDecAdd$descriptor() {
        return VarDecAdd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecAdd(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static MethodHandle VarDecAdd$handle() {
        return VarDecAdd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecAdd(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static MemorySegment VarDecAdd$address() {
        return VarDecAdd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecAdd(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static int VarDecAdd(MemorySegment pdecLeft, MemorySegment pdecRight, MemorySegment pdecResult) {
        var mh$ = VarDecAdd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecAdd", pdecLeft, pdecRight, pdecResult);
            }
            return (int)mh$.invokeExact(pdecLeft, pdecRight, pdecResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecDiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDecDiv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecDiv(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static FunctionDescriptor VarDecDiv$descriptor() {
        return VarDecDiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecDiv(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static MethodHandle VarDecDiv$handle() {
        return VarDecDiv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecDiv(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static MemorySegment VarDecDiv$address() {
        return VarDecDiv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecDiv(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static int VarDecDiv(MemorySegment pdecLeft, MemorySegment pdecRight, MemorySegment pdecResult) {
        var mh$ = VarDecDiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecDiv", pdecLeft, pdecRight, pdecResult);
            }
            return (int)mh$.invokeExact(pdecLeft, pdecRight, pdecResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecMul {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDecMul");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecMul(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static FunctionDescriptor VarDecMul$descriptor() {
        return VarDecMul.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecMul(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static MethodHandle VarDecMul$handle() {
        return VarDecMul.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecMul(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static MemorySegment VarDecMul$address() {
        return VarDecMul.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecMul(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static int VarDecMul(MemorySegment pdecLeft, MemorySegment pdecRight, MemorySegment pdecResult) {
        var mh$ = VarDecMul.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecMul", pdecLeft, pdecRight, pdecResult);
            }
            return (int)mh$.invokeExact(pdecLeft, pdecRight, pdecResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecSub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDecSub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecSub(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static FunctionDescriptor VarDecSub$descriptor() {
        return VarDecSub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecSub(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static MethodHandle VarDecSub$handle() {
        return VarDecSub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecSub(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static MemorySegment VarDecSub$address() {
        return VarDecSub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecSub(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static int VarDecSub(MemorySegment pdecLeft, MemorySegment pdecRight, MemorySegment pdecResult) {
        var mh$ = VarDecSub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecSub", pdecLeft, pdecRight, pdecResult);
            }
            return (int)mh$.invokeExact(pdecLeft, pdecRight, pdecResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecAbs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDecAbs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecAbs(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static FunctionDescriptor VarDecAbs$descriptor() {
        return VarDecAbs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecAbs(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static MethodHandle VarDecAbs$handle() {
        return VarDecAbs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecAbs(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static MemorySegment VarDecAbs$address() {
        return VarDecAbs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecAbs(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static int VarDecAbs(MemorySegment pdecIn, MemorySegment pdecResult) {
        var mh$ = VarDecAbs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecAbs", pdecIn, pdecResult);
            }
            return (int)mh$.invokeExact(pdecIn, pdecResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDecFix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFix(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static FunctionDescriptor VarDecFix$descriptor() {
        return VarDecFix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFix(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static MethodHandle VarDecFix$handle() {
        return VarDecFix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFix(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static MemorySegment VarDecFix$address() {
        return VarDecFix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFix(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static int VarDecFix(MemorySegment pdecIn, MemorySegment pdecResult) {
        var mh$ = VarDecFix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFix", pdecIn, pdecResult);
            }
            return (int)mh$.invokeExact(pdecIn, pdecResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDecInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecInt(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static FunctionDescriptor VarDecInt$descriptor() {
        return VarDecInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecInt(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static MethodHandle VarDecInt$handle() {
        return VarDecInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecInt(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static MemorySegment VarDecInt$address() {
        return VarDecInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecInt(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static int VarDecInt(MemorySegment pdecIn, MemorySegment pdecResult) {
        var mh$ = VarDecInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecInt", pdecIn, pdecResult);
            }
            return (int)mh$.invokeExact(pdecIn, pdecResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecNeg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDecNeg");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecNeg(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static FunctionDescriptor VarDecNeg$descriptor() {
        return VarDecNeg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecNeg(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static MethodHandle VarDecNeg$handle() {
        return VarDecNeg.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecNeg(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static MemorySegment VarDecNeg$address() {
        return VarDecNeg.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecNeg(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static int VarDecNeg(MemorySegment pdecIn, MemorySegment pdecResult) {
        var mh$ = VarDecNeg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecNeg", pdecIn, pdecResult);
            }
            return (int)mh$.invokeExact(pdecIn, pdecResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecRound {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDecRound");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecRound(LPDECIMAL pdecIn, int cDecimals, LPDECIMAL pdecResult)
     * }
     */
    public static FunctionDescriptor VarDecRound$descriptor() {
        return VarDecRound.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecRound(LPDECIMAL pdecIn, int cDecimals, LPDECIMAL pdecResult)
     * }
     */
    public static MethodHandle VarDecRound$handle() {
        return VarDecRound.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecRound(LPDECIMAL pdecIn, int cDecimals, LPDECIMAL pdecResult)
     * }
     */
    public static MemorySegment VarDecRound$address() {
        return VarDecRound.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecRound(LPDECIMAL pdecIn, int cDecimals, LPDECIMAL pdecResult)
     * }
     */
    public static int VarDecRound(MemorySegment pdecIn, int cDecimals, MemorySegment pdecResult) {
        var mh$ = VarDecRound.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecRound", pdecIn, cDecimals, pdecResult);
            }
            return (int)mh$.invokeExact(pdecIn, cDecimals, pdecResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecCmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDecCmp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecCmp(LPDECIMAL pdecLeft, LPDECIMAL pdecRight)
     * }
     */
    public static FunctionDescriptor VarDecCmp$descriptor() {
        return VarDecCmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecCmp(LPDECIMAL pdecLeft, LPDECIMAL pdecRight)
     * }
     */
    public static MethodHandle VarDecCmp$handle() {
        return VarDecCmp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecCmp(LPDECIMAL pdecLeft, LPDECIMAL pdecRight)
     * }
     */
    public static MemorySegment VarDecCmp$address() {
        return VarDecCmp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecCmp(LPDECIMAL pdecLeft, LPDECIMAL pdecRight)
     * }
     */
    public static int VarDecCmp(MemorySegment pdecLeft, MemorySegment pdecRight) {
        var mh$ = VarDecCmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecCmp", pdecLeft, pdecRight);
            }
            return (int)mh$.invokeExact(pdecLeft, pdecRight);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecCmpR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDecCmpR8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecCmpR8(LPDECIMAL pdecLeft, double dblRight)
     * }
     */
    public static FunctionDescriptor VarDecCmpR8$descriptor() {
        return VarDecCmpR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecCmpR8(LPDECIMAL pdecLeft, double dblRight)
     * }
     */
    public static MethodHandle VarDecCmpR8$handle() {
        return VarDecCmpR8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecCmpR8(LPDECIMAL pdecLeft, double dblRight)
     * }
     */
    public static MemorySegment VarDecCmpR8$address() {
        return VarDecCmpR8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecCmpR8(LPDECIMAL pdecLeft, double dblRight)
     * }
     */
    public static int VarDecCmpR8(MemorySegment pdecLeft, double dblRight) {
        var mh$ = VarDecCmpR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecCmpR8", pdecLeft, dblRight);
            }
            return (int)mh$.invokeExact(pdecLeft, dblRight);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyAdd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            tagCY.layout(),
            tagCY.layout(),
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarCyAdd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyAdd(CY cyLeft, CY cyRight, LPCY pcyResult)
     * }
     */
    public static FunctionDescriptor VarCyAdd$descriptor() {
        return VarCyAdd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyAdd(CY cyLeft, CY cyRight, LPCY pcyResult)
     * }
     */
    public static MethodHandle VarCyAdd$handle() {
        return VarCyAdd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyAdd(CY cyLeft, CY cyRight, LPCY pcyResult)
     * }
     */
    public static MemorySegment VarCyAdd$address() {
        return VarCyAdd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyAdd(CY cyLeft, CY cyRight, LPCY pcyResult)
     * }
     */
    public static int VarCyAdd(MemorySegment cyLeft, MemorySegment cyRight, MemorySegment pcyResult) {
        var mh$ = VarCyAdd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyAdd", cyLeft, cyRight, pcyResult);
            }
            return (int)mh$.invokeExact(cyLeft, cyRight, pcyResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyMul {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            tagCY.layout(),
            tagCY.layout(),
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarCyMul");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyMul(CY cyLeft, CY cyRight, LPCY pcyResult)
     * }
     */
    public static FunctionDescriptor VarCyMul$descriptor() {
        return VarCyMul.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyMul(CY cyLeft, CY cyRight, LPCY pcyResult)
     * }
     */
    public static MethodHandle VarCyMul$handle() {
        return VarCyMul.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyMul(CY cyLeft, CY cyRight, LPCY pcyResult)
     * }
     */
    public static MemorySegment VarCyMul$address() {
        return VarCyMul.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyMul(CY cyLeft, CY cyRight, LPCY pcyResult)
     * }
     */
    public static int VarCyMul(MemorySegment cyLeft, MemorySegment cyRight, MemorySegment pcyResult) {
        var mh$ = VarCyMul.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyMul", cyLeft, cyRight, pcyResult);
            }
            return (int)mh$.invokeExact(cyLeft, cyRight, pcyResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyMulI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            tagCY.layout(),
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarCyMulI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyMulI4(CY cyLeft, LONG lRight, LPCY pcyResult)
     * }
     */
    public static FunctionDescriptor VarCyMulI4$descriptor() {
        return VarCyMulI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyMulI4(CY cyLeft, LONG lRight, LPCY pcyResult)
     * }
     */
    public static MethodHandle VarCyMulI4$handle() {
        return VarCyMulI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyMulI4(CY cyLeft, LONG lRight, LPCY pcyResult)
     * }
     */
    public static MemorySegment VarCyMulI4$address() {
        return VarCyMulI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyMulI4(CY cyLeft, LONG lRight, LPCY pcyResult)
     * }
     */
    public static int VarCyMulI4(MemorySegment cyLeft, int lRight, MemorySegment pcyResult) {
        var mh$ = VarCyMulI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyMulI4", cyLeft, lRight, pcyResult);
            }
            return (int)mh$.invokeExact(cyLeft, lRight, pcyResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyMulI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            tagCY.layout(),
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarCyMulI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyMulI8(CY cyLeft, LONG64 lRight, LPCY pcyResult)
     * }
     */
    public static FunctionDescriptor VarCyMulI8$descriptor() {
        return VarCyMulI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyMulI8(CY cyLeft, LONG64 lRight, LPCY pcyResult)
     * }
     */
    public static MethodHandle VarCyMulI8$handle() {
        return VarCyMulI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyMulI8(CY cyLeft, LONG64 lRight, LPCY pcyResult)
     * }
     */
    public static MemorySegment VarCyMulI8$address() {
        return VarCyMulI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyMulI8(CY cyLeft, LONG64 lRight, LPCY pcyResult)
     * }
     */
    public static int VarCyMulI8(MemorySegment cyLeft, long lRight, MemorySegment pcyResult) {
        var mh$ = VarCyMulI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyMulI8", cyLeft, lRight, pcyResult);
            }
            return (int)mh$.invokeExact(cyLeft, lRight, pcyResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCySub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            tagCY.layout(),
            tagCY.layout(),
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarCySub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCySub(CY cyLeft, CY cyRight, LPCY pcyResult)
     * }
     */
    public static FunctionDescriptor VarCySub$descriptor() {
        return VarCySub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCySub(CY cyLeft, CY cyRight, LPCY pcyResult)
     * }
     */
    public static MethodHandle VarCySub$handle() {
        return VarCySub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCySub(CY cyLeft, CY cyRight, LPCY pcyResult)
     * }
     */
    public static MemorySegment VarCySub$address() {
        return VarCySub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCySub(CY cyLeft, CY cyRight, LPCY pcyResult)
     * }
     */
    public static int VarCySub(MemorySegment cyLeft, MemorySegment cyRight, MemorySegment pcyResult) {
        var mh$ = VarCySub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCySub", cyLeft, cyRight, pcyResult);
            }
            return (int)mh$.invokeExact(cyLeft, cyRight, pcyResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyAbs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            tagCY.layout(),
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarCyAbs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyAbs(CY cyIn, LPCY pcyResult)
     * }
     */
    public static FunctionDescriptor VarCyAbs$descriptor() {
        return VarCyAbs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyAbs(CY cyIn, LPCY pcyResult)
     * }
     */
    public static MethodHandle VarCyAbs$handle() {
        return VarCyAbs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyAbs(CY cyIn, LPCY pcyResult)
     * }
     */
    public static MemorySegment VarCyAbs$address() {
        return VarCyAbs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyAbs(CY cyIn, LPCY pcyResult)
     * }
     */
    public static int VarCyAbs(MemorySegment cyIn, MemorySegment pcyResult) {
        var mh$ = VarCyAbs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyAbs", cyIn, pcyResult);
            }
            return (int)mh$.invokeExact(cyIn, pcyResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            tagCY.layout(),
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarCyFix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFix(CY cyIn, LPCY pcyResult)
     * }
     */
    public static FunctionDescriptor VarCyFix$descriptor() {
        return VarCyFix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFix(CY cyIn, LPCY pcyResult)
     * }
     */
    public static MethodHandle VarCyFix$handle() {
        return VarCyFix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFix(CY cyIn, LPCY pcyResult)
     * }
     */
    public static MemorySegment VarCyFix$address() {
        return VarCyFix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFix(CY cyIn, LPCY pcyResult)
     * }
     */
    public static int VarCyFix(MemorySegment cyIn, MemorySegment pcyResult) {
        var mh$ = VarCyFix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFix", cyIn, pcyResult);
            }
            return (int)mh$.invokeExact(cyIn, pcyResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            tagCY.layout(),
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarCyInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyInt(CY cyIn, LPCY pcyResult)
     * }
     */
    public static FunctionDescriptor VarCyInt$descriptor() {
        return VarCyInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyInt(CY cyIn, LPCY pcyResult)
     * }
     */
    public static MethodHandle VarCyInt$handle() {
        return VarCyInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyInt(CY cyIn, LPCY pcyResult)
     * }
     */
    public static MemorySegment VarCyInt$address() {
        return VarCyInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyInt(CY cyIn, LPCY pcyResult)
     * }
     */
    public static int VarCyInt(MemorySegment cyIn, MemorySegment pcyResult) {
        var mh$ = VarCyInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyInt", cyIn, pcyResult);
            }
            return (int)mh$.invokeExact(cyIn, pcyResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyNeg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            tagCY.layout(),
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarCyNeg");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyNeg(CY cyIn, LPCY pcyResult)
     * }
     */
    public static FunctionDescriptor VarCyNeg$descriptor() {
        return VarCyNeg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyNeg(CY cyIn, LPCY pcyResult)
     * }
     */
    public static MethodHandle VarCyNeg$handle() {
        return VarCyNeg.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyNeg(CY cyIn, LPCY pcyResult)
     * }
     */
    public static MemorySegment VarCyNeg$address() {
        return VarCyNeg.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyNeg(CY cyIn, LPCY pcyResult)
     * }
     */
    public static int VarCyNeg(MemorySegment cyIn, MemorySegment pcyResult) {
        var mh$ = VarCyNeg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyNeg", cyIn, pcyResult);
            }
            return (int)mh$.invokeExact(cyIn, pcyResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyRound {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            tagCY.layout(),
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarCyRound");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyRound(CY cyIn, int cDecimals, LPCY pcyResult)
     * }
     */
    public static FunctionDescriptor VarCyRound$descriptor() {
        return VarCyRound.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyRound(CY cyIn, int cDecimals, LPCY pcyResult)
     * }
     */
    public static MethodHandle VarCyRound$handle() {
        return VarCyRound.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyRound(CY cyIn, int cDecimals, LPCY pcyResult)
     * }
     */
    public static MemorySegment VarCyRound$address() {
        return VarCyRound.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyRound(CY cyIn, int cDecimals, LPCY pcyResult)
     * }
     */
    public static int VarCyRound(MemorySegment cyIn, int cDecimals, MemorySegment pcyResult) {
        var mh$ = VarCyRound.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyRound", cyIn, cDecimals, pcyResult);
            }
            return (int)mh$.invokeExact(cyIn, cDecimals, pcyResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyCmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            tagCY.layout(),
            tagCY.layout()
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarCyCmp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyCmp(CY cyLeft, CY cyRight)
     * }
     */
    public static FunctionDescriptor VarCyCmp$descriptor() {
        return VarCyCmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyCmp(CY cyLeft, CY cyRight)
     * }
     */
    public static MethodHandle VarCyCmp$handle() {
        return VarCyCmp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyCmp(CY cyLeft, CY cyRight)
     * }
     */
    public static MemorySegment VarCyCmp$address() {
        return VarCyCmp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyCmp(CY cyLeft, CY cyRight)
     * }
     */
    public static int VarCyCmp(MemorySegment cyLeft, MemorySegment cyRight) {
        var mh$ = VarCyCmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyCmp", cyLeft, cyRight);
            }
            return (int)mh$.invokeExact(cyLeft, cyRight);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyCmpR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            tagCY.layout(),
            wgl_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarCyCmpR8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyCmpR8(CY cyLeft, double dblRight)
     * }
     */
    public static FunctionDescriptor VarCyCmpR8$descriptor() {
        return VarCyCmpR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyCmpR8(CY cyLeft, double dblRight)
     * }
     */
    public static MethodHandle VarCyCmpR8$handle() {
        return VarCyCmpR8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyCmpR8(CY cyLeft, double dblRight)
     * }
     */
    public static MemorySegment VarCyCmpR8$address() {
        return VarCyCmpR8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyCmpR8(CY cyLeft, double dblRight)
     * }
     */
    public static int VarCyCmpR8(MemorySegment cyLeft, double dblRight) {
        var mh$ = VarCyCmpR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyCmpR8", cyLeft, dblRight);
            }
            return (int)mh$.invokeExact(cyLeft, dblRight);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrCat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarBstrCat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrCat(BSTR bstrLeft, BSTR bstrRight, LPBSTR pbstrResult)
     * }
     */
    public static FunctionDescriptor VarBstrCat$descriptor() {
        return VarBstrCat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrCat(BSTR bstrLeft, BSTR bstrRight, LPBSTR pbstrResult)
     * }
     */
    public static MethodHandle VarBstrCat$handle() {
        return VarBstrCat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrCat(BSTR bstrLeft, BSTR bstrRight, LPBSTR pbstrResult)
     * }
     */
    public static MemorySegment VarBstrCat$address() {
        return VarBstrCat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrCat(BSTR bstrLeft, BSTR bstrRight, LPBSTR pbstrResult)
     * }
     */
    public static int VarBstrCat(MemorySegment bstrLeft, MemorySegment bstrRight, MemorySegment pbstrResult) {
        var mh$ = VarBstrCat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrCat", bstrLeft, bstrRight, pbstrResult);
            }
            return (int)mh$.invokeExact(bstrLeft, bstrRight, pbstrResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrCmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarBstrCmp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrCmp(BSTR bstrLeft, BSTR bstrRight, LCID lcid, ULONG dwFlags)
     * }
     */
    public static FunctionDescriptor VarBstrCmp$descriptor() {
        return VarBstrCmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrCmp(BSTR bstrLeft, BSTR bstrRight, LCID lcid, ULONG dwFlags)
     * }
     */
    public static MethodHandle VarBstrCmp$handle() {
        return VarBstrCmp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrCmp(BSTR bstrLeft, BSTR bstrRight, LCID lcid, ULONG dwFlags)
     * }
     */
    public static MemorySegment VarBstrCmp$address() {
        return VarBstrCmp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrCmp(BSTR bstrLeft, BSTR bstrRight, LCID lcid, ULONG dwFlags)
     * }
     */
    public static int VarBstrCmp(MemorySegment bstrLeft, MemorySegment bstrRight, int lcid, int dwFlags) {
        var mh$ = VarBstrCmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrCmp", bstrLeft, bstrRight, lcid, dwFlags);
            }
            return (int)mh$.invokeExact(bstrLeft, bstrRight, lcid, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8Pow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_DOUBLE,
            wgl_h.C_DOUBLE,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarR8Pow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8Pow(double dblLeft, double dblRight, double *pdblResult)
     * }
     */
    public static FunctionDescriptor VarR8Pow$descriptor() {
        return VarR8Pow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8Pow(double dblLeft, double dblRight, double *pdblResult)
     * }
     */
    public static MethodHandle VarR8Pow$handle() {
        return VarR8Pow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR8Pow(double dblLeft, double dblRight, double *pdblResult)
     * }
     */
    public static MemorySegment VarR8Pow$address() {
        return VarR8Pow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8Pow(double dblLeft, double dblRight, double *pdblResult)
     * }
     */
    public static int VarR8Pow(double dblLeft, double dblRight, MemorySegment pdblResult) {
        var mh$ = VarR8Pow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8Pow", dblLeft, dblRight, pdblResult);
            }
            return (int)mh$.invokeExact(dblLeft, dblRight, pdblResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4CmpR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_FLOAT,
            wgl_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarR4CmpR8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4CmpR8(float fltLeft, double dblRight)
     * }
     */
    public static FunctionDescriptor VarR4CmpR8$descriptor() {
        return VarR4CmpR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4CmpR8(float fltLeft, double dblRight)
     * }
     */
    public static MethodHandle VarR4CmpR8$handle() {
        return VarR4CmpR8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR4CmpR8(float fltLeft, double dblRight)
     * }
     */
    public static MemorySegment VarR4CmpR8$address() {
        return VarR4CmpR8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4CmpR8(float fltLeft, double dblRight)
     * }
     */
    public static int VarR4CmpR8(float fltLeft, double dblRight) {
        var mh$ = VarR4CmpR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4CmpR8", fltLeft, dblRight);
            }
            return (int)mh$.invokeExact(fltLeft, dblRight);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8Round {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_DOUBLE,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarR8Round");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8Round(double dblIn, int cDecimals, double *pdblResult)
     * }
     */
    public static FunctionDescriptor VarR8Round$descriptor() {
        return VarR8Round.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8Round(double dblIn, int cDecimals, double *pdblResult)
     * }
     */
    public static MethodHandle VarR8Round$handle() {
        return VarR8Round.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR8Round(double dblIn, int cDecimals, double *pdblResult)
     * }
     */
    public static MemorySegment VarR8Round$address() {
        return VarR8Round.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8Round(double dblIn, int cDecimals, double *pdblResult)
     * }
     */
    public static int VarR8Round(double dblIn, int cDecimals, MemorySegment pdblResult) {
        var mh$ = VarR8Round.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8Round", dblIn, cDecimals, pdblResult);
            }
            return (int)mh$.invokeExact(dblIn, cDecimals, pdblResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromUdate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDateFromUdate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUdate(UDATE *pudateIn, ULONG dwFlags, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromUdate$descriptor() {
        return VarDateFromUdate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUdate(UDATE *pudateIn, ULONG dwFlags, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromUdate$handle() {
        return VarDateFromUdate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUdate(UDATE *pudateIn, ULONG dwFlags, DATE *pdateOut)
     * }
     */
    public static MemorySegment VarDateFromUdate$address() {
        return VarDateFromUdate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUdate(UDATE *pudateIn, ULONG dwFlags, DATE *pdateOut)
     * }
     */
    public static int VarDateFromUdate(MemorySegment pudateIn, int dwFlags, MemorySegment pdateOut) {
        var mh$ = VarDateFromUdate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromUdate", pudateIn, dwFlags, pdateOut);
            }
            return (int)mh$.invokeExact(pudateIn, dwFlags, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromUdateEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarDateFromUdateEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUdateEx(UDATE *pudateIn, LCID lcid, ULONG dwFlags, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromUdateEx$descriptor() {
        return VarDateFromUdateEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUdateEx(UDATE *pudateIn, LCID lcid, ULONG dwFlags, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromUdateEx$handle() {
        return VarDateFromUdateEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUdateEx(UDATE *pudateIn, LCID lcid, ULONG dwFlags, DATE *pdateOut)
     * }
     */
    public static MemorySegment VarDateFromUdateEx$address() {
        return VarDateFromUdateEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUdateEx(UDATE *pudateIn, LCID lcid, ULONG dwFlags, DATE *pdateOut)
     * }
     */
    public static int VarDateFromUdateEx(MemorySegment pudateIn, int lcid, int dwFlags, MemorySegment pdateOut) {
        var mh$ = VarDateFromUdateEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromUdateEx", pudateIn, lcid, dwFlags, pdateOut);
            }
            return (int)mh$.invokeExact(pudateIn, lcid, dwFlags, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUdateFromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_DOUBLE,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarUdateFromDate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUdateFromDate(DATE dateIn, ULONG dwFlags, UDATE *pudateOut)
     * }
     */
    public static FunctionDescriptor VarUdateFromDate$descriptor() {
        return VarUdateFromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUdateFromDate(DATE dateIn, ULONG dwFlags, UDATE *pudateOut)
     * }
     */
    public static MethodHandle VarUdateFromDate$handle() {
        return VarUdateFromDate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUdateFromDate(DATE dateIn, ULONG dwFlags, UDATE *pudateOut)
     * }
     */
    public static MemorySegment VarUdateFromDate$address() {
        return VarUdateFromDate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUdateFromDate(DATE dateIn, ULONG dwFlags, UDATE *pudateOut)
     * }
     */
    public static int VarUdateFromDate(double dateIn, int dwFlags, MemorySegment pudateOut) {
        var mh$ = VarUdateFromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUdateFromDate", dateIn, dwFlags, pudateOut);
            }
            return (int)mh$.invokeExact(dateIn, dwFlags, pudateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetAltMonthNames {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetAltMonthNames");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT GetAltMonthNames(LCID lcid, LPOLESTR **prgp)
     * }
     */
    public static FunctionDescriptor GetAltMonthNames$descriptor() {
        return GetAltMonthNames.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT GetAltMonthNames(LCID lcid, LPOLESTR **prgp)
     * }
     */
    public static MethodHandle GetAltMonthNames$handle() {
        return GetAltMonthNames.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT GetAltMonthNames(LCID lcid, LPOLESTR **prgp)
     * }
     */
    public static MemorySegment GetAltMonthNames$address() {
        return GetAltMonthNames.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT GetAltMonthNames(LCID lcid, LPOLESTR **prgp)
     * }
     */
    public static int GetAltMonthNames(int lcid, MemorySegment prgp) {
        var mh$ = GetAltMonthNames.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetAltMonthNames", lcid, prgp);
            }
            return (int)mh$.invokeExact(lcid, prgp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarFormat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarFormat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarFormat(LPVARIANT pvarIn, LPOLESTR pstrFormat, int iFirstDay, int iFirstWeek, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarFormat$descriptor() {
        return VarFormat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarFormat(LPVARIANT pvarIn, LPOLESTR pstrFormat, int iFirstDay, int iFirstWeek, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarFormat$handle() {
        return VarFormat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarFormat(LPVARIANT pvarIn, LPOLESTR pstrFormat, int iFirstDay, int iFirstWeek, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarFormat$address() {
        return VarFormat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarFormat(LPVARIANT pvarIn, LPOLESTR pstrFormat, int iFirstDay, int iFirstWeek, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarFormat(MemorySegment pvarIn, MemorySegment pstrFormat, int iFirstDay, int iFirstWeek, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarFormat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarFormat", pvarIn, pstrFormat, iFirstDay, iFirstWeek, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(pvarIn, pstrFormat, iFirstDay, iFirstWeek, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarFormatDateTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarFormatDateTime");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatDateTime(LPVARIANT pvarIn, int iNamedFormat, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarFormatDateTime$descriptor() {
        return VarFormatDateTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatDateTime(LPVARIANT pvarIn, int iNamedFormat, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarFormatDateTime$handle() {
        return VarFormatDateTime.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatDateTime(LPVARIANT pvarIn, int iNamedFormat, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarFormatDateTime$address() {
        return VarFormatDateTime.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarFormatDateTime(LPVARIANT pvarIn, int iNamedFormat, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarFormatDateTime(MemorySegment pvarIn, int iNamedFormat, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarFormatDateTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarFormatDateTime", pvarIn, iNamedFormat, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(pvarIn, iNamedFormat, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarFormatNumber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarFormatNumber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatNumber(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarFormatNumber$descriptor() {
        return VarFormatNumber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatNumber(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarFormatNumber$handle() {
        return VarFormatNumber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatNumber(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarFormatNumber$address() {
        return VarFormatNumber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarFormatNumber(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarFormatNumber(MemorySegment pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarFormatNumber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarFormatNumber", pvarIn, iNumDig, iIncLead, iUseParens, iGroup, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(pvarIn, iNumDig, iIncLead, iUseParens, iGroup, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarFormatPercent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarFormatPercent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatPercent(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarFormatPercent$descriptor() {
        return VarFormatPercent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatPercent(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarFormatPercent$handle() {
        return VarFormatPercent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatPercent(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarFormatPercent$address() {
        return VarFormatPercent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarFormatPercent(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarFormatPercent(MemorySegment pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarFormatPercent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarFormatPercent", pvarIn, iNumDig, iIncLead, iUseParens, iGroup, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(pvarIn, iNumDig, iIncLead, iUseParens, iGroup, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarFormatCurrency {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarFormatCurrency");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatCurrency(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarFormatCurrency$descriptor() {
        return VarFormatCurrency.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatCurrency(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarFormatCurrency$handle() {
        return VarFormatCurrency.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatCurrency(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarFormatCurrency$address() {
        return VarFormatCurrency.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarFormatCurrency(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarFormatCurrency(MemorySegment pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarFormatCurrency.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarFormatCurrency", pvarIn, iNumDig, iIncLead, iUseParens, iGroup, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(pvarIn, iNumDig, iIncLead, iUseParens, iGroup, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarWeekdayName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarWeekdayName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarWeekdayName(int iWeekday, int fAbbrev, int iFirstDay, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarWeekdayName$descriptor() {
        return VarWeekdayName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarWeekdayName(int iWeekday, int fAbbrev, int iFirstDay, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarWeekdayName$handle() {
        return VarWeekdayName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarWeekdayName(int iWeekday, int fAbbrev, int iFirstDay, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarWeekdayName$address() {
        return VarWeekdayName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarWeekdayName(int iWeekday, int fAbbrev, int iFirstDay, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarWeekdayName(int iWeekday, int fAbbrev, int iFirstDay, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarWeekdayName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarWeekdayName", iWeekday, fAbbrev, iFirstDay, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(iWeekday, fAbbrev, iFirstDay, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarMonthName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarMonthName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarMonthName(int iMonth, int fAbbrev, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarMonthName$descriptor() {
        return VarMonthName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarMonthName(int iMonth, int fAbbrev, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarMonthName$handle() {
        return VarMonthName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarMonthName(int iMonth, int fAbbrev, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarMonthName$address() {
        return VarMonthName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarMonthName(int iMonth, int fAbbrev, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarMonthName(int iMonth, int fAbbrev, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarMonthName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarMonthName", iMonth, fAbbrev, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(iMonth, fAbbrev, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarFormatFromTokens {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarFormatFromTokens");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatFromTokens(LPVARIANT pvarIn, LPOLESTR pstrFormat, LPBYTE pbTokCur, ULONG dwFlags, BSTR *pbstrOut, LCID lcid)
     * }
     */
    public static FunctionDescriptor VarFormatFromTokens$descriptor() {
        return VarFormatFromTokens.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatFromTokens(LPVARIANT pvarIn, LPOLESTR pstrFormat, LPBYTE pbTokCur, ULONG dwFlags, BSTR *pbstrOut, LCID lcid)
     * }
     */
    public static MethodHandle VarFormatFromTokens$handle() {
        return VarFormatFromTokens.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatFromTokens(LPVARIANT pvarIn, LPOLESTR pstrFormat, LPBYTE pbTokCur, ULONG dwFlags, BSTR *pbstrOut, LCID lcid)
     * }
     */
    public static MemorySegment VarFormatFromTokens$address() {
        return VarFormatFromTokens.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarFormatFromTokens(LPVARIANT pvarIn, LPOLESTR pstrFormat, LPBYTE pbTokCur, ULONG dwFlags, BSTR *pbstrOut, LCID lcid)
     * }
     */
    public static int VarFormatFromTokens(MemorySegment pvarIn, MemorySegment pstrFormat, MemorySegment pbTokCur, int dwFlags, MemorySegment pbstrOut, int lcid) {
        var mh$ = VarFormatFromTokens.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarFormatFromTokens", pvarIn, pstrFormat, pbTokCur, dwFlags, pbstrOut, lcid);
            }
            return (int)mh$.invokeExact(pvarIn, pstrFormat, pbTokCur, dwFlags, pbstrOut, lcid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarTokenizeFormatString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_INT,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VarTokenizeFormatString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarTokenizeFormatString(LPOLESTR pstrFormat, LPBYTE rgbTok, int cbTok, int iFirstDay, int iFirstWeek, LCID lcid, int *pcbActual)
     * }
     */
    public static FunctionDescriptor VarTokenizeFormatString$descriptor() {
        return VarTokenizeFormatString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarTokenizeFormatString(LPOLESTR pstrFormat, LPBYTE rgbTok, int cbTok, int iFirstDay, int iFirstWeek, LCID lcid, int *pcbActual)
     * }
     */
    public static MethodHandle VarTokenizeFormatString$handle() {
        return VarTokenizeFormatString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarTokenizeFormatString(LPOLESTR pstrFormat, LPBYTE rgbTok, int cbTok, int iFirstDay, int iFirstWeek, LCID lcid, int *pcbActual)
     * }
     */
    public static MemorySegment VarTokenizeFormatString$address() {
        return VarTokenizeFormatString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarTokenizeFormatString(LPOLESTR pstrFormat, LPBYTE rgbTok, int cbTok, int iFirstDay, int iFirstWeek, LCID lcid, int *pcbActual)
     * }
     */
    public static int VarTokenizeFormatString(MemorySegment pstrFormat, MemorySegment rgbTok, int cbTok, int iFirstDay, int iFirstWeek, int lcid, MemorySegment pcbActual) {
        var mh$ = VarTokenizeFormatString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarTokenizeFormatString", pstrFormat, rgbTok, cbTok, iFirstDay, iFirstWeek, lcid, pcbActual);
            }
            return (int)mh$.invokeExact(pstrFormat, rgbTok, cbTok, iFirstDay, iFirstWeek, lcid, pcbActual);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LHashValOfNameSysA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_INT,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("LHashValOfNameSysA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ULONG LHashValOfNameSysA(SYSKIND syskind, LCID lcid, LPCSTR szName)
     * }
     */
    public static FunctionDescriptor LHashValOfNameSysA$descriptor() {
        return LHashValOfNameSysA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ULONG LHashValOfNameSysA(SYSKIND syskind, LCID lcid, LPCSTR szName)
     * }
     */
    public static MethodHandle LHashValOfNameSysA$handle() {
        return LHashValOfNameSysA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ULONG LHashValOfNameSysA(SYSKIND syskind, LCID lcid, LPCSTR szName)
     * }
     */
    public static MemorySegment LHashValOfNameSysA$address() {
        return LHashValOfNameSysA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ULONG LHashValOfNameSysA(SYSKIND syskind, LCID lcid, LPCSTR szName)
     * }
     */
    public static int LHashValOfNameSysA(int syskind, int lcid, MemorySegment szName) {
        var mh$ = LHashValOfNameSysA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LHashValOfNameSysA", syskind, lcid, szName);
            }
            return (int)mh$.invokeExact(syskind, lcid, szName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LHashValOfNameSys {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_INT,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("LHashValOfNameSys");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ULONG LHashValOfNameSys(SYSKIND syskind, LCID lcid, const OLECHAR *szName)
     * }
     */
    public static FunctionDescriptor LHashValOfNameSys$descriptor() {
        return LHashValOfNameSys.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ULONG LHashValOfNameSys(SYSKIND syskind, LCID lcid, const OLECHAR *szName)
     * }
     */
    public static MethodHandle LHashValOfNameSys$handle() {
        return LHashValOfNameSys.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ULONG LHashValOfNameSys(SYSKIND syskind, LCID lcid, const OLECHAR *szName)
     * }
     */
    public static MemorySegment LHashValOfNameSys$address() {
        return LHashValOfNameSys.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ULONG LHashValOfNameSys(SYSKIND syskind, LCID lcid, const OLECHAR *szName)
     * }
     */
    public static int LHashValOfNameSys(int syskind, int lcid, MemorySegment szName) {
        var mh$ = LHashValOfNameSys.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LHashValOfNameSys", syskind, lcid, szName);
            }
            return (int)mh$.invokeExact(syskind, lcid, szName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LoadTypeLib {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("LoadTypeLib");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT LoadTypeLib(LPCOLESTR szFile, ITypeLib **pptlib)
     * }
     */
    public static FunctionDescriptor LoadTypeLib$descriptor() {
        return LoadTypeLib.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT LoadTypeLib(LPCOLESTR szFile, ITypeLib **pptlib)
     * }
     */
    public static MethodHandle LoadTypeLib$handle() {
        return LoadTypeLib.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT LoadTypeLib(LPCOLESTR szFile, ITypeLib **pptlib)
     * }
     */
    public static MemorySegment LoadTypeLib$address() {
        return LoadTypeLib.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT LoadTypeLib(LPCOLESTR szFile, ITypeLib **pptlib)
     * }
     */
    public static int LoadTypeLib(MemorySegment szFile, MemorySegment pptlib) {
        var mh$ = LoadTypeLib.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LoadTypeLib", szFile, pptlib);
            }
            return (int)mh$.invokeExact(szFile, pptlib);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int REGKIND_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagREGKIND.REGKIND_DEFAULT = 0
     * }
     */
    public static int REGKIND_DEFAULT() {
        return REGKIND_DEFAULT;
    }
    private static final int REGKIND_REGISTER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagREGKIND.REGKIND_REGISTER = 1
     * }
     */
    public static int REGKIND_REGISTER() {
        return REGKIND_REGISTER;
    }
    private static final int REGKIND_NONE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagREGKIND.REGKIND_NONE = 2
     * }
     */
    public static int REGKIND_NONE() {
        return REGKIND_NONE;
    }

    private static class LoadTypeLibEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("LoadTypeLibEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT LoadTypeLibEx(LPCOLESTR szFile, REGKIND regkind, ITypeLib **pptlib)
     * }
     */
    public static FunctionDescriptor LoadTypeLibEx$descriptor() {
        return LoadTypeLibEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT LoadTypeLibEx(LPCOLESTR szFile, REGKIND regkind, ITypeLib **pptlib)
     * }
     */
    public static MethodHandle LoadTypeLibEx$handle() {
        return LoadTypeLibEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT LoadTypeLibEx(LPCOLESTR szFile, REGKIND regkind, ITypeLib **pptlib)
     * }
     */
    public static MemorySegment LoadTypeLibEx$address() {
        return LoadTypeLibEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT LoadTypeLibEx(LPCOLESTR szFile, REGKIND regkind, ITypeLib **pptlib)
     * }
     */
    public static int LoadTypeLibEx(MemorySegment szFile, int regkind, MemorySegment pptlib) {
        var mh$ = LoadTypeLibEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LoadTypeLibEx", szFile, regkind, pptlib);
            }
            return (int)mh$.invokeExact(szFile, regkind, pptlib);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LoadRegTypeLib {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_SHORT,
            wgl_h.C_SHORT,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("LoadRegTypeLib");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT LoadRegTypeLib(const GUID *const rguid, WORD wVerMajor, WORD wVerMinor, LCID lcid, ITypeLib **pptlib)
     * }
     */
    public static FunctionDescriptor LoadRegTypeLib$descriptor() {
        return LoadRegTypeLib.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT LoadRegTypeLib(const GUID *const rguid, WORD wVerMajor, WORD wVerMinor, LCID lcid, ITypeLib **pptlib)
     * }
     */
    public static MethodHandle LoadRegTypeLib$handle() {
        return LoadRegTypeLib.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT LoadRegTypeLib(const GUID *const rguid, WORD wVerMajor, WORD wVerMinor, LCID lcid, ITypeLib **pptlib)
     * }
     */
    public static MemorySegment LoadRegTypeLib$address() {
        return LoadRegTypeLib.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT LoadRegTypeLib(const GUID *const rguid, WORD wVerMajor, WORD wVerMinor, LCID lcid, ITypeLib **pptlib)
     * }
     */
    public static int LoadRegTypeLib(MemorySegment rguid, short wVerMajor, short wVerMinor, int lcid, MemorySegment pptlib) {
        var mh$ = LoadRegTypeLib.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LoadRegTypeLib", rguid, wVerMajor, wVerMinor, lcid, pptlib);
            }
            return (int)mh$.invokeExact(rguid, wVerMajor, wVerMinor, lcid, pptlib);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class QueryPathOfRegTypeLib {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_SHORT,
            wgl_h.C_SHORT,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("QueryPathOfRegTypeLib");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT QueryPathOfRegTypeLib(const GUID *const guid, USHORT wMaj, USHORT wMin, LCID lcid, LPBSTR lpbstrPathName)
     * }
     */
    public static FunctionDescriptor QueryPathOfRegTypeLib$descriptor() {
        return QueryPathOfRegTypeLib.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT QueryPathOfRegTypeLib(const GUID *const guid, USHORT wMaj, USHORT wMin, LCID lcid, LPBSTR lpbstrPathName)
     * }
     */
    public static MethodHandle QueryPathOfRegTypeLib$handle() {
        return QueryPathOfRegTypeLib.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT QueryPathOfRegTypeLib(const GUID *const guid, USHORT wMaj, USHORT wMin, LCID lcid, LPBSTR lpbstrPathName)
     * }
     */
    public static MemorySegment QueryPathOfRegTypeLib$address() {
        return QueryPathOfRegTypeLib.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT QueryPathOfRegTypeLib(const GUID *const guid, USHORT wMaj, USHORT wMin, LCID lcid, LPBSTR lpbstrPathName)
     * }
     */
    public static int QueryPathOfRegTypeLib(MemorySegment guid, short wMaj, short wMin, int lcid, MemorySegment lpbstrPathName) {
        var mh$ = QueryPathOfRegTypeLib.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("QueryPathOfRegTypeLib", guid, wMaj, wMin, lcid, lpbstrPathName);
            }
            return (int)mh$.invokeExact(guid, wMaj, wMin, lcid, lpbstrPathName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegisterTypeLib {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RegisterTypeLib");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT RegisterTypeLib(ITypeLib *ptlib, LPCOLESTR szFullPath, LPCOLESTR szHelpDir)
     * }
     */
    public static FunctionDescriptor RegisterTypeLib$descriptor() {
        return RegisterTypeLib.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT RegisterTypeLib(ITypeLib *ptlib, LPCOLESTR szFullPath, LPCOLESTR szHelpDir)
     * }
     */
    public static MethodHandle RegisterTypeLib$handle() {
        return RegisterTypeLib.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT RegisterTypeLib(ITypeLib *ptlib, LPCOLESTR szFullPath, LPCOLESTR szHelpDir)
     * }
     */
    public static MemorySegment RegisterTypeLib$address() {
        return RegisterTypeLib.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT RegisterTypeLib(ITypeLib *ptlib, LPCOLESTR szFullPath, LPCOLESTR szHelpDir)
     * }
     */
    public static int RegisterTypeLib(MemorySegment ptlib, MemorySegment szFullPath, MemorySegment szHelpDir) {
        var mh$ = RegisterTypeLib.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegisterTypeLib", ptlib, szFullPath, szHelpDir);
            }
            return (int)mh$.invokeExact(ptlib, szFullPath, szHelpDir);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UnRegisterTypeLib {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_SHORT,
            wgl_h.C_SHORT,
            wgl_h.C_LONG,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("UnRegisterTypeLib");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT UnRegisterTypeLib(const GUID *const libID, WORD wVerMajor, WORD wVerMinor, LCID lcid, SYSKIND syskind)
     * }
     */
    public static FunctionDescriptor UnRegisterTypeLib$descriptor() {
        return UnRegisterTypeLib.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT UnRegisterTypeLib(const GUID *const libID, WORD wVerMajor, WORD wVerMinor, LCID lcid, SYSKIND syskind)
     * }
     */
    public static MethodHandle UnRegisterTypeLib$handle() {
        return UnRegisterTypeLib.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT UnRegisterTypeLib(const GUID *const libID, WORD wVerMajor, WORD wVerMinor, LCID lcid, SYSKIND syskind)
     * }
     */
    public static MemorySegment UnRegisterTypeLib$address() {
        return UnRegisterTypeLib.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT UnRegisterTypeLib(const GUID *const libID, WORD wVerMajor, WORD wVerMinor, LCID lcid, SYSKIND syskind)
     * }
     */
    public static int UnRegisterTypeLib(MemorySegment libID, short wVerMajor, short wVerMinor, int lcid, int syskind) {
        var mh$ = UnRegisterTypeLib.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UnRegisterTypeLib", libID, wVerMajor, wVerMinor, lcid, syskind);
            }
            return (int)mh$.invokeExact(libID, wVerMajor, wVerMinor, lcid, syskind);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegisterTypeLibForUser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RegisterTypeLibForUser");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT RegisterTypeLibForUser(ITypeLib *ptlib, OLECHAR *szFullPath, OLECHAR *szHelpDir)
     * }
     */
    public static FunctionDescriptor RegisterTypeLibForUser$descriptor() {
        return RegisterTypeLibForUser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT RegisterTypeLibForUser(ITypeLib *ptlib, OLECHAR *szFullPath, OLECHAR *szHelpDir)
     * }
     */
    public static MethodHandle RegisterTypeLibForUser$handle() {
        return RegisterTypeLibForUser.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT RegisterTypeLibForUser(ITypeLib *ptlib, OLECHAR *szFullPath, OLECHAR *szHelpDir)
     * }
     */
    public static MemorySegment RegisterTypeLibForUser$address() {
        return RegisterTypeLibForUser.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT RegisterTypeLibForUser(ITypeLib *ptlib, OLECHAR *szFullPath, OLECHAR *szHelpDir)
     * }
     */
    public static int RegisterTypeLibForUser(MemorySegment ptlib, MemorySegment szFullPath, MemorySegment szHelpDir) {
        var mh$ = RegisterTypeLibForUser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegisterTypeLibForUser", ptlib, szFullPath, szHelpDir);
            }
            return (int)mh$.invokeExact(ptlib, szFullPath, szHelpDir);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UnRegisterTypeLibForUser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_SHORT,
            wgl_h.C_SHORT,
            wgl_h.C_LONG,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("UnRegisterTypeLibForUser");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT UnRegisterTypeLibForUser(const GUID *const libID, WORD wMajorVerNum, WORD wMinorVerNum, LCID lcid, SYSKIND syskind)
     * }
     */
    public static FunctionDescriptor UnRegisterTypeLibForUser$descriptor() {
        return UnRegisterTypeLibForUser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT UnRegisterTypeLibForUser(const GUID *const libID, WORD wMajorVerNum, WORD wMinorVerNum, LCID lcid, SYSKIND syskind)
     * }
     */
    public static MethodHandle UnRegisterTypeLibForUser$handle() {
        return UnRegisterTypeLibForUser.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT UnRegisterTypeLibForUser(const GUID *const libID, WORD wMajorVerNum, WORD wMinorVerNum, LCID lcid, SYSKIND syskind)
     * }
     */
    public static MemorySegment UnRegisterTypeLibForUser$address() {
        return UnRegisterTypeLibForUser.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT UnRegisterTypeLibForUser(const GUID *const libID, WORD wMajorVerNum, WORD wMinorVerNum, LCID lcid, SYSKIND syskind)
     * }
     */
    public static int UnRegisterTypeLibForUser(MemorySegment libID, short wMajorVerNum, short wMinorVerNum, int lcid, int syskind) {
        var mh$ = UnRegisterTypeLibForUser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UnRegisterTypeLibForUser", libID, wMajorVerNum, wMinorVerNum, lcid, syskind);
            }
            return (int)mh$.invokeExact(libID, wMajorVerNum, wMinorVerNum, lcid, syskind);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateTypeLib {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CreateTypeLib");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateTypeLib(SYSKIND syskind, LPCOLESTR szFile, ICreateTypeLib **ppctlib)
     * }
     */
    public static FunctionDescriptor CreateTypeLib$descriptor() {
        return CreateTypeLib.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateTypeLib(SYSKIND syskind, LPCOLESTR szFile, ICreateTypeLib **ppctlib)
     * }
     */
    public static MethodHandle CreateTypeLib$handle() {
        return CreateTypeLib.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CreateTypeLib(SYSKIND syskind, LPCOLESTR szFile, ICreateTypeLib **ppctlib)
     * }
     */
    public static MemorySegment CreateTypeLib$address() {
        return CreateTypeLib.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CreateTypeLib(SYSKIND syskind, LPCOLESTR szFile, ICreateTypeLib **ppctlib)
     * }
     */
    public static int CreateTypeLib(int syskind, MemorySegment szFile, MemorySegment ppctlib) {
        var mh$ = CreateTypeLib.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateTypeLib", syskind, szFile, ppctlib);
            }
            return (int)mh$.invokeExact(syskind, szFile, ppctlib);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateTypeLib2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CreateTypeLib2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateTypeLib2(SYSKIND syskind, LPCOLESTR szFile, ICreateTypeLib2 **ppctlib)
     * }
     */
    public static FunctionDescriptor CreateTypeLib2$descriptor() {
        return CreateTypeLib2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateTypeLib2(SYSKIND syskind, LPCOLESTR szFile, ICreateTypeLib2 **ppctlib)
     * }
     */
    public static MethodHandle CreateTypeLib2$handle() {
        return CreateTypeLib2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CreateTypeLib2(SYSKIND syskind, LPCOLESTR szFile, ICreateTypeLib2 **ppctlib)
     * }
     */
    public static MemorySegment CreateTypeLib2$address() {
        return CreateTypeLib2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CreateTypeLib2(SYSKIND syskind, LPCOLESTR szFile, ICreateTypeLib2 **ppctlib)
     * }
     */
    public static int CreateTypeLib2(int syskind, MemorySegment szFile, MemorySegment ppctlib) {
        var mh$ = CreateTypeLib2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateTypeLib2", syskind, szFile, ppctlib);
            }
            return (int)mh$.invokeExact(syskind, szFile, ppctlib);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagPARAMDATA {
     *     OLECHAR *szName;
     *     VARTYPE vt;
     * } *LPPARAMDATA
     * }
     */
    public static final AddressLayout LPPARAMDATA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMETHODDATA {
     *     OLECHAR *szName;
     *     PARAMDATA *ppdata;
     *     DISPID dispid;
     *     UINT iMeth;
     *     CALLCONV cc;
     *     UINT cArgs;
     *     WORD wFlags;
     *     VARTYPE vtReturn;
     * } *LPMETHODDATA
     * }
     */
    public static final AddressLayout LPMETHODDATA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagINTERFACEDATA {
     *     METHODDATA *pmethdata;
     *     UINT cMembers;
     * } *LPINTERFACEDATA
     * }
     */
    public static final AddressLayout LPINTERFACEDATA = wgl_h.C_POINTER;

    private static class DispGetParam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DispGetParam");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT DispGetParam(DISPPARAMS *pdispparams, UINT position, VARTYPE vtTarg, VARIANT *pvarResult, UINT *puArgErr)
     * }
     */
    public static FunctionDescriptor DispGetParam$descriptor() {
        return DispGetParam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT DispGetParam(DISPPARAMS *pdispparams, UINT position, VARTYPE vtTarg, VARIANT *pvarResult, UINT *puArgErr)
     * }
     */
    public static MethodHandle DispGetParam$handle() {
        return DispGetParam.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT DispGetParam(DISPPARAMS *pdispparams, UINT position, VARTYPE vtTarg, VARIANT *pvarResult, UINT *puArgErr)
     * }
     */
    public static MemorySegment DispGetParam$address() {
        return DispGetParam.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT DispGetParam(DISPPARAMS *pdispparams, UINT position, VARTYPE vtTarg, VARIANT *pvarResult, UINT *puArgErr)
     * }
     */
    public static int DispGetParam(MemorySegment pdispparams, int position, short vtTarg, MemorySegment pvarResult, MemorySegment puArgErr) {
        var mh$ = DispGetParam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DispGetParam", pdispparams, position, vtTarg, pvarResult, puArgErr);
            }
            return (int)mh$.invokeExact(pdispparams, position, vtTarg, pvarResult, puArgErr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DispGetIDsOfNames {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DispGetIDsOfNames");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT DispGetIDsOfNames(ITypeInfo *ptinfo, LPOLESTR *rgszNames, UINT cNames, DISPID *rgdispid)
     * }
     */
    public static FunctionDescriptor DispGetIDsOfNames$descriptor() {
        return DispGetIDsOfNames.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT DispGetIDsOfNames(ITypeInfo *ptinfo, LPOLESTR *rgszNames, UINT cNames, DISPID *rgdispid)
     * }
     */
    public static MethodHandle DispGetIDsOfNames$handle() {
        return DispGetIDsOfNames.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT DispGetIDsOfNames(ITypeInfo *ptinfo, LPOLESTR *rgszNames, UINT cNames, DISPID *rgdispid)
     * }
     */
    public static MemorySegment DispGetIDsOfNames$address() {
        return DispGetIDsOfNames.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT DispGetIDsOfNames(ITypeInfo *ptinfo, LPOLESTR *rgszNames, UINT cNames, DISPID *rgdispid)
     * }
     */
    public static int DispGetIDsOfNames(MemorySegment ptinfo, MemorySegment rgszNames, int cNames, MemorySegment rgdispid) {
        var mh$ = DispGetIDsOfNames.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DispGetIDsOfNames", ptinfo, rgszNames, cNames, rgdispid);
            }
            return (int)mh$.invokeExact(ptinfo, rgszNames, cNames, rgdispid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DispInvoke {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DispInvoke");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT DispInvoke(void *_this, ITypeInfo *ptinfo, DISPID dispidMember, WORD wFlags, DISPPARAMS *pparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr)
     * }
     */
    public static FunctionDescriptor DispInvoke$descriptor() {
        return DispInvoke.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT DispInvoke(void *_this, ITypeInfo *ptinfo, DISPID dispidMember, WORD wFlags, DISPPARAMS *pparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr)
     * }
     */
    public static MethodHandle DispInvoke$handle() {
        return DispInvoke.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT DispInvoke(void *_this, ITypeInfo *ptinfo, DISPID dispidMember, WORD wFlags, DISPPARAMS *pparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr)
     * }
     */
    public static MemorySegment DispInvoke$address() {
        return DispInvoke.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT DispInvoke(void *_this, ITypeInfo *ptinfo, DISPID dispidMember, WORD wFlags, DISPPARAMS *pparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr)
     * }
     */
    public static int DispInvoke(MemorySegment _this, MemorySegment ptinfo, int dispidMember, short wFlags, MemorySegment pparams, MemorySegment pvarResult, MemorySegment pexcepinfo, MemorySegment puArgErr) {
        var mh$ = DispInvoke.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DispInvoke", _this, ptinfo, dispidMember, wFlags, pparams, pvarResult, pexcepinfo, puArgErr);
            }
            return (int)mh$.invokeExact(_this, ptinfo, dispidMember, wFlags, pparams, pvarResult, pexcepinfo, puArgErr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateDispTypeInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CreateDispTypeInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateDispTypeInfo(INTERFACEDATA *pidata, LCID lcid, ITypeInfo **pptinfo)
     * }
     */
    public static FunctionDescriptor CreateDispTypeInfo$descriptor() {
        return CreateDispTypeInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateDispTypeInfo(INTERFACEDATA *pidata, LCID lcid, ITypeInfo **pptinfo)
     * }
     */
    public static MethodHandle CreateDispTypeInfo$handle() {
        return CreateDispTypeInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CreateDispTypeInfo(INTERFACEDATA *pidata, LCID lcid, ITypeInfo **pptinfo)
     * }
     */
    public static MemorySegment CreateDispTypeInfo$address() {
        return CreateDispTypeInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CreateDispTypeInfo(INTERFACEDATA *pidata, LCID lcid, ITypeInfo **pptinfo)
     * }
     */
    public static int CreateDispTypeInfo(MemorySegment pidata, int lcid, MemorySegment pptinfo) {
        var mh$ = CreateDispTypeInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateDispTypeInfo", pidata, lcid, pptinfo);
            }
            return (int)mh$.invokeExact(pidata, lcid, pptinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateStdDispatch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CreateStdDispatch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateStdDispatch(IUnknown *punkOuter, void *pvThis, ITypeInfo *ptinfo, IUnknown **ppunkStdDisp)
     * }
     */
    public static FunctionDescriptor CreateStdDispatch$descriptor() {
        return CreateStdDispatch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateStdDispatch(IUnknown *punkOuter, void *pvThis, ITypeInfo *ptinfo, IUnknown **ppunkStdDisp)
     * }
     */
    public static MethodHandle CreateStdDispatch$handle() {
        return CreateStdDispatch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CreateStdDispatch(IUnknown *punkOuter, void *pvThis, ITypeInfo *ptinfo, IUnknown **ppunkStdDisp)
     * }
     */
    public static MemorySegment CreateStdDispatch$address() {
        return CreateStdDispatch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CreateStdDispatch(IUnknown *punkOuter, void *pvThis, ITypeInfo *ptinfo, IUnknown **ppunkStdDisp)
     * }
     */
    public static int CreateStdDispatch(MemorySegment punkOuter, MemorySegment pvThis, MemorySegment ptinfo, MemorySegment ppunkStdDisp) {
        var mh$ = CreateStdDispatch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateStdDispatch", punkOuter, pvThis, ptinfo, ppunkStdDisp);
            }
            return (int)mh$.invokeExact(punkOuter, pvThis, ptinfo, ppunkStdDisp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DispCallFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_INT,
            wgl_h.C_SHORT,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DispCallFunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT DispCallFunc(void *pvInstance, ULONG_PTR oVft, CALLCONV cc, VARTYPE vtReturn, UINT cActuals, VARTYPE *prgvt, VARIANTARG **prgpvarg, VARIANT *pvargResult)
     * }
     */
    public static FunctionDescriptor DispCallFunc$descriptor() {
        return DispCallFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT DispCallFunc(void *pvInstance, ULONG_PTR oVft, CALLCONV cc, VARTYPE vtReturn, UINT cActuals, VARTYPE *prgvt, VARIANTARG **prgpvarg, VARIANT *pvargResult)
     * }
     */
    public static MethodHandle DispCallFunc$handle() {
        return DispCallFunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT DispCallFunc(void *pvInstance, ULONG_PTR oVft, CALLCONV cc, VARTYPE vtReturn, UINT cActuals, VARTYPE *prgvt, VARIANTARG **prgpvarg, VARIANT *pvargResult)
     * }
     */
    public static MemorySegment DispCallFunc$address() {
        return DispCallFunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT DispCallFunc(void *pvInstance, ULONG_PTR oVft, CALLCONV cc, VARTYPE vtReturn, UINT cActuals, VARTYPE *prgvt, VARIANTARG **prgpvarg, VARIANT *pvargResult)
     * }
     */
    public static int DispCallFunc(MemorySegment pvInstance, long oVft, int cc, short vtReturn, int cActuals, MemorySegment prgvt, MemorySegment prgpvarg, MemorySegment pvargResult) {
        var mh$ = DispCallFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DispCallFunc", pvInstance, oVft, cc, vtReturn, cActuals, prgvt, prgpvarg, pvargResult);
            }
            return (int)mh$.invokeExact(pvInstance, oVft, cc, vtReturn, cActuals, prgvt, prgpvarg, pvargResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegisterActiveObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RegisterActiveObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT RegisterActiveObject(IUnknown *punk, const IID *const rclsid, DWORD dwFlags, DWORD *pdwRegister)
     * }
     */
    public static FunctionDescriptor RegisterActiveObject$descriptor() {
        return RegisterActiveObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT RegisterActiveObject(IUnknown *punk, const IID *const rclsid, DWORD dwFlags, DWORD *pdwRegister)
     * }
     */
    public static MethodHandle RegisterActiveObject$handle() {
        return RegisterActiveObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT RegisterActiveObject(IUnknown *punk, const IID *const rclsid, DWORD dwFlags, DWORD *pdwRegister)
     * }
     */
    public static MemorySegment RegisterActiveObject$address() {
        return RegisterActiveObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT RegisterActiveObject(IUnknown *punk, const IID *const rclsid, DWORD dwFlags, DWORD *pdwRegister)
     * }
     */
    public static int RegisterActiveObject(MemorySegment punk, MemorySegment rclsid, int dwFlags, MemorySegment pdwRegister) {
        var mh$ = RegisterActiveObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegisterActiveObject", punk, rclsid, dwFlags, pdwRegister);
            }
            return (int)mh$.invokeExact(punk, rclsid, dwFlags, pdwRegister);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RevokeActiveObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RevokeActiveObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT RevokeActiveObject(DWORD dwRegister, void *pvReserved)
     * }
     */
    public static FunctionDescriptor RevokeActiveObject$descriptor() {
        return RevokeActiveObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT RevokeActiveObject(DWORD dwRegister, void *pvReserved)
     * }
     */
    public static MethodHandle RevokeActiveObject$handle() {
        return RevokeActiveObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT RevokeActiveObject(DWORD dwRegister, void *pvReserved)
     * }
     */
    public static MemorySegment RevokeActiveObject$address() {
        return RevokeActiveObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT RevokeActiveObject(DWORD dwRegister, void *pvReserved)
     * }
     */
    public static int RevokeActiveObject(int dwRegister, MemorySegment pvReserved) {
        var mh$ = RevokeActiveObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RevokeActiveObject", dwRegister, pvReserved);
            }
            return (int)mh$.invokeExact(dwRegister, pvReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetActiveObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetActiveObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT GetActiveObject(const IID *const rclsid, void *pvReserved, IUnknown **ppunk)
     * }
     */
    public static FunctionDescriptor GetActiveObject$descriptor() {
        return GetActiveObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT GetActiveObject(const IID *const rclsid, void *pvReserved, IUnknown **ppunk)
     * }
     */
    public static MethodHandle GetActiveObject$handle() {
        return GetActiveObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT GetActiveObject(const IID *const rclsid, void *pvReserved, IUnknown **ppunk)
     * }
     */
    public static MemorySegment GetActiveObject$address() {
        return GetActiveObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT GetActiveObject(const IID *const rclsid, void *pvReserved, IUnknown **ppunk)
     * }
     */
    public static int GetActiveObject(MemorySegment rclsid, MemorySegment pvReserved, MemorySegment ppunk) {
        var mh$ = GetActiveObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetActiveObject", rclsid, pvReserved, ppunk);
            }
            return (int)mh$.invokeExact(rclsid, pvReserved, ppunk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetErrorInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SetErrorInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SetErrorInfo(ULONG dwReserved, IErrorInfo *perrinfo)
     * }
     */
    public static FunctionDescriptor SetErrorInfo$descriptor() {
        return SetErrorInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SetErrorInfo(ULONG dwReserved, IErrorInfo *perrinfo)
     * }
     */
    public static MethodHandle SetErrorInfo$handle() {
        return SetErrorInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SetErrorInfo(ULONG dwReserved, IErrorInfo *perrinfo)
     * }
     */
    public static MemorySegment SetErrorInfo$address() {
        return SetErrorInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SetErrorInfo(ULONG dwReserved, IErrorInfo *perrinfo)
     * }
     */
    public static int SetErrorInfo(int dwReserved, MemorySegment perrinfo) {
        var mh$ = SetErrorInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetErrorInfo", dwReserved, perrinfo);
            }
            return (int)mh$.invokeExact(dwReserved, perrinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetErrorInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetErrorInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT GetErrorInfo(ULONG dwReserved, IErrorInfo **pperrinfo)
     * }
     */
    public static FunctionDescriptor GetErrorInfo$descriptor() {
        return GetErrorInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT GetErrorInfo(ULONG dwReserved, IErrorInfo **pperrinfo)
     * }
     */
    public static MethodHandle GetErrorInfo$handle() {
        return GetErrorInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT GetErrorInfo(ULONG dwReserved, IErrorInfo **pperrinfo)
     * }
     */
    public static MemorySegment GetErrorInfo$address() {
        return GetErrorInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT GetErrorInfo(ULONG dwReserved, IErrorInfo **pperrinfo)
     * }
     */
    public static int GetErrorInfo(int dwReserved, MemorySegment pperrinfo) {
        var mh$ = GetErrorInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetErrorInfo", dwReserved, pperrinfo);
            }
            return (int)mh$.invokeExact(dwReserved, pperrinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateErrorInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CreateErrorInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateErrorInfo(ICreateErrorInfo **pperrinfo)
     * }
     */
    public static FunctionDescriptor CreateErrorInfo$descriptor() {
        return CreateErrorInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateErrorInfo(ICreateErrorInfo **pperrinfo)
     * }
     */
    public static MethodHandle CreateErrorInfo$handle() {
        return CreateErrorInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CreateErrorInfo(ICreateErrorInfo **pperrinfo)
     * }
     */
    public static MemorySegment CreateErrorInfo$address() {
        return CreateErrorInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CreateErrorInfo(ICreateErrorInfo **pperrinfo)
     * }
     */
    public static int CreateErrorInfo(MemorySegment pperrinfo) {
        var mh$ = CreateErrorInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateErrorInfo", pperrinfo);
            }
            return (int)mh$.invokeExact(pperrinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetRecordInfoFromTypeInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetRecordInfoFromTypeInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT GetRecordInfoFromTypeInfo(ITypeInfo *pTypeInfo, IRecordInfo **ppRecInfo)
     * }
     */
    public static FunctionDescriptor GetRecordInfoFromTypeInfo$descriptor() {
        return GetRecordInfoFromTypeInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT GetRecordInfoFromTypeInfo(ITypeInfo *pTypeInfo, IRecordInfo **ppRecInfo)
     * }
     */
    public static MethodHandle GetRecordInfoFromTypeInfo$handle() {
        return GetRecordInfoFromTypeInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT GetRecordInfoFromTypeInfo(ITypeInfo *pTypeInfo, IRecordInfo **ppRecInfo)
     * }
     */
    public static MemorySegment GetRecordInfoFromTypeInfo$address() {
        return GetRecordInfoFromTypeInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT GetRecordInfoFromTypeInfo(ITypeInfo *pTypeInfo, IRecordInfo **ppRecInfo)
     * }
     */
    public static int GetRecordInfoFromTypeInfo(MemorySegment pTypeInfo, MemorySegment ppRecInfo) {
        var mh$ = GetRecordInfoFromTypeInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetRecordInfoFromTypeInfo", pTypeInfo, ppRecInfo);
            }
            return (int)mh$.invokeExact(pTypeInfo, ppRecInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetRecordInfoFromGuids {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetRecordInfoFromGuids");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT GetRecordInfoFromGuids(const GUID *const rGuidTypeLib, ULONG uVerMajor, ULONG uVerMinor, LCID lcid, const GUID *const rGuidTypeInfo, IRecordInfo **ppRecInfo)
     * }
     */
    public static FunctionDescriptor GetRecordInfoFromGuids$descriptor() {
        return GetRecordInfoFromGuids.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT GetRecordInfoFromGuids(const GUID *const rGuidTypeLib, ULONG uVerMajor, ULONG uVerMinor, LCID lcid, const GUID *const rGuidTypeInfo, IRecordInfo **ppRecInfo)
     * }
     */
    public static MethodHandle GetRecordInfoFromGuids$handle() {
        return GetRecordInfoFromGuids.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT GetRecordInfoFromGuids(const GUID *const rGuidTypeLib, ULONG uVerMajor, ULONG uVerMinor, LCID lcid, const GUID *const rGuidTypeInfo, IRecordInfo **ppRecInfo)
     * }
     */
    public static MemorySegment GetRecordInfoFromGuids$address() {
        return GetRecordInfoFromGuids.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT GetRecordInfoFromGuids(const GUID *const rGuidTypeLib, ULONG uVerMajor, ULONG uVerMinor, LCID lcid, const GUID *const rGuidTypeInfo, IRecordInfo **ppRecInfo)
     * }
     */
    public static int GetRecordInfoFromGuids(MemorySegment rGuidTypeLib, int uVerMajor, int uVerMinor, int lcid, MemorySegment rGuidTypeInfo, MemorySegment ppRecInfo) {
        var mh$ = GetRecordInfoFromGuids.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetRecordInfoFromGuids", rGuidTypeLib, uVerMajor, uVerMinor, lcid, rGuidTypeInfo, ppRecInfo);
            }
            return (int)mh$.invokeExact(rGuidTypeLib, uVerMajor, uVerMinor, lcid, rGuidTypeInfo, ppRecInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OaBuildVersion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("OaBuildVersion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ULONG OaBuildVersion()
     * }
     */
    public static FunctionDescriptor OaBuildVersion$descriptor() {
        return OaBuildVersion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ULONG OaBuildVersion()
     * }
     */
    public static MethodHandle OaBuildVersion$handle() {
        return OaBuildVersion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ULONG OaBuildVersion()
     * }
     */
    public static MemorySegment OaBuildVersion$address() {
        return OaBuildVersion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ULONG OaBuildVersion()
     * }
     */
    public static int OaBuildVersion() {
        var mh$ = OaBuildVersion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OaBuildVersion");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ClearCustData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ClearCustData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ClearCustData(LPCUSTDATA pCustData)
     * }
     */
    public static FunctionDescriptor ClearCustData$descriptor() {
        return ClearCustData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ClearCustData(LPCUSTDATA pCustData)
     * }
     */
    public static MethodHandle ClearCustData$handle() {
        return ClearCustData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ClearCustData(LPCUSTDATA pCustData)
     * }
     */
    public static MemorySegment ClearCustData$address() {
        return ClearCustData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ClearCustData(LPCUSTDATA pCustData)
     * }
     */
    public static void ClearCustData(MemorySegment pCustData) {
        var mh$ = ClearCustData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ClearCustData", pCustData);
            }
            mh$.invokeExact(pCustData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OaEnablePerUserTLibRegistration {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("OaEnablePerUserTLibRegistration");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void OaEnablePerUserTLibRegistration()
     * }
     */
    public static FunctionDescriptor OaEnablePerUserTLibRegistration$descriptor() {
        return OaEnablePerUserTLibRegistration.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void OaEnablePerUserTLibRegistration()
     * }
     */
    public static MethodHandle OaEnablePerUserTLibRegistration$handle() {
        return OaEnablePerUserTLibRegistration.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void OaEnablePerUserTLibRegistration()
     * }
     */
    public static MemorySegment OaEnablePerUserTLibRegistration$address() {
        return OaEnablePerUserTLibRegistration.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void OaEnablePerUserTLibRegistration()
     * }
     */
    public static void OaEnablePerUserTLibRegistration() {
        var mh$ = OaEnablePerUserTLibRegistration.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OaEnablePerUserTLibRegistration");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleBuildVersion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("OleBuildVersion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern DWORD OleBuildVersion()
     * }
     */
    public static FunctionDescriptor OleBuildVersion$descriptor() {
        return OleBuildVersion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern DWORD OleBuildVersion()
     * }
     */
    public static MethodHandle OleBuildVersion$handle() {
        return OleBuildVersion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern DWORD OleBuildVersion()
     * }
     */
    public static MemorySegment OleBuildVersion$address() {
        return OleBuildVersion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern DWORD OleBuildVersion()
     * }
     */
    public static int OleBuildVersion() {
        var mh$ = OleBuildVersion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleBuildVersion");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WriteFmtUserTypeStg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("WriteFmtUserTypeStg");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT WriteFmtUserTypeStg(LPSTORAGE pstg, CLIPFORMAT cf, LPOLESTR lpszUserType)
     * }
     */
    public static FunctionDescriptor WriteFmtUserTypeStg$descriptor() {
        return WriteFmtUserTypeStg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT WriteFmtUserTypeStg(LPSTORAGE pstg, CLIPFORMAT cf, LPOLESTR lpszUserType)
     * }
     */
    public static MethodHandle WriteFmtUserTypeStg$handle() {
        return WriteFmtUserTypeStg.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT WriteFmtUserTypeStg(LPSTORAGE pstg, CLIPFORMAT cf, LPOLESTR lpszUserType)
     * }
     */
    public static MemorySegment WriteFmtUserTypeStg$address() {
        return WriteFmtUserTypeStg.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT WriteFmtUserTypeStg(LPSTORAGE pstg, CLIPFORMAT cf, LPOLESTR lpszUserType)
     * }
     */
    public static int WriteFmtUserTypeStg(MemorySegment pstg, short cf, MemorySegment lpszUserType) {
        var mh$ = WriteFmtUserTypeStg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WriteFmtUserTypeStg", pstg, cf, lpszUserType);
            }
            return (int)mh$.invokeExact(pstg, cf, lpszUserType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ReadFmtUserTypeStg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ReadFmtUserTypeStg");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT ReadFmtUserTypeStg(LPSTORAGE pstg, CLIPFORMAT *pcf, LPOLESTR *lplpszUserType)
     * }
     */
    public static FunctionDescriptor ReadFmtUserTypeStg$descriptor() {
        return ReadFmtUserTypeStg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT ReadFmtUserTypeStg(LPSTORAGE pstg, CLIPFORMAT *pcf, LPOLESTR *lplpszUserType)
     * }
     */
    public static MethodHandle ReadFmtUserTypeStg$handle() {
        return ReadFmtUserTypeStg.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT ReadFmtUserTypeStg(LPSTORAGE pstg, CLIPFORMAT *pcf, LPOLESTR *lplpszUserType)
     * }
     */
    public static MemorySegment ReadFmtUserTypeStg$address() {
        return ReadFmtUserTypeStg.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT ReadFmtUserTypeStg(LPSTORAGE pstg, CLIPFORMAT *pcf, LPOLESTR *lplpszUserType)
     * }
     */
    public static int ReadFmtUserTypeStg(MemorySegment pstg, MemorySegment pcf, MemorySegment lplpszUserType) {
        var mh$ = ReadFmtUserTypeStg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ReadFmtUserTypeStg", pstg, pcf, lplpszUserType);
            }
            return (int)mh$.invokeExact(pstg, pcf, lplpszUserType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleInitialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("OleInitialize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleInitialize(LPVOID pvReserved)
     * }
     */
    public static FunctionDescriptor OleInitialize$descriptor() {
        return OleInitialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleInitialize(LPVOID pvReserved)
     * }
     */
    public static MethodHandle OleInitialize$handle() {
        return OleInitialize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleInitialize(LPVOID pvReserved)
     * }
     */
    public static MemorySegment OleInitialize$address() {
        return OleInitialize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleInitialize(LPVOID pvReserved)
     * }
     */
    public static int OleInitialize(MemorySegment pvReserved) {
        var mh$ = OleInitialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleInitialize", pvReserved);
            }
            return (int)mh$.invokeExact(pvReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleUninitialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("OleUninitialize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void OleUninitialize()
     * }
     */
    public static FunctionDescriptor OleUninitialize$descriptor() {
        return OleUninitialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void OleUninitialize()
     * }
     */
    public static MethodHandle OleUninitialize$handle() {
        return OleUninitialize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void OleUninitialize()
     * }
     */
    public static MemorySegment OleUninitialize$address() {
        return OleUninitialize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void OleUninitialize()
     * }
     */
    public static void OleUninitialize() {
        var mh$ = OleUninitialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleUninitialize");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleQueryLinkFromData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("OleQueryLinkFromData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleQueryLinkFromData(LPDATAOBJECT pSrcDataObject)
     * }
     */
    public static FunctionDescriptor OleQueryLinkFromData$descriptor() {
        return OleQueryLinkFromData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleQueryLinkFromData(LPDATAOBJECT pSrcDataObject)
     * }
     */
    public static MethodHandle OleQueryLinkFromData$handle() {
        return OleQueryLinkFromData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleQueryLinkFromData(LPDATAOBJECT pSrcDataObject)
     * }
     */
    public static MemorySegment OleQueryLinkFromData$address() {
        return OleQueryLinkFromData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleQueryLinkFromData(LPDATAOBJECT pSrcDataObject)
     * }
     */
    public static int OleQueryLinkFromData(MemorySegment pSrcDataObject) {
        var mh$ = OleQueryLinkFromData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleQueryLinkFromData", pSrcDataObject);
            }
            return (int)mh$.invokeExact(pSrcDataObject);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleQueryCreateFromData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("OleQueryCreateFromData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleQueryCreateFromData(LPDATAOBJECT pSrcDataObject)
     * }
     */
    public static FunctionDescriptor OleQueryCreateFromData$descriptor() {
        return OleQueryCreateFromData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleQueryCreateFromData(LPDATAOBJECT pSrcDataObject)
     * }
     */
    public static MethodHandle OleQueryCreateFromData$handle() {
        return OleQueryCreateFromData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleQueryCreateFromData(LPDATAOBJECT pSrcDataObject)
     * }
     */
    public static MemorySegment OleQueryCreateFromData$address() {
        return OleQueryCreateFromData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleQueryCreateFromData(LPDATAOBJECT pSrcDataObject)
     * }
     */
    public static int OleQueryCreateFromData(MemorySegment pSrcDataObject) {
        var mh$ = OleQueryCreateFromData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleQueryCreateFromData", pSrcDataObject);
            }
            return (int)mh$.invokeExact(pSrcDataObject);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("OleCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreate(const IID *const rclsid, const IID *const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleCreate$descriptor() {
        return OleCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreate(const IID *const rclsid, const IID *const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleCreate$handle() {
        return OleCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleCreate(const IID *const rclsid, const IID *const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MemorySegment OleCreate$address() {
        return OleCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreate(const IID *const rclsid, const IID *const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static int OleCreate(MemorySegment rclsid, MemorySegment riid, int renderopt, MemorySegment pFormatEtc, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreate", rclsid, riid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj);
            }
            return (int)mh$.invokeExact(rclsid, riid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("OleCreateEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateEx(const IID *const rclsid, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleCreateEx$descriptor() {
        return OleCreateEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateEx(const IID *const rclsid, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleCreateEx$handle() {
        return OleCreateEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateEx(const IID *const rclsid, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MemorySegment OleCreateEx$address() {
        return OleCreateEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateEx(const IID *const rclsid, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static int OleCreateEx(MemorySegment rclsid, MemorySegment riid, int dwFlags, int renderopt, int cFormats, MemorySegment rgAdvf, MemorySegment rgFormatEtc, MemorySegment lpAdviseSink, MemorySegment rgdwConnection, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateEx", rclsid, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
            }
            return (int)mh$.invokeExact(rclsid, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateFromData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("OleCreateFromData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateFromData(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleCreateFromData$descriptor() {
        return OleCreateFromData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateFromData(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleCreateFromData$handle() {
        return OleCreateFromData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateFromData(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MemorySegment OleCreateFromData$address() {
        return OleCreateFromData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateFromData(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static int OleCreateFromData(MemorySegment pSrcDataObj, MemorySegment riid, int renderopt, MemorySegment pFormatEtc, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateFromData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateFromData", pSrcDataObj, riid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj);
            }
            return (int)mh$.invokeExact(pSrcDataObj, riid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateFromDataEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("OleCreateFromDataEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateFromDataEx(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleCreateFromDataEx$descriptor() {
        return OleCreateFromDataEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateFromDataEx(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleCreateFromDataEx$handle() {
        return OleCreateFromDataEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateFromDataEx(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MemorySegment OleCreateFromDataEx$address() {
        return OleCreateFromDataEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateFromDataEx(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static int OleCreateFromDataEx(MemorySegment pSrcDataObj, MemorySegment riid, int dwFlags, int renderopt, int cFormats, MemorySegment rgAdvf, MemorySegment rgFormatEtc, MemorySegment lpAdviseSink, MemorySegment rgdwConnection, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateFromDataEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateFromDataEx", pSrcDataObj, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
            }
            return (int)mh$.invokeExact(pSrcDataObj, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateLinkFromData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("OleCreateLinkFromData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkFromData(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleCreateLinkFromData$descriptor() {
        return OleCreateLinkFromData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkFromData(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleCreateLinkFromData$handle() {
        return OleCreateLinkFromData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkFromData(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MemorySegment OleCreateLinkFromData$address() {
        return OleCreateLinkFromData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkFromData(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static int OleCreateLinkFromData(MemorySegment pSrcDataObj, MemorySegment riid, int renderopt, MemorySegment pFormatEtc, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateLinkFromData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateLinkFromData", pSrcDataObj, riid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj);
            }
            return (int)mh$.invokeExact(pSrcDataObj, riid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateLinkFromDataEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("OleCreateLinkFromDataEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkFromDataEx(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleCreateLinkFromDataEx$descriptor() {
        return OleCreateLinkFromDataEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkFromDataEx(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleCreateLinkFromDataEx$handle() {
        return OleCreateLinkFromDataEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkFromDataEx(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MemorySegment OleCreateLinkFromDataEx$address() {
        return OleCreateLinkFromDataEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkFromDataEx(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static int OleCreateLinkFromDataEx(MemorySegment pSrcDataObj, MemorySegment riid, int dwFlags, int renderopt, int cFormats, MemorySegment rgAdvf, MemorySegment rgFormatEtc, MemorySegment lpAdviseSink, MemorySegment rgdwConnection, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateLinkFromDataEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateLinkFromDataEx", pSrcDataObj, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
            }
            return (int)mh$.invokeExact(pSrcDataObj, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateStaticFromData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("OleCreateStaticFromData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateStaticFromData(LPDATAOBJECT pSrcDataObj, const IID *const iid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleCreateStaticFromData$descriptor() {
        return OleCreateStaticFromData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateStaticFromData(LPDATAOBJECT pSrcDataObj, const IID *const iid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleCreateStaticFromData$handle() {
        return OleCreateStaticFromData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateStaticFromData(LPDATAOBJECT pSrcDataObj, const IID *const iid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MemorySegment OleCreateStaticFromData$address() {
        return OleCreateStaticFromData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateStaticFromData(LPDATAOBJECT pSrcDataObj, const IID *const iid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static int OleCreateStaticFromData(MemorySegment pSrcDataObj, MemorySegment iid, int renderopt, MemorySegment pFormatEtc, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateStaticFromData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateStaticFromData", pSrcDataObj, iid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj);
            }
            return (int)mh$.invokeExact(pSrcDataObj, iid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateLink {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("OleCreateLink");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLink(LPMONIKER pmkLinkSrc, const IID *const riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleCreateLink$descriptor() {
        return OleCreateLink.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLink(LPMONIKER pmkLinkSrc, const IID *const riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleCreateLink$handle() {
        return OleCreateLink.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLink(LPMONIKER pmkLinkSrc, const IID *const riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MemorySegment OleCreateLink$address() {
        return OleCreateLink.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateLink(LPMONIKER pmkLinkSrc, const IID *const riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static int OleCreateLink(MemorySegment pmkLinkSrc, MemorySegment riid, int renderopt, MemorySegment lpFormatEtc, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateLink.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateLink", pmkLinkSrc, riid, renderopt, lpFormatEtc, pClientSite, pStg, ppvObj);
            }
            return (int)mh$.invokeExact(pmkLinkSrc, riid, renderopt, lpFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateLinkEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("OleCreateLinkEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkEx(LPMONIKER pmkLinkSrc, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleCreateLinkEx$descriptor() {
        return OleCreateLinkEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkEx(LPMONIKER pmkLinkSrc, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleCreateLinkEx$handle() {
        return OleCreateLinkEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkEx(LPMONIKER pmkLinkSrc, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MemorySegment OleCreateLinkEx$address() {
        return OleCreateLinkEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkEx(LPMONIKER pmkLinkSrc, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static int OleCreateLinkEx(MemorySegment pmkLinkSrc, MemorySegment riid, int dwFlags, int renderopt, int cFormats, MemorySegment rgAdvf, MemorySegment rgFormatEtc, MemorySegment lpAdviseSink, MemorySegment rgdwConnection, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateLinkEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateLinkEx", pmkLinkSrc, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
            }
            return (int)mh$.invokeExact(pmkLinkSrc, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateLinkToFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("OleCreateLinkToFile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkToFile(LPCOLESTR lpszFileName, const IID *const riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleCreateLinkToFile$descriptor() {
        return OleCreateLinkToFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkToFile(LPCOLESTR lpszFileName, const IID *const riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleCreateLinkToFile$handle() {
        return OleCreateLinkToFile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkToFile(LPCOLESTR lpszFileName, const IID *const riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MemorySegment OleCreateLinkToFile$address() {
        return OleCreateLinkToFile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkToFile(LPCOLESTR lpszFileName, const IID *const riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static int OleCreateLinkToFile(MemorySegment lpszFileName, MemorySegment riid, int renderopt, MemorySegment lpFormatEtc, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateLinkToFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateLinkToFile", lpszFileName, riid, renderopt, lpFormatEtc, pClientSite, pStg, ppvObj);
            }
            return (int)mh$.invokeExact(lpszFileName, riid, renderopt, lpFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateLinkToFileEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("OleCreateLinkToFileEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkToFileEx(LPCOLESTR lpszFileName, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleCreateLinkToFileEx$descriptor() {
        return OleCreateLinkToFileEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkToFileEx(LPCOLESTR lpszFileName, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleCreateLinkToFileEx$handle() {
        return OleCreateLinkToFileEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkToFileEx(LPCOLESTR lpszFileName, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MemorySegment OleCreateLinkToFileEx$address() {
        return OleCreateLinkToFileEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkToFileEx(LPCOLESTR lpszFileName, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static int OleCreateLinkToFileEx(MemorySegment lpszFileName, MemorySegment riid, int dwFlags, int renderopt, int cFormats, MemorySegment rgAdvf, MemorySegment rgFormatEtc, MemorySegment lpAdviseSink, MemorySegment rgdwConnection, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateLinkToFileEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateLinkToFileEx", lpszFileName, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
            }
            return (int)mh$.invokeExact(lpszFileName, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

