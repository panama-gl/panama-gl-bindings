// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _CSV_NAMESPACE_INFO {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Version"),
        Constants$root.C_LONG$LAYOUT.withName("DeviceNumber"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("StartingOffset"),
        Constants$root.C_LONG$LAYOUT.withName("SectorSize"),
        MemoryLayout.paddingLayout(32)
    ).withName("_CSV_NAMESPACE_INFO");
    public static MemoryLayout $LAYOUT() {
        return _CSV_NAMESPACE_INFO.$struct$LAYOUT;
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _CSV_NAMESPACE_INFO.Version$VH;
    }
    public static int Version$get(MemorySegment seg) {
        return (int)_CSV_NAMESPACE_INFO.Version$VH.get(seg);
    }
    public static void Version$set( MemorySegment seg, int x) {
        _CSV_NAMESPACE_INFO.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)_CSV_NAMESPACE_INFO.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        _CSV_NAMESPACE_INFO.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DeviceNumber$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DeviceNumber"));
    public static VarHandle DeviceNumber$VH() {
        return _CSV_NAMESPACE_INFO.DeviceNumber$VH;
    }
    public static int DeviceNumber$get(MemorySegment seg) {
        return (int)_CSV_NAMESPACE_INFO.DeviceNumber$VH.get(seg);
    }
    public static void DeviceNumber$set( MemorySegment seg, int x) {
        _CSV_NAMESPACE_INFO.DeviceNumber$VH.set(seg, x);
    }
    public static int DeviceNumber$get(MemorySegment seg, long index) {
        return (int)_CSV_NAMESPACE_INFO.DeviceNumber$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DeviceNumber$set(MemorySegment seg, long index, int x) {
        _CSV_NAMESPACE_INFO.DeviceNumber$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment StartingOffset$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    static final VarHandle SectorSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SectorSize"));
    public static VarHandle SectorSize$VH() {
        return _CSV_NAMESPACE_INFO.SectorSize$VH;
    }
    public static int SectorSize$get(MemorySegment seg) {
        return (int)_CSV_NAMESPACE_INFO.SectorSize$VH.get(seg);
    }
    public static void SectorSize$set( MemorySegment seg, int x) {
        _CSV_NAMESPACE_INFO.SectorSize$VH.set(seg, x);
    }
    public static int SectorSize$get(MemorySegment seg, long index) {
        return (int)_CSV_NAMESPACE_INFO.SectorSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SectorSize$set(MemorySegment seg, long index, int x) {
        _CSV_NAMESPACE_INFO.SectorSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


