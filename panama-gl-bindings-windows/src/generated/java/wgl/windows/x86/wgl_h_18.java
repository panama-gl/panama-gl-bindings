// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class wgl_h_18 extends wgl_h_19 {

    wgl_h_18() {
        // Should not be called directly
    }
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_DEVICE_SPECIFIC_INFO {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD NumberOfProperties;
     *     SCM_PD_DEVICE_SPECIFIC_PROPERTY DeviceSpecificProperties[1];
     * } *PSCM_PD_DEVICE_SPECIFIC_INFO
     * }
     */
    public static final AddressLayout PSCM_PD_DEVICE_SPECIFIC_INFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_FIRMWARE_SLOT_INFO {
     *     DWORD Version;
     *     DWORD Size;
     *     BYTE SlotNumber;
     *     BYTE ReadOnly : 1;
     *     BYTE Reserved0 : 7;
     *     BYTE Reserved1[6];
     *     BYTE Revision[32];
     * } *PSCM_PD_FIRMWARE_SLOT_INFO
     * }
     */
    public static final AddressLayout PSCM_PD_FIRMWARE_SLOT_INFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_FIRMWARE_INFO {
     *     DWORD Version;
     *     DWORD Size;
     *     BYTE ActiveSlot;
     *     BYTE NextActiveSlot;
     *     BYTE SlotCount;
     *     SCM_PD_FIRMWARE_SLOT_INFO Slots[1];
     * } *PSCM_PD_FIRMWARE_INFO
     * }
     */
    public static final AddressLayout PSCM_PD_FIRMWARE_INFO = wgl_h.C_POINTER;
    private static final int ScmPhysicalDeviceHealth_Unknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_HEALTH_STATUS.ScmPhysicalDeviceHealth_Unknown = 0
     * }
     */
    public static int ScmPhysicalDeviceHealth_Unknown() {
        return ScmPhysicalDeviceHealth_Unknown;
    }
    private static final int ScmPhysicalDeviceHealth_Unhealthy = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_HEALTH_STATUS.ScmPhysicalDeviceHealth_Unhealthy = 1
     * }
     */
    public static int ScmPhysicalDeviceHealth_Unhealthy() {
        return ScmPhysicalDeviceHealth_Unhealthy;
    }
    private static final int ScmPhysicalDeviceHealth_Warning = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_HEALTH_STATUS.ScmPhysicalDeviceHealth_Warning = 2
     * }
     */
    public static int ScmPhysicalDeviceHealth_Warning() {
        return ScmPhysicalDeviceHealth_Warning;
    }
    private static final int ScmPhysicalDeviceHealth_Healthy = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_HEALTH_STATUS.ScmPhysicalDeviceHealth_Healthy = 3
     * }
     */
    public static int ScmPhysicalDeviceHealth_Healthy() {
        return ScmPhysicalDeviceHealth_Healthy;
    }
    private static final int ScmPhysicalDeviceHealth_Max = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_HEALTH_STATUS.ScmPhysicalDeviceHealth_Max = 4
     * }
     */
    public static int ScmPhysicalDeviceHealth_Max() {
        return ScmPhysicalDeviceHealth_Max;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _SCM_PD_HEALTH_STATUS {
     *     ScmPhysicalDeviceHealth_Unknown = 0,
     *     ScmPhysicalDeviceHealth_Unhealthy,
     *     ScmPhysicalDeviceHealth_Warning,
     *     ScmPhysicalDeviceHealth_Healthy,
     *     ScmPhysicalDeviceHealth_Max
     * } *PSCM_PD_HEALTH_STATUS
     * }
     */
    public static final AddressLayout PSCM_PD_HEALTH_STATUS = wgl_h.C_POINTER;
    private static final int ScmPhysicalDeviceOpStatus_Unknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS.ScmPhysicalDeviceOpStatus_Unknown = 0
     * }
     */
    public static int ScmPhysicalDeviceOpStatus_Unknown() {
        return ScmPhysicalDeviceOpStatus_Unknown;
    }
    private static final int ScmPhysicalDeviceOpStatus_Ok = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS.ScmPhysicalDeviceOpStatus_Ok = 1
     * }
     */
    public static int ScmPhysicalDeviceOpStatus_Ok() {
        return ScmPhysicalDeviceOpStatus_Ok;
    }
    private static final int ScmPhysicalDeviceOpStatus_PredictingFailure = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS.ScmPhysicalDeviceOpStatus_PredictingFailure = 2
     * }
     */
    public static int ScmPhysicalDeviceOpStatus_PredictingFailure() {
        return ScmPhysicalDeviceOpStatus_PredictingFailure;
    }
    private static final int ScmPhysicalDeviceOpStatus_InService = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS.ScmPhysicalDeviceOpStatus_InService = 3
     * }
     */
    public static int ScmPhysicalDeviceOpStatus_InService() {
        return ScmPhysicalDeviceOpStatus_InService;
    }
    private static final int ScmPhysicalDeviceOpStatus_HardwareError = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS.ScmPhysicalDeviceOpStatus_HardwareError = 4
     * }
     */
    public static int ScmPhysicalDeviceOpStatus_HardwareError() {
        return ScmPhysicalDeviceOpStatus_HardwareError;
    }
    private static final int ScmPhysicalDeviceOpStatus_NotUsable = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS.ScmPhysicalDeviceOpStatus_NotUsable = 5
     * }
     */
    public static int ScmPhysicalDeviceOpStatus_NotUsable() {
        return ScmPhysicalDeviceOpStatus_NotUsable;
    }
    private static final int ScmPhysicalDeviceOpStatus_TransientError = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS.ScmPhysicalDeviceOpStatus_TransientError = 6
     * }
     */
    public static int ScmPhysicalDeviceOpStatus_TransientError() {
        return ScmPhysicalDeviceOpStatus_TransientError;
    }
    private static final int ScmPhysicalDeviceOpStatus_Missing = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS.ScmPhysicalDeviceOpStatus_Missing = 7
     * }
     */
    public static int ScmPhysicalDeviceOpStatus_Missing() {
        return ScmPhysicalDeviceOpStatus_Missing;
    }
    private static final int ScmPhysicalDeviceOpStatus_Max = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS.ScmPhysicalDeviceOpStatus_Max = 8
     * }
     */
    public static int ScmPhysicalDeviceOpStatus_Max() {
        return ScmPhysicalDeviceOpStatus_Max;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _SCM_PD_OPERATIONAL_STATUS {
     *     ScmPhysicalDeviceOpStatus_Unknown = 0,
     *     ScmPhysicalDeviceOpStatus_Ok,
     *     ScmPhysicalDeviceOpStatus_PredictingFailure,
     *     ScmPhysicalDeviceOpStatus_InService,
     *     ScmPhysicalDeviceOpStatus_HardwareError,
     *     ScmPhysicalDeviceOpStatus_NotUsable,
     *     ScmPhysicalDeviceOpStatus_TransientError,
     *     ScmPhysicalDeviceOpStatus_Missing,
     *     ScmPhysicalDeviceOpStatus_Max
     * } *PSCM_PD_OPERATIONAL_STATUS
     * }
     */
    public static final AddressLayout PSCM_PD_OPERATIONAL_STATUS = wgl_h.C_POINTER;
    private static final int ScmPhysicalDeviceOpReason_Unknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_Unknown = 0
     * }
     */
    public static int ScmPhysicalDeviceOpReason_Unknown() {
        return ScmPhysicalDeviceOpReason_Unknown;
    }
    private static final int ScmPhysicalDeviceOpReason_Media = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_Media = 1
     * }
     */
    public static int ScmPhysicalDeviceOpReason_Media() {
        return ScmPhysicalDeviceOpReason_Media;
    }
    private static final int ScmPhysicalDeviceOpReason_ThresholdExceeded = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_ThresholdExceeded = 2
     * }
     */
    public static int ScmPhysicalDeviceOpReason_ThresholdExceeded() {
        return ScmPhysicalDeviceOpReason_ThresholdExceeded;
    }
    private static final int ScmPhysicalDeviceOpReason_LostData = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_LostData = 3
     * }
     */
    public static int ScmPhysicalDeviceOpReason_LostData() {
        return ScmPhysicalDeviceOpReason_LostData;
    }
    private static final int ScmPhysicalDeviceOpReason_EnergySource = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_EnergySource = 4
     * }
     */
    public static int ScmPhysicalDeviceOpReason_EnergySource() {
        return ScmPhysicalDeviceOpReason_EnergySource;
    }
    private static final int ScmPhysicalDeviceOpReason_Configuration = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_Configuration = 5
     * }
     */
    public static int ScmPhysicalDeviceOpReason_Configuration() {
        return ScmPhysicalDeviceOpReason_Configuration;
    }
    private static final int ScmPhysicalDeviceOpReason_DeviceController = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_DeviceController = 6
     * }
     */
    public static int ScmPhysicalDeviceOpReason_DeviceController() {
        return ScmPhysicalDeviceOpReason_DeviceController;
    }
    private static final int ScmPhysicalDeviceOpReason_MediaController = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_MediaController = 7
     * }
     */
    public static int ScmPhysicalDeviceOpReason_MediaController() {
        return ScmPhysicalDeviceOpReason_MediaController;
    }
    private static final int ScmPhysicalDeviceOpReason_Component = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_Component = 8
     * }
     */
    public static int ScmPhysicalDeviceOpReason_Component() {
        return ScmPhysicalDeviceOpReason_Component;
    }
    private static final int ScmPhysicalDeviceOpReason_BackgroundOperation = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_BackgroundOperation = 9
     * }
     */
    public static int ScmPhysicalDeviceOpReason_BackgroundOperation() {
        return ScmPhysicalDeviceOpReason_BackgroundOperation;
    }
    private static final int ScmPhysicalDeviceOpReason_InvalidFirmware = (int)10L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_InvalidFirmware = 10
     * }
     */
    public static int ScmPhysicalDeviceOpReason_InvalidFirmware() {
        return ScmPhysicalDeviceOpReason_InvalidFirmware;
    }
    private static final int ScmPhysicalDeviceOpReason_HealthCheck = (int)11L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_HealthCheck = 11
     * }
     */
    public static int ScmPhysicalDeviceOpReason_HealthCheck() {
        return ScmPhysicalDeviceOpReason_HealthCheck;
    }
    private static final int ScmPhysicalDeviceOpReason_LostDataPersistence = (int)12L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_LostDataPersistence = 12
     * }
     */
    public static int ScmPhysicalDeviceOpReason_LostDataPersistence() {
        return ScmPhysicalDeviceOpReason_LostDataPersistence;
    }
    private static final int ScmPhysicalDeviceOpReason_DisabledByPlatform = (int)13L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_DisabledByPlatform = 13
     * }
     */
    public static int ScmPhysicalDeviceOpReason_DisabledByPlatform() {
        return ScmPhysicalDeviceOpReason_DisabledByPlatform;
    }
    private static final int ScmPhysicalDeviceOpReason_PermanentError = (int)14L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_PermanentError = 14
     * }
     */
    public static int ScmPhysicalDeviceOpReason_PermanentError() {
        return ScmPhysicalDeviceOpReason_PermanentError;
    }
    private static final int ScmPhysicalDeviceOpReason_LostWritePersistence = (int)15L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_LostWritePersistence = 15
     * }
     */
    public static int ScmPhysicalDeviceOpReason_LostWritePersistence() {
        return ScmPhysicalDeviceOpReason_LostWritePersistence;
    }
    private static final int ScmPhysicalDeviceOpReason_FatalError = (int)16L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_FatalError = 16
     * }
     */
    public static int ScmPhysicalDeviceOpReason_FatalError() {
        return ScmPhysicalDeviceOpReason_FatalError;
    }
    private static final int ScmPhysicalDeviceOpReason_DataPersistenceLossImminent = (int)17L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_DataPersistenceLossImminent = 17
     * }
     */
    public static int ScmPhysicalDeviceOpReason_DataPersistenceLossImminent() {
        return ScmPhysicalDeviceOpReason_DataPersistenceLossImminent;
    }
    private static final int ScmPhysicalDeviceOpReason_WritePersistenceLossImminent = (int)18L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_WritePersistenceLossImminent = 18
     * }
     */
    public static int ScmPhysicalDeviceOpReason_WritePersistenceLossImminent() {
        return ScmPhysicalDeviceOpReason_WritePersistenceLossImminent;
    }
    private static final int ScmPhysicalDeviceOpReason_MediaRemainingSpareBlock = (int)19L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_MediaRemainingSpareBlock = 19
     * }
     */
    public static int ScmPhysicalDeviceOpReason_MediaRemainingSpareBlock() {
        return ScmPhysicalDeviceOpReason_MediaRemainingSpareBlock;
    }
    private static final int ScmPhysicalDeviceOpReason_PerformanceDegradation = (int)20L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_PerformanceDegradation = 20
     * }
     */
    public static int ScmPhysicalDeviceOpReason_PerformanceDegradation() {
        return ScmPhysicalDeviceOpReason_PerformanceDegradation;
    }
    private static final int ScmPhysicalDeviceOpReason_ExcessiveTemperature = (int)21L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_ExcessiveTemperature = 21
     * }
     */
    public static int ScmPhysicalDeviceOpReason_ExcessiveTemperature() {
        return ScmPhysicalDeviceOpReason_ExcessiveTemperature;
    }
    private static final int ScmPhysicalDeviceOpReason_Max = (int)22L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_OPERATIONAL_STATUS_REASON.ScmPhysicalDeviceOpReason_Max = 22
     * }
     */
    public static int ScmPhysicalDeviceOpReason_Max() {
        return ScmPhysicalDeviceOpReason_Max;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _SCM_PD_OPERATIONAL_STATUS_REASON {
     *     ScmPhysicalDeviceOpReason_Unknown = 0,
     *     ScmPhysicalDeviceOpReason_Media,
     *     ScmPhysicalDeviceOpReason_ThresholdExceeded,
     *     ScmPhysicalDeviceOpReason_LostData,
     *     ScmPhysicalDeviceOpReason_EnergySource,
     *     ScmPhysicalDeviceOpReason_Configuration,
     *     ScmPhysicalDeviceOpReason_DeviceController,
     *     ScmPhysicalDeviceOpReason_MediaController,
     *     ScmPhysicalDeviceOpReason_Component,
     *     ScmPhysicalDeviceOpReason_BackgroundOperation,
     *     ScmPhysicalDeviceOpReason_InvalidFirmware,
     *     ScmPhysicalDeviceOpReason_HealthCheck,
     *     ScmPhysicalDeviceOpReason_LostDataPersistence,
     *     ScmPhysicalDeviceOpReason_DisabledByPlatform,
     *     ScmPhysicalDeviceOpReason_PermanentError,
     *     ScmPhysicalDeviceOpReason_LostWritePersistence,
     *     ScmPhysicalDeviceOpReason_FatalError,
     *     ScmPhysicalDeviceOpReason_DataPersistenceLossImminent,
     *     ScmPhysicalDeviceOpReason_WritePersistenceLossImminent,
     *     ScmPhysicalDeviceOpReason_MediaRemainingSpareBlock,
     *     ScmPhysicalDeviceOpReason_PerformanceDegradation,
     *     ScmPhysicalDeviceOpReason_ExcessiveTemperature,
     *     ScmPhysicalDeviceOpReason_Max
     * } *PSCM_PD_OPERATIONAL_STATUS_REASON
     * }
     */
    public static final AddressLayout PSCM_PD_OPERATIONAL_STATUS_REASON = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_MANAGEMENT_STATUS {
     *     DWORD Version;
     *     DWORD Size;
     *     SCM_PD_HEALTH_STATUS Health;
     *     DWORD NumberOfOperationalStatus;
     *     DWORD NumberOfAdditionalReasons;
     *     SCM_PD_OPERATIONAL_STATUS OperationalStatus[16];
     *     SCM_PD_OPERATIONAL_STATUS_REASON AdditionalReasons[1];
     * } *PSCM_PD_MANAGEMENT_STATUS
     * }
     */
    public static final AddressLayout PSCM_PD_MANAGEMENT_STATUS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_LOCATION_STRING {
     *     DWORD Version;
     *     DWORD Size;
     *     WCHAR Location[1];
     * } *PSCM_PD_LOCATION_STRING
     * }
     */
    public static final AddressLayout PSCM_PD_LOCATION_STRING = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_FIRMWARE_DOWNLOAD {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD Flags;
     *     BYTE Slot;
     *     BYTE Reserved[3];
     *     DWORD64 Offset;
     *     DWORD FirmwareImageSizeInBytes;
     *     BYTE FirmwareImage[1];
     * } *PSCM_PD_FIRMWARE_DOWNLOAD
     * }
     */
    public static final AddressLayout PSCM_PD_FIRMWARE_DOWNLOAD = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_FIRMWARE_ACTIVATE {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD Flags;
     *     BYTE Slot;
     * } *PSCM_PD_FIRMWARE_ACTIVATE
     * }
     */
    public static final AddressLayout PSCM_PD_FIRMWARE_ACTIVATE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_PASSTHROUGH_INPUT {
     *     DWORD Version;
     *     DWORD Size;
     *     GUID ProtocolGuid;
     *     DWORD DataSize;
     *     BYTE Data[1];
     * } *PSCM_PD_PASSTHROUGH_INPUT
     * }
     */
    public static final AddressLayout PSCM_PD_PASSTHROUGH_INPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_PASSTHROUGH_OUTPUT {
     *     DWORD Version;
     *     DWORD Size;
     *     GUID ProtocolGuid;
     *     DWORD DataSize;
     *     BYTE Data[1];
     * } *PSCM_PD_PASSTHROUGH_OUTPUT
     * }
     */
    public static final AddressLayout PSCM_PD_PASSTHROUGH_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_PASSTHROUGH_INVDIMM_INPUT {
     *     DWORD Opcode;
     *     DWORD OpcodeParametersLength;
     *     BYTE OpcodeParameters[1];
     * } *PSCM_PD_PASSTHROUGH_INVDIMM_INPUT
     * }
     */
    public static final AddressLayout PSCM_PD_PASSTHROUGH_INVDIMM_INPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT {
     *     WORD GeneralStatus;
     *     WORD ExtendedStatus;
     *     DWORD OutputDataLength;
     *     BYTE OutputData[1];
     * } *PSCM_PD_PASSTHROUGH_INVDIMM_OUTPUT
     * }
     */
    public static final AddressLayout PSCM_PD_PASSTHROUGH_INVDIMM_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_REINITIALIZE_MEDIA_INPUT {
     *     DWORD Version;
     *     DWORD Size;
     *     struct {
     *         DWORD Overwrite : 1;
     *     } Options;
     * } *PSCM_PD_REINITIALIZE_MEDIA_INPUT
     * }
     */
    public static final AddressLayout PSCM_PD_REINITIALIZE_MEDIA_INPUT = wgl_h.C_POINTER;
    private static final int ScmPhysicalDeviceReinit_Success = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_MEDIA_REINITIALIZATION_STATUS.ScmPhysicalDeviceReinit_Success = 0
     * }
     */
    public static int ScmPhysicalDeviceReinit_Success() {
        return ScmPhysicalDeviceReinit_Success;
    }
    private static final int ScmPhysicalDeviceReinit_RebootNeeded = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_MEDIA_REINITIALIZATION_STATUS.ScmPhysicalDeviceReinit_RebootNeeded = 1
     * }
     */
    public static int ScmPhysicalDeviceReinit_RebootNeeded() {
        return ScmPhysicalDeviceReinit_RebootNeeded;
    }
    private static final int ScmPhysicalDeviceReinit_ColdBootNeeded = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_MEDIA_REINITIALIZATION_STATUS.ScmPhysicalDeviceReinit_ColdBootNeeded = 2
     * }
     */
    public static int ScmPhysicalDeviceReinit_ColdBootNeeded() {
        return ScmPhysicalDeviceReinit_ColdBootNeeded;
    }
    private static final int ScmPhysicalDeviceReinit_Max = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _SCM_PD_MEDIA_REINITIALIZATION_STATUS.ScmPhysicalDeviceReinit_Max = 3
     * }
     */
    public static int ScmPhysicalDeviceReinit_Max() {
        return ScmPhysicalDeviceReinit_Max;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _SCM_PD_MEDIA_REINITIALIZATION_STATUS {
     *     ScmPhysicalDeviceReinit_Success = 0,
     *     ScmPhysicalDeviceReinit_RebootNeeded,
     *     ScmPhysicalDeviceReinit_ColdBootNeeded,
     *     ScmPhysicalDeviceReinit_Max
     * } *PSCM_PD_MEDIA_REINITIALIZATION_STATUS
     * }
     */
    public static final AddressLayout PSCM_PD_MEDIA_REINITIALIZATION_STATUS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCM_PD_REINITIALIZE_MEDIA_OUTPUT {
     *     DWORD Version;
     *     DWORD Size;
     *     SCM_PD_MEDIA_REINITIALIZATION_STATUS Status;
     * } *PSCM_PD_REINITIALIZE_MEDIA_OUTPUT
     * }
     */
    public static final AddressLayout PSCM_PD_REINITIALIZE_MEDIA_OUTPUT = wgl_h.C_POINTER;
    private static final int Unknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.Unknown = 0
     * }
     */
    public static int Unknown() {
        return Unknown;
    }
    private static final int F5_1Pt2_512 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F5_1Pt2_512 = 1
     * }
     */
    public static int F5_1Pt2_512() {
        return F5_1Pt2_512;
    }
    private static final int F3_1Pt44_512 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F3_1Pt44_512 = 2
     * }
     */
    public static int F3_1Pt44_512() {
        return F3_1Pt44_512;
    }
    private static final int F3_2Pt88_512 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F3_2Pt88_512 = 3
     * }
     */
    public static int F3_2Pt88_512() {
        return F3_2Pt88_512;
    }
    private static final int F3_20Pt8_512 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F3_20Pt8_512 = 4
     * }
     */
    public static int F3_20Pt8_512() {
        return F3_20Pt8_512;
    }
    private static final int F3_720_512 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F3_720_512 = 5
     * }
     */
    public static int F3_720_512() {
        return F3_720_512;
    }
    private static final int F5_360_512 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F5_360_512 = 6
     * }
     */
    public static int F5_360_512() {
        return F5_360_512;
    }
    private static final int F5_320_512 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F5_320_512 = 7
     * }
     */
    public static int F5_320_512() {
        return F5_320_512;
    }
    private static final int F5_320_1024 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F5_320_1024 = 8
     * }
     */
    public static int F5_320_1024() {
        return F5_320_1024;
    }
    private static final int F5_180_512 = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F5_180_512 = 9
     * }
     */
    public static int F5_180_512() {
        return F5_180_512;
    }
    private static final int F5_160_512 = (int)10L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F5_160_512 = 10
     * }
     */
    public static int F5_160_512() {
        return F5_160_512;
    }
    private static final int RemovableMedia = (int)11L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.RemovableMedia = 11
     * }
     */
    public static int RemovableMedia() {
        return RemovableMedia;
    }
    private static final int FixedMedia = (int)12L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.FixedMedia = 12
     * }
     */
    public static int FixedMedia() {
        return FixedMedia;
    }
    private static final int F3_120M_512 = (int)13L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F3_120M_512 = 13
     * }
     */
    public static int F3_120M_512() {
        return F3_120M_512;
    }
    private static final int F3_640_512 = (int)14L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F3_640_512 = 14
     * }
     */
    public static int F3_640_512() {
        return F3_640_512;
    }
    private static final int F5_640_512 = (int)15L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F5_640_512 = 15
     * }
     */
    public static int F5_640_512() {
        return F5_640_512;
    }
    private static final int F5_720_512 = (int)16L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F5_720_512 = 16
     * }
     */
    public static int F5_720_512() {
        return F5_720_512;
    }
    private static final int F3_1Pt2_512 = (int)17L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F3_1Pt2_512 = 17
     * }
     */
    public static int F3_1Pt2_512() {
        return F3_1Pt2_512;
    }
    private static final int F3_1Pt23_1024 = (int)18L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F3_1Pt23_1024 = 18
     * }
     */
    public static int F3_1Pt23_1024() {
        return F3_1Pt23_1024;
    }
    private static final int F5_1Pt23_1024 = (int)19L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F5_1Pt23_1024 = 19
     * }
     */
    public static int F5_1Pt23_1024() {
        return F5_1Pt23_1024;
    }
    private static final int F3_128Mb_512 = (int)20L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F3_128Mb_512 = 20
     * }
     */
    public static int F3_128Mb_512() {
        return F3_128Mb_512;
    }
    private static final int F3_230Mb_512 = (int)21L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F3_230Mb_512 = 21
     * }
     */
    public static int F3_230Mb_512() {
        return F3_230Mb_512;
    }
    private static final int F8_256_128 = (int)22L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F8_256_128 = 22
     * }
     */
    public static int F8_256_128() {
        return F8_256_128;
    }
    private static final int F3_200Mb_512 = (int)23L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F3_200Mb_512 = 23
     * }
     */
    public static int F3_200Mb_512() {
        return F3_200Mb_512;
    }
    private static final int F3_240M_512 = (int)24L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F3_240M_512 = 24
     * }
     */
    public static int F3_240M_512() {
        return F3_240M_512;
    }
    private static final int F3_32M_512 = (int)25L;
    /**
     * {@snippet lang=c :
     * enum _MEDIA_TYPE.F3_32M_512 = 25
     * }
     */
    public static int F3_32M_512() {
        return F3_32M_512;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _MEDIA_TYPE {
     *     Unknown,
     *     F5_1Pt2_512,
     *     F3_1Pt44_512,
     *     F3_2Pt88_512,
     *     F3_20Pt8_512,
     *     F3_720_512,
     *     F5_360_512,
     *     F5_320_512,
     *     F5_320_1024,
     *     F5_180_512,
     *     F5_160_512,
     *     RemovableMedia,
     *     FixedMedia,
     *     F3_120M_512,
     *     F3_640_512,
     *     F5_640_512,
     *     F5_720_512,
     *     F3_1Pt2_512,
     *     F3_1Pt23_1024,
     *     F5_1Pt23_1024,
     *     F3_128Mb_512,
     *     F3_230Mb_512,
     *     F8_256_128,
     *     F3_200Mb_512,
     *     F3_240M_512,
     *     F3_32M_512
     * } *PMEDIA_TYPE
     * }
     */
    public static final AddressLayout PMEDIA_TYPE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FORMAT_PARAMETERS {
     *     MEDIA_TYPE MediaType;
     *     DWORD StartCylinderNumber;
     *     DWORD EndCylinderNumber;
     *     DWORD StartHeadNumber;
     *     DWORD EndHeadNumber;
     * } *PFORMAT_PARAMETERS
     * }
     */
    public static final AddressLayout PFORMAT_PARAMETERS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef WORD BAD_TRACK_NUMBER
     * }
     */
    public static final OfShort BAD_TRACK_NUMBER = wgl_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef WORD *PBAD_TRACK_NUMBER
     * }
     */
    public static final AddressLayout PBAD_TRACK_NUMBER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FORMAT_EX_PARAMETERS {
     *     MEDIA_TYPE MediaType;
     *     DWORD StartCylinderNumber;
     *     DWORD EndCylinderNumber;
     *     DWORD StartHeadNumber;
     *     DWORD EndHeadNumber;
     *     WORD FormatGapLength;
     *     WORD SectorsPerTrack;
     *     WORD SectorNumber[1];
     * } *PFORMAT_EX_PARAMETERS
     * }
     */
    public static final AddressLayout PFORMAT_EX_PARAMETERS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DISK_GEOMETRY {
     *     LARGE_INTEGER Cylinders;
     *     MEDIA_TYPE MediaType;
     *     DWORD TracksPerCylinder;
     *     DWORD SectorsPerTrack;
     *     DWORD BytesPerSector;
     * } *PDISK_GEOMETRY
     * }
     */
    public static final AddressLayout PDISK_GEOMETRY = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PARTITION_INFORMATION {
     *     LARGE_INTEGER StartingOffset;
     *     LARGE_INTEGER PartitionLength;
     *     DWORD HiddenSectors;
     *     DWORD PartitionNumber;
     *     BYTE PartitionType;
     *     BOOLEAN BootIndicator;
     *     BOOLEAN RecognizedPartition;
     *     BOOLEAN RewritePartition;
     * } *PPARTITION_INFORMATION
     * }
     */
    public static final AddressLayout PPARTITION_INFORMATION = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SET_PARTITION_INFORMATION {
     *     BYTE PartitionType;
     * } *PSET_PARTITION_INFORMATION
     * }
     */
    public static final AddressLayout PSET_PARTITION_INFORMATION = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVE_LAYOUT_INFORMATION {
     *     DWORD PartitionCount;
     *     DWORD Signature;
     *     PARTITION_INFORMATION PartitionEntry[1];
     * } *PDRIVE_LAYOUT_INFORMATION
     * }
     */
    public static final AddressLayout PDRIVE_LAYOUT_INFORMATION = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _VERIFY_INFORMATION {
     *     LARGE_INTEGER StartingOffset;
     *     DWORD Length;
     * } *PVERIFY_INFORMATION
     * }
     */
    public static final AddressLayout PVERIFY_INFORMATION = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _REASSIGN_BLOCKS {
     *     WORD Reserved;
     *     WORD Count;
     *     DWORD BlockNumber[1];
     * } *PREASSIGN_BLOCKS
     * }
     */
    public static final AddressLayout PREASSIGN_BLOCKS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _REASSIGN_BLOCKS_EX {
     *     WORD Reserved;
     *     WORD Count;
     *     LARGE_INTEGER BlockNumber[1];
     * } *PREASSIGN_BLOCKS_EX
     * }
     */
    public static final AddressLayout PREASSIGN_BLOCKS_EX = wgl_h.C_POINTER;
    private static final int PARTITION_STYLE_MBR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _PARTITION_STYLE.PARTITION_STYLE_MBR = 0
     * }
     */
    public static int PARTITION_STYLE_MBR() {
        return PARTITION_STYLE_MBR;
    }
    private static final int PARTITION_STYLE_GPT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _PARTITION_STYLE.PARTITION_STYLE_GPT = 1
     * }
     */
    public static int PARTITION_STYLE_GPT() {
        return PARTITION_STYLE_GPT;
    }
    private static final int PARTITION_STYLE_RAW = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _PARTITION_STYLE.PARTITION_STYLE_RAW = 2
     * }
     */
    public static int PARTITION_STYLE_RAW() {
        return PARTITION_STYLE_RAW;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _PARTITION_INFORMATION_GPT {
     *     GUID PartitionType;
     *     GUID PartitionId;
     *     DWORD64 Attributes;
     *     WCHAR Name[36];
     * } *PPARTITION_INFORMATION_GPT
     * }
     */
    public static final AddressLayout PPARTITION_INFORMATION_GPT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PARTITION_INFORMATION_MBR {
     *     BYTE PartitionType;
     *     BOOLEAN BootIndicator;
     *     BOOLEAN RecognizedPartition;
     *     DWORD HiddenSectors;
     *     GUID PartitionId;
     * } *PPARTITION_INFORMATION_MBR
     * }
     */
    public static final AddressLayout PPARTITION_INFORMATION_MBR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SET_PARTITION_INFORMATION_EX {
     *     PARTITION_STYLE PartitionStyle;
     *     union {
     *         SET_PARTITION_INFORMATION_MBR Mbr;
     *         SET_PARTITION_INFORMATION_GPT Gpt;
     *     };
     * } *PSET_PARTITION_INFORMATION_EX
     * }
     */
    public static final AddressLayout PSET_PARTITION_INFORMATION_EX = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CREATE_DISK_GPT {
     *     GUID DiskId;
     *     DWORD MaxPartitionCount;
     * } *PCREATE_DISK_GPT
     * }
     */
    public static final AddressLayout PCREATE_DISK_GPT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CREATE_DISK_MBR {
     *     DWORD Signature;
     * } *PCREATE_DISK_MBR
     * }
     */
    public static final AddressLayout PCREATE_DISK_MBR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CREATE_DISK {
     *     PARTITION_STYLE PartitionStyle;
     *     union {
     *         CREATE_DISK_MBR Mbr;
     *         CREATE_DISK_GPT Gpt;
     *     };
     * } *PCREATE_DISK
     * }
     */
    public static final AddressLayout PCREATE_DISK = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _GET_LENGTH_INFORMATION {
     *     LARGE_INTEGER Length;
     * } *PGET_LENGTH_INFORMATION
     * }
     */
    public static final AddressLayout PGET_LENGTH_INFORMATION = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PARTITION_INFORMATION_EX {
     *     PARTITION_STYLE PartitionStyle;
     *     LARGE_INTEGER StartingOffset;
     *     LARGE_INTEGER PartitionLength;
     *     DWORD PartitionNumber;
     *     BOOLEAN RewritePartition;
     *     BOOLEAN IsServicePartition;
     *     union {
     *         PARTITION_INFORMATION_MBR Mbr;
     *         PARTITION_INFORMATION_GPT Gpt;
     *     };
     * } *PPARTITION_INFORMATION_EX
     * }
     */
    public static final AddressLayout PPARTITION_INFORMATION_EX = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVE_LAYOUT_INFORMATION_GPT {
     *     GUID DiskId;
     *     LARGE_INTEGER StartingUsableOffset;
     *     LARGE_INTEGER UsableLength;
     *     DWORD MaxPartitionCount;
     * } *PDRIVE_LAYOUT_INFORMATION_GPT
     * }
     */
    public static final AddressLayout PDRIVE_LAYOUT_INFORMATION_GPT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVE_LAYOUT_INFORMATION_MBR {
     *     DWORD Signature;
     *     DWORD CheckSum;
     * } *PDRIVE_LAYOUT_INFORMATION_MBR
     * }
     */
    public static final AddressLayout PDRIVE_LAYOUT_INFORMATION_MBR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVE_LAYOUT_INFORMATION_EX {
     *     DWORD PartitionStyle;
     *     DWORD PartitionCount;
     *     union {
     *         DRIVE_LAYOUT_INFORMATION_MBR Mbr;
     *         DRIVE_LAYOUT_INFORMATION_GPT Gpt;
     *     };
     *     PARTITION_INFORMATION_EX PartitionEntry[1];
     * } *PDRIVE_LAYOUT_INFORMATION_EX
     * }
     */
    public static final AddressLayout PDRIVE_LAYOUT_INFORMATION_EX = wgl_h.C_POINTER;
    private static final int DetectNone = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _DETECTION_TYPE.DetectNone = 0
     * }
     */
    public static int DetectNone() {
        return DetectNone;
    }
    private static final int DetectInt13 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _DETECTION_TYPE.DetectInt13 = 1
     * }
     */
    public static int DetectInt13() {
        return DetectInt13;
    }
    private static final int DetectExInt13 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _DETECTION_TYPE.DetectExInt13 = 2
     * }
     */
    public static int DetectExInt13() {
        return DetectExInt13;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _DISK_INT13_INFO {
     *     WORD DriveSelect;
     *     DWORD MaxCylinders;
     *     WORD SectorsPerTrack;
     *     WORD MaxHeads;
     *     WORD NumberDrives;
     * } *PDISK_INT13_INFO
     * }
     */
    public static final AddressLayout PDISK_INT13_INFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DISK_EX_INT13_INFO {
     *     WORD ExBufferSize;
     *     WORD ExFlags;
     *     DWORD ExCylinders;
     *     DWORD ExHeads;
     *     DWORD ExSectorsPerTrack;
     *     DWORD64 ExSectorsPerDrive;
     *     WORD ExSectorSize;
     *     WORD ExReserved;
     * } *PDISK_EX_INT13_INFO
     * }
     */
    public static final AddressLayout PDISK_EX_INT13_INFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DISK_DETECTION_INFO {
     *     DWORD SizeOfDetectInfo;
     *     DETECTION_TYPE DetectionType;
     *     union {
     *         struct {
     *             DISK_INT13_INFO Int13;
     *             DISK_EX_INT13_INFO ExInt13;
     *         };
     *     };
     * } *PDISK_DETECTION_INFO
     * }
     */
    public static final AddressLayout PDISK_DETECTION_INFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DISK_PARTITION_INFO {
     *     DWORD SizeOfPartitionInfo;
     *     PARTITION_STYLE PartitionStyle;
     *     union {
     *         struct {
     *             DWORD Signature;
     *             DWORD CheckSum;
     *         } Mbr;
     *         struct {
     *             GUID DiskId;
     *         } Gpt;
     *     };
     * } *PDISK_PARTITION_INFO
     * }
     */
    public static final AddressLayout PDISK_PARTITION_INFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DISK_GEOMETRY_EX {
     *     DISK_GEOMETRY Geometry;
     *     LARGE_INTEGER DiskSize;
     *     BYTE Data[1];
     * } *PDISK_GEOMETRY_EX
     * }
     */
    public static final AddressLayout PDISK_GEOMETRY_EX = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DISK_CONTROLLER_NUMBER {
     *     DWORD ControllerNumber;
     *     DWORD DiskNumber;
     * } *PDISK_CONTROLLER_NUMBER
     * }
     */
    public static final AddressLayout PDISK_CONTROLLER_NUMBER = wgl_h.C_POINTER;
    private static final int EqualPriority = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.EqualPriority = 0
     * }
     */
    public static int EqualPriority() {
        return EqualPriority;
    }
    private static final int KeepPrefetchedData = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.KeepPrefetchedData = 1
     * }
     */
    public static int KeepPrefetchedData() {
        return KeepPrefetchedData;
    }
    private static final int KeepReadData = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.KeepReadData = 2
     * }
     */
    public static int KeepReadData() {
        return KeepReadData;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _DISK_CACHE_INFORMATION {
     *     BOOLEAN ParametersSavable;
     *     BOOLEAN ReadCacheEnabled;
     *     BOOLEAN WriteCacheEnabled;
     *     DISK_CACHE_RETENTION_PRIORITY ReadRetentionPriority;
     *     DISK_CACHE_RETENTION_PRIORITY WriteRetentionPriority;
     *     WORD DisablePrefetchTransferLength;
     *     BOOLEAN PrefetchScalar;
     *     union {
     *         struct {
     *             WORD Minimum;
     *             WORD Maximum;
     *             WORD MaximumBlocks;
     *         } ScalarPrefetch;
     *         struct {
     *             WORD Minimum;
     *             WORD Maximum;
     *         } BlockPrefetch;
     *     };
     * } *PDISK_CACHE_INFORMATION
     * }
     */
    public static final AddressLayout PDISK_CACHE_INFORMATION = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DISK_GROW_PARTITION {
     *     DWORD PartitionNumber;
     *     LARGE_INTEGER BytesToGrow;
     * } *PDISK_GROW_PARTITION
     * }
     */
    public static final AddressLayout PDISK_GROW_PARTITION = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _HISTOGRAM_BUCKET {
     *     DWORD Reads;
     *     DWORD Writes;
     * } *PHISTOGRAM_BUCKET
     * }
     */
    public static final AddressLayout PHISTOGRAM_BUCKET = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DISK_HISTOGRAM {
     *     LARGE_INTEGER DiskSize;
     *     LARGE_INTEGER Start;
     *     LARGE_INTEGER End;
     *     LARGE_INTEGER Average;
     *     LARGE_INTEGER AverageRead;
     *     LARGE_INTEGER AverageWrite;
     *     DWORD Granularity;
     *     DWORD Size;
     *     DWORD ReadCount;
     *     DWORD WriteCount;
     *     PHISTOGRAM_BUCKET Histogram;
     * } *PDISK_HISTOGRAM
     * }
     */
    public static final AddressLayout PDISK_HISTOGRAM = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DISK_PERFORMANCE {
     *     LARGE_INTEGER BytesRead;
     *     LARGE_INTEGER BytesWritten;
     *     LARGE_INTEGER ReadTime;
     *     LARGE_INTEGER WriteTime;
     *     LARGE_INTEGER IdleTime;
     *     DWORD ReadCount;
     *     DWORD WriteCount;
     *     DWORD QueueDepth;
     *     DWORD SplitCount;
     *     LARGE_INTEGER QueryTime;
     *     DWORD StorageDeviceNumber;
     *     WCHAR StorageManagerName[8];
     * } *PDISK_PERFORMANCE
     * }
     */
    public static final AddressLayout PDISK_PERFORMANCE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DISK_RECORD {
     *     LARGE_INTEGER ByteOffset;
     *     LARGE_INTEGER StartTime;
     *     LARGE_INTEGER EndTime;
     *     PVOID VirtualAddress;
     *     DWORD NumberOfBytes;
     *     BYTE DeviceNumber;
     *     BOOLEAN ReadRequest;
     * } *PDISK_RECORD
     * }
     */
    public static final AddressLayout PDISK_RECORD = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DISK_LOGGING {
     *     BYTE Function;
     *     PVOID BufferAddress;
     *     DWORD BufferSize;
     * } *PDISK_LOGGING
     * }
     */
    public static final AddressLayout PDISK_LOGGING = wgl_h.C_POINTER;
    private static final int RequestSize = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _BIN_TYPES.RequestSize = 0
     * }
     */
    public static int RequestSize() {
        return RequestSize;
    }
    private static final int RequestLocation = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _BIN_TYPES.RequestLocation = 1
     * }
     */
    public static int RequestLocation() {
        return RequestLocation;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _BIN_RANGE {
     *     LARGE_INTEGER StartValue;
     *     LARGE_INTEGER Length;
     * } *PBIN_RANGE
     * }
     */
    public static final AddressLayout PBIN_RANGE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PERF_BIN {
     *     DWORD NumberOfBins;
     *     DWORD TypeOfBin;
     *     BIN_RANGE BinsRanges[1];
     * } *PPERF_BIN
     * }
     */
    public static final AddressLayout PPERF_BIN = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _BIN_COUNT {
     *     BIN_RANGE BinRange;
     *     DWORD BinCount;
     * } *PBIN_COUNT
     * }
     */
    public static final AddressLayout PBIN_COUNT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _BIN_RESULTS {
     *     DWORD NumberOfBins;
     *     BIN_COUNT BinCounts[1];
     * } *PBIN_RESULTS
     * }
     */
    public static final AddressLayout PBIN_RESULTS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _GETVERSIONINPARAMS {
     *     BYTE bVersion;
     *     BYTE bRevision;
     *     BYTE bReserved;
     *     BYTE bIDEDeviceMap;
     *     DWORD fCapabilities;
     *     DWORD dwReserved[4];
     * } *PGETVERSIONINPARAMS
     * }
     */
    public static final AddressLayout PGETVERSIONINPARAMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _GETVERSIONINPARAMS {
     *     BYTE bVersion;
     *     BYTE bRevision;
     *     BYTE bReserved;
     *     BYTE bIDEDeviceMap;
     *     DWORD fCapabilities;
     *     DWORD dwReserved[4];
     * } *LPGETVERSIONINPARAMS
     * }
     */
    public static final AddressLayout LPGETVERSIONINPARAMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IDEREGS {
     *     BYTE bFeaturesReg;
     *     BYTE bSectorCountReg;
     *     BYTE bSectorNumberReg;
     *     BYTE bCylLowReg;
     *     BYTE bCylHighReg;
     *     BYTE bDriveHeadReg;
     *     BYTE bCommandReg;
     *     BYTE bReserved;
     * } *PIDEREGS
     * }
     */
    public static final AddressLayout PIDEREGS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IDEREGS {
     *     BYTE bFeaturesReg;
     *     BYTE bSectorCountReg;
     *     BYTE bSectorNumberReg;
     *     BYTE bCylLowReg;
     *     BYTE bCylHighReg;
     *     BYTE bDriveHeadReg;
     *     BYTE bCommandReg;
     *     BYTE bReserved;
     * } *LPIDEREGS
     * }
     */
    public static final AddressLayout LPIDEREGS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SENDCMDINPARAMS {
     *     DWORD cBufferSize;
     *     IDEREGS irDriveRegs;
     *     BYTE bDriveNumber;
     *     BYTE bReserved[3];
     *     DWORD dwReserved[4];
     *     BYTE bBuffer[1];
     * } *PSENDCMDINPARAMS
     * }
     */
    public static final AddressLayout PSENDCMDINPARAMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SENDCMDINPARAMS {
     *     DWORD cBufferSize;
     *     IDEREGS irDriveRegs;
     *     BYTE bDriveNumber;
     *     BYTE bReserved[3];
     *     DWORD dwReserved[4];
     *     BYTE bBuffer[1];
     * } *LPSENDCMDINPARAMS
     * }
     */
    public static final AddressLayout LPSENDCMDINPARAMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVERSTATUS {
     *     BYTE bDriverError;
     *     BYTE bIDEError;
     *     BYTE bReserved[2];
     *     DWORD dwReserved[2];
     * } *PDRIVERSTATUS
     * }
     */
    public static final AddressLayout PDRIVERSTATUS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVERSTATUS {
     *     BYTE bDriverError;
     *     BYTE bIDEError;
     *     BYTE bReserved[2];
     *     DWORD dwReserved[2];
     * } *LPDRIVERSTATUS
     * }
     */
    public static final AddressLayout LPDRIVERSTATUS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SENDCMDOUTPARAMS {
     *     DWORD cBufferSize;
     *     DRIVERSTATUS DriverStatus;
     *     BYTE bBuffer[1];
     * } *PSENDCMDOUTPARAMS
     * }
     */
    public static final AddressLayout PSENDCMDOUTPARAMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SENDCMDOUTPARAMS {
     *     DWORD cBufferSize;
     *     DRIVERSTATUS DriverStatus;
     *     BYTE bBuffer[1];
     * } *LPSENDCMDOUTPARAMS
     * }
     */
    public static final AddressLayout LPSENDCMDOUTPARAMS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _GET_DISK_ATTRIBUTES {
     *     DWORD Version;
     *     DWORD Reserved1;
     *     DWORDLONG Attributes;
     * } *PGET_DISK_ATTRIBUTES
     * }
     */
    public static final AddressLayout PGET_DISK_ATTRIBUTES = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SET_DISK_ATTRIBUTES {
     *     DWORD Version;
     *     BOOLEAN Persist;
     *     BYTE Reserved1[3];
     *     DWORDLONG Attributes;
     *     DWORDLONG AttributesMask;
     *     DWORD Reserved2[4];
     * } *PSET_DISK_ATTRIBUTES
     * }
     */
    public static final AddressLayout PSET_DISK_ATTRIBUTES = wgl_h.C_POINTER;
    private static final int AllElements = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _ELEMENT_TYPE.AllElements = 0
     * }
     */
    public static int AllElements() {
        return AllElements;
    }
    private static final int ChangerTransport = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _ELEMENT_TYPE.ChangerTransport = 1
     * }
     */
    public static int ChangerTransport() {
        return ChangerTransport;
    }
    private static final int ChangerSlot = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _ELEMENT_TYPE.ChangerSlot = 2
     * }
     */
    public static int ChangerSlot() {
        return ChangerSlot;
    }
    private static final int ChangerIEPort = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _ELEMENT_TYPE.ChangerIEPort = 3
     * }
     */
    public static int ChangerIEPort() {
        return ChangerIEPort;
    }
    private static final int ChangerDrive = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _ELEMENT_TYPE.ChangerDrive = 4
     * }
     */
    public static int ChangerDrive() {
        return ChangerDrive;
    }
    private static final int ChangerDoor = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _ELEMENT_TYPE.ChangerDoor = 5
     * }
     */
    public static int ChangerDoor() {
        return ChangerDoor;
    }
    private static final int ChangerKeypad = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _ELEMENT_TYPE.ChangerKeypad = 6
     * }
     */
    public static int ChangerKeypad() {
        return ChangerKeypad;
    }
    private static final int ChangerMaxElement = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _ELEMENT_TYPE.ChangerMaxElement = 7
     * }
     */
    public static int ChangerMaxElement() {
        return ChangerMaxElement;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _ELEMENT_TYPE {
     *     AllElements,
     *     ChangerTransport,
     *     ChangerSlot,
     *     ChangerIEPort,
     *     ChangerDrive,
     *     ChangerDoor,
     *     ChangerKeypad,
     *     ChangerMaxElement
     * } *PELEMENT_TYPE
     * }
     */
    public static final AddressLayout PELEMENT_TYPE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CHANGER_ELEMENT {
     *     ELEMENT_TYPE ElementType;
     *     DWORD ElementAddress;
     * } *PCHANGER_ELEMENT
     * }
     */
    public static final AddressLayout PCHANGER_ELEMENT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CHANGER_ELEMENT_LIST {
     *     CHANGER_ELEMENT Element;
     *     DWORD NumberOfElements;
     * } *PCHANGER_ELEMENT_LIST
     * }
     */
    public static final AddressLayout PCHANGER_ELEMENT_LIST = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _GET_CHANGER_PARAMETERS {
     *     DWORD Size;
     *     WORD NumberTransportElements;
     *     WORD NumberStorageElements;
     *     WORD NumberCleanerSlots;
     *     WORD NumberIEElements;
     *     WORD NumberDataTransferElements;
     *     WORD NumberOfDoors;
     *     WORD FirstSlotNumber;
     *     WORD FirstDriveNumber;
     *     WORD FirstTransportNumber;
     *     WORD FirstIEPortNumber;
     *     WORD FirstCleanerSlotAddress;
     *     WORD MagazineSize;
     *     DWORD DriveCleanTimeout;
     *     DWORD Features0;
     *     DWORD Features1;
     *     BYTE MoveFromTransport;
     *     BYTE MoveFromSlot;
     *     BYTE MoveFromIePort;
     *     BYTE MoveFromDrive;
     *     BYTE ExchangeFromTransport;
     *     BYTE ExchangeFromSlot;
     *     BYTE ExchangeFromIePort;
     *     BYTE ExchangeFromDrive;
     *     BYTE LockUnlockCapabilities;
     *     BYTE PositionCapabilities;
     *     BYTE Reserved1[2];
     *     DWORD Reserved2[2];
     * } *PGET_CHANGER_PARAMETERS
     * }
     */
    public static final AddressLayout PGET_CHANGER_PARAMETERS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CHANGER_PRODUCT_DATA {
     *     BYTE VendorId[8];
     *     BYTE ProductId[16];
     *     BYTE Revision[4];
     *     BYTE SerialNumber[32];
     *     BYTE DeviceType;
     * } *PCHANGER_PRODUCT_DATA
     * }
     */
    public static final AddressLayout PCHANGER_PRODUCT_DATA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CHANGER_SET_ACCESS {
     *     CHANGER_ELEMENT Element;
     *     DWORD Control;
     * } *PCHANGER_SET_ACCESS
     * }
     */
    public static final AddressLayout PCHANGER_SET_ACCESS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CHANGER_READ_ELEMENT_STATUS {
     *     CHANGER_ELEMENT_LIST ElementList;
     *     BOOLEAN VolumeTagInfo;
     * } *PCHANGER_READ_ELEMENT_STATUS
     * }
     */
    public static final AddressLayout PCHANGER_READ_ELEMENT_STATUS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CHANGER_ELEMENT_STATUS {
     *     CHANGER_ELEMENT Element;
     *     CHANGER_ELEMENT SrcElementAddress;
     *     DWORD Flags;
     *     DWORD ExceptionCode;
     *     BYTE TargetId;
     *     BYTE Lun;
     *     WORD Reserved;
     *     BYTE PrimaryVolumeID[36];
     *     BYTE AlternateVolumeID[36];
     * } *PCHANGER_ELEMENT_STATUS
     * }
     */
    public static final AddressLayout PCHANGER_ELEMENT_STATUS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CHANGER_ELEMENT_STATUS_EX {
     *     CHANGER_ELEMENT Element;
     *     CHANGER_ELEMENT SrcElementAddress;
     *     DWORD Flags;
     *     DWORD ExceptionCode;
     *     BYTE TargetId;
     *     BYTE Lun;
     *     WORD Reserved;
     *     BYTE PrimaryVolumeID[36];
     *     BYTE AlternateVolumeID[36];
     *     BYTE VendorIdentification[8];
     *     BYTE ProductIdentification[16];
     *     BYTE SerialNumber[32];
     * } *PCHANGER_ELEMENT_STATUS_EX
     * }
     */
    public static final AddressLayout PCHANGER_ELEMENT_STATUS_EX = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CHANGER_INITIALIZE_ELEMENT_STATUS {
     *     CHANGER_ELEMENT_LIST ElementList;
     *     BOOLEAN BarCodeScan;
     * } *PCHANGER_INITIALIZE_ELEMENT_STATUS
     * }
     */
    public static final AddressLayout PCHANGER_INITIALIZE_ELEMENT_STATUS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CHANGER_SET_POSITION {
     *     CHANGER_ELEMENT Transport;
     *     CHANGER_ELEMENT Destination;
     *     BOOLEAN Flip;
     * } *PCHANGER_SET_POSITION
     * }
     */
    public static final AddressLayout PCHANGER_SET_POSITION = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CHANGER_EXCHANGE_MEDIUM {
     *     CHANGER_ELEMENT Transport;
     *     CHANGER_ELEMENT Source;
     *     CHANGER_ELEMENT Destination1;
     *     CHANGER_ELEMENT Destination2;
     *     BOOLEAN Flip1;
     *     BOOLEAN Flip2;
     * } *PCHANGER_EXCHANGE_MEDIUM
     * }
     */
    public static final AddressLayout PCHANGER_EXCHANGE_MEDIUM = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CHANGER_MOVE_MEDIUM {
     *     CHANGER_ELEMENT Transport;
     *     CHANGER_ELEMENT Source;
     *     CHANGER_ELEMENT Destination;
     *     BOOLEAN Flip;
     * } *PCHANGER_MOVE_MEDIUM
     * }
     */
    public static final AddressLayout PCHANGER_MOVE_MEDIUM = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CHANGER_SEND_VOLUME_TAG_INFORMATION {
     *     CHANGER_ELEMENT StartingElement;
     *     DWORD ActionCode;
     *     BYTE VolumeIDTemplate[40];
     * } *PCHANGER_SEND_VOLUME_TAG_INFORMATION
     * }
     */
    public static final AddressLayout PCHANGER_SEND_VOLUME_TAG_INFORMATION = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _READ_ELEMENT_ADDRESS_INFO {
     *     DWORD NumberOfElements;
     *     CHANGER_ELEMENT_STATUS ElementStatus[1];
     * } *PREAD_ELEMENT_ADDRESS_INFO
     * }
     */
    public static final AddressLayout PREAD_ELEMENT_ADDRESS_INFO = wgl_h.C_POINTER;
    private static final int DeviceProblemNone = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _CHANGER_DEVICE_PROBLEM_TYPE.DeviceProblemNone = 0
     * }
     */
    public static int DeviceProblemNone() {
        return DeviceProblemNone;
    }
    private static final int DeviceProblemHardware = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _CHANGER_DEVICE_PROBLEM_TYPE.DeviceProblemHardware = 1
     * }
     */
    public static int DeviceProblemHardware() {
        return DeviceProblemHardware;
    }
    private static final int DeviceProblemCHMError = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _CHANGER_DEVICE_PROBLEM_TYPE.DeviceProblemCHMError = 2
     * }
     */
    public static int DeviceProblemCHMError() {
        return DeviceProblemCHMError;
    }
    private static final int DeviceProblemDoorOpen = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _CHANGER_DEVICE_PROBLEM_TYPE.DeviceProblemDoorOpen = 3
     * }
     */
    public static int DeviceProblemDoorOpen() {
        return DeviceProblemDoorOpen;
    }
    private static final int DeviceProblemCalibrationError = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _CHANGER_DEVICE_PROBLEM_TYPE.DeviceProblemCalibrationError = 4
     * }
     */
    public static int DeviceProblemCalibrationError() {
        return DeviceProblemCalibrationError;
    }
    private static final int DeviceProblemTargetFailure = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _CHANGER_DEVICE_PROBLEM_TYPE.DeviceProblemTargetFailure = 5
     * }
     */
    public static int DeviceProblemTargetFailure() {
        return DeviceProblemTargetFailure;
    }
    private static final int DeviceProblemCHMMoveError = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _CHANGER_DEVICE_PROBLEM_TYPE.DeviceProblemCHMMoveError = 6
     * }
     */
    public static int DeviceProblemCHMMoveError() {
        return DeviceProblemCHMMoveError;
    }
    private static final int DeviceProblemCHMZeroError = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _CHANGER_DEVICE_PROBLEM_TYPE.DeviceProblemCHMZeroError = 7
     * }
     */
    public static int DeviceProblemCHMZeroError() {
        return DeviceProblemCHMZeroError;
    }
    private static final int DeviceProblemCartridgeInsertError = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _CHANGER_DEVICE_PROBLEM_TYPE.DeviceProblemCartridgeInsertError = 8
     * }
     */
    public static int DeviceProblemCartridgeInsertError() {
        return DeviceProblemCartridgeInsertError;
    }
    private static final int DeviceProblemPositionError = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _CHANGER_DEVICE_PROBLEM_TYPE.DeviceProblemPositionError = 9
     * }
     */
    public static int DeviceProblemPositionError() {
        return DeviceProblemPositionError;
    }
    private static final int DeviceProblemSensorError = (int)10L;
    /**
     * {@snippet lang=c :
     * enum _CHANGER_DEVICE_PROBLEM_TYPE.DeviceProblemSensorError = 10
     * }
     */
    public static int DeviceProblemSensorError() {
        return DeviceProblemSensorError;
    }
    private static final int DeviceProblemCartridgeEjectError = (int)11L;
    /**
     * {@snippet lang=c :
     * enum _CHANGER_DEVICE_PROBLEM_TYPE.DeviceProblemCartridgeEjectError = 11
     * }
     */
    public static int DeviceProblemCartridgeEjectError() {
        return DeviceProblemCartridgeEjectError;
    }
    private static final int DeviceProblemGripperError = (int)12L;
    /**
     * {@snippet lang=c :
     * enum _CHANGER_DEVICE_PROBLEM_TYPE.DeviceProblemGripperError = 12
     * }
     */
    public static int DeviceProblemGripperError() {
        return DeviceProblemGripperError;
    }
    private static final int DeviceProblemDriveError = (int)13L;
    /**
     * {@snippet lang=c :
     * enum _CHANGER_DEVICE_PROBLEM_TYPE.DeviceProblemDriveError = 13
     * }
     */
    public static int DeviceProblemDriveError() {
        return DeviceProblemDriveError;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _CHANGER_DEVICE_PROBLEM_TYPE {
     *     DeviceProblemNone,
     *     DeviceProblemHardware,
     *     DeviceProblemCHMError,
     *     DeviceProblemDoorOpen,
     *     DeviceProblemCalibrationError,
     *     DeviceProblemTargetFailure,
     *     DeviceProblemCHMMoveError,
     *     DeviceProblemCHMZeroError,
     *     DeviceProblemCartridgeInsertError,
     *     DeviceProblemPositionError,
     *     DeviceProblemSensorError,
     *     DeviceProblemCartridgeEjectError,
     *     DeviceProblemGripperError,
     *     DeviceProblemDriveError
     * } *PCHANGER_DEVICE_PROBLEM_TYPE
     * }
     */
    public static final AddressLayout PCHANGER_DEVICE_PROBLEM_TYPE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PATHNAME_BUFFER {
     *     DWORD PathNameLength;
     *     WCHAR Name[1];
     * } *PPATHNAME_BUFFER
     * }
     */
    public static final AddressLayout PPATHNAME_BUFFER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FSCTL_QUERY_FAT_BPB_BUFFER {
     *     BYTE First0x24BytesOfBootSector[36];
     * } *PFSCTL_QUERY_FAT_BPB_BUFFER
     * }
     */
    public static final AddressLayout PFSCTL_QUERY_FAT_BPB_BUFFER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     LARGE_INTEGER VolumeSerialNumber;
     *     LARGE_INTEGER NumberSectors;
     *     LARGE_INTEGER TotalClusters;
     *     LARGE_INTEGER FreeClusters;
     *     LARGE_INTEGER TotalReserved;
     *     DWORD BytesPerSector;
     *     DWORD BytesPerCluster;
     *     DWORD BytesPerFileRecordSegment;
     *     DWORD ClustersPerFileRecordSegment;
     *     LARGE_INTEGER MftValidDataLength;
     *     LARGE_INTEGER MftStartLcn;
     *     LARGE_INTEGER Mft2StartLcn;
     *     LARGE_INTEGER MftZoneStart;
     *     LARGE_INTEGER MftZoneEnd;
     * } *PNTFS_VOLUME_DATA_BUFFER
     * }
     */
    public static final AddressLayout PNTFS_VOLUME_DATA_BUFFER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD ByteCount;
     *     WORD MajorVersion;
     *     WORD MinorVersion;
     *     DWORD BytesPerPhysicalSector;
     *     WORD LfsMajorVersion;
     *     WORD LfsMinorVersion;
     *     DWORD MaxDeviceTrimExtentCount;
     *     DWORD MaxDeviceTrimByteCount;
     *     DWORD MaxVolumeTrimExtentCount;
     *     DWORD MaxVolumeTrimByteCount;
     * } *PNTFS_EXTENDED_VOLUME_DATA
     * }
     */
    public static final AddressLayout PNTFS_EXTENDED_VOLUME_DATA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD ByteCount;
     *     DWORD MajorVersion;
     *     DWORD MinorVersion;
     *     DWORD BytesPerPhysicalSector;
     *     LARGE_INTEGER VolumeSerialNumber;
     *     LARGE_INTEGER NumberSectors;
     *     LARGE_INTEGER TotalClusters;
     *     LARGE_INTEGER FreeClusters;
     *     LARGE_INTEGER TotalReserved;
     *     DWORD BytesPerSector;
     *     DWORD BytesPerCluster;
     *     LARGE_INTEGER MaximumSizeOfResidentFile;
     *     WORD FastTierDataFillRatio;
     *     WORD SlowTierDataFillRatio;
     *     DWORD DestagesFastTierToSlowTierRate;
     *     LARGE_INTEGER Reserved[9];
     * } *PREFS_VOLUME_DATA_BUFFER
     * }
     */
    public static final AddressLayout PREFS_VOLUME_DATA_BUFFER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     LARGE_INTEGER StartingLcn;
     * } *PSTARTING_LCN_INPUT_BUFFER
     * }
     */
    public static final AddressLayout PSTARTING_LCN_INPUT_BUFFER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     LARGE_INTEGER StartingLcn;
     *     DWORD Flags;
     * } *PSTARTING_LCN_INPUT_BUFFER_EX
     * }
     */
    public static final AddressLayout PSTARTING_LCN_INPUT_BUFFER_EX = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     LARGE_INTEGER StartingLcn;
     *     LARGE_INTEGER BitmapSize;
     *     BYTE Buffer[1];
     * } *PVOLUME_BITMAP_BUFFER
     * }
     */
    public static final AddressLayout PVOLUME_BITMAP_BUFFER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     LARGE_INTEGER StartingVcn;
     * } *PSTARTING_VCN_INPUT_BUFFER
     * }
     */
    public static final AddressLayout PSTARTING_VCN_INPUT_BUFFER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct RETRIEVAL_POINTERS_BUFFER {
     *     DWORD ExtentCount;
     *     LARGE_INTEGER StartingVcn;
     *     struct {
     *         LARGE_INTEGER NextVcn;
     *         LARGE_INTEGER Lcn;
     *     } Extents[1];
     * } *PRETRIEVAL_POINTERS_BUFFER
     * }
     */
    public static final AddressLayout PRETRIEVAL_POINTERS_BUFFER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER {
     *     DWORD ExtentCount;
     *     LARGE_INTEGER StartingVcn;
     *     struct {
     *         LARGE_INTEGER NextVcn;
     *         LARGE_INTEGER Lcn;
     *         DWORD ReferenceCount;
     *     } Extents[1];
     * } *PRETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER
     * }
     */
    public static final AddressLayout PRETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct RETRIEVAL_POINTER_COUNT {
     *     DWORD ExtentCount;
     * } *PRETRIEVAL_POINTER_COUNT
     * }
     */
    public static final AddressLayout PRETRIEVAL_POINTER_COUNT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     LARGE_INTEGER FileReferenceNumber;
     * } *PNTFS_FILE_RECORD_INPUT_BUFFER
     * }
     */
    public static final AddressLayout PNTFS_FILE_RECORD_INPUT_BUFFER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     LARGE_INTEGER FileReferenceNumber;
     *     DWORD FileRecordLength;
     *     BYTE FileRecordBuffer[1];
     * } *PNTFS_FILE_RECORD_OUTPUT_BUFFER
     * }
     */
    public static final AddressLayout PNTFS_FILE_RECORD_OUTPUT_BUFFER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     HANDLE FileHandle;
     *     LARGE_INTEGER StartingVcn;
     *     LARGE_INTEGER StartingLcn;
     *     DWORD ClusterCount;
     * } *PMOVE_FILE_DATA
     * }
     */
    public static final AddressLayout PMOVE_FILE_DATA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     HANDLE FileHandle;
     *     LARGE_INTEGER SourceFileRecord;
     *     LARGE_INTEGER TargetFileRecord;
     * } *PMOVE_FILE_RECORD_DATA
     * }
     */
    public static final AddressLayout PMOVE_FILE_RECORD_DATA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MOVE_FILE_DATA32 {
     *     UINT32 FileHandle;
     *     LARGE_INTEGER StartingVcn;
     *     LARGE_INTEGER StartingLcn;
     *     DWORD ClusterCount;
     * } *PMOVE_FILE_DATA32
     * }
     */
    public static final AddressLayout PMOVE_FILE_DATA32 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD Restart;
     *     SID Sid;
     * } *PFIND_BY_SID_DATA
     * }
     */
    public static final AddressLayout PFIND_BY_SID_DATA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD NextEntryOffset;
     *     DWORD FileIndex;
     *     DWORD FileNameLength;
     *     WCHAR FileName[1];
     * } *PFIND_BY_SID_OUTPUT
     * }
     */
    public static final AddressLayout PFIND_BY_SID_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORDLONG StartFileReferenceNumber;
     *     USN LowUsn;
     *     USN HighUsn;
     * } *PMFT_ENUM_DATA_V0
     * }
     */
    public static final AddressLayout PMFT_ENUM_DATA_V0 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORDLONG StartFileReferenceNumber;
     *     USN LowUsn;
     *     USN HighUsn;
     *     WORD MinMajorVersion;
     *     WORD MaxMajorVersion;
     * } *PMFT_ENUM_DATA_V1
     * }
     */
    public static final AddressLayout PMFT_ENUM_DATA_V1 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef MFT_ENUM_DATA_V1 *PMFT_ENUM_DATA
     * }
     */
    public static final AddressLayout PMFT_ENUM_DATA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORDLONG MaximumSize;
     *     DWORDLONG AllocationDelta;
     * } *PCREATE_USN_JOURNAL_DATA
     * }
     */
    public static final AddressLayout PCREATE_USN_JOURNAL_DATA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     WORD MinMajorVersion;
     *     WORD MaxMajorVersion;
     * } *PREAD_FILE_USN_DATA
     * }
     */
    public static final AddressLayout PREAD_FILE_USN_DATA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     USN StartUsn;
     *     DWORD ReasonMask;
     *     DWORD ReturnOnlyOnClose;
     *     DWORDLONG Timeout;
     *     DWORDLONG BytesToWaitFor;
     *     DWORDLONG UsnJournalID;
     * } *PREAD_USN_JOURNAL_DATA_V0
     * }
     */
    public static final AddressLayout PREAD_USN_JOURNAL_DATA_V0 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     USN StartUsn;
     *     DWORD ReasonMask;
     *     DWORD ReturnOnlyOnClose;
     *     DWORDLONG Timeout;
     *     DWORDLONG BytesToWaitFor;
     *     DWORDLONG UsnJournalID;
     *     WORD MinMajorVersion;
     *     WORD MaxMajorVersion;
     * } *PREAD_USN_JOURNAL_DATA_V1
     * }
     */
    public static final AddressLayout PREAD_USN_JOURNAL_DATA_V1 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef READ_USN_JOURNAL_DATA_V1 *PREAD_USN_JOURNAL_DATA
     * }
     */
    public static final AddressLayout PREAD_USN_JOURNAL_DATA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD Flags;
     *     DWORD Unused;
     *     DWORDLONG ChunkSize;
     *     LONGLONG FileSizeThreshold;
     * } *PUSN_TRACK_MODIFIED_RANGES
     * }
     */
    public static final AddressLayout PUSN_TRACK_MODIFIED_RANGES = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     USN Usn;
     * } *PUSN_RANGE_TRACK_OUTPUT
     * }
     */
    public static final AddressLayout PUSN_RANGE_TRACK_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD RecordLength;
     *     WORD MajorVersion;
     *     WORD MinorVersion;
     *     DWORDLONG FileReferenceNumber;
     *     DWORDLONG ParentFileReferenceNumber;
     *     USN Usn;
     *     LARGE_INTEGER TimeStamp;
     *     DWORD Reason;
     *     DWORD SourceInfo;
     *     DWORD SecurityId;
     *     DWORD FileAttributes;
     *     WORD FileNameLength;
     *     WORD FileNameOffset;
     *     WCHAR FileName[1];
     * } *PUSN_RECORD_V2
     * }
     */
    public static final AddressLayout PUSN_RECORD_V2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD RecordLength;
     *     WORD MajorVersion;
     *     WORD MinorVersion;
     *     FILE_ID_128 FileReferenceNumber;
     *     FILE_ID_128 ParentFileReferenceNumber;
     *     USN Usn;
     *     LARGE_INTEGER TimeStamp;
     *     DWORD Reason;
     *     DWORD SourceInfo;
     *     DWORD SecurityId;
     *     DWORD FileAttributes;
     *     WORD FileNameLength;
     *     WORD FileNameOffset;
     *     WCHAR FileName[1];
     * } *PUSN_RECORD_V3
     * }
     */
    public static final AddressLayout PUSN_RECORD_V3 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef USN_RECORD_V2 *PUSN_RECORD
     * }
     */
    public static final AddressLayout PUSN_RECORD = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD RecordLength;
     *     WORD MajorVersion;
     *     WORD MinorVersion;
     * } *PUSN_RECORD_COMMON_HEADER
     * }
     */
    public static final AddressLayout PUSN_RECORD_COMMON_HEADER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     LONGLONG Offset;
     *     LONGLONG Length;
     * } *PUSN_RECORD_EXTENT
     * }
     */
    public static final AddressLayout PUSN_RECORD_EXTENT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     USN_RECORD_COMMON_HEADER Header;
     *     FILE_ID_128 FileReferenceNumber;
     *     FILE_ID_128 ParentFileReferenceNumber;
     *     USN Usn;
     *     DWORD Reason;
     *     DWORD SourceInfo;
     *     DWORD RemainingExtents;
     *     WORD NumberOfExtents;
     *     WORD ExtentSize;
     *     USN_RECORD_EXTENT Extents[1];
     * } *PUSN_RECORD_V4
     * }
     */
    public static final AddressLayout PUSN_RECORD_V4 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef union {
     *     USN_RECORD_COMMON_HEADER Header;
     *     USN_RECORD_V2 V2;
     *     USN_RECORD_V3 V3;
     *     USN_RECORD_V4 V4;
     * } *PUSN_RECORD_UNION
     * }
     */
    public static final AddressLayout PUSN_RECORD_UNION = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORDLONG UsnJournalID;
     *     USN FirstUsn;
     *     USN NextUsn;
     *     USN LowestValidUsn;
     *     USN MaxUsn;
     *     DWORDLONG MaximumSize;
     *     DWORDLONG AllocationDelta;
     * } *PUSN_JOURNAL_DATA_V0
     * }
     */
    public static final AddressLayout PUSN_JOURNAL_DATA_V0 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORDLONG UsnJournalID;
     *     USN FirstUsn;
     *     USN NextUsn;
     *     USN LowestValidUsn;
     *     USN MaxUsn;
     *     DWORDLONG MaximumSize;
     *     DWORDLONG AllocationDelta;
     *     WORD MinSupportedMajorVersion;
     *     WORD MaxSupportedMajorVersion;
     * } *PUSN_JOURNAL_DATA_V1
     * }
     */
    public static final AddressLayout PUSN_JOURNAL_DATA_V1 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORDLONG UsnJournalID;
     *     USN FirstUsn;
     *     USN NextUsn;
     *     USN LowestValidUsn;
     *     USN MaxUsn;
     *     DWORDLONG MaximumSize;
     *     DWORDLONG AllocationDelta;
     *     WORD MinSupportedMajorVersion;
     *     WORD MaxSupportedMajorVersion;
     *     DWORD Flags;
     *     DWORDLONG RangeTrackChunkSize;
     *     LONGLONG RangeTrackFileSizeThreshold;
     * } *PUSN_JOURNAL_DATA_V2
     * }
     */
    public static final AddressLayout PUSN_JOURNAL_DATA_V2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef USN_JOURNAL_DATA_V1 *PUSN_JOURNAL_DATA
     * }
     */
    public static final AddressLayout PUSN_JOURNAL_DATA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORDLONG UsnJournalID;
     *     DWORD DeleteFlags;
     * } *PDELETE_USN_JOURNAL_DATA
     * }
     */
    public static final AddressLayout PDELETE_USN_JOURNAL_DATA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     union {
     *         DWORD UsnSourceInfo;
     *         DWORD CopyNumber;
     *     };
     *     HANDLE VolumeHandle;
     *     DWORD HandleInfo;
     * } *PMARK_HANDLE_INFO
     * }
     */
    public static final AddressLayout PMARK_HANDLE_INFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     union {
     *         DWORD UsnSourceInfo;
     *         DWORD CopyNumber;
     *     };
     *     UINT32 VolumeHandle;
     *     DWORD HandleInfo;
     * } *PMARK_HANDLE_INFO32
     * }
     */
    public static final AddressLayout PMARK_HANDLE_INFO32 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     ACCESS_MASK DesiredAccess;
     *     DWORD SecurityIds[1];
     * } *PBULK_SECURITY_TEST_DATA
     * }
     */
    public static final AddressLayout PBULK_SECURITY_TEST_DATA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_PREFETCH {
     *     DWORD Type;
     *     DWORD Count;
     *     DWORDLONG Prefetch[1];
     * } *PFILE_PREFETCH
     * }
     */
    public static final AddressLayout PFILE_PREFETCH = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_PREFETCH_EX {
     *     DWORD Type;
     *     DWORD Count;
     *     PVOID Context;
     *     DWORDLONG Prefetch[1];
     * } *PFILE_PREFETCH_EX
     * }
     */
    public static final AddressLayout PFILE_PREFETCH_EX = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILESYSTEM_STATISTICS {
     *     WORD FileSystemType;
     *     WORD Version;
     *     DWORD SizeOfCompleteStructure;
     *     DWORD UserFileReads;
     *     DWORD UserFileReadBytes;
     *     DWORD UserDiskReads;
     *     DWORD UserFileWrites;
     *     DWORD UserFileWriteBytes;
     *     DWORD UserDiskWrites;
     *     DWORD MetaDataReads;
     *     DWORD MetaDataReadBytes;
     *     DWORD MetaDataDiskReads;
     *     DWORD MetaDataWrites;
     *     DWORD MetaDataWriteBytes;
     *     DWORD MetaDataDiskWrites;
     * } *PFILESYSTEM_STATISTICS
     * }
     */
    public static final AddressLayout PFILESYSTEM_STATISTICS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FAT_STATISTICS {
     *     DWORD CreateHits;
     *     DWORD SuccessfulCreates;
     *     DWORD FailedCreates;
     *     DWORD NonCachedReads;
     *     DWORD NonCachedReadBytes;
     *     DWORD NonCachedWrites;
     *     DWORD NonCachedWriteBytes;
     *     DWORD NonCachedDiskReads;
     *     DWORD NonCachedDiskWrites;
     * } *PFAT_STATISTICS
     * }
     */
    public static final AddressLayout PFAT_STATISTICS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _EXFAT_STATISTICS {
     *     DWORD CreateHits;
     *     DWORD SuccessfulCreates;
     *     DWORD FailedCreates;
     *     DWORD NonCachedReads;
     *     DWORD NonCachedReadBytes;
     *     DWORD NonCachedWrites;
     *     DWORD NonCachedWriteBytes;
     *     DWORD NonCachedDiskReads;
     *     DWORD NonCachedDiskWrites;
     * } *PEXFAT_STATISTICS
     * }
     */
    public static final AddressLayout PEXFAT_STATISTICS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _NTFS_STATISTICS {
     *     DWORD LogFileFullExceptions;
     *     DWORD OtherExceptions;
     *     DWORD MftReads;
     *     DWORD MftReadBytes;
     *     DWORD MftWrites;
     *     DWORD MftWriteBytes;
     *     struct {
     *         WORD Write;
     *         WORD Create;
     *         WORD SetInfo;
     *         WORD Flush;
     *     } MftWritesUserLevel;
     *     WORD MftWritesFlushForLogFileFull;
     *     WORD MftWritesLazyWriter;
     *     WORD MftWritesUserRequest;
     *     DWORD Mft2Writes;
     *     DWORD Mft2WriteBytes;
     *     struct {
     *         WORD Write;
     *         WORD Create;
     *         WORD SetInfo;
     *         WORD Flush;
     *     } Mft2WritesUserLevel;
     *     WORD Mft2WritesFlushForLogFileFull;
     *     WORD Mft2WritesLazyWriter;
     *     WORD Mft2WritesUserRequest;
     *     DWORD RootIndexReads;
     *     DWORD RootIndexReadBytes;
     *     DWORD RootIndexWrites;
     *     DWORD RootIndexWriteBytes;
     *     DWORD BitmapReads;
     *     DWORD BitmapReadBytes;
     *     DWORD BitmapWrites;
     *     DWORD BitmapWriteBytes;
     *     WORD BitmapWritesFlushForLogFileFull;
     *     WORD BitmapWritesLazyWriter;
     *     WORD BitmapWritesUserRequest;
     *     struct {
     *         WORD Write;
     *         WORD Create;
     *         WORD SetInfo;
     *     } BitmapWritesUserLevel;
     *     DWORD MftBitmapReads;
     *     DWORD MftBitmapReadBytes;
     *     DWORD MftBitmapWrites;
     *     DWORD MftBitmapWriteBytes;
     *     WORD MftBitmapWritesFlushForLogFileFull;
     *     WORD MftBitmapWritesLazyWriter;
     *     WORD MftBitmapWritesUserRequest;
     *     struct {
     *         WORD Write;
     *         WORD Create;
     *         WORD SetInfo;
     *         WORD Flush;
     *     } MftBitmapWritesUserLevel;
     *     DWORD UserIndexReads;
     *     DWORD UserIndexReadBytes;
     *     DWORD UserIndexWrites;
     *     DWORD UserIndexWriteBytes;
     *     DWORD LogFileReads;
     *     DWORD LogFileReadBytes;
     *     DWORD LogFileWrites;
     *     DWORD LogFileWriteBytes;
     *     struct {
     *         DWORD Calls;
     *         DWORD Clusters;
     *         DWORD Hints;
     *         DWORD RunsReturned;
     *         DWORD HintsHonored;
     *         DWORD HintsClusters;
     *         DWORD Cache;
     *         DWORD CacheClusters;
     *         DWORD CacheMiss;
     *         DWORD CacheMissClusters;
     *     } Allocate;
     *     DWORD DiskResourcesExhausted;
     * } *PNTFS_STATISTICS
     * }
     */
    public static final AddressLayout PNTFS_STATISTICS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILESYSTEM_STATISTICS_EX {
     *     WORD FileSystemType;
     *     WORD Version;
     *     DWORD SizeOfCompleteStructure;
     *     DWORDLONG UserFileReads;
     *     DWORDLONG UserFileReadBytes;
     *     DWORDLONG UserDiskReads;
     *     DWORDLONG UserFileWrites;
     *     DWORDLONG UserFileWriteBytes;
     *     DWORDLONG UserDiskWrites;
     *     DWORDLONG MetaDataReads;
     *     DWORDLONG MetaDataReadBytes;
     *     DWORDLONG MetaDataDiskReads;
     *     DWORDLONG MetaDataWrites;
     *     DWORDLONG MetaDataWriteBytes;
     *     DWORDLONG MetaDataDiskWrites;
     * } *PFILESYSTEM_STATISTICS_EX
     * }
     */
    public static final AddressLayout PFILESYSTEM_STATISTICS_EX = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _NTFS_STATISTICS_EX {
     *     DWORD LogFileFullExceptions;
     *     DWORD OtherExceptions;
     *     DWORDLONG MftReads;
     *     DWORDLONG MftReadBytes;
     *     DWORDLONG MftWrites;
     *     DWORDLONG MftWriteBytes;
     *     struct {
     *         DWORD Write;
     *         DWORD Create;
     *         DWORD SetInfo;
     *         DWORD Flush;
     *     } MftWritesUserLevel;
     *     DWORD MftWritesFlushForLogFileFull;
     *     DWORD MftWritesLazyWriter;
     *     DWORD MftWritesUserRequest;
     *     DWORDLONG Mft2Writes;
     *     DWORDLONG Mft2WriteBytes;
     *     struct {
     *         DWORD Write;
     *         DWORD Create;
     *         DWORD SetInfo;
     *         DWORD Flush;
     *     } Mft2WritesUserLevel;
     *     DWORD Mft2WritesFlushForLogFileFull;
     *     DWORD Mft2WritesLazyWriter;
     *     DWORD Mft2WritesUserRequest;
     *     DWORDLONG RootIndexReads;
     *     DWORDLONG RootIndexReadBytes;
     *     DWORDLONG RootIndexWrites;
     *     DWORDLONG RootIndexWriteBytes;
     *     DWORDLONG BitmapReads;
     *     DWORDLONG BitmapReadBytes;
     *     DWORDLONG BitmapWrites;
     *     DWORDLONG BitmapWriteBytes;
     *     DWORD BitmapWritesFlushForLogFileFull;
     *     DWORD BitmapWritesLazyWriter;
     *     DWORD BitmapWritesUserRequest;
     *     struct {
     *         DWORD Write;
     *         DWORD Create;
     *         DWORD SetInfo;
     *         DWORD Flush;
     *     } BitmapWritesUserLevel;
     *     DWORDLONG MftBitmapReads;
     *     DWORDLONG MftBitmapReadBytes;
     *     DWORDLONG MftBitmapWrites;
     *     DWORDLONG MftBitmapWriteBytes;
     *     DWORD MftBitmapWritesFlushForLogFileFull;
     *     DWORD MftBitmapWritesLazyWriter;
     *     DWORD MftBitmapWritesUserRequest;
     *     struct {
     *         DWORD Write;
     *         DWORD Create;
     *         DWORD SetInfo;
     *         DWORD Flush;
     *     } MftBitmapWritesUserLevel;
     *     DWORDLONG UserIndexReads;
     *     DWORDLONG UserIndexReadBytes;
     *     DWORDLONG UserIndexWrites;
     *     DWORDLONG UserIndexWriteBytes;
     *     DWORDLONG LogFileReads;
     *     DWORDLONG LogFileReadBytes;
     *     DWORDLONG LogFileWrites;
     *     DWORDLONG LogFileWriteBytes;
     *     struct {
     *         DWORD Calls;
     *         DWORD RunsReturned;
     *         DWORD Hints;
     *         DWORD HintsHonored;
     *         DWORD Cache;
     *         DWORD CacheMiss;
     *         DWORDLONG Clusters;
     *         DWORDLONG HintsClusters;
     *         DWORDLONG CacheClusters;
     *         DWORDLONG CacheMissClusters;
     *     } Allocate;
     *     DWORD DiskResourcesExhausted;
     *     DWORDLONG VolumeTrimCount;
     *     DWORDLONG VolumeTrimTime;
     *     DWORDLONG VolumeTrimByteCount;
     *     DWORDLONG FileLevelTrimCount;
     *     DWORDLONG FileLevelTrimTime;
     *     DWORDLONG FileLevelTrimByteCount;
     *     DWORDLONG VolumeTrimSkippedCount;
     *     DWORDLONG VolumeTrimSkippedByteCount;
     *     DWORDLONG NtfsFillStatInfoFromMftRecordCalledCount;
     *     DWORDLONG NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount;
     *     DWORDLONG NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount;
     * } *PNTFS_STATISTICS_EX
     * }
     */
    public static final AddressLayout PNTFS_STATISTICS_EX = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_OBJECTID_BUFFER {
     *     BYTE ObjectId[16];
     *     union {
     *         struct {
     *             BYTE BirthVolumeId[16];
     *             BYTE BirthObjectId[16];
     *             BYTE DomainId[16];
     *         };
     *         BYTE ExtendedInfo[48];
     *     };
     * } *PFILE_OBJECTID_BUFFER
     * }
     */
    public static final AddressLayout PFILE_OBJECTID_BUFFER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_SET_SPARSE_BUFFER {
     *     BOOLEAN SetSparse;
     * } *PFILE_SET_SPARSE_BUFFER
     * }
     */
    public static final AddressLayout PFILE_SET_SPARSE_BUFFER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_ZERO_DATA_INFORMATION {
     *     LARGE_INTEGER FileOffset;
     *     LARGE_INTEGER BeyondFinalZero;
     * } *PFILE_ZERO_DATA_INFORMATION
     * }
     */
    public static final AddressLayout PFILE_ZERO_DATA_INFORMATION = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_ZERO_DATA_INFORMATION_EX {
     *     LARGE_INTEGER FileOffset;
     *     LARGE_INTEGER BeyondFinalZero;
     *     DWORD Flags;
     * } *PFILE_ZERO_DATA_INFORMATION_EX
     * }
     */
    public static final AddressLayout PFILE_ZERO_DATA_INFORMATION_EX = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_ALLOCATED_RANGE_BUFFER {
     *     LARGE_INTEGER FileOffset;
     *     LARGE_INTEGER Length;
     * } *PFILE_ALLOCATED_RANGE_BUFFER
     * }
     */
    public static final AddressLayout PFILE_ALLOCATED_RANGE_BUFFER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ENCRYPTION_BUFFER {
     *     DWORD EncryptionOperation;
     *     BYTE Private[1];
     * } *PENCRYPTION_BUFFER
     * }
     */
    public static final AddressLayout PENCRYPTION_BUFFER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DECRYPTION_STATUS_BUFFER {
     *     BOOLEAN NoEncryptedStreams;
     * } *PDECRYPTION_STATUS_BUFFER
     * }
     */
    public static final AddressLayout PDECRYPTION_STATUS_BUFFER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _REQUEST_RAW_ENCRYPTED_DATA {
     *     LONGLONG FileOffset;
     *     DWORD Length;
     * } *PREQUEST_RAW_ENCRYPTED_DATA
     * }
     */
    public static final AddressLayout PREQUEST_RAW_ENCRYPTED_DATA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ENCRYPTED_DATA_INFO {
     *     DWORDLONG StartingFileOffset;
     *     DWORD OutputBufferOffset;
     *     DWORD BytesWithinFileSize;
     *     DWORD BytesWithinValidDataLength;
     *     WORD CompressionFormat;
     *     BYTE DataUnitShift;
     *     BYTE ChunkShift;
     *     BYTE ClusterShift;
     *     BYTE EncryptionFormat;
     *     WORD NumberOfDataBlocks;
     *     DWORD DataBlockSize[1];
     * } *PENCRYPTED_DATA_INFO
     * }
     */
    public static final AddressLayout PENCRYPTED_DATA_INFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _EXTENDED_ENCRYPTED_DATA_INFO {
     *     DWORD ExtendedCode;
     *     DWORD Length;
     *     DWORD Flags;
     *     DWORD Reserved;
     * } *PEXTENDED_ENCRYPTED_DATA_INFO
     * }
     */
    public static final AddressLayout PEXTENDED_ENCRYPTED_DATA_INFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PLEX_READ_DATA_REQUEST {
     *     LARGE_INTEGER ByteOffset;
     *     DWORD ByteLength;
     *     DWORD PlexNumber;
     * } *PPLEX_READ_DATA_REQUEST
     * }
     */
    public static final AddressLayout PPLEX_READ_DATA_REQUEST = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SI_COPYFILE {
     *     DWORD SourceFileNameLength;
     *     DWORD DestinationFileNameLength;
     *     DWORD Flags;
     *     WCHAR FileNameBuffer[1];
     * } *PSI_COPYFILE
     * }
     */
    public static final AddressLayout PSI_COPYFILE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_MAKE_COMPATIBLE_BUFFER {
     *     BOOLEAN CloseDisc;
     * } *PFILE_MAKE_COMPATIBLE_BUFFER
     * }
     */
    public static final AddressLayout PFILE_MAKE_COMPATIBLE_BUFFER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_SET_DEFECT_MGMT_BUFFER {
     *     BOOLEAN Disable;
     * } *PFILE_SET_DEFECT_MGMT_BUFFER
     * }
     */
    public static final AddressLayout PFILE_SET_DEFECT_MGMT_BUFFER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_QUERY_SPARING_BUFFER {
     *     DWORD SparingUnitBytes;
     *     BOOLEAN SoftwareSparing;
     *     DWORD TotalSpareBlocks;
     *     DWORD FreeSpareBlocks;
     * } *PFILE_QUERY_SPARING_BUFFER
     * }
     */
    public static final AddressLayout PFILE_QUERY_SPARING_BUFFER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER {
     *     LARGE_INTEGER DirectoryCount;
     *     LARGE_INTEGER FileCount;
     *     WORD FsFormatMajVersion;
     *     WORD FsFormatMinVersion;
     *     WCHAR FsFormatName[12];
     *     LARGE_INTEGER FormatTime;
     *     LARGE_INTEGER LastUpdateTime;
     *     WCHAR CopyrightInfo[34];
     *     WCHAR AbstractInfo[34];
     *     WCHAR FormattingImplementationInfo[34];
     *     WCHAR LastModifyingImplementationInfo[34];
     * } *PFILE_QUERY_ON_DISK_VOL_INFO_BUFFER
     * }
     */
    public static final AddressLayout PFILE_QUERY_ON_DISK_VOL_INFO_BUFFER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef DWORDLONG CLSN
     * }
     */
    public static final OfLong CLSN = wgl_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_INITIATE_REPAIR_OUTPUT_BUFFER {
     *     DWORDLONG Hint1;
     *     DWORDLONG Hint2;
     *     CLSN Clsn;
     *     DWORD Status;
     * } *PFILE_INITIATE_REPAIR_OUTPUT_BUFFER
     * }
     */
    public static final AddressLayout PFILE_INITIATE_REPAIR_OUTPUT_BUFFER = wgl_h.C_POINTER;
    private static final int ShrinkPrepare = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _SHRINK_VOLUME_REQUEST_TYPES.ShrinkPrepare = 1
     * }
     */
    public static int ShrinkPrepare() {
        return ShrinkPrepare;
    }
    private static final int ShrinkCommit = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _SHRINK_VOLUME_REQUEST_TYPES.ShrinkCommit = 2
     * }
     */
    public static int ShrinkCommit() {
        return ShrinkCommit;
    }
    private static final int ShrinkAbort = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _SHRINK_VOLUME_REQUEST_TYPES.ShrinkAbort = 3
     * }
     */
    public static int ShrinkAbort() {
        return ShrinkAbort;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _SHRINK_VOLUME_REQUEST_TYPES {
     *     ShrinkPrepare = 1,
     *     ShrinkCommit,
     *     ShrinkAbort
     * } *PSHRINK_VOLUME_REQUEST_TYPES
     * }
     */
    public static final AddressLayout PSHRINK_VOLUME_REQUEST_TYPES = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SHRINK_VOLUME_INFORMATION {
     *     SHRINK_VOLUME_REQUEST_TYPES ShrinkRequestType;
     *     DWORDLONG Flags;
     *     LONGLONG NewNumberOfSectors;
     * } *PSHRINK_VOLUME_INFORMATION
     * }
     */
    public static final AddressLayout PSHRINK_VOLUME_INFORMATION = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TXFS_MODIFY_RM {
     *     DWORD Flags;
     *     DWORD LogContainerCountMax;
     *     DWORD LogContainerCountMin;
     *     DWORD LogContainerCount;
     *     DWORD LogGrowthIncrement;
     *     DWORD LogAutoShrinkPercentage;
     *     DWORDLONG Reserved;
     *     WORD LoggingMode;
     * } *PTXFS_MODIFY_RM
     * }
     */
    public static final AddressLayout PTXFS_MODIFY_RM = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TXFS_QUERY_RM_INFORMATION {
     *     DWORD BytesRequired;
     *     DWORDLONG TailLsn;
     *     DWORDLONG CurrentLsn;
     *     DWORDLONG ArchiveTailLsn;
     *     DWORDLONG LogContainerSize;
     *     LARGE_INTEGER HighestVirtualClock;
     *     DWORD LogContainerCount;
     *     DWORD LogContainerCountMax;
     *     DWORD LogContainerCountMin;
     *     DWORD LogGrowthIncrement;
     *     DWORD LogAutoShrinkPercentage;
     *     DWORD Flags;
     *     WORD LoggingMode;
     *     WORD Reserved;
     *     DWORD RmState;
     *     DWORDLONG LogCapacity;
     *     DWORDLONG LogFree;
     *     DWORDLONG TopsSize;
     *     DWORDLONG TopsUsed;
     *     DWORDLONG TransactionCount;
     *     DWORDLONG OnePCCount;
     *     DWORDLONG TwoPCCount;
     *     DWORDLONG NumberLogFileFull;
     *     DWORDLONG OldestTransactionAge;
     *     GUID RMName;
     *     DWORD TmLogPathOffset;
     * } *PTXFS_QUERY_RM_INFORMATION
     * }
     */
    public static final AddressLayout PTXFS_QUERY_RM_INFORMATION = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TXFS_ROLLFORWARD_REDO_INFORMATION {
     *     LARGE_INTEGER LastVirtualClock;
     *     DWORDLONG LastRedoLsn;
     *     DWORDLONG HighestRecoveryLsn;
     *     DWORD Flags;
     * } *PTXFS_ROLLFORWARD_REDO_INFORMATION
     * }
     */
    public static final AddressLayout PTXFS_ROLLFORWARD_REDO_INFORMATION = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TXFS_START_RM_INFORMATION {
     *     DWORD Flags;
     *     DWORDLONG LogContainerSize;
     *     DWORD LogContainerCountMin;
     *     DWORD LogContainerCountMax;
     *     DWORD LogGrowthIncrement;
     *     DWORD LogAutoShrinkPercentage;
     *     DWORD TmLogPathOffset;
     *     WORD TmLogPathLength;
     *     WORD LoggingMode;
     *     WORD LogPathLength;
     *     WORD Reserved;
     *     WCHAR LogPath[1];
     * } *PTXFS_START_RM_INFORMATION
     * }
     */
    public static final AddressLayout PTXFS_START_RM_INFORMATION = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TXFS_GET_METADATA_INFO_OUT {
     *     struct {
     *         LONGLONG LowPart;
     *         LONGLONG HighPart;
     *     } TxfFileId;
     *     GUID LockingTransaction;
     *     DWORDLONG LastLsn;
     *     DWORD TransactionState;
     * } *PTXFS_GET_METADATA_INFO_OUT
     * }
     */
    public static final AddressLayout PTXFS_GET_METADATA_INFO_OUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY {
     *     DWORDLONG Offset;
     *     DWORD NameFlags;
     *     LONGLONG FileId;
     *     DWORD Reserved1;
     *     DWORD Reserved2;
     *     LONGLONG Reserved3;
     *     WCHAR FileName[1];
     * } *PTXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY
     * }
     */
    public static final AddressLayout PTXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TXFS_LIST_TRANSACTION_LOCKED_FILES {
     *     GUID KtmTransaction;
     *     DWORDLONG NumberOfFiles;
     *     DWORDLONG BufferSizeRequired;
     *     DWORDLONG Offset;
     * } *PTXFS_LIST_TRANSACTION_LOCKED_FILES
     * }
     */
    public static final AddressLayout PTXFS_LIST_TRANSACTION_LOCKED_FILES = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TXFS_LIST_TRANSACTIONS_ENTRY {
     *     GUID TransactionId;
     *     DWORD TransactionState;
     *     DWORD Reserved1;
     *     DWORD Reserved2;
     *     LONGLONG Reserved3;
     * } *PTXFS_LIST_TRANSACTIONS_ENTRY
     * }
     */
    public static final AddressLayout PTXFS_LIST_TRANSACTIONS_ENTRY = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TXFS_LIST_TRANSACTIONS {
     *     DWORDLONG NumberOfTransactions;
     *     DWORDLONG BufferSizeRequired;
     * } *PTXFS_LIST_TRANSACTIONS
     * }
     */
    public static final AddressLayout PTXFS_LIST_TRANSACTIONS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TXFS_READ_BACKUP_INFORMATION_OUT {
     *     union {
     *         DWORD BufferLength;
     *         BYTE Buffer[1];
     *     };
     * } *PTXFS_READ_BACKUP_INFORMATION_OUT
     * }
     */
    public static final AddressLayout PTXFS_READ_BACKUP_INFORMATION_OUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TXFS_WRITE_BACKUP_INFORMATION {
     *     BYTE Buffer[1];
     * } *PTXFS_WRITE_BACKUP_INFORMATION
     * }
     */
    public static final AddressLayout PTXFS_WRITE_BACKUP_INFORMATION = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TXFS_GET_TRANSACTED_VERSION {
     *     DWORD ThisBaseVersion;
     *     DWORD LatestVersion;
     *     WORD ThisMiniVersion;
     *     WORD FirstMiniVersion;
     *     WORD LatestMiniVersion;
     * } *PTXFS_GET_TRANSACTED_VERSION
     * }
     */
    public static final AddressLayout PTXFS_GET_TRANSACTED_VERSION = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TXFS_SAVEPOINT_INFORMATION {
     *     HANDLE KtmTransaction;
     *     DWORD ActionCode;
     *     DWORD SavepointId;
     * } *PTXFS_SAVEPOINT_INFORMATION
     * }
     */
    public static final AddressLayout PTXFS_SAVEPOINT_INFORMATION = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TXFS_CREATE_MINIVERSION_INFO {
     *     WORD StructureVersion;
     *     WORD StructureLength;
     *     DWORD BaseVersion;
     *     WORD MiniVersion;
     * } *PTXFS_CREATE_MINIVERSION_INFO
     * }
     */
    public static final AddressLayout PTXFS_CREATE_MINIVERSION_INFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TXFS_TRANSACTION_ACTIVE_INFO {
     *     BOOLEAN TransactionsActiveAtSnapshot;
     * } *PTXFS_TRANSACTION_ACTIVE_INFO
     * }
     */
    public static final AddressLayout PTXFS_TRANSACTION_ACTIVE_INFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _BOOT_AREA_INFO {
     *     DWORD BootSectorCount;
     *     struct {
     *         LARGE_INTEGER Offset;
     *     } BootSectors[2];
     * } *PBOOT_AREA_INFO
     * }
     */
    public static final AddressLayout PBOOT_AREA_INFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RETRIEVAL_POINTER_BASE {
     *     LARGE_INTEGER FileAreaOffset;
     * } *PRETRIEVAL_POINTER_BASE
     * }
     */
    public static final AddressLayout PRETRIEVAL_POINTER_BASE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_FS_PERSISTENT_VOLUME_INFORMATION {
     *     DWORD VolumeFlags;
     *     DWORD FlagMask;
     *     DWORD Version;
     *     DWORD Reserved;
     * } *PFILE_FS_PERSISTENT_VOLUME_INFORMATION
     * }
     */
    public static final AddressLayout PFILE_FS_PERSISTENT_VOLUME_INFORMATION = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_SYSTEM_RECOGNITION_INFORMATION {
     *     CHAR FileSystem[9];
     * } *PFILE_SYSTEM_RECOGNITION_INFORMATION
     * }
     */
    public static final AddressLayout PFILE_SYSTEM_RECOGNITION_INFORMATION = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _REQUEST_OPLOCK_INPUT_BUFFER {
     *     WORD StructureVersion;
     *     WORD StructureLength;
     *     DWORD RequestedOplockLevel;
     *     DWORD Flags;
     * } *PREQUEST_OPLOCK_INPUT_BUFFER
     * }
     */
    public static final AddressLayout PREQUEST_OPLOCK_INPUT_BUFFER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _REQUEST_OPLOCK_OUTPUT_BUFFER {
     *     WORD StructureVersion;
     *     WORD StructureLength;
     *     DWORD OriginalOplockLevel;
     *     DWORD NewOplockLevel;
     *     DWORD Flags;
     *     ACCESS_MASK AccessMode;
     *     WORD ShareMode;
     * } *PREQUEST_OPLOCK_OUTPUT_BUFFER
     * }
     */
    public static final AddressLayout PREQUEST_OPLOCK_OUTPUT_BUFFER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _VIRTUAL_STORAGE_TYPE {
     *     DWORD DeviceId;
     *     GUID VendorId;
     * } *PVIRTUAL_STORAGE_TYPE
     * }
     */
    public static final AddressLayout PVIRTUAL_STORAGE_TYPE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST {
     *     DWORD RequestLevel;
     *     DWORD RequestFlags;
     * } *PSTORAGE_QUERY_DEPENDENT_VOLUME_REQUEST
     * }
     */
    public static final AddressLayout PSTORAGE_QUERY_DEPENDENT_VOLUME_REQUEST = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY {
     *     DWORD EntryLength;
     *     DWORD DependencyTypeFlags;
     *     DWORD ProviderSpecificFlags;
     *     VIRTUAL_STORAGE_TYPE VirtualStorageType;
     * } *PSTORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY
     * }
     */
    public static final AddressLayout PSTORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY {
     *     DWORD EntryLength;
     *     DWORD DependencyTypeFlags;
     *     DWORD ProviderSpecificFlags;
     *     VIRTUAL_STORAGE_TYPE VirtualStorageType;
     *     DWORD AncestorLevel;
     *     DWORD HostVolumeNameOffset;
     *     DWORD HostVolumeNameSize;
     *     DWORD DependentVolumeNameOffset;
     *     DWORD DependentVolumeNameSize;
     *     DWORD RelativePathOffset;
     *     DWORD RelativePathSize;
     *     DWORD DependentDeviceNameOffset;
     *     DWORD DependentDeviceNameSize;
     * } *PSTORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY
     * }
     */
    public static final AddressLayout PSTORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE {
     *     DWORD ResponseLevel;
     *     DWORD NumberEntries;
     *     union {
     *         STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY Lev1Depends[];
     *         STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY Lev2Depends[];
     *     };
     * } *PSTORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE
     * }
     */
    public static final AddressLayout PSTORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SD_CHANGE_MACHINE_SID_INPUT {
     *     WORD CurrentMachineSIDOffset;
     *     WORD CurrentMachineSIDLength;
     *     WORD NewMachineSIDOffset;
     *     WORD NewMachineSIDLength;
     * } *PSD_CHANGE_MACHINE_SID_INPUT
     * }
     */
    public static final AddressLayout PSD_CHANGE_MACHINE_SID_INPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SD_CHANGE_MACHINE_SID_OUTPUT {
     *     DWORDLONG NumSDChangedSuccess;
     *     DWORDLONG NumSDChangedFail;
     *     DWORDLONG NumSDUnused;
     *     DWORDLONG NumSDTotal;
     *     DWORDLONG NumMftSDChangedSuccess;
     *     DWORDLONG NumMftSDChangedFail;
     *     DWORDLONG NumMftSDTotal;
     * } *PSD_CHANGE_MACHINE_SID_OUTPUT
     * }
     */
    public static final AddressLayout PSD_CHANGE_MACHINE_SID_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SD_QUERY_STATS_INPUT {
     *     DWORD Reserved;
     * } *PSD_QUERY_STATS_INPUT
     * }
     */
    public static final AddressLayout PSD_QUERY_STATS_INPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SD_QUERY_STATS_OUTPUT {
     *     DWORDLONG SdsStreamSize;
     *     DWORDLONG SdsAllocationSize;
     *     DWORDLONG SiiStreamSize;
     *     DWORDLONG SiiAllocationSize;
     *     DWORDLONG SdhStreamSize;
     *     DWORDLONG SdhAllocationSize;
     *     DWORDLONG NumSDTotal;
     *     DWORDLONG NumSDUnused;
     * } *PSD_QUERY_STATS_OUTPUT
     * }
     */
    public static final AddressLayout PSD_QUERY_STATS_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SD_ENUM_SDS_INPUT {
     *     DWORDLONG StartingOffset;
     *     DWORDLONG MaxSDEntriesToReturn;
     * } *PSD_ENUM_SDS_INPUT
     * }
     */
    public static final AddressLayout PSD_ENUM_SDS_INPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SD_ENUM_SDS_ENTRY {
     *     DWORD Hash;
     *     DWORD SecurityId;
     *     DWORDLONG Offset;
     *     DWORD Length;
     *     BYTE Descriptor[1];
     * } *PSD_ENUM_SDS_ENTRY
     * }
     */
    public static final AddressLayout PSD_ENUM_SDS_ENTRY = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SD_ENUM_SDS_OUTPUT {
     *     DWORDLONG NextOffset;
     *     DWORDLONG NumSDEntriesReturned;
     *     DWORDLONG NumSDBytesReturned;
     *     SD_ENUM_SDS_ENTRY SDEntry[1];
     * } *PSD_ENUM_SDS_OUTPUT
     * }
     */
    public static final AddressLayout PSD_ENUM_SDS_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SD_GLOBAL_CHANGE_INPUT {
     *     DWORD Flags;
     *     DWORD ChangeType;
     *     union {
     *         SD_CHANGE_MACHINE_SID_INPUT SdChange;
     *         SD_QUERY_STATS_INPUT SdQueryStats;
     *         SD_ENUM_SDS_INPUT SdEnumSds;
     *     };
     * } *PSD_GLOBAL_CHANGE_INPUT
     * }
     */
    public static final AddressLayout PSD_GLOBAL_CHANGE_INPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SD_GLOBAL_CHANGE_OUTPUT {
     *     DWORD Flags;
     *     DWORD ChangeType;
     *     union {
     *         SD_CHANGE_MACHINE_SID_OUTPUT SdChange;
     *         SD_QUERY_STATS_OUTPUT SdQueryStats;
     *         SD_ENUM_SDS_OUTPUT SdEnumSds;
     *     };
     * } *PSD_GLOBAL_CHANGE_OUTPUT
     * }
     */
    public static final AddressLayout PSD_GLOBAL_CHANGE_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _LOOKUP_STREAM_FROM_CLUSTER_INPUT {
     *     DWORD Flags;
     *     DWORD NumberOfClusters;
     *     LARGE_INTEGER Cluster[1];
     * } *PLOOKUP_STREAM_FROM_CLUSTER_INPUT
     * }
     */
    public static final AddressLayout PLOOKUP_STREAM_FROM_CLUSTER_INPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT {
     *     DWORD Offset;
     *     DWORD NumberOfMatches;
     *     DWORD BufferSizeRequired;
     * } *PLOOKUP_STREAM_FROM_CLUSTER_OUTPUT
     * }
     */
    public static final AddressLayout PLOOKUP_STREAM_FROM_CLUSTER_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _LOOKUP_STREAM_FROM_CLUSTER_ENTRY {
     *     DWORD OffsetToNext;
     *     DWORD Flags;
     *     LARGE_INTEGER Reserved;
     *     LARGE_INTEGER Cluster;
     *     WCHAR FileName[1];
     * } *PLOOKUP_STREAM_FROM_CLUSTER_ENTRY
     * }
     */
    public static final AddressLayout PLOOKUP_STREAM_FROM_CLUSTER_ENTRY = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_TYPE_NOTIFICATION_INPUT {
     *     DWORD Flags;
     *     DWORD NumFileTypeIDs;
     *     GUID FileTypeID[1];
     * } *PFILE_TYPE_NOTIFICATION_INPUT
     * }
     */
    public static final AddressLayout PFILE_TYPE_NOTIFICATION_INPUT = wgl_h.C_POINTER;

    private static class FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE
     * }
     */
    public static GroupLayout FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE$layout() {
        return FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE
     * }
     */
    public static MemorySegment FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE() {
        return FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE
     * }
     */
    public static void FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE$constants.SEGMENT, 0L, FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE$constants.LAYOUT.byteSize());
    }

    private static class FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE
     * }
     */
    public static GroupLayout FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE$layout() {
        return FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE
     * }
     */
    public static MemorySegment FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE() {
        return FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE
     * }
     */
    public static void FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE$constants.SEGMENT, 0L, FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE$constants.LAYOUT.byteSize());
    }

    private static class FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE
     * }
     */
    public static GroupLayout FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE$layout() {
        return FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE
     * }
     */
    public static MemorySegment FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE() {
        return FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE
     * }
     */
    public static void FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE$constants.SEGMENT, 0L, FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef struct _CSV_MGMT_LOCK {
     *     DWORD Flags;
     * } *PCSV_MGMT_LOCK
     * }
     */
    public static final AddressLayout PCSV_MGMT_LOCK = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CSV_NAMESPACE_INFO {
     *     DWORD Version;
     *     DWORD DeviceNumber;
     *     LARGE_INTEGER StartingOffset;
     *     DWORD SectorSize;
     * } *PCSV_NAMESPACE_INFO
     * }
     */
    public static final AddressLayout PCSV_NAMESPACE_INFO = wgl_h.C_POINTER;
    private static final int CsvControlStartRedirectFile = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _CSV_CONTROL_OP.CsvControlStartRedirectFile = 2
     * }
     */
    public static int CsvControlStartRedirectFile() {
        return CsvControlStartRedirectFile;
    }
    private static final int CsvControlStopRedirectFile = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _CSV_CONTROL_OP.CsvControlStopRedirectFile = 3
     * }
     */
    public static int CsvControlStopRedirectFile() {
        return CsvControlStopRedirectFile;
    }
    private static final int CsvControlQueryRedirectState = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _CSV_CONTROL_OP.CsvControlQueryRedirectState = 4
     * }
     */
    public static int CsvControlQueryRedirectState() {
        return CsvControlQueryRedirectState;
    }
    private static final int CsvControlQueryFileRevision = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _CSV_CONTROL_OP.CsvControlQueryFileRevision = 6
     * }
     */
    public static int CsvControlQueryFileRevision() {
        return CsvControlQueryFileRevision;
    }
    private static final int CsvControlQueryMdsPath = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _CSV_CONTROL_OP.CsvControlQueryMdsPath = 8
     * }
     */
    public static int CsvControlQueryMdsPath() {
        return CsvControlQueryMdsPath;
    }
    private static final int CsvControlQueryFileRevisionFileId128 = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _CSV_CONTROL_OP.CsvControlQueryFileRevisionFileId128 = 9
     * }
     */
    public static int CsvControlQueryFileRevisionFileId128() {
        return CsvControlQueryFileRevisionFileId128;
    }
    private static final int CsvControlQueryVolumeRedirectState = (int)10L;
    /**
     * {@snippet lang=c :
     * enum _CSV_CONTROL_OP.CsvControlQueryVolumeRedirectState = 10
     * }
     */
    public static int CsvControlQueryVolumeRedirectState() {
        return CsvControlQueryVolumeRedirectState;
    }
    private static final int CsvControlEnableUSNRangeModificationTracking = (int)13L;
    /**
     * {@snippet lang=c :
     * enum _CSV_CONTROL_OP.CsvControlEnableUSNRangeModificationTracking = 13
     * }
     */
    public static int CsvControlEnableUSNRangeModificationTracking() {
        return CsvControlEnableUSNRangeModificationTracking;
    }
    private static final int CsvControlMarkHandleLocalVolumeMount = (int)14L;
    /**
     * {@snippet lang=c :
     * enum _CSV_CONTROL_OP.CsvControlMarkHandleLocalVolumeMount = 14
     * }
     */
    public static int CsvControlMarkHandleLocalVolumeMount() {
        return CsvControlMarkHandleLocalVolumeMount;
    }
    private static final int CsvControlUnmarkHandleLocalVolumeMount = (int)15L;
    /**
     * {@snippet lang=c :
     * enum _CSV_CONTROL_OP.CsvControlUnmarkHandleLocalVolumeMount = 15
     * }
     */
    public static int CsvControlUnmarkHandleLocalVolumeMount() {
        return CsvControlUnmarkHandleLocalVolumeMount;
    }
    private static final int CsvControlGetCsvFsMdsPathV2 = (int)18L;
    /**
     * {@snippet lang=c :
     * enum _CSV_CONTROL_OP.CsvControlGetCsvFsMdsPathV2 = 18
     * }
     */
    public static int CsvControlGetCsvFsMdsPathV2() {
        return CsvControlGetCsvFsMdsPathV2;
    }
    private static final int CsvControlDisableCaching = (int)19L;
    /**
     * {@snippet lang=c :
     * enum _CSV_CONTROL_OP.CsvControlDisableCaching = 19
     * }
     */
    public static int CsvControlDisableCaching() {
        return CsvControlDisableCaching;
    }
    private static final int CsvControlEnableCaching = (int)20L;
    /**
     * {@snippet lang=c :
     * enum _CSV_CONTROL_OP.CsvControlEnableCaching = 20
     * }
     */
    public static int CsvControlEnableCaching() {
        return CsvControlEnableCaching;
    }
    private static final int CsvControlStartForceDFO = (int)21L;
    /**
     * {@snippet lang=c :
     * enum _CSV_CONTROL_OP.CsvControlStartForceDFO = 21
     * }
     */
    public static int CsvControlStartForceDFO() {
        return CsvControlStartForceDFO;
    }
    private static final int CsvControlStopForceDFO = (int)22L;
    /**
     * {@snippet lang=c :
     * enum _CSV_CONTROL_OP.CsvControlStopForceDFO = 22
     * }
     */
    public static int CsvControlStopForceDFO() {
        return CsvControlStopForceDFO;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _CSV_CONTROL_OP {
     *     CsvControlStartRedirectFile = 2,
     *     CsvControlStopRedirectFile = 3,
     *     CsvControlQueryRedirectState = 4,
     *     CsvControlQueryFileRevision = 6,
     *     CsvControlQueryMdsPath = 8,
     *     CsvControlQueryFileRevisionFileId128 = 9,
     *     CsvControlQueryVolumeRedirectState = 10,
     *     CsvControlEnableUSNRangeModificationTracking = 13,
     *     CsvControlMarkHandleLocalVolumeMount = 14,
     *     CsvControlUnmarkHandleLocalVolumeMount = 15,
     *     CsvControlGetCsvFsMdsPathV2 = 18,
     *     CsvControlDisableCaching = 19,
     *     CsvControlEnableCaching = 20,
     *     CsvControlStartForceDFO = 21,
     *     CsvControlStopForceDFO = 22
     * } *PCSV_CONTROL_OP
     * }
     */
    public static final AddressLayout PCSV_CONTROL_OP = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CSV_CONTROL_PARAM {
     *     CSV_CONTROL_OP Operation;
     *     LONGLONG Unused;
     * } *PCSV_CONTROL_PARAM
     * }
     */
    public static final AddressLayout PCSV_CONTROL_PARAM = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CSV_QUERY_REDIRECT_STATE {
     *     DWORD MdsNodeId;
     *     DWORD DsNodeId;
     *     BOOLEAN FileRedirected;
     * } *PCSV_QUERY_REDIRECT_STATE
     * }
     */
    public static final AddressLayout PCSV_QUERY_REDIRECT_STATE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CSV_QUERY_FILE_REVISION {
     *     LONGLONG FileId;
     *     LONGLONG FileRevision[3];
     * } *PCSV_QUERY_FILE_REVISION
     * }
     */
    public static final AddressLayout PCSV_QUERY_FILE_REVISION = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CSV_QUERY_FILE_REVISION_FILE_ID_128 {
     *     FILE_ID_128 FileId;
     *     LONGLONG FileRevision[3];
     * } *PCSV_QUERY_FILE_REVISION_FILE_ID_128
     * }
     */
    public static final AddressLayout PCSV_QUERY_FILE_REVISION_FILE_ID_128 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CSV_QUERY_MDS_PATH {
     *     DWORD MdsNodeId;
     *     DWORD DsNodeId;
     *     DWORD PathLength;
     *     WCHAR Path[1];
     * } *PCSV_QUERY_MDS_PATH
     * }
     */
    public static final AddressLayout PCSV_QUERY_MDS_PATH = wgl_h.C_POINTER;
    private static final int CsvFsDiskConnectivityNone = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _CSVFS_DISK_CONNECTIVITY.CsvFsDiskConnectivityNone = 0
     * }
     */
    public static int CsvFsDiskConnectivityNone() {
        return CsvFsDiskConnectivityNone;
    }
    private static final int CsvFsDiskConnectivityMdsNodeOnly = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _CSVFS_DISK_CONNECTIVITY.CsvFsDiskConnectivityMdsNodeOnly = 1
     * }
     */
    public static int CsvFsDiskConnectivityMdsNodeOnly() {
        return CsvFsDiskConnectivityMdsNodeOnly;
    }
    private static final int CsvFsDiskConnectivitySubsetOfNodes = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _CSVFS_DISK_CONNECTIVITY.CsvFsDiskConnectivitySubsetOfNodes = 2
     * }
     */
    public static int CsvFsDiskConnectivitySubsetOfNodes() {
        return CsvFsDiskConnectivitySubsetOfNodes;
    }
    private static final int CsvFsDiskConnectivityAllNodes = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _CSVFS_DISK_CONNECTIVITY.CsvFsDiskConnectivityAllNodes = 3
     * }
     */
    public static int CsvFsDiskConnectivityAllNodes() {
        return CsvFsDiskConnectivityAllNodes;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _CSVFS_DISK_CONNECTIVITY {
     *     CsvFsDiskConnectivityNone = 0,
     *     CsvFsDiskConnectivityMdsNodeOnly = 1,
     *     CsvFsDiskConnectivitySubsetOfNodes = 2,
     *     CsvFsDiskConnectivityAllNodes = 3
     * } *PCSVFS_DISK_CONNECTIVITY
     * }
     */
    public static final AddressLayout PCSVFS_DISK_CONNECTIVITY = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CSV_QUERY_VOLUME_REDIRECT_STATE {
     *     DWORD MdsNodeId;
     *     DWORD DsNodeId;
     *     BOOLEAN IsDiskConnected;
     *     BOOLEAN ClusterEnableDirectIo;
     *     CSVFS_DISK_CONNECTIVITY DiskConnectivity;
     * } *PCSV_QUERY_VOLUME_REDIRECT_STATE
     * }
     */
    public static final AddressLayout PCSV_QUERY_VOLUME_REDIRECT_STATE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CSV_QUERY_MDS_PATH_V2 {
     *     LONGLONG Version;
     *     DWORD RequiredSize;
     *     DWORD MdsNodeId;
     *     DWORD DsNodeId;
     *     DWORD Flags;
     *     CSVFS_DISK_CONNECTIVITY DiskConnectivity;
     *     GUID VolumeId;
     *     DWORD IpAddressOffset;
     *     DWORD IpAddressLength;
     *     DWORD PathOffset;
     *     DWORD PathLength;
     * } *PCSV_QUERY_MDS_PATH_V2
     * }
     */
    public static final AddressLayout PCSV_QUERY_MDS_PATH_V2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT {
     *     DWORDLONG VetoedFromAltitudeIntegral;
     *     DWORDLONG VetoedFromAltitudeDecimal;
     *     WCHAR Reason[256];
     * } *PCSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT
     * }
     */
    public static final AddressLayout PCSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT = wgl_h.C_POINTER;
    private static final int StorageReserveIdNone = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_RESERVE_ID.StorageReserveIdNone = 0
     * }
     */
    public static int StorageReserveIdNone() {
        return StorageReserveIdNone;
    }
    private static final int StorageReserveIdHard = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_RESERVE_ID.StorageReserveIdHard = 1
     * }
     */
    public static int StorageReserveIdHard() {
        return StorageReserveIdHard;
    }
    private static final int StorageReserveIdSoft = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_RESERVE_ID.StorageReserveIdSoft = 2
     * }
     */
    public static int StorageReserveIdSoft() {
        return StorageReserveIdSoft;
    }
    private static final int StorageReserveIdUpdateScratch = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_RESERVE_ID.StorageReserveIdUpdateScratch = 3
     * }
     */
    public static int StorageReserveIdUpdateScratch() {
        return StorageReserveIdUpdateScratch;
    }
    private static final int StorageReserveIdMax = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_RESERVE_ID.StorageReserveIdMax = 4
     * }
     */
    public static int StorageReserveIdMax() {
        return StorageReserveIdMax;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_RESERVE_ID {
     *     StorageReserveIdNone = 0,
     *     StorageReserveIdHard,
     *     StorageReserveIdSoft,
     *     StorageReserveIdUpdateScratch,
     *     StorageReserveIdMax
     * } *PSTORAGE_RESERVE_ID
     * }
     */
    public static final AddressLayout PSTORAGE_RESERVE_ID = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CSV_IS_OWNED_BY_CSVFS {
     *     BOOLEAN OwnedByCSVFS;
     * } *PCSV_IS_OWNED_BY_CSVFS
     * }
     */
    public static final AddressLayout PCSV_IS_OWNED_BY_CSVFS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_LEVEL_TRIM_RANGE {
     *     DWORDLONG Offset;
     *     DWORDLONG Length;
     * } *PFILE_LEVEL_TRIM_RANGE
     * }
     */
    public static final AddressLayout PFILE_LEVEL_TRIM_RANGE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_LEVEL_TRIM {
     *     DWORD Key;
     *     DWORD NumRanges;
     *     FILE_LEVEL_TRIM_RANGE Ranges[1];
     * } *PFILE_LEVEL_TRIM
     * }
     */
    public static final AddressLayout PFILE_LEVEL_TRIM = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_LEVEL_TRIM_OUTPUT {
     *     DWORD NumRangesProcessed;
     * } *PFILE_LEVEL_TRIM_OUTPUT
     * }
     */
    public static final AddressLayout PFILE_LEVEL_TRIM_OUTPUT = wgl_h.C_POINTER;
    private static final int QUERY_FILE_LAYOUT_FILTER_TYPE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _QUERY_FILE_LAYOUT_FILTER_TYPE.QUERY_FILE_LAYOUT_FILTER_TYPE_NONE = 0
     * }
     */
    public static int QUERY_FILE_LAYOUT_FILTER_TYPE_NONE() {
        return QUERY_FILE_LAYOUT_FILTER_TYPE_NONE;
    }
    private static final int QUERY_FILE_LAYOUT_FILTER_TYPE_CLUSTERS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _QUERY_FILE_LAYOUT_FILTER_TYPE.QUERY_FILE_LAYOUT_FILTER_TYPE_CLUSTERS = 1
     * }
     */
    public static int QUERY_FILE_LAYOUT_FILTER_TYPE_CLUSTERS() {
        return QUERY_FILE_LAYOUT_FILTER_TYPE_CLUSTERS;
    }
    private static final int QUERY_FILE_LAYOUT_FILTER_TYPE_FILEID = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _QUERY_FILE_LAYOUT_FILTER_TYPE.QUERY_FILE_LAYOUT_FILTER_TYPE_FILEID = 2
     * }
     */
    public static int QUERY_FILE_LAYOUT_FILTER_TYPE_FILEID() {
        return QUERY_FILE_LAYOUT_FILTER_TYPE_FILEID;
    }
    private static final int QUERY_FILE_LAYOUT_FILTER_TYPE_STORAGE_RESERVE_ID = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _QUERY_FILE_LAYOUT_FILTER_TYPE.QUERY_FILE_LAYOUT_FILTER_TYPE_STORAGE_RESERVE_ID = 3
     * }
     */
    public static int QUERY_FILE_LAYOUT_FILTER_TYPE_STORAGE_RESERVE_ID() {
        return QUERY_FILE_LAYOUT_FILTER_TYPE_STORAGE_RESERVE_ID;
    }
    private static final int QUERY_FILE_LAYOUT_NUM_FILTER_TYPES = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _QUERY_FILE_LAYOUT_FILTER_TYPE.QUERY_FILE_LAYOUT_NUM_FILTER_TYPES = 4
     * }
     */
    public static int QUERY_FILE_LAYOUT_NUM_FILTER_TYPES() {
        return QUERY_FILE_LAYOUT_NUM_FILTER_TYPES;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _CLUSTER_RANGE {
     *     LARGE_INTEGER StartingCluster;
     *     LARGE_INTEGER ClusterCount;
     * } *PCLUSTER_RANGE
     * }
     */
    public static final AddressLayout PCLUSTER_RANGE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_REFERENCE_RANGE {
     *     DWORDLONG StartingFileReferenceNumber;
     *     DWORDLONG EndingFileReferenceNumber;
     * } *PFILE_REFERENCE_RANGE
     * }
     */
    public static final AddressLayout PFILE_REFERENCE_RANGE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _QUERY_FILE_LAYOUT_INPUT {
     *     union {
     *         DWORD FilterEntryCount;
     *         DWORD NumberOfPairs;
     *     };
     *     DWORD Flags;
     *     QUERY_FILE_LAYOUT_FILTER_TYPE FilterType;
     *     DWORD Reserved;
     *     union {
     *         CLUSTER_RANGE ClusterRanges[1];
     *         FILE_REFERENCE_RANGE FileReferenceRanges[1];
     *         STORAGE_RESERVE_ID StorageReserveIds[1];
     *     } Filter;
     * } *PQUERY_FILE_LAYOUT_INPUT
     * }
     */
    public static final AddressLayout PQUERY_FILE_LAYOUT_INPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _QUERY_FILE_LAYOUT_OUTPUT {
     *     DWORD FileEntryCount;
     *     DWORD FirstFileOffset;
     *     DWORD Flags;
     *     DWORD Reserved;
     * } *PQUERY_FILE_LAYOUT_OUTPUT
     * }
     */
    public static final AddressLayout PQUERY_FILE_LAYOUT_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_LAYOUT_ENTRY {
     *     DWORD Version;
     *     DWORD NextFileOffset;
     *     DWORD Flags;
     *     DWORD FileAttributes;
     *     DWORDLONG FileReferenceNumber;
     *     DWORD FirstNameOffset;
     *     DWORD FirstStreamOffset;
     *     DWORD ExtraInfoOffset;
     *     DWORD ExtraInfoLength;
     * } *PFILE_LAYOUT_ENTRY
     * }
     */
    public static final AddressLayout PFILE_LAYOUT_ENTRY = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_LAYOUT_NAME_ENTRY {
     *     DWORD NextNameOffset;
     *     DWORD Flags;
     *     DWORDLONG ParentFileReferenceNumber;
     *     DWORD FileNameLength;
     *     DWORD Reserved;
     *     WCHAR FileName[1];
     * } *PFILE_LAYOUT_NAME_ENTRY
     * }
     */
    public static final AddressLayout PFILE_LAYOUT_NAME_ENTRY = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_LAYOUT_INFO_ENTRY {
     *     struct {
     *         LARGE_INTEGER CreationTime;
     *         LARGE_INTEGER LastAccessTime;
     *         LARGE_INTEGER LastWriteTime;
     *         LARGE_INTEGER ChangeTime;
     *         DWORD FileAttributes;
     *     } BasicInformation;
     *     DWORD OwnerId;
     *     DWORD SecurityId;
     *     USN Usn;
     *     STORAGE_RESERVE_ID StorageReserveId;
     * } *PFILE_LAYOUT_INFO_ENTRY
     * }
     */
    public static final AddressLayout PFILE_LAYOUT_INFO_ENTRY = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STREAM_LAYOUT_ENTRY {
     *     DWORD Version;
     *     DWORD NextStreamOffset;
     *     DWORD Flags;
     *     DWORD ExtentInformationOffset;
     *     LARGE_INTEGER AllocationSize;
     *     LARGE_INTEGER EndOfFile;
     *     DWORD StreamInformationOffset;
     *     DWORD AttributeTypeCode;
     *     DWORD AttributeFlags;
     *     DWORD StreamIdentifierLength;
     *     WCHAR StreamIdentifier[1];
     * } *PSTREAM_LAYOUT_ENTRY
     * }
     */
    public static final AddressLayout PSTREAM_LAYOUT_ENTRY = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STREAM_EXTENT_ENTRY {
     *     DWORD Flags;
     *     union {
     *         RETRIEVAL_POINTERS_BUFFER RetrievalPointers;
     *     } ExtentInformation;
     * } *PSTREAM_EXTENT_ENTRY
     * }
     */
    public static final AddressLayout PSTREAM_EXTENT_ENTRY = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER {
     *     WORD ChecksumAlgorithm;
     *     WORD Reserved;
     *     DWORD Flags;
     *     DWORD ChecksumChunkSizeInBytes;
     *     DWORD ClusterSizeInBytes;
     * } *PFSCTL_GET_INTEGRITY_INFORMATION_BUFFER
     * }
     */
    public static final AddressLayout PFSCTL_GET_INTEGRITY_INFORMATION_BUFFER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER {
     *     WORD ChecksumAlgorithm;
     *     WORD Reserved;
     *     DWORD Flags;
     * } *PFSCTL_SET_INTEGRITY_INFORMATION_BUFFER
     * }
     */
    public static final AddressLayout PFSCTL_SET_INTEGRITY_INFORMATION_BUFFER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX {
     *     BYTE EnableIntegrity;
     *     BYTE KeepIntegrityStateUnchanged;
     *     WORD Reserved;
     *     DWORD Flags;
     *     BYTE Version;
     *     BYTE Reserved2[7];
     * } *PFSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX
     * }
     */
    public static final AddressLayout PFSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FSCTL_OFFLOAD_READ_INPUT {
     *     DWORD Size;
     *     DWORD Flags;
     *     DWORD TokenTimeToLive;
     *     DWORD Reserved;
     *     DWORDLONG FileOffset;
     *     DWORDLONG CopyLength;
     * } *PFSCTL_OFFLOAD_READ_INPUT
     * }
     */
    public static final AddressLayout PFSCTL_OFFLOAD_READ_INPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FSCTL_OFFLOAD_READ_OUTPUT {
     *     DWORD Size;
     *     DWORD Flags;
     *     DWORDLONG TransferLength;
     *     BYTE Token[512];
     * } *PFSCTL_OFFLOAD_READ_OUTPUT
     * }
     */
    public static final AddressLayout PFSCTL_OFFLOAD_READ_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FSCTL_OFFLOAD_WRITE_INPUT {
     *     DWORD Size;
     *     DWORD Flags;
     *     DWORDLONG FileOffset;
     *     DWORDLONG CopyLength;
     *     DWORDLONG TransferOffset;
     *     BYTE Token[512];
     * } *PFSCTL_OFFLOAD_WRITE_INPUT
     * }
     */
    public static final AddressLayout PFSCTL_OFFLOAD_WRITE_INPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FSCTL_OFFLOAD_WRITE_OUTPUT {
     *     DWORD Size;
     *     DWORD Flags;
     *     DWORDLONG LengthWritten;
     * } *PFSCTL_OFFLOAD_WRITE_OUTPUT
     * }
     */
    public static final AddressLayout PFSCTL_OFFLOAD_WRITE_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SET_PURGE_FAILURE_MODE_INPUT {
     *     DWORD Flags;
     * } *PSET_PURGE_FAILURE_MODE_INPUT
     * }
     */
    public static final AddressLayout PSET_PURGE_FAILURE_MODE_INPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _REPAIR_COPIES_INPUT {
     *     DWORD Size;
     *     DWORD Flags;
     *     LARGE_INTEGER FileOffset;
     *     DWORD Length;
     *     DWORD SourceCopy;
     *     DWORD NumberOfRepairCopies;
     *     DWORD RepairCopies[1];
     * } *PREPAIR_COPIES_INPUT
     * }
     */
    public static final AddressLayout PREPAIR_COPIES_INPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _REPAIR_COPIES_OUTPUT {
     *     DWORD Size;
     *     DWORD Status;
     *     LARGE_INTEGER ResumeFileOffset;
     * } *PREPAIR_COPIES_OUTPUT
     * }
     */
    public static final AddressLayout PREPAIR_COPIES_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_REGION_INFO {
     *     LONGLONG FileOffset;
     *     LONGLONG Length;
     *     DWORD Usage;
     *     DWORD Reserved;
     * } *PFILE_REGION_INFO
     * }
     */
    public static final AddressLayout PFILE_REGION_INFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_REGION_OUTPUT {
     *     DWORD Flags;
     *     DWORD TotalRegionEntryCount;
     *     DWORD RegionEntryCount;
     *     DWORD Reserved;
     *     FILE_REGION_INFO Region[1];
     * } *PFILE_REGION_OUTPUT
     * }
     */
    public static final AddressLayout PFILE_REGION_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_REGION_INPUT {
     *     LONGLONG FileOffset;
     *     LONGLONG Length;
     *     DWORD DesiredUsage;
     * } *PFILE_REGION_INPUT
     * }
     */
    public static final AddressLayout PFILE_REGION_INPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _WRITE_USN_REASON_INPUT {
     *     DWORD Flags;
     *     DWORD UsnReasonToWrite;
     * } *PWRITE_USN_REASON_INPUT
     * }
     */
    public static final AddressLayout PWRITE_USN_REASON_INPUT = wgl_h.C_POINTER;
    private static final int FileStorageTierMediaTypeUnspecified = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _FILE_STORAGE_TIER_MEDIA_TYPE.FileStorageTierMediaTypeUnspecified = 0
     * }
     */
    public static int FileStorageTierMediaTypeUnspecified() {
        return FileStorageTierMediaTypeUnspecified;
    }
    private static final int FileStorageTierMediaTypeDisk = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _FILE_STORAGE_TIER_MEDIA_TYPE.FileStorageTierMediaTypeDisk = 1
     * }
     */
    public static int FileStorageTierMediaTypeDisk() {
        return FileStorageTierMediaTypeDisk;
    }
    private static final int FileStorageTierMediaTypeSsd = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _FILE_STORAGE_TIER_MEDIA_TYPE.FileStorageTierMediaTypeSsd = 2
     * }
     */
    public static int FileStorageTierMediaTypeSsd() {
        return FileStorageTierMediaTypeSsd;
    }
    private static final int FileStorageTierMediaTypeScm = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _FILE_STORAGE_TIER_MEDIA_TYPE.FileStorageTierMediaTypeScm = 4
     * }
     */
    public static int FileStorageTierMediaTypeScm() {
        return FileStorageTierMediaTypeScm;
    }
    private static final int FileStorageTierMediaTypeMax = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _FILE_STORAGE_TIER_MEDIA_TYPE.FileStorageTierMediaTypeMax = 5
     * }
     */
    public static int FileStorageTierMediaTypeMax() {
        return FileStorageTierMediaTypeMax;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _FILE_STORAGE_TIER_MEDIA_TYPE {
     *     FileStorageTierMediaTypeUnspecified = 0,
     *     FileStorageTierMediaTypeDisk = 1,
     *     FileStorageTierMediaTypeSsd = 2,
     *     FileStorageTierMediaTypeScm = 4,
     *     FileStorageTierMediaTypeMax
     * } *PFILE_STORAGE_TIER_MEDIA_TYPE
     * }
     */
    public static final AddressLayout PFILE_STORAGE_TIER_MEDIA_TYPE = wgl_h.C_POINTER;
    private static final int FileStorageTierClassUnspecified = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _FILE_STORAGE_TIER_CLASS.FileStorageTierClassUnspecified = 0
     * }
     */
    public static int FileStorageTierClassUnspecified() {
        return FileStorageTierClassUnspecified;
    }
    private static final int FileStorageTierClassCapacity = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _FILE_STORAGE_TIER_CLASS.FileStorageTierClassCapacity = 1
     * }
     */
    public static int FileStorageTierClassCapacity() {
        return FileStorageTierClassCapacity;
    }
    private static final int FileStorageTierClassPerformance = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _FILE_STORAGE_TIER_CLASS.FileStorageTierClassPerformance = 2
     * }
     */
    public static int FileStorageTierClassPerformance() {
        return FileStorageTierClassPerformance;
    }
    private static final int FileStorageTierClassMax = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _FILE_STORAGE_TIER_CLASS.FileStorageTierClassMax = 3
     * }
     */
    public static int FileStorageTierClassMax() {
        return FileStorageTierClassMax;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _FILE_STORAGE_TIER_CLASS {
     *     FileStorageTierClassUnspecified = 0,
     *     FileStorageTierClassCapacity,
     *     FileStorageTierClassPerformance,
     *     FileStorageTierClassMax
     * } *PFILE_STORAGE_TIER_CLASS
     * }
     */
    public static final AddressLayout PFILE_STORAGE_TIER_CLASS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_STORAGE_TIER {
     *     GUID Id;
     *     WCHAR Name[256];
     *     WCHAR Description[256];
     *     DWORDLONG Flags;
     *     DWORDLONG ProvisionedCapacity;
     *     FILE_STORAGE_TIER_MEDIA_TYPE MediaType;
     *     FILE_STORAGE_TIER_CLASS Class;
     * } *PFILE_STORAGE_TIER
     * }
     */
    public static final AddressLayout PFILE_STORAGE_TIER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD Flags;
     *     DWORD TotalNumberOfTiers;
     *     DWORD NumberOfTiersReturned;
     *     FILE_STORAGE_TIER Tiers[1];
     * } *PFSCTL_QUERY_STORAGE_CLASSES_OUTPUT
     * }
     */
    public static final AddressLayout PFSCTL_QUERY_STORAGE_CLASSES_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STREAM_INFORMATION_ENTRY {
     *     DWORD Version;
     *     DWORD Flags;
     *     union _StreamInformation {
     *         struct _DesiredStorageClass {
     *             FILE_STORAGE_TIER_CLASS Class;
     *             DWORD Flags;
     *         } DesiredStorageClass;
     *         struct _DataStream {
     *             WORD Length;
     *             WORD Flags;
     *             DWORD Reserved;
     *             DWORDLONG Vdl;
     *         } DataStream;
     *         struct _Reparse {
     *             WORD Length;
     *             WORD Flags;
     *             DWORD ReparseDataSize;
     *             DWORD ReparseDataOffset;
     *         } Reparse;
     *         struct _Ea {
     *             WORD Length;
     *             WORD Flags;
     *             DWORD EaSize;
     *             DWORD EaInformationOffset;
     *         } Ea;
     *     } StreamInformation;
     * } *PSTREAM_INFORMATION_ENTRY
     * }
     */
    public static final AddressLayout PSTREAM_INFORMATION_ENTRY = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FSCTL_QUERY_REGION_INFO_INPUT {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD Flags;
     *     DWORD NumberOfTierIds;
     *     GUID TierIds[1];
     * } *PFSCTL_QUERY_REGION_INFO_INPUT
     * }
     */
    public static final AddressLayout PFSCTL_QUERY_REGION_INFO_INPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_STORAGE_TIER_REGION {
     *     GUID TierId;
     *     DWORDLONG Offset;
     *     DWORDLONG Length;
     * } *PFILE_STORAGE_TIER_REGION
     * }
     */
    public static final AddressLayout PFILE_STORAGE_TIER_REGION = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FSCTL_QUERY_REGION_INFO_OUTPUT {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD Flags;
     *     DWORD Reserved;
     *     DWORDLONG Alignment;
     *     DWORD TotalNumberOfRegions;
     *     DWORD NumberOfRegionsReturned;
     *     FILE_STORAGE_TIER_REGION Regions[1];
     * } *PFSCTL_QUERY_REGION_INFO_OUTPUT
     * }
     */
    public static final AddressLayout PFSCTL_QUERY_REGION_INFO_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_DESIRED_STORAGE_CLASS_INFORMATION {
     *     FILE_STORAGE_TIER_CLASS Class;
     *     DWORD Flags;
     * } *PFILE_DESIRED_STORAGE_CLASS_INFORMATION
     * }
     */
    public static final AddressLayout PFILE_DESIRED_STORAGE_CLASS_INFORMATION = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DUPLICATE_EXTENTS_DATA {
     *     HANDLE FileHandle;
     *     LARGE_INTEGER SourceFileOffset;
     *     LARGE_INTEGER TargetFileOffset;
     *     LARGE_INTEGER ByteCount;
     * } *PDUPLICATE_EXTENTS_DATA
     * }
     */
    public static final AddressLayout PDUPLICATE_EXTENTS_DATA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DUPLICATE_EXTENTS_DATA32 {
     *     UINT32 FileHandle;
     *     LARGE_INTEGER SourceFileOffset;
     *     LARGE_INTEGER TargetFileOffset;
     *     LARGE_INTEGER ByteCount;
     * } *PDUPLICATE_EXTENTS_DATA32
     * }
     */
    public static final AddressLayout PDUPLICATE_EXTENTS_DATA32 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DUPLICATE_EXTENTS_DATA_EX {
     *     SIZE_T Size;
     *     HANDLE FileHandle;
     *     LARGE_INTEGER SourceFileOffset;
     *     LARGE_INTEGER TargetFileOffset;
     *     LARGE_INTEGER ByteCount;
     *     DWORD Flags;
     * } *PDUPLICATE_EXTENTS_DATA_EX
     * }
     */
    public static final AddressLayout PDUPLICATE_EXTENTS_DATA_EX = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DUPLICATE_EXTENTS_DATA_EX32 {
     *     DWORD32 Size;
     *     DWORD32 FileHandle;
     *     LARGE_INTEGER SourceFileOffset;
     *     LARGE_INTEGER TargetFileOffset;
     *     LARGE_INTEGER ByteCount;
     *     DWORD Flags;
     * } *PDUPLICATE_EXTENTS_DATA_EX32
     * }
     */
    public static final AddressLayout PDUPLICATE_EXTENTS_DATA_EX32 = wgl_h.C_POINTER;
    private static final int SmrGcStateInactive = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _REFS_SMR_VOLUME_GC_STATE.SmrGcStateInactive = 0
     * }
     */
    public static int SmrGcStateInactive() {
        return SmrGcStateInactive;
    }
    private static final int SmrGcStatePaused = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _REFS_SMR_VOLUME_GC_STATE.SmrGcStatePaused = 1
     * }
     */
    public static int SmrGcStatePaused() {
        return SmrGcStatePaused;
    }
    private static final int SmrGcStateActive = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _REFS_SMR_VOLUME_GC_STATE.SmrGcStateActive = 2
     * }
     */
    public static int SmrGcStateActive() {
        return SmrGcStateActive;
    }
    private static final int SmrGcStateActiveFullSpeed = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _REFS_SMR_VOLUME_GC_STATE.SmrGcStateActiveFullSpeed = 3
     * }
     */
    public static int SmrGcStateActiveFullSpeed() {
        return SmrGcStateActiveFullSpeed;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _REFS_SMR_VOLUME_GC_STATE {
     *     SmrGcStateInactive = 0,
     *     SmrGcStatePaused = 1,
     *     SmrGcStateActive = 2,
     *     SmrGcStateActiveFullSpeed = 3
     * } *PREFS_SMR_VOLUME_GC_STATE
     * }
     */
    public static final AddressLayout PREFS_SMR_VOLUME_GC_STATE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _REFS_SMR_VOLUME_INFO_OUTPUT {
     *     DWORD Version;
     *     DWORD Flags;
     *     LARGE_INTEGER SizeOfRandomlyWritableTier;
     *     LARGE_INTEGER FreeSpaceInRandomlyWritableTier;
     *     LARGE_INTEGER SizeofSMRTier;
     *     LARGE_INTEGER FreeSpaceInSMRTier;
     *     LARGE_INTEGER UsableFreeSpaceInSMRTier;
     *     REFS_SMR_VOLUME_GC_STATE VolumeGcState;
     *     DWORD VolumeGcLastStatus;
     *     DWORDLONG Unused[7];
     * } *PREFS_SMR_VOLUME_INFO_OUTPUT
     * }
     */
    public static final AddressLayout PREFS_SMR_VOLUME_INFO_OUTPUT = wgl_h.C_POINTER;
    private static final int SmrGcActionStart = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _REFS_SMR_VOLUME_GC_ACTION.SmrGcActionStart = 1
     * }
     */
    public static int SmrGcActionStart() {
        return SmrGcActionStart;
    }
    private static final int SmrGcActionStartFullSpeed = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _REFS_SMR_VOLUME_GC_ACTION.SmrGcActionStartFullSpeed = 2
     * }
     */
    public static int SmrGcActionStartFullSpeed() {
        return SmrGcActionStartFullSpeed;
    }
    private static final int SmrGcActionPause = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _REFS_SMR_VOLUME_GC_ACTION.SmrGcActionPause = 3
     * }
     */
    public static int SmrGcActionPause() {
        return SmrGcActionPause;
    }
    private static final int SmrGcActionStop = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _REFS_SMR_VOLUME_GC_ACTION.SmrGcActionStop = 4
     * }
     */
    public static int SmrGcActionStop() {
        return SmrGcActionStop;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _REFS_SMR_VOLUME_GC_ACTION {
     *     SmrGcActionStart = 1,
     *     SmrGcActionStartFullSpeed = 2,
     *     SmrGcActionPause = 3,
     *     SmrGcActionStop = 4
     * } *PREFS_SMR_VOLUME_GC_ACTION
     * }
     */
    public static final AddressLayout PREFS_SMR_VOLUME_GC_ACTION = wgl_h.C_POINTER;
    private static final int SmrGcMethodCompaction = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _REFS_SMR_VOLUME_GC_METHOD.SmrGcMethodCompaction = 1
     * }
     */
    public static int SmrGcMethodCompaction() {
        return SmrGcMethodCompaction;
    }
    private static final int SmrGcMethodCompression = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _REFS_SMR_VOLUME_GC_METHOD.SmrGcMethodCompression = 2
     * }
     */
    public static int SmrGcMethodCompression() {
        return SmrGcMethodCompression;
    }
    private static final int SmrGcMethodRotation = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _REFS_SMR_VOLUME_GC_METHOD.SmrGcMethodRotation = 3
     * }
     */
    public static int SmrGcMethodRotation() {
        return SmrGcMethodRotation;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _REFS_SMR_VOLUME_GC_METHOD {
     *     SmrGcMethodCompaction = 1,
     *     SmrGcMethodCompression = 2,
     *     SmrGcMethodRotation = 3
     * } *PREFS_SMR_VOLUME_GC_METHOD
     * }
     */
    public static final AddressLayout PREFS_SMR_VOLUME_GC_METHOD = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _REFS_SMR_VOLUME_GC_PARAMETERS {
     *     DWORD Version;
     *     DWORD Flags;
     *     REFS_SMR_VOLUME_GC_ACTION Action;
     *     REFS_SMR_VOLUME_GC_METHOD Method;
     *     DWORD IoGranularity;
     *     DWORD CompressionFormat;
     *     DWORDLONG Unused[8];
     * } *PREFS_SMR_VOLUME_GC_PARAMETERS
     * }
     */
    public static final AddressLayout PREFS_SMR_VOLUME_GC_PARAMETERS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER {
     *     DWORD OptimalWriteSize;
     *     DWORD StreamGranularitySize;
     *     DWORD StreamIdMin;
     *     DWORD StreamIdMax;
     * } *PSTREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER
     * }
     */
    public static final AddressLayout PSTREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STREAMS_ASSOCIATE_ID_INPUT_BUFFER {
     *     DWORD Flags;
     *     DWORD StreamId;
     * } *PSTREAMS_ASSOCIATE_ID_INPUT_BUFFER
     * }
     */
    public static final AddressLayout PSTREAMS_ASSOCIATE_ID_INPUT_BUFFER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STREAMS_QUERY_ID_OUTPUT_BUFFER {
     *     DWORD StreamId;
     * } *PSTREAMS_QUERY_ID_OUTPUT_BUFFER
     * }
     */
    public static final AddressLayout PSTREAMS_QUERY_ID_OUTPUT_BUFFER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _QUERY_BAD_RANGES_INPUT_RANGE {
     *     DWORDLONG StartOffset;
     *     DWORDLONG LengthInBytes;
     * } *PQUERY_BAD_RANGES_INPUT_RANGE
     * }
     */
    public static final AddressLayout PQUERY_BAD_RANGES_INPUT_RANGE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _QUERY_BAD_RANGES_INPUT {
     *     DWORD Flags;
     *     DWORD NumRanges;
     *     QUERY_BAD_RANGES_INPUT_RANGE Ranges[1];
     * } *PQUERY_BAD_RANGES_INPUT
     * }
     */
    public static final AddressLayout PQUERY_BAD_RANGES_INPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _QUERY_BAD_RANGES_OUTPUT_RANGE {
     *     DWORD Flags;
     *     DWORD Reserved;
     *     DWORDLONG StartOffset;
     *     DWORDLONG LengthInBytes;
     * } *PQUERY_BAD_RANGES_OUTPUT_RANGE
     * }
     */
    public static final AddressLayout PQUERY_BAD_RANGES_OUTPUT_RANGE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _QUERY_BAD_RANGES_OUTPUT {
     *     DWORD Flags;
     *     DWORD NumBadRanges;
     *     DWORDLONG NextOffsetToLookUp;
     *     QUERY_BAD_RANGES_OUTPUT_RANGE BadRanges[1];
     * } *PQUERY_BAD_RANGES_OUTPUT
     * }
     */
    public static final AddressLayout PQUERY_BAD_RANGES_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT {
     *     DWORD Flags;
     *     DWORD AlignmentShift;
     *     DWORDLONG FileOffsetToAlign;
     *     DWORD FallbackAlignmentShift;
     * } *PSET_DAX_ALLOC_ALIGNMENT_HINT_INPUT
     * }
     */
    public static final AddressLayout PSET_DAX_ALLOC_ALIGNMENT_HINT_INPUT = wgl_h.C_POINTER;
    private static final int VirtualStorageBehaviorUndefined = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _VIRTUAL_STORAGE_BEHAVIOR_CODE.VirtualStorageBehaviorUndefined = 0
     * }
     */
    public static int VirtualStorageBehaviorUndefined() {
        return VirtualStorageBehaviorUndefined;
    }
    private static final int VirtualStorageBehaviorCacheWriteThrough = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _VIRTUAL_STORAGE_BEHAVIOR_CODE.VirtualStorageBehaviorCacheWriteThrough = 1
     * }
     */
    public static int VirtualStorageBehaviorCacheWriteThrough() {
        return VirtualStorageBehaviorCacheWriteThrough;
    }
    private static final int VirtualStorageBehaviorCacheWriteBack = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _VIRTUAL_STORAGE_BEHAVIOR_CODE.VirtualStorageBehaviorCacheWriteBack = 2
     * }
     */
    public static int VirtualStorageBehaviorCacheWriteBack() {
        return VirtualStorageBehaviorCacheWriteBack;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _VIRTUAL_STORAGE_BEHAVIOR_CODE {
     *     VirtualStorageBehaviorUndefined = 0,
     *     VirtualStorageBehaviorCacheWriteThrough = 1,
     *     VirtualStorageBehaviorCacheWriteBack = 2
     * } *PVIRTUAL_STORAGE_BEHAVIOR_CODE
     * }
     */
    public static final AddressLayout PVIRTUAL_STORAGE_BEHAVIOR_CODE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT {
     *     DWORD Size;
     *     VIRTUAL_STORAGE_BEHAVIOR_CODE BehaviorCode;
     * } *PVIRTUAL_STORAGE_SET_BEHAVIOR_INPUT
     * }
     */
    public static final AddressLayout PVIRTUAL_STORAGE_SET_BEHAVIOR_INPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ENCRYPTION_KEY_CTRL_INPUT {
     *     DWORD HeaderSize;
     *     DWORD StructureSize;
     *     WORD KeyOffset;
     *     WORD KeySize;
     *     DWORD DplLock;
     *     DWORDLONG DplUserId;
     *     DWORDLONG DplCredentialId;
     * } *PENCRYPTION_KEY_CTRL_INPUT
     * }
     */
    public static final AddressLayout PENCRYPTION_KEY_CTRL_INPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _WOF_EXTERNAL_INFO {
     *     DWORD Version;
     *     DWORD Provider;
     * } *PWOF_EXTERNAL_INFO
     * }
     */
    public static final AddressLayout PWOF_EXTERNAL_INFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _WOF_EXTERNAL_FILE_ID {
     *     FILE_ID_128 FileId;
     * } *PWOF_EXTERNAL_FILE_ID
     * }
     */
    public static final AddressLayout PWOF_EXTERNAL_FILE_ID = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _WOF_VERSION_INFO {
     *     DWORD WofVersion;
     * } *PWOF_VERSION_INFO
     * }
     */
    public static final AddressLayout PWOF_VERSION_INFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _WIM_PROVIDER_EXTERNAL_INFO {
     *     DWORD Version;
     *     DWORD Flags;
     *     LARGE_INTEGER DataSourceId;
     *     BYTE ResourceHash[20];
     * } *PWIM_PROVIDER_EXTERNAL_INFO
     * }
     */
    public static final AddressLayout PWIM_PROVIDER_EXTERNAL_INFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _WIM_PROVIDER_ADD_OVERLAY_INPUT {
     *     DWORD WimType;
     *     DWORD WimIndex;
     *     DWORD WimFileNameOffset;
     *     DWORD WimFileNameLength;
     * } *PWIM_PROVIDER_ADD_OVERLAY_INPUT
     * }
     */
    public static final AddressLayout PWIM_PROVIDER_ADD_OVERLAY_INPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _WIM_PROVIDER_UPDATE_OVERLAY_INPUT {
     *     LARGE_INTEGER DataSourceId;
     *     DWORD WimFileNameOffset;
     *     DWORD WimFileNameLength;
     * } *PWIM_PROVIDER_UPDATE_OVERLAY_INPUT
     * }
     */
    public static final AddressLayout PWIM_PROVIDER_UPDATE_OVERLAY_INPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _WIM_PROVIDER_REMOVE_OVERLAY_INPUT {
     *     LARGE_INTEGER DataSourceId;
     * } *PWIM_PROVIDER_REMOVE_OVERLAY_INPUT
     * }
     */
    public static final AddressLayout PWIM_PROVIDER_REMOVE_OVERLAY_INPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _WIM_PROVIDER_SUSPEND_OVERLAY_INPUT {
     *     LARGE_INTEGER DataSourceId;
     * } *PWIM_PROVIDER_SUSPEND_OVERLAY_INPUT
     * }
     */
    public static final AddressLayout PWIM_PROVIDER_SUSPEND_OVERLAY_INPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _WIM_PROVIDER_OVERLAY_ENTRY {
     *     DWORD NextEntryOffset;
     *     LARGE_INTEGER DataSourceId;
     *     GUID WimGuid;
     *     DWORD WimFileNameOffset;
     *     DWORD WimType;
     *     DWORD WimIndex;
     *     DWORD Flags;
     * } *PWIM_PROVIDER_OVERLAY_ENTRY
     * }
     */
    public static final AddressLayout PWIM_PROVIDER_OVERLAY_ENTRY = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_PROVIDER_EXTERNAL_INFO_V0 {
     *     DWORD Version;
     *     DWORD Algorithm;
     * } *PFILE_PROVIDER_EXTERNAL_INFO_V0
     * }
     */
    public static final AddressLayout PFILE_PROVIDER_EXTERNAL_INFO_V0 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_PROVIDER_EXTERNAL_INFO_V1 {
     *     DWORD Version;
     *     DWORD Algorithm;
     *     DWORD Flags;
     * } *PFILE_PROVIDER_EXTERNAL_INFO_V1
     * }
     */
    public static final AddressLayout PFILE_PROVIDER_EXTERNAL_INFO_V1 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PFILE_PROVIDER_EXTERNAL_INFO_V1 PFILE_PROVIDER_EXTERNAL_INFO
     * }
     */
    public static final AddressLayout PFILE_PROVIDER_EXTERNAL_INFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CONTAINER_VOLUME_STATE {
     *     DWORD Flags;
     * } *PCONTAINER_VOLUME_STATE
     * }
     */
    public static final AddressLayout PCONTAINER_VOLUME_STATE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CONTAINER_ROOT_INFO_INPUT {
     *     DWORD Flags;
     * } *PCONTAINER_ROOT_INFO_INPUT
     * }
     */
    public static final AddressLayout PCONTAINER_ROOT_INFO_INPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CONTAINER_ROOT_INFO_OUTPUT {
     *     WORD ContainerRootIdLength;
     *     BYTE ContainerRootId[1];
     * } *PCONTAINER_ROOT_INFO_OUTPUT
     * }
     */
    public static final AddressLayout PCONTAINER_ROOT_INFO_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _VIRTUALIZATION_INSTANCE_INFO_INPUT {
     *     DWORD NumberOfWorkerThreads;
     *     DWORD Flags;
     * } *PVIRTUALIZATION_INSTANCE_INFO_INPUT
     * }
     */
    public static final AddressLayout PVIRTUALIZATION_INSTANCE_INFO_INPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _VIRTUALIZATION_INSTANCE_INFO_INPUT_EX {
     *     WORD HeaderSize;
     *     DWORD Flags;
     *     DWORD NotificationInfoSize;
     *     WORD NotificationInfoOffset;
     *     WORD ProviderMajorVersion;
     * } *PVIRTUALIZATION_INSTANCE_INFO_INPUT_EX
     * }
     */
    public static final AddressLayout PVIRTUALIZATION_INSTANCE_INFO_INPUT_EX = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _VIRTUALIZATION_INSTANCE_INFO_OUTPUT {
     *     GUID VirtualizationInstanceID;
     * } *PVIRTUALIZATION_INSTANCE_INFO_OUTPUT
     * }
     */
    public static final AddressLayout PVIRTUALIZATION_INSTANCE_INFO_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _GET_FILTER_FILE_IDENTIFIER_INPUT {
     *     WORD AltitudeLength;
     *     WCHAR Altitude[1];
     * } *PGET_FILTER_FILE_IDENTIFIER_INPUT
     * }
     */
    public static final AddressLayout PGET_FILTER_FILE_IDENTIFIER_INPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _GET_FILTER_FILE_IDENTIFIER_OUTPUT {
     *     WORD FilterFileIdentifierLength;
     *     BYTE FilterFileIdentifier[1];
     * } *PGET_FILTER_FILE_IDENTIFIER_OUTPUT
     * }
     */
    public static final AddressLayout PGET_FILTER_FILE_IDENTIFIER_OUTPUT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DISK_EXTENT {
     *     DWORD DiskNumber;
     *     LARGE_INTEGER StartingOffset;
     *     LARGE_INTEGER ExtentLength;
     * } *PDISK_EXTENT
     * }
     */
    public static final AddressLayout PDISK_EXTENT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _VOLUME_DISK_EXTENTS {
     *     DWORD NumberOfDiskExtents;
     *     DISK_EXTENT Extents[1];
     * } *PVOLUME_DISK_EXTENTS
     * }
     */
    public static final AddressLayout PVOLUME_DISK_EXTENTS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _VOLUME_GET_GPT_ATTRIBUTES_INFORMATION {
     *     DWORDLONG GptAttributes;
     * } *PVOLUME_GET_GPT_ATTRIBUTES_INFORMATION
     * }
     */
    public static final AddressLayout PVOLUME_GET_GPT_ATTRIBUTES_INFORMATION = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IO_IRP_EXT_TRACK_OFFSET_HEADER {
     *     WORD Validation;
     *     WORD Flags;
     *     PIO_IRP_EXT_PROCESS_TRACKED_OFFSET_CALLBACK TrackedOffsetCallback;
     * } *PIO_IRP_EXT_TRACK_OFFSET_HEADER
     * }
     */
    public static final AddressLayout PIO_IRP_EXT_TRACK_OFFSET_HEADER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef WORD UWORD
     * }
     */
    public static final OfShort UWORD = wgl_h.C_SHORT;

    private static class GUID_DEVINTERFACE_SMARTCARD_READER$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("GUID_DEVINTERFACE_SMARTCARD_READER").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_SMARTCARD_READER
     * }
     */
    public static GroupLayout GUID_DEVINTERFACE_SMARTCARD_READER$layout() {
        return GUID_DEVINTERFACE_SMARTCARD_READER$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_SMARTCARD_READER
     * }
     */
    public static MemorySegment GUID_DEVINTERFACE_SMARTCARD_READER() {
        return GUID_DEVINTERFACE_SMARTCARD_READER$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_SMARTCARD_READER
     * }
     */
    public static void GUID_DEVINTERFACE_SMARTCARD_READER(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_DEVINTERFACE_SMARTCARD_READER$constants.SEGMENT, 0L, GUID_DEVINTERFACE_SMARTCARD_READER$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef struct _SCARD_IO_REQUEST {
     *     DWORD dwProtocol;
     *     DWORD cbPciLength;
     * } *PSCARD_IO_REQUEST
     * }
     */
    public static final AddressLayout PSCARD_IO_REQUEST = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCARD_IO_REQUEST {
     *     DWORD dwProtocol;
     *     DWORD cbPciLength;
     * } *LPSCARD_IO_REQUEST
     * }
     */
    public static final AddressLayout LPSCARD_IO_REQUEST = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const SCARD_IO_REQUEST *LPCSCARD_IO_REQUEST
     * }
     */
    public static final AddressLayout LPCSCARD_IO_REQUEST = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCARD_T0_COMMAND {
     *     BYTE bCla;
     *     BYTE bIns;
     *     BYTE bP1;
     *     BYTE bP2;
     *     BYTE bP3;
     * } *LPSCARD_T0_COMMAND
     * }
     */
    public static final AddressLayout LPSCARD_T0_COMMAND = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef SCARD_T0_REQUEST *PSCARD_T0_REQUEST
     * }
     */
    public static final AddressLayout PSCARD_T0_REQUEST = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef SCARD_T0_REQUEST *LPSCARD_T0_REQUEST
     * }
     */
    public static final AddressLayout LPSCARD_T0_REQUEST = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef SCARD_T1_REQUEST *PSCARD_T1_REQUEST
     * }
     */
    public static final AddressLayout PSCARD_T1_REQUEST = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef SCARD_T1_REQUEST *LPSCARD_T1_REQUEST
     * }
     */
    public static final AddressLayout LPSCARD_T1_REQUEST = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const BYTE *LPCBYTE
     * }
     */
    public static final AddressLayout LPCBYTE = wgl_h.C_POINTER;

    private static class g_rgSCardT0Pci$constants {
        public static final GroupLayout LAYOUT = _SCARD_IO_REQUEST.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("g_rgSCardT0Pci").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const SCARD_IO_REQUEST g_rgSCardT0Pci
     * }
     */
    public static GroupLayout g_rgSCardT0Pci$layout() {
        return g_rgSCardT0Pci$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const SCARD_IO_REQUEST g_rgSCardT0Pci
     * }
     */
    public static MemorySegment g_rgSCardT0Pci() {
        return g_rgSCardT0Pci$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const SCARD_IO_REQUEST g_rgSCardT0Pci
     * }
     */
    public static void g_rgSCardT0Pci(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, g_rgSCardT0Pci$constants.SEGMENT, 0L, g_rgSCardT0Pci$constants.LAYOUT.byteSize());
    }

    private static class g_rgSCardT1Pci$constants {
        public static final GroupLayout LAYOUT = _SCARD_IO_REQUEST.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("g_rgSCardT1Pci").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const SCARD_IO_REQUEST g_rgSCardT1Pci
     * }
     */
    public static GroupLayout g_rgSCardT1Pci$layout() {
        return g_rgSCardT1Pci$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const SCARD_IO_REQUEST g_rgSCardT1Pci
     * }
     */
    public static MemorySegment g_rgSCardT1Pci() {
        return g_rgSCardT1Pci$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const SCARD_IO_REQUEST g_rgSCardT1Pci
     * }
     */
    public static void g_rgSCardT1Pci(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, g_rgSCardT1Pci$constants.SEGMENT, 0L, g_rgSCardT1Pci$constants.LAYOUT.byteSize());
    }

    private static class g_rgSCardRawPci$constants {
        public static final GroupLayout LAYOUT = _SCARD_IO_REQUEST.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("g_rgSCardRawPci").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const SCARD_IO_REQUEST g_rgSCardRawPci
     * }
     */
    public static GroupLayout g_rgSCardRawPci$layout() {
        return g_rgSCardRawPci$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const SCARD_IO_REQUEST g_rgSCardRawPci
     * }
     */
    public static MemorySegment g_rgSCardRawPci() {
        return g_rgSCardRawPci$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const SCARD_IO_REQUEST g_rgSCardRawPci
     * }
     */
    public static void g_rgSCardRawPci(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, g_rgSCardRawPci$constants.SEGMENT, 0L, g_rgSCardRawPci$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef ULONG_PTR SCARDCONTEXT
     * }
     */
    public static final OfLong SCARDCONTEXT = wgl_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef SCARDCONTEXT *PSCARDCONTEXT
     * }
     */
    public static final AddressLayout PSCARDCONTEXT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef SCARDCONTEXT *LPSCARDCONTEXT
     * }
     */
    public static final AddressLayout LPSCARDCONTEXT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef ULONG_PTR SCARDHANDLE
     * }
     */
    public static final OfLong SCARDHANDLE = wgl_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef SCARDHANDLE *PSCARDHANDLE
     * }
     */
    public static final AddressLayout PSCARDHANDLE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef SCARDHANDLE *LPSCARDHANDLE
     * }
     */
    public static final AddressLayout LPSCARDHANDLE = wgl_h.C_POINTER;

    private static class SCardEstablishContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardEstablishContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardEstablishContext(DWORD dwScope, LPCVOID pvReserved1, LPCVOID pvReserved2, LPSCARDCONTEXT phContext)
     * }
     */
    public static FunctionDescriptor SCardEstablishContext$descriptor() {
        return SCardEstablishContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardEstablishContext(DWORD dwScope, LPCVOID pvReserved1, LPCVOID pvReserved2, LPSCARDCONTEXT phContext)
     * }
     */
    public static MethodHandle SCardEstablishContext$handle() {
        return SCardEstablishContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardEstablishContext(DWORD dwScope, LPCVOID pvReserved1, LPCVOID pvReserved2, LPSCARDCONTEXT phContext)
     * }
     */
    public static MemorySegment SCardEstablishContext$address() {
        return SCardEstablishContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardEstablishContext(DWORD dwScope, LPCVOID pvReserved1, LPCVOID pvReserved2, LPSCARDCONTEXT phContext)
     * }
     */
    public static int SCardEstablishContext(int dwScope, MemorySegment pvReserved1, MemorySegment pvReserved2, MemorySegment phContext) {
        var mh$ = SCardEstablishContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardEstablishContext", dwScope, pvReserved1, pvReserved2, phContext);
            }
            return (int)mh$.invokeExact(dwScope, pvReserved1, pvReserved2, phContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardReleaseContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardReleaseContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardReleaseContext(SCARDCONTEXT hContext)
     * }
     */
    public static FunctionDescriptor SCardReleaseContext$descriptor() {
        return SCardReleaseContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardReleaseContext(SCARDCONTEXT hContext)
     * }
     */
    public static MethodHandle SCardReleaseContext$handle() {
        return SCardReleaseContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardReleaseContext(SCARDCONTEXT hContext)
     * }
     */
    public static MemorySegment SCardReleaseContext$address() {
        return SCardReleaseContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardReleaseContext(SCARDCONTEXT hContext)
     * }
     */
    public static int SCardReleaseContext(long hContext) {
        var mh$ = SCardReleaseContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardReleaseContext", hContext);
            }
            return (int)mh$.invokeExact(hContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardIsValidContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardIsValidContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardIsValidContext(SCARDCONTEXT hContext)
     * }
     */
    public static FunctionDescriptor SCardIsValidContext$descriptor() {
        return SCardIsValidContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardIsValidContext(SCARDCONTEXT hContext)
     * }
     */
    public static MethodHandle SCardIsValidContext$handle() {
        return SCardIsValidContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardIsValidContext(SCARDCONTEXT hContext)
     * }
     */
    public static MemorySegment SCardIsValidContext$address() {
        return SCardIsValidContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardIsValidContext(SCARDCONTEXT hContext)
     * }
     */
    public static int SCardIsValidContext(long hContext) {
        var mh$ = SCardIsValidContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardIsValidContext", hContext);
            }
            return (int)mh$.invokeExact(hContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardListReaderGroupsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardListReaderGroupsA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardListReaderGroupsA(SCARDCONTEXT hContext, LPSTR mszGroups, LPDWORD pcchGroups)
     * }
     */
    public static FunctionDescriptor SCardListReaderGroupsA$descriptor() {
        return SCardListReaderGroupsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardListReaderGroupsA(SCARDCONTEXT hContext, LPSTR mszGroups, LPDWORD pcchGroups)
     * }
     */
    public static MethodHandle SCardListReaderGroupsA$handle() {
        return SCardListReaderGroupsA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardListReaderGroupsA(SCARDCONTEXT hContext, LPSTR mszGroups, LPDWORD pcchGroups)
     * }
     */
    public static MemorySegment SCardListReaderGroupsA$address() {
        return SCardListReaderGroupsA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardListReaderGroupsA(SCARDCONTEXT hContext, LPSTR mszGroups, LPDWORD pcchGroups)
     * }
     */
    public static int SCardListReaderGroupsA(long hContext, MemorySegment mszGroups, MemorySegment pcchGroups) {
        var mh$ = SCardListReaderGroupsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardListReaderGroupsA", hContext, mszGroups, pcchGroups);
            }
            return (int)mh$.invokeExact(hContext, mszGroups, pcchGroups);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardListReaderGroupsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardListReaderGroupsW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardListReaderGroupsW(SCARDCONTEXT hContext, LPWSTR mszGroups, LPDWORD pcchGroups)
     * }
     */
    public static FunctionDescriptor SCardListReaderGroupsW$descriptor() {
        return SCardListReaderGroupsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardListReaderGroupsW(SCARDCONTEXT hContext, LPWSTR mszGroups, LPDWORD pcchGroups)
     * }
     */
    public static MethodHandle SCardListReaderGroupsW$handle() {
        return SCardListReaderGroupsW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardListReaderGroupsW(SCARDCONTEXT hContext, LPWSTR mszGroups, LPDWORD pcchGroups)
     * }
     */
    public static MemorySegment SCardListReaderGroupsW$address() {
        return SCardListReaderGroupsW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardListReaderGroupsW(SCARDCONTEXT hContext, LPWSTR mszGroups, LPDWORD pcchGroups)
     * }
     */
    public static int SCardListReaderGroupsW(long hContext, MemorySegment mszGroups, MemorySegment pcchGroups) {
        var mh$ = SCardListReaderGroupsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardListReaderGroupsW", hContext, mszGroups, pcchGroups);
            }
            return (int)mh$.invokeExact(hContext, mszGroups, pcchGroups);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardListReadersA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardListReadersA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardListReadersA(SCARDCONTEXT hContext, LPCSTR mszGroups, LPSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static FunctionDescriptor SCardListReadersA$descriptor() {
        return SCardListReadersA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardListReadersA(SCARDCONTEXT hContext, LPCSTR mszGroups, LPSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static MethodHandle SCardListReadersA$handle() {
        return SCardListReadersA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardListReadersA(SCARDCONTEXT hContext, LPCSTR mszGroups, LPSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static MemorySegment SCardListReadersA$address() {
        return SCardListReadersA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardListReadersA(SCARDCONTEXT hContext, LPCSTR mszGroups, LPSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static int SCardListReadersA(long hContext, MemorySegment mszGroups, MemorySegment mszReaders, MemorySegment pcchReaders) {
        var mh$ = SCardListReadersA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardListReadersA", hContext, mszGroups, mszReaders, pcchReaders);
            }
            return (int)mh$.invokeExact(hContext, mszGroups, mszReaders, pcchReaders);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardListReadersW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardListReadersW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardListReadersW(SCARDCONTEXT hContext, LPCWSTR mszGroups, LPWSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static FunctionDescriptor SCardListReadersW$descriptor() {
        return SCardListReadersW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardListReadersW(SCARDCONTEXT hContext, LPCWSTR mszGroups, LPWSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static MethodHandle SCardListReadersW$handle() {
        return SCardListReadersW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardListReadersW(SCARDCONTEXT hContext, LPCWSTR mszGroups, LPWSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static MemorySegment SCardListReadersW$address() {
        return SCardListReadersW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardListReadersW(SCARDCONTEXT hContext, LPCWSTR mszGroups, LPWSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static int SCardListReadersW(long hContext, MemorySegment mszGroups, MemorySegment mszReaders, MemorySegment pcchReaders) {
        var mh$ = SCardListReadersW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardListReadersW", hContext, mszGroups, mszReaders, pcchReaders);
            }
            return (int)mh$.invokeExact(hContext, mszGroups, mszReaders, pcchReaders);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardListCardsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardListCardsA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardListCardsA(SCARDCONTEXT hContext, LPCBYTE pbAtr, LPCGUID rgquidInterfaces, DWORD cguidInterfaceCount, CHAR *mszCards, LPDWORD pcchCards)
     * }
     */
    public static FunctionDescriptor SCardListCardsA$descriptor() {
        return SCardListCardsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardListCardsA(SCARDCONTEXT hContext, LPCBYTE pbAtr, LPCGUID rgquidInterfaces, DWORD cguidInterfaceCount, CHAR *mszCards, LPDWORD pcchCards)
     * }
     */
    public static MethodHandle SCardListCardsA$handle() {
        return SCardListCardsA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardListCardsA(SCARDCONTEXT hContext, LPCBYTE pbAtr, LPCGUID rgquidInterfaces, DWORD cguidInterfaceCount, CHAR *mszCards, LPDWORD pcchCards)
     * }
     */
    public static MemorySegment SCardListCardsA$address() {
        return SCardListCardsA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardListCardsA(SCARDCONTEXT hContext, LPCBYTE pbAtr, LPCGUID rgquidInterfaces, DWORD cguidInterfaceCount, CHAR *mszCards, LPDWORD pcchCards)
     * }
     */
    public static int SCardListCardsA(long hContext, MemorySegment pbAtr, MemorySegment rgquidInterfaces, int cguidInterfaceCount, MemorySegment mszCards, MemorySegment pcchCards) {
        var mh$ = SCardListCardsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardListCardsA", hContext, pbAtr, rgquidInterfaces, cguidInterfaceCount, mszCards, pcchCards);
            }
            return (int)mh$.invokeExact(hContext, pbAtr, rgquidInterfaces, cguidInterfaceCount, mszCards, pcchCards);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardListCardsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardListCardsW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardListCardsW(SCARDCONTEXT hContext, LPCBYTE pbAtr, LPCGUID rgquidInterfaces, DWORD cguidInterfaceCount, WCHAR *mszCards, LPDWORD pcchCards)
     * }
     */
    public static FunctionDescriptor SCardListCardsW$descriptor() {
        return SCardListCardsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardListCardsW(SCARDCONTEXT hContext, LPCBYTE pbAtr, LPCGUID rgquidInterfaces, DWORD cguidInterfaceCount, WCHAR *mszCards, LPDWORD pcchCards)
     * }
     */
    public static MethodHandle SCardListCardsW$handle() {
        return SCardListCardsW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardListCardsW(SCARDCONTEXT hContext, LPCBYTE pbAtr, LPCGUID rgquidInterfaces, DWORD cguidInterfaceCount, WCHAR *mszCards, LPDWORD pcchCards)
     * }
     */
    public static MemorySegment SCardListCardsW$address() {
        return SCardListCardsW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardListCardsW(SCARDCONTEXT hContext, LPCBYTE pbAtr, LPCGUID rgquidInterfaces, DWORD cguidInterfaceCount, WCHAR *mszCards, LPDWORD pcchCards)
     * }
     */
    public static int SCardListCardsW(long hContext, MemorySegment pbAtr, MemorySegment rgquidInterfaces, int cguidInterfaceCount, MemorySegment mszCards, MemorySegment pcchCards) {
        var mh$ = SCardListCardsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardListCardsW", hContext, pbAtr, rgquidInterfaces, cguidInterfaceCount, mszCards, pcchCards);
            }
            return (int)mh$.invokeExact(hContext, pbAtr, rgquidInterfaces, cguidInterfaceCount, mszCards, pcchCards);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardListInterfacesA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardListInterfacesA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardListInterfacesA(SCARDCONTEXT hContext, LPCSTR szCard, LPGUID pguidInterfaces, LPDWORD pcguidInterfaces)
     * }
     */
    public static FunctionDescriptor SCardListInterfacesA$descriptor() {
        return SCardListInterfacesA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardListInterfacesA(SCARDCONTEXT hContext, LPCSTR szCard, LPGUID pguidInterfaces, LPDWORD pcguidInterfaces)
     * }
     */
    public static MethodHandle SCardListInterfacesA$handle() {
        return SCardListInterfacesA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardListInterfacesA(SCARDCONTEXT hContext, LPCSTR szCard, LPGUID pguidInterfaces, LPDWORD pcguidInterfaces)
     * }
     */
    public static MemorySegment SCardListInterfacesA$address() {
        return SCardListInterfacesA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardListInterfacesA(SCARDCONTEXT hContext, LPCSTR szCard, LPGUID pguidInterfaces, LPDWORD pcguidInterfaces)
     * }
     */
    public static int SCardListInterfacesA(long hContext, MemorySegment szCard, MemorySegment pguidInterfaces, MemorySegment pcguidInterfaces) {
        var mh$ = SCardListInterfacesA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardListInterfacesA", hContext, szCard, pguidInterfaces, pcguidInterfaces);
            }
            return (int)mh$.invokeExact(hContext, szCard, pguidInterfaces, pcguidInterfaces);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardListInterfacesW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardListInterfacesW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardListInterfacesW(SCARDCONTEXT hContext, LPCWSTR szCard, LPGUID pguidInterfaces, LPDWORD pcguidInterfaces)
     * }
     */
    public static FunctionDescriptor SCardListInterfacesW$descriptor() {
        return SCardListInterfacesW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardListInterfacesW(SCARDCONTEXT hContext, LPCWSTR szCard, LPGUID pguidInterfaces, LPDWORD pcguidInterfaces)
     * }
     */
    public static MethodHandle SCardListInterfacesW$handle() {
        return SCardListInterfacesW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardListInterfacesW(SCARDCONTEXT hContext, LPCWSTR szCard, LPGUID pguidInterfaces, LPDWORD pcguidInterfaces)
     * }
     */
    public static MemorySegment SCardListInterfacesW$address() {
        return SCardListInterfacesW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardListInterfacesW(SCARDCONTEXT hContext, LPCWSTR szCard, LPGUID pguidInterfaces, LPDWORD pcguidInterfaces)
     * }
     */
    public static int SCardListInterfacesW(long hContext, MemorySegment szCard, MemorySegment pguidInterfaces, MemorySegment pcguidInterfaces) {
        var mh$ = SCardListInterfacesW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardListInterfacesW", hContext, szCard, pguidInterfaces, pcguidInterfaces);
            }
            return (int)mh$.invokeExact(hContext, szCard, pguidInterfaces, pcguidInterfaces);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetProviderIdA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardGetProviderIdA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetProviderIdA(SCARDCONTEXT hContext, LPCSTR szCard, LPGUID pguidProviderId)
     * }
     */
    public static FunctionDescriptor SCardGetProviderIdA$descriptor() {
        return SCardGetProviderIdA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetProviderIdA(SCARDCONTEXT hContext, LPCSTR szCard, LPGUID pguidProviderId)
     * }
     */
    public static MethodHandle SCardGetProviderIdA$handle() {
        return SCardGetProviderIdA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardGetProviderIdA(SCARDCONTEXT hContext, LPCSTR szCard, LPGUID pguidProviderId)
     * }
     */
    public static MemorySegment SCardGetProviderIdA$address() {
        return SCardGetProviderIdA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardGetProviderIdA(SCARDCONTEXT hContext, LPCSTR szCard, LPGUID pguidProviderId)
     * }
     */
    public static int SCardGetProviderIdA(long hContext, MemorySegment szCard, MemorySegment pguidProviderId) {
        var mh$ = SCardGetProviderIdA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetProviderIdA", hContext, szCard, pguidProviderId);
            }
            return (int)mh$.invokeExact(hContext, szCard, pguidProviderId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetProviderIdW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardGetProviderIdW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetProviderIdW(SCARDCONTEXT hContext, LPCWSTR szCard, LPGUID pguidProviderId)
     * }
     */
    public static FunctionDescriptor SCardGetProviderIdW$descriptor() {
        return SCardGetProviderIdW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetProviderIdW(SCARDCONTEXT hContext, LPCWSTR szCard, LPGUID pguidProviderId)
     * }
     */
    public static MethodHandle SCardGetProviderIdW$handle() {
        return SCardGetProviderIdW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardGetProviderIdW(SCARDCONTEXT hContext, LPCWSTR szCard, LPGUID pguidProviderId)
     * }
     */
    public static MemorySegment SCardGetProviderIdW$address() {
        return SCardGetProviderIdW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardGetProviderIdW(SCARDCONTEXT hContext, LPCWSTR szCard, LPGUID pguidProviderId)
     * }
     */
    public static int SCardGetProviderIdW(long hContext, MemorySegment szCard, MemorySegment pguidProviderId) {
        var mh$ = SCardGetProviderIdW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetProviderIdW", hContext, szCard, pguidProviderId);
            }
            return (int)mh$.invokeExact(hContext, szCard, pguidProviderId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetCardTypeProviderNameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardGetCardTypeProviderNameA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetCardTypeProviderNameA(SCARDCONTEXT hContext, LPCSTR szCardName, DWORD dwProviderId, CHAR *szProvider, LPDWORD pcchProvider)
     * }
     */
    public static FunctionDescriptor SCardGetCardTypeProviderNameA$descriptor() {
        return SCardGetCardTypeProviderNameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetCardTypeProviderNameA(SCARDCONTEXT hContext, LPCSTR szCardName, DWORD dwProviderId, CHAR *szProvider, LPDWORD pcchProvider)
     * }
     */
    public static MethodHandle SCardGetCardTypeProviderNameA$handle() {
        return SCardGetCardTypeProviderNameA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardGetCardTypeProviderNameA(SCARDCONTEXT hContext, LPCSTR szCardName, DWORD dwProviderId, CHAR *szProvider, LPDWORD pcchProvider)
     * }
     */
    public static MemorySegment SCardGetCardTypeProviderNameA$address() {
        return SCardGetCardTypeProviderNameA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardGetCardTypeProviderNameA(SCARDCONTEXT hContext, LPCSTR szCardName, DWORD dwProviderId, CHAR *szProvider, LPDWORD pcchProvider)
     * }
     */
    public static int SCardGetCardTypeProviderNameA(long hContext, MemorySegment szCardName, int dwProviderId, MemorySegment szProvider, MemorySegment pcchProvider) {
        var mh$ = SCardGetCardTypeProviderNameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetCardTypeProviderNameA", hContext, szCardName, dwProviderId, szProvider, pcchProvider);
            }
            return (int)mh$.invokeExact(hContext, szCardName, dwProviderId, szProvider, pcchProvider);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetCardTypeProviderNameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardGetCardTypeProviderNameW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetCardTypeProviderNameW(SCARDCONTEXT hContext, LPCWSTR szCardName, DWORD dwProviderId, WCHAR *szProvider, LPDWORD pcchProvider)
     * }
     */
    public static FunctionDescriptor SCardGetCardTypeProviderNameW$descriptor() {
        return SCardGetCardTypeProviderNameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetCardTypeProviderNameW(SCARDCONTEXT hContext, LPCWSTR szCardName, DWORD dwProviderId, WCHAR *szProvider, LPDWORD pcchProvider)
     * }
     */
    public static MethodHandle SCardGetCardTypeProviderNameW$handle() {
        return SCardGetCardTypeProviderNameW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardGetCardTypeProviderNameW(SCARDCONTEXT hContext, LPCWSTR szCardName, DWORD dwProviderId, WCHAR *szProvider, LPDWORD pcchProvider)
     * }
     */
    public static MemorySegment SCardGetCardTypeProviderNameW$address() {
        return SCardGetCardTypeProviderNameW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardGetCardTypeProviderNameW(SCARDCONTEXT hContext, LPCWSTR szCardName, DWORD dwProviderId, WCHAR *szProvider, LPDWORD pcchProvider)
     * }
     */
    public static int SCardGetCardTypeProviderNameW(long hContext, MemorySegment szCardName, int dwProviderId, MemorySegment szProvider, MemorySegment pcchProvider) {
        var mh$ = SCardGetCardTypeProviderNameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetCardTypeProviderNameW", hContext, szCardName, dwProviderId, szProvider, pcchProvider);
            }
            return (int)mh$.invokeExact(hContext, szCardName, dwProviderId, szProvider, pcchProvider);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardIntroduceReaderGroupA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardIntroduceReaderGroupA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderGroupA(SCARDCONTEXT hContext, LPCSTR szGroupName)
     * }
     */
    public static FunctionDescriptor SCardIntroduceReaderGroupA$descriptor() {
        return SCardIntroduceReaderGroupA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderGroupA(SCARDCONTEXT hContext, LPCSTR szGroupName)
     * }
     */
    public static MethodHandle SCardIntroduceReaderGroupA$handle() {
        return SCardIntroduceReaderGroupA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderGroupA(SCARDCONTEXT hContext, LPCSTR szGroupName)
     * }
     */
    public static MemorySegment SCardIntroduceReaderGroupA$address() {
        return SCardIntroduceReaderGroupA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderGroupA(SCARDCONTEXT hContext, LPCSTR szGroupName)
     * }
     */
    public static int SCardIntroduceReaderGroupA(long hContext, MemorySegment szGroupName) {
        var mh$ = SCardIntroduceReaderGroupA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardIntroduceReaderGroupA", hContext, szGroupName);
            }
            return (int)mh$.invokeExact(hContext, szGroupName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardIntroduceReaderGroupW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardIntroduceReaderGroupW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderGroupW(SCARDCONTEXT hContext, LPCWSTR szGroupName)
     * }
     */
    public static FunctionDescriptor SCardIntroduceReaderGroupW$descriptor() {
        return SCardIntroduceReaderGroupW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderGroupW(SCARDCONTEXT hContext, LPCWSTR szGroupName)
     * }
     */
    public static MethodHandle SCardIntroduceReaderGroupW$handle() {
        return SCardIntroduceReaderGroupW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderGroupW(SCARDCONTEXT hContext, LPCWSTR szGroupName)
     * }
     */
    public static MemorySegment SCardIntroduceReaderGroupW$address() {
        return SCardIntroduceReaderGroupW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderGroupW(SCARDCONTEXT hContext, LPCWSTR szGroupName)
     * }
     */
    public static int SCardIntroduceReaderGroupW(long hContext, MemorySegment szGroupName) {
        var mh$ = SCardIntroduceReaderGroupW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardIntroduceReaderGroupW", hContext, szGroupName);
            }
            return (int)mh$.invokeExact(hContext, szGroupName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardForgetReaderGroupA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardForgetReaderGroupA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderGroupA(SCARDCONTEXT hContext, LPCSTR szGroupName)
     * }
     */
    public static FunctionDescriptor SCardForgetReaderGroupA$descriptor() {
        return SCardForgetReaderGroupA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderGroupA(SCARDCONTEXT hContext, LPCSTR szGroupName)
     * }
     */
    public static MethodHandle SCardForgetReaderGroupA$handle() {
        return SCardForgetReaderGroupA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderGroupA(SCARDCONTEXT hContext, LPCSTR szGroupName)
     * }
     */
    public static MemorySegment SCardForgetReaderGroupA$address() {
        return SCardForgetReaderGroupA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderGroupA(SCARDCONTEXT hContext, LPCSTR szGroupName)
     * }
     */
    public static int SCardForgetReaderGroupA(long hContext, MemorySegment szGroupName) {
        var mh$ = SCardForgetReaderGroupA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardForgetReaderGroupA", hContext, szGroupName);
            }
            return (int)mh$.invokeExact(hContext, szGroupName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardForgetReaderGroupW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardForgetReaderGroupW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderGroupW(SCARDCONTEXT hContext, LPCWSTR szGroupName)
     * }
     */
    public static FunctionDescriptor SCardForgetReaderGroupW$descriptor() {
        return SCardForgetReaderGroupW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderGroupW(SCARDCONTEXT hContext, LPCWSTR szGroupName)
     * }
     */
    public static MethodHandle SCardForgetReaderGroupW$handle() {
        return SCardForgetReaderGroupW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderGroupW(SCARDCONTEXT hContext, LPCWSTR szGroupName)
     * }
     */
    public static MemorySegment SCardForgetReaderGroupW$address() {
        return SCardForgetReaderGroupW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderGroupW(SCARDCONTEXT hContext, LPCWSTR szGroupName)
     * }
     */
    public static int SCardForgetReaderGroupW(long hContext, MemorySegment szGroupName) {
        var mh$ = SCardForgetReaderGroupW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardForgetReaderGroupW", hContext, szGroupName);
            }
            return (int)mh$.invokeExact(hContext, szGroupName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardIntroduceReaderA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardIntroduceReaderA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szDeviceName)
     * }
     */
    public static FunctionDescriptor SCardIntroduceReaderA$descriptor() {
        return SCardIntroduceReaderA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szDeviceName)
     * }
     */
    public static MethodHandle SCardIntroduceReaderA$handle() {
        return SCardIntroduceReaderA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szDeviceName)
     * }
     */
    public static MemorySegment SCardIntroduceReaderA$address() {
        return SCardIntroduceReaderA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szDeviceName)
     * }
     */
    public static int SCardIntroduceReaderA(long hContext, MemorySegment szReaderName, MemorySegment szDeviceName) {
        var mh$ = SCardIntroduceReaderA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardIntroduceReaderA", hContext, szReaderName, szDeviceName);
            }
            return (int)mh$.invokeExact(hContext, szReaderName, szDeviceName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardIntroduceReaderW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardIntroduceReaderW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szDeviceName)
     * }
     */
    public static FunctionDescriptor SCardIntroduceReaderW$descriptor() {
        return SCardIntroduceReaderW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szDeviceName)
     * }
     */
    public static MethodHandle SCardIntroduceReaderW$handle() {
        return SCardIntroduceReaderW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szDeviceName)
     * }
     */
    public static MemorySegment SCardIntroduceReaderW$address() {
        return SCardIntroduceReaderW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szDeviceName)
     * }
     */
    public static int SCardIntroduceReaderW(long hContext, MemorySegment szReaderName, MemorySegment szDeviceName) {
        var mh$ = SCardIntroduceReaderW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardIntroduceReaderW", hContext, szReaderName, szDeviceName);
            }
            return (int)mh$.invokeExact(hContext, szReaderName, szDeviceName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardForgetReaderA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardForgetReaderA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderA(SCARDCONTEXT hContext, LPCSTR szReaderName)
     * }
     */
    public static FunctionDescriptor SCardForgetReaderA$descriptor() {
        return SCardForgetReaderA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderA(SCARDCONTEXT hContext, LPCSTR szReaderName)
     * }
     */
    public static MethodHandle SCardForgetReaderA$handle() {
        return SCardForgetReaderA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderA(SCARDCONTEXT hContext, LPCSTR szReaderName)
     * }
     */
    public static MemorySegment SCardForgetReaderA$address() {
        return SCardForgetReaderA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderA(SCARDCONTEXT hContext, LPCSTR szReaderName)
     * }
     */
    public static int SCardForgetReaderA(long hContext, MemorySegment szReaderName) {
        var mh$ = SCardForgetReaderA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardForgetReaderA", hContext, szReaderName);
            }
            return (int)mh$.invokeExact(hContext, szReaderName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardForgetReaderW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardForgetReaderW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderW(SCARDCONTEXT hContext, LPCWSTR szReaderName)
     * }
     */
    public static FunctionDescriptor SCardForgetReaderW$descriptor() {
        return SCardForgetReaderW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderW(SCARDCONTEXT hContext, LPCWSTR szReaderName)
     * }
     */
    public static MethodHandle SCardForgetReaderW$handle() {
        return SCardForgetReaderW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderW(SCARDCONTEXT hContext, LPCWSTR szReaderName)
     * }
     */
    public static MemorySegment SCardForgetReaderW$address() {
        return SCardForgetReaderW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderW(SCARDCONTEXT hContext, LPCWSTR szReaderName)
     * }
     */
    public static int SCardForgetReaderW(long hContext, MemorySegment szReaderName) {
        var mh$ = SCardForgetReaderW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardForgetReaderW", hContext, szReaderName);
            }
            return (int)mh$.invokeExact(hContext, szReaderName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardAddReaderToGroupA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardAddReaderToGroupA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardAddReaderToGroupA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szGroupName)
     * }
     */
    public static FunctionDescriptor SCardAddReaderToGroupA$descriptor() {
        return SCardAddReaderToGroupA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardAddReaderToGroupA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szGroupName)
     * }
     */
    public static MethodHandle SCardAddReaderToGroupA$handle() {
        return SCardAddReaderToGroupA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardAddReaderToGroupA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szGroupName)
     * }
     */
    public static MemorySegment SCardAddReaderToGroupA$address() {
        return SCardAddReaderToGroupA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardAddReaderToGroupA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szGroupName)
     * }
     */
    public static int SCardAddReaderToGroupA(long hContext, MemorySegment szReaderName, MemorySegment szGroupName) {
        var mh$ = SCardAddReaderToGroupA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardAddReaderToGroupA", hContext, szReaderName, szGroupName);
            }
            return (int)mh$.invokeExact(hContext, szReaderName, szGroupName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardAddReaderToGroupW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardAddReaderToGroupW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardAddReaderToGroupW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szGroupName)
     * }
     */
    public static FunctionDescriptor SCardAddReaderToGroupW$descriptor() {
        return SCardAddReaderToGroupW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardAddReaderToGroupW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szGroupName)
     * }
     */
    public static MethodHandle SCardAddReaderToGroupW$handle() {
        return SCardAddReaderToGroupW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardAddReaderToGroupW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szGroupName)
     * }
     */
    public static MemorySegment SCardAddReaderToGroupW$address() {
        return SCardAddReaderToGroupW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardAddReaderToGroupW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szGroupName)
     * }
     */
    public static int SCardAddReaderToGroupW(long hContext, MemorySegment szReaderName, MemorySegment szGroupName) {
        var mh$ = SCardAddReaderToGroupW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardAddReaderToGroupW", hContext, szReaderName, szGroupName);
            }
            return (int)mh$.invokeExact(hContext, szReaderName, szGroupName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardRemoveReaderFromGroupA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardRemoveReaderFromGroupA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardRemoveReaderFromGroupA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szGroupName)
     * }
     */
    public static FunctionDescriptor SCardRemoveReaderFromGroupA$descriptor() {
        return SCardRemoveReaderFromGroupA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardRemoveReaderFromGroupA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szGroupName)
     * }
     */
    public static MethodHandle SCardRemoveReaderFromGroupA$handle() {
        return SCardRemoveReaderFromGroupA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardRemoveReaderFromGroupA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szGroupName)
     * }
     */
    public static MemorySegment SCardRemoveReaderFromGroupA$address() {
        return SCardRemoveReaderFromGroupA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardRemoveReaderFromGroupA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szGroupName)
     * }
     */
    public static int SCardRemoveReaderFromGroupA(long hContext, MemorySegment szReaderName, MemorySegment szGroupName) {
        var mh$ = SCardRemoveReaderFromGroupA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardRemoveReaderFromGroupA", hContext, szReaderName, szGroupName);
            }
            return (int)mh$.invokeExact(hContext, szReaderName, szGroupName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardRemoveReaderFromGroupW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardRemoveReaderFromGroupW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardRemoveReaderFromGroupW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szGroupName)
     * }
     */
    public static FunctionDescriptor SCardRemoveReaderFromGroupW$descriptor() {
        return SCardRemoveReaderFromGroupW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardRemoveReaderFromGroupW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szGroupName)
     * }
     */
    public static MethodHandle SCardRemoveReaderFromGroupW$handle() {
        return SCardRemoveReaderFromGroupW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardRemoveReaderFromGroupW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szGroupName)
     * }
     */
    public static MemorySegment SCardRemoveReaderFromGroupW$address() {
        return SCardRemoveReaderFromGroupW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardRemoveReaderFromGroupW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szGroupName)
     * }
     */
    public static int SCardRemoveReaderFromGroupW(long hContext, MemorySegment szReaderName, MemorySegment szGroupName) {
        var mh$ = SCardRemoveReaderFromGroupW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardRemoveReaderFromGroupW", hContext, szReaderName, szGroupName);
            }
            return (int)mh$.invokeExact(hContext, szReaderName, szGroupName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardIntroduceCardTypeA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardIntroduceCardTypeA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceCardTypeA(SCARDCONTEXT hContext, LPCSTR szCardName, LPCGUID pguidPrimaryProvider, LPCGUID rgguidInterfaces, DWORD dwInterfaceCount, LPCBYTE pbAtr, LPCBYTE pbAtrMask, DWORD cbAtrLen)
     * }
     */
    public static FunctionDescriptor SCardIntroduceCardTypeA$descriptor() {
        return SCardIntroduceCardTypeA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceCardTypeA(SCARDCONTEXT hContext, LPCSTR szCardName, LPCGUID pguidPrimaryProvider, LPCGUID rgguidInterfaces, DWORD dwInterfaceCount, LPCBYTE pbAtr, LPCBYTE pbAtrMask, DWORD cbAtrLen)
     * }
     */
    public static MethodHandle SCardIntroduceCardTypeA$handle() {
        return SCardIntroduceCardTypeA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceCardTypeA(SCARDCONTEXT hContext, LPCSTR szCardName, LPCGUID pguidPrimaryProvider, LPCGUID rgguidInterfaces, DWORD dwInterfaceCount, LPCBYTE pbAtr, LPCBYTE pbAtrMask, DWORD cbAtrLen)
     * }
     */
    public static MemorySegment SCardIntroduceCardTypeA$address() {
        return SCardIntroduceCardTypeA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardIntroduceCardTypeA(SCARDCONTEXT hContext, LPCSTR szCardName, LPCGUID pguidPrimaryProvider, LPCGUID rgguidInterfaces, DWORD dwInterfaceCount, LPCBYTE pbAtr, LPCBYTE pbAtrMask, DWORD cbAtrLen)
     * }
     */
    public static int SCardIntroduceCardTypeA(long hContext, MemorySegment szCardName, MemorySegment pguidPrimaryProvider, MemorySegment rgguidInterfaces, int dwInterfaceCount, MemorySegment pbAtr, MemorySegment pbAtrMask, int cbAtrLen) {
        var mh$ = SCardIntroduceCardTypeA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardIntroduceCardTypeA", hContext, szCardName, pguidPrimaryProvider, rgguidInterfaces, dwInterfaceCount, pbAtr, pbAtrMask, cbAtrLen);
            }
            return (int)mh$.invokeExact(hContext, szCardName, pguidPrimaryProvider, rgguidInterfaces, dwInterfaceCount, pbAtr, pbAtrMask, cbAtrLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardIntroduceCardTypeW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardIntroduceCardTypeW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceCardTypeW(SCARDCONTEXT hContext, LPCWSTR szCardName, LPCGUID pguidPrimaryProvider, LPCGUID rgguidInterfaces, DWORD dwInterfaceCount, LPCBYTE pbAtr, LPCBYTE pbAtrMask, DWORD cbAtrLen)
     * }
     */
    public static FunctionDescriptor SCardIntroduceCardTypeW$descriptor() {
        return SCardIntroduceCardTypeW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceCardTypeW(SCARDCONTEXT hContext, LPCWSTR szCardName, LPCGUID pguidPrimaryProvider, LPCGUID rgguidInterfaces, DWORD dwInterfaceCount, LPCBYTE pbAtr, LPCBYTE pbAtrMask, DWORD cbAtrLen)
     * }
     */
    public static MethodHandle SCardIntroduceCardTypeW$handle() {
        return SCardIntroduceCardTypeW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceCardTypeW(SCARDCONTEXT hContext, LPCWSTR szCardName, LPCGUID pguidPrimaryProvider, LPCGUID rgguidInterfaces, DWORD dwInterfaceCount, LPCBYTE pbAtr, LPCBYTE pbAtrMask, DWORD cbAtrLen)
     * }
     */
    public static MemorySegment SCardIntroduceCardTypeW$address() {
        return SCardIntroduceCardTypeW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardIntroduceCardTypeW(SCARDCONTEXT hContext, LPCWSTR szCardName, LPCGUID pguidPrimaryProvider, LPCGUID rgguidInterfaces, DWORD dwInterfaceCount, LPCBYTE pbAtr, LPCBYTE pbAtrMask, DWORD cbAtrLen)
     * }
     */
    public static int SCardIntroduceCardTypeW(long hContext, MemorySegment szCardName, MemorySegment pguidPrimaryProvider, MemorySegment rgguidInterfaces, int dwInterfaceCount, MemorySegment pbAtr, MemorySegment pbAtrMask, int cbAtrLen) {
        var mh$ = SCardIntroduceCardTypeW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardIntroduceCardTypeW", hContext, szCardName, pguidPrimaryProvider, rgguidInterfaces, dwInterfaceCount, pbAtr, pbAtrMask, cbAtrLen);
            }
            return (int)mh$.invokeExact(hContext, szCardName, pguidPrimaryProvider, rgguidInterfaces, dwInterfaceCount, pbAtr, pbAtrMask, cbAtrLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardSetCardTypeProviderNameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardSetCardTypeProviderNameA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardSetCardTypeProviderNameA(SCARDCONTEXT hContext, LPCSTR szCardName, DWORD dwProviderId, LPCSTR szProvider)
     * }
     */
    public static FunctionDescriptor SCardSetCardTypeProviderNameA$descriptor() {
        return SCardSetCardTypeProviderNameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardSetCardTypeProviderNameA(SCARDCONTEXT hContext, LPCSTR szCardName, DWORD dwProviderId, LPCSTR szProvider)
     * }
     */
    public static MethodHandle SCardSetCardTypeProviderNameA$handle() {
        return SCardSetCardTypeProviderNameA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardSetCardTypeProviderNameA(SCARDCONTEXT hContext, LPCSTR szCardName, DWORD dwProviderId, LPCSTR szProvider)
     * }
     */
    public static MemorySegment SCardSetCardTypeProviderNameA$address() {
        return SCardSetCardTypeProviderNameA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardSetCardTypeProviderNameA(SCARDCONTEXT hContext, LPCSTR szCardName, DWORD dwProviderId, LPCSTR szProvider)
     * }
     */
    public static int SCardSetCardTypeProviderNameA(long hContext, MemorySegment szCardName, int dwProviderId, MemorySegment szProvider) {
        var mh$ = SCardSetCardTypeProviderNameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardSetCardTypeProviderNameA", hContext, szCardName, dwProviderId, szProvider);
            }
            return (int)mh$.invokeExact(hContext, szCardName, dwProviderId, szProvider);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardSetCardTypeProviderNameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardSetCardTypeProviderNameW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardSetCardTypeProviderNameW(SCARDCONTEXT hContext, LPCWSTR szCardName, DWORD dwProviderId, LPCWSTR szProvider)
     * }
     */
    public static FunctionDescriptor SCardSetCardTypeProviderNameW$descriptor() {
        return SCardSetCardTypeProviderNameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardSetCardTypeProviderNameW(SCARDCONTEXT hContext, LPCWSTR szCardName, DWORD dwProviderId, LPCWSTR szProvider)
     * }
     */
    public static MethodHandle SCardSetCardTypeProviderNameW$handle() {
        return SCardSetCardTypeProviderNameW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardSetCardTypeProviderNameW(SCARDCONTEXT hContext, LPCWSTR szCardName, DWORD dwProviderId, LPCWSTR szProvider)
     * }
     */
    public static MemorySegment SCardSetCardTypeProviderNameW$address() {
        return SCardSetCardTypeProviderNameW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardSetCardTypeProviderNameW(SCARDCONTEXT hContext, LPCWSTR szCardName, DWORD dwProviderId, LPCWSTR szProvider)
     * }
     */
    public static int SCardSetCardTypeProviderNameW(long hContext, MemorySegment szCardName, int dwProviderId, MemorySegment szProvider) {
        var mh$ = SCardSetCardTypeProviderNameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardSetCardTypeProviderNameW", hContext, szCardName, dwProviderId, szProvider);
            }
            return (int)mh$.invokeExact(hContext, szCardName, dwProviderId, szProvider);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardForgetCardTypeA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardForgetCardTypeA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardForgetCardTypeA(SCARDCONTEXT hContext, LPCSTR szCardName)
     * }
     */
    public static FunctionDescriptor SCardForgetCardTypeA$descriptor() {
        return SCardForgetCardTypeA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardForgetCardTypeA(SCARDCONTEXT hContext, LPCSTR szCardName)
     * }
     */
    public static MethodHandle SCardForgetCardTypeA$handle() {
        return SCardForgetCardTypeA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardForgetCardTypeA(SCARDCONTEXT hContext, LPCSTR szCardName)
     * }
     */
    public static MemorySegment SCardForgetCardTypeA$address() {
        return SCardForgetCardTypeA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardForgetCardTypeA(SCARDCONTEXT hContext, LPCSTR szCardName)
     * }
     */
    public static int SCardForgetCardTypeA(long hContext, MemorySegment szCardName) {
        var mh$ = SCardForgetCardTypeA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardForgetCardTypeA", hContext, szCardName);
            }
            return (int)mh$.invokeExact(hContext, szCardName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardForgetCardTypeW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardForgetCardTypeW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardForgetCardTypeW(SCARDCONTEXT hContext, LPCWSTR szCardName)
     * }
     */
    public static FunctionDescriptor SCardForgetCardTypeW$descriptor() {
        return SCardForgetCardTypeW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardForgetCardTypeW(SCARDCONTEXT hContext, LPCWSTR szCardName)
     * }
     */
    public static MethodHandle SCardForgetCardTypeW$handle() {
        return SCardForgetCardTypeW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardForgetCardTypeW(SCARDCONTEXT hContext, LPCWSTR szCardName)
     * }
     */
    public static MemorySegment SCardForgetCardTypeW$address() {
        return SCardForgetCardTypeW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardForgetCardTypeW(SCARDCONTEXT hContext, LPCWSTR szCardName)
     * }
     */
    public static int SCardForgetCardTypeW(long hContext, MemorySegment szCardName) {
        var mh$ = SCardForgetCardTypeW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardForgetCardTypeW", hContext, szCardName);
            }
            return (int)mh$.invokeExact(hContext, szCardName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardFreeMemory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardFreeMemory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardFreeMemory(SCARDCONTEXT hContext, LPCVOID pvMem)
     * }
     */
    public static FunctionDescriptor SCardFreeMemory$descriptor() {
        return SCardFreeMemory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardFreeMemory(SCARDCONTEXT hContext, LPCVOID pvMem)
     * }
     */
    public static MethodHandle SCardFreeMemory$handle() {
        return SCardFreeMemory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardFreeMemory(SCARDCONTEXT hContext, LPCVOID pvMem)
     * }
     */
    public static MemorySegment SCardFreeMemory$address() {
        return SCardFreeMemory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardFreeMemory(SCARDCONTEXT hContext, LPCVOID pvMem)
     * }
     */
    public static int SCardFreeMemory(long hContext, MemorySegment pvMem) {
        var mh$ = SCardFreeMemory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardFreeMemory", hContext, pvMem);
            }
            return (int)mh$.invokeExact(hContext, pvMem);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardAccessStartedEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardAccessStartedEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HANDLE SCardAccessStartedEvent()
     * }
     */
    public static FunctionDescriptor SCardAccessStartedEvent$descriptor() {
        return SCardAccessStartedEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HANDLE SCardAccessStartedEvent()
     * }
     */
    public static MethodHandle SCardAccessStartedEvent$handle() {
        return SCardAccessStartedEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HANDLE SCardAccessStartedEvent()
     * }
     */
    public static MemorySegment SCardAccessStartedEvent$address() {
        return SCardAccessStartedEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HANDLE SCardAccessStartedEvent()
     * }
     */
    public static MemorySegment SCardAccessStartedEvent() {
        var mh$ = SCardAccessStartedEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardAccessStartedEvent");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardReleaseStartedEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardReleaseStartedEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void SCardReleaseStartedEvent()
     * }
     */
    public static FunctionDescriptor SCardReleaseStartedEvent$descriptor() {
        return SCardReleaseStartedEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void SCardReleaseStartedEvent()
     * }
     */
    public static MethodHandle SCardReleaseStartedEvent$handle() {
        return SCardReleaseStartedEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void SCardReleaseStartedEvent()
     * }
     */
    public static MemorySegment SCardReleaseStartedEvent$address() {
        return SCardReleaseStartedEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void SCardReleaseStartedEvent()
     * }
     */
    public static void SCardReleaseStartedEvent() {
        var mh$ = SCardReleaseStartedEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardReleaseStartedEvent");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     LPCSTR szReader;
     *     LPVOID pvUserData;
     *     DWORD dwCurrentState;
     *     DWORD dwEventState;
     *     DWORD cbAtr;
     *     BYTE rgbAtr[36];
     * } *PSCARD_READERSTATEA
     * }
     */
    public static final AddressLayout PSCARD_READERSTATEA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     LPCSTR szReader;
     *     LPVOID pvUserData;
     *     DWORD dwCurrentState;
     *     DWORD dwEventState;
     *     DWORD cbAtr;
     *     BYTE rgbAtr[36];
     * } *LPSCARD_READERSTATEA
     * }
     */
    public static final AddressLayout LPSCARD_READERSTATEA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     LPCWSTR szReader;
     *     LPVOID pvUserData;
     *     DWORD dwCurrentState;
     *     DWORD dwEventState;
     *     DWORD cbAtr;
     *     BYTE rgbAtr[36];
     * } *PSCARD_READERSTATEW
     * }
     */
    public static final AddressLayout PSCARD_READERSTATEW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     LPCWSTR szReader;
     *     LPVOID pvUserData;
     *     DWORD dwCurrentState;
     *     DWORD dwEventState;
     *     DWORD cbAtr;
     *     BYTE rgbAtr[36];
     * } *LPSCARD_READERSTATEW
     * }
     */
    public static final AddressLayout LPSCARD_READERSTATEW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PSCARD_READERSTATEA PSCARD_READERSTATE
     * }
     */
    public static final AddressLayout PSCARD_READERSTATE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPSCARD_READERSTATEA LPSCARD_READERSTATE
     * }
     */
    public static final AddressLayout LPSCARD_READERSTATE = wgl_h.C_POINTER;

    private static class SCardLocateCardsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardLocateCardsA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsA(SCARDCONTEXT hContext, LPCSTR mszCards, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders)
     * }
     */
    public static FunctionDescriptor SCardLocateCardsA$descriptor() {
        return SCardLocateCardsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsA(SCARDCONTEXT hContext, LPCSTR mszCards, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders)
     * }
     */
    public static MethodHandle SCardLocateCardsA$handle() {
        return SCardLocateCardsA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsA(SCARDCONTEXT hContext, LPCSTR mszCards, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders)
     * }
     */
    public static MemorySegment SCardLocateCardsA$address() {
        return SCardLocateCardsA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsA(SCARDCONTEXT hContext, LPCSTR mszCards, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders)
     * }
     */
    public static int SCardLocateCardsA(long hContext, MemorySegment mszCards, MemorySegment rgReaderStates, int cReaders) {
        var mh$ = SCardLocateCardsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardLocateCardsA", hContext, mszCards, rgReaderStates, cReaders);
            }
            return (int)mh$.invokeExact(hContext, mszCards, rgReaderStates, cReaders);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardLocateCardsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardLocateCardsW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsW(SCARDCONTEXT hContext, LPCWSTR mszCards, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders)
     * }
     */
    public static FunctionDescriptor SCardLocateCardsW$descriptor() {
        return SCardLocateCardsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsW(SCARDCONTEXT hContext, LPCWSTR mszCards, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders)
     * }
     */
    public static MethodHandle SCardLocateCardsW$handle() {
        return SCardLocateCardsW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsW(SCARDCONTEXT hContext, LPCWSTR mszCards, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders)
     * }
     */
    public static MemorySegment SCardLocateCardsW$address() {
        return SCardLocateCardsW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsW(SCARDCONTEXT hContext, LPCWSTR mszCards, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders)
     * }
     */
    public static int SCardLocateCardsW(long hContext, MemorySegment mszCards, MemorySegment rgReaderStates, int cReaders) {
        var mh$ = SCardLocateCardsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardLocateCardsW", hContext, mszCards, rgReaderStates, cReaders);
            }
            return (int)mh$.invokeExact(hContext, mszCards, rgReaderStates, cReaders);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _SCARD_ATRMASK {
     *     DWORD cbAtr;
     *     BYTE rgbAtr[36];
     *     BYTE rgbMask[36];
     * } *PSCARD_ATRMASK
     * }
     */
    public static final AddressLayout PSCARD_ATRMASK = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCARD_ATRMASK {
     *     DWORD cbAtr;
     *     BYTE rgbAtr[36];
     *     BYTE rgbMask[36];
     * } *LPSCARD_ATRMASK
     * }
     */
    public static final AddressLayout LPSCARD_ATRMASK = wgl_h.C_POINTER;

    private static class SCardLocateCardsByATRA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardLocateCardsByATRA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsByATRA(SCARDCONTEXT hContext, LPSCARD_ATRMASK rgAtrMasks, DWORD cAtrs, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders)
     * }
     */
    public static FunctionDescriptor SCardLocateCardsByATRA$descriptor() {
        return SCardLocateCardsByATRA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsByATRA(SCARDCONTEXT hContext, LPSCARD_ATRMASK rgAtrMasks, DWORD cAtrs, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders)
     * }
     */
    public static MethodHandle SCardLocateCardsByATRA$handle() {
        return SCardLocateCardsByATRA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsByATRA(SCARDCONTEXT hContext, LPSCARD_ATRMASK rgAtrMasks, DWORD cAtrs, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders)
     * }
     */
    public static MemorySegment SCardLocateCardsByATRA$address() {
        return SCardLocateCardsByATRA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsByATRA(SCARDCONTEXT hContext, LPSCARD_ATRMASK rgAtrMasks, DWORD cAtrs, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders)
     * }
     */
    public static int SCardLocateCardsByATRA(long hContext, MemorySegment rgAtrMasks, int cAtrs, MemorySegment rgReaderStates, int cReaders) {
        var mh$ = SCardLocateCardsByATRA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardLocateCardsByATRA", hContext, rgAtrMasks, cAtrs, rgReaderStates, cReaders);
            }
            return (int)mh$.invokeExact(hContext, rgAtrMasks, cAtrs, rgReaderStates, cReaders);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardLocateCardsByATRW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardLocateCardsByATRW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsByATRW(SCARDCONTEXT hContext, LPSCARD_ATRMASK rgAtrMasks, DWORD cAtrs, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders)
     * }
     */
    public static FunctionDescriptor SCardLocateCardsByATRW$descriptor() {
        return SCardLocateCardsByATRW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsByATRW(SCARDCONTEXT hContext, LPSCARD_ATRMASK rgAtrMasks, DWORD cAtrs, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders)
     * }
     */
    public static MethodHandle SCardLocateCardsByATRW$handle() {
        return SCardLocateCardsByATRW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsByATRW(SCARDCONTEXT hContext, LPSCARD_ATRMASK rgAtrMasks, DWORD cAtrs, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders)
     * }
     */
    public static MemorySegment SCardLocateCardsByATRW$address() {
        return SCardLocateCardsByATRW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsByATRW(SCARDCONTEXT hContext, LPSCARD_ATRMASK rgAtrMasks, DWORD cAtrs, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders)
     * }
     */
    public static int SCardLocateCardsByATRW(long hContext, MemorySegment rgAtrMasks, int cAtrs, MemorySegment rgReaderStates, int cReaders) {
        var mh$ = SCardLocateCardsByATRW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardLocateCardsByATRW", hContext, rgAtrMasks, cAtrs, rgReaderStates, cReaders);
            }
            return (int)mh$.invokeExact(hContext, rgAtrMasks, cAtrs, rgReaderStates, cReaders);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetStatusChangeA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardGetStatusChangeA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetStatusChangeA(SCARDCONTEXT hContext, DWORD dwTimeout, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders)
     * }
     */
    public static FunctionDescriptor SCardGetStatusChangeA$descriptor() {
        return SCardGetStatusChangeA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetStatusChangeA(SCARDCONTEXT hContext, DWORD dwTimeout, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders)
     * }
     */
    public static MethodHandle SCardGetStatusChangeA$handle() {
        return SCardGetStatusChangeA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardGetStatusChangeA(SCARDCONTEXT hContext, DWORD dwTimeout, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders)
     * }
     */
    public static MemorySegment SCardGetStatusChangeA$address() {
        return SCardGetStatusChangeA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardGetStatusChangeA(SCARDCONTEXT hContext, DWORD dwTimeout, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders)
     * }
     */
    public static int SCardGetStatusChangeA(long hContext, int dwTimeout, MemorySegment rgReaderStates, int cReaders) {
        var mh$ = SCardGetStatusChangeA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetStatusChangeA", hContext, dwTimeout, rgReaderStates, cReaders);
            }
            return (int)mh$.invokeExact(hContext, dwTimeout, rgReaderStates, cReaders);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetStatusChangeW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardGetStatusChangeW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetStatusChangeW(SCARDCONTEXT hContext, DWORD dwTimeout, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders)
     * }
     */
    public static FunctionDescriptor SCardGetStatusChangeW$descriptor() {
        return SCardGetStatusChangeW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetStatusChangeW(SCARDCONTEXT hContext, DWORD dwTimeout, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders)
     * }
     */
    public static MethodHandle SCardGetStatusChangeW$handle() {
        return SCardGetStatusChangeW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardGetStatusChangeW(SCARDCONTEXT hContext, DWORD dwTimeout, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders)
     * }
     */
    public static MemorySegment SCardGetStatusChangeW$address() {
        return SCardGetStatusChangeW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardGetStatusChangeW(SCARDCONTEXT hContext, DWORD dwTimeout, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders)
     * }
     */
    public static int SCardGetStatusChangeW(long hContext, int dwTimeout, MemorySegment rgReaderStates, int cReaders) {
        var mh$ = SCardGetStatusChangeW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetStatusChangeW", hContext, dwTimeout, rgReaderStates, cReaders);
            }
            return (int)mh$.invokeExact(hContext, dwTimeout, rgReaderStates, cReaders);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardCancel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardCancel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardCancel(SCARDCONTEXT hContext)
     * }
     */
    public static FunctionDescriptor SCardCancel$descriptor() {
        return SCardCancel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardCancel(SCARDCONTEXT hContext)
     * }
     */
    public static MethodHandle SCardCancel$handle() {
        return SCardCancel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardCancel(SCARDCONTEXT hContext)
     * }
     */
    public static MemorySegment SCardCancel$address() {
        return SCardCancel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardCancel(SCARDCONTEXT hContext)
     * }
     */
    public static int SCardCancel(long hContext) {
        var mh$ = SCardCancel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardCancel", hContext);
            }
            return (int)mh$.invokeExact(hContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardConnectA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardConnectA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardConnectA(SCARDCONTEXT hContext, LPCSTR szReader, DWORD dwShareMode, DWORD dwPreferredProtocols, LPSCARDHANDLE phCard, LPDWORD pdwActiveProtocol)
     * }
     */
    public static FunctionDescriptor SCardConnectA$descriptor() {
        return SCardConnectA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardConnectA(SCARDCONTEXT hContext, LPCSTR szReader, DWORD dwShareMode, DWORD dwPreferredProtocols, LPSCARDHANDLE phCard, LPDWORD pdwActiveProtocol)
     * }
     */
    public static MethodHandle SCardConnectA$handle() {
        return SCardConnectA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardConnectA(SCARDCONTEXT hContext, LPCSTR szReader, DWORD dwShareMode, DWORD dwPreferredProtocols, LPSCARDHANDLE phCard, LPDWORD pdwActiveProtocol)
     * }
     */
    public static MemorySegment SCardConnectA$address() {
        return SCardConnectA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardConnectA(SCARDCONTEXT hContext, LPCSTR szReader, DWORD dwShareMode, DWORD dwPreferredProtocols, LPSCARDHANDLE phCard, LPDWORD pdwActiveProtocol)
     * }
     */
    public static int SCardConnectA(long hContext, MemorySegment szReader, int dwShareMode, int dwPreferredProtocols, MemorySegment phCard, MemorySegment pdwActiveProtocol) {
        var mh$ = SCardConnectA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardConnectA", hContext, szReader, dwShareMode, dwPreferredProtocols, phCard, pdwActiveProtocol);
            }
            return (int)mh$.invokeExact(hContext, szReader, dwShareMode, dwPreferredProtocols, phCard, pdwActiveProtocol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardConnectW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardConnectW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardConnectW(SCARDCONTEXT hContext, LPCWSTR szReader, DWORD dwShareMode, DWORD dwPreferredProtocols, LPSCARDHANDLE phCard, LPDWORD pdwActiveProtocol)
     * }
     */
    public static FunctionDescriptor SCardConnectW$descriptor() {
        return SCardConnectW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardConnectW(SCARDCONTEXT hContext, LPCWSTR szReader, DWORD dwShareMode, DWORD dwPreferredProtocols, LPSCARDHANDLE phCard, LPDWORD pdwActiveProtocol)
     * }
     */
    public static MethodHandle SCardConnectW$handle() {
        return SCardConnectW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardConnectW(SCARDCONTEXT hContext, LPCWSTR szReader, DWORD dwShareMode, DWORD dwPreferredProtocols, LPSCARDHANDLE phCard, LPDWORD pdwActiveProtocol)
     * }
     */
    public static MemorySegment SCardConnectW$address() {
        return SCardConnectW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardConnectW(SCARDCONTEXT hContext, LPCWSTR szReader, DWORD dwShareMode, DWORD dwPreferredProtocols, LPSCARDHANDLE phCard, LPDWORD pdwActiveProtocol)
     * }
     */
    public static int SCardConnectW(long hContext, MemorySegment szReader, int dwShareMode, int dwPreferredProtocols, MemorySegment phCard, MemorySegment pdwActiveProtocol) {
        var mh$ = SCardConnectW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardConnectW", hContext, szReader, dwShareMode, dwPreferredProtocols, phCard, pdwActiveProtocol);
            }
            return (int)mh$.invokeExact(hContext, szReader, dwShareMode, dwPreferredProtocols, phCard, pdwActiveProtocol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardReconnect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardReconnect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardReconnect(SCARDHANDLE hCard, DWORD dwShareMode, DWORD dwPreferredProtocols, DWORD dwInitialization, LPDWORD pdwActiveProtocol)
     * }
     */
    public static FunctionDescriptor SCardReconnect$descriptor() {
        return SCardReconnect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardReconnect(SCARDHANDLE hCard, DWORD dwShareMode, DWORD dwPreferredProtocols, DWORD dwInitialization, LPDWORD pdwActiveProtocol)
     * }
     */
    public static MethodHandle SCardReconnect$handle() {
        return SCardReconnect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardReconnect(SCARDHANDLE hCard, DWORD dwShareMode, DWORD dwPreferredProtocols, DWORD dwInitialization, LPDWORD pdwActiveProtocol)
     * }
     */
    public static MemorySegment SCardReconnect$address() {
        return SCardReconnect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardReconnect(SCARDHANDLE hCard, DWORD dwShareMode, DWORD dwPreferredProtocols, DWORD dwInitialization, LPDWORD pdwActiveProtocol)
     * }
     */
    public static int SCardReconnect(long hCard, int dwShareMode, int dwPreferredProtocols, int dwInitialization, MemorySegment pdwActiveProtocol) {
        var mh$ = SCardReconnect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardReconnect", hCard, dwShareMode, dwPreferredProtocols, dwInitialization, pdwActiveProtocol);
            }
            return (int)mh$.invokeExact(hCard, dwShareMode, dwPreferredProtocols, dwInitialization, pdwActiveProtocol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardDisconnect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardDisconnect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardDisconnect(SCARDHANDLE hCard, DWORD dwDisposition)
     * }
     */
    public static FunctionDescriptor SCardDisconnect$descriptor() {
        return SCardDisconnect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardDisconnect(SCARDHANDLE hCard, DWORD dwDisposition)
     * }
     */
    public static MethodHandle SCardDisconnect$handle() {
        return SCardDisconnect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardDisconnect(SCARDHANDLE hCard, DWORD dwDisposition)
     * }
     */
    public static MemorySegment SCardDisconnect$address() {
        return SCardDisconnect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardDisconnect(SCARDHANDLE hCard, DWORD dwDisposition)
     * }
     */
    public static int SCardDisconnect(long hCard, int dwDisposition) {
        var mh$ = SCardDisconnect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardDisconnect", hCard, dwDisposition);
            }
            return (int)mh$.invokeExact(hCard, dwDisposition);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardBeginTransaction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardBeginTransaction");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardBeginTransaction(SCARDHANDLE hCard)
     * }
     */
    public static FunctionDescriptor SCardBeginTransaction$descriptor() {
        return SCardBeginTransaction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardBeginTransaction(SCARDHANDLE hCard)
     * }
     */
    public static MethodHandle SCardBeginTransaction$handle() {
        return SCardBeginTransaction.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardBeginTransaction(SCARDHANDLE hCard)
     * }
     */
    public static MemorySegment SCardBeginTransaction$address() {
        return SCardBeginTransaction.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardBeginTransaction(SCARDHANDLE hCard)
     * }
     */
    public static int SCardBeginTransaction(long hCard) {
        var mh$ = SCardBeginTransaction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardBeginTransaction", hCard);
            }
            return (int)mh$.invokeExact(hCard);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardEndTransaction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardEndTransaction");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardEndTransaction(SCARDHANDLE hCard, DWORD dwDisposition)
     * }
     */
    public static FunctionDescriptor SCardEndTransaction$descriptor() {
        return SCardEndTransaction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardEndTransaction(SCARDHANDLE hCard, DWORD dwDisposition)
     * }
     */
    public static MethodHandle SCardEndTransaction$handle() {
        return SCardEndTransaction.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardEndTransaction(SCARDHANDLE hCard, DWORD dwDisposition)
     * }
     */
    public static MemorySegment SCardEndTransaction$address() {
        return SCardEndTransaction.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardEndTransaction(SCARDHANDLE hCard, DWORD dwDisposition)
     * }
     */
    public static int SCardEndTransaction(long hCard, int dwDisposition) {
        var mh$ = SCardEndTransaction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardEndTransaction", hCard, dwDisposition);
            }
            return (int)mh$.invokeExact(hCard, dwDisposition);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardCancelTransaction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardCancelTransaction");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardCancelTransaction(SCARDHANDLE hCard)
     * }
     */
    public static FunctionDescriptor SCardCancelTransaction$descriptor() {
        return SCardCancelTransaction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardCancelTransaction(SCARDHANDLE hCard)
     * }
     */
    public static MethodHandle SCardCancelTransaction$handle() {
        return SCardCancelTransaction.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardCancelTransaction(SCARDHANDLE hCard)
     * }
     */
    public static MemorySegment SCardCancelTransaction$address() {
        return SCardCancelTransaction.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardCancelTransaction(SCARDHANDLE hCard)
     * }
     */
    public static int SCardCancelTransaction(long hCard) {
        var mh$ = SCardCancelTransaction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardCancelTransaction", hCard);
            }
            return (int)mh$.invokeExact(hCard);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardState(SCARDHANDLE hCard, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen)
     * }
     */
    public static FunctionDescriptor SCardState$descriptor() {
        return SCardState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardState(SCARDHANDLE hCard, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen)
     * }
     */
    public static MethodHandle SCardState$handle() {
        return SCardState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardState(SCARDHANDLE hCard, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen)
     * }
     */
    public static MemorySegment SCardState$address() {
        return SCardState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardState(SCARDHANDLE hCard, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen)
     * }
     */
    public static int SCardState(long hCard, MemorySegment pdwState, MemorySegment pdwProtocol, MemorySegment pbAtr, MemorySegment pcbAtrLen) {
        var mh$ = SCardState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardState", hCard, pdwState, pdwProtocol, pbAtr, pcbAtrLen);
            }
            return (int)mh$.invokeExact(hCard, pdwState, pdwProtocol, pbAtr, pcbAtrLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardStatusA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardStatusA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardStatusA(SCARDHANDLE hCard, LPSTR mszReaderNames, LPDWORD pcchReaderLen, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen)
     * }
     */
    public static FunctionDescriptor SCardStatusA$descriptor() {
        return SCardStatusA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardStatusA(SCARDHANDLE hCard, LPSTR mszReaderNames, LPDWORD pcchReaderLen, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen)
     * }
     */
    public static MethodHandle SCardStatusA$handle() {
        return SCardStatusA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardStatusA(SCARDHANDLE hCard, LPSTR mszReaderNames, LPDWORD pcchReaderLen, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen)
     * }
     */
    public static MemorySegment SCardStatusA$address() {
        return SCardStatusA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardStatusA(SCARDHANDLE hCard, LPSTR mszReaderNames, LPDWORD pcchReaderLen, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen)
     * }
     */
    public static int SCardStatusA(long hCard, MemorySegment mszReaderNames, MemorySegment pcchReaderLen, MemorySegment pdwState, MemorySegment pdwProtocol, MemorySegment pbAtr, MemorySegment pcbAtrLen) {
        var mh$ = SCardStatusA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardStatusA", hCard, mszReaderNames, pcchReaderLen, pdwState, pdwProtocol, pbAtr, pcbAtrLen);
            }
            return (int)mh$.invokeExact(hCard, mszReaderNames, pcchReaderLen, pdwState, pdwProtocol, pbAtr, pcbAtrLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardStatusW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardStatusW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardStatusW(SCARDHANDLE hCard, LPWSTR mszReaderNames, LPDWORD pcchReaderLen, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen)
     * }
     */
    public static FunctionDescriptor SCardStatusW$descriptor() {
        return SCardStatusW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardStatusW(SCARDHANDLE hCard, LPWSTR mszReaderNames, LPDWORD pcchReaderLen, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen)
     * }
     */
    public static MethodHandle SCardStatusW$handle() {
        return SCardStatusW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardStatusW(SCARDHANDLE hCard, LPWSTR mszReaderNames, LPDWORD pcchReaderLen, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen)
     * }
     */
    public static MemorySegment SCardStatusW$address() {
        return SCardStatusW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardStatusW(SCARDHANDLE hCard, LPWSTR mszReaderNames, LPDWORD pcchReaderLen, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen)
     * }
     */
    public static int SCardStatusW(long hCard, MemorySegment mszReaderNames, MemorySegment pcchReaderLen, MemorySegment pdwState, MemorySegment pdwProtocol, MemorySegment pbAtr, MemorySegment pcbAtrLen) {
        var mh$ = SCardStatusW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardStatusW", hCard, mszReaderNames, pcchReaderLen, pdwState, pdwProtocol, pbAtr, pcbAtrLen);
            }
            return (int)mh$.invokeExact(hCard, mszReaderNames, pcchReaderLen, pdwState, pdwProtocol, pbAtr, pcbAtrLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardTransmit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardTransmit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardTransmit(SCARDHANDLE hCard, LPCSCARD_IO_REQUEST pioSendPci, LPCBYTE pbSendBuffer, DWORD cbSendLength, LPSCARD_IO_REQUEST pioRecvPci, LPBYTE pbRecvBuffer, LPDWORD pcbRecvLength)
     * }
     */
    public static FunctionDescriptor SCardTransmit$descriptor() {
        return SCardTransmit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardTransmit(SCARDHANDLE hCard, LPCSCARD_IO_REQUEST pioSendPci, LPCBYTE pbSendBuffer, DWORD cbSendLength, LPSCARD_IO_REQUEST pioRecvPci, LPBYTE pbRecvBuffer, LPDWORD pcbRecvLength)
     * }
     */
    public static MethodHandle SCardTransmit$handle() {
        return SCardTransmit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardTransmit(SCARDHANDLE hCard, LPCSCARD_IO_REQUEST pioSendPci, LPCBYTE pbSendBuffer, DWORD cbSendLength, LPSCARD_IO_REQUEST pioRecvPci, LPBYTE pbRecvBuffer, LPDWORD pcbRecvLength)
     * }
     */
    public static MemorySegment SCardTransmit$address() {
        return SCardTransmit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardTransmit(SCARDHANDLE hCard, LPCSCARD_IO_REQUEST pioSendPci, LPCBYTE pbSendBuffer, DWORD cbSendLength, LPSCARD_IO_REQUEST pioRecvPci, LPBYTE pbRecvBuffer, LPDWORD pcbRecvLength)
     * }
     */
    public static int SCardTransmit(long hCard, MemorySegment pioSendPci, MemorySegment pbSendBuffer, int cbSendLength, MemorySegment pioRecvPci, MemorySegment pbRecvBuffer, MemorySegment pcbRecvLength) {
        var mh$ = SCardTransmit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardTransmit", hCard, pioSendPci, pbSendBuffer, cbSendLength, pioRecvPci, pbRecvBuffer, pcbRecvLength);
            }
            return (int)mh$.invokeExact(hCard, pioSendPci, pbSendBuffer, cbSendLength, pioRecvPci, pbRecvBuffer, pcbRecvLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetTransmitCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardGetTransmitCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetTransmitCount(SCARDHANDLE hCard, LPDWORD pcTransmitCount)
     * }
     */
    public static FunctionDescriptor SCardGetTransmitCount$descriptor() {
        return SCardGetTransmitCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetTransmitCount(SCARDHANDLE hCard, LPDWORD pcTransmitCount)
     * }
     */
    public static MethodHandle SCardGetTransmitCount$handle() {
        return SCardGetTransmitCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardGetTransmitCount(SCARDHANDLE hCard, LPDWORD pcTransmitCount)
     * }
     */
    public static MemorySegment SCardGetTransmitCount$address() {
        return SCardGetTransmitCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardGetTransmitCount(SCARDHANDLE hCard, LPDWORD pcTransmitCount)
     * }
     */
    public static int SCardGetTransmitCount(long hCard, MemorySegment pcTransmitCount) {
        var mh$ = SCardGetTransmitCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetTransmitCount", hCard, pcTransmitCount);
            }
            return (int)mh$.invokeExact(hCard, pcTransmitCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardControl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardControl");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardControl(SCARDHANDLE hCard, DWORD dwControlCode, LPCVOID lpInBuffer, DWORD cbInBufferSize, LPVOID lpOutBuffer, DWORD cbOutBufferSize, LPDWORD lpBytesReturned)
     * }
     */
    public static FunctionDescriptor SCardControl$descriptor() {
        return SCardControl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardControl(SCARDHANDLE hCard, DWORD dwControlCode, LPCVOID lpInBuffer, DWORD cbInBufferSize, LPVOID lpOutBuffer, DWORD cbOutBufferSize, LPDWORD lpBytesReturned)
     * }
     */
    public static MethodHandle SCardControl$handle() {
        return SCardControl.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardControl(SCARDHANDLE hCard, DWORD dwControlCode, LPCVOID lpInBuffer, DWORD cbInBufferSize, LPVOID lpOutBuffer, DWORD cbOutBufferSize, LPDWORD lpBytesReturned)
     * }
     */
    public static MemorySegment SCardControl$address() {
        return SCardControl.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardControl(SCARDHANDLE hCard, DWORD dwControlCode, LPCVOID lpInBuffer, DWORD cbInBufferSize, LPVOID lpOutBuffer, DWORD cbOutBufferSize, LPDWORD lpBytesReturned)
     * }
     */
    public static int SCardControl(long hCard, int dwControlCode, MemorySegment lpInBuffer, int cbInBufferSize, MemorySegment lpOutBuffer, int cbOutBufferSize, MemorySegment lpBytesReturned) {
        var mh$ = SCardControl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardControl", hCard, dwControlCode, lpInBuffer, cbInBufferSize, lpOutBuffer, cbOutBufferSize, lpBytesReturned);
            }
            return (int)mh$.invokeExact(hCard, dwControlCode, lpInBuffer, cbInBufferSize, lpOutBuffer, cbOutBufferSize, lpBytesReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetAttrib {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardGetAttrib");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetAttrib(SCARDHANDLE hCard, DWORD dwAttrId, LPBYTE pbAttr, LPDWORD pcbAttrLen)
     * }
     */
    public static FunctionDescriptor SCardGetAttrib$descriptor() {
        return SCardGetAttrib.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetAttrib(SCARDHANDLE hCard, DWORD dwAttrId, LPBYTE pbAttr, LPDWORD pcbAttrLen)
     * }
     */
    public static MethodHandle SCardGetAttrib$handle() {
        return SCardGetAttrib.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardGetAttrib(SCARDHANDLE hCard, DWORD dwAttrId, LPBYTE pbAttr, LPDWORD pcbAttrLen)
     * }
     */
    public static MemorySegment SCardGetAttrib$address() {
        return SCardGetAttrib.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardGetAttrib(SCARDHANDLE hCard, DWORD dwAttrId, LPBYTE pbAttr, LPDWORD pcbAttrLen)
     * }
     */
    public static int SCardGetAttrib(long hCard, int dwAttrId, MemorySegment pbAttr, MemorySegment pcbAttrLen) {
        var mh$ = SCardGetAttrib.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetAttrib", hCard, dwAttrId, pbAttr, pcbAttrLen);
            }
            return (int)mh$.invokeExact(hCard, dwAttrId, pbAttr, pcbAttrLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardSetAttrib {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardSetAttrib");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardSetAttrib(SCARDHANDLE hCard, DWORD dwAttrId, LPCBYTE pbAttr, DWORD cbAttrLen)
     * }
     */
    public static FunctionDescriptor SCardSetAttrib$descriptor() {
        return SCardSetAttrib.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardSetAttrib(SCARDHANDLE hCard, DWORD dwAttrId, LPCBYTE pbAttr, DWORD cbAttrLen)
     * }
     */
    public static MethodHandle SCardSetAttrib$handle() {
        return SCardSetAttrib.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardSetAttrib(SCARDHANDLE hCard, DWORD dwAttrId, LPCBYTE pbAttr, DWORD cbAttrLen)
     * }
     */
    public static MemorySegment SCardSetAttrib$address() {
        return SCardSetAttrib.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardSetAttrib(SCARDHANDLE hCard, DWORD dwAttrId, LPCBYTE pbAttr, DWORD cbAttrLen)
     * }
     */
    public static int SCardSetAttrib(long hCard, int dwAttrId, MemorySegment pbAttr, int cbAttrLen) {
        var mh$ = SCardSetAttrib.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardSetAttrib", hCard, dwAttrId, pbAttr, cbAttrLen);
            }
            return (int)mh$.invokeExact(hCard, dwAttrId, pbAttr, cbAttrLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwStructSize;
     *     LPSTR lpstrGroupNames;
     *     DWORD nMaxGroupNames;
     *     LPCGUID rgguidInterfaces;
     *     DWORD cguidInterfaces;
     *     LPSTR lpstrCardNames;
     *     DWORD nMaxCardNames;
     *     LPOCNCHKPROC lpfnCheck;
     *     LPOCNCONNPROCA lpfnConnect;
     *     LPOCNDSCPROC lpfnDisconnect;
     *     LPVOID pvUserData;
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     * } *POPENCARD_SEARCH_CRITERIAA
     * }
     */
    public static final AddressLayout POPENCARD_SEARCH_CRITERIAA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwStructSize;
     *     LPSTR lpstrGroupNames;
     *     DWORD nMaxGroupNames;
     *     LPCGUID rgguidInterfaces;
     *     DWORD cguidInterfaces;
     *     LPSTR lpstrCardNames;
     *     DWORD nMaxCardNames;
     *     LPOCNCHKPROC lpfnCheck;
     *     LPOCNCONNPROCA lpfnConnect;
     *     LPOCNDSCPROC lpfnDisconnect;
     *     LPVOID pvUserData;
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     * } *LPOPENCARD_SEARCH_CRITERIAA
     * }
     */
    public static final AddressLayout LPOPENCARD_SEARCH_CRITERIAA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwStructSize;
     *     LPWSTR lpstrGroupNames;
     *     DWORD nMaxGroupNames;
     *     LPCGUID rgguidInterfaces;
     *     DWORD cguidInterfaces;
     *     LPWSTR lpstrCardNames;
     *     DWORD nMaxCardNames;
     *     LPOCNCHKPROC lpfnCheck;
     *     LPOCNCONNPROCW lpfnConnect;
     *     LPOCNDSCPROC lpfnDisconnect;
     *     LPVOID pvUserData;
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     * } *POPENCARD_SEARCH_CRITERIAW
     * }
     */
    public static final AddressLayout POPENCARD_SEARCH_CRITERIAW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwStructSize;
     *     LPWSTR lpstrGroupNames;
     *     DWORD nMaxGroupNames;
     *     LPCGUID rgguidInterfaces;
     *     DWORD cguidInterfaces;
     *     LPWSTR lpstrCardNames;
     *     DWORD nMaxCardNames;
     *     LPOCNCHKPROC lpfnCheck;
     *     LPOCNCONNPROCW lpfnConnect;
     *     LPOCNDSCPROC lpfnDisconnect;
     *     LPVOID pvUserData;
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     * } *LPOPENCARD_SEARCH_CRITERIAW
     * }
     */
    public static final AddressLayout LPOPENCARD_SEARCH_CRITERIAW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef POPENCARD_SEARCH_CRITERIAA POPENCARD_SEARCH_CRITERIA
     * }
     */
    public static final AddressLayout POPENCARD_SEARCH_CRITERIA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPOPENCARD_SEARCH_CRITERIAA LPOPENCARD_SEARCH_CRITERIA
     * }
     */
    public static final AddressLayout LPOPENCARD_SEARCH_CRITERIA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwStructSize;
     *     SCARDCONTEXT hSCardContext;
     *     HWND hwndOwner;
     *     DWORD dwFlags;
     *     LPCSTR lpstrTitle;
     *     LPCSTR lpstrSearchDesc;
     *     HICON hIcon;
     *     POPENCARD_SEARCH_CRITERIAA pOpenCardSearchCriteria;
     *     LPOCNCONNPROCA lpfnConnect;
     *     LPVOID pvUserData;
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     *     LPSTR lpstrRdr;
     *     DWORD nMaxRdr;
     *     LPSTR lpstrCard;
     *     DWORD nMaxCard;
     *     DWORD dwActiveProtocol;
     *     SCARDHANDLE hCardHandle;
     * } *POPENCARDNAME_EXA
     * }
     */
    public static final AddressLayout POPENCARDNAME_EXA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwStructSize;
     *     SCARDCONTEXT hSCardContext;
     *     HWND hwndOwner;
     *     DWORD dwFlags;
     *     LPCSTR lpstrTitle;
     *     LPCSTR lpstrSearchDesc;
     *     HICON hIcon;
     *     POPENCARD_SEARCH_CRITERIAA pOpenCardSearchCriteria;
     *     LPOCNCONNPROCA lpfnConnect;
     *     LPVOID pvUserData;
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     *     LPSTR lpstrRdr;
     *     DWORD nMaxRdr;
     *     LPSTR lpstrCard;
     *     DWORD nMaxCard;
     *     DWORD dwActiveProtocol;
     *     SCARDHANDLE hCardHandle;
     * } *LPOPENCARDNAME_EXA
     * }
     */
    public static final AddressLayout LPOPENCARDNAME_EXA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwStructSize;
     *     SCARDCONTEXT hSCardContext;
     *     HWND hwndOwner;
     *     DWORD dwFlags;
     *     LPCWSTR lpstrTitle;
     *     LPCWSTR lpstrSearchDesc;
     *     HICON hIcon;
     *     POPENCARD_SEARCH_CRITERIAW pOpenCardSearchCriteria;
     *     LPOCNCONNPROCW lpfnConnect;
     *     LPVOID pvUserData;
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     *     LPWSTR lpstrRdr;
     *     DWORD nMaxRdr;
     *     LPWSTR lpstrCard;
     *     DWORD nMaxCard;
     *     DWORD dwActiveProtocol;
     *     SCARDHANDLE hCardHandle;
     * } *POPENCARDNAME_EXW
     * }
     */
    public static final AddressLayout POPENCARDNAME_EXW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwStructSize;
     *     SCARDCONTEXT hSCardContext;
     *     HWND hwndOwner;
     *     DWORD dwFlags;
     *     LPCWSTR lpstrTitle;
     *     LPCWSTR lpstrSearchDesc;
     *     HICON hIcon;
     *     POPENCARD_SEARCH_CRITERIAW pOpenCardSearchCriteria;
     *     LPOCNCONNPROCW lpfnConnect;
     *     LPVOID pvUserData;
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     *     LPWSTR lpstrRdr;
     *     DWORD nMaxRdr;
     *     LPWSTR lpstrCard;
     *     DWORD nMaxCard;
     *     DWORD dwActiveProtocol;
     *     SCARDHANDLE hCardHandle;
     * } *LPOPENCARDNAME_EXW
     * }
     */
    public static final AddressLayout LPOPENCARDNAME_EXW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef POPENCARDNAME_EXA POPENCARDNAME_EX
     * }
     */
    public static final AddressLayout POPENCARDNAME_EX = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPOPENCARDNAME_EXA LPOPENCARDNAME_EX
     * }
     */
    public static final AddressLayout LPOPENCARDNAME_EX = wgl_h.C_POINTER;
    private static final int RSR_MATCH_TYPE_READER_AND_CONTAINER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.RSR_MATCH_TYPE_READER_AND_CONTAINER = 1
     * }
     */
    public static int RSR_MATCH_TYPE_READER_AND_CONTAINER() {
        return RSR_MATCH_TYPE_READER_AND_CONTAINER;
    }
    private static final int RSR_MATCH_TYPE_SERIAL_NUMBER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.RSR_MATCH_TYPE_SERIAL_NUMBER = 2
     * }
     */
    public static int RSR_MATCH_TYPE_SERIAL_NUMBER() {
        return RSR_MATCH_TYPE_SERIAL_NUMBER;
    }
    private static final int RSR_MATCH_TYPE_ALL_CARDS = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.RSR_MATCH_TYPE_ALL_CARDS = 3
     * }
     */
    public static int RSR_MATCH_TYPE_ALL_CARDS() {
        return RSR_MATCH_TYPE_ALL_CARDS;
    }
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     *     READER_SEL_REQUEST_MATCH_TYPE MatchType;
     *     union {
     *         struct {
     *             DWORD cbReaderNameOffset;
     *             DWORD cchReaderNameLength;
     *             DWORD cbContainerNameOffset;
     *             DWORD cchContainerNameLength;
     *             DWORD dwDesiredCardModuleVersion;
     *             DWORD dwCspFlags;
     *         } ReaderAndContainerParameter;
     *         struct {
     *             DWORD cbSerialNumberOffset;
     *             DWORD cbSerialNumberLength;
     *             DWORD dwDesiredCardModuleVersion;
     *         } SerialNumberParameter;
     *     };
     * } *PREADER_SEL_REQUEST
     * }
     */
    public static final AddressLayout PREADER_SEL_REQUEST = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD cbReaderNameOffset;
     *     DWORD cchReaderNameLength;
     *     DWORD cbCardNameOffset;
     *     DWORD cchCardNameLength;
     * } *PREADER_SEL_RESPONSE
     * }
     */
    public static final AddressLayout PREADER_SEL_RESPONSE = wgl_h.C_POINTER;

    private static class SCardUIDlgSelectCardA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardUIDlgSelectCardA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardUIDlgSelectCardA(LPOPENCARDNAME_EXA)
     * }
     */
    public static FunctionDescriptor SCardUIDlgSelectCardA$descriptor() {
        return SCardUIDlgSelectCardA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardUIDlgSelectCardA(LPOPENCARDNAME_EXA)
     * }
     */
    public static MethodHandle SCardUIDlgSelectCardA$handle() {
        return SCardUIDlgSelectCardA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardUIDlgSelectCardA(LPOPENCARDNAME_EXA)
     * }
     */
    public static MemorySegment SCardUIDlgSelectCardA$address() {
        return SCardUIDlgSelectCardA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardUIDlgSelectCardA(LPOPENCARDNAME_EXA)
     * }
     */
    public static int SCardUIDlgSelectCardA(MemorySegment x0) {
        var mh$ = SCardUIDlgSelectCardA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardUIDlgSelectCardA", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardUIDlgSelectCardW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardUIDlgSelectCardW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardUIDlgSelectCardW(LPOPENCARDNAME_EXW)
     * }
     */
    public static FunctionDescriptor SCardUIDlgSelectCardW$descriptor() {
        return SCardUIDlgSelectCardW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardUIDlgSelectCardW(LPOPENCARDNAME_EXW)
     * }
     */
    public static MethodHandle SCardUIDlgSelectCardW$handle() {
        return SCardUIDlgSelectCardW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardUIDlgSelectCardW(LPOPENCARDNAME_EXW)
     * }
     */
    public static MemorySegment SCardUIDlgSelectCardW$address() {
        return SCardUIDlgSelectCardW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardUIDlgSelectCardW(LPOPENCARDNAME_EXW)
     * }
     */
    public static int SCardUIDlgSelectCardW(MemorySegment x0) {
        var mh$ = SCardUIDlgSelectCardW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardUIDlgSelectCardW", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwStructSize;
     *     HWND hwndOwner;
     *     SCARDCONTEXT hSCardContext;
     *     LPSTR lpstrGroupNames;
     *     DWORD nMaxGroupNames;
     *     LPSTR lpstrCardNames;
     *     DWORD nMaxCardNames;
     *     LPCGUID rgguidInterfaces;
     *     DWORD cguidInterfaces;
     *     LPSTR lpstrRdr;
     *     DWORD nMaxRdr;
     *     LPSTR lpstrCard;
     *     DWORD nMaxCard;
     *     LPCSTR lpstrTitle;
     *     DWORD dwFlags;
     *     LPVOID pvUserData;
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     *     DWORD dwActiveProtocol;
     *     LPOCNCONNPROCA lpfnConnect;
     *     LPOCNCHKPROC lpfnCheck;
     *     LPOCNDSCPROC lpfnDisconnect;
     *     SCARDHANDLE hCardHandle;
     * } *POPENCARDNAMEA
     * }
     */
    public static final AddressLayout POPENCARDNAMEA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwStructSize;
     *     HWND hwndOwner;
     *     SCARDCONTEXT hSCardContext;
     *     LPSTR lpstrGroupNames;
     *     DWORD nMaxGroupNames;
     *     LPSTR lpstrCardNames;
     *     DWORD nMaxCardNames;
     *     LPCGUID rgguidInterfaces;
     *     DWORD cguidInterfaces;
     *     LPSTR lpstrRdr;
     *     DWORD nMaxRdr;
     *     LPSTR lpstrCard;
     *     DWORD nMaxCard;
     *     LPCSTR lpstrTitle;
     *     DWORD dwFlags;
     *     LPVOID pvUserData;
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     *     DWORD dwActiveProtocol;
     *     LPOCNCONNPROCA lpfnConnect;
     *     LPOCNCHKPROC lpfnCheck;
     *     LPOCNDSCPROC lpfnDisconnect;
     *     SCARDHANDLE hCardHandle;
     * } *LPOPENCARDNAMEA
     * }
     */
    public static final AddressLayout LPOPENCARDNAMEA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwStructSize;
     *     HWND hwndOwner;
     *     SCARDCONTEXT hSCardContext;
     *     LPWSTR lpstrGroupNames;
     *     DWORD nMaxGroupNames;
     *     LPWSTR lpstrCardNames;
     *     DWORD nMaxCardNames;
     *     LPCGUID rgguidInterfaces;
     *     DWORD cguidInterfaces;
     *     LPWSTR lpstrRdr;
     *     DWORD nMaxRdr;
     *     LPWSTR lpstrCard;
     *     DWORD nMaxCard;
     *     LPCWSTR lpstrTitle;
     *     DWORD dwFlags;
     *     LPVOID pvUserData;
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     *     DWORD dwActiveProtocol;
     *     LPOCNCONNPROCW lpfnConnect;
     *     LPOCNCHKPROC lpfnCheck;
     *     LPOCNDSCPROC lpfnDisconnect;
     *     SCARDHANDLE hCardHandle;
     * } *POPENCARDNAMEW
     * }
     */
    public static final AddressLayout POPENCARDNAMEW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwStructSize;
     *     HWND hwndOwner;
     *     SCARDCONTEXT hSCardContext;
     *     LPWSTR lpstrGroupNames;
     *     DWORD nMaxGroupNames;
     *     LPWSTR lpstrCardNames;
     *     DWORD nMaxCardNames;
     *     LPCGUID rgguidInterfaces;
     *     DWORD cguidInterfaces;
     *     LPWSTR lpstrRdr;
     *     DWORD nMaxRdr;
     *     LPWSTR lpstrCard;
     *     DWORD nMaxCard;
     *     LPCWSTR lpstrTitle;
     *     DWORD dwFlags;
     *     LPVOID pvUserData;
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     *     DWORD dwActiveProtocol;
     *     LPOCNCONNPROCW lpfnConnect;
     *     LPOCNCHKPROC lpfnCheck;
     *     LPOCNDSCPROC lpfnDisconnect;
     *     SCARDHANDLE hCardHandle;
     * } *LPOPENCARDNAMEW
     * }
     */
    public static final AddressLayout LPOPENCARDNAMEW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef POPENCARDNAMEA POPENCARDNAME
     * }
     */
    public static final AddressLayout POPENCARDNAME = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPOPENCARDNAMEA LPOPENCARDNAME
     * }
     */
    public static final AddressLayout LPOPENCARDNAME = wgl_h.C_POINTER;

    private static class GetOpenCardNameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetOpenCardNameA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG GetOpenCardNameA(LPOPENCARDNAMEA)
     * }
     */
    public static FunctionDescriptor GetOpenCardNameA$descriptor() {
        return GetOpenCardNameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG GetOpenCardNameA(LPOPENCARDNAMEA)
     * }
     */
    public static MethodHandle GetOpenCardNameA$handle() {
        return GetOpenCardNameA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG GetOpenCardNameA(LPOPENCARDNAMEA)
     * }
     */
    public static MemorySegment GetOpenCardNameA$address() {
        return GetOpenCardNameA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG GetOpenCardNameA(LPOPENCARDNAMEA)
     * }
     */
    public static int GetOpenCardNameA(MemorySegment x0) {
        var mh$ = GetOpenCardNameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetOpenCardNameA", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetOpenCardNameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetOpenCardNameW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG GetOpenCardNameW(LPOPENCARDNAMEW)
     * }
     */
    public static FunctionDescriptor GetOpenCardNameW$descriptor() {
        return GetOpenCardNameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG GetOpenCardNameW(LPOPENCARDNAMEW)
     * }
     */
    public static MethodHandle GetOpenCardNameW$handle() {
        return GetOpenCardNameW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG GetOpenCardNameW(LPOPENCARDNAMEW)
     * }
     */
    public static MemorySegment GetOpenCardNameW$address() {
        return GetOpenCardNameW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG GetOpenCardNameW(LPOPENCARDNAMEW)
     * }
     */
    public static int GetOpenCardNameW(MemorySegment x0) {
        var mh$ = GetOpenCardNameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetOpenCardNameW", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardDlgExtendedError {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardDlgExtendedError");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardDlgExtendedError()
     * }
     */
    public static FunctionDescriptor SCardDlgExtendedError$descriptor() {
        return SCardDlgExtendedError.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardDlgExtendedError()
     * }
     */
    public static MethodHandle SCardDlgExtendedError$handle() {
        return SCardDlgExtendedError.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardDlgExtendedError()
     * }
     */
    public static MemorySegment SCardDlgExtendedError$address() {
        return SCardDlgExtendedError.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardDlgExtendedError()
     * }
     */
    public static int SCardDlgExtendedError() {
        var mh$ = SCardDlgExtendedError.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardDlgExtendedError");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardReadCacheA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardReadCacheA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardReadCacheA(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPSTR LookupName, PBYTE Data, DWORD *DataLen)
     * }
     */
    public static FunctionDescriptor SCardReadCacheA$descriptor() {
        return SCardReadCacheA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardReadCacheA(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPSTR LookupName, PBYTE Data, DWORD *DataLen)
     * }
     */
    public static MethodHandle SCardReadCacheA$handle() {
        return SCardReadCacheA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardReadCacheA(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPSTR LookupName, PBYTE Data, DWORD *DataLen)
     * }
     */
    public static MemorySegment SCardReadCacheA$address() {
        return SCardReadCacheA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardReadCacheA(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPSTR LookupName, PBYTE Data, DWORD *DataLen)
     * }
     */
    public static int SCardReadCacheA(long hContext, MemorySegment CardIdentifier, int FreshnessCounter, MemorySegment LookupName, MemorySegment Data, MemorySegment DataLen) {
        var mh$ = SCardReadCacheA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardReadCacheA", hContext, CardIdentifier, FreshnessCounter, LookupName, Data, DataLen);
            }
            return (int)mh$.invokeExact(hContext, CardIdentifier, FreshnessCounter, LookupName, Data, DataLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardReadCacheW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardReadCacheW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardReadCacheW(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPWSTR LookupName, PBYTE Data, DWORD *DataLen)
     * }
     */
    public static FunctionDescriptor SCardReadCacheW$descriptor() {
        return SCardReadCacheW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardReadCacheW(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPWSTR LookupName, PBYTE Data, DWORD *DataLen)
     * }
     */
    public static MethodHandle SCardReadCacheW$handle() {
        return SCardReadCacheW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardReadCacheW(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPWSTR LookupName, PBYTE Data, DWORD *DataLen)
     * }
     */
    public static MemorySegment SCardReadCacheW$address() {
        return SCardReadCacheW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardReadCacheW(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPWSTR LookupName, PBYTE Data, DWORD *DataLen)
     * }
     */
    public static int SCardReadCacheW(long hContext, MemorySegment CardIdentifier, int FreshnessCounter, MemorySegment LookupName, MemorySegment Data, MemorySegment DataLen) {
        var mh$ = SCardReadCacheW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardReadCacheW", hContext, CardIdentifier, FreshnessCounter, LookupName, Data, DataLen);
            }
            return (int)mh$.invokeExact(hContext, CardIdentifier, FreshnessCounter, LookupName, Data, DataLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardWriteCacheA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardWriteCacheA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardWriteCacheA(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPSTR LookupName, PBYTE Data, DWORD DataLen)
     * }
     */
    public static FunctionDescriptor SCardWriteCacheA$descriptor() {
        return SCardWriteCacheA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardWriteCacheA(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPSTR LookupName, PBYTE Data, DWORD DataLen)
     * }
     */
    public static MethodHandle SCardWriteCacheA$handle() {
        return SCardWriteCacheA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardWriteCacheA(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPSTR LookupName, PBYTE Data, DWORD DataLen)
     * }
     */
    public static MemorySegment SCardWriteCacheA$address() {
        return SCardWriteCacheA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardWriteCacheA(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPSTR LookupName, PBYTE Data, DWORD DataLen)
     * }
     */
    public static int SCardWriteCacheA(long hContext, MemorySegment CardIdentifier, int FreshnessCounter, MemorySegment LookupName, MemorySegment Data, int DataLen) {
        var mh$ = SCardWriteCacheA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardWriteCacheA", hContext, CardIdentifier, FreshnessCounter, LookupName, Data, DataLen);
            }
            return (int)mh$.invokeExact(hContext, CardIdentifier, FreshnessCounter, LookupName, Data, DataLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardWriteCacheW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardWriteCacheW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardWriteCacheW(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPWSTR LookupName, PBYTE Data, DWORD DataLen)
     * }
     */
    public static FunctionDescriptor SCardWriteCacheW$descriptor() {
        return SCardWriteCacheW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardWriteCacheW(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPWSTR LookupName, PBYTE Data, DWORD DataLen)
     * }
     */
    public static MethodHandle SCardWriteCacheW$handle() {
        return SCardWriteCacheW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardWriteCacheW(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPWSTR LookupName, PBYTE Data, DWORD DataLen)
     * }
     */
    public static MemorySegment SCardWriteCacheW$address() {
        return SCardWriteCacheW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardWriteCacheW(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPWSTR LookupName, PBYTE Data, DWORD DataLen)
     * }
     */
    public static int SCardWriteCacheW(long hContext, MemorySegment CardIdentifier, int FreshnessCounter, MemorySegment LookupName, MemorySegment Data, int DataLen) {
        var mh$ = SCardWriteCacheW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardWriteCacheW", hContext, CardIdentifier, FreshnessCounter, LookupName, Data, DataLen);
            }
            return (int)mh$.invokeExact(hContext, CardIdentifier, FreshnessCounter, LookupName, Data, DataLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetReaderIconA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardGetReaderIconA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetReaderIconA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPBYTE pbIcon, LPDWORD pcbIcon)
     * }
     */
    public static FunctionDescriptor SCardGetReaderIconA$descriptor() {
        return SCardGetReaderIconA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetReaderIconA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPBYTE pbIcon, LPDWORD pcbIcon)
     * }
     */
    public static MethodHandle SCardGetReaderIconA$handle() {
        return SCardGetReaderIconA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardGetReaderIconA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPBYTE pbIcon, LPDWORD pcbIcon)
     * }
     */
    public static MemorySegment SCardGetReaderIconA$address() {
        return SCardGetReaderIconA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardGetReaderIconA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPBYTE pbIcon, LPDWORD pcbIcon)
     * }
     */
    public static int SCardGetReaderIconA(long hContext, MemorySegment szReaderName, MemorySegment pbIcon, MemorySegment pcbIcon) {
        var mh$ = SCardGetReaderIconA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetReaderIconA", hContext, szReaderName, pbIcon, pcbIcon);
            }
            return (int)mh$.invokeExact(hContext, szReaderName, pbIcon, pcbIcon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetReaderIconW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardGetReaderIconW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetReaderIconW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPBYTE pbIcon, LPDWORD pcbIcon)
     * }
     */
    public static FunctionDescriptor SCardGetReaderIconW$descriptor() {
        return SCardGetReaderIconW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetReaderIconW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPBYTE pbIcon, LPDWORD pcbIcon)
     * }
     */
    public static MethodHandle SCardGetReaderIconW$handle() {
        return SCardGetReaderIconW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardGetReaderIconW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPBYTE pbIcon, LPDWORD pcbIcon)
     * }
     */
    public static MemorySegment SCardGetReaderIconW$address() {
        return SCardGetReaderIconW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardGetReaderIconW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPBYTE pbIcon, LPDWORD pcbIcon)
     * }
     */
    public static int SCardGetReaderIconW(long hContext, MemorySegment szReaderName, MemorySegment pbIcon, MemorySegment pcbIcon) {
        var mh$ = SCardGetReaderIconW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetReaderIconW", hContext, szReaderName, pbIcon, pcbIcon);
            }
            return (int)mh$.invokeExact(hContext, szReaderName, pbIcon, pcbIcon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetDeviceTypeIdA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardGetDeviceTypeIdA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetDeviceTypeIdA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPDWORD pdwDeviceTypeId)
     * }
     */
    public static FunctionDescriptor SCardGetDeviceTypeIdA$descriptor() {
        return SCardGetDeviceTypeIdA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetDeviceTypeIdA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPDWORD pdwDeviceTypeId)
     * }
     */
    public static MethodHandle SCardGetDeviceTypeIdA$handle() {
        return SCardGetDeviceTypeIdA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardGetDeviceTypeIdA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPDWORD pdwDeviceTypeId)
     * }
     */
    public static MemorySegment SCardGetDeviceTypeIdA$address() {
        return SCardGetDeviceTypeIdA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardGetDeviceTypeIdA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPDWORD pdwDeviceTypeId)
     * }
     */
    public static int SCardGetDeviceTypeIdA(long hContext, MemorySegment szReaderName, MemorySegment pdwDeviceTypeId) {
        var mh$ = SCardGetDeviceTypeIdA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetDeviceTypeIdA", hContext, szReaderName, pdwDeviceTypeId);
            }
            return (int)mh$.invokeExact(hContext, szReaderName, pdwDeviceTypeId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetDeviceTypeIdW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardGetDeviceTypeIdW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetDeviceTypeIdW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPDWORD pdwDeviceTypeId)
     * }
     */
    public static FunctionDescriptor SCardGetDeviceTypeIdW$descriptor() {
        return SCardGetDeviceTypeIdW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetDeviceTypeIdW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPDWORD pdwDeviceTypeId)
     * }
     */
    public static MethodHandle SCardGetDeviceTypeIdW$handle() {
        return SCardGetDeviceTypeIdW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardGetDeviceTypeIdW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPDWORD pdwDeviceTypeId)
     * }
     */
    public static MemorySegment SCardGetDeviceTypeIdW$address() {
        return SCardGetDeviceTypeIdW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardGetDeviceTypeIdW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPDWORD pdwDeviceTypeId)
     * }
     */
    public static int SCardGetDeviceTypeIdW(long hContext, MemorySegment szReaderName, MemorySegment pdwDeviceTypeId) {
        var mh$ = SCardGetDeviceTypeIdW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetDeviceTypeIdW", hContext, szReaderName, pdwDeviceTypeId);
            }
            return (int)mh$.invokeExact(hContext, szReaderName, pdwDeviceTypeId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetReaderDeviceInstanceIdA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardGetReaderDeviceInstanceIdA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetReaderDeviceInstanceIdA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPSTR szDeviceInstanceId, LPDWORD pcchDeviceInstanceId)
     * }
     */
    public static FunctionDescriptor SCardGetReaderDeviceInstanceIdA$descriptor() {
        return SCardGetReaderDeviceInstanceIdA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetReaderDeviceInstanceIdA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPSTR szDeviceInstanceId, LPDWORD pcchDeviceInstanceId)
     * }
     */
    public static MethodHandle SCardGetReaderDeviceInstanceIdA$handle() {
        return SCardGetReaderDeviceInstanceIdA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardGetReaderDeviceInstanceIdA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPSTR szDeviceInstanceId, LPDWORD pcchDeviceInstanceId)
     * }
     */
    public static MemorySegment SCardGetReaderDeviceInstanceIdA$address() {
        return SCardGetReaderDeviceInstanceIdA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardGetReaderDeviceInstanceIdA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPSTR szDeviceInstanceId, LPDWORD pcchDeviceInstanceId)
     * }
     */
    public static int SCardGetReaderDeviceInstanceIdA(long hContext, MemorySegment szReaderName, MemorySegment szDeviceInstanceId, MemorySegment pcchDeviceInstanceId) {
        var mh$ = SCardGetReaderDeviceInstanceIdA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetReaderDeviceInstanceIdA", hContext, szReaderName, szDeviceInstanceId, pcchDeviceInstanceId);
            }
            return (int)mh$.invokeExact(hContext, szReaderName, szDeviceInstanceId, pcchDeviceInstanceId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetReaderDeviceInstanceIdW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardGetReaderDeviceInstanceIdW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetReaderDeviceInstanceIdW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPWSTR szDeviceInstanceId, LPDWORD pcchDeviceInstanceId)
     * }
     */
    public static FunctionDescriptor SCardGetReaderDeviceInstanceIdW$descriptor() {
        return SCardGetReaderDeviceInstanceIdW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetReaderDeviceInstanceIdW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPWSTR szDeviceInstanceId, LPDWORD pcchDeviceInstanceId)
     * }
     */
    public static MethodHandle SCardGetReaderDeviceInstanceIdW$handle() {
        return SCardGetReaderDeviceInstanceIdW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardGetReaderDeviceInstanceIdW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPWSTR szDeviceInstanceId, LPDWORD pcchDeviceInstanceId)
     * }
     */
    public static MemorySegment SCardGetReaderDeviceInstanceIdW$address() {
        return SCardGetReaderDeviceInstanceIdW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardGetReaderDeviceInstanceIdW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPWSTR szDeviceInstanceId, LPDWORD pcchDeviceInstanceId)
     * }
     */
    public static int SCardGetReaderDeviceInstanceIdW(long hContext, MemorySegment szReaderName, MemorySegment szDeviceInstanceId, MemorySegment pcchDeviceInstanceId) {
        var mh$ = SCardGetReaderDeviceInstanceIdW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetReaderDeviceInstanceIdW", hContext, szReaderName, szDeviceInstanceId, pcchDeviceInstanceId);
            }
            return (int)mh$.invokeExact(hContext, szReaderName, szDeviceInstanceId, pcchDeviceInstanceId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardListReadersWithDeviceInstanceIdA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardListReadersWithDeviceInstanceIdA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardListReadersWithDeviceInstanceIdA(SCARDCONTEXT hContext, LPCSTR szDeviceInstanceId, LPSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static FunctionDescriptor SCardListReadersWithDeviceInstanceIdA$descriptor() {
        return SCardListReadersWithDeviceInstanceIdA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardListReadersWithDeviceInstanceIdA(SCARDCONTEXT hContext, LPCSTR szDeviceInstanceId, LPSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static MethodHandle SCardListReadersWithDeviceInstanceIdA$handle() {
        return SCardListReadersWithDeviceInstanceIdA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardListReadersWithDeviceInstanceIdA(SCARDCONTEXT hContext, LPCSTR szDeviceInstanceId, LPSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static MemorySegment SCardListReadersWithDeviceInstanceIdA$address() {
        return SCardListReadersWithDeviceInstanceIdA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardListReadersWithDeviceInstanceIdA(SCARDCONTEXT hContext, LPCSTR szDeviceInstanceId, LPSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static int SCardListReadersWithDeviceInstanceIdA(long hContext, MemorySegment szDeviceInstanceId, MemorySegment mszReaders, MemorySegment pcchReaders) {
        var mh$ = SCardListReadersWithDeviceInstanceIdA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardListReadersWithDeviceInstanceIdA", hContext, szDeviceInstanceId, mszReaders, pcchReaders);
            }
            return (int)mh$.invokeExact(hContext, szDeviceInstanceId, mszReaders, pcchReaders);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardListReadersWithDeviceInstanceIdW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardListReadersWithDeviceInstanceIdW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardListReadersWithDeviceInstanceIdW(SCARDCONTEXT hContext, LPCWSTR szDeviceInstanceId, LPWSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static FunctionDescriptor SCardListReadersWithDeviceInstanceIdW$descriptor() {
        return SCardListReadersWithDeviceInstanceIdW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardListReadersWithDeviceInstanceIdW(SCARDCONTEXT hContext, LPCWSTR szDeviceInstanceId, LPWSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static MethodHandle SCardListReadersWithDeviceInstanceIdW$handle() {
        return SCardListReadersWithDeviceInstanceIdW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardListReadersWithDeviceInstanceIdW(SCARDCONTEXT hContext, LPCWSTR szDeviceInstanceId, LPWSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static MemorySegment SCardListReadersWithDeviceInstanceIdW$address() {
        return SCardListReadersWithDeviceInstanceIdW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardListReadersWithDeviceInstanceIdW(SCARDCONTEXT hContext, LPCWSTR szDeviceInstanceId, LPWSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static int SCardListReadersWithDeviceInstanceIdW(long hContext, MemorySegment szDeviceInstanceId, MemorySegment mszReaders, MemorySegment pcchReaders) {
        var mh$ = SCardListReadersWithDeviceInstanceIdW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardListReadersWithDeviceInstanceIdW", hContext, szDeviceInstanceId, mszReaders, pcchReaders);
            }
            return (int)mh$.invokeExact(hContext, szDeviceInstanceId, mszReaders, pcchReaders);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardAudit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SCardAudit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardAudit(SCARDCONTEXT hContext, DWORD dwEvent)
     * }
     */
    public static FunctionDescriptor SCardAudit$descriptor() {
        return SCardAudit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardAudit(SCARDCONTEXT hContext, DWORD dwEvent)
     * }
     */
    public static MethodHandle SCardAudit$handle() {
        return SCardAudit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardAudit(SCARDCONTEXT hContext, DWORD dwEvent)
     * }
     */
    public static MemorySegment SCardAudit$address() {
        return SCardAudit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardAudit(SCARDCONTEXT hContext, DWORD dwEvent)
     * }
     */
    public static int SCardAudit(long hContext, int dwEvent) {
        var mh$ = SCardAudit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardAudit", hContext, dwEvent);
            }
            return (int)mh$.invokeExact(hContext, dwEvent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _PSP *HPROPSHEETPAGE
     * }
     */
    public static final AddressLayout HPROPSHEETPAGE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPCDLGTEMPLATE PROPSHEETPAGE_RESOURCE
     * }
     */
    public static final AddressLayout PROPSHEETPAGE_RESOURCE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROPSHEETPAGEA_V1 {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     HINSTANCE hInstance;
     *     union {
     *         LPCSTR pszTemplate;
     *         PROPSHEETPAGE_RESOURCE pResource;
     *     };
     *     union {
     *         HICON hIcon;
     *         LPCSTR pszIcon;
     *     };
     *     LPCSTR pszTitle;
     *     DLGPROC pfnDlgProc;
     *     LPARAM lParam;
     *     LPFNPSPCALLBACKA pfnCallback;
     *     UINT *pcRefParent;
     * } *LPPROPSHEETPAGEA_V1
     * }
     */
    public static final AddressLayout LPPROPSHEETPAGEA_V1 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PROPSHEETPAGEA_V1 *LPCPROPSHEETPAGEA_V1
     * }
     */
    public static final AddressLayout LPCPROPSHEETPAGEA_V1 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROPSHEETPAGEA_V2 {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     HINSTANCE hInstance;
     *     union {
     *         LPCSTR pszTemplate;
     *         PROPSHEETPAGE_RESOURCE pResource;
     *     };
     *     union {
     *         HICON hIcon;
     *         LPCSTR pszIcon;
     *     };
     *     LPCSTR pszTitle;
     *     DLGPROC pfnDlgProc;
     *     LPARAM lParam;
     *     LPFNPSPCALLBACKA pfnCallback;
     *     UINT *pcRefParent;
     *     LPCSTR pszHeaderTitle;
     *     LPCSTR pszHeaderSubTitle;
     * } *LPPROPSHEETPAGEA_V2
     * }
     */
    public static final AddressLayout LPPROPSHEETPAGEA_V2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PROPSHEETPAGEA_V2 *LPCPROPSHEETPAGEA_V2
     * }
     */
    public static final AddressLayout LPCPROPSHEETPAGEA_V2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROPSHEETPAGEA_V3 {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     HINSTANCE hInstance;
     *     union {
     *         LPCSTR pszTemplate;
     *         PROPSHEETPAGE_RESOURCE pResource;
     *     };
     *     union {
     *         HICON hIcon;
     *         LPCSTR pszIcon;
     *     };
     *     LPCSTR pszTitle;
     *     DLGPROC pfnDlgProc;
     *     LPARAM lParam;
     *     LPFNPSPCALLBACKA pfnCallback;
     *     UINT *pcRefParent;
     *     LPCSTR pszHeaderTitle;
     *     LPCSTR pszHeaderSubTitle;
     *     HANDLE hActCtx;
     * } *LPPROPSHEETPAGEA_V3
     * }
     */
    public static final AddressLayout LPPROPSHEETPAGEA_V3 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PROPSHEETPAGEA_V3 *LPCPROPSHEETPAGEA_V3
     * }
     */
    public static final AddressLayout LPCPROPSHEETPAGEA_V3 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROPSHEETPAGEA {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     HINSTANCE hInstance;
     *     union {
     *         LPCSTR pszTemplate;
     *         PROPSHEETPAGE_RESOURCE pResource;
     *     };
     *     union {
     *         HICON hIcon;
     *         LPCSTR pszIcon;
     *     };
     *     LPCSTR pszTitle;
     *     DLGPROC pfnDlgProc;
     *     LPARAM lParam;
     *     LPFNPSPCALLBACKA pfnCallback;
     *     UINT *pcRefParent;
     *     LPCSTR pszHeaderTitle;
     *     LPCSTR pszHeaderSubTitle;
     *     HANDLE hActCtx;
     *     union {
     *         HBITMAP hbmHeader;
     *         LPCSTR pszbmHeader;
     *     };
     * } *LPPROPSHEETPAGEA_V4
     * }
     */
    public static final AddressLayout LPPROPSHEETPAGEA_V4 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PROPSHEETPAGEA_V4 *LPCPROPSHEETPAGEA_V4
     * }
     */
    public static final AddressLayout LPCPROPSHEETPAGEA_V4 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROPSHEETPAGEW_V1 {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     HINSTANCE hInstance;
     *     union {
     *         LPCWSTR pszTemplate;
     *         PROPSHEETPAGE_RESOURCE pResource;
     *     };
     *     union {
     *         HICON hIcon;
     *         LPCWSTR pszIcon;
     *     };
     *     LPCWSTR pszTitle;
     *     DLGPROC pfnDlgProc;
     *     LPARAM lParam;
     *     LPFNPSPCALLBACKW pfnCallback;
     *     UINT *pcRefParent;
     * } *LPPROPSHEETPAGEW_V1
     * }
     */
    public static final AddressLayout LPPROPSHEETPAGEW_V1 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PROPSHEETPAGEW_V1 *LPCPROPSHEETPAGEW_V1
     * }
     */
    public static final AddressLayout LPCPROPSHEETPAGEW_V1 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROPSHEETPAGEW_V2 {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     HINSTANCE hInstance;
     *     union {
     *         LPCWSTR pszTemplate;
     *         PROPSHEETPAGE_RESOURCE pResource;
     *     };
     *     union {
     *         HICON hIcon;
     *         LPCWSTR pszIcon;
     *     };
     *     LPCWSTR pszTitle;
     *     DLGPROC pfnDlgProc;
     *     LPARAM lParam;
     *     LPFNPSPCALLBACKW pfnCallback;
     *     UINT *pcRefParent;
     *     LPCWSTR pszHeaderTitle;
     *     LPCWSTR pszHeaderSubTitle;
     * } *LPPROPSHEETPAGEW_V2
     * }
     */
    public static final AddressLayout LPPROPSHEETPAGEW_V2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PROPSHEETPAGEW_V2 *LPCPROPSHEETPAGEW_V2
     * }
     */
    public static final AddressLayout LPCPROPSHEETPAGEW_V2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROPSHEETPAGEW_V3 {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     HINSTANCE hInstance;
     *     union {
     *         LPCWSTR pszTemplate;
     *         PROPSHEETPAGE_RESOURCE pResource;
     *     };
     *     union {
     *         HICON hIcon;
     *         LPCWSTR pszIcon;
     *     };
     *     LPCWSTR pszTitle;
     *     DLGPROC pfnDlgProc;
     *     LPARAM lParam;
     *     LPFNPSPCALLBACKW pfnCallback;
     *     UINT *pcRefParent;
     *     LPCWSTR pszHeaderTitle;
     *     LPCWSTR pszHeaderSubTitle;
     *     HANDLE hActCtx;
     * } *LPPROPSHEETPAGEW_V3
     * }
     */
    public static final AddressLayout LPPROPSHEETPAGEW_V3 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PROPSHEETPAGEW_V3 *LPCPROPSHEETPAGEW_V3
     * }
     */
    public static final AddressLayout LPCPROPSHEETPAGEW_V3 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROPSHEETPAGEW {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     HINSTANCE hInstance;
     *     union {
     *         LPCWSTR pszTemplate;
     *         PROPSHEETPAGE_RESOURCE pResource;
     *     };
     *     union {
     *         HICON hIcon;
     *         LPCWSTR pszIcon;
     *     };
     *     LPCWSTR pszTitle;
     *     DLGPROC pfnDlgProc;
     *     LPARAM lParam;
     *     LPFNPSPCALLBACKW pfnCallback;
     *     UINT *pcRefParent;
     *     LPCWSTR pszHeaderTitle;
     *     LPCWSTR pszHeaderSubTitle;
     *     HANDLE hActCtx;
     *     union {
     *         HBITMAP hbmHeader;
     *         LPCWSTR pszbmHeader;
     *     };
     * } *LPPROPSHEETPAGEW_V4
     * }
     */
    public static final AddressLayout LPPROPSHEETPAGEW_V4 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PROPSHEETPAGEW_V4 *LPCPROPSHEETPAGEW_V4
     * }
     */
    public static final AddressLayout LPCPROPSHEETPAGEW_V4 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPROPSHEETPAGEA_V4 LPPROPSHEETPAGEA_LATEST
     * }
     */
    public static final AddressLayout LPPROPSHEETPAGEA_LATEST = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPROPSHEETPAGEW_V4 LPPROPSHEETPAGEW_LATEST
     * }
     */
    public static final AddressLayout LPPROPSHEETPAGEW_LATEST = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPCPROPSHEETPAGEA_V4 LPCPROPSHEETPAGEA_LATEST
     * }
     */
    public static final AddressLayout LPCPROPSHEETPAGEA_LATEST = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPCPROPSHEETPAGEW_V4 LPCPROPSHEETPAGEW_LATEST
     * }
     */
    public static final AddressLayout LPCPROPSHEETPAGEW_LATEST = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPROPSHEETPAGEA_V4 LPPROPSHEETPAGEA
     * }
     */
    public static final AddressLayout LPPROPSHEETPAGEA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPROPSHEETPAGEW_V4 LPPROPSHEETPAGEW
     * }
     */
    public static final AddressLayout LPPROPSHEETPAGEW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPCPROPSHEETPAGEA_V4 LPCPROPSHEETPAGEA
     * }
     */
    public static final AddressLayout LPCPROPSHEETPAGEA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPCPROPSHEETPAGEW_V4 LPCPROPSHEETPAGEW
     * }
     */
    public static final AddressLayout LPCPROPSHEETPAGEW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROPSHEETHEADERA_V1 {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     HWND hwndParent;
     *     HINSTANCE hInstance;
     *     union {
     *         HICON hIcon;
     *         LPCSTR pszIcon;
     *     };
     *     LPCSTR pszCaption;
     *     UINT nPages;
     *     union {
     *         UINT nStartPage;
     *         LPCSTR pStartPage;
     *     };
     *     union {
     *         LPCPROPSHEETPAGEA ppsp;
     *         HPROPSHEETPAGE *phpage;
     *     };
     *     PFNPROPSHEETCALLBACK pfnCallback;
     * } *LPPROPSHEETHEADERA_V1
     * }
     */
    public static final AddressLayout LPPROPSHEETHEADERA_V1 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PROPSHEETHEADERA_V1 *LPCPROPSHEETHEADERA_V1
     * }
     */
    public static final AddressLayout LPCPROPSHEETHEADERA_V1 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROPSHEETHEADERA_V2 {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     HWND hwndParent;
     *     HINSTANCE hInstance;
     *     union {
     *         HICON hIcon;
     *         LPCSTR pszIcon;
     *     };
     *     LPCSTR pszCaption;
     *     UINT nPages;
     *     union {
     *         UINT nStartPage;
     *         LPCSTR pStartPage;
     *     };
     *     union {
     *         LPCPROPSHEETPAGEA ppsp;
     *         HPROPSHEETPAGE *phpage;
     *     };
     *     PFNPROPSHEETCALLBACK pfnCallback;
     *     union {
     *         HBITMAP hbmWatermark;
     *         LPCSTR pszbmWatermark;
     *     };
     *     HPALETTE hplWatermark;
     *     union {
     *         HBITMAP hbmHeader;
     *         LPCSTR pszbmHeader;
     *     };
     * } *LPPROPSHEETHEADERA_V2
     * }
     */
    public static final AddressLayout LPPROPSHEETHEADERA_V2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PROPSHEETHEADERA_V2 *LPCPROPSHEETHEADERA_V2
     * }
     */
    public static final AddressLayout LPCPROPSHEETHEADERA_V2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROPSHEETHEADERW_V1 {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     HWND hwndParent;
     *     HINSTANCE hInstance;
     *     union {
     *         HICON hIcon;
     *         LPCWSTR pszIcon;
     *     };
     *     LPCWSTR pszCaption;
     *     UINT nPages;
     *     union {
     *         UINT nStartPage;
     *         LPCWSTR pStartPage;
     *     };
     *     union {
     *         LPCPROPSHEETPAGEW ppsp;
     *         HPROPSHEETPAGE *phpage;
     *     };
     *     PFNPROPSHEETCALLBACK pfnCallback;
     * } *LPPROPSHEETHEADERW_V1
     * }
     */
    public static final AddressLayout LPPROPSHEETHEADERW_V1 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PROPSHEETHEADERW_V1 *LPCPROPSHEETHEADERW_V1
     * }
     */
    public static final AddressLayout LPCPROPSHEETHEADERW_V1 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROPSHEETHEADERW_V2 {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     HWND hwndParent;
     *     HINSTANCE hInstance;
     *     union {
     *         HICON hIcon;
     *         LPCWSTR pszIcon;
     *     };
     *     LPCWSTR pszCaption;
     *     UINT nPages;
     *     union {
     *         UINT nStartPage;
     *         LPCWSTR pStartPage;
     *     };
     *     union {
     *         LPCPROPSHEETPAGEW ppsp;
     *         HPROPSHEETPAGE *phpage;
     *     };
     *     PFNPROPSHEETCALLBACK pfnCallback;
     *     union {
     *         HBITMAP hbmWatermark;
     *         LPCWSTR pszbmWatermark;
     *     };
     *     HPALETTE hplWatermark;
     *     union {
     *         HBITMAP hbmHeader;
     *         LPCWSTR pszbmHeader;
     *     };
     * } *LPPROPSHEETHEADERW_V2
     * }
     */
    public static final AddressLayout LPPROPSHEETHEADERW_V2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PROPSHEETHEADERW_V2 *LPCPROPSHEETHEADERW_V2
     * }
     */
    public static final AddressLayout LPCPROPSHEETHEADERW_V2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPROPSHEETHEADERA_V2 LPPROPSHEETHEADERA
     * }
     */
    public static final AddressLayout LPPROPSHEETHEADERA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPROPSHEETHEADERW_V2 LPPROPSHEETHEADERW
     * }
     */
    public static final AddressLayout LPPROPSHEETHEADERW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPCPROPSHEETHEADERA_V2 LPCPROPSHEETHEADERA
     * }
     */
    public static final AddressLayout LPCPROPSHEETHEADERA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPCPROPSHEETHEADERW_V2 LPCPROPSHEETHEADERW
     * }
     */
    public static final AddressLayout LPCPROPSHEETHEADERW = wgl_h.C_POINTER;

    private static class CreatePropertySheetPageA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CreatePropertySheetPageA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HPROPSHEETPAGE CreatePropertySheetPageA(LPCPROPSHEETPAGEA constPropSheetPagePointer)
     * }
     */
    public static FunctionDescriptor CreatePropertySheetPageA$descriptor() {
        return CreatePropertySheetPageA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HPROPSHEETPAGE CreatePropertySheetPageA(LPCPROPSHEETPAGEA constPropSheetPagePointer)
     * }
     */
    public static MethodHandle CreatePropertySheetPageA$handle() {
        return CreatePropertySheetPageA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HPROPSHEETPAGE CreatePropertySheetPageA(LPCPROPSHEETPAGEA constPropSheetPagePointer)
     * }
     */
    public static MemorySegment CreatePropertySheetPageA$address() {
        return CreatePropertySheetPageA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HPROPSHEETPAGE CreatePropertySheetPageA(LPCPROPSHEETPAGEA constPropSheetPagePointer)
     * }
     */
    public static MemorySegment CreatePropertySheetPageA(MemorySegment constPropSheetPagePointer) {
        var mh$ = CreatePropertySheetPageA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreatePropertySheetPageA", constPropSheetPagePointer);
            }
            return (MemorySegment)mh$.invokeExact(constPropSheetPagePointer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreatePropertySheetPageW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CreatePropertySheetPageW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HPROPSHEETPAGE CreatePropertySheetPageW(LPCPROPSHEETPAGEW constPropSheetPagePointer)
     * }
     */
    public static FunctionDescriptor CreatePropertySheetPageW$descriptor() {
        return CreatePropertySheetPageW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HPROPSHEETPAGE CreatePropertySheetPageW(LPCPROPSHEETPAGEW constPropSheetPagePointer)
     * }
     */
    public static MethodHandle CreatePropertySheetPageW$handle() {
        return CreatePropertySheetPageW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HPROPSHEETPAGE CreatePropertySheetPageW(LPCPROPSHEETPAGEW constPropSheetPagePointer)
     * }
     */
    public static MemorySegment CreatePropertySheetPageW$address() {
        return CreatePropertySheetPageW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HPROPSHEETPAGE CreatePropertySheetPageW(LPCPROPSHEETPAGEW constPropSheetPagePointer)
     * }
     */
    public static MemorySegment CreatePropertySheetPageW(MemorySegment constPropSheetPagePointer) {
        var mh$ = CreatePropertySheetPageW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreatePropertySheetPageW", constPropSheetPagePointer);
            }
            return (MemorySegment)mh$.invokeExact(constPropSheetPagePointer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DestroyPropertySheetPage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DestroyPropertySheetPage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DestroyPropertySheetPage(HPROPSHEETPAGE)
     * }
     */
    public static FunctionDescriptor DestroyPropertySheetPage$descriptor() {
        return DestroyPropertySheetPage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DestroyPropertySheetPage(HPROPSHEETPAGE)
     * }
     */
    public static MethodHandle DestroyPropertySheetPage$handle() {
        return DestroyPropertySheetPage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DestroyPropertySheetPage(HPROPSHEETPAGE)
     * }
     */
    public static MemorySegment DestroyPropertySheetPage$address() {
        return DestroyPropertySheetPage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DestroyPropertySheetPage(HPROPSHEETPAGE)
     * }
     */
    public static int DestroyPropertySheetPage(MemorySegment x0) {
        var mh$ = DestroyPropertySheetPage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DestroyPropertySheetPage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PropertySheetA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("PropertySheetA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * INT_PTR PropertySheetA(LPCPROPSHEETHEADERA)
     * }
     */
    public static FunctionDescriptor PropertySheetA$descriptor() {
        return PropertySheetA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * INT_PTR PropertySheetA(LPCPROPSHEETHEADERA)
     * }
     */
    public static MethodHandle PropertySheetA$handle() {
        return PropertySheetA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * INT_PTR PropertySheetA(LPCPROPSHEETHEADERA)
     * }
     */
    public static MemorySegment PropertySheetA$address() {
        return PropertySheetA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * INT_PTR PropertySheetA(LPCPROPSHEETHEADERA)
     * }
     */
    public static long PropertySheetA(MemorySegment x0) {
        var mh$ = PropertySheetA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PropertySheetA", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PropertySheetW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("PropertySheetW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * INT_PTR PropertySheetW(LPCPROPSHEETHEADERW)
     * }
     */
    public static FunctionDescriptor PropertySheetW$descriptor() {
        return PropertySheetW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * INT_PTR PropertySheetW(LPCPROPSHEETHEADERW)
     * }
     */
    public static MethodHandle PropertySheetW$handle() {
        return PropertySheetW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * INT_PTR PropertySheetW(LPCPROPSHEETHEADERW)
     * }
     */
    public static MemorySegment PropertySheetW$address() {
        return PropertySheetW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * INT_PTR PropertySheetW(LPCPROPSHEETHEADERW)
     * }
     */
    public static long PropertySheetW(MemorySegment x0) {
        var mh$ = PropertySheetW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PropertySheetW", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _PSHNOTIFY {
     *     NMHDR hdr;
     *     LPARAM lParam;
     * } *LPPSHNOTIFY
     * }
     */
    public static final AddressLayout LPPSHNOTIFY = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_1A {
     *     DWORD Flags;
     *     LPSTR pDescription;
     *     LPSTR pName;
     *     LPSTR pComment;
     * } *PPRINTER_INFO_1A
     * }
     */
    public static final AddressLayout PPRINTER_INFO_1A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_1A {
     *     DWORD Flags;
     *     LPSTR pDescription;
     *     LPSTR pName;
     *     LPSTR pComment;
     * } *LPPRINTER_INFO_1A
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_1A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_1W {
     *     DWORD Flags;
     *     LPWSTR pDescription;
     *     LPWSTR pName;
     *     LPWSTR pComment;
     * } *PPRINTER_INFO_1W
     * }
     */
    public static final AddressLayout PPRINTER_INFO_1W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_1W {
     *     DWORD Flags;
     *     LPWSTR pDescription;
     *     LPWSTR pName;
     *     LPWSTR pComment;
     * } *LPPRINTER_INFO_1W
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_1W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPRINTER_INFO_1A PPRINTER_INFO_1
     * }
     */
    public static final AddressLayout PPRINTER_INFO_1 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPRINTER_INFO_1A LPPRINTER_INFO_1
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_1 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_2A {
     *     LPSTR pServerName;
     *     LPSTR pPrinterName;
     *     LPSTR pShareName;
     *     LPSTR pPortName;
     *     LPSTR pDriverName;
     *     LPSTR pComment;
     *     LPSTR pLocation;
     *     LPDEVMODEA pDevMode;
     *     LPSTR pSepFile;
     *     LPSTR pPrintProcessor;
     *     LPSTR pDatatype;
     *     LPSTR pParameters;
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     *     DWORD Attributes;
     *     DWORD Priority;
     *     DWORD DefaultPriority;
     *     DWORD StartTime;
     *     DWORD UntilTime;
     *     DWORD Status;
     *     DWORD cJobs;
     *     DWORD AveragePPM;
     * } *PPRINTER_INFO_2A
     * }
     */
    public static final AddressLayout PPRINTER_INFO_2A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_2A {
     *     LPSTR pServerName;
     *     LPSTR pPrinterName;
     *     LPSTR pShareName;
     *     LPSTR pPortName;
     *     LPSTR pDriverName;
     *     LPSTR pComment;
     *     LPSTR pLocation;
     *     LPDEVMODEA pDevMode;
     *     LPSTR pSepFile;
     *     LPSTR pPrintProcessor;
     *     LPSTR pDatatype;
     *     LPSTR pParameters;
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     *     DWORD Attributes;
     *     DWORD Priority;
     *     DWORD DefaultPriority;
     *     DWORD StartTime;
     *     DWORD UntilTime;
     *     DWORD Status;
     *     DWORD cJobs;
     *     DWORD AveragePPM;
     * } *LPPRINTER_INFO_2A
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_2A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_2W {
     *     LPWSTR pServerName;
     *     LPWSTR pPrinterName;
     *     LPWSTR pShareName;
     *     LPWSTR pPortName;
     *     LPWSTR pDriverName;
     *     LPWSTR pComment;
     *     LPWSTR pLocation;
     *     LPDEVMODEW pDevMode;
     *     LPWSTR pSepFile;
     *     LPWSTR pPrintProcessor;
     *     LPWSTR pDatatype;
     *     LPWSTR pParameters;
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     *     DWORD Attributes;
     *     DWORD Priority;
     *     DWORD DefaultPriority;
     *     DWORD StartTime;
     *     DWORD UntilTime;
     *     DWORD Status;
     *     DWORD cJobs;
     *     DWORD AveragePPM;
     * } *PPRINTER_INFO_2W
     * }
     */
    public static final AddressLayout PPRINTER_INFO_2W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_2W {
     *     LPWSTR pServerName;
     *     LPWSTR pPrinterName;
     *     LPWSTR pShareName;
     *     LPWSTR pPortName;
     *     LPWSTR pDriverName;
     *     LPWSTR pComment;
     *     LPWSTR pLocation;
     *     LPDEVMODEW pDevMode;
     *     LPWSTR pSepFile;
     *     LPWSTR pPrintProcessor;
     *     LPWSTR pDatatype;
     *     LPWSTR pParameters;
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     *     DWORD Attributes;
     *     DWORD Priority;
     *     DWORD DefaultPriority;
     *     DWORD StartTime;
     *     DWORD UntilTime;
     *     DWORD Status;
     *     DWORD cJobs;
     *     DWORD AveragePPM;
     * } *LPPRINTER_INFO_2W
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_2W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPRINTER_INFO_2A PPRINTER_INFO_2
     * }
     */
    public static final AddressLayout PPRINTER_INFO_2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPRINTER_INFO_2A LPPRINTER_INFO_2
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_3 {
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     * } *PPRINTER_INFO_3
     * }
     */
    public static final AddressLayout PPRINTER_INFO_3 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_3 {
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     * } *LPPRINTER_INFO_3
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_3 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_4A {
     *     LPSTR pPrinterName;
     *     LPSTR pServerName;
     *     DWORD Attributes;
     * } *PPRINTER_INFO_4A
     * }
     */
    public static final AddressLayout PPRINTER_INFO_4A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_4A {
     *     LPSTR pPrinterName;
     *     LPSTR pServerName;
     *     DWORD Attributes;
     * } *LPPRINTER_INFO_4A
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_4A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_4W {
     *     LPWSTR pPrinterName;
     *     LPWSTR pServerName;
     *     DWORD Attributes;
     * } *PPRINTER_INFO_4W
     * }
     */
    public static final AddressLayout PPRINTER_INFO_4W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_4W {
     *     LPWSTR pPrinterName;
     *     LPWSTR pServerName;
     *     DWORD Attributes;
     * } *LPPRINTER_INFO_4W
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_4W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPRINTER_INFO_4A PPRINTER_INFO_4
     * }
     */
    public static final AddressLayout PPRINTER_INFO_4 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPRINTER_INFO_4A LPPRINTER_INFO_4
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_4 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_5A {
     *     LPSTR pPrinterName;
     *     LPSTR pPortName;
     *     DWORD Attributes;
     *     DWORD DeviceNotSelectedTimeout;
     *     DWORD TransmissionRetryTimeout;
     * } *PPRINTER_INFO_5A
     * }
     */
    public static final AddressLayout PPRINTER_INFO_5A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_5A {
     *     LPSTR pPrinterName;
     *     LPSTR pPortName;
     *     DWORD Attributes;
     *     DWORD DeviceNotSelectedTimeout;
     *     DWORD TransmissionRetryTimeout;
     * } *LPPRINTER_INFO_5A
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_5A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_5W {
     *     LPWSTR pPrinterName;
     *     LPWSTR pPortName;
     *     DWORD Attributes;
     *     DWORD DeviceNotSelectedTimeout;
     *     DWORD TransmissionRetryTimeout;
     * } *PPRINTER_INFO_5W
     * }
     */
    public static final AddressLayout PPRINTER_INFO_5W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_5W {
     *     LPWSTR pPrinterName;
     *     LPWSTR pPortName;
     *     DWORD Attributes;
     *     DWORD DeviceNotSelectedTimeout;
     *     DWORD TransmissionRetryTimeout;
     * } *LPPRINTER_INFO_5W
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_5W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPRINTER_INFO_5A PPRINTER_INFO_5
     * }
     */
    public static final AddressLayout PPRINTER_INFO_5 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPRINTER_INFO_5A LPPRINTER_INFO_5
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_5 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_6 {
     *     DWORD dwStatus;
     * } *PPRINTER_INFO_6
     * }
     */
    public static final AddressLayout PPRINTER_INFO_6 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_6 {
     *     DWORD dwStatus;
     * } *LPPRINTER_INFO_6
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_6 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_7A {
     *     LPSTR pszObjectGUID;
     *     DWORD dwAction;
     * } *PPRINTER_INFO_7A
     * }
     */
    public static final AddressLayout PPRINTER_INFO_7A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_7A {
     *     LPSTR pszObjectGUID;
     *     DWORD dwAction;
     * } *LPPRINTER_INFO_7A
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_7A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_7W {
     *     LPWSTR pszObjectGUID;
     *     DWORD dwAction;
     * } *PPRINTER_INFO_7W
     * }
     */
    public static final AddressLayout PPRINTER_INFO_7W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_7W {
     *     LPWSTR pszObjectGUID;
     *     DWORD dwAction;
     * } *LPPRINTER_INFO_7W
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_7W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPRINTER_INFO_7A PPRINTER_INFO_7
     * }
     */
    public static final AddressLayout PPRINTER_INFO_7 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPRINTER_INFO_7A LPPRINTER_INFO_7
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_7 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_8A {
     *     LPDEVMODEA pDevMode;
     * } *PPRINTER_INFO_8A
     * }
     */
    public static final AddressLayout PPRINTER_INFO_8A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_8A {
     *     LPDEVMODEA pDevMode;
     * } *LPPRINTER_INFO_8A
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_8A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_8W {
     *     LPDEVMODEW pDevMode;
     * } *PPRINTER_INFO_8W
     * }
     */
    public static final AddressLayout PPRINTER_INFO_8W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_8W {
     *     LPDEVMODEW pDevMode;
     * } *LPPRINTER_INFO_8W
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_8W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPRINTER_INFO_8A PPRINTER_INFO_8
     * }
     */
    public static final AddressLayout PPRINTER_INFO_8 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPRINTER_INFO_8A LPPRINTER_INFO_8
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_8 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_9A {
     *     LPDEVMODEA pDevMode;
     * } *PPRINTER_INFO_9A
     * }
     */
    public static final AddressLayout PPRINTER_INFO_9A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_9A {
     *     LPDEVMODEA pDevMode;
     * } *LPPRINTER_INFO_9A
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_9A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_9W {
     *     LPDEVMODEW pDevMode;
     * } *PPRINTER_INFO_9W
     * }
     */
    public static final AddressLayout PPRINTER_INFO_9W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_9W {
     *     LPDEVMODEW pDevMode;
     * } *LPPRINTER_INFO_9W
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_9W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPRINTER_INFO_9A PPRINTER_INFO_9
     * }
     */
    public static final AddressLayout PPRINTER_INFO_9 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPRINTER_INFO_9A LPPRINTER_INFO_9
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_9 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_1A {
     *     DWORD JobId;
     *     LPSTR pPrinterName;
     *     LPSTR pMachineName;
     *     LPSTR pUserName;
     *     LPSTR pDocument;
     *     LPSTR pDatatype;
     *     LPSTR pStatus;
     *     DWORD Status;
     *     DWORD Priority;
     *     DWORD Position;
     *     DWORD TotalPages;
     *     DWORD PagesPrinted;
     *     SYSTEMTIME Submitted;
     * } *PJOB_INFO_1A
     * }
     */
    public static final AddressLayout PJOB_INFO_1A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_1A {
     *     DWORD JobId;
     *     LPSTR pPrinterName;
     *     LPSTR pMachineName;
     *     LPSTR pUserName;
     *     LPSTR pDocument;
     *     LPSTR pDatatype;
     *     LPSTR pStatus;
     *     DWORD Status;
     *     DWORD Priority;
     *     DWORD Position;
     *     DWORD TotalPages;
     *     DWORD PagesPrinted;
     *     SYSTEMTIME Submitted;
     * } *LPJOB_INFO_1A
     * }
     */
    public static final AddressLayout LPJOB_INFO_1A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_1W {
     *     DWORD JobId;
     *     LPWSTR pPrinterName;
     *     LPWSTR pMachineName;
     *     LPWSTR pUserName;
     *     LPWSTR pDocument;
     *     LPWSTR pDatatype;
     *     LPWSTR pStatus;
     *     DWORD Status;
     *     DWORD Priority;
     *     DWORD Position;
     *     DWORD TotalPages;
     *     DWORD PagesPrinted;
     *     SYSTEMTIME Submitted;
     * } *PJOB_INFO_1W
     * }
     */
    public static final AddressLayout PJOB_INFO_1W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_1W {
     *     DWORD JobId;
     *     LPWSTR pPrinterName;
     *     LPWSTR pMachineName;
     *     LPWSTR pUserName;
     *     LPWSTR pDocument;
     *     LPWSTR pDatatype;
     *     LPWSTR pStatus;
     *     DWORD Status;
     *     DWORD Priority;
     *     DWORD Position;
     *     DWORD TotalPages;
     *     DWORD PagesPrinted;
     *     SYSTEMTIME Submitted;
     * } *LPJOB_INFO_1W
     * }
     */
    public static final AddressLayout LPJOB_INFO_1W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PJOB_INFO_1A PJOB_INFO_1
     * }
     */
    public static final AddressLayout PJOB_INFO_1 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPJOB_INFO_1A LPJOB_INFO_1
     * }
     */
    public static final AddressLayout LPJOB_INFO_1 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_2A {
     *     DWORD JobId;
     *     LPSTR pPrinterName;
     *     LPSTR pMachineName;
     *     LPSTR pUserName;
     *     LPSTR pDocument;
     *     LPSTR pNotifyName;
     *     LPSTR pDatatype;
     *     LPSTR pPrintProcessor;
     *     LPSTR pParameters;
     *     LPSTR pDriverName;
     *     LPDEVMODEA pDevMode;
     *     LPSTR pStatus;
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     *     DWORD Status;
     *     DWORD Priority;
     *     DWORD Position;
     *     DWORD StartTime;
     *     DWORD UntilTime;
     *     DWORD TotalPages;
     *     DWORD Size;
     *     SYSTEMTIME Submitted;
     *     DWORD Time;
     *     DWORD PagesPrinted;
     * } *PJOB_INFO_2A
     * }
     */
    public static final AddressLayout PJOB_INFO_2A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_2A {
     *     DWORD JobId;
     *     LPSTR pPrinterName;
     *     LPSTR pMachineName;
     *     LPSTR pUserName;
     *     LPSTR pDocument;
     *     LPSTR pNotifyName;
     *     LPSTR pDatatype;
     *     LPSTR pPrintProcessor;
     *     LPSTR pParameters;
     *     LPSTR pDriverName;
     *     LPDEVMODEA pDevMode;
     *     LPSTR pStatus;
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     *     DWORD Status;
     *     DWORD Priority;
     *     DWORD Position;
     *     DWORD StartTime;
     *     DWORD UntilTime;
     *     DWORD TotalPages;
     *     DWORD Size;
     *     SYSTEMTIME Submitted;
     *     DWORD Time;
     *     DWORD PagesPrinted;
     * } *LPJOB_INFO_2A
     * }
     */
    public static final AddressLayout LPJOB_INFO_2A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_2W {
     *     DWORD JobId;
     *     LPWSTR pPrinterName;
     *     LPWSTR pMachineName;
     *     LPWSTR pUserName;
     *     LPWSTR pDocument;
     *     LPWSTR pNotifyName;
     *     LPWSTR pDatatype;
     *     LPWSTR pPrintProcessor;
     *     LPWSTR pParameters;
     *     LPWSTR pDriverName;
     *     LPDEVMODEW pDevMode;
     *     LPWSTR pStatus;
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     *     DWORD Status;
     *     DWORD Priority;
     *     DWORD Position;
     *     DWORD StartTime;
     *     DWORD UntilTime;
     *     DWORD TotalPages;
     *     DWORD Size;
     *     SYSTEMTIME Submitted;
     *     DWORD Time;
     *     DWORD PagesPrinted;
     * } *PJOB_INFO_2W
     * }
     */
    public static final AddressLayout PJOB_INFO_2W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_2W {
     *     DWORD JobId;
     *     LPWSTR pPrinterName;
     *     LPWSTR pMachineName;
     *     LPWSTR pUserName;
     *     LPWSTR pDocument;
     *     LPWSTR pNotifyName;
     *     LPWSTR pDatatype;
     *     LPWSTR pPrintProcessor;
     *     LPWSTR pParameters;
     *     LPWSTR pDriverName;
     *     LPDEVMODEW pDevMode;
     *     LPWSTR pStatus;
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     *     DWORD Status;
     *     DWORD Priority;
     *     DWORD Position;
     *     DWORD StartTime;
     *     DWORD UntilTime;
     *     DWORD TotalPages;
     *     DWORD Size;
     *     SYSTEMTIME Submitted;
     *     DWORD Time;
     *     DWORD PagesPrinted;
     * } *LPJOB_INFO_2W
     * }
     */
    public static final AddressLayout LPJOB_INFO_2W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PJOB_INFO_2A PJOB_INFO_2
     * }
     */
    public static final AddressLayout PJOB_INFO_2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPJOB_INFO_2A LPJOB_INFO_2
     * }
     */
    public static final AddressLayout LPJOB_INFO_2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_3 {
     *     DWORD JobId;
     *     DWORD NextJobId;
     *     DWORD Reserved;
     * } *PJOB_INFO_3
     * }
     */
    public static final AddressLayout PJOB_INFO_3 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_3 {
     *     DWORD JobId;
     *     DWORD NextJobId;
     *     DWORD Reserved;
     * } *LPJOB_INFO_3
     * }
     */
    public static final AddressLayout LPJOB_INFO_3 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_4A {
     *     DWORD JobId;
     *     LPSTR pPrinterName;
     *     LPSTR pMachineName;
     *     LPSTR pUserName;
     *     LPSTR pDocument;
     *     LPSTR pNotifyName;
     *     LPSTR pDatatype;
     *     LPSTR pPrintProcessor;
     *     LPSTR pParameters;
     *     LPSTR pDriverName;
     *     LPDEVMODEA pDevMode;
     *     LPSTR pStatus;
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     *     DWORD Status;
     *     DWORD Priority;
     *     DWORD Position;
     *     DWORD StartTime;
     *     DWORD UntilTime;
     *     DWORD TotalPages;
     *     DWORD Size;
     *     SYSTEMTIME Submitted;
     *     DWORD Time;
     *     DWORD PagesPrinted;
     *     LONG SizeHigh;
     * } *PJOB_INFO_4A
     * }
     */
    public static final AddressLayout PJOB_INFO_4A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_4A {
     *     DWORD JobId;
     *     LPSTR pPrinterName;
     *     LPSTR pMachineName;
     *     LPSTR pUserName;
     *     LPSTR pDocument;
     *     LPSTR pNotifyName;
     *     LPSTR pDatatype;
     *     LPSTR pPrintProcessor;
     *     LPSTR pParameters;
     *     LPSTR pDriverName;
     *     LPDEVMODEA pDevMode;
     *     LPSTR pStatus;
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     *     DWORD Status;
     *     DWORD Priority;
     *     DWORD Position;
     *     DWORD StartTime;
     *     DWORD UntilTime;
     *     DWORD TotalPages;
     *     DWORD Size;
     *     SYSTEMTIME Submitted;
     *     DWORD Time;
     *     DWORD PagesPrinted;
     *     LONG SizeHigh;
     * } *LPJOB_INFO_4A
     * }
     */
    public static final AddressLayout LPJOB_INFO_4A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_4W {
     *     DWORD JobId;
     *     LPWSTR pPrinterName;
     *     LPWSTR pMachineName;
     *     LPWSTR pUserName;
     *     LPWSTR pDocument;
     *     LPWSTR pNotifyName;
     *     LPWSTR pDatatype;
     *     LPWSTR pPrintProcessor;
     *     LPWSTR pParameters;
     *     LPWSTR pDriverName;
     *     LPDEVMODEW pDevMode;
     *     LPWSTR pStatus;
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     *     DWORD Status;
     *     DWORD Priority;
     *     DWORD Position;
     *     DWORD StartTime;
     *     DWORD UntilTime;
     *     DWORD TotalPages;
     *     DWORD Size;
     *     SYSTEMTIME Submitted;
     *     DWORD Time;
     *     DWORD PagesPrinted;
     *     LONG SizeHigh;
     * } *PJOB_INFO_4W
     * }
     */
    public static final AddressLayout PJOB_INFO_4W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_4W {
     *     DWORD JobId;
     *     LPWSTR pPrinterName;
     *     LPWSTR pMachineName;
     *     LPWSTR pUserName;
     *     LPWSTR pDocument;
     *     LPWSTR pNotifyName;
     *     LPWSTR pDatatype;
     *     LPWSTR pPrintProcessor;
     *     LPWSTR pParameters;
     *     LPWSTR pDriverName;
     *     LPDEVMODEW pDevMode;
     *     LPWSTR pStatus;
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     *     DWORD Status;
     *     DWORD Priority;
     *     DWORD Position;
     *     DWORD StartTime;
     *     DWORD UntilTime;
     *     DWORD TotalPages;
     *     DWORD Size;
     *     SYSTEMTIME Submitted;
     *     DWORD Time;
     *     DWORD PagesPrinted;
     *     LONG SizeHigh;
     * } *LPJOB_INFO_4W
     * }
     */
    public static final AddressLayout LPJOB_INFO_4W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PJOB_INFO_4A PJOB_INFO_4
     * }
     */
    public static final AddressLayout PJOB_INFO_4 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPJOB_INFO_4A LPJOB_INFO_4
     * }
     */
    public static final AddressLayout LPJOB_INFO_4 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ADDJOB_INFO_1A {
     *     LPSTR Path;
     *     DWORD JobId;
     * } *PADDJOB_INFO_1A
     * }
     */
    public static final AddressLayout PADDJOB_INFO_1A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ADDJOB_INFO_1A {
     *     LPSTR Path;
     *     DWORD JobId;
     * } *LPADDJOB_INFO_1A
     * }
     */
    public static final AddressLayout LPADDJOB_INFO_1A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ADDJOB_INFO_1W {
     *     LPWSTR Path;
     *     DWORD JobId;
     * } *PADDJOB_INFO_1W
     * }
     */
    public static final AddressLayout PADDJOB_INFO_1W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ADDJOB_INFO_1W {
     *     LPWSTR Path;
     *     DWORD JobId;
     * } *LPADDJOB_INFO_1W
     * }
     */
    public static final AddressLayout LPADDJOB_INFO_1W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PADDJOB_INFO_1A PADDJOB_INFO_1
     * }
     */
    public static final AddressLayout PADDJOB_INFO_1 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPADDJOB_INFO_1A LPADDJOB_INFO_1
     * }
     */
    public static final AddressLayout LPADDJOB_INFO_1 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_1A {
     *     LPSTR pName;
     * } *PDRIVER_INFO_1A
     * }
     */
    public static final AddressLayout PDRIVER_INFO_1A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_1A {
     *     LPSTR pName;
     * } *LPDRIVER_INFO_1A
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_1A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_1W {
     *     LPWSTR pName;
     * } *PDRIVER_INFO_1W
     * }
     */
    public static final AddressLayout PDRIVER_INFO_1W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_1W {
     *     LPWSTR pName;
     * } *LPDRIVER_INFO_1W
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_1W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PDRIVER_INFO_1A PDRIVER_INFO_1
     * }
     */
    public static final AddressLayout PDRIVER_INFO_1 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPDRIVER_INFO_1A LPDRIVER_INFO_1
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_1 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_2A {
     *     DWORD cVersion;
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDriverPath;
     *     LPSTR pDataFile;
     *     LPSTR pConfigFile;
     * } *PDRIVER_INFO_2A
     * }
     */
    public static final AddressLayout PDRIVER_INFO_2A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_2A {
     *     DWORD cVersion;
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDriverPath;
     *     LPSTR pDataFile;
     *     LPSTR pConfigFile;
     * } *LPDRIVER_INFO_2A
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_2A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_2W {
     *     DWORD cVersion;
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDriverPath;
     *     LPWSTR pDataFile;
     *     LPWSTR pConfigFile;
     * } *PDRIVER_INFO_2W
     * }
     */
    public static final AddressLayout PDRIVER_INFO_2W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_2W {
     *     DWORD cVersion;
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDriverPath;
     *     LPWSTR pDataFile;
     *     LPWSTR pConfigFile;
     * } *LPDRIVER_INFO_2W
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_2W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PDRIVER_INFO_2A PDRIVER_INFO_2
     * }
     */
    public static final AddressLayout PDRIVER_INFO_2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPDRIVER_INFO_2A LPDRIVER_INFO_2
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_3A {
     *     DWORD cVersion;
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDriverPath;
     *     LPSTR pDataFile;
     *     LPSTR pConfigFile;
     *     LPSTR pHelpFile;
     *     LPSTR pDependentFiles;
     *     LPSTR pMonitorName;
     *     LPSTR pDefaultDataType;
     * } *PDRIVER_INFO_3A
     * }
     */
    public static final AddressLayout PDRIVER_INFO_3A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_3A {
     *     DWORD cVersion;
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDriverPath;
     *     LPSTR pDataFile;
     *     LPSTR pConfigFile;
     *     LPSTR pHelpFile;
     *     LPSTR pDependentFiles;
     *     LPSTR pMonitorName;
     *     LPSTR pDefaultDataType;
     * } *LPDRIVER_INFO_3A
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_3A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_3W {
     *     DWORD cVersion;
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDriverPath;
     *     LPWSTR pDataFile;
     *     LPWSTR pConfigFile;
     *     LPWSTR pHelpFile;
     *     LPWSTR pDependentFiles;
     *     LPWSTR pMonitorName;
     *     LPWSTR pDefaultDataType;
     * } *PDRIVER_INFO_3W
     * }
     */
    public static final AddressLayout PDRIVER_INFO_3W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_3W {
     *     DWORD cVersion;
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDriverPath;
     *     LPWSTR pDataFile;
     *     LPWSTR pConfigFile;
     *     LPWSTR pHelpFile;
     *     LPWSTR pDependentFiles;
     *     LPWSTR pMonitorName;
     *     LPWSTR pDefaultDataType;
     * } *LPDRIVER_INFO_3W
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_3W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PDRIVER_INFO_3A PDRIVER_INFO_3
     * }
     */
    public static final AddressLayout PDRIVER_INFO_3 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPDRIVER_INFO_3A LPDRIVER_INFO_3
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_3 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_4A {
     *     DWORD cVersion;
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDriverPath;
     *     LPSTR pDataFile;
     *     LPSTR pConfigFile;
     *     LPSTR pHelpFile;
     *     LPSTR pDependentFiles;
     *     LPSTR pMonitorName;
     *     LPSTR pDefaultDataType;
     *     LPSTR pszzPreviousNames;
     * } *PDRIVER_INFO_4A
     * }
     */
    public static final AddressLayout PDRIVER_INFO_4A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_4A {
     *     DWORD cVersion;
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDriverPath;
     *     LPSTR pDataFile;
     *     LPSTR pConfigFile;
     *     LPSTR pHelpFile;
     *     LPSTR pDependentFiles;
     *     LPSTR pMonitorName;
     *     LPSTR pDefaultDataType;
     *     LPSTR pszzPreviousNames;
     * } *LPDRIVER_INFO_4A
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_4A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_4W {
     *     DWORD cVersion;
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDriverPath;
     *     LPWSTR pDataFile;
     *     LPWSTR pConfigFile;
     *     LPWSTR pHelpFile;
     *     LPWSTR pDependentFiles;
     *     LPWSTR pMonitorName;
     *     LPWSTR pDefaultDataType;
     *     LPWSTR pszzPreviousNames;
     * } *PDRIVER_INFO_4W
     * }
     */
    public static final AddressLayout PDRIVER_INFO_4W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_4W {
     *     DWORD cVersion;
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDriverPath;
     *     LPWSTR pDataFile;
     *     LPWSTR pConfigFile;
     *     LPWSTR pHelpFile;
     *     LPWSTR pDependentFiles;
     *     LPWSTR pMonitorName;
     *     LPWSTR pDefaultDataType;
     *     LPWSTR pszzPreviousNames;
     * } *LPDRIVER_INFO_4W
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_4W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PDRIVER_INFO_4A PDRIVER_INFO_4
     * }
     */
    public static final AddressLayout PDRIVER_INFO_4 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPDRIVER_INFO_4A LPDRIVER_INFO_4
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_4 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_5A {
     *     DWORD cVersion;
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDriverPath;
     *     LPSTR pDataFile;
     *     LPSTR pConfigFile;
     *     DWORD dwDriverAttributes;
     *     DWORD dwConfigVersion;
     *     DWORD dwDriverVersion;
     * } *PDRIVER_INFO_5A
     * }
     */
    public static final AddressLayout PDRIVER_INFO_5A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_5A {
     *     DWORD cVersion;
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDriverPath;
     *     LPSTR pDataFile;
     *     LPSTR pConfigFile;
     *     DWORD dwDriverAttributes;
     *     DWORD dwConfigVersion;
     *     DWORD dwDriverVersion;
     * } *LPDRIVER_INFO_5A
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_5A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_5W {
     *     DWORD cVersion;
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDriverPath;
     *     LPWSTR pDataFile;
     *     LPWSTR pConfigFile;
     *     DWORD dwDriverAttributes;
     *     DWORD dwConfigVersion;
     *     DWORD dwDriverVersion;
     * } *PDRIVER_INFO_5W
     * }
     */
    public static final AddressLayout PDRIVER_INFO_5W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_5W {
     *     DWORD cVersion;
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDriverPath;
     *     LPWSTR pDataFile;
     *     LPWSTR pConfigFile;
     *     DWORD dwDriverAttributes;
     *     DWORD dwConfigVersion;
     *     DWORD dwDriverVersion;
     * } *LPDRIVER_INFO_5W
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_5W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PDRIVER_INFO_5A PDRIVER_INFO_5
     * }
     */
    public static final AddressLayout PDRIVER_INFO_5 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPDRIVER_INFO_5A LPDRIVER_INFO_5
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_5 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_6A {
     *     DWORD cVersion;
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDriverPath;
     *     LPSTR pDataFile;
     *     LPSTR pConfigFile;
     *     LPSTR pHelpFile;
     *     LPSTR pDependentFiles;
     *     LPSTR pMonitorName;
     *     LPSTR pDefaultDataType;
     *     LPSTR pszzPreviousNames;
     *     FILETIME ftDriverDate;
     *     DWORDLONG dwlDriverVersion;
     *     LPSTR pszMfgName;
     *     LPSTR pszOEMUrl;
     *     LPSTR pszHardwareID;
     *     LPSTR pszProvider;
     * } *PDRIVER_INFO_6A
     * }
     */
    public static final AddressLayout PDRIVER_INFO_6A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_6A {
     *     DWORD cVersion;
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDriverPath;
     *     LPSTR pDataFile;
     *     LPSTR pConfigFile;
     *     LPSTR pHelpFile;
     *     LPSTR pDependentFiles;
     *     LPSTR pMonitorName;
     *     LPSTR pDefaultDataType;
     *     LPSTR pszzPreviousNames;
     *     FILETIME ftDriverDate;
     *     DWORDLONG dwlDriverVersion;
     *     LPSTR pszMfgName;
     *     LPSTR pszOEMUrl;
     *     LPSTR pszHardwareID;
     *     LPSTR pszProvider;
     * } *LPDRIVER_INFO_6A
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_6A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_6W {
     *     DWORD cVersion;
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDriverPath;
     *     LPWSTR pDataFile;
     *     LPWSTR pConfigFile;
     *     LPWSTR pHelpFile;
     *     LPWSTR pDependentFiles;
     *     LPWSTR pMonitorName;
     *     LPWSTR pDefaultDataType;
     *     LPWSTR pszzPreviousNames;
     *     FILETIME ftDriverDate;
     *     DWORDLONG dwlDriverVersion;
     *     LPWSTR pszMfgName;
     *     LPWSTR pszOEMUrl;
     *     LPWSTR pszHardwareID;
     *     LPWSTR pszProvider;
     * } *PDRIVER_INFO_6W
     * }
     */
    public static final AddressLayout PDRIVER_INFO_6W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_6W {
     *     DWORD cVersion;
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDriverPath;
     *     LPWSTR pDataFile;
     *     LPWSTR pConfigFile;
     *     LPWSTR pHelpFile;
     *     LPWSTR pDependentFiles;
     *     LPWSTR pMonitorName;
     *     LPWSTR pDefaultDataType;
     *     LPWSTR pszzPreviousNames;
     *     FILETIME ftDriverDate;
     *     DWORDLONG dwlDriverVersion;
     *     LPWSTR pszMfgName;
     *     LPWSTR pszOEMUrl;
     *     LPWSTR pszHardwareID;
     *     LPWSTR pszProvider;
     * } *LPDRIVER_INFO_6W
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_6W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PDRIVER_INFO_6A PDRIVER_INFO_6
     * }
     */
    public static final AddressLayout PDRIVER_INFO_6 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPDRIVER_INFO_6A LPDRIVER_INFO_6
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_6 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_8A {
     *     DWORD cVersion;
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDriverPath;
     *     LPSTR pDataFile;
     *     LPSTR pConfigFile;
     *     LPSTR pHelpFile;
     *     LPSTR pDependentFiles;
     *     LPSTR pMonitorName;
     *     LPSTR pDefaultDataType;
     *     LPSTR pszzPreviousNames;
     *     FILETIME ftDriverDate;
     *     DWORDLONG dwlDriverVersion;
     *     LPSTR pszMfgName;
     *     LPSTR pszOEMUrl;
     *     LPSTR pszHardwareID;
     *     LPSTR pszProvider;
     *     LPSTR pszPrintProcessor;
     *     LPSTR pszVendorSetup;
     *     LPSTR pszzColorProfiles;
     *     LPSTR pszInfPath;
     *     DWORD dwPrinterDriverAttributes;
     *     LPSTR pszzCoreDriverDependencies;
     *     FILETIME ftMinInboxDriverVerDate;
     *     DWORDLONG dwlMinInboxDriverVerVersion;
     * } *PDRIVER_INFO_8A
     * }
     */
    public static final AddressLayout PDRIVER_INFO_8A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_8A {
     *     DWORD cVersion;
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDriverPath;
     *     LPSTR pDataFile;
     *     LPSTR pConfigFile;
     *     LPSTR pHelpFile;
     *     LPSTR pDependentFiles;
     *     LPSTR pMonitorName;
     *     LPSTR pDefaultDataType;
     *     LPSTR pszzPreviousNames;
     *     FILETIME ftDriverDate;
     *     DWORDLONG dwlDriverVersion;
     *     LPSTR pszMfgName;
     *     LPSTR pszOEMUrl;
     *     LPSTR pszHardwareID;
     *     LPSTR pszProvider;
     *     LPSTR pszPrintProcessor;
     *     LPSTR pszVendorSetup;
     *     LPSTR pszzColorProfiles;
     *     LPSTR pszInfPath;
     *     DWORD dwPrinterDriverAttributes;
     *     LPSTR pszzCoreDriverDependencies;
     *     FILETIME ftMinInboxDriverVerDate;
     *     DWORDLONG dwlMinInboxDriverVerVersion;
     * } *LPDRIVER_INFO_8A
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_8A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_8W {
     *     DWORD cVersion;
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDriverPath;
     *     LPWSTR pDataFile;
     *     LPWSTR pConfigFile;
     *     LPWSTR pHelpFile;
     *     LPWSTR pDependentFiles;
     *     LPWSTR pMonitorName;
     *     LPWSTR pDefaultDataType;
     *     LPWSTR pszzPreviousNames;
     *     FILETIME ftDriverDate;
     *     DWORDLONG dwlDriverVersion;
     *     LPWSTR pszMfgName;
     *     LPWSTR pszOEMUrl;
     *     LPWSTR pszHardwareID;
     *     LPWSTR pszProvider;
     *     LPWSTR pszPrintProcessor;
     *     LPWSTR pszVendorSetup;
     *     LPWSTR pszzColorProfiles;
     *     LPWSTR pszInfPath;
     *     DWORD dwPrinterDriverAttributes;
     *     LPWSTR pszzCoreDriverDependencies;
     *     FILETIME ftMinInboxDriverVerDate;
     *     DWORDLONG dwlMinInboxDriverVerVersion;
     * } *PDRIVER_INFO_8W
     * }
     */
    public static final AddressLayout PDRIVER_INFO_8W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_8W {
     *     DWORD cVersion;
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDriverPath;
     *     LPWSTR pDataFile;
     *     LPWSTR pConfigFile;
     *     LPWSTR pHelpFile;
     *     LPWSTR pDependentFiles;
     *     LPWSTR pMonitorName;
     *     LPWSTR pDefaultDataType;
     *     LPWSTR pszzPreviousNames;
     *     FILETIME ftDriverDate;
     *     DWORDLONG dwlDriverVersion;
     *     LPWSTR pszMfgName;
     *     LPWSTR pszOEMUrl;
     *     LPWSTR pszHardwareID;
     *     LPWSTR pszProvider;
     *     LPWSTR pszPrintProcessor;
     *     LPWSTR pszVendorSetup;
     *     LPWSTR pszzColorProfiles;
     *     LPWSTR pszInfPath;
     *     DWORD dwPrinterDriverAttributes;
     *     LPWSTR pszzCoreDriverDependencies;
     *     FILETIME ftMinInboxDriverVerDate;
     *     DWORDLONG dwlMinInboxDriverVerVersion;
     * } *LPDRIVER_INFO_8W
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_8W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PDRIVER_INFO_8A PDRIVER_INFO_8
     * }
     */
    public static final AddressLayout PDRIVER_INFO_8 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPDRIVER_INFO_8A LPDRIVER_INFO_8
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_8 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DOC_INFO_1A {
     *     LPSTR pDocName;
     *     LPSTR pOutputFile;
     *     LPSTR pDatatype;
     * } *PDOC_INFO_1A
     * }
     */
    public static final AddressLayout PDOC_INFO_1A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DOC_INFO_1A {
     *     LPSTR pDocName;
     *     LPSTR pOutputFile;
     *     LPSTR pDatatype;
     * } *LPDOC_INFO_1A
     * }
     */
    public static final AddressLayout LPDOC_INFO_1A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DOC_INFO_1W {
     *     LPWSTR pDocName;
     *     LPWSTR pOutputFile;
     *     LPWSTR pDatatype;
     * } *PDOC_INFO_1W
     * }
     */
    public static final AddressLayout PDOC_INFO_1W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DOC_INFO_1W {
     *     LPWSTR pDocName;
     *     LPWSTR pOutputFile;
     *     LPWSTR pDatatype;
     * } *LPDOC_INFO_1W
     * }
     */
    public static final AddressLayout LPDOC_INFO_1W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PDOC_INFO_1A PDOC_INFO_1
     * }
     */
    public static final AddressLayout PDOC_INFO_1 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPDOC_INFO_1A LPDOC_INFO_1
     * }
     */
    public static final AddressLayout LPDOC_INFO_1 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FORM_INFO_1A {
     *     DWORD Flags;
     *     LPSTR pName;
     *     SIZEL Size;
     *     RECTL ImageableArea;
     * } *PFORM_INFO_1A
     * }
     */
    public static final AddressLayout PFORM_INFO_1A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FORM_INFO_1A {
     *     DWORD Flags;
     *     LPSTR pName;
     *     SIZEL Size;
     *     RECTL ImageableArea;
     * } *LPFORM_INFO_1A
     * }
     */
    public static final AddressLayout LPFORM_INFO_1A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FORM_INFO_1W {
     *     DWORD Flags;
     *     LPWSTR pName;
     *     SIZEL Size;
     *     RECTL ImageableArea;
     * } *PFORM_INFO_1W
     * }
     */
    public static final AddressLayout PFORM_INFO_1W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FORM_INFO_1W {
     *     DWORD Flags;
     *     LPWSTR pName;
     *     SIZEL Size;
     *     RECTL ImageableArea;
     * } *LPFORM_INFO_1W
     * }
     */
    public static final AddressLayout LPFORM_INFO_1W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PFORM_INFO_1A PFORM_INFO_1
     * }
     */
    public static final AddressLayout PFORM_INFO_1 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPFORM_INFO_1A LPFORM_INFO_1
     * }
     */
    public static final AddressLayout LPFORM_INFO_1 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FORM_INFO_2A {
     *     DWORD Flags;
     *     LPCSTR pName;
     *     SIZEL Size;
     *     RECTL ImageableArea;
     *     LPCSTR pKeyword;
     *     DWORD StringType;
     *     LPCSTR pMuiDll;
     *     DWORD dwResourceId;
     *     LPCSTR pDisplayName;
     *     LANGID wLangId;
     * } *PFORM_INFO_2A
     * }
     */
    public static final AddressLayout PFORM_INFO_2A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FORM_INFO_2A {
     *     DWORD Flags;
     *     LPCSTR pName;
     *     SIZEL Size;
     *     RECTL ImageableArea;
     *     LPCSTR pKeyword;
     *     DWORD StringType;
     *     LPCSTR pMuiDll;
     *     DWORD dwResourceId;
     *     LPCSTR pDisplayName;
     *     LANGID wLangId;
     * } *LPFORM_INFO_2A
     * }
     */
    public static final AddressLayout LPFORM_INFO_2A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FORM_INFO_2W {
     *     DWORD Flags;
     *     LPCWSTR pName;
     *     SIZEL Size;
     *     RECTL ImageableArea;
     *     LPCSTR pKeyword;
     *     DWORD StringType;
     *     LPCWSTR pMuiDll;
     *     DWORD dwResourceId;
     *     LPCWSTR pDisplayName;
     *     LANGID wLangId;
     * } *PFORM_INFO_2W
     * }
     */
    public static final AddressLayout PFORM_INFO_2W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FORM_INFO_2W {
     *     DWORD Flags;
     *     LPCWSTR pName;
     *     SIZEL Size;
     *     RECTL ImageableArea;
     *     LPCSTR pKeyword;
     *     DWORD StringType;
     *     LPCWSTR pMuiDll;
     *     DWORD dwResourceId;
     *     LPCWSTR pDisplayName;
     *     LANGID wLangId;
     * } *LPFORM_INFO_2W
     * }
     */
    public static final AddressLayout LPFORM_INFO_2W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PFORM_INFO_2A PFORM_INFO_2
     * }
     */
    public static final AddressLayout PFORM_INFO_2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPFORM_INFO_2A LPFORM_INFO_2
     * }
     */
    public static final AddressLayout LPFORM_INFO_2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DOC_INFO_2A {
     *     LPSTR pDocName;
     *     LPSTR pOutputFile;
     *     LPSTR pDatatype;
     *     DWORD dwMode;
     *     DWORD JobId;
     * } *PDOC_INFO_2A
     * }
     */
    public static final AddressLayout PDOC_INFO_2A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DOC_INFO_2A {
     *     LPSTR pDocName;
     *     LPSTR pOutputFile;
     *     LPSTR pDatatype;
     *     DWORD dwMode;
     *     DWORD JobId;
     * } *LPDOC_INFO_2A
     * }
     */
    public static final AddressLayout LPDOC_INFO_2A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DOC_INFO_2W {
     *     LPWSTR pDocName;
     *     LPWSTR pOutputFile;
     *     LPWSTR pDatatype;
     *     DWORD dwMode;
     *     DWORD JobId;
     * } *PDOC_INFO_2W
     * }
     */
    public static final AddressLayout PDOC_INFO_2W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DOC_INFO_2W {
     *     LPWSTR pDocName;
     *     LPWSTR pOutputFile;
     *     LPWSTR pDatatype;
     *     DWORD dwMode;
     *     DWORD JobId;
     * } *LPDOC_INFO_2W
     * }
     */
    public static final AddressLayout LPDOC_INFO_2W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PDOC_INFO_2A PDOC_INFO_2
     * }
     */
    public static final AddressLayout PDOC_INFO_2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPDOC_INFO_2A LPDOC_INFO_2
     * }
     */
    public static final AddressLayout LPDOC_INFO_2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DOC_INFO_3A {
     *     LPSTR pDocName;
     *     LPSTR pOutputFile;
     *     LPSTR pDatatype;
     *     DWORD dwFlags;
     * } *PDOC_INFO_3A
     * }
     */
    public static final AddressLayout PDOC_INFO_3A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DOC_INFO_3A {
     *     LPSTR pDocName;
     *     LPSTR pOutputFile;
     *     LPSTR pDatatype;
     *     DWORD dwFlags;
     * } *LPDOC_INFO_3A
     * }
     */
    public static final AddressLayout LPDOC_INFO_3A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DOC_INFO_3W {
     *     LPWSTR pDocName;
     *     LPWSTR pOutputFile;
     *     LPWSTR pDatatype;
     *     DWORD dwFlags;
     * } *PDOC_INFO_3W
     * }
     */
    public static final AddressLayout PDOC_INFO_3W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DOC_INFO_3W {
     *     LPWSTR pDocName;
     *     LPWSTR pOutputFile;
     *     LPWSTR pDatatype;
     *     DWORD dwFlags;
     * } *LPDOC_INFO_3W
     * }
     */
    public static final AddressLayout LPDOC_INFO_3W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PDOC_INFO_3A PDOC_INFO_3
     * }
     */
    public static final AddressLayout PDOC_INFO_3 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPDOC_INFO_3A LPDOC_INFO_3
     * }
     */
    public static final AddressLayout LPDOC_INFO_3 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTPROCESSOR_INFO_1A {
     *     LPSTR pName;
     * } *PPRINTPROCESSOR_INFO_1A
     * }
     */
    public static final AddressLayout PPRINTPROCESSOR_INFO_1A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTPROCESSOR_INFO_1A {
     *     LPSTR pName;
     * } *LPPRINTPROCESSOR_INFO_1A
     * }
     */
    public static final AddressLayout LPPRINTPROCESSOR_INFO_1A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTPROCESSOR_INFO_1W {
     *     LPWSTR pName;
     * } *PPRINTPROCESSOR_INFO_1W
     * }
     */
    public static final AddressLayout PPRINTPROCESSOR_INFO_1W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTPROCESSOR_INFO_1W {
     *     LPWSTR pName;
     * } *LPPRINTPROCESSOR_INFO_1W
     * }
     */
    public static final AddressLayout LPPRINTPROCESSOR_INFO_1W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPRINTPROCESSOR_INFO_1A PPRINTPROCESSOR_INFO_1
     * }
     */
    public static final AddressLayout PPRINTPROCESSOR_INFO_1 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPRINTPROCESSOR_INFO_1A LPPRINTPROCESSOR_INFO_1
     * }
     */
    public static final AddressLayout LPPRINTPROCESSOR_INFO_1 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTPROCESSOR_CAPS_1 {
     *     DWORD dwLevel;
     *     DWORD dwNupOptions;
     *     DWORD dwPageOrderFlags;
     *     DWORD dwNumberOfCopies;
     * } *PPRINTPROCESSOR_CAPS_1
     * }
     */
    public static final AddressLayout PPRINTPROCESSOR_CAPS_1 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTPROCESSOR_CAPS_2 {
     *     DWORD dwLevel;
     *     DWORD dwNupOptions;
     *     DWORD dwPageOrderFlags;
     *     DWORD dwNumberOfCopies;
     *     DWORD dwDuplexHandlingCaps;
     *     DWORD dwNupDirectionCaps;
     *     DWORD dwNupBorderCaps;
     *     DWORD dwBookletHandlingCaps;
     *     DWORD dwScalingCaps;
     * } *PPRINTPROCESSOR_CAPS_2
     * }
     */
    public static final AddressLayout PPRINTPROCESSOR_CAPS_2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PORT_INFO_1A {
     *     LPSTR pName;
     * } *PPORT_INFO_1A
     * }
     */
    public static final AddressLayout PPORT_INFO_1A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PORT_INFO_1A {
     *     LPSTR pName;
     * } *LPPORT_INFO_1A
     * }
     */
    public static final AddressLayout LPPORT_INFO_1A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PORT_INFO_1W {
     *     LPWSTR pName;
     * } *PPORT_INFO_1W
     * }
     */
    public static final AddressLayout PPORT_INFO_1W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PORT_INFO_1W {
     *     LPWSTR pName;
     * } *LPPORT_INFO_1W
     * }
     */
    public static final AddressLayout LPPORT_INFO_1W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPORT_INFO_1A PPORT_INFO_1
     * }
     */
    public static final AddressLayout PPORT_INFO_1 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPORT_INFO_1A LPPORT_INFO_1
     * }
     */
    public static final AddressLayout LPPORT_INFO_1 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PORT_INFO_2A {
     *     LPSTR pPortName;
     *     LPSTR pMonitorName;
     *     LPSTR pDescription;
     *     DWORD fPortType;
     *     DWORD Reserved;
     * } *PPORT_INFO_2A
     * }
     */
    public static final AddressLayout PPORT_INFO_2A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PORT_INFO_2A {
     *     LPSTR pPortName;
     *     LPSTR pMonitorName;
     *     LPSTR pDescription;
     *     DWORD fPortType;
     *     DWORD Reserved;
     * } *LPPORT_INFO_2A
     * }
     */
    public static final AddressLayout LPPORT_INFO_2A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PORT_INFO_2W {
     *     LPWSTR pPortName;
     *     LPWSTR pMonitorName;
     *     LPWSTR pDescription;
     *     DWORD fPortType;
     *     DWORD Reserved;
     * } *PPORT_INFO_2W
     * }
     */
    public static final AddressLayout PPORT_INFO_2W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PORT_INFO_2W {
     *     LPWSTR pPortName;
     *     LPWSTR pMonitorName;
     *     LPWSTR pDescription;
     *     DWORD fPortType;
     *     DWORD Reserved;
     * } *LPPORT_INFO_2W
     * }
     */
    public static final AddressLayout LPPORT_INFO_2W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPORT_INFO_2A PPORT_INFO_2
     * }
     */
    public static final AddressLayout PPORT_INFO_2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPORT_INFO_2A LPPORT_INFO_2
     * }
     */
    public static final AddressLayout LPPORT_INFO_2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PORT_INFO_3A {
     *     DWORD dwStatus;
     *     LPSTR pszStatus;
     *     DWORD dwSeverity;
     * } *PPORT_INFO_3A
     * }
     */
    public static final AddressLayout PPORT_INFO_3A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PORT_INFO_3A {
     *     DWORD dwStatus;
     *     LPSTR pszStatus;
     *     DWORD dwSeverity;
     * } *LPPORT_INFO_3A
     * }
     */
    public static final AddressLayout LPPORT_INFO_3A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PORT_INFO_3W {
     *     DWORD dwStatus;
     *     LPWSTR pszStatus;
     *     DWORD dwSeverity;
     * } *PPORT_INFO_3W
     * }
     */
    public static final AddressLayout PPORT_INFO_3W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PORT_INFO_3W {
     *     DWORD dwStatus;
     *     LPWSTR pszStatus;
     *     DWORD dwSeverity;
     * } *LPPORT_INFO_3W
     * }
     */
    public static final AddressLayout LPPORT_INFO_3W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPORT_INFO_3A PPORT_INFO_3
     * }
     */
    public static final AddressLayout PPORT_INFO_3 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPORT_INFO_3A LPPORT_INFO_3
     * }
     */
    public static final AddressLayout LPPORT_INFO_3 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MONITOR_INFO_1A {
     *     LPSTR pName;
     * } *PMONITOR_INFO_1A
     * }
     */
    public static final AddressLayout PMONITOR_INFO_1A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MONITOR_INFO_1A {
     *     LPSTR pName;
     * } *LPMONITOR_INFO_1A
     * }
     */
    public static final AddressLayout LPMONITOR_INFO_1A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MONITOR_INFO_1W {
     *     LPWSTR pName;
     * } *PMONITOR_INFO_1W
     * }
     */
    public static final AddressLayout PMONITOR_INFO_1W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MONITOR_INFO_1W {
     *     LPWSTR pName;
     * } *LPMONITOR_INFO_1W
     * }
     */
    public static final AddressLayout LPMONITOR_INFO_1W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMONITOR_INFO_1A PMONITOR_INFO_1
     * }
     */
    public static final AddressLayout PMONITOR_INFO_1 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMONITOR_INFO_1A LPMONITOR_INFO_1
     * }
     */
    public static final AddressLayout LPMONITOR_INFO_1 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MONITOR_INFO_2A {
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDLLName;
     * } *PMONITOR_INFO_2A
     * }
     */
    public static final AddressLayout PMONITOR_INFO_2A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MONITOR_INFO_2A {
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDLLName;
     * } *LPMONITOR_INFO_2A
     * }
     */
    public static final AddressLayout LPMONITOR_INFO_2A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MONITOR_INFO_2W {
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDLLName;
     * } *PMONITOR_INFO_2W
     * }
     */
    public static final AddressLayout PMONITOR_INFO_2W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MONITOR_INFO_2W {
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDLLName;
     * } *LPMONITOR_INFO_2W
     * }
     */
    public static final AddressLayout LPMONITOR_INFO_2W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMONITOR_INFO_2A PMONITOR_INFO_2
     * }
     */
    public static final AddressLayout PMONITOR_INFO_2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMONITOR_INFO_2A LPMONITOR_INFO_2
     * }
     */
    public static final AddressLayout LPMONITOR_INFO_2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DATATYPES_INFO_1A {
     *     LPSTR pName;
     * } *PDATATYPES_INFO_1A
     * }
     */
    public static final AddressLayout PDATATYPES_INFO_1A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DATATYPES_INFO_1A {
     *     LPSTR pName;
     * } *LPDATATYPES_INFO_1A
     * }
     */
    public static final AddressLayout LPDATATYPES_INFO_1A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DATATYPES_INFO_1W {
     *     LPWSTR pName;
     * } *PDATATYPES_INFO_1W
     * }
     */
    public static final AddressLayout PDATATYPES_INFO_1W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DATATYPES_INFO_1W {
     *     LPWSTR pName;
     * } *LPDATATYPES_INFO_1W
     * }
     */
    public static final AddressLayout LPDATATYPES_INFO_1W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PDATATYPES_INFO_1A PDATATYPES_INFO_1
     * }
     */
    public static final AddressLayout PDATATYPES_INFO_1 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPDATATYPES_INFO_1A LPDATATYPES_INFO_1
     * }
     */
    public static final AddressLayout LPDATATYPES_INFO_1 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_DEFAULTSA {
     *     LPSTR pDatatype;
     *     LPDEVMODEA pDevMode;
     *     ACCESS_MASK DesiredAccess;
     * } *PPRINTER_DEFAULTSA
     * }
     */
    public static final AddressLayout PPRINTER_DEFAULTSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_DEFAULTSA {
     *     LPSTR pDatatype;
     *     LPDEVMODEA pDevMode;
     *     ACCESS_MASK DesiredAccess;
     * } *LPPRINTER_DEFAULTSA
     * }
     */
    public static final AddressLayout LPPRINTER_DEFAULTSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_DEFAULTSW {
     *     LPWSTR pDatatype;
     *     LPDEVMODEW pDevMode;
     *     ACCESS_MASK DesiredAccess;
     * } *PPRINTER_DEFAULTSW
     * }
     */
    public static final AddressLayout PPRINTER_DEFAULTSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_DEFAULTSW {
     *     LPWSTR pDatatype;
     *     LPDEVMODEW pDevMode;
     *     ACCESS_MASK DesiredAccess;
     * } *LPPRINTER_DEFAULTSW
     * }
     */
    public static final AddressLayout LPPRINTER_DEFAULTSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPRINTER_DEFAULTSA PPRINTER_DEFAULTS
     * }
     */
    public static final AddressLayout PPRINTER_DEFAULTS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPRINTER_DEFAULTSA LPPRINTER_DEFAULTS
     * }
     */
    public static final AddressLayout LPPRINTER_DEFAULTS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_ENUM_VALUESA {
     *     LPSTR pValueName;
     *     DWORD cbValueName;
     *     DWORD dwType;
     *     LPBYTE pData;
     *     DWORD cbData;
     * } *PPRINTER_ENUM_VALUESA
     * }
     */
    public static final AddressLayout PPRINTER_ENUM_VALUESA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_ENUM_VALUESA {
     *     LPSTR pValueName;
     *     DWORD cbValueName;
     *     DWORD dwType;
     *     LPBYTE pData;
     *     DWORD cbData;
     * } *LPPRINTER_ENUM_VALUESA
     * }
     */
    public static final AddressLayout LPPRINTER_ENUM_VALUESA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_ENUM_VALUESW {
     *     LPWSTR pValueName;
     *     DWORD cbValueName;
     *     DWORD dwType;
     *     LPBYTE pData;
     *     DWORD cbData;
     * } *PPRINTER_ENUM_VALUESW
     * }
     */
    public static final AddressLayout PPRINTER_ENUM_VALUESW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_ENUM_VALUESW {
     *     LPWSTR pValueName;
     *     DWORD cbValueName;
     *     DWORD dwType;
     *     LPBYTE pData;
     *     DWORD cbData;
     * } *LPPRINTER_ENUM_VALUESW
     * }
     */
    public static final AddressLayout LPPRINTER_ENUM_VALUESW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPRINTER_ENUM_VALUESA PPRINTER_ENUM_VALUES
     * }
     */
    public static final AddressLayout PPRINTER_ENUM_VALUES = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPRINTER_ENUM_VALUESA LPPRINTER_ENUM_VALUES
     * }
     */
    public static final AddressLayout LPPRINTER_ENUM_VALUES = wgl_h.C_POINTER;

    private static class EnumPrintersA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("EnumPrintersA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumPrintersA(DWORD Flags, LPSTR Name, DWORD Level, LPBYTE pPrinterEnum, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static FunctionDescriptor EnumPrintersA$descriptor() {
        return EnumPrintersA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumPrintersA(DWORD Flags, LPSTR Name, DWORD Level, LPBYTE pPrinterEnum, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MethodHandle EnumPrintersA$handle() {
        return EnumPrintersA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumPrintersA(DWORD Flags, LPSTR Name, DWORD Level, LPBYTE pPrinterEnum, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MemorySegment EnumPrintersA$address() {
        return EnumPrintersA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumPrintersA(DWORD Flags, LPSTR Name, DWORD Level, LPBYTE pPrinterEnum, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static int EnumPrintersA(int Flags, MemorySegment Name, int Level, MemorySegment pPrinterEnum, int cbBuf, MemorySegment pcbNeeded, MemorySegment pcReturned) {
        var mh$ = EnumPrintersA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumPrintersA", Flags, Name, Level, pPrinterEnum, cbBuf, pcbNeeded, pcReturned);
            }
            return (int)mh$.invokeExact(Flags, Name, Level, pPrinterEnum, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumPrintersW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("EnumPrintersW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumPrintersW(DWORD Flags, LPWSTR Name, DWORD Level, LPBYTE pPrinterEnum, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static FunctionDescriptor EnumPrintersW$descriptor() {
        return EnumPrintersW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumPrintersW(DWORD Flags, LPWSTR Name, DWORD Level, LPBYTE pPrinterEnum, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MethodHandle EnumPrintersW$handle() {
        return EnumPrintersW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumPrintersW(DWORD Flags, LPWSTR Name, DWORD Level, LPBYTE pPrinterEnum, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MemorySegment EnumPrintersW$address() {
        return EnumPrintersW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumPrintersW(DWORD Flags, LPWSTR Name, DWORD Level, LPBYTE pPrinterEnum, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static int EnumPrintersW(int Flags, MemorySegment Name, int Level, MemorySegment pPrinterEnum, int cbBuf, MemorySegment pcbNeeded, MemorySegment pcReturned) {
        var mh$ = EnumPrintersW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumPrintersW", Flags, Name, Level, pPrinterEnum, cbBuf, pcbNeeded, pcReturned);
            }
            return (int)mh$.invokeExact(Flags, Name, Level, pPrinterEnum, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetSpoolFileHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetSpoolFileHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HANDLE GetSpoolFileHandle(HANDLE hPrinter)
     * }
     */
    public static FunctionDescriptor GetSpoolFileHandle$descriptor() {
        return GetSpoolFileHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HANDLE GetSpoolFileHandle(HANDLE hPrinter)
     * }
     */
    public static MethodHandle GetSpoolFileHandle$handle() {
        return GetSpoolFileHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HANDLE GetSpoolFileHandle(HANDLE hPrinter)
     * }
     */
    public static MemorySegment GetSpoolFileHandle$address() {
        return GetSpoolFileHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HANDLE GetSpoolFileHandle(HANDLE hPrinter)
     * }
     */
    public static MemorySegment GetSpoolFileHandle(MemorySegment hPrinter) {
        var mh$ = GetSpoolFileHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetSpoolFileHandle", hPrinter);
            }
            return (MemorySegment)mh$.invokeExact(hPrinter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CommitSpoolData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CommitSpoolData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HANDLE CommitSpoolData(HANDLE hPrinter, HANDLE hSpoolFile, DWORD cbCommit)
     * }
     */
    public static FunctionDescriptor CommitSpoolData$descriptor() {
        return CommitSpoolData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HANDLE CommitSpoolData(HANDLE hPrinter, HANDLE hSpoolFile, DWORD cbCommit)
     * }
     */
    public static MethodHandle CommitSpoolData$handle() {
        return CommitSpoolData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HANDLE CommitSpoolData(HANDLE hPrinter, HANDLE hSpoolFile, DWORD cbCommit)
     * }
     */
    public static MemorySegment CommitSpoolData$address() {
        return CommitSpoolData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HANDLE CommitSpoolData(HANDLE hPrinter, HANDLE hSpoolFile, DWORD cbCommit)
     * }
     */
    public static MemorySegment CommitSpoolData(MemorySegment hPrinter, MemorySegment hSpoolFile, int cbCommit) {
        var mh$ = CommitSpoolData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CommitSpoolData", hPrinter, hSpoolFile, cbCommit);
            }
            return (MemorySegment)mh$.invokeExact(hPrinter, hSpoolFile, cbCommit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CloseSpoolFileHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CloseSpoolFileHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CloseSpoolFileHandle(HANDLE hPrinter, HANDLE hSpoolFile)
     * }
     */
    public static FunctionDescriptor CloseSpoolFileHandle$descriptor() {
        return CloseSpoolFileHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CloseSpoolFileHandle(HANDLE hPrinter, HANDLE hSpoolFile)
     * }
     */
    public static MethodHandle CloseSpoolFileHandle$handle() {
        return CloseSpoolFileHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CloseSpoolFileHandle(HANDLE hPrinter, HANDLE hSpoolFile)
     * }
     */
    public static MemorySegment CloseSpoolFileHandle$address() {
        return CloseSpoolFileHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CloseSpoolFileHandle(HANDLE hPrinter, HANDLE hSpoolFile)
     * }
     */
    public static int CloseSpoolFileHandle(MemorySegment hPrinter, MemorySegment hSpoolFile) {
        var mh$ = CloseSpoolFileHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CloseSpoolFileHandle", hPrinter, hSpoolFile);
            }
            return (int)mh$.invokeExact(hPrinter, hSpoolFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OpenPrinterA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("OpenPrinterA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL OpenPrinterA(LPSTR pPrinterName, LPHANDLE phPrinter, LPPRINTER_DEFAULTSA pDefault)
     * }
     */
    public static FunctionDescriptor OpenPrinterA$descriptor() {
        return OpenPrinterA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL OpenPrinterA(LPSTR pPrinterName, LPHANDLE phPrinter, LPPRINTER_DEFAULTSA pDefault)
     * }
     */
    public static MethodHandle OpenPrinterA$handle() {
        return OpenPrinterA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL OpenPrinterA(LPSTR pPrinterName, LPHANDLE phPrinter, LPPRINTER_DEFAULTSA pDefault)
     * }
     */
    public static MemorySegment OpenPrinterA$address() {
        return OpenPrinterA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL OpenPrinterA(LPSTR pPrinterName, LPHANDLE phPrinter, LPPRINTER_DEFAULTSA pDefault)
     * }
     */
    public static int OpenPrinterA(MemorySegment pPrinterName, MemorySegment phPrinter, MemorySegment pDefault) {
        var mh$ = OpenPrinterA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OpenPrinterA", pPrinterName, phPrinter, pDefault);
            }
            return (int)mh$.invokeExact(pPrinterName, phPrinter, pDefault);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OpenPrinterW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("OpenPrinterW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL OpenPrinterW(LPWSTR pPrinterName, LPHANDLE phPrinter, LPPRINTER_DEFAULTSW pDefault)
     * }
     */
    public static FunctionDescriptor OpenPrinterW$descriptor() {
        return OpenPrinterW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL OpenPrinterW(LPWSTR pPrinterName, LPHANDLE phPrinter, LPPRINTER_DEFAULTSW pDefault)
     * }
     */
    public static MethodHandle OpenPrinterW$handle() {
        return OpenPrinterW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL OpenPrinterW(LPWSTR pPrinterName, LPHANDLE phPrinter, LPPRINTER_DEFAULTSW pDefault)
     * }
     */
    public static MemorySegment OpenPrinterW$address() {
        return OpenPrinterW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL OpenPrinterW(LPWSTR pPrinterName, LPHANDLE phPrinter, LPPRINTER_DEFAULTSW pDefault)
     * }
     */
    public static int OpenPrinterW(MemorySegment pPrinterName, MemorySegment phPrinter, MemorySegment pDefault) {
        var mh$ = OpenPrinterW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OpenPrinterW", pPrinterName, phPrinter, pDefault);
            }
            return (int)mh$.invokeExact(pPrinterName, phPrinter, pDefault);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ResetPrinterA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ResetPrinterA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ResetPrinterA(HANDLE hPrinter, LPPRINTER_DEFAULTSA pDefault)
     * }
     */
    public static FunctionDescriptor ResetPrinterA$descriptor() {
        return ResetPrinterA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ResetPrinterA(HANDLE hPrinter, LPPRINTER_DEFAULTSA pDefault)
     * }
     */
    public static MethodHandle ResetPrinterA$handle() {
        return ResetPrinterA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ResetPrinterA(HANDLE hPrinter, LPPRINTER_DEFAULTSA pDefault)
     * }
     */
    public static MemorySegment ResetPrinterA$address() {
        return ResetPrinterA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ResetPrinterA(HANDLE hPrinter, LPPRINTER_DEFAULTSA pDefault)
     * }
     */
    public static int ResetPrinterA(MemorySegment hPrinter, MemorySegment pDefault) {
        var mh$ = ResetPrinterA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ResetPrinterA", hPrinter, pDefault);
            }
            return (int)mh$.invokeExact(hPrinter, pDefault);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ResetPrinterW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ResetPrinterW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ResetPrinterW(HANDLE hPrinter, LPPRINTER_DEFAULTSW pDefault)
     * }
     */
    public static FunctionDescriptor ResetPrinterW$descriptor() {
        return ResetPrinterW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ResetPrinterW(HANDLE hPrinter, LPPRINTER_DEFAULTSW pDefault)
     * }
     */
    public static MethodHandle ResetPrinterW$handle() {
        return ResetPrinterW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ResetPrinterW(HANDLE hPrinter, LPPRINTER_DEFAULTSW pDefault)
     * }
     */
    public static MemorySegment ResetPrinterW$address() {
        return ResetPrinterW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ResetPrinterW(HANDLE hPrinter, LPPRINTER_DEFAULTSW pDefault)
     * }
     */
    public static int ResetPrinterW(MemorySegment hPrinter, MemorySegment pDefault) {
        var mh$ = ResetPrinterW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ResetPrinterW", hPrinter, pDefault);
            }
            return (int)mh$.invokeExact(hPrinter, pDefault);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetJobA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SetJobA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL SetJobA(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD Command)
     * }
     */
    public static FunctionDescriptor SetJobA$descriptor() {
        return SetJobA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL SetJobA(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD Command)
     * }
     */
    public static MethodHandle SetJobA$handle() {
        return SetJobA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL SetJobA(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD Command)
     * }
     */
    public static MemorySegment SetJobA$address() {
        return SetJobA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL SetJobA(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD Command)
     * }
     */
    public static int SetJobA(MemorySegment hPrinter, int JobId, int Level, MemorySegment pJob, int Command) {
        var mh$ = SetJobA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetJobA", hPrinter, JobId, Level, pJob, Command);
            }
            return (int)mh$.invokeExact(hPrinter, JobId, Level, pJob, Command);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetJobW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SetJobW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL SetJobW(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD Command)
     * }
     */
    public static FunctionDescriptor SetJobW$descriptor() {
        return SetJobW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL SetJobW(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD Command)
     * }
     */
    public static MethodHandle SetJobW$handle() {
        return SetJobW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL SetJobW(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD Command)
     * }
     */
    public static MemorySegment SetJobW$address() {
        return SetJobW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL SetJobW(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD Command)
     * }
     */
    public static int SetJobW(MemorySegment hPrinter, int JobId, int Level, MemorySegment pJob, int Command) {
        var mh$ = SetJobW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetJobW", hPrinter, JobId, Level, pJob, Command);
            }
            return (int)mh$.invokeExact(hPrinter, JobId, Level, pJob, Command);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetJobA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetJobA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetJobA(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor GetJobA$descriptor() {
        return GetJobA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetJobA(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle GetJobA$handle() {
        return GetJobA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetJobA(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment GetJobA$address() {
        return GetJobA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetJobA(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static int GetJobA(MemorySegment hPrinter, int JobId, int Level, MemorySegment pJob, int cbBuf, MemorySegment pcbNeeded) {
        var mh$ = GetJobA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetJobA", hPrinter, JobId, Level, pJob, cbBuf, pcbNeeded);
            }
            return (int)mh$.invokeExact(hPrinter, JobId, Level, pJob, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetJobW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetJobW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetJobW(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor GetJobW$descriptor() {
        return GetJobW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetJobW(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle GetJobW$handle() {
        return GetJobW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetJobW(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment GetJobW$address() {
        return GetJobW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetJobW(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static int GetJobW(MemorySegment hPrinter, int JobId, int Level, MemorySegment pJob, int cbBuf, MemorySegment pcbNeeded) {
        var mh$ = GetJobW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetJobW", hPrinter, JobId, Level, pJob, cbBuf, pcbNeeded);
            }
            return (int)mh$.invokeExact(hPrinter, JobId, Level, pJob, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumJobsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("EnumJobsA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumJobsA(HANDLE hPrinter, DWORD FirstJob, DWORD NoJobs, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static FunctionDescriptor EnumJobsA$descriptor() {
        return EnumJobsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumJobsA(HANDLE hPrinter, DWORD FirstJob, DWORD NoJobs, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MethodHandle EnumJobsA$handle() {
        return EnumJobsA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumJobsA(HANDLE hPrinter, DWORD FirstJob, DWORD NoJobs, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MemorySegment EnumJobsA$address() {
        return EnumJobsA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumJobsA(HANDLE hPrinter, DWORD FirstJob, DWORD NoJobs, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static int EnumJobsA(MemorySegment hPrinter, int FirstJob, int NoJobs, int Level, MemorySegment pJob, int cbBuf, MemorySegment pcbNeeded, MemorySegment pcReturned) {
        var mh$ = EnumJobsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumJobsA", hPrinter, FirstJob, NoJobs, Level, pJob, cbBuf, pcbNeeded, pcReturned);
            }
            return (int)mh$.invokeExact(hPrinter, FirstJob, NoJobs, Level, pJob, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumJobsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("EnumJobsW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumJobsW(HANDLE hPrinter, DWORD FirstJob, DWORD NoJobs, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static FunctionDescriptor EnumJobsW$descriptor() {
        return EnumJobsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumJobsW(HANDLE hPrinter, DWORD FirstJob, DWORD NoJobs, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MethodHandle EnumJobsW$handle() {
        return EnumJobsW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumJobsW(HANDLE hPrinter, DWORD FirstJob, DWORD NoJobs, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MemorySegment EnumJobsW$address() {
        return EnumJobsW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumJobsW(HANDLE hPrinter, DWORD FirstJob, DWORD NoJobs, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static int EnumJobsW(MemorySegment hPrinter, int FirstJob, int NoJobs, int Level, MemorySegment pJob, int cbBuf, MemorySegment pcbNeeded, MemorySegment pcReturned) {
        var mh$ = EnumJobsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumJobsW", hPrinter, FirstJob, NoJobs, Level, pJob, cbBuf, pcbNeeded, pcReturned);
            }
            return (int)mh$.invokeExact(hPrinter, FirstJob, NoJobs, Level, pJob, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddPrinterA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AddPrinterA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HANDLE AddPrinterA(LPSTR pName, DWORD Level, LPBYTE pPrinter)
     * }
     */
    public static FunctionDescriptor AddPrinterA$descriptor() {
        return AddPrinterA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HANDLE AddPrinterA(LPSTR pName, DWORD Level, LPBYTE pPrinter)
     * }
     */
    public static MethodHandle AddPrinterA$handle() {
        return AddPrinterA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HANDLE AddPrinterA(LPSTR pName, DWORD Level, LPBYTE pPrinter)
     * }
     */
    public static MemorySegment AddPrinterA$address() {
        return AddPrinterA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HANDLE AddPrinterA(LPSTR pName, DWORD Level, LPBYTE pPrinter)
     * }
     */
    public static MemorySegment AddPrinterA(MemorySegment pName, int Level, MemorySegment pPrinter) {
        var mh$ = AddPrinterA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddPrinterA", pName, Level, pPrinter);
            }
            return (MemorySegment)mh$.invokeExact(pName, Level, pPrinter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddPrinterW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AddPrinterW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HANDLE AddPrinterW(LPWSTR pName, DWORD Level, LPBYTE pPrinter)
     * }
     */
    public static FunctionDescriptor AddPrinterW$descriptor() {
        return AddPrinterW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HANDLE AddPrinterW(LPWSTR pName, DWORD Level, LPBYTE pPrinter)
     * }
     */
    public static MethodHandle AddPrinterW$handle() {
        return AddPrinterW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HANDLE AddPrinterW(LPWSTR pName, DWORD Level, LPBYTE pPrinter)
     * }
     */
    public static MemorySegment AddPrinterW$address() {
        return AddPrinterW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HANDLE AddPrinterW(LPWSTR pName, DWORD Level, LPBYTE pPrinter)
     * }
     */
    public static MemorySegment AddPrinterW(MemorySegment pName, int Level, MemorySegment pPrinter) {
        var mh$ = AddPrinterW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddPrinterW", pName, Level, pPrinter);
            }
            return (MemorySegment)mh$.invokeExact(pName, Level, pPrinter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrinter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DeletePrinter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeletePrinter(HANDLE hPrinter)
     * }
     */
    public static FunctionDescriptor DeletePrinter$descriptor() {
        return DeletePrinter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeletePrinter(HANDLE hPrinter)
     * }
     */
    public static MethodHandle DeletePrinter$handle() {
        return DeletePrinter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeletePrinter(HANDLE hPrinter)
     * }
     */
    public static MemorySegment DeletePrinter$address() {
        return DeletePrinter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeletePrinter(HANDLE hPrinter)
     * }
     */
    public static int DeletePrinter(MemorySegment hPrinter) {
        var mh$ = DeletePrinter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrinter", hPrinter);
            }
            return (int)mh$.invokeExact(hPrinter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetPrinterA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SetPrinterA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL SetPrinterA(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD Command)
     * }
     */
    public static FunctionDescriptor SetPrinterA$descriptor() {
        return SetPrinterA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL SetPrinterA(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD Command)
     * }
     */
    public static MethodHandle SetPrinterA$handle() {
        return SetPrinterA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL SetPrinterA(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD Command)
     * }
     */
    public static MemorySegment SetPrinterA$address() {
        return SetPrinterA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL SetPrinterA(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD Command)
     * }
     */
    public static int SetPrinterA(MemorySegment hPrinter, int Level, MemorySegment pPrinter, int Command) {
        var mh$ = SetPrinterA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetPrinterA", hPrinter, Level, pPrinter, Command);
            }
            return (int)mh$.invokeExact(hPrinter, Level, pPrinter, Command);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetPrinterW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SetPrinterW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL SetPrinterW(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD Command)
     * }
     */
    public static FunctionDescriptor SetPrinterW$descriptor() {
        return SetPrinterW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL SetPrinterW(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD Command)
     * }
     */
    public static MethodHandle SetPrinterW$handle() {
        return SetPrinterW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL SetPrinterW(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD Command)
     * }
     */
    public static MemorySegment SetPrinterW$address() {
        return SetPrinterW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL SetPrinterW(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD Command)
     * }
     */
    public static int SetPrinterW(MemorySegment hPrinter, int Level, MemorySegment pPrinter, int Command) {
        var mh$ = SetPrinterW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetPrinterW", hPrinter, Level, pPrinter, Command);
            }
            return (int)mh$.invokeExact(hPrinter, Level, pPrinter, Command);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetPrinterA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetPrinterA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetPrinterA(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor GetPrinterA$descriptor() {
        return GetPrinterA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetPrinterA(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle GetPrinterA$handle() {
        return GetPrinterA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetPrinterA(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment GetPrinterA$address() {
        return GetPrinterA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetPrinterA(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static int GetPrinterA(MemorySegment hPrinter, int Level, MemorySegment pPrinter, int cbBuf, MemorySegment pcbNeeded) {
        var mh$ = GetPrinterA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetPrinterA", hPrinter, Level, pPrinter, cbBuf, pcbNeeded);
            }
            return (int)mh$.invokeExact(hPrinter, Level, pPrinter, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetPrinterW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetPrinterW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetPrinterW(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor GetPrinterW$descriptor() {
        return GetPrinterW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetPrinterW(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle GetPrinterW$handle() {
        return GetPrinterW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetPrinterW(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment GetPrinterW$address() {
        return GetPrinterW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetPrinterW(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static int GetPrinterW(MemorySegment hPrinter, int Level, MemorySegment pPrinter, int cbBuf, MemorySegment pcbNeeded) {
        var mh$ = GetPrinterW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetPrinterW", hPrinter, Level, pPrinter, cbBuf, pcbNeeded);
            }
            return (int)mh$.invokeExact(hPrinter, Level, pPrinter, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddPrinterDriverA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AddPrinterDriverA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddPrinterDriverA(LPSTR pName, DWORD Level, LPBYTE pDriverInfo)
     * }
     */
    public static FunctionDescriptor AddPrinterDriverA$descriptor() {
        return AddPrinterDriverA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddPrinterDriverA(LPSTR pName, DWORD Level, LPBYTE pDriverInfo)
     * }
     */
    public static MethodHandle AddPrinterDriverA$handle() {
        return AddPrinterDriverA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddPrinterDriverA(LPSTR pName, DWORD Level, LPBYTE pDriverInfo)
     * }
     */
    public static MemorySegment AddPrinterDriverA$address() {
        return AddPrinterDriverA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddPrinterDriverA(LPSTR pName, DWORD Level, LPBYTE pDriverInfo)
     * }
     */
    public static int AddPrinterDriverA(MemorySegment pName, int Level, MemorySegment pDriverInfo) {
        var mh$ = AddPrinterDriverA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddPrinterDriverA", pName, Level, pDriverInfo);
            }
            return (int)mh$.invokeExact(pName, Level, pDriverInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddPrinterDriverW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AddPrinterDriverW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddPrinterDriverW(LPWSTR pName, DWORD Level, LPBYTE pDriverInfo)
     * }
     */
    public static FunctionDescriptor AddPrinterDriverW$descriptor() {
        return AddPrinterDriverW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddPrinterDriverW(LPWSTR pName, DWORD Level, LPBYTE pDriverInfo)
     * }
     */
    public static MethodHandle AddPrinterDriverW$handle() {
        return AddPrinterDriverW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddPrinterDriverW(LPWSTR pName, DWORD Level, LPBYTE pDriverInfo)
     * }
     */
    public static MemorySegment AddPrinterDriverW$address() {
        return AddPrinterDriverW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddPrinterDriverW(LPWSTR pName, DWORD Level, LPBYTE pDriverInfo)
     * }
     */
    public static int AddPrinterDriverW(MemorySegment pName, int Level, MemorySegment pDriverInfo) {
        var mh$ = AddPrinterDriverW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddPrinterDriverW", pName, Level, pDriverInfo);
            }
            return (int)mh$.invokeExact(pName, Level, pDriverInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddPrinterDriverExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AddPrinterDriverExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddPrinterDriverExA(LPSTR pName, DWORD Level, PBYTE lpbDriverInfo, DWORD dwFileCopyFlags)
     * }
     */
    public static FunctionDescriptor AddPrinterDriverExA$descriptor() {
        return AddPrinterDriverExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddPrinterDriverExA(LPSTR pName, DWORD Level, PBYTE lpbDriverInfo, DWORD dwFileCopyFlags)
     * }
     */
    public static MethodHandle AddPrinterDriverExA$handle() {
        return AddPrinterDriverExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddPrinterDriverExA(LPSTR pName, DWORD Level, PBYTE lpbDriverInfo, DWORD dwFileCopyFlags)
     * }
     */
    public static MemorySegment AddPrinterDriverExA$address() {
        return AddPrinterDriverExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddPrinterDriverExA(LPSTR pName, DWORD Level, PBYTE lpbDriverInfo, DWORD dwFileCopyFlags)
     * }
     */
    public static int AddPrinterDriverExA(MemorySegment pName, int Level, MemorySegment lpbDriverInfo, int dwFileCopyFlags) {
        var mh$ = AddPrinterDriverExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddPrinterDriverExA", pName, Level, lpbDriverInfo, dwFileCopyFlags);
            }
            return (int)mh$.invokeExact(pName, Level, lpbDriverInfo, dwFileCopyFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddPrinterDriverExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AddPrinterDriverExW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddPrinterDriverExW(LPWSTR pName, DWORD Level, PBYTE lpbDriverInfo, DWORD dwFileCopyFlags)
     * }
     */
    public static FunctionDescriptor AddPrinterDriverExW$descriptor() {
        return AddPrinterDriverExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddPrinterDriverExW(LPWSTR pName, DWORD Level, PBYTE lpbDriverInfo, DWORD dwFileCopyFlags)
     * }
     */
    public static MethodHandle AddPrinterDriverExW$handle() {
        return AddPrinterDriverExW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddPrinterDriverExW(LPWSTR pName, DWORD Level, PBYTE lpbDriverInfo, DWORD dwFileCopyFlags)
     * }
     */
    public static MemorySegment AddPrinterDriverExW$address() {
        return AddPrinterDriverExW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddPrinterDriverExW(LPWSTR pName, DWORD Level, PBYTE lpbDriverInfo, DWORD dwFileCopyFlags)
     * }
     */
    public static int AddPrinterDriverExW(MemorySegment pName, int Level, MemorySegment lpbDriverInfo, int dwFileCopyFlags) {
        var mh$ = AddPrinterDriverExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddPrinterDriverExW", pName, Level, lpbDriverInfo, dwFileCopyFlags);
            }
            return (int)mh$.invokeExact(pName, Level, lpbDriverInfo, dwFileCopyFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumPrinterDriversA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("EnumPrinterDriversA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumPrinterDriversA(LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static FunctionDescriptor EnumPrinterDriversA$descriptor() {
        return EnumPrinterDriversA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumPrinterDriversA(LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MethodHandle EnumPrinterDriversA$handle() {
        return EnumPrinterDriversA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumPrinterDriversA(LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MemorySegment EnumPrinterDriversA$address() {
        return EnumPrinterDriversA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumPrinterDriversA(LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static int EnumPrinterDriversA(MemorySegment pName, MemorySegment pEnvironment, int Level, MemorySegment pDriverInfo, int cbBuf, MemorySegment pcbNeeded, MemorySegment pcReturned) {
        var mh$ = EnumPrinterDriversA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumPrinterDriversA", pName, pEnvironment, Level, pDriverInfo, cbBuf, pcbNeeded, pcReturned);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, Level, pDriverInfo, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumPrinterDriversW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("EnumPrinterDriversW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumPrinterDriversW(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static FunctionDescriptor EnumPrinterDriversW$descriptor() {
        return EnumPrinterDriversW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumPrinterDriversW(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MethodHandle EnumPrinterDriversW$handle() {
        return EnumPrinterDriversW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumPrinterDriversW(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MemorySegment EnumPrinterDriversW$address() {
        return EnumPrinterDriversW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumPrinterDriversW(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static int EnumPrinterDriversW(MemorySegment pName, MemorySegment pEnvironment, int Level, MemorySegment pDriverInfo, int cbBuf, MemorySegment pcbNeeded, MemorySegment pcReturned) {
        var mh$ = EnumPrinterDriversW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumPrinterDriversW", pName, pEnvironment, Level, pDriverInfo, cbBuf, pcbNeeded, pcReturned);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, Level, pDriverInfo, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetPrinterDriverA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetPrinterDriverA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetPrinterDriverA(HANDLE hPrinter, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor GetPrinterDriverA$descriptor() {
        return GetPrinterDriverA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetPrinterDriverA(HANDLE hPrinter, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle GetPrinterDriverA$handle() {
        return GetPrinterDriverA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetPrinterDriverA(HANDLE hPrinter, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment GetPrinterDriverA$address() {
        return GetPrinterDriverA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetPrinterDriverA(HANDLE hPrinter, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static int GetPrinterDriverA(MemorySegment hPrinter, MemorySegment pEnvironment, int Level, MemorySegment pDriverInfo, int cbBuf, MemorySegment pcbNeeded) {
        var mh$ = GetPrinterDriverA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetPrinterDriverA", hPrinter, pEnvironment, Level, pDriverInfo, cbBuf, pcbNeeded);
            }
            return (int)mh$.invokeExact(hPrinter, pEnvironment, Level, pDriverInfo, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetPrinterDriverW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetPrinterDriverW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetPrinterDriverW(HANDLE hPrinter, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor GetPrinterDriverW$descriptor() {
        return GetPrinterDriverW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetPrinterDriverW(HANDLE hPrinter, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle GetPrinterDriverW$handle() {
        return GetPrinterDriverW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetPrinterDriverW(HANDLE hPrinter, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment GetPrinterDriverW$address() {
        return GetPrinterDriverW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetPrinterDriverW(HANDLE hPrinter, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static int GetPrinterDriverW(MemorySegment hPrinter, MemorySegment pEnvironment, int Level, MemorySegment pDriverInfo, int cbBuf, MemorySegment pcbNeeded) {
        var mh$ = GetPrinterDriverW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetPrinterDriverW", hPrinter, pEnvironment, Level, pDriverInfo, cbBuf, pcbNeeded);
            }
            return (int)mh$.invokeExact(hPrinter, pEnvironment, Level, pDriverInfo, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetPrinterDriverDirectoryA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetPrinterDriverDirectoryA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetPrinterDriverDirectoryA(LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverDirectory, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor GetPrinterDriverDirectoryA$descriptor() {
        return GetPrinterDriverDirectoryA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetPrinterDriverDirectoryA(LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverDirectory, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle GetPrinterDriverDirectoryA$handle() {
        return GetPrinterDriverDirectoryA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetPrinterDriverDirectoryA(LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverDirectory, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment GetPrinterDriverDirectoryA$address() {
        return GetPrinterDriverDirectoryA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetPrinterDriverDirectoryA(LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverDirectory, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static int GetPrinterDriverDirectoryA(MemorySegment pName, MemorySegment pEnvironment, int Level, MemorySegment pDriverDirectory, int cbBuf, MemorySegment pcbNeeded) {
        var mh$ = GetPrinterDriverDirectoryA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetPrinterDriverDirectoryA", pName, pEnvironment, Level, pDriverDirectory, cbBuf, pcbNeeded);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, Level, pDriverDirectory, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetPrinterDriverDirectoryW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetPrinterDriverDirectoryW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetPrinterDriverDirectoryW(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverDirectory, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor GetPrinterDriverDirectoryW$descriptor() {
        return GetPrinterDriverDirectoryW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetPrinterDriverDirectoryW(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverDirectory, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle GetPrinterDriverDirectoryW$handle() {
        return GetPrinterDriverDirectoryW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetPrinterDriverDirectoryW(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverDirectory, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment GetPrinterDriverDirectoryW$address() {
        return GetPrinterDriverDirectoryW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetPrinterDriverDirectoryW(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverDirectory, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static int GetPrinterDriverDirectoryW(MemorySegment pName, MemorySegment pEnvironment, int Level, MemorySegment pDriverDirectory, int cbBuf, MemorySegment pcbNeeded) {
        var mh$ = GetPrinterDriverDirectoryW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetPrinterDriverDirectoryW", pName, pEnvironment, Level, pDriverDirectory, cbBuf, pcbNeeded);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, Level, pDriverDirectory, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrinterDriverA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DeletePrinterDriverA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeletePrinterDriverA(LPSTR pName, LPSTR pEnvironment, LPSTR pDriverName)
     * }
     */
    public static FunctionDescriptor DeletePrinterDriverA$descriptor() {
        return DeletePrinterDriverA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeletePrinterDriverA(LPSTR pName, LPSTR pEnvironment, LPSTR pDriverName)
     * }
     */
    public static MethodHandle DeletePrinterDriverA$handle() {
        return DeletePrinterDriverA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeletePrinterDriverA(LPSTR pName, LPSTR pEnvironment, LPSTR pDriverName)
     * }
     */
    public static MemorySegment DeletePrinterDriverA$address() {
        return DeletePrinterDriverA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeletePrinterDriverA(LPSTR pName, LPSTR pEnvironment, LPSTR pDriverName)
     * }
     */
    public static int DeletePrinterDriverA(MemorySegment pName, MemorySegment pEnvironment, MemorySegment pDriverName) {
        var mh$ = DeletePrinterDriverA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrinterDriverA", pName, pEnvironment, pDriverName);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, pDriverName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrinterDriverW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DeletePrinterDriverW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeletePrinterDriverW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pDriverName)
     * }
     */
    public static FunctionDescriptor DeletePrinterDriverW$descriptor() {
        return DeletePrinterDriverW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeletePrinterDriverW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pDriverName)
     * }
     */
    public static MethodHandle DeletePrinterDriverW$handle() {
        return DeletePrinterDriverW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeletePrinterDriverW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pDriverName)
     * }
     */
    public static MemorySegment DeletePrinterDriverW$address() {
        return DeletePrinterDriverW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeletePrinterDriverW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pDriverName)
     * }
     */
    public static int DeletePrinterDriverW(MemorySegment pName, MemorySegment pEnvironment, MemorySegment pDriverName) {
        var mh$ = DeletePrinterDriverW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrinterDriverW", pName, pEnvironment, pDriverName);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, pDriverName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrinterDriverExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DeletePrinterDriverExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeletePrinterDriverExA(LPSTR pName, LPSTR pEnvironment, LPSTR pDriverName, DWORD dwDeleteFlag, DWORD dwVersionFlag)
     * }
     */
    public static FunctionDescriptor DeletePrinterDriverExA$descriptor() {
        return DeletePrinterDriverExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeletePrinterDriverExA(LPSTR pName, LPSTR pEnvironment, LPSTR pDriverName, DWORD dwDeleteFlag, DWORD dwVersionFlag)
     * }
     */
    public static MethodHandle DeletePrinterDriverExA$handle() {
        return DeletePrinterDriverExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeletePrinterDriverExA(LPSTR pName, LPSTR pEnvironment, LPSTR pDriverName, DWORD dwDeleteFlag, DWORD dwVersionFlag)
     * }
     */
    public static MemorySegment DeletePrinterDriverExA$address() {
        return DeletePrinterDriverExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeletePrinterDriverExA(LPSTR pName, LPSTR pEnvironment, LPSTR pDriverName, DWORD dwDeleteFlag, DWORD dwVersionFlag)
     * }
     */
    public static int DeletePrinterDriverExA(MemorySegment pName, MemorySegment pEnvironment, MemorySegment pDriverName, int dwDeleteFlag, int dwVersionFlag) {
        var mh$ = DeletePrinterDriverExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrinterDriverExA", pName, pEnvironment, pDriverName, dwDeleteFlag, dwVersionFlag);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, pDriverName, dwDeleteFlag, dwVersionFlag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrinterDriverExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DeletePrinterDriverExW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeletePrinterDriverExW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pDriverName, DWORD dwDeleteFlag, DWORD dwVersionFlag)
     * }
     */
    public static FunctionDescriptor DeletePrinterDriverExW$descriptor() {
        return DeletePrinterDriverExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeletePrinterDriverExW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pDriverName, DWORD dwDeleteFlag, DWORD dwVersionFlag)
     * }
     */
    public static MethodHandle DeletePrinterDriverExW$handle() {
        return DeletePrinterDriverExW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeletePrinterDriverExW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pDriverName, DWORD dwDeleteFlag, DWORD dwVersionFlag)
     * }
     */
    public static MemorySegment DeletePrinterDriverExW$address() {
        return DeletePrinterDriverExW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeletePrinterDriverExW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pDriverName, DWORD dwDeleteFlag, DWORD dwVersionFlag)
     * }
     */
    public static int DeletePrinterDriverExW(MemorySegment pName, MemorySegment pEnvironment, MemorySegment pDriverName, int dwDeleteFlag, int dwVersionFlag) {
        var mh$ = DeletePrinterDriverExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrinterDriverExW", pName, pEnvironment, pDriverName, dwDeleteFlag, dwVersionFlag);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, pDriverName, dwDeleteFlag, dwVersionFlag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddPrintProcessorA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AddPrintProcessorA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddPrintProcessorA(LPSTR pName, LPSTR pEnvironment, LPSTR pPathName, LPSTR pPrintProcessorName)
     * }
     */
    public static FunctionDescriptor AddPrintProcessorA$descriptor() {
        return AddPrintProcessorA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddPrintProcessorA(LPSTR pName, LPSTR pEnvironment, LPSTR pPathName, LPSTR pPrintProcessorName)
     * }
     */
    public static MethodHandle AddPrintProcessorA$handle() {
        return AddPrintProcessorA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddPrintProcessorA(LPSTR pName, LPSTR pEnvironment, LPSTR pPathName, LPSTR pPrintProcessorName)
     * }
     */
    public static MemorySegment AddPrintProcessorA$address() {
        return AddPrintProcessorA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddPrintProcessorA(LPSTR pName, LPSTR pEnvironment, LPSTR pPathName, LPSTR pPrintProcessorName)
     * }
     */
    public static int AddPrintProcessorA(MemorySegment pName, MemorySegment pEnvironment, MemorySegment pPathName, MemorySegment pPrintProcessorName) {
        var mh$ = AddPrintProcessorA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddPrintProcessorA", pName, pEnvironment, pPathName, pPrintProcessorName);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, pPathName, pPrintProcessorName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddPrintProcessorW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AddPrintProcessorW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddPrintProcessorW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pPathName, LPWSTR pPrintProcessorName)
     * }
     */
    public static FunctionDescriptor AddPrintProcessorW$descriptor() {
        return AddPrintProcessorW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddPrintProcessorW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pPathName, LPWSTR pPrintProcessorName)
     * }
     */
    public static MethodHandle AddPrintProcessorW$handle() {
        return AddPrintProcessorW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddPrintProcessorW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pPathName, LPWSTR pPrintProcessorName)
     * }
     */
    public static MemorySegment AddPrintProcessorW$address() {
        return AddPrintProcessorW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddPrintProcessorW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pPathName, LPWSTR pPrintProcessorName)
     * }
     */
    public static int AddPrintProcessorW(MemorySegment pName, MemorySegment pEnvironment, MemorySegment pPathName, MemorySegment pPrintProcessorName) {
        var mh$ = AddPrintProcessorW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddPrintProcessorW", pName, pEnvironment, pPathName, pPrintProcessorName);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, pPathName, pPrintProcessorName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumPrintProcessorsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("EnumPrintProcessorsA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumPrintProcessorsA(LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static FunctionDescriptor EnumPrintProcessorsA$descriptor() {
        return EnumPrintProcessorsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumPrintProcessorsA(LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MethodHandle EnumPrintProcessorsA$handle() {
        return EnumPrintProcessorsA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumPrintProcessorsA(LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MemorySegment EnumPrintProcessorsA$address() {
        return EnumPrintProcessorsA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumPrintProcessorsA(LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static int EnumPrintProcessorsA(MemorySegment pName, MemorySegment pEnvironment, int Level, MemorySegment pPrintProcessorInfo, int cbBuf, MemorySegment pcbNeeded, MemorySegment pcReturned) {
        var mh$ = EnumPrintProcessorsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumPrintProcessorsA", pName, pEnvironment, Level, pPrintProcessorInfo, cbBuf, pcbNeeded, pcReturned);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, Level, pPrintProcessorInfo, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumPrintProcessorsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("EnumPrintProcessorsW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumPrintProcessorsW(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static FunctionDescriptor EnumPrintProcessorsW$descriptor() {
        return EnumPrintProcessorsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumPrintProcessorsW(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MethodHandle EnumPrintProcessorsW$handle() {
        return EnumPrintProcessorsW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumPrintProcessorsW(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MemorySegment EnumPrintProcessorsW$address() {
        return EnumPrintProcessorsW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumPrintProcessorsW(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static int EnumPrintProcessorsW(MemorySegment pName, MemorySegment pEnvironment, int Level, MemorySegment pPrintProcessorInfo, int cbBuf, MemorySegment pcbNeeded, MemorySegment pcReturned) {
        var mh$ = EnumPrintProcessorsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumPrintProcessorsW", pName, pEnvironment, Level, pPrintProcessorInfo, cbBuf, pcbNeeded, pcReturned);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, Level, pPrintProcessorInfo, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetPrintProcessorDirectoryA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetPrintProcessorDirectoryA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetPrintProcessorDirectoryA(LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor GetPrintProcessorDirectoryA$descriptor() {
        return GetPrintProcessorDirectoryA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetPrintProcessorDirectoryA(LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle GetPrintProcessorDirectoryA$handle() {
        return GetPrintProcessorDirectoryA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetPrintProcessorDirectoryA(LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment GetPrintProcessorDirectoryA$address() {
        return GetPrintProcessorDirectoryA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetPrintProcessorDirectoryA(LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static int GetPrintProcessorDirectoryA(MemorySegment pName, MemorySegment pEnvironment, int Level, MemorySegment pPrintProcessorInfo, int cbBuf, MemorySegment pcbNeeded) {
        var mh$ = GetPrintProcessorDirectoryA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetPrintProcessorDirectoryA", pName, pEnvironment, Level, pPrintProcessorInfo, cbBuf, pcbNeeded);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, Level, pPrintProcessorInfo, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetPrintProcessorDirectoryW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetPrintProcessorDirectoryW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetPrintProcessorDirectoryW(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor GetPrintProcessorDirectoryW$descriptor() {
        return GetPrintProcessorDirectoryW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetPrintProcessorDirectoryW(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle GetPrintProcessorDirectoryW$handle() {
        return GetPrintProcessorDirectoryW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetPrintProcessorDirectoryW(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment GetPrintProcessorDirectoryW$address() {
        return GetPrintProcessorDirectoryW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetPrintProcessorDirectoryW(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static int GetPrintProcessorDirectoryW(MemorySegment pName, MemorySegment pEnvironment, int Level, MemorySegment pPrintProcessorInfo, int cbBuf, MemorySegment pcbNeeded) {
        var mh$ = GetPrintProcessorDirectoryW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetPrintProcessorDirectoryW", pName, pEnvironment, Level, pPrintProcessorInfo, cbBuf, pcbNeeded);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, Level, pPrintProcessorInfo, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumPrintProcessorDatatypesA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("EnumPrintProcessorDatatypesA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumPrintProcessorDatatypesA(LPSTR pName, LPSTR pPrintProcessorName, DWORD Level, LPBYTE pDatatypes, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static FunctionDescriptor EnumPrintProcessorDatatypesA$descriptor() {
        return EnumPrintProcessorDatatypesA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumPrintProcessorDatatypesA(LPSTR pName, LPSTR pPrintProcessorName, DWORD Level, LPBYTE pDatatypes, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MethodHandle EnumPrintProcessorDatatypesA$handle() {
        return EnumPrintProcessorDatatypesA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumPrintProcessorDatatypesA(LPSTR pName, LPSTR pPrintProcessorName, DWORD Level, LPBYTE pDatatypes, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MemorySegment EnumPrintProcessorDatatypesA$address() {
        return EnumPrintProcessorDatatypesA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumPrintProcessorDatatypesA(LPSTR pName, LPSTR pPrintProcessorName, DWORD Level, LPBYTE pDatatypes, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static int EnumPrintProcessorDatatypesA(MemorySegment pName, MemorySegment pPrintProcessorName, int Level, MemorySegment pDatatypes, int cbBuf, MemorySegment pcbNeeded, MemorySegment pcReturned) {
        var mh$ = EnumPrintProcessorDatatypesA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumPrintProcessorDatatypesA", pName, pPrintProcessorName, Level, pDatatypes, cbBuf, pcbNeeded, pcReturned);
            }
            return (int)mh$.invokeExact(pName, pPrintProcessorName, Level, pDatatypes, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumPrintProcessorDatatypesW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("EnumPrintProcessorDatatypesW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumPrintProcessorDatatypesW(LPWSTR pName, LPWSTR pPrintProcessorName, DWORD Level, LPBYTE pDatatypes, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static FunctionDescriptor EnumPrintProcessorDatatypesW$descriptor() {
        return EnumPrintProcessorDatatypesW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumPrintProcessorDatatypesW(LPWSTR pName, LPWSTR pPrintProcessorName, DWORD Level, LPBYTE pDatatypes, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MethodHandle EnumPrintProcessorDatatypesW$handle() {
        return EnumPrintProcessorDatatypesW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumPrintProcessorDatatypesW(LPWSTR pName, LPWSTR pPrintProcessorName, DWORD Level, LPBYTE pDatatypes, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MemorySegment EnumPrintProcessorDatatypesW$address() {
        return EnumPrintProcessorDatatypesW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumPrintProcessorDatatypesW(LPWSTR pName, LPWSTR pPrintProcessorName, DWORD Level, LPBYTE pDatatypes, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static int EnumPrintProcessorDatatypesW(MemorySegment pName, MemorySegment pPrintProcessorName, int Level, MemorySegment pDatatypes, int cbBuf, MemorySegment pcbNeeded, MemorySegment pcReturned) {
        var mh$ = EnumPrintProcessorDatatypesW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumPrintProcessorDatatypesW", pName, pPrintProcessorName, Level, pDatatypes, cbBuf, pcbNeeded, pcReturned);
            }
            return (int)mh$.invokeExact(pName, pPrintProcessorName, Level, pDatatypes, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrintProcessorA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DeletePrintProcessorA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeletePrintProcessorA(LPSTR pName, LPSTR pEnvironment, LPSTR pPrintProcessorName)
     * }
     */
    public static FunctionDescriptor DeletePrintProcessorA$descriptor() {
        return DeletePrintProcessorA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeletePrintProcessorA(LPSTR pName, LPSTR pEnvironment, LPSTR pPrintProcessorName)
     * }
     */
    public static MethodHandle DeletePrintProcessorA$handle() {
        return DeletePrintProcessorA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeletePrintProcessorA(LPSTR pName, LPSTR pEnvironment, LPSTR pPrintProcessorName)
     * }
     */
    public static MemorySegment DeletePrintProcessorA$address() {
        return DeletePrintProcessorA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeletePrintProcessorA(LPSTR pName, LPSTR pEnvironment, LPSTR pPrintProcessorName)
     * }
     */
    public static int DeletePrintProcessorA(MemorySegment pName, MemorySegment pEnvironment, MemorySegment pPrintProcessorName) {
        var mh$ = DeletePrintProcessorA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrintProcessorA", pName, pEnvironment, pPrintProcessorName);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, pPrintProcessorName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrintProcessorW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DeletePrintProcessorW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeletePrintProcessorW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pPrintProcessorName)
     * }
     */
    public static FunctionDescriptor DeletePrintProcessorW$descriptor() {
        return DeletePrintProcessorW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeletePrintProcessorW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pPrintProcessorName)
     * }
     */
    public static MethodHandle DeletePrintProcessorW$handle() {
        return DeletePrintProcessorW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeletePrintProcessorW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pPrintProcessorName)
     * }
     */
    public static MemorySegment DeletePrintProcessorW$address() {
        return DeletePrintProcessorW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeletePrintProcessorW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pPrintProcessorName)
     * }
     */
    public static int DeletePrintProcessorW(MemorySegment pName, MemorySegment pEnvironment, MemorySegment pPrintProcessorName) {
        var mh$ = DeletePrintProcessorW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrintProcessorW", pName, pEnvironment, pPrintProcessorName);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, pPrintProcessorName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StartDocPrinterA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("StartDocPrinterA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD StartDocPrinterA(HANDLE hPrinter, DWORD Level, LPBYTE pDocInfo)
     * }
     */
    public static FunctionDescriptor StartDocPrinterA$descriptor() {
        return StartDocPrinterA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD StartDocPrinterA(HANDLE hPrinter, DWORD Level, LPBYTE pDocInfo)
     * }
     */
    public static MethodHandle StartDocPrinterA$handle() {
        return StartDocPrinterA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD StartDocPrinterA(HANDLE hPrinter, DWORD Level, LPBYTE pDocInfo)
     * }
     */
    public static MemorySegment StartDocPrinterA$address() {
        return StartDocPrinterA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD StartDocPrinterA(HANDLE hPrinter, DWORD Level, LPBYTE pDocInfo)
     * }
     */
    public static int StartDocPrinterA(MemorySegment hPrinter, int Level, MemorySegment pDocInfo) {
        var mh$ = StartDocPrinterA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StartDocPrinterA", hPrinter, Level, pDocInfo);
            }
            return (int)mh$.invokeExact(hPrinter, Level, pDocInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StartDocPrinterW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("StartDocPrinterW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD StartDocPrinterW(HANDLE hPrinter, DWORD Level, LPBYTE pDocInfo)
     * }
     */
    public static FunctionDescriptor StartDocPrinterW$descriptor() {
        return StartDocPrinterW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD StartDocPrinterW(HANDLE hPrinter, DWORD Level, LPBYTE pDocInfo)
     * }
     */
    public static MethodHandle StartDocPrinterW$handle() {
        return StartDocPrinterW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD StartDocPrinterW(HANDLE hPrinter, DWORD Level, LPBYTE pDocInfo)
     * }
     */
    public static MemorySegment StartDocPrinterW$address() {
        return StartDocPrinterW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD StartDocPrinterW(HANDLE hPrinter, DWORD Level, LPBYTE pDocInfo)
     * }
     */
    public static int StartDocPrinterW(MemorySegment hPrinter, int Level, MemorySegment pDocInfo) {
        var mh$ = StartDocPrinterW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StartDocPrinterW", hPrinter, Level, pDocInfo);
            }
            return (int)mh$.invokeExact(hPrinter, Level, pDocInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StartPagePrinter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("StartPagePrinter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL StartPagePrinter(HANDLE hPrinter)
     * }
     */
    public static FunctionDescriptor StartPagePrinter$descriptor() {
        return StartPagePrinter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL StartPagePrinter(HANDLE hPrinter)
     * }
     */
    public static MethodHandle StartPagePrinter$handle() {
        return StartPagePrinter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL StartPagePrinter(HANDLE hPrinter)
     * }
     */
    public static MemorySegment StartPagePrinter$address() {
        return StartPagePrinter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL StartPagePrinter(HANDLE hPrinter)
     * }
     */
    public static int StartPagePrinter(MemorySegment hPrinter) {
        var mh$ = StartPagePrinter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StartPagePrinter", hPrinter);
            }
            return (int)mh$.invokeExact(hPrinter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WritePrinter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("WritePrinter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL WritePrinter(HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf, LPDWORD pcWritten)
     * }
     */
    public static FunctionDescriptor WritePrinter$descriptor() {
        return WritePrinter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL WritePrinter(HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf, LPDWORD pcWritten)
     * }
     */
    public static MethodHandle WritePrinter$handle() {
        return WritePrinter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL WritePrinter(HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf, LPDWORD pcWritten)
     * }
     */
    public static MemorySegment WritePrinter$address() {
        return WritePrinter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL WritePrinter(HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf, LPDWORD pcWritten)
     * }
     */
    public static int WritePrinter(MemorySegment hPrinter, MemorySegment pBuf, int cbBuf, MemorySegment pcWritten) {
        var mh$ = WritePrinter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WritePrinter", hPrinter, pBuf, cbBuf, pcWritten);
            }
            return (int)mh$.invokeExact(hPrinter, pBuf, cbBuf, pcWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FlushPrinter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("FlushPrinter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL FlushPrinter(HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf, LPDWORD pcWritten, DWORD cSleep)
     * }
     */
    public static FunctionDescriptor FlushPrinter$descriptor() {
        return FlushPrinter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL FlushPrinter(HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf, LPDWORD pcWritten, DWORD cSleep)
     * }
     */
    public static MethodHandle FlushPrinter$handle() {
        return FlushPrinter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL FlushPrinter(HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf, LPDWORD pcWritten, DWORD cSleep)
     * }
     */
    public static MemorySegment FlushPrinter$address() {
        return FlushPrinter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL FlushPrinter(HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf, LPDWORD pcWritten, DWORD cSleep)
     * }
     */
    public static int FlushPrinter(MemorySegment hPrinter, MemorySegment pBuf, int cbBuf, MemorySegment pcWritten, int cSleep) {
        var mh$ = FlushPrinter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FlushPrinter", hPrinter, pBuf, cbBuf, pcWritten, cSleep);
            }
            return (int)mh$.invokeExact(hPrinter, pBuf, cbBuf, pcWritten, cSleep);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EndPagePrinter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("EndPagePrinter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EndPagePrinter(HANDLE hPrinter)
     * }
     */
    public static FunctionDescriptor EndPagePrinter$descriptor() {
        return EndPagePrinter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EndPagePrinter(HANDLE hPrinter)
     * }
     */
    public static MethodHandle EndPagePrinter$handle() {
        return EndPagePrinter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EndPagePrinter(HANDLE hPrinter)
     * }
     */
    public static MemorySegment EndPagePrinter$address() {
        return EndPagePrinter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EndPagePrinter(HANDLE hPrinter)
     * }
     */
    public static int EndPagePrinter(MemorySegment hPrinter) {
        var mh$ = EndPagePrinter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EndPagePrinter", hPrinter);
            }
            return (int)mh$.invokeExact(hPrinter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AbortPrinter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AbortPrinter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AbortPrinter(HANDLE hPrinter)
     * }
     */
    public static FunctionDescriptor AbortPrinter$descriptor() {
        return AbortPrinter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AbortPrinter(HANDLE hPrinter)
     * }
     */
    public static MethodHandle AbortPrinter$handle() {
        return AbortPrinter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AbortPrinter(HANDLE hPrinter)
     * }
     */
    public static MemorySegment AbortPrinter$address() {
        return AbortPrinter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AbortPrinter(HANDLE hPrinter)
     * }
     */
    public static int AbortPrinter(MemorySegment hPrinter) {
        var mh$ = AbortPrinter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AbortPrinter", hPrinter);
            }
            return (int)mh$.invokeExact(hPrinter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ReadPrinter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ReadPrinter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ReadPrinter(HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf, LPDWORD pNoBytesRead)
     * }
     */
    public static FunctionDescriptor ReadPrinter$descriptor() {
        return ReadPrinter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ReadPrinter(HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf, LPDWORD pNoBytesRead)
     * }
     */
    public static MethodHandle ReadPrinter$handle() {
        return ReadPrinter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ReadPrinter(HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf, LPDWORD pNoBytesRead)
     * }
     */
    public static MemorySegment ReadPrinter$address() {
        return ReadPrinter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ReadPrinter(HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf, LPDWORD pNoBytesRead)
     * }
     */
    public static int ReadPrinter(MemorySegment hPrinter, MemorySegment pBuf, int cbBuf, MemorySegment pNoBytesRead) {
        var mh$ = ReadPrinter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ReadPrinter", hPrinter, pBuf, cbBuf, pNoBytesRead);
            }
            return (int)mh$.invokeExact(hPrinter, pBuf, cbBuf, pNoBytesRead);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EndDocPrinter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("EndDocPrinter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EndDocPrinter(HANDLE hPrinter)
     * }
     */
    public static FunctionDescriptor EndDocPrinter$descriptor() {
        return EndDocPrinter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EndDocPrinter(HANDLE hPrinter)
     * }
     */
    public static MethodHandle EndDocPrinter$handle() {
        return EndDocPrinter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EndDocPrinter(HANDLE hPrinter)
     * }
     */
    public static MemorySegment EndDocPrinter$address() {
        return EndDocPrinter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EndDocPrinter(HANDLE hPrinter)
     * }
     */
    public static int EndDocPrinter(MemorySegment hPrinter) {
        var mh$ = EndDocPrinter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EndDocPrinter", hPrinter);
            }
            return (int)mh$.invokeExact(hPrinter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddJobA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AddJobA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddJobA(HANDLE hPrinter, DWORD Level, LPBYTE pData, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor AddJobA$descriptor() {
        return AddJobA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddJobA(HANDLE hPrinter, DWORD Level, LPBYTE pData, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle AddJobA$handle() {
        return AddJobA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddJobA(HANDLE hPrinter, DWORD Level, LPBYTE pData, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment AddJobA$address() {
        return AddJobA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddJobA(HANDLE hPrinter, DWORD Level, LPBYTE pData, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static int AddJobA(MemorySegment hPrinter, int Level, MemorySegment pData, int cbBuf, MemorySegment pcbNeeded) {
        var mh$ = AddJobA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddJobA", hPrinter, Level, pData, cbBuf, pcbNeeded);
            }
            return (int)mh$.invokeExact(hPrinter, Level, pData, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddJobW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AddJobW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddJobW(HANDLE hPrinter, DWORD Level, LPBYTE pData, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor AddJobW$descriptor() {
        return AddJobW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddJobW(HANDLE hPrinter, DWORD Level, LPBYTE pData, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle AddJobW$handle() {
        return AddJobW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddJobW(HANDLE hPrinter, DWORD Level, LPBYTE pData, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment AddJobW$address() {
        return AddJobW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddJobW(HANDLE hPrinter, DWORD Level, LPBYTE pData, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static int AddJobW(MemorySegment hPrinter, int Level, MemorySegment pData, int cbBuf, MemorySegment pcbNeeded) {
        var mh$ = AddJobW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddJobW", hPrinter, Level, pData, cbBuf, pcbNeeded);
            }
            return (int)mh$.invokeExact(hPrinter, Level, pData, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ScheduleJob {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ScheduleJob");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ScheduleJob(HANDLE hPrinter, DWORD JobId)
     * }
     */
    public static FunctionDescriptor ScheduleJob$descriptor() {
        return ScheduleJob.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ScheduleJob(HANDLE hPrinter, DWORD JobId)
     * }
     */
    public static MethodHandle ScheduleJob$handle() {
        return ScheduleJob.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ScheduleJob(HANDLE hPrinter, DWORD JobId)
     * }
     */
    public static MemorySegment ScheduleJob$address() {
        return ScheduleJob.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ScheduleJob(HANDLE hPrinter, DWORD JobId)
     * }
     */
    public static int ScheduleJob(MemorySegment hPrinter, int JobId) {
        var mh$ = ScheduleJob.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ScheduleJob", hPrinter, JobId);
            }
            return (int)mh$.invokeExact(hPrinter, JobId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PrinterProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("PrinterProperties");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL PrinterProperties(HWND hWnd, HANDLE hPrinter)
     * }
     */
    public static FunctionDescriptor PrinterProperties$descriptor() {
        return PrinterProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL PrinterProperties(HWND hWnd, HANDLE hPrinter)
     * }
     */
    public static MethodHandle PrinterProperties$handle() {
        return PrinterProperties.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL PrinterProperties(HWND hWnd, HANDLE hPrinter)
     * }
     */
    public static MemorySegment PrinterProperties$address() {
        return PrinterProperties.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL PrinterProperties(HWND hWnd, HANDLE hPrinter)
     * }
     */
    public static int PrinterProperties(MemorySegment hWnd, MemorySegment hPrinter) {
        var mh$ = PrinterProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PrinterProperties", hWnd, hPrinter);
            }
            return (int)mh$.invokeExact(hWnd, hPrinter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DocumentPropertiesA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DocumentPropertiesA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LONG DocumentPropertiesA(HWND hWnd, HANDLE hPrinter, LPSTR pDeviceName, PDEVMODEA pDevModeOutput, PDEVMODEA pDevModeInput, DWORD fMode)
     * }
     */
    public static FunctionDescriptor DocumentPropertiesA$descriptor() {
        return DocumentPropertiesA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LONG DocumentPropertiesA(HWND hWnd, HANDLE hPrinter, LPSTR pDeviceName, PDEVMODEA pDevModeOutput, PDEVMODEA pDevModeInput, DWORD fMode)
     * }
     */
    public static MethodHandle DocumentPropertiesA$handle() {
        return DocumentPropertiesA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * LONG DocumentPropertiesA(HWND hWnd, HANDLE hPrinter, LPSTR pDeviceName, PDEVMODEA pDevModeOutput, PDEVMODEA pDevModeInput, DWORD fMode)
     * }
     */
    public static MemorySegment DocumentPropertiesA$address() {
        return DocumentPropertiesA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * LONG DocumentPropertiesA(HWND hWnd, HANDLE hPrinter, LPSTR pDeviceName, PDEVMODEA pDevModeOutput, PDEVMODEA pDevModeInput, DWORD fMode)
     * }
     */
    public static int DocumentPropertiesA(MemorySegment hWnd, MemorySegment hPrinter, MemorySegment pDeviceName, MemorySegment pDevModeOutput, MemorySegment pDevModeInput, int fMode) {
        var mh$ = DocumentPropertiesA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DocumentPropertiesA", hWnd, hPrinter, pDeviceName, pDevModeOutput, pDevModeInput, fMode);
            }
            return (int)mh$.invokeExact(hWnd, hPrinter, pDeviceName, pDevModeOutput, pDevModeInput, fMode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DocumentPropertiesW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DocumentPropertiesW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LONG DocumentPropertiesW(HWND hWnd, HANDLE hPrinter, LPWSTR pDeviceName, PDEVMODEW pDevModeOutput, PDEVMODEW pDevModeInput, DWORD fMode)
     * }
     */
    public static FunctionDescriptor DocumentPropertiesW$descriptor() {
        return DocumentPropertiesW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LONG DocumentPropertiesW(HWND hWnd, HANDLE hPrinter, LPWSTR pDeviceName, PDEVMODEW pDevModeOutput, PDEVMODEW pDevModeInput, DWORD fMode)
     * }
     */
    public static MethodHandle DocumentPropertiesW$handle() {
        return DocumentPropertiesW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * LONG DocumentPropertiesW(HWND hWnd, HANDLE hPrinter, LPWSTR pDeviceName, PDEVMODEW pDevModeOutput, PDEVMODEW pDevModeInput, DWORD fMode)
     * }
     */
    public static MemorySegment DocumentPropertiesW$address() {
        return DocumentPropertiesW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * LONG DocumentPropertiesW(HWND hWnd, HANDLE hPrinter, LPWSTR pDeviceName, PDEVMODEW pDevModeOutput, PDEVMODEW pDevModeInput, DWORD fMode)
     * }
     */
    public static int DocumentPropertiesW(MemorySegment hWnd, MemorySegment hPrinter, MemorySegment pDeviceName, MemorySegment pDevModeOutput, MemorySegment pDevModeInput, int fMode) {
        var mh$ = DocumentPropertiesW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DocumentPropertiesW", hWnd, hPrinter, pDeviceName, pDevModeOutput, pDevModeInput, fMode);
            }
            return (int)mh$.invokeExact(hWnd, hPrinter, pDeviceName, pDevModeOutput, pDevModeInput, fMode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AdvancedDocumentPropertiesA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AdvancedDocumentPropertiesA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LONG AdvancedDocumentPropertiesA(HWND hWnd, HANDLE hPrinter, LPSTR pDeviceName, PDEVMODEA pDevModeOutput, PDEVMODEA pDevModeInput)
     * }
     */
    public static FunctionDescriptor AdvancedDocumentPropertiesA$descriptor() {
        return AdvancedDocumentPropertiesA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LONG AdvancedDocumentPropertiesA(HWND hWnd, HANDLE hPrinter, LPSTR pDeviceName, PDEVMODEA pDevModeOutput, PDEVMODEA pDevModeInput)
     * }
     */
    public static MethodHandle AdvancedDocumentPropertiesA$handle() {
        return AdvancedDocumentPropertiesA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * LONG AdvancedDocumentPropertiesA(HWND hWnd, HANDLE hPrinter, LPSTR pDeviceName, PDEVMODEA pDevModeOutput, PDEVMODEA pDevModeInput)
     * }
     */
    public static MemorySegment AdvancedDocumentPropertiesA$address() {
        return AdvancedDocumentPropertiesA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * LONG AdvancedDocumentPropertiesA(HWND hWnd, HANDLE hPrinter, LPSTR pDeviceName, PDEVMODEA pDevModeOutput, PDEVMODEA pDevModeInput)
     * }
     */
    public static int AdvancedDocumentPropertiesA(MemorySegment hWnd, MemorySegment hPrinter, MemorySegment pDeviceName, MemorySegment pDevModeOutput, MemorySegment pDevModeInput) {
        var mh$ = AdvancedDocumentPropertiesA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AdvancedDocumentPropertiesA", hWnd, hPrinter, pDeviceName, pDevModeOutput, pDevModeInput);
            }
            return (int)mh$.invokeExact(hWnd, hPrinter, pDeviceName, pDevModeOutput, pDevModeInput);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AdvancedDocumentPropertiesW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AdvancedDocumentPropertiesW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LONG AdvancedDocumentPropertiesW(HWND hWnd, HANDLE hPrinter, LPWSTR pDeviceName, PDEVMODEW pDevModeOutput, PDEVMODEW pDevModeInput)
     * }
     */
    public static FunctionDescriptor AdvancedDocumentPropertiesW$descriptor() {
        return AdvancedDocumentPropertiesW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LONG AdvancedDocumentPropertiesW(HWND hWnd, HANDLE hPrinter, LPWSTR pDeviceName, PDEVMODEW pDevModeOutput, PDEVMODEW pDevModeInput)
     * }
     */
    public static MethodHandle AdvancedDocumentPropertiesW$handle() {
        return AdvancedDocumentPropertiesW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * LONG AdvancedDocumentPropertiesW(HWND hWnd, HANDLE hPrinter, LPWSTR pDeviceName, PDEVMODEW pDevModeOutput, PDEVMODEW pDevModeInput)
     * }
     */
    public static MemorySegment AdvancedDocumentPropertiesW$address() {
        return AdvancedDocumentPropertiesW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * LONG AdvancedDocumentPropertiesW(HWND hWnd, HANDLE hPrinter, LPWSTR pDeviceName, PDEVMODEW pDevModeOutput, PDEVMODEW pDevModeInput)
     * }
     */
    public static int AdvancedDocumentPropertiesW(MemorySegment hWnd, MemorySegment hPrinter, MemorySegment pDeviceName, MemorySegment pDevModeOutput, MemorySegment pDevModeInput) {
        var mh$ = AdvancedDocumentPropertiesW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AdvancedDocumentPropertiesW", hWnd, hPrinter, pDeviceName, pDevModeOutput, pDevModeInput);
            }
            return (int)mh$.invokeExact(hWnd, hPrinter, pDeviceName, pDevModeOutput, pDevModeInput);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ExtDeviceMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ExtDeviceMode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LONG ExtDeviceMode(HWND hWnd, HANDLE hInst, LPDEVMODEA pDevModeOutput, LPSTR pDeviceName, LPSTR pPort, LPDEVMODEA pDevModeInput, LPSTR pProfile, DWORD fMode)
     * }
     */
    public static FunctionDescriptor ExtDeviceMode$descriptor() {
        return ExtDeviceMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LONG ExtDeviceMode(HWND hWnd, HANDLE hInst, LPDEVMODEA pDevModeOutput, LPSTR pDeviceName, LPSTR pPort, LPDEVMODEA pDevModeInput, LPSTR pProfile, DWORD fMode)
     * }
     */
    public static MethodHandle ExtDeviceMode$handle() {
        return ExtDeviceMode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * LONG ExtDeviceMode(HWND hWnd, HANDLE hInst, LPDEVMODEA pDevModeOutput, LPSTR pDeviceName, LPSTR pPort, LPDEVMODEA pDevModeInput, LPSTR pProfile, DWORD fMode)
     * }
     */
    public static MemorySegment ExtDeviceMode$address() {
        return ExtDeviceMode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * LONG ExtDeviceMode(HWND hWnd, HANDLE hInst, LPDEVMODEA pDevModeOutput, LPSTR pDeviceName, LPSTR pPort, LPDEVMODEA pDevModeInput, LPSTR pProfile, DWORD fMode)
     * }
     */
    public static int ExtDeviceMode(MemorySegment hWnd, MemorySegment hInst, MemorySegment pDevModeOutput, MemorySegment pDeviceName, MemorySegment pPort, MemorySegment pDevModeInput, MemorySegment pProfile, int fMode) {
        var mh$ = ExtDeviceMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ExtDeviceMode", hWnd, hInst, pDevModeOutput, pDeviceName, pPort, pDevModeInput, pProfile, fMode);
            }
            return (int)mh$.invokeExact(hWnd, hInst, pDevModeOutput, pDeviceName, pPort, pDevModeInput, pProfile, fMode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetPrinterDataA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetPrinterDataA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD GetPrinterDataA(HANDLE hPrinter, LPSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor GetPrinterDataA$descriptor() {
        return GetPrinterDataA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD GetPrinterDataA(HANDLE hPrinter, LPSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle GetPrinterDataA$handle() {
        return GetPrinterDataA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD GetPrinterDataA(HANDLE hPrinter, LPSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment GetPrinterDataA$address() {
        return GetPrinterDataA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD GetPrinterDataA(HANDLE hPrinter, LPSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded)
     * }
     */
    public static int GetPrinterDataA(MemorySegment hPrinter, MemorySegment pValueName, MemorySegment pType, MemorySegment pData, int nSize, MemorySegment pcbNeeded) {
        var mh$ = GetPrinterDataA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetPrinterDataA", hPrinter, pValueName, pType, pData, nSize, pcbNeeded);
            }
            return (int)mh$.invokeExact(hPrinter, pValueName, pType, pData, nSize, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetPrinterDataW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetPrinterDataW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD GetPrinterDataW(HANDLE hPrinter, LPWSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor GetPrinterDataW$descriptor() {
        return GetPrinterDataW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD GetPrinterDataW(HANDLE hPrinter, LPWSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle GetPrinterDataW$handle() {
        return GetPrinterDataW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD GetPrinterDataW(HANDLE hPrinter, LPWSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment GetPrinterDataW$address() {
        return GetPrinterDataW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD GetPrinterDataW(HANDLE hPrinter, LPWSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded)
     * }
     */
    public static int GetPrinterDataW(MemorySegment hPrinter, MemorySegment pValueName, MemorySegment pType, MemorySegment pData, int nSize, MemorySegment pcbNeeded) {
        var mh$ = GetPrinterDataW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetPrinterDataW", hPrinter, pValueName, pType, pData, nSize, pcbNeeded);
            }
            return (int)mh$.invokeExact(hPrinter, pValueName, pType, pData, nSize, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetPrinterDataExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetPrinterDataExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD GetPrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName, LPCSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor GetPrinterDataExA$descriptor() {
        return GetPrinterDataExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD GetPrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName, LPCSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle GetPrinterDataExA$handle() {
        return GetPrinterDataExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD GetPrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName, LPCSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment GetPrinterDataExA$address() {
        return GetPrinterDataExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD GetPrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName, LPCSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded)
     * }
     */
    public static int GetPrinterDataExA(MemorySegment hPrinter, MemorySegment pKeyName, MemorySegment pValueName, MemorySegment pType, MemorySegment pData, int nSize, MemorySegment pcbNeeded) {
        var mh$ = GetPrinterDataExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetPrinterDataExA", hPrinter, pKeyName, pValueName, pType, pData, nSize, pcbNeeded);
            }
            return (int)mh$.invokeExact(hPrinter, pKeyName, pValueName, pType, pData, nSize, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetPrinterDataExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetPrinterDataExW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD GetPrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName, LPCWSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor GetPrinterDataExW$descriptor() {
        return GetPrinterDataExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD GetPrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName, LPCWSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle GetPrinterDataExW$handle() {
        return GetPrinterDataExW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD GetPrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName, LPCWSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment GetPrinterDataExW$address() {
        return GetPrinterDataExW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD GetPrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName, LPCWSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded)
     * }
     */
    public static int GetPrinterDataExW(MemorySegment hPrinter, MemorySegment pKeyName, MemorySegment pValueName, MemorySegment pType, MemorySegment pData, int nSize, MemorySegment pcbNeeded) {
        var mh$ = GetPrinterDataExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetPrinterDataExW", hPrinter, pKeyName, pValueName, pType, pData, nSize, pcbNeeded);
            }
            return (int)mh$.invokeExact(hPrinter, pKeyName, pValueName, pType, pData, nSize, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumPrinterDataA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("EnumPrinterDataA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD EnumPrinterDataA(HANDLE hPrinter, DWORD dwIndex, LPSTR pValueName, DWORD cbValueName, LPDWORD pcbValueName, LPDWORD pType, LPBYTE pData, DWORD cbData, LPDWORD pcbData)
     * }
     */
    public static FunctionDescriptor EnumPrinterDataA$descriptor() {
        return EnumPrinterDataA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD EnumPrinterDataA(HANDLE hPrinter, DWORD dwIndex, LPSTR pValueName, DWORD cbValueName, LPDWORD pcbValueName, LPDWORD pType, LPBYTE pData, DWORD cbData, LPDWORD pcbData)
     * }
     */
    public static MethodHandle EnumPrinterDataA$handle() {
        return EnumPrinterDataA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD EnumPrinterDataA(HANDLE hPrinter, DWORD dwIndex, LPSTR pValueName, DWORD cbValueName, LPDWORD pcbValueName, LPDWORD pType, LPBYTE pData, DWORD cbData, LPDWORD pcbData)
     * }
     */
    public static MemorySegment EnumPrinterDataA$address() {
        return EnumPrinterDataA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD EnumPrinterDataA(HANDLE hPrinter, DWORD dwIndex, LPSTR pValueName, DWORD cbValueName, LPDWORD pcbValueName, LPDWORD pType, LPBYTE pData, DWORD cbData, LPDWORD pcbData)
     * }
     */
    public static int EnumPrinterDataA(MemorySegment hPrinter, int dwIndex, MemorySegment pValueName, int cbValueName, MemorySegment pcbValueName, MemorySegment pType, MemorySegment pData, int cbData, MemorySegment pcbData) {
        var mh$ = EnumPrinterDataA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumPrinterDataA", hPrinter, dwIndex, pValueName, cbValueName, pcbValueName, pType, pData, cbData, pcbData);
            }
            return (int)mh$.invokeExact(hPrinter, dwIndex, pValueName, cbValueName, pcbValueName, pType, pData, cbData, pcbData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumPrinterDataW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("EnumPrinterDataW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD EnumPrinterDataW(HANDLE hPrinter, DWORD dwIndex, LPWSTR pValueName, DWORD cbValueName, LPDWORD pcbValueName, LPDWORD pType, LPBYTE pData, DWORD cbData, LPDWORD pcbData)
     * }
     */
    public static FunctionDescriptor EnumPrinterDataW$descriptor() {
        return EnumPrinterDataW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD EnumPrinterDataW(HANDLE hPrinter, DWORD dwIndex, LPWSTR pValueName, DWORD cbValueName, LPDWORD pcbValueName, LPDWORD pType, LPBYTE pData, DWORD cbData, LPDWORD pcbData)
     * }
     */
    public static MethodHandle EnumPrinterDataW$handle() {
        return EnumPrinterDataW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD EnumPrinterDataW(HANDLE hPrinter, DWORD dwIndex, LPWSTR pValueName, DWORD cbValueName, LPDWORD pcbValueName, LPDWORD pType, LPBYTE pData, DWORD cbData, LPDWORD pcbData)
     * }
     */
    public static MemorySegment EnumPrinterDataW$address() {
        return EnumPrinterDataW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD EnumPrinterDataW(HANDLE hPrinter, DWORD dwIndex, LPWSTR pValueName, DWORD cbValueName, LPDWORD pcbValueName, LPDWORD pType, LPBYTE pData, DWORD cbData, LPDWORD pcbData)
     * }
     */
    public static int EnumPrinterDataW(MemorySegment hPrinter, int dwIndex, MemorySegment pValueName, int cbValueName, MemorySegment pcbValueName, MemorySegment pType, MemorySegment pData, int cbData, MemorySegment pcbData) {
        var mh$ = EnumPrinterDataW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumPrinterDataW", hPrinter, dwIndex, pValueName, cbValueName, pcbValueName, pType, pData, cbData, pcbData);
            }
            return (int)mh$.invokeExact(hPrinter, dwIndex, pValueName, cbValueName, pcbValueName, pType, pData, cbData, pcbData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumPrinterDataExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("EnumPrinterDataExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD EnumPrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName, LPBYTE pEnumValues, DWORD cbEnumValues, LPDWORD pcbEnumValues, LPDWORD pnEnumValues)
     * }
     */
    public static FunctionDescriptor EnumPrinterDataExA$descriptor() {
        return EnumPrinterDataExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD EnumPrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName, LPBYTE pEnumValues, DWORD cbEnumValues, LPDWORD pcbEnumValues, LPDWORD pnEnumValues)
     * }
     */
    public static MethodHandle EnumPrinterDataExA$handle() {
        return EnumPrinterDataExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD EnumPrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName, LPBYTE pEnumValues, DWORD cbEnumValues, LPDWORD pcbEnumValues, LPDWORD pnEnumValues)
     * }
     */
    public static MemorySegment EnumPrinterDataExA$address() {
        return EnumPrinterDataExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD EnumPrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName, LPBYTE pEnumValues, DWORD cbEnumValues, LPDWORD pcbEnumValues, LPDWORD pnEnumValues)
     * }
     */
    public static int EnumPrinterDataExA(MemorySegment hPrinter, MemorySegment pKeyName, MemorySegment pEnumValues, int cbEnumValues, MemorySegment pcbEnumValues, MemorySegment pnEnumValues) {
        var mh$ = EnumPrinterDataExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumPrinterDataExA", hPrinter, pKeyName, pEnumValues, cbEnumValues, pcbEnumValues, pnEnumValues);
            }
            return (int)mh$.invokeExact(hPrinter, pKeyName, pEnumValues, cbEnumValues, pcbEnumValues, pnEnumValues);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumPrinterDataExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("EnumPrinterDataExW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD EnumPrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName, LPBYTE pEnumValues, DWORD cbEnumValues, LPDWORD pcbEnumValues, LPDWORD pnEnumValues)
     * }
     */
    public static FunctionDescriptor EnumPrinterDataExW$descriptor() {
        return EnumPrinterDataExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD EnumPrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName, LPBYTE pEnumValues, DWORD cbEnumValues, LPDWORD pcbEnumValues, LPDWORD pnEnumValues)
     * }
     */
    public static MethodHandle EnumPrinterDataExW$handle() {
        return EnumPrinterDataExW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD EnumPrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName, LPBYTE pEnumValues, DWORD cbEnumValues, LPDWORD pcbEnumValues, LPDWORD pnEnumValues)
     * }
     */
    public static MemorySegment EnumPrinterDataExW$address() {
        return EnumPrinterDataExW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD EnumPrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName, LPBYTE pEnumValues, DWORD cbEnumValues, LPDWORD pcbEnumValues, LPDWORD pnEnumValues)
     * }
     */
    public static int EnumPrinterDataExW(MemorySegment hPrinter, MemorySegment pKeyName, MemorySegment pEnumValues, int cbEnumValues, MemorySegment pcbEnumValues, MemorySegment pnEnumValues) {
        var mh$ = EnumPrinterDataExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumPrinterDataExW", hPrinter, pKeyName, pEnumValues, cbEnumValues, pcbEnumValues, pnEnumValues);
            }
            return (int)mh$.invokeExact(hPrinter, pKeyName, pEnumValues, cbEnumValues, pcbEnumValues, pnEnumValues);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumPrinterKeyA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("EnumPrinterKeyA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD EnumPrinterKeyA(HANDLE hPrinter, LPCSTR pKeyName, LPSTR pSubkey, DWORD cbSubkey, LPDWORD pcbSubkey)
     * }
     */
    public static FunctionDescriptor EnumPrinterKeyA$descriptor() {
        return EnumPrinterKeyA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD EnumPrinterKeyA(HANDLE hPrinter, LPCSTR pKeyName, LPSTR pSubkey, DWORD cbSubkey, LPDWORD pcbSubkey)
     * }
     */
    public static MethodHandle EnumPrinterKeyA$handle() {
        return EnumPrinterKeyA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD EnumPrinterKeyA(HANDLE hPrinter, LPCSTR pKeyName, LPSTR pSubkey, DWORD cbSubkey, LPDWORD pcbSubkey)
     * }
     */
    public static MemorySegment EnumPrinterKeyA$address() {
        return EnumPrinterKeyA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD EnumPrinterKeyA(HANDLE hPrinter, LPCSTR pKeyName, LPSTR pSubkey, DWORD cbSubkey, LPDWORD pcbSubkey)
     * }
     */
    public static int EnumPrinterKeyA(MemorySegment hPrinter, MemorySegment pKeyName, MemorySegment pSubkey, int cbSubkey, MemorySegment pcbSubkey) {
        var mh$ = EnumPrinterKeyA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumPrinterKeyA", hPrinter, pKeyName, pSubkey, cbSubkey, pcbSubkey);
            }
            return (int)mh$.invokeExact(hPrinter, pKeyName, pSubkey, cbSubkey, pcbSubkey);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumPrinterKeyW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("EnumPrinterKeyW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD EnumPrinterKeyW(HANDLE hPrinter, LPCWSTR pKeyName, LPWSTR pSubkey, DWORD cbSubkey, LPDWORD pcbSubkey)
     * }
     */
    public static FunctionDescriptor EnumPrinterKeyW$descriptor() {
        return EnumPrinterKeyW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD EnumPrinterKeyW(HANDLE hPrinter, LPCWSTR pKeyName, LPWSTR pSubkey, DWORD cbSubkey, LPDWORD pcbSubkey)
     * }
     */
    public static MethodHandle EnumPrinterKeyW$handle() {
        return EnumPrinterKeyW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD EnumPrinterKeyW(HANDLE hPrinter, LPCWSTR pKeyName, LPWSTR pSubkey, DWORD cbSubkey, LPDWORD pcbSubkey)
     * }
     */
    public static MemorySegment EnumPrinterKeyW$address() {
        return EnumPrinterKeyW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD EnumPrinterKeyW(HANDLE hPrinter, LPCWSTR pKeyName, LPWSTR pSubkey, DWORD cbSubkey, LPDWORD pcbSubkey)
     * }
     */
    public static int EnumPrinterKeyW(MemorySegment hPrinter, MemorySegment pKeyName, MemorySegment pSubkey, int cbSubkey, MemorySegment pcbSubkey) {
        var mh$ = EnumPrinterKeyW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumPrinterKeyW", hPrinter, pKeyName, pSubkey, cbSubkey, pcbSubkey);
            }
            return (int)mh$.invokeExact(hPrinter, pKeyName, pSubkey, cbSubkey, pcbSubkey);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetPrinterDataA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SetPrinterDataA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD SetPrinterDataA(HANDLE hPrinter, LPSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData)
     * }
     */
    public static FunctionDescriptor SetPrinterDataA$descriptor() {
        return SetPrinterDataA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD SetPrinterDataA(HANDLE hPrinter, LPSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData)
     * }
     */
    public static MethodHandle SetPrinterDataA$handle() {
        return SetPrinterDataA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD SetPrinterDataA(HANDLE hPrinter, LPSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData)
     * }
     */
    public static MemorySegment SetPrinterDataA$address() {
        return SetPrinterDataA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD SetPrinterDataA(HANDLE hPrinter, LPSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData)
     * }
     */
    public static int SetPrinterDataA(MemorySegment hPrinter, MemorySegment pValueName, int Type, MemorySegment pData, int cbData) {
        var mh$ = SetPrinterDataA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetPrinterDataA", hPrinter, pValueName, Type, pData, cbData);
            }
            return (int)mh$.invokeExact(hPrinter, pValueName, Type, pData, cbData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetPrinterDataW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SetPrinterDataW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD SetPrinterDataW(HANDLE hPrinter, LPWSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData)
     * }
     */
    public static FunctionDescriptor SetPrinterDataW$descriptor() {
        return SetPrinterDataW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD SetPrinterDataW(HANDLE hPrinter, LPWSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData)
     * }
     */
    public static MethodHandle SetPrinterDataW$handle() {
        return SetPrinterDataW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD SetPrinterDataW(HANDLE hPrinter, LPWSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData)
     * }
     */
    public static MemorySegment SetPrinterDataW$address() {
        return SetPrinterDataW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD SetPrinterDataW(HANDLE hPrinter, LPWSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData)
     * }
     */
    public static int SetPrinterDataW(MemorySegment hPrinter, MemorySegment pValueName, int Type, MemorySegment pData, int cbData) {
        var mh$ = SetPrinterDataW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetPrinterDataW", hPrinter, pValueName, Type, pData, cbData);
            }
            return (int)mh$.invokeExact(hPrinter, pValueName, Type, pData, cbData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetPrinterDataExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SetPrinterDataExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD SetPrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName, LPCSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData)
     * }
     */
    public static FunctionDescriptor SetPrinterDataExA$descriptor() {
        return SetPrinterDataExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD SetPrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName, LPCSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData)
     * }
     */
    public static MethodHandle SetPrinterDataExA$handle() {
        return SetPrinterDataExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD SetPrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName, LPCSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData)
     * }
     */
    public static MemorySegment SetPrinterDataExA$address() {
        return SetPrinterDataExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD SetPrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName, LPCSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData)
     * }
     */
    public static int SetPrinterDataExA(MemorySegment hPrinter, MemorySegment pKeyName, MemorySegment pValueName, int Type, MemorySegment pData, int cbData) {
        var mh$ = SetPrinterDataExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetPrinterDataExA", hPrinter, pKeyName, pValueName, Type, pData, cbData);
            }
            return (int)mh$.invokeExact(hPrinter, pKeyName, pValueName, Type, pData, cbData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetPrinterDataExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SetPrinterDataExW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD SetPrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName, LPCWSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData)
     * }
     */
    public static FunctionDescriptor SetPrinterDataExW$descriptor() {
        return SetPrinterDataExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD SetPrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName, LPCWSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData)
     * }
     */
    public static MethodHandle SetPrinterDataExW$handle() {
        return SetPrinterDataExW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD SetPrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName, LPCWSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData)
     * }
     */
    public static MemorySegment SetPrinterDataExW$address() {
        return SetPrinterDataExW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD SetPrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName, LPCWSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData)
     * }
     */
    public static int SetPrinterDataExW(MemorySegment hPrinter, MemorySegment pKeyName, MemorySegment pValueName, int Type, MemorySegment pData, int cbData) {
        var mh$ = SetPrinterDataExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetPrinterDataExW", hPrinter, pKeyName, pValueName, Type, pData, cbData);
            }
            return (int)mh$.invokeExact(hPrinter, pKeyName, pValueName, Type, pData, cbData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrinterDataA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DeletePrinterDataA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD DeletePrinterDataA(HANDLE hPrinter, LPSTR pValueName)
     * }
     */
    public static FunctionDescriptor DeletePrinterDataA$descriptor() {
        return DeletePrinterDataA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD DeletePrinterDataA(HANDLE hPrinter, LPSTR pValueName)
     * }
     */
    public static MethodHandle DeletePrinterDataA$handle() {
        return DeletePrinterDataA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD DeletePrinterDataA(HANDLE hPrinter, LPSTR pValueName)
     * }
     */
    public static MemorySegment DeletePrinterDataA$address() {
        return DeletePrinterDataA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD DeletePrinterDataA(HANDLE hPrinter, LPSTR pValueName)
     * }
     */
    public static int DeletePrinterDataA(MemorySegment hPrinter, MemorySegment pValueName) {
        var mh$ = DeletePrinterDataA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrinterDataA", hPrinter, pValueName);
            }
            return (int)mh$.invokeExact(hPrinter, pValueName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrinterDataW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DeletePrinterDataW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD DeletePrinterDataW(HANDLE hPrinter, LPWSTR pValueName)
     * }
     */
    public static FunctionDescriptor DeletePrinterDataW$descriptor() {
        return DeletePrinterDataW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD DeletePrinterDataW(HANDLE hPrinter, LPWSTR pValueName)
     * }
     */
    public static MethodHandle DeletePrinterDataW$handle() {
        return DeletePrinterDataW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD DeletePrinterDataW(HANDLE hPrinter, LPWSTR pValueName)
     * }
     */
    public static MemorySegment DeletePrinterDataW$address() {
        return DeletePrinterDataW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD DeletePrinterDataW(HANDLE hPrinter, LPWSTR pValueName)
     * }
     */
    public static int DeletePrinterDataW(MemorySegment hPrinter, MemorySegment pValueName) {
        var mh$ = DeletePrinterDataW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrinterDataW", hPrinter, pValueName);
            }
            return (int)mh$.invokeExact(hPrinter, pValueName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrinterDataExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DeletePrinterDataExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD DeletePrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName, LPCSTR pValueName)
     * }
     */
    public static FunctionDescriptor DeletePrinterDataExA$descriptor() {
        return DeletePrinterDataExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD DeletePrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName, LPCSTR pValueName)
     * }
     */
    public static MethodHandle DeletePrinterDataExA$handle() {
        return DeletePrinterDataExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD DeletePrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName, LPCSTR pValueName)
     * }
     */
    public static MemorySegment DeletePrinterDataExA$address() {
        return DeletePrinterDataExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD DeletePrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName, LPCSTR pValueName)
     * }
     */
    public static int DeletePrinterDataExA(MemorySegment hPrinter, MemorySegment pKeyName, MemorySegment pValueName) {
        var mh$ = DeletePrinterDataExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrinterDataExA", hPrinter, pKeyName, pValueName);
            }
            return (int)mh$.invokeExact(hPrinter, pKeyName, pValueName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrinterDataExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DeletePrinterDataExW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD DeletePrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName, LPCWSTR pValueName)
     * }
     */
    public static FunctionDescriptor DeletePrinterDataExW$descriptor() {
        return DeletePrinterDataExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD DeletePrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName, LPCWSTR pValueName)
     * }
     */
    public static MethodHandle DeletePrinterDataExW$handle() {
        return DeletePrinterDataExW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD DeletePrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName, LPCWSTR pValueName)
     * }
     */
    public static MemorySegment DeletePrinterDataExW$address() {
        return DeletePrinterDataExW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD DeletePrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName, LPCWSTR pValueName)
     * }
     */
    public static int DeletePrinterDataExW(MemorySegment hPrinter, MemorySegment pKeyName, MemorySegment pValueName) {
        var mh$ = DeletePrinterDataExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrinterDataExW", hPrinter, pKeyName, pValueName);
            }
            return (int)mh$.invokeExact(hPrinter, pKeyName, pValueName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrinterKeyA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DeletePrinterKeyA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD DeletePrinterKeyA(HANDLE hPrinter, LPCSTR pKeyName)
     * }
     */
    public static FunctionDescriptor DeletePrinterKeyA$descriptor() {
        return DeletePrinterKeyA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD DeletePrinterKeyA(HANDLE hPrinter, LPCSTR pKeyName)
     * }
     */
    public static MethodHandle DeletePrinterKeyA$handle() {
        return DeletePrinterKeyA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD DeletePrinterKeyA(HANDLE hPrinter, LPCSTR pKeyName)
     * }
     */
    public static MemorySegment DeletePrinterKeyA$address() {
        return DeletePrinterKeyA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD DeletePrinterKeyA(HANDLE hPrinter, LPCSTR pKeyName)
     * }
     */
    public static int DeletePrinterKeyA(MemorySegment hPrinter, MemorySegment pKeyName) {
        var mh$ = DeletePrinterKeyA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrinterKeyA", hPrinter, pKeyName);
            }
            return (int)mh$.invokeExact(hPrinter, pKeyName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrinterKeyW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DeletePrinterKeyW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD DeletePrinterKeyW(HANDLE hPrinter, LPCWSTR pKeyName)
     * }
     */
    public static FunctionDescriptor DeletePrinterKeyW$descriptor() {
        return DeletePrinterKeyW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD DeletePrinterKeyW(HANDLE hPrinter, LPCWSTR pKeyName)
     * }
     */
    public static MethodHandle DeletePrinterKeyW$handle() {
        return DeletePrinterKeyW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD DeletePrinterKeyW(HANDLE hPrinter, LPCWSTR pKeyName)
     * }
     */
    public static MemorySegment DeletePrinterKeyW$address() {
        return DeletePrinterKeyW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD DeletePrinterKeyW(HANDLE hPrinter, LPCWSTR pKeyName)
     * }
     */
    public static int DeletePrinterKeyW(MemorySegment hPrinter, MemorySegment pKeyName) {
        var mh$ = DeletePrinterKeyW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrinterKeyW", hPrinter, pKeyName);
            }
            return (int)mh$.invokeExact(hPrinter, pKeyName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_NOTIFY_OPTIONS_TYPE {
     *     WORD Type;
     *     WORD Reserved0;
     *     DWORD Reserved1;
     *     DWORD Reserved2;
     *     DWORD Count;
     *     PWORD pFields;
     * } *PPRINTER_NOTIFY_OPTIONS_TYPE
     * }
     */
    public static final AddressLayout PPRINTER_NOTIFY_OPTIONS_TYPE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_NOTIFY_OPTIONS_TYPE {
     *     WORD Type;
     *     WORD Reserved0;
     *     DWORD Reserved1;
     *     DWORD Reserved2;
     *     DWORD Count;
     *     PWORD pFields;
     * } *LPPRINTER_NOTIFY_OPTIONS_TYPE
     * }
     */
    public static final AddressLayout LPPRINTER_NOTIFY_OPTIONS_TYPE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_NOTIFY_OPTIONS {
     *     DWORD Version;
     *     DWORD Flags;
     *     DWORD Count;
     *     PPRINTER_NOTIFY_OPTIONS_TYPE pTypes;
     * } *PPRINTER_NOTIFY_OPTIONS
     * }
     */
    public static final AddressLayout PPRINTER_NOTIFY_OPTIONS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_NOTIFY_OPTIONS {
     *     DWORD Version;
     *     DWORD Flags;
     *     DWORD Count;
     *     PPRINTER_NOTIFY_OPTIONS_TYPE pTypes;
     * } *LPPRINTER_NOTIFY_OPTIONS
     * }
     */
    public static final AddressLayout LPPRINTER_NOTIFY_OPTIONS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_NOTIFY_INFO_DATA {
     *     WORD Type;
     *     WORD Field;
     *     DWORD Reserved;
     *     DWORD Id;
     *     union {
     *         DWORD adwData[2];
     *         struct {
     *             DWORD cbBuf;
     *             LPVOID pBuf;
     *         } Data;
     *     } NotifyData;
     * } *PPRINTER_NOTIFY_INFO_DATA
     * }
     */
    public static final AddressLayout PPRINTER_NOTIFY_INFO_DATA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_NOTIFY_INFO_DATA {
     *     WORD Type;
     *     WORD Field;
     *     DWORD Reserved;
     *     DWORD Id;
     *     union {
     *         DWORD adwData[2];
     *         struct {
     *             DWORD cbBuf;
     *             LPVOID pBuf;
     *         } Data;
     *     } NotifyData;
     * } *LPPRINTER_NOTIFY_INFO_DATA
     * }
     */
    public static final AddressLayout LPPRINTER_NOTIFY_INFO_DATA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_NOTIFY_INFO {
     *     DWORD Version;
     *     DWORD Flags;
     *     DWORD Count;
     *     PRINTER_NOTIFY_INFO_DATA aData[1];
     * } *PPRINTER_NOTIFY_INFO
     * }
     */
    public static final AddressLayout PPRINTER_NOTIFY_INFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_NOTIFY_INFO {
     *     DWORD Version;
     *     DWORD Flags;
     *     DWORD Count;
     *     PRINTER_NOTIFY_INFO_DATA aData[1];
     * } *LPPRINTER_NOTIFY_INFO
     * }
     */
    public static final AddressLayout LPPRINTER_NOTIFY_INFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _BINARY_CONTAINER {
     *     DWORD cbBuf;
     *     LPBYTE pData;
     * } *PBINARY_CONTAINER
     * }
     */
    public static final AddressLayout PBINARY_CONTAINER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _BIDI_DATA {
     *     DWORD dwBidiType;
     *     union {
     *         BOOL bData;
     *         LONG iData;
     *         LPWSTR sData;
     *         FLOAT fData;
     *         BINARY_CONTAINER biData;
     *     } u;
     * } *PBIDI_DATA
     * }
     */
    public static final AddressLayout PBIDI_DATA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _BIDI_DATA {
     *     DWORD dwBidiType;
     *     union {
     *         BOOL bData;
     *         LONG iData;
     *         LPWSTR sData;
     *         FLOAT fData;
     *         BINARY_CONTAINER biData;
     *     } u;
     * } *LPBIDI_DATA
     * }
     */
    public static final AddressLayout LPBIDI_DATA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _BIDI_REQUEST_DATA {
     *     DWORD dwReqNumber;
     *     LPWSTR pSchema;
     *     BIDI_DATA data;
     * } *PBIDI_REQUEST_DATA
     * }
     */
    public static final AddressLayout PBIDI_REQUEST_DATA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _BIDI_REQUEST_DATA {
     *     DWORD dwReqNumber;
     *     LPWSTR pSchema;
     *     BIDI_DATA data;
     * } *LPBIDI_REQUEST_DATA
     * }
     */
    public static final AddressLayout LPBIDI_REQUEST_DATA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _BIDI_REQUEST_CONTAINER {
     *     DWORD Version;
     *     DWORD Flags;
     *     DWORD Count;
     *     BIDI_REQUEST_DATA aData[1];
     * } *PBIDI_REQUEST_CONTAINER
     * }
     */
    public static final AddressLayout PBIDI_REQUEST_CONTAINER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _BIDI_REQUEST_CONTAINER {
     *     DWORD Version;
     *     DWORD Flags;
     *     DWORD Count;
     *     BIDI_REQUEST_DATA aData[1];
     * } *LPBIDI_REQUEST_CONTAINER
     * }
     */
    public static final AddressLayout LPBIDI_REQUEST_CONTAINER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _BIDI_RESPONSE_DATA {
     *     DWORD dwResult;
     *     DWORD dwReqNumber;
     *     LPWSTR pSchema;
     *     BIDI_DATA data;
     * } *PBIDI_RESPONSE_DATA
     * }
     */
    public static final AddressLayout PBIDI_RESPONSE_DATA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _BIDI_RESPONSE_DATA {
     *     DWORD dwResult;
     *     DWORD dwReqNumber;
     *     LPWSTR pSchema;
     *     BIDI_DATA data;
     * } *LPBIDI_RESPONSE_DATA
     * }
     */
    public static final AddressLayout LPBIDI_RESPONSE_DATA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _BIDI_RESPONSE_CONTAINER {
     *     DWORD Version;
     *     DWORD Flags;
     *     DWORD Count;
     *     BIDI_RESPONSE_DATA aData[1];
     * } *PBIDI_RESPONSE_CONTAINER
     * }
     */
    public static final AddressLayout PBIDI_RESPONSE_CONTAINER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _BIDI_RESPONSE_CONTAINER {
     *     DWORD Version;
     *     DWORD Flags;
     *     DWORD Count;
     *     BIDI_RESPONSE_DATA aData[1];
     * } *LPBIDI_RESPONSE_CONTAINER
     * }
     */
    public static final AddressLayout LPBIDI_RESPONSE_CONTAINER = wgl_h.C_POINTER;
    private static final int BIDI_NULL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BIDI_NULL = 0
     * }
     */
    public static int BIDI_NULL() {
        return BIDI_NULL;
    }
    private static final int BIDI_INT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BIDI_INT = 1
     * }
     */
    public static int BIDI_INT() {
        return BIDI_INT;
    }
    private static final int BIDI_FLOAT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BIDI_FLOAT = 2
     * }
     */
    public static int BIDI_FLOAT() {
        return BIDI_FLOAT;
    }
    private static final int BIDI_BOOL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BIDI_BOOL = 3
     * }
     */
    public static int BIDI_BOOL() {
        return BIDI_BOOL;
    }
    private static final int BIDI_STRING = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BIDI_STRING = 4
     * }
     */
    public static int BIDI_STRING() {
        return BIDI_STRING;
    }
    private static final int BIDI_TEXT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BIDI_TEXT = 5
     * }
     */
    public static int BIDI_TEXT() {
        return BIDI_TEXT;
    }
    private static final int BIDI_ENUM = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BIDI_ENUM = 6
     * }
     */
    public static int BIDI_ENUM() {
        return BIDI_ENUM;
    }
    private static final int BIDI_BLOB = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BIDI_BLOB = 7
     * }
     */
    public static int BIDI_BLOB() {
        return BIDI_BLOB;
    }

    private static class WaitForPrinterChange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("WaitForPrinterChange");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WaitForPrinterChange(HANDLE hPrinter, DWORD Flags)
     * }
     */
    public static FunctionDescriptor WaitForPrinterChange$descriptor() {
        return WaitForPrinterChange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WaitForPrinterChange(HANDLE hPrinter, DWORD Flags)
     * }
     */
    public static MethodHandle WaitForPrinterChange$handle() {
        return WaitForPrinterChange.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD WaitForPrinterChange(HANDLE hPrinter, DWORD Flags)
     * }
     */
    public static MemorySegment WaitForPrinterChange$address() {
        return WaitForPrinterChange.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD WaitForPrinterChange(HANDLE hPrinter, DWORD Flags)
     * }
     */
    public static int WaitForPrinterChange(MemorySegment hPrinter, int Flags) {
        var mh$ = WaitForPrinterChange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WaitForPrinterChange", hPrinter, Flags);
            }
            return (int)mh$.invokeExact(hPrinter, Flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FindFirstPrinterChangeNotification {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("FindFirstPrinterChangeNotification");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HANDLE FindFirstPrinterChangeNotification(HANDLE hPrinter, DWORD fdwFilter, DWORD fdwOptions, PVOID pPrinterNotifyOptions)
     * }
     */
    public static FunctionDescriptor FindFirstPrinterChangeNotification$descriptor() {
        return FindFirstPrinterChangeNotification.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HANDLE FindFirstPrinterChangeNotification(HANDLE hPrinter, DWORD fdwFilter, DWORD fdwOptions, PVOID pPrinterNotifyOptions)
     * }
     */
    public static MethodHandle FindFirstPrinterChangeNotification$handle() {
        return FindFirstPrinterChangeNotification.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HANDLE FindFirstPrinterChangeNotification(HANDLE hPrinter, DWORD fdwFilter, DWORD fdwOptions, PVOID pPrinterNotifyOptions)
     * }
     */
    public static MemorySegment FindFirstPrinterChangeNotification$address() {
        return FindFirstPrinterChangeNotification.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HANDLE FindFirstPrinterChangeNotification(HANDLE hPrinter, DWORD fdwFilter, DWORD fdwOptions, PVOID pPrinterNotifyOptions)
     * }
     */
    public static MemorySegment FindFirstPrinterChangeNotification(MemorySegment hPrinter, int fdwFilter, int fdwOptions, MemorySegment pPrinterNotifyOptions) {
        var mh$ = FindFirstPrinterChangeNotification.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FindFirstPrinterChangeNotification", hPrinter, fdwFilter, fdwOptions, pPrinterNotifyOptions);
            }
            return (MemorySegment)mh$.invokeExact(hPrinter, fdwFilter, fdwOptions, pPrinterNotifyOptions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FindNextPrinterChangeNotification {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("FindNextPrinterChangeNotification");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL FindNextPrinterChangeNotification(HANDLE hChange, PDWORD pdwChange, LPVOID pvReserved, LPVOID *ppPrinterNotifyInfo)
     * }
     */
    public static FunctionDescriptor FindNextPrinterChangeNotification$descriptor() {
        return FindNextPrinterChangeNotification.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL FindNextPrinterChangeNotification(HANDLE hChange, PDWORD pdwChange, LPVOID pvReserved, LPVOID *ppPrinterNotifyInfo)
     * }
     */
    public static MethodHandle FindNextPrinterChangeNotification$handle() {
        return FindNextPrinterChangeNotification.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL FindNextPrinterChangeNotification(HANDLE hChange, PDWORD pdwChange, LPVOID pvReserved, LPVOID *ppPrinterNotifyInfo)
     * }
     */
    public static MemorySegment FindNextPrinterChangeNotification$address() {
        return FindNextPrinterChangeNotification.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL FindNextPrinterChangeNotification(HANDLE hChange, PDWORD pdwChange, LPVOID pvReserved, LPVOID *ppPrinterNotifyInfo)
     * }
     */
    public static int FindNextPrinterChangeNotification(MemorySegment hChange, MemorySegment pdwChange, MemorySegment pvReserved, MemorySegment ppPrinterNotifyInfo) {
        var mh$ = FindNextPrinterChangeNotification.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FindNextPrinterChangeNotification", hChange, pdwChange, pvReserved, ppPrinterNotifyInfo);
            }
            return (int)mh$.invokeExact(hChange, pdwChange, pvReserved, ppPrinterNotifyInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FreePrinterNotifyInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("FreePrinterNotifyInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL FreePrinterNotifyInfo(PPRINTER_NOTIFY_INFO pPrinterNotifyInfo)
     * }
     */
    public static FunctionDescriptor FreePrinterNotifyInfo$descriptor() {
        return FreePrinterNotifyInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL FreePrinterNotifyInfo(PPRINTER_NOTIFY_INFO pPrinterNotifyInfo)
     * }
     */
    public static MethodHandle FreePrinterNotifyInfo$handle() {
        return FreePrinterNotifyInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL FreePrinterNotifyInfo(PPRINTER_NOTIFY_INFO pPrinterNotifyInfo)
     * }
     */
    public static MemorySegment FreePrinterNotifyInfo$address() {
        return FreePrinterNotifyInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL FreePrinterNotifyInfo(PPRINTER_NOTIFY_INFO pPrinterNotifyInfo)
     * }
     */
    public static int FreePrinterNotifyInfo(MemorySegment pPrinterNotifyInfo) {
        var mh$ = FreePrinterNotifyInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FreePrinterNotifyInfo", pPrinterNotifyInfo);
            }
            return (int)mh$.invokeExact(pPrinterNotifyInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FindClosePrinterChangeNotification {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("FindClosePrinterChangeNotification");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL FindClosePrinterChangeNotification(HANDLE hChange)
     * }
     */
    public static FunctionDescriptor FindClosePrinterChangeNotification$descriptor() {
        return FindClosePrinterChangeNotification.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL FindClosePrinterChangeNotification(HANDLE hChange)
     * }
     */
    public static MethodHandle FindClosePrinterChangeNotification$handle() {
        return FindClosePrinterChangeNotification.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL FindClosePrinterChangeNotification(HANDLE hChange)
     * }
     */
    public static MemorySegment FindClosePrinterChangeNotification$address() {
        return FindClosePrinterChangeNotification.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL FindClosePrinterChangeNotification(HANDLE hChange)
     * }
     */
    public static int FindClosePrinterChangeNotification(MemorySegment hChange) {
        var mh$ = FindClosePrinterChangeNotification.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FindClosePrinterChangeNotification", hChange);
            }
            return (int)mh$.invokeExact(hChange);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PrinterMessageBoxA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("PrinterMessageBoxA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD PrinterMessageBoxA(HANDLE hPrinter, DWORD Error, HWND hWnd, LPSTR pText, LPSTR pCaption, DWORD dwType)
     * }
     */
    public static FunctionDescriptor PrinterMessageBoxA$descriptor() {
        return PrinterMessageBoxA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD PrinterMessageBoxA(HANDLE hPrinter, DWORD Error, HWND hWnd, LPSTR pText, LPSTR pCaption, DWORD dwType)
     * }
     */
    public static MethodHandle PrinterMessageBoxA$handle() {
        return PrinterMessageBoxA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD PrinterMessageBoxA(HANDLE hPrinter, DWORD Error, HWND hWnd, LPSTR pText, LPSTR pCaption, DWORD dwType)
     * }
     */
    public static MemorySegment PrinterMessageBoxA$address() {
        return PrinterMessageBoxA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD PrinterMessageBoxA(HANDLE hPrinter, DWORD Error, HWND hWnd, LPSTR pText, LPSTR pCaption, DWORD dwType)
     * }
     */
    public static int PrinterMessageBoxA(MemorySegment hPrinter, int Error, MemorySegment hWnd, MemorySegment pText, MemorySegment pCaption, int dwType) {
        var mh$ = PrinterMessageBoxA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PrinterMessageBoxA", hPrinter, Error, hWnd, pText, pCaption, dwType);
            }
            return (int)mh$.invokeExact(hPrinter, Error, hWnd, pText, pCaption, dwType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PrinterMessageBoxW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("PrinterMessageBoxW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD PrinterMessageBoxW(HANDLE hPrinter, DWORD Error, HWND hWnd, LPWSTR pText, LPWSTR pCaption, DWORD dwType)
     * }
     */
    public static FunctionDescriptor PrinterMessageBoxW$descriptor() {
        return PrinterMessageBoxW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD PrinterMessageBoxW(HANDLE hPrinter, DWORD Error, HWND hWnd, LPWSTR pText, LPWSTR pCaption, DWORD dwType)
     * }
     */
    public static MethodHandle PrinterMessageBoxW$handle() {
        return PrinterMessageBoxW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD PrinterMessageBoxW(HANDLE hPrinter, DWORD Error, HWND hWnd, LPWSTR pText, LPWSTR pCaption, DWORD dwType)
     * }
     */
    public static MemorySegment PrinterMessageBoxW$address() {
        return PrinterMessageBoxW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD PrinterMessageBoxW(HANDLE hPrinter, DWORD Error, HWND hWnd, LPWSTR pText, LPWSTR pCaption, DWORD dwType)
     * }
     */
    public static int PrinterMessageBoxW(MemorySegment hPrinter, int Error, MemorySegment hWnd, MemorySegment pText, MemorySegment pCaption, int dwType) {
        var mh$ = PrinterMessageBoxW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PrinterMessageBoxW", hPrinter, Error, hWnd, pText, pCaption, dwType);
            }
            return (int)mh$.invokeExact(hPrinter, Error, hWnd, pText, pCaption, dwType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ClosePrinter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ClosePrinter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ClosePrinter(HANDLE hPrinter)
     * }
     */
    public static FunctionDescriptor ClosePrinter$descriptor() {
        return ClosePrinter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ClosePrinter(HANDLE hPrinter)
     * }
     */
    public static MethodHandle ClosePrinter$handle() {
        return ClosePrinter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ClosePrinter(HANDLE hPrinter)
     * }
     */
    public static MemorySegment ClosePrinter$address() {
        return ClosePrinter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ClosePrinter(HANDLE hPrinter)
     * }
     */
    public static int ClosePrinter(MemorySegment hPrinter) {
        var mh$ = ClosePrinter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ClosePrinter", hPrinter);
            }
            return (int)mh$.invokeExact(hPrinter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddFormA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AddFormA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddFormA(HANDLE hPrinter, DWORD Level, LPBYTE pForm)
     * }
     */
    public static FunctionDescriptor AddFormA$descriptor() {
        return AddFormA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddFormA(HANDLE hPrinter, DWORD Level, LPBYTE pForm)
     * }
     */
    public static MethodHandle AddFormA$handle() {
        return AddFormA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddFormA(HANDLE hPrinter, DWORD Level, LPBYTE pForm)
     * }
     */
    public static MemorySegment AddFormA$address() {
        return AddFormA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddFormA(HANDLE hPrinter, DWORD Level, LPBYTE pForm)
     * }
     */
    public static int AddFormA(MemorySegment hPrinter, int Level, MemorySegment pForm) {
        var mh$ = AddFormA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddFormA", hPrinter, Level, pForm);
            }
            return (int)mh$.invokeExact(hPrinter, Level, pForm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddFormW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AddFormW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddFormW(HANDLE hPrinter, DWORD Level, LPBYTE pForm)
     * }
     */
    public static FunctionDescriptor AddFormW$descriptor() {
        return AddFormW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddFormW(HANDLE hPrinter, DWORD Level, LPBYTE pForm)
     * }
     */
    public static MethodHandle AddFormW$handle() {
        return AddFormW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddFormW(HANDLE hPrinter, DWORD Level, LPBYTE pForm)
     * }
     */
    public static MemorySegment AddFormW$address() {
        return AddFormW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddFormW(HANDLE hPrinter, DWORD Level, LPBYTE pForm)
     * }
     */
    public static int AddFormW(MemorySegment hPrinter, int Level, MemorySegment pForm) {
        var mh$ = AddFormW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddFormW", hPrinter, Level, pForm);
            }
            return (int)mh$.invokeExact(hPrinter, Level, pForm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeleteFormA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DeleteFormA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeleteFormA(HANDLE hPrinter, LPSTR pFormName)
     * }
     */
    public static FunctionDescriptor DeleteFormA$descriptor() {
        return DeleteFormA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeleteFormA(HANDLE hPrinter, LPSTR pFormName)
     * }
     */
    public static MethodHandle DeleteFormA$handle() {
        return DeleteFormA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeleteFormA(HANDLE hPrinter, LPSTR pFormName)
     * }
     */
    public static MemorySegment DeleteFormA$address() {
        return DeleteFormA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeleteFormA(HANDLE hPrinter, LPSTR pFormName)
     * }
     */
    public static int DeleteFormA(MemorySegment hPrinter, MemorySegment pFormName) {
        var mh$ = DeleteFormA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeleteFormA", hPrinter, pFormName);
            }
            return (int)mh$.invokeExact(hPrinter, pFormName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeleteFormW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DeleteFormW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeleteFormW(HANDLE hPrinter, LPWSTR pFormName)
     * }
     */
    public static FunctionDescriptor DeleteFormW$descriptor() {
        return DeleteFormW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeleteFormW(HANDLE hPrinter, LPWSTR pFormName)
     * }
     */
    public static MethodHandle DeleteFormW$handle() {
        return DeleteFormW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeleteFormW(HANDLE hPrinter, LPWSTR pFormName)
     * }
     */
    public static MemorySegment DeleteFormW$address() {
        return DeleteFormW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeleteFormW(HANDLE hPrinter, LPWSTR pFormName)
     * }
     */
    public static int DeleteFormW(MemorySegment hPrinter, MemorySegment pFormName) {
        var mh$ = DeleteFormW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeleteFormW", hPrinter, pFormName);
            }
            return (int)mh$.invokeExact(hPrinter, pFormName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetFormA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetFormA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetFormA(HANDLE hPrinter, LPSTR pFormName, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor GetFormA$descriptor() {
        return GetFormA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetFormA(HANDLE hPrinter, LPSTR pFormName, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle GetFormA$handle() {
        return GetFormA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetFormA(HANDLE hPrinter, LPSTR pFormName, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment GetFormA$address() {
        return GetFormA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetFormA(HANDLE hPrinter, LPSTR pFormName, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static int GetFormA(MemorySegment hPrinter, MemorySegment pFormName, int Level, MemorySegment pForm, int cbBuf, MemorySegment pcbNeeded) {
        var mh$ = GetFormA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetFormA", hPrinter, pFormName, Level, pForm, cbBuf, pcbNeeded);
            }
            return (int)mh$.invokeExact(hPrinter, pFormName, Level, pForm, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetFormW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetFormW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetFormW(HANDLE hPrinter, LPWSTR pFormName, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor GetFormW$descriptor() {
        return GetFormW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetFormW(HANDLE hPrinter, LPWSTR pFormName, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle GetFormW$handle() {
        return GetFormW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetFormW(HANDLE hPrinter, LPWSTR pFormName, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment GetFormW$address() {
        return GetFormW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetFormW(HANDLE hPrinter, LPWSTR pFormName, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static int GetFormW(MemorySegment hPrinter, MemorySegment pFormName, int Level, MemorySegment pForm, int cbBuf, MemorySegment pcbNeeded) {
        var mh$ = GetFormW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetFormW", hPrinter, pFormName, Level, pForm, cbBuf, pcbNeeded);
            }
            return (int)mh$.invokeExact(hPrinter, pFormName, Level, pForm, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetFormA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SetFormA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL SetFormA(HANDLE hPrinter, LPSTR pFormName, DWORD Level, LPBYTE pForm)
     * }
     */
    public static FunctionDescriptor SetFormA$descriptor() {
        return SetFormA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL SetFormA(HANDLE hPrinter, LPSTR pFormName, DWORD Level, LPBYTE pForm)
     * }
     */
    public static MethodHandle SetFormA$handle() {
        return SetFormA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL SetFormA(HANDLE hPrinter, LPSTR pFormName, DWORD Level, LPBYTE pForm)
     * }
     */
    public static MemorySegment SetFormA$address() {
        return SetFormA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL SetFormA(HANDLE hPrinter, LPSTR pFormName, DWORD Level, LPBYTE pForm)
     * }
     */
    public static int SetFormA(MemorySegment hPrinter, MemorySegment pFormName, int Level, MemorySegment pForm) {
        var mh$ = SetFormA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetFormA", hPrinter, pFormName, Level, pForm);
            }
            return (int)mh$.invokeExact(hPrinter, pFormName, Level, pForm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetFormW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SetFormW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL SetFormW(HANDLE hPrinter, LPWSTR pFormName, DWORD Level, LPBYTE pForm)
     * }
     */
    public static FunctionDescriptor SetFormW$descriptor() {
        return SetFormW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL SetFormW(HANDLE hPrinter, LPWSTR pFormName, DWORD Level, LPBYTE pForm)
     * }
     */
    public static MethodHandle SetFormW$handle() {
        return SetFormW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL SetFormW(HANDLE hPrinter, LPWSTR pFormName, DWORD Level, LPBYTE pForm)
     * }
     */
    public static MemorySegment SetFormW$address() {
        return SetFormW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL SetFormW(HANDLE hPrinter, LPWSTR pFormName, DWORD Level, LPBYTE pForm)
     * }
     */
    public static int SetFormW(MemorySegment hPrinter, MemorySegment pFormName, int Level, MemorySegment pForm) {
        var mh$ = SetFormW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetFormW", hPrinter, pFormName, Level, pForm);
            }
            return (int)mh$.invokeExact(hPrinter, pFormName, Level, pForm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumFormsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("EnumFormsA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumFormsA(HANDLE hPrinter, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static FunctionDescriptor EnumFormsA$descriptor() {
        return EnumFormsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumFormsA(HANDLE hPrinter, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MethodHandle EnumFormsA$handle() {
        return EnumFormsA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumFormsA(HANDLE hPrinter, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MemorySegment EnumFormsA$address() {
        return EnumFormsA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumFormsA(HANDLE hPrinter, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static int EnumFormsA(MemorySegment hPrinter, int Level, MemorySegment pForm, int cbBuf, MemorySegment pcbNeeded, MemorySegment pcReturned) {
        var mh$ = EnumFormsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumFormsA", hPrinter, Level, pForm, cbBuf, pcbNeeded, pcReturned);
            }
            return (int)mh$.invokeExact(hPrinter, Level, pForm, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumFormsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("EnumFormsW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumFormsW(HANDLE hPrinter, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static FunctionDescriptor EnumFormsW$descriptor() {
        return EnumFormsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumFormsW(HANDLE hPrinter, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MethodHandle EnumFormsW$handle() {
        return EnumFormsW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumFormsW(HANDLE hPrinter, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MemorySegment EnumFormsW$address() {
        return EnumFormsW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumFormsW(HANDLE hPrinter, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static int EnumFormsW(MemorySegment hPrinter, int Level, MemorySegment pForm, int cbBuf, MemorySegment pcbNeeded, MemorySegment pcReturned) {
        var mh$ = EnumFormsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumFormsW", hPrinter, Level, pForm, cbBuf, pcbNeeded, pcReturned);
            }
            return (int)mh$.invokeExact(hPrinter, Level, pForm, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumMonitorsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("EnumMonitorsA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumMonitorsA(LPSTR pName, DWORD Level, LPBYTE pMonitor, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static FunctionDescriptor EnumMonitorsA$descriptor() {
        return EnumMonitorsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumMonitorsA(LPSTR pName, DWORD Level, LPBYTE pMonitor, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MethodHandle EnumMonitorsA$handle() {
        return EnumMonitorsA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumMonitorsA(LPSTR pName, DWORD Level, LPBYTE pMonitor, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MemorySegment EnumMonitorsA$address() {
        return EnumMonitorsA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumMonitorsA(LPSTR pName, DWORD Level, LPBYTE pMonitor, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static int EnumMonitorsA(MemorySegment pName, int Level, MemorySegment pMonitor, int cbBuf, MemorySegment pcbNeeded, MemorySegment pcReturned) {
        var mh$ = EnumMonitorsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumMonitorsA", pName, Level, pMonitor, cbBuf, pcbNeeded, pcReturned);
            }
            return (int)mh$.invokeExact(pName, Level, pMonitor, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumMonitorsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("EnumMonitorsW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumMonitorsW(LPWSTR pName, DWORD Level, LPBYTE pMonitor, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static FunctionDescriptor EnumMonitorsW$descriptor() {
        return EnumMonitorsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumMonitorsW(LPWSTR pName, DWORD Level, LPBYTE pMonitor, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MethodHandle EnumMonitorsW$handle() {
        return EnumMonitorsW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumMonitorsW(LPWSTR pName, DWORD Level, LPBYTE pMonitor, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MemorySegment EnumMonitorsW$address() {
        return EnumMonitorsW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumMonitorsW(LPWSTR pName, DWORD Level, LPBYTE pMonitor, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static int EnumMonitorsW(MemorySegment pName, int Level, MemorySegment pMonitor, int cbBuf, MemorySegment pcbNeeded, MemorySegment pcReturned) {
        var mh$ = EnumMonitorsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumMonitorsW", pName, Level, pMonitor, cbBuf, pcbNeeded, pcReturned);
            }
            return (int)mh$.invokeExact(pName, Level, pMonitor, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddMonitorA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AddMonitorA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddMonitorA(LPSTR pName, DWORD Level, LPBYTE pMonitors)
     * }
     */
    public static FunctionDescriptor AddMonitorA$descriptor() {
        return AddMonitorA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddMonitorA(LPSTR pName, DWORD Level, LPBYTE pMonitors)
     * }
     */
    public static MethodHandle AddMonitorA$handle() {
        return AddMonitorA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddMonitorA(LPSTR pName, DWORD Level, LPBYTE pMonitors)
     * }
     */
    public static MemorySegment AddMonitorA$address() {
        return AddMonitorA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddMonitorA(LPSTR pName, DWORD Level, LPBYTE pMonitors)
     * }
     */
    public static int AddMonitorA(MemorySegment pName, int Level, MemorySegment pMonitors) {
        var mh$ = AddMonitorA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddMonitorA", pName, Level, pMonitors);
            }
            return (int)mh$.invokeExact(pName, Level, pMonitors);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddMonitorW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AddMonitorW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddMonitorW(LPWSTR pName, DWORD Level, LPBYTE pMonitors)
     * }
     */
    public static FunctionDescriptor AddMonitorW$descriptor() {
        return AddMonitorW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddMonitorW(LPWSTR pName, DWORD Level, LPBYTE pMonitors)
     * }
     */
    public static MethodHandle AddMonitorW$handle() {
        return AddMonitorW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddMonitorW(LPWSTR pName, DWORD Level, LPBYTE pMonitors)
     * }
     */
    public static MemorySegment AddMonitorW$address() {
        return AddMonitorW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddMonitorW(LPWSTR pName, DWORD Level, LPBYTE pMonitors)
     * }
     */
    public static int AddMonitorW(MemorySegment pName, int Level, MemorySegment pMonitors) {
        var mh$ = AddMonitorW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddMonitorW", pName, Level, pMonitors);
            }
            return (int)mh$.invokeExact(pName, Level, pMonitors);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeleteMonitorA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DeleteMonitorA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeleteMonitorA(LPSTR pName, LPSTR pEnvironment, LPSTR pMonitorName)
     * }
     */
    public static FunctionDescriptor DeleteMonitorA$descriptor() {
        return DeleteMonitorA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeleteMonitorA(LPSTR pName, LPSTR pEnvironment, LPSTR pMonitorName)
     * }
     */
    public static MethodHandle DeleteMonitorA$handle() {
        return DeleteMonitorA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeleteMonitorA(LPSTR pName, LPSTR pEnvironment, LPSTR pMonitorName)
     * }
     */
    public static MemorySegment DeleteMonitorA$address() {
        return DeleteMonitorA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeleteMonitorA(LPSTR pName, LPSTR pEnvironment, LPSTR pMonitorName)
     * }
     */
    public static int DeleteMonitorA(MemorySegment pName, MemorySegment pEnvironment, MemorySegment pMonitorName) {
        var mh$ = DeleteMonitorA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeleteMonitorA", pName, pEnvironment, pMonitorName);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, pMonitorName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeleteMonitorW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DeleteMonitorW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeleteMonitorW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pMonitorName)
     * }
     */
    public static FunctionDescriptor DeleteMonitorW$descriptor() {
        return DeleteMonitorW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeleteMonitorW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pMonitorName)
     * }
     */
    public static MethodHandle DeleteMonitorW$handle() {
        return DeleteMonitorW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeleteMonitorW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pMonitorName)
     * }
     */
    public static MemorySegment DeleteMonitorW$address() {
        return DeleteMonitorW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeleteMonitorW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pMonitorName)
     * }
     */
    public static int DeleteMonitorW(MemorySegment pName, MemorySegment pEnvironment, MemorySegment pMonitorName) {
        var mh$ = DeleteMonitorW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeleteMonitorW", pName, pEnvironment, pMonitorName);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, pMonitorName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumPortsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("EnumPortsA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumPortsA(LPSTR pName, DWORD Level, LPBYTE pPort, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static FunctionDescriptor EnumPortsA$descriptor() {
        return EnumPortsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumPortsA(LPSTR pName, DWORD Level, LPBYTE pPort, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MethodHandle EnumPortsA$handle() {
        return EnumPortsA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumPortsA(LPSTR pName, DWORD Level, LPBYTE pPort, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MemorySegment EnumPortsA$address() {
        return EnumPortsA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumPortsA(LPSTR pName, DWORD Level, LPBYTE pPort, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static int EnumPortsA(MemorySegment pName, int Level, MemorySegment pPort, int cbBuf, MemorySegment pcbNeeded, MemorySegment pcReturned) {
        var mh$ = EnumPortsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumPortsA", pName, Level, pPort, cbBuf, pcbNeeded, pcReturned);
            }
            return (int)mh$.invokeExact(pName, Level, pPort, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumPortsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("EnumPortsW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumPortsW(LPWSTR pName, DWORD Level, LPBYTE pPort, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static FunctionDescriptor EnumPortsW$descriptor() {
        return EnumPortsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumPortsW(LPWSTR pName, DWORD Level, LPBYTE pPort, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MethodHandle EnumPortsW$handle() {
        return EnumPortsW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumPortsW(LPWSTR pName, DWORD Level, LPBYTE pPort, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MemorySegment EnumPortsW$address() {
        return EnumPortsW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumPortsW(LPWSTR pName, DWORD Level, LPBYTE pPort, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static int EnumPortsW(MemorySegment pName, int Level, MemorySegment pPort, int cbBuf, MemorySegment pcbNeeded, MemorySegment pcReturned) {
        var mh$ = EnumPortsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumPortsW", pName, Level, pPort, cbBuf, pcbNeeded, pcReturned);
            }
            return (int)mh$.invokeExact(pName, Level, pPort, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddPortA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AddPortA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddPortA(LPSTR pName, HWND hWnd, LPSTR pMonitorName)
     * }
     */
    public static FunctionDescriptor AddPortA$descriptor() {
        return AddPortA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddPortA(LPSTR pName, HWND hWnd, LPSTR pMonitorName)
     * }
     */
    public static MethodHandle AddPortA$handle() {
        return AddPortA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddPortA(LPSTR pName, HWND hWnd, LPSTR pMonitorName)
     * }
     */
    public static MemorySegment AddPortA$address() {
        return AddPortA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddPortA(LPSTR pName, HWND hWnd, LPSTR pMonitorName)
     * }
     */
    public static int AddPortA(MemorySegment pName, MemorySegment hWnd, MemorySegment pMonitorName) {
        var mh$ = AddPortA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddPortA", pName, hWnd, pMonitorName);
            }
            return (int)mh$.invokeExact(pName, hWnd, pMonitorName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddPortW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AddPortW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddPortW(LPWSTR pName, HWND hWnd, LPWSTR pMonitorName)
     * }
     */
    public static FunctionDescriptor AddPortW$descriptor() {
        return AddPortW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddPortW(LPWSTR pName, HWND hWnd, LPWSTR pMonitorName)
     * }
     */
    public static MethodHandle AddPortW$handle() {
        return AddPortW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddPortW(LPWSTR pName, HWND hWnd, LPWSTR pMonitorName)
     * }
     */
    public static MemorySegment AddPortW$address() {
        return AddPortW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddPortW(LPWSTR pName, HWND hWnd, LPWSTR pMonitorName)
     * }
     */
    public static int AddPortW(MemorySegment pName, MemorySegment hWnd, MemorySegment pMonitorName) {
        var mh$ = AddPortW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddPortW", pName, hWnd, pMonitorName);
            }
            return (int)mh$.invokeExact(pName, hWnd, pMonitorName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ConfigurePortA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ConfigurePortA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ConfigurePortA(LPSTR pName, HWND hWnd, LPSTR pPortName)
     * }
     */
    public static FunctionDescriptor ConfigurePortA$descriptor() {
        return ConfigurePortA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ConfigurePortA(LPSTR pName, HWND hWnd, LPSTR pPortName)
     * }
     */
    public static MethodHandle ConfigurePortA$handle() {
        return ConfigurePortA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ConfigurePortA(LPSTR pName, HWND hWnd, LPSTR pPortName)
     * }
     */
    public static MemorySegment ConfigurePortA$address() {
        return ConfigurePortA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ConfigurePortA(LPSTR pName, HWND hWnd, LPSTR pPortName)
     * }
     */
    public static int ConfigurePortA(MemorySegment pName, MemorySegment hWnd, MemorySegment pPortName) {
        var mh$ = ConfigurePortA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ConfigurePortA", pName, hWnd, pPortName);
            }
            return (int)mh$.invokeExact(pName, hWnd, pPortName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ConfigurePortW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ConfigurePortW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ConfigurePortW(LPWSTR pName, HWND hWnd, LPWSTR pPortName)
     * }
     */
    public static FunctionDescriptor ConfigurePortW$descriptor() {
        return ConfigurePortW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ConfigurePortW(LPWSTR pName, HWND hWnd, LPWSTR pPortName)
     * }
     */
    public static MethodHandle ConfigurePortW$handle() {
        return ConfigurePortW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ConfigurePortW(LPWSTR pName, HWND hWnd, LPWSTR pPortName)
     * }
     */
    public static MemorySegment ConfigurePortW$address() {
        return ConfigurePortW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ConfigurePortW(LPWSTR pName, HWND hWnd, LPWSTR pPortName)
     * }
     */
    public static int ConfigurePortW(MemorySegment pName, MemorySegment hWnd, MemorySegment pPortName) {
        var mh$ = ConfigurePortW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ConfigurePortW", pName, hWnd, pPortName);
            }
            return (int)mh$.invokeExact(pName, hWnd, pPortName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePortA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DeletePortA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeletePortA(LPSTR pName, HWND hWnd, LPSTR pPortName)
     * }
     */
    public static FunctionDescriptor DeletePortA$descriptor() {
        return DeletePortA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeletePortA(LPSTR pName, HWND hWnd, LPSTR pPortName)
     * }
     */
    public static MethodHandle DeletePortA$handle() {
        return DeletePortA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeletePortA(LPSTR pName, HWND hWnd, LPSTR pPortName)
     * }
     */
    public static MemorySegment DeletePortA$address() {
        return DeletePortA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeletePortA(LPSTR pName, HWND hWnd, LPSTR pPortName)
     * }
     */
    public static int DeletePortA(MemorySegment pName, MemorySegment hWnd, MemorySegment pPortName) {
        var mh$ = DeletePortA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePortA", pName, hWnd, pPortName);
            }
            return (int)mh$.invokeExact(pName, hWnd, pPortName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePortW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DeletePortW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeletePortW(LPWSTR pName, HWND hWnd, LPWSTR pPortName)
     * }
     */
    public static FunctionDescriptor DeletePortW$descriptor() {
        return DeletePortW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeletePortW(LPWSTR pName, HWND hWnd, LPWSTR pPortName)
     * }
     */
    public static MethodHandle DeletePortW$handle() {
        return DeletePortW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeletePortW(LPWSTR pName, HWND hWnd, LPWSTR pPortName)
     * }
     */
    public static MemorySegment DeletePortW$address() {
        return DeletePortW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeletePortW(LPWSTR pName, HWND hWnd, LPWSTR pPortName)
     * }
     */
    public static int DeletePortW(MemorySegment pName, MemorySegment hWnd, MemorySegment pPortName) {
        var mh$ = DeletePortW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePortW", pName, hWnd, pPortName);
            }
            return (int)mh$.invokeExact(pName, hWnd, pPortName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XcvDataW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("XcvDataW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL XcvDataW(HANDLE hXcv, PCWSTR pszDataName, PBYTE pInputData, DWORD cbInputData, PBYTE pOutputData, DWORD cbOutputData, PDWORD pcbOutputNeeded, PDWORD pdwStatus)
     * }
     */
    public static FunctionDescriptor XcvDataW$descriptor() {
        return XcvDataW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL XcvDataW(HANDLE hXcv, PCWSTR pszDataName, PBYTE pInputData, DWORD cbInputData, PBYTE pOutputData, DWORD cbOutputData, PDWORD pcbOutputNeeded, PDWORD pdwStatus)
     * }
     */
    public static MethodHandle XcvDataW$handle() {
        return XcvDataW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL XcvDataW(HANDLE hXcv, PCWSTR pszDataName, PBYTE pInputData, DWORD cbInputData, PBYTE pOutputData, DWORD cbOutputData, PDWORD pcbOutputNeeded, PDWORD pdwStatus)
     * }
     */
    public static MemorySegment XcvDataW$address() {
        return XcvDataW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL XcvDataW(HANDLE hXcv, PCWSTR pszDataName, PBYTE pInputData, DWORD cbInputData, PBYTE pOutputData, DWORD cbOutputData, PDWORD pcbOutputNeeded, PDWORD pdwStatus)
     * }
     */
    public static int XcvDataW(MemorySegment hXcv, MemorySegment pszDataName, MemorySegment pInputData, int cbInputData, MemorySegment pOutputData, int cbOutputData, MemorySegment pcbOutputNeeded, MemorySegment pdwStatus) {
        var mh$ = XcvDataW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XcvDataW", hXcv, pszDataName, pInputData, cbInputData, pOutputData, cbOutputData, pcbOutputNeeded, pdwStatus);
            }
            return (int)mh$.invokeExact(hXcv, pszDataName, pInputData, cbInputData, pOutputData, cbOutputData, pcbOutputNeeded, pdwStatus);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetDefaultPrinterA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetDefaultPrinterA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetDefaultPrinterA(LPSTR pszBuffer, LPDWORD pcchBuffer)
     * }
     */
    public static FunctionDescriptor GetDefaultPrinterA$descriptor() {
        return GetDefaultPrinterA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetDefaultPrinterA(LPSTR pszBuffer, LPDWORD pcchBuffer)
     * }
     */
    public static MethodHandle GetDefaultPrinterA$handle() {
        return GetDefaultPrinterA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetDefaultPrinterA(LPSTR pszBuffer, LPDWORD pcchBuffer)
     * }
     */
    public static MemorySegment GetDefaultPrinterA$address() {
        return GetDefaultPrinterA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetDefaultPrinterA(LPSTR pszBuffer, LPDWORD pcchBuffer)
     * }
     */
    public static int GetDefaultPrinterA(MemorySegment pszBuffer, MemorySegment pcchBuffer) {
        var mh$ = GetDefaultPrinterA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetDefaultPrinterA", pszBuffer, pcchBuffer);
            }
            return (int)mh$.invokeExact(pszBuffer, pcchBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetDefaultPrinterW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetDefaultPrinterW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetDefaultPrinterW(LPWSTR pszBuffer, LPDWORD pcchBuffer)
     * }
     */
    public static FunctionDescriptor GetDefaultPrinterW$descriptor() {
        return GetDefaultPrinterW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetDefaultPrinterW(LPWSTR pszBuffer, LPDWORD pcchBuffer)
     * }
     */
    public static MethodHandle GetDefaultPrinterW$handle() {
        return GetDefaultPrinterW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetDefaultPrinterW(LPWSTR pszBuffer, LPDWORD pcchBuffer)
     * }
     */
    public static MemorySegment GetDefaultPrinterW$address() {
        return GetDefaultPrinterW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetDefaultPrinterW(LPWSTR pszBuffer, LPDWORD pcchBuffer)
     * }
     */
    public static int GetDefaultPrinterW(MemorySegment pszBuffer, MemorySegment pcchBuffer) {
        var mh$ = GetDefaultPrinterW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetDefaultPrinterW", pszBuffer, pcchBuffer);
            }
            return (int)mh$.invokeExact(pszBuffer, pcchBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetDefaultPrinterA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SetDefaultPrinterA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL SetDefaultPrinterA(LPCSTR pszPrinter)
     * }
     */
    public static FunctionDescriptor SetDefaultPrinterA$descriptor() {
        return SetDefaultPrinterA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL SetDefaultPrinterA(LPCSTR pszPrinter)
     * }
     */
    public static MethodHandle SetDefaultPrinterA$handle() {
        return SetDefaultPrinterA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL SetDefaultPrinterA(LPCSTR pszPrinter)
     * }
     */
    public static MemorySegment SetDefaultPrinterA$address() {
        return SetDefaultPrinterA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL SetDefaultPrinterA(LPCSTR pszPrinter)
     * }
     */
    public static int SetDefaultPrinterA(MemorySegment pszPrinter) {
        var mh$ = SetDefaultPrinterA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetDefaultPrinterA", pszPrinter);
            }
            return (int)mh$.invokeExact(pszPrinter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetDefaultPrinterW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SetDefaultPrinterW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL SetDefaultPrinterW(LPCWSTR pszPrinter)
     * }
     */
    public static FunctionDescriptor SetDefaultPrinterW$descriptor() {
        return SetDefaultPrinterW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL SetDefaultPrinterW(LPCWSTR pszPrinter)
     * }
     */
    public static MethodHandle SetDefaultPrinterW$handle() {
        return SetDefaultPrinterW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL SetDefaultPrinterW(LPCWSTR pszPrinter)
     * }
     */
    public static MemorySegment SetDefaultPrinterW$address() {
        return SetDefaultPrinterW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL SetDefaultPrinterW(LPCWSTR pszPrinter)
     * }
     */
    public static int SetDefaultPrinterW(MemorySegment pszPrinter) {
        var mh$ = SetDefaultPrinterW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetDefaultPrinterW", pszPrinter);
            }
            return (int)mh$.invokeExact(pszPrinter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetPortA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SetPortA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL SetPortA(LPSTR pName, LPSTR pPortName, DWORD dwLevel, LPBYTE pPortInfo)
     * }
     */
    public static FunctionDescriptor SetPortA$descriptor() {
        return SetPortA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL SetPortA(LPSTR pName, LPSTR pPortName, DWORD dwLevel, LPBYTE pPortInfo)
     * }
     */
    public static MethodHandle SetPortA$handle() {
        return SetPortA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL SetPortA(LPSTR pName, LPSTR pPortName, DWORD dwLevel, LPBYTE pPortInfo)
     * }
     */
    public static MemorySegment SetPortA$address() {
        return SetPortA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL SetPortA(LPSTR pName, LPSTR pPortName, DWORD dwLevel, LPBYTE pPortInfo)
     * }
     */
    public static int SetPortA(MemorySegment pName, MemorySegment pPortName, int dwLevel, MemorySegment pPortInfo) {
        var mh$ = SetPortA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetPortA", pName, pPortName, dwLevel, pPortInfo);
            }
            return (int)mh$.invokeExact(pName, pPortName, dwLevel, pPortInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetPortW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SetPortW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL SetPortW(LPWSTR pName, LPWSTR pPortName, DWORD dwLevel, LPBYTE pPortInfo)
     * }
     */
    public static FunctionDescriptor SetPortW$descriptor() {
        return SetPortW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL SetPortW(LPWSTR pName, LPWSTR pPortName, DWORD dwLevel, LPBYTE pPortInfo)
     * }
     */
    public static MethodHandle SetPortW$handle() {
        return SetPortW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL SetPortW(LPWSTR pName, LPWSTR pPortName, DWORD dwLevel, LPBYTE pPortInfo)
     * }
     */
    public static MemorySegment SetPortW$address() {
        return SetPortW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL SetPortW(LPWSTR pName, LPWSTR pPortName, DWORD dwLevel, LPBYTE pPortInfo)
     * }
     */
    public static int SetPortW(MemorySegment pName, MemorySegment pPortName, int dwLevel, MemorySegment pPortInfo) {
        var mh$ = SetPortW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetPortW", pName, pPortName, dwLevel, pPortInfo);
            }
            return (int)mh$.invokeExact(pName, pPortName, dwLevel, pPortInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddPrinterConnectionA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AddPrinterConnectionA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddPrinterConnectionA(LPSTR pName)
     * }
     */
    public static FunctionDescriptor AddPrinterConnectionA$descriptor() {
        return AddPrinterConnectionA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddPrinterConnectionA(LPSTR pName)
     * }
     */
    public static MethodHandle AddPrinterConnectionA$handle() {
        return AddPrinterConnectionA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddPrinterConnectionA(LPSTR pName)
     * }
     */
    public static MemorySegment AddPrinterConnectionA$address() {
        return AddPrinterConnectionA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddPrinterConnectionA(LPSTR pName)
     * }
     */
    public static int AddPrinterConnectionA(MemorySegment pName) {
        var mh$ = AddPrinterConnectionA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddPrinterConnectionA", pName);
            }
            return (int)mh$.invokeExact(pName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddPrinterConnectionW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AddPrinterConnectionW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddPrinterConnectionW(LPWSTR pName)
     * }
     */
    public static FunctionDescriptor AddPrinterConnectionW$descriptor() {
        return AddPrinterConnectionW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddPrinterConnectionW(LPWSTR pName)
     * }
     */
    public static MethodHandle AddPrinterConnectionW$handle() {
        return AddPrinterConnectionW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddPrinterConnectionW(LPWSTR pName)
     * }
     */
    public static MemorySegment AddPrinterConnectionW$address() {
        return AddPrinterConnectionW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddPrinterConnectionW(LPWSTR pName)
     * }
     */
    public static int AddPrinterConnectionW(MemorySegment pName) {
        var mh$ = AddPrinterConnectionW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddPrinterConnectionW", pName);
            }
            return (int)mh$.invokeExact(pName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrinterConnectionA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DeletePrinterConnectionA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeletePrinterConnectionA(LPSTR pName)
     * }
     */
    public static FunctionDescriptor DeletePrinterConnectionA$descriptor() {
        return DeletePrinterConnectionA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeletePrinterConnectionA(LPSTR pName)
     * }
     */
    public static MethodHandle DeletePrinterConnectionA$handle() {
        return DeletePrinterConnectionA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeletePrinterConnectionA(LPSTR pName)
     * }
     */
    public static MemorySegment DeletePrinterConnectionA$address() {
        return DeletePrinterConnectionA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeletePrinterConnectionA(LPSTR pName)
     * }
     */
    public static int DeletePrinterConnectionA(MemorySegment pName) {
        var mh$ = DeletePrinterConnectionA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrinterConnectionA", pName);
            }
            return (int)mh$.invokeExact(pName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrinterConnectionW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DeletePrinterConnectionW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeletePrinterConnectionW(LPWSTR pName)
     * }
     */
    public static FunctionDescriptor DeletePrinterConnectionW$descriptor() {
        return DeletePrinterConnectionW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeletePrinterConnectionW(LPWSTR pName)
     * }
     */
    public static MethodHandle DeletePrinterConnectionW$handle() {
        return DeletePrinterConnectionW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeletePrinterConnectionW(LPWSTR pName)
     * }
     */
    public static MemorySegment DeletePrinterConnectionW$address() {
        return DeletePrinterConnectionW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeletePrinterConnectionW(LPWSTR pName)
     * }
     */
    public static int DeletePrinterConnectionW(MemorySegment pName) {
        var mh$ = DeletePrinterConnectionW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrinterConnectionW", pName);
            }
            return (int)mh$.invokeExact(pName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ConnectToPrinterDlg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ConnectToPrinterDlg");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HANDLE ConnectToPrinterDlg(HWND hwnd, DWORD Flags)
     * }
     */
    public static FunctionDescriptor ConnectToPrinterDlg$descriptor() {
        return ConnectToPrinterDlg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HANDLE ConnectToPrinterDlg(HWND hwnd, DWORD Flags)
     * }
     */
    public static MethodHandle ConnectToPrinterDlg$handle() {
        return ConnectToPrinterDlg.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HANDLE ConnectToPrinterDlg(HWND hwnd, DWORD Flags)
     * }
     */
    public static MemorySegment ConnectToPrinterDlg$address() {
        return ConnectToPrinterDlg.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HANDLE ConnectToPrinterDlg(HWND hwnd, DWORD Flags)
     * }
     */
    public static MemorySegment ConnectToPrinterDlg(MemorySegment hwnd, int Flags) {
        var mh$ = ConnectToPrinterDlg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ConnectToPrinterDlg", hwnd, Flags);
            }
            return (MemorySegment)mh$.invokeExact(hwnd, Flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _PROVIDOR_INFO_1A {
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDLLName;
     * } *PPROVIDOR_INFO_1A
     * }
     */
    public static final AddressLayout PPROVIDOR_INFO_1A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROVIDOR_INFO_1A {
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDLLName;
     * } *LPPROVIDOR_INFO_1A
     * }
     */
    public static final AddressLayout LPPROVIDOR_INFO_1A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROVIDOR_INFO_1W {
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDLLName;
     * } *PPROVIDOR_INFO_1W
     * }
     */
    public static final AddressLayout PPROVIDOR_INFO_1W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROVIDOR_INFO_1W {
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDLLName;
     * } *LPPROVIDOR_INFO_1W
     * }
     */
    public static final AddressLayout LPPROVIDOR_INFO_1W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPROVIDOR_INFO_1A PPROVIDOR_INFO_1
     * }
     */
    public static final AddressLayout PPROVIDOR_INFO_1 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPROVIDOR_INFO_1A LPPROVIDOR_INFO_1
     * }
     */
    public static final AddressLayout LPPROVIDOR_INFO_1 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROVIDOR_INFO_2A {
     *     LPSTR pOrder;
     * } *PPROVIDOR_INFO_2A
     * }
     */
    public static final AddressLayout PPROVIDOR_INFO_2A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROVIDOR_INFO_2A {
     *     LPSTR pOrder;
     * } *LPPROVIDOR_INFO_2A
     * }
     */
    public static final AddressLayout LPPROVIDOR_INFO_2A = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROVIDOR_INFO_2W {
     *     LPWSTR pOrder;
     * } *PPROVIDOR_INFO_2W
     * }
     */
    public static final AddressLayout PPROVIDOR_INFO_2W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROVIDOR_INFO_2W {
     *     LPWSTR pOrder;
     * } *LPPROVIDOR_INFO_2W
     * }
     */
    public static final AddressLayout LPPROVIDOR_INFO_2W = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPROVIDOR_INFO_2A PPROVIDOR_INFO_2
     * }
     */
    public static final AddressLayout PPROVIDOR_INFO_2 = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPROVIDOR_INFO_2A LPPROVIDOR_INFO_2
     * }
     */
    public static final AddressLayout LPPROVIDOR_INFO_2 = wgl_h.C_POINTER;

    private static class AddPrintProvidorA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AddPrintProvidorA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddPrintProvidorA(LPSTR pName, DWORD Level, LPBYTE pProvidorInfo)
     * }
     */
    public static FunctionDescriptor AddPrintProvidorA$descriptor() {
        return AddPrintProvidorA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddPrintProvidorA(LPSTR pName, DWORD Level, LPBYTE pProvidorInfo)
     * }
     */
    public static MethodHandle AddPrintProvidorA$handle() {
        return AddPrintProvidorA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddPrintProvidorA(LPSTR pName, DWORD Level, LPBYTE pProvidorInfo)
     * }
     */
    public static MemorySegment AddPrintProvidorA$address() {
        return AddPrintProvidorA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddPrintProvidorA(LPSTR pName, DWORD Level, LPBYTE pProvidorInfo)
     * }
     */
    public static int AddPrintProvidorA(MemorySegment pName, int Level, MemorySegment pProvidorInfo) {
        var mh$ = AddPrintProvidorA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddPrintProvidorA", pName, Level, pProvidorInfo);
            }
            return (int)mh$.invokeExact(pName, Level, pProvidorInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddPrintProvidorW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AddPrintProvidorW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddPrintProvidorW(LPWSTR pName, DWORD Level, LPBYTE pProvidorInfo)
     * }
     */
    public static FunctionDescriptor AddPrintProvidorW$descriptor() {
        return AddPrintProvidorW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddPrintProvidorW(LPWSTR pName, DWORD Level, LPBYTE pProvidorInfo)
     * }
     */
    public static MethodHandle AddPrintProvidorW$handle() {
        return AddPrintProvidorW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddPrintProvidorW(LPWSTR pName, DWORD Level, LPBYTE pProvidorInfo)
     * }
     */
    public static MemorySegment AddPrintProvidorW$address() {
        return AddPrintProvidorW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddPrintProvidorW(LPWSTR pName, DWORD Level, LPBYTE pProvidorInfo)
     * }
     */
    public static int AddPrintProvidorW(MemorySegment pName, int Level, MemorySegment pProvidorInfo) {
        var mh$ = AddPrintProvidorW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddPrintProvidorW", pName, Level, pProvidorInfo);
            }
            return (int)mh$.invokeExact(pName, Level, pProvidorInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrintProvidorA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DeletePrintProvidorA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeletePrintProvidorA(LPSTR pName, LPSTR pEnvironment, LPSTR pPrintProvidorName)
     * }
     */
    public static FunctionDescriptor DeletePrintProvidorA$descriptor() {
        return DeletePrintProvidorA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeletePrintProvidorA(LPSTR pName, LPSTR pEnvironment, LPSTR pPrintProvidorName)
     * }
     */
    public static MethodHandle DeletePrintProvidorA$handle() {
        return DeletePrintProvidorA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeletePrintProvidorA(LPSTR pName, LPSTR pEnvironment, LPSTR pPrintProvidorName)
     * }
     */
    public static MemorySegment DeletePrintProvidorA$address() {
        return DeletePrintProvidorA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeletePrintProvidorA(LPSTR pName, LPSTR pEnvironment, LPSTR pPrintProvidorName)
     * }
     */
    public static int DeletePrintProvidorA(MemorySegment pName, MemorySegment pEnvironment, MemorySegment pPrintProvidorName) {
        var mh$ = DeletePrintProvidorA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrintProvidorA", pName, pEnvironment, pPrintProvidorName);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, pPrintProvidorName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrintProvidorW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DeletePrintProvidorW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeletePrintProvidorW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pPrintProvidorName)
     * }
     */
    public static FunctionDescriptor DeletePrintProvidorW$descriptor() {
        return DeletePrintProvidorW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeletePrintProvidorW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pPrintProvidorName)
     * }
     */
    public static MethodHandle DeletePrintProvidorW$handle() {
        return DeletePrintProvidorW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeletePrintProvidorW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pPrintProvidorName)
     * }
     */
    public static MemorySegment DeletePrintProvidorW$address() {
        return DeletePrintProvidorW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeletePrintProvidorW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pPrintProvidorName)
     * }
     */
    public static int DeletePrintProvidorW(MemorySegment pName, MemorySegment pEnvironment, MemorySegment pPrintProvidorName) {
        var mh$ = DeletePrintProvidorW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrintProvidorW", pName, pEnvironment, pPrintProvidorName);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, pPrintProvidorName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IsValidDevmodeA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IsValidDevmodeA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL IsValidDevmodeA(PDEVMODEA pDevmode, size_t DevmodeSize)
     * }
     */
    public static FunctionDescriptor IsValidDevmodeA$descriptor() {
        return IsValidDevmodeA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL IsValidDevmodeA(PDEVMODEA pDevmode, size_t DevmodeSize)
     * }
     */
    public static MethodHandle IsValidDevmodeA$handle() {
        return IsValidDevmodeA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL IsValidDevmodeA(PDEVMODEA pDevmode, size_t DevmodeSize)
     * }
     */
    public static MemorySegment IsValidDevmodeA$address() {
        return IsValidDevmodeA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL IsValidDevmodeA(PDEVMODEA pDevmode, size_t DevmodeSize)
     * }
     */
    public static int IsValidDevmodeA(MemorySegment pDevmode, long DevmodeSize) {
        var mh$ = IsValidDevmodeA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IsValidDevmodeA", pDevmode, DevmodeSize);
            }
            return (int)mh$.invokeExact(pDevmode, DevmodeSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IsValidDevmodeW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IsValidDevmodeW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL IsValidDevmodeW(PDEVMODEW pDevmode, size_t DevmodeSize)
     * }
     */
    public static FunctionDescriptor IsValidDevmodeW$descriptor() {
        return IsValidDevmodeW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL IsValidDevmodeW(PDEVMODEW pDevmode, size_t DevmodeSize)
     * }
     */
    public static MethodHandle IsValidDevmodeW$handle() {
        return IsValidDevmodeW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL IsValidDevmodeW(PDEVMODEW pDevmode, size_t DevmodeSize)
     * }
     */
    public static MemorySegment IsValidDevmodeW$address() {
        return IsValidDevmodeW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL IsValidDevmodeW(PDEVMODEW pDevmode, size_t DevmodeSize)
     * }
     */
    public static int IsValidDevmodeW(MemorySegment pDevmode, long DevmodeSize) {
        var mh$ = IsValidDevmodeW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IsValidDevmodeW", pDevmode, DevmodeSize);
            }
            return (int)mh$.invokeExact(pDevmode, DevmodeSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int PRINTER_OPTION_NO_CACHE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _PRINTER_OPTION_FLAGS.PRINTER_OPTION_NO_CACHE = 1
     * }
     */
    public static int PRINTER_OPTION_NO_CACHE() {
        return PRINTER_OPTION_NO_CACHE;
    }
    private static final int PRINTER_OPTION_CACHE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _PRINTER_OPTION_FLAGS.PRINTER_OPTION_CACHE = 2
     * }
     */
    public static int PRINTER_OPTION_CACHE() {
        return PRINTER_OPTION_CACHE;
    }
    private static final int PRINTER_OPTION_CLIENT_CHANGE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _PRINTER_OPTION_FLAGS.PRINTER_OPTION_CLIENT_CHANGE = 4
     * }
     */
    public static int PRINTER_OPTION_CLIENT_CHANGE() {
        return PRINTER_OPTION_CLIENT_CHANGE;
    }
    private static final int PRINTER_OPTION_NO_CLIENT_DATA = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _PRINTER_OPTION_FLAGS.PRINTER_OPTION_NO_CLIENT_DATA = 8
     * }
     */
    public static int PRINTER_OPTION_NO_CLIENT_DATA() {
        return PRINTER_OPTION_NO_CLIENT_DATA;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_OPTIONSA {
     *     UINT cbSize;
     *     DWORD dwFlags;
     * } *PPRINTER_OPTIONSA
     * }
     */
    public static final AddressLayout PPRINTER_OPTIONSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_OPTIONSA {
     *     UINT cbSize;
     *     DWORD dwFlags;
     * } *LPPRINTER_OPTIONSA
     * }
     */
    public static final AddressLayout LPPRINTER_OPTIONSA = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_OPTIONSW {
     *     UINT cbSize;
     *     DWORD dwFlags;
     * } *PPRINTER_OPTIONSW
     * }
     */
    public static final AddressLayout PPRINTER_OPTIONSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_OPTIONSW {
     *     UINT cbSize;
     *     DWORD dwFlags;
     * } *LPPRINTER_OPTIONSW
     * }
     */
    public static final AddressLayout LPPRINTER_OPTIONSW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPRINTER_OPTIONSA PPRINTER_OPTIONS
     * }
     */
    public static final AddressLayout PPRINTER_OPTIONS = wgl_h.C_POINTER;
}

