// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _FILE_SYSTEM_RECOGNITION_INFORMATION {
 *     CHAR FileSystem[9];
 * }
 * }
 */
public class _FILE_SYSTEM_RECOGNITION_INFORMATION {

    _FILE_SYSTEM_RECOGNITION_INFORMATION() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(9, wgl_h.C_CHAR).withName("FileSystem")
    ).withName("_FILE_SYSTEM_RECOGNITION_INFORMATION");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout FileSystem$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("FileSystem"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CHAR FileSystem[9]
     * }
     */
    public static final SequenceLayout FileSystem$layout() {
        return FileSystem$LAYOUT;
    }

    private static final long FileSystem$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CHAR FileSystem[9]
     * }
     */
    public static final long FileSystem$offset() {
        return FileSystem$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CHAR FileSystem[9]
     * }
     */
    public static MemorySegment FileSystem(MemorySegment struct) {
        return struct.asSlice(FileSystem$OFFSET, FileSystem$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CHAR FileSystem[9]
     * }
     */
    public static void FileSystem(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, FileSystem$OFFSET, FileSystem$LAYOUT.byteSize());
    }

    private static long[] FileSystem$DIMS = { 9 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * CHAR FileSystem[9]
     * }
     */
    public static long[] FileSystem$dimensions() {
        return FileSystem$DIMS;
    }
    private static final VarHandle FileSystem$ELEM_HANDLE = FileSystem$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * CHAR FileSystem[9]
     * }
     */
    public static byte FileSystem(MemorySegment struct, long index0) {
        return (byte)FileSystem$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * CHAR FileSystem[9]
     * }
     */
    public static void FileSystem(MemorySegment struct, long index0, byte fieldValue) {
        FileSystem$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

