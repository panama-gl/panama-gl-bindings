// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _SD_QUERY_STATS_OUTPUT {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("SdsStreamSize"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("SdsAllocationSize"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("SiiStreamSize"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("SiiAllocationSize"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("SdhStreamSize"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("SdhAllocationSize"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("NumSDTotal"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("NumSDUnused")
    ).withName("_SD_QUERY_STATS_OUTPUT");
    public static MemoryLayout $LAYOUT() {
        return _SD_QUERY_STATS_OUTPUT.$struct$LAYOUT;
    }
    static final VarHandle SdsStreamSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SdsStreamSize"));
    public static VarHandle SdsStreamSize$VH() {
        return _SD_QUERY_STATS_OUTPUT.SdsStreamSize$VH;
    }
    public static long SdsStreamSize$get(MemorySegment seg) {
        return (long)_SD_QUERY_STATS_OUTPUT.SdsStreamSize$VH.get(seg);
    }
    public static void SdsStreamSize$set( MemorySegment seg, long x) {
        _SD_QUERY_STATS_OUTPUT.SdsStreamSize$VH.set(seg, x);
    }
    public static long SdsStreamSize$get(MemorySegment seg, long index) {
        return (long)_SD_QUERY_STATS_OUTPUT.SdsStreamSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SdsStreamSize$set(MemorySegment seg, long index, long x) {
        _SD_QUERY_STATS_OUTPUT.SdsStreamSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SdsAllocationSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SdsAllocationSize"));
    public static VarHandle SdsAllocationSize$VH() {
        return _SD_QUERY_STATS_OUTPUT.SdsAllocationSize$VH;
    }
    public static long SdsAllocationSize$get(MemorySegment seg) {
        return (long)_SD_QUERY_STATS_OUTPUT.SdsAllocationSize$VH.get(seg);
    }
    public static void SdsAllocationSize$set( MemorySegment seg, long x) {
        _SD_QUERY_STATS_OUTPUT.SdsAllocationSize$VH.set(seg, x);
    }
    public static long SdsAllocationSize$get(MemorySegment seg, long index) {
        return (long)_SD_QUERY_STATS_OUTPUT.SdsAllocationSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SdsAllocationSize$set(MemorySegment seg, long index, long x) {
        _SD_QUERY_STATS_OUTPUT.SdsAllocationSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SiiStreamSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SiiStreamSize"));
    public static VarHandle SiiStreamSize$VH() {
        return _SD_QUERY_STATS_OUTPUT.SiiStreamSize$VH;
    }
    public static long SiiStreamSize$get(MemorySegment seg) {
        return (long)_SD_QUERY_STATS_OUTPUT.SiiStreamSize$VH.get(seg);
    }
    public static void SiiStreamSize$set( MemorySegment seg, long x) {
        _SD_QUERY_STATS_OUTPUT.SiiStreamSize$VH.set(seg, x);
    }
    public static long SiiStreamSize$get(MemorySegment seg, long index) {
        return (long)_SD_QUERY_STATS_OUTPUT.SiiStreamSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SiiStreamSize$set(MemorySegment seg, long index, long x) {
        _SD_QUERY_STATS_OUTPUT.SiiStreamSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SiiAllocationSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SiiAllocationSize"));
    public static VarHandle SiiAllocationSize$VH() {
        return _SD_QUERY_STATS_OUTPUT.SiiAllocationSize$VH;
    }
    public static long SiiAllocationSize$get(MemorySegment seg) {
        return (long)_SD_QUERY_STATS_OUTPUT.SiiAllocationSize$VH.get(seg);
    }
    public static void SiiAllocationSize$set( MemorySegment seg, long x) {
        _SD_QUERY_STATS_OUTPUT.SiiAllocationSize$VH.set(seg, x);
    }
    public static long SiiAllocationSize$get(MemorySegment seg, long index) {
        return (long)_SD_QUERY_STATS_OUTPUT.SiiAllocationSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SiiAllocationSize$set(MemorySegment seg, long index, long x) {
        _SD_QUERY_STATS_OUTPUT.SiiAllocationSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SdhStreamSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SdhStreamSize"));
    public static VarHandle SdhStreamSize$VH() {
        return _SD_QUERY_STATS_OUTPUT.SdhStreamSize$VH;
    }
    public static long SdhStreamSize$get(MemorySegment seg) {
        return (long)_SD_QUERY_STATS_OUTPUT.SdhStreamSize$VH.get(seg);
    }
    public static void SdhStreamSize$set( MemorySegment seg, long x) {
        _SD_QUERY_STATS_OUTPUT.SdhStreamSize$VH.set(seg, x);
    }
    public static long SdhStreamSize$get(MemorySegment seg, long index) {
        return (long)_SD_QUERY_STATS_OUTPUT.SdhStreamSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SdhStreamSize$set(MemorySegment seg, long index, long x) {
        _SD_QUERY_STATS_OUTPUT.SdhStreamSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SdhAllocationSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SdhAllocationSize"));
    public static VarHandle SdhAllocationSize$VH() {
        return _SD_QUERY_STATS_OUTPUT.SdhAllocationSize$VH;
    }
    public static long SdhAllocationSize$get(MemorySegment seg) {
        return (long)_SD_QUERY_STATS_OUTPUT.SdhAllocationSize$VH.get(seg);
    }
    public static void SdhAllocationSize$set( MemorySegment seg, long x) {
        _SD_QUERY_STATS_OUTPUT.SdhAllocationSize$VH.set(seg, x);
    }
    public static long SdhAllocationSize$get(MemorySegment seg, long index) {
        return (long)_SD_QUERY_STATS_OUTPUT.SdhAllocationSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SdhAllocationSize$set(MemorySegment seg, long index, long x) {
        _SD_QUERY_STATS_OUTPUT.SdhAllocationSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NumSDTotal$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NumSDTotal"));
    public static VarHandle NumSDTotal$VH() {
        return _SD_QUERY_STATS_OUTPUT.NumSDTotal$VH;
    }
    public static long NumSDTotal$get(MemorySegment seg) {
        return (long)_SD_QUERY_STATS_OUTPUT.NumSDTotal$VH.get(seg);
    }
    public static void NumSDTotal$set( MemorySegment seg, long x) {
        _SD_QUERY_STATS_OUTPUT.NumSDTotal$VH.set(seg, x);
    }
    public static long NumSDTotal$get(MemorySegment seg, long index) {
        return (long)_SD_QUERY_STATS_OUTPUT.NumSDTotal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NumSDTotal$set(MemorySegment seg, long index, long x) {
        _SD_QUERY_STATS_OUTPUT.NumSDTotal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NumSDUnused$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NumSDUnused"));
    public static VarHandle NumSDUnused$VH() {
        return _SD_QUERY_STATS_OUTPUT.NumSDUnused$VH;
    }
    public static long NumSDUnused$get(MemorySegment seg) {
        return (long)_SD_QUERY_STATS_OUTPUT.NumSDUnused$VH.get(seg);
    }
    public static void NumSDUnused$set( MemorySegment seg, long x) {
        _SD_QUERY_STATS_OUTPUT.NumSDUnused$VH.set(seg, x);
    }
    public static long NumSDUnused$get(MemorySegment seg, long index) {
        return (long)_SD_QUERY_STATS_OUTPUT.NumSDUnused$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NumSDUnused$set(MemorySegment seg, long index, long x) {
        _SD_QUERY_STATS_OUTPUT.NumSDUnused$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


