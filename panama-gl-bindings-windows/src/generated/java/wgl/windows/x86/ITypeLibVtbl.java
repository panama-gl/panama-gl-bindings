// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class ITypeLibVtbl {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTypeInfoCount"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTypeInfo"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTypeInfoType"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTypeInfoOfGuid"),
        Constants$root.C_POINTER$LAYOUT.withName("GetLibAttr"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTypeComp"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDocumentation"),
        Constants$root.C_POINTER$LAYOUT.withName("IsName"),
        Constants$root.C_POINTER$LAYOUT.withName("FindName"),
        Constants$root.C_POINTER$LAYOUT.withName("ReleaseTLibAttr")
    ).withName("ITypeLibVtbl");
    public static MemoryLayout $LAYOUT() {
        return ITypeLibVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        ITypeLibVtbl.QueryInterface$FUNC
    );
    public interface QueryInterface {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(QueryInterface fi, MemorySession session) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, ITypeLibVtbl.QueryInterface$FUNC, session);
        }
        static QueryInterface ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)ITypeLibVtbl.QueryInterface$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return ITypeLibVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeLibVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        ITypeLibVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeLibVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLibVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment, MemorySession session) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), session);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        ITypeLibVtbl.AddRef$FUNC
    );
    public interface AddRef {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(AddRef fi, MemorySession session) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, ITypeLibVtbl.AddRef$FUNC, session);
        }
        static AddRef ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)ITypeLibVtbl.AddRef$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return ITypeLibVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeLibVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        ITypeLibVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeLibVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLibVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment, MemorySession session) {
        return AddRef.ofAddress(AddRef$get(segment), session);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        ITypeLibVtbl.Release$FUNC
    );
    public interface Release {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Release fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Release.class, fi, ITypeLibVtbl.Release$FUNC, session);
        }
        static Release ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)ITypeLibVtbl.Release$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return ITypeLibVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeLibVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        ITypeLibVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeLibVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLibVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment, MemorySession session) {
        return Release.ofAddress(Release$get(segment), session);
    }
    static final FunctionDescriptor GetTypeInfoCount$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfoCount$MH = RuntimeHelper.downcallHandle(
        ITypeLibVtbl.GetTypeInfoCount$FUNC
    );
    public interface GetTypeInfoCount {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(GetTypeInfoCount fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetTypeInfoCount.class, fi, ITypeLibVtbl.GetTypeInfoCount$FUNC, session);
        }
        static GetTypeInfoCount ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)ITypeLibVtbl.GetTypeInfoCount$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfoCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTypeInfoCount"));
    public static VarHandle GetTypeInfoCount$VH() {
        return ITypeLibVtbl.GetTypeInfoCount$VH;
    }
    public static MemoryAddress GetTypeInfoCount$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeLibVtbl.GetTypeInfoCount$VH.get(seg);
    }
    public static void GetTypeInfoCount$set( MemorySegment seg, MemoryAddress x) {
        ITypeLibVtbl.GetTypeInfoCount$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeInfoCount$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeLibVtbl.GetTypeInfoCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfoCount$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLibVtbl.GetTypeInfoCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfoCount GetTypeInfoCount (MemorySegment segment, MemorySession session) {
        return GetTypeInfoCount.ofAddress(GetTypeInfoCount$get(segment), session);
    }
    static final FunctionDescriptor GetTypeInfo$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfo$MH = RuntimeHelper.downcallHandle(
        ITypeLibVtbl.GetTypeInfo$FUNC
    );
    public interface GetTypeInfo {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(GetTypeInfo fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetTypeInfo.class, fi, ITypeLibVtbl.GetTypeInfo$FUNC, session);
        }
        static GetTypeInfo ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)ITypeLibVtbl.GetTypeInfo$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTypeInfo"));
    public static VarHandle GetTypeInfo$VH() {
        return ITypeLibVtbl.GetTypeInfo$VH;
    }
    public static MemoryAddress GetTypeInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeLibVtbl.GetTypeInfo$VH.get(seg);
    }
    public static void GetTypeInfo$set( MemorySegment seg, MemoryAddress x) {
        ITypeLibVtbl.GetTypeInfo$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeLibVtbl.GetTypeInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfo$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLibVtbl.GetTypeInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfo GetTypeInfo (MemorySegment segment, MemorySession session) {
        return GetTypeInfo.ofAddress(GetTypeInfo$get(segment), session);
    }
    static final FunctionDescriptor GetTypeInfoType$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfoType$MH = RuntimeHelper.downcallHandle(
        ITypeLibVtbl.GetTypeInfoType$FUNC
    );
    public interface GetTypeInfoType {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(GetTypeInfoType fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetTypeInfoType.class, fi, ITypeLibVtbl.GetTypeInfoType$FUNC, session);
        }
        static GetTypeInfoType ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)ITypeLibVtbl.GetTypeInfoType$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfoType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTypeInfoType"));
    public static VarHandle GetTypeInfoType$VH() {
        return ITypeLibVtbl.GetTypeInfoType$VH;
    }
    public static MemoryAddress GetTypeInfoType$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeLibVtbl.GetTypeInfoType$VH.get(seg);
    }
    public static void GetTypeInfoType$set( MemorySegment seg, MemoryAddress x) {
        ITypeLibVtbl.GetTypeInfoType$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeInfoType$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeLibVtbl.GetTypeInfoType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfoType$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLibVtbl.GetTypeInfoType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfoType GetTypeInfoType (MemorySegment segment, MemorySession session) {
        return GetTypeInfoType.ofAddress(GetTypeInfoType$get(segment), session);
    }
    static final FunctionDescriptor GetTypeInfoOfGuid$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfoOfGuid$MH = RuntimeHelper.downcallHandle(
        ITypeLibVtbl.GetTypeInfoOfGuid$FUNC
    );
    public interface GetTypeInfoOfGuid {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(GetTypeInfoOfGuid fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetTypeInfoOfGuid.class, fi, ITypeLibVtbl.GetTypeInfoOfGuid$FUNC, session);
        }
        static GetTypeInfoOfGuid ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)ITypeLibVtbl.GetTypeInfoOfGuid$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfoOfGuid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTypeInfoOfGuid"));
    public static VarHandle GetTypeInfoOfGuid$VH() {
        return ITypeLibVtbl.GetTypeInfoOfGuid$VH;
    }
    public static MemoryAddress GetTypeInfoOfGuid$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeLibVtbl.GetTypeInfoOfGuid$VH.get(seg);
    }
    public static void GetTypeInfoOfGuid$set( MemorySegment seg, MemoryAddress x) {
        ITypeLibVtbl.GetTypeInfoOfGuid$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeInfoOfGuid$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeLibVtbl.GetTypeInfoOfGuid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfoOfGuid$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLibVtbl.GetTypeInfoOfGuid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfoOfGuid GetTypeInfoOfGuid (MemorySegment segment, MemorySession session) {
        return GetTypeInfoOfGuid.ofAddress(GetTypeInfoOfGuid$get(segment), session);
    }
    static final FunctionDescriptor GetLibAttr$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetLibAttr$MH = RuntimeHelper.downcallHandle(
        ITypeLibVtbl.GetLibAttr$FUNC
    );
    public interface GetLibAttr {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetLibAttr fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetLibAttr.class, fi, ITypeLibVtbl.GetLibAttr$FUNC, session);
        }
        static GetLibAttr ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)ITypeLibVtbl.GetLibAttr$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetLibAttr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetLibAttr"));
    public static VarHandle GetLibAttr$VH() {
        return ITypeLibVtbl.GetLibAttr$VH;
    }
    public static MemoryAddress GetLibAttr$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeLibVtbl.GetLibAttr$VH.get(seg);
    }
    public static void GetLibAttr$set( MemorySegment seg, MemoryAddress x) {
        ITypeLibVtbl.GetLibAttr$VH.set(seg, x);
    }
    public static MemoryAddress GetLibAttr$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeLibVtbl.GetLibAttr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetLibAttr$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLibVtbl.GetLibAttr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetLibAttr GetLibAttr (MemorySegment segment, MemorySession session) {
        return GetLibAttr.ofAddress(GetLibAttr$get(segment), session);
    }
    static final FunctionDescriptor GetTypeComp$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeComp$MH = RuntimeHelper.downcallHandle(
        ITypeLibVtbl.GetTypeComp$FUNC
    );
    public interface GetTypeComp {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetTypeComp fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetTypeComp.class, fi, ITypeLibVtbl.GetTypeComp$FUNC, session);
        }
        static GetTypeComp ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)ITypeLibVtbl.GetTypeComp$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeComp$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTypeComp"));
    public static VarHandle GetTypeComp$VH() {
        return ITypeLibVtbl.GetTypeComp$VH;
    }
    public static MemoryAddress GetTypeComp$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeLibVtbl.GetTypeComp$VH.get(seg);
    }
    public static void GetTypeComp$set( MemorySegment seg, MemoryAddress x) {
        ITypeLibVtbl.GetTypeComp$VH.set(seg, x);
    }
    public static MemoryAddress GetTypeComp$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeLibVtbl.GetTypeComp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeComp$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLibVtbl.GetTypeComp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeComp GetTypeComp (MemorySegment segment, MemorySession session) {
        return GetTypeComp.ofAddress(GetTypeComp$get(segment), session);
    }
    static final FunctionDescriptor GetDocumentation$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDocumentation$MH = RuntimeHelper.downcallHandle(
        ITypeLibVtbl.GetDocumentation$FUNC
    );
    public interface GetDocumentation {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4, java.lang.foreign.MemoryAddress _x5);
        static MemorySegment allocate(GetDocumentation fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetDocumentation.class, fi, ITypeLibVtbl.GetDocumentation$FUNC, session);
        }
        static GetDocumentation ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4, java.lang.foreign.MemoryAddress __x5) -> {
                try {
                    return (int)ITypeLibVtbl.GetDocumentation$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4, (java.lang.foreign.Addressable)__x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDocumentation$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDocumentation"));
    public static VarHandle GetDocumentation$VH() {
        return ITypeLibVtbl.GetDocumentation$VH;
    }
    public static MemoryAddress GetDocumentation$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeLibVtbl.GetDocumentation$VH.get(seg);
    }
    public static void GetDocumentation$set( MemorySegment seg, MemoryAddress x) {
        ITypeLibVtbl.GetDocumentation$VH.set(seg, x);
    }
    public static MemoryAddress GetDocumentation$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeLibVtbl.GetDocumentation$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDocumentation$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLibVtbl.GetDocumentation$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDocumentation GetDocumentation (MemorySegment segment, MemorySession session) {
        return GetDocumentation.ofAddress(GetDocumentation$get(segment), session);
    }
    static final FunctionDescriptor IsName$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle IsName$MH = RuntimeHelper.downcallHandle(
        ITypeLibVtbl.IsName$FUNC
    );
    public interface IsName {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(IsName fi, MemorySession session) {
            return RuntimeHelper.upcallStub(IsName.class, fi, ITypeLibVtbl.IsName$FUNC, session);
        }
        static IsName ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)ITypeLibVtbl.IsName$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle IsName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("IsName"));
    public static VarHandle IsName$VH() {
        return ITypeLibVtbl.IsName$VH;
    }
    public static MemoryAddress IsName$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeLibVtbl.IsName$VH.get(seg);
    }
    public static void IsName$set( MemorySegment seg, MemoryAddress x) {
        ITypeLibVtbl.IsName$VH.set(seg, x);
    }
    public static MemoryAddress IsName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeLibVtbl.IsName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void IsName$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLibVtbl.IsName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsName IsName (MemorySegment segment, MemorySession session) {
        return IsName.ofAddress(IsName$get(segment), session);
    }
    static final FunctionDescriptor FindName$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle FindName$MH = RuntimeHelper.downcallHandle(
        ITypeLibVtbl.FindName$FUNC
    );
    public interface FindName {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4, java.lang.foreign.MemoryAddress _x5);
        static MemorySegment allocate(FindName fi, MemorySession session) {
            return RuntimeHelper.upcallStub(FindName.class, fi, ITypeLibVtbl.FindName$FUNC, session);
        }
        static FindName ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4, java.lang.foreign.MemoryAddress __x5) -> {
                try {
                    return (int)ITypeLibVtbl.FindName$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4, (java.lang.foreign.Addressable)__x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle FindName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FindName"));
    public static VarHandle FindName$VH() {
        return ITypeLibVtbl.FindName$VH;
    }
    public static MemoryAddress FindName$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeLibVtbl.FindName$VH.get(seg);
    }
    public static void FindName$set( MemorySegment seg, MemoryAddress x) {
        ITypeLibVtbl.FindName$VH.set(seg, x);
    }
    public static MemoryAddress FindName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeLibVtbl.FindName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FindName$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLibVtbl.FindName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static FindName FindName (MemorySegment segment, MemorySession session) {
        return FindName.ofAddress(FindName$get(segment), session);
    }
    static final FunctionDescriptor ReleaseTLibAttr$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ReleaseTLibAttr$MH = RuntimeHelper.downcallHandle(
        ITypeLibVtbl.ReleaseTLibAttr$FUNC
    );
    public interface ReleaseTLibAttr {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(ReleaseTLibAttr fi, MemorySession session) {
            return RuntimeHelper.upcallStub(ReleaseTLibAttr.class, fi, ITypeLibVtbl.ReleaseTLibAttr$FUNC, session);
        }
        static ReleaseTLibAttr ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    ITypeLibVtbl.ReleaseTLibAttr$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ReleaseTLibAttr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ReleaseTLibAttr"));
    public static VarHandle ReleaseTLibAttr$VH() {
        return ITypeLibVtbl.ReleaseTLibAttr$VH;
    }
    public static MemoryAddress ReleaseTLibAttr$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)ITypeLibVtbl.ReleaseTLibAttr$VH.get(seg);
    }
    public static void ReleaseTLibAttr$set( MemorySegment seg, MemoryAddress x) {
        ITypeLibVtbl.ReleaseTLibAttr$VH.set(seg, x);
    }
    public static MemoryAddress ReleaseTLibAttr$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)ITypeLibVtbl.ReleaseTLibAttr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ReleaseTLibAttr$set(MemorySegment seg, long index, MemoryAddress x) {
        ITypeLibVtbl.ReleaseTLibAttr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReleaseTLibAttr ReleaseTLibAttr (MemorySegment segment, MemorySession session) {
        return ReleaseTLibAttr.ofAddress(ReleaseTLibAttr$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


