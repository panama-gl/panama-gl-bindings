// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {
 *     DWORD BeginAddress;
 *     DWORD EndAddress;
 *     DWORD ExceptionHandler;
 *     DWORD HandlerData;
 *     DWORD PrologEndAddress;
 * }
 * }
 */
public class _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {

    _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("BeginAddress"),
        wgl_h.C_LONG.withName("EndAddress"),
        wgl_h.C_LONG.withName("ExceptionHandler"),
        wgl_h.C_LONG.withName("HandlerData"),
        wgl_h.C_LONG.withName("PrologEndAddress")
    ).withName("_IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt BeginAddress$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BeginAddress"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD BeginAddress
     * }
     */
    public static final OfInt BeginAddress$layout() {
        return BeginAddress$LAYOUT;
    }

    private static final long BeginAddress$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD BeginAddress
     * }
     */
    public static final long BeginAddress$offset() {
        return BeginAddress$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD BeginAddress
     * }
     */
    public static int BeginAddress(MemorySegment struct) {
        return struct.get(BeginAddress$LAYOUT, BeginAddress$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD BeginAddress
     * }
     */
    public static void BeginAddress(MemorySegment struct, int fieldValue) {
        struct.set(BeginAddress$LAYOUT, BeginAddress$OFFSET, fieldValue);
    }

    private static final OfInt EndAddress$LAYOUT = (OfInt)$LAYOUT.select(groupElement("EndAddress"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD EndAddress
     * }
     */
    public static final OfInt EndAddress$layout() {
        return EndAddress$LAYOUT;
    }

    private static final long EndAddress$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD EndAddress
     * }
     */
    public static final long EndAddress$offset() {
        return EndAddress$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD EndAddress
     * }
     */
    public static int EndAddress(MemorySegment struct) {
        return struct.get(EndAddress$LAYOUT, EndAddress$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD EndAddress
     * }
     */
    public static void EndAddress(MemorySegment struct, int fieldValue) {
        struct.set(EndAddress$LAYOUT, EndAddress$OFFSET, fieldValue);
    }

    private static final OfInt ExceptionHandler$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ExceptionHandler"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD ExceptionHandler
     * }
     */
    public static final OfInt ExceptionHandler$layout() {
        return ExceptionHandler$LAYOUT;
    }

    private static final long ExceptionHandler$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD ExceptionHandler
     * }
     */
    public static final long ExceptionHandler$offset() {
        return ExceptionHandler$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD ExceptionHandler
     * }
     */
    public static int ExceptionHandler(MemorySegment struct) {
        return struct.get(ExceptionHandler$LAYOUT, ExceptionHandler$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD ExceptionHandler
     * }
     */
    public static void ExceptionHandler(MemorySegment struct, int fieldValue) {
        struct.set(ExceptionHandler$LAYOUT, ExceptionHandler$OFFSET, fieldValue);
    }

    private static final OfInt HandlerData$LAYOUT = (OfInt)$LAYOUT.select(groupElement("HandlerData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD HandlerData
     * }
     */
    public static final OfInt HandlerData$layout() {
        return HandlerData$LAYOUT;
    }

    private static final long HandlerData$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD HandlerData
     * }
     */
    public static final long HandlerData$offset() {
        return HandlerData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD HandlerData
     * }
     */
    public static int HandlerData(MemorySegment struct) {
        return struct.get(HandlerData$LAYOUT, HandlerData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD HandlerData
     * }
     */
    public static void HandlerData(MemorySegment struct, int fieldValue) {
        struct.set(HandlerData$LAYOUT, HandlerData$OFFSET, fieldValue);
    }

    private static final OfInt PrologEndAddress$LAYOUT = (OfInt)$LAYOUT.select(groupElement("PrologEndAddress"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD PrologEndAddress
     * }
     */
    public static final OfInt PrologEndAddress$layout() {
        return PrologEndAddress$LAYOUT;
    }

    private static final long PrologEndAddress$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD PrologEndAddress
     * }
     */
    public static final long PrologEndAddress$offset() {
        return PrologEndAddress$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD PrologEndAddress
     * }
     */
    public static int PrologEndAddress(MemorySegment struct) {
        return struct.get(PrologEndAddress$LAYOUT, PrologEndAddress$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD PrologEndAddress
     * }
     */
    public static void PrologEndAddress(MemorySegment struct, int fieldValue) {
        struct.set(PrologEndAddress$LAYOUT, PrologEndAddress$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

