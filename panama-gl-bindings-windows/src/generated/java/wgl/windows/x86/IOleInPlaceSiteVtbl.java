// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct IOleInPlaceSiteVtbl {
 *     HRESULT (*QueryInterface)(IOleInPlaceSite *, const IID *const, void **) __attribute__((stdcall));
 *     ULONG (*AddRef)(IOleInPlaceSite *) __attribute__((stdcall));
 *     ULONG (*Release)(IOleInPlaceSite *) __attribute__((stdcall));
 *     HRESULT (*GetWindow)(IOleInPlaceSite *, HWND *) __attribute__((stdcall));
 *     HRESULT (*ContextSensitiveHelp)(IOleInPlaceSite *, BOOL) __attribute__((stdcall));
 *     HRESULT (*CanInPlaceActivate)(IOleInPlaceSite *) __attribute__((stdcall));
 *     HRESULT (*OnInPlaceActivate)(IOleInPlaceSite *) __attribute__((stdcall));
 *     HRESULT (*OnUIActivate)(IOleInPlaceSite *) __attribute__((stdcall));
 *     HRESULT (*GetWindowContext)(IOleInPlaceSite *, IOleInPlaceFrame **, IOleInPlaceUIWindow **, LPRECT, LPRECT, LPOLEINPLACEFRAMEINFO) __attribute__((stdcall));
 *     HRESULT (*Scroll)(IOleInPlaceSite *, SIZE) __attribute__((stdcall));
 *     HRESULT (*OnUIDeactivate)(IOleInPlaceSite *, BOOL) __attribute__((stdcall));
 *     HRESULT (*OnInPlaceDeactivate)(IOleInPlaceSite *) __attribute__((stdcall));
 *     HRESULT (*DiscardUndoState)(IOleInPlaceSite *) __attribute__((stdcall));
 *     HRESULT (*DeactivateAndUndo)(IOleInPlaceSite *) __attribute__((stdcall));
 *     HRESULT (*OnPosRectChange)(IOleInPlaceSite *, LPCRECT) __attribute__((stdcall));
 * }
 * }
 */
public class IOleInPlaceSiteVtbl {

    IOleInPlaceSiteVtbl() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("QueryInterface"),
        wgl_h.C_POINTER.withName("AddRef"),
        wgl_h.C_POINTER.withName("Release"),
        wgl_h.C_POINTER.withName("GetWindow"),
        wgl_h.C_POINTER.withName("ContextSensitiveHelp"),
        wgl_h.C_POINTER.withName("CanInPlaceActivate"),
        wgl_h.C_POINTER.withName("OnInPlaceActivate"),
        wgl_h.C_POINTER.withName("OnUIActivate"),
        wgl_h.C_POINTER.withName("GetWindowContext"),
        wgl_h.C_POINTER.withName("Scroll"),
        wgl_h.C_POINTER.withName("OnUIDeactivate"),
        wgl_h.C_POINTER.withName("OnInPlaceDeactivate"),
        wgl_h.C_POINTER.withName("DiscardUndoState"),
        wgl_h.C_POINTER.withName("DeactivateAndUndo"),
        wgl_h.C_POINTER.withName("OnPosRectChange")
    ).withName("IOleInPlaceSiteVtbl");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IOleInPlaceSite *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static class QueryInterface {

        QueryInterface() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(QueryInterface.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(QueryInterface.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout QueryInterface$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("QueryInterface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IOleInPlaceSite *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout QueryInterface$layout() {
        return QueryInterface$LAYOUT;
    }

    private static final long QueryInterface$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IOleInPlaceSite *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final long QueryInterface$offset() {
        return QueryInterface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IOleInPlaceSite *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment QueryInterface(MemorySegment struct) {
        return struct.get(QueryInterface$LAYOUT, QueryInterface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IOleInPlaceSite *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static void QueryInterface(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(QueryInterface$LAYOUT, QueryInterface$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*AddRef)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static class AddRef {

        AddRef() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(AddRef.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(AddRef.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout AddRef$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("AddRef"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout AddRef$layout() {
        return AddRef$LAYOUT;
    }

    private static final long AddRef$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static final long AddRef$offset() {
        return AddRef$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment AddRef(MemorySegment struct) {
        return struct.get(AddRef$LAYOUT, AddRef$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static void AddRef(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(AddRef$LAYOUT, AddRef$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*Release)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static class Release {

        Release() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Release.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Release.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Release$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Release"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Release$layout() {
        return Release$LAYOUT;
    }

    private static final long Release$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static final long Release$offset() {
        return Release$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Release(MemorySegment struct) {
        return struct.get(Release$LAYOUT, Release$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static void Release(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Release$LAYOUT, Release$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetWindow)(IOleInPlaceSite *, HWND *) __attribute__((stdcall))
     * }
     */
    public static class GetWindow {

        GetWindow() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetWindow.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetWindow.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetWindow$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetWindow"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetWindow)(IOleInPlaceSite *, HWND *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetWindow$layout() {
        return GetWindow$LAYOUT;
    }

    private static final long GetWindow$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetWindow)(IOleInPlaceSite *, HWND *) __attribute__((stdcall))
     * }
     */
    public static final long GetWindow$offset() {
        return GetWindow$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetWindow)(IOleInPlaceSite *, HWND *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetWindow(MemorySegment struct) {
        return struct.get(GetWindow$LAYOUT, GetWindow$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetWindow)(IOleInPlaceSite *, HWND *) __attribute__((stdcall))
     * }
     */
    public static void GetWindow(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetWindow$LAYOUT, GetWindow$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*ContextSensitiveHelp)(IOleInPlaceSite *, BOOL) __attribute__((stdcall))
     * }
     */
    public static class ContextSensitiveHelp {

        ContextSensitiveHelp() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(ContextSensitiveHelp.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(ContextSensitiveHelp.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout ContextSensitiveHelp$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ContextSensitiveHelp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*ContextSensitiveHelp)(IOleInPlaceSite *, BOOL) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout ContextSensitiveHelp$layout() {
        return ContextSensitiveHelp$LAYOUT;
    }

    private static final long ContextSensitiveHelp$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*ContextSensitiveHelp)(IOleInPlaceSite *, BOOL) __attribute__((stdcall))
     * }
     */
    public static final long ContextSensitiveHelp$offset() {
        return ContextSensitiveHelp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*ContextSensitiveHelp)(IOleInPlaceSite *, BOOL) __attribute__((stdcall))
     * }
     */
    public static MemorySegment ContextSensitiveHelp(MemorySegment struct) {
        return struct.get(ContextSensitiveHelp$LAYOUT, ContextSensitiveHelp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*ContextSensitiveHelp)(IOleInPlaceSite *, BOOL) __attribute__((stdcall))
     * }
     */
    public static void ContextSensitiveHelp(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ContextSensitiveHelp$LAYOUT, ContextSensitiveHelp$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*CanInPlaceActivate)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static class CanInPlaceActivate {

        CanInPlaceActivate() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(CanInPlaceActivate.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(CanInPlaceActivate.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout CanInPlaceActivate$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("CanInPlaceActivate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*CanInPlaceActivate)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout CanInPlaceActivate$layout() {
        return CanInPlaceActivate$LAYOUT;
    }

    private static final long CanInPlaceActivate$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*CanInPlaceActivate)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static final long CanInPlaceActivate$offset() {
        return CanInPlaceActivate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*CanInPlaceActivate)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment CanInPlaceActivate(MemorySegment struct) {
        return struct.get(CanInPlaceActivate$LAYOUT, CanInPlaceActivate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*CanInPlaceActivate)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static void CanInPlaceActivate(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(CanInPlaceActivate$LAYOUT, CanInPlaceActivate$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*OnInPlaceActivate)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static class OnInPlaceActivate {

        OnInPlaceActivate() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(OnInPlaceActivate.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(OnInPlaceActivate.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout OnInPlaceActivate$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("OnInPlaceActivate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*OnInPlaceActivate)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout OnInPlaceActivate$layout() {
        return OnInPlaceActivate$LAYOUT;
    }

    private static final long OnInPlaceActivate$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*OnInPlaceActivate)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static final long OnInPlaceActivate$offset() {
        return OnInPlaceActivate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*OnInPlaceActivate)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment OnInPlaceActivate(MemorySegment struct) {
        return struct.get(OnInPlaceActivate$LAYOUT, OnInPlaceActivate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*OnInPlaceActivate)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static void OnInPlaceActivate(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(OnInPlaceActivate$LAYOUT, OnInPlaceActivate$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*OnUIActivate)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static class OnUIActivate {

        OnUIActivate() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(OnUIActivate.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(OnUIActivate.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout OnUIActivate$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("OnUIActivate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*OnUIActivate)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout OnUIActivate$layout() {
        return OnUIActivate$LAYOUT;
    }

    private static final long OnUIActivate$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*OnUIActivate)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static final long OnUIActivate$offset() {
        return OnUIActivate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*OnUIActivate)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment OnUIActivate(MemorySegment struct) {
        return struct.get(OnUIActivate$LAYOUT, OnUIActivate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*OnUIActivate)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static void OnUIActivate(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(OnUIActivate$LAYOUT, OnUIActivate$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetWindowContext)(IOleInPlaceSite *, IOleInPlaceFrame **, IOleInPlaceUIWindow **, LPRECT, LPRECT, LPOLEINPLACEFRAMEINFO) __attribute__((stdcall))
     * }
     */
    public static class GetWindowContext {

        GetWindowContext() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4, MemorySegment _x5);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetWindowContext.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetWindowContext.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4, MemorySegment _x5) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetWindowContext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetWindowContext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetWindowContext)(IOleInPlaceSite *, IOleInPlaceFrame **, IOleInPlaceUIWindow **, LPRECT, LPRECT, LPOLEINPLACEFRAMEINFO) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetWindowContext$layout() {
        return GetWindowContext$LAYOUT;
    }

    private static final long GetWindowContext$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetWindowContext)(IOleInPlaceSite *, IOleInPlaceFrame **, IOleInPlaceUIWindow **, LPRECT, LPRECT, LPOLEINPLACEFRAMEINFO) __attribute__((stdcall))
     * }
     */
    public static final long GetWindowContext$offset() {
        return GetWindowContext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetWindowContext)(IOleInPlaceSite *, IOleInPlaceFrame **, IOleInPlaceUIWindow **, LPRECT, LPRECT, LPOLEINPLACEFRAMEINFO) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetWindowContext(MemorySegment struct) {
        return struct.get(GetWindowContext$LAYOUT, GetWindowContext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetWindowContext)(IOleInPlaceSite *, IOleInPlaceFrame **, IOleInPlaceUIWindow **, LPRECT, LPRECT, LPOLEINPLACEFRAMEINFO) __attribute__((stdcall))
     * }
     */
    public static void GetWindowContext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetWindowContext$LAYOUT, GetWindowContext$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*Scroll)(IOleInPlaceSite *, SIZE) __attribute__((stdcall))
     * }
     */
    public static class Scroll {

        Scroll() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            tagSIZE.layout()
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Scroll.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Scroll.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Scroll$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Scroll"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*Scroll)(IOleInPlaceSite *, SIZE) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Scroll$layout() {
        return Scroll$LAYOUT;
    }

    private static final long Scroll$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*Scroll)(IOleInPlaceSite *, SIZE) __attribute__((stdcall))
     * }
     */
    public static final long Scroll$offset() {
        return Scroll$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*Scroll)(IOleInPlaceSite *, SIZE) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Scroll(MemorySegment struct) {
        return struct.get(Scroll$LAYOUT, Scroll$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*Scroll)(IOleInPlaceSite *, SIZE) __attribute__((stdcall))
     * }
     */
    public static void Scroll(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Scroll$LAYOUT, Scroll$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*OnUIDeactivate)(IOleInPlaceSite *, BOOL) __attribute__((stdcall))
     * }
     */
    public static class OnUIDeactivate {

        OnUIDeactivate() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(OnUIDeactivate.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(OnUIDeactivate.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout OnUIDeactivate$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("OnUIDeactivate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*OnUIDeactivate)(IOleInPlaceSite *, BOOL) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout OnUIDeactivate$layout() {
        return OnUIDeactivate$LAYOUT;
    }

    private static final long OnUIDeactivate$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*OnUIDeactivate)(IOleInPlaceSite *, BOOL) __attribute__((stdcall))
     * }
     */
    public static final long OnUIDeactivate$offset() {
        return OnUIDeactivate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*OnUIDeactivate)(IOleInPlaceSite *, BOOL) __attribute__((stdcall))
     * }
     */
    public static MemorySegment OnUIDeactivate(MemorySegment struct) {
        return struct.get(OnUIDeactivate$LAYOUT, OnUIDeactivate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*OnUIDeactivate)(IOleInPlaceSite *, BOOL) __attribute__((stdcall))
     * }
     */
    public static void OnUIDeactivate(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(OnUIDeactivate$LAYOUT, OnUIDeactivate$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*OnInPlaceDeactivate)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static class OnInPlaceDeactivate {

        OnInPlaceDeactivate() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(OnInPlaceDeactivate.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(OnInPlaceDeactivate.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout OnInPlaceDeactivate$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("OnInPlaceDeactivate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*OnInPlaceDeactivate)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout OnInPlaceDeactivate$layout() {
        return OnInPlaceDeactivate$LAYOUT;
    }

    private static final long OnInPlaceDeactivate$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*OnInPlaceDeactivate)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static final long OnInPlaceDeactivate$offset() {
        return OnInPlaceDeactivate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*OnInPlaceDeactivate)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment OnInPlaceDeactivate(MemorySegment struct) {
        return struct.get(OnInPlaceDeactivate$LAYOUT, OnInPlaceDeactivate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*OnInPlaceDeactivate)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static void OnInPlaceDeactivate(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(OnInPlaceDeactivate$LAYOUT, OnInPlaceDeactivate$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*DiscardUndoState)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static class DiscardUndoState {

        DiscardUndoState() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(DiscardUndoState.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(DiscardUndoState.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout DiscardUndoState$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("DiscardUndoState"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*DiscardUndoState)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout DiscardUndoState$layout() {
        return DiscardUndoState$LAYOUT;
    }

    private static final long DiscardUndoState$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*DiscardUndoState)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static final long DiscardUndoState$offset() {
        return DiscardUndoState$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*DiscardUndoState)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment DiscardUndoState(MemorySegment struct) {
        return struct.get(DiscardUndoState$LAYOUT, DiscardUndoState$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*DiscardUndoState)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static void DiscardUndoState(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(DiscardUndoState$LAYOUT, DiscardUndoState$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*DeactivateAndUndo)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static class DeactivateAndUndo {

        DeactivateAndUndo() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(DeactivateAndUndo.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(DeactivateAndUndo.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout DeactivateAndUndo$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("DeactivateAndUndo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*DeactivateAndUndo)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout DeactivateAndUndo$layout() {
        return DeactivateAndUndo$LAYOUT;
    }

    private static final long DeactivateAndUndo$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*DeactivateAndUndo)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static final long DeactivateAndUndo$offset() {
        return DeactivateAndUndo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*DeactivateAndUndo)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment DeactivateAndUndo(MemorySegment struct) {
        return struct.get(DeactivateAndUndo$LAYOUT, DeactivateAndUndo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*DeactivateAndUndo)(IOleInPlaceSite *) __attribute__((stdcall))
     * }
     */
    public static void DeactivateAndUndo(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(DeactivateAndUndo$LAYOUT, DeactivateAndUndo$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*OnPosRectChange)(IOleInPlaceSite *, LPCRECT) __attribute__((stdcall))
     * }
     */
    public static class OnPosRectChange {

        OnPosRectChange() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(OnPosRectChange.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(OnPosRectChange.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout OnPosRectChange$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("OnPosRectChange"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*OnPosRectChange)(IOleInPlaceSite *, LPCRECT) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout OnPosRectChange$layout() {
        return OnPosRectChange$LAYOUT;
    }

    private static final long OnPosRectChange$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*OnPosRectChange)(IOleInPlaceSite *, LPCRECT) __attribute__((stdcall))
     * }
     */
    public static final long OnPosRectChange$offset() {
        return OnPosRectChange$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*OnPosRectChange)(IOleInPlaceSite *, LPCRECT) __attribute__((stdcall))
     * }
     */
    public static MemorySegment OnPosRectChange(MemorySegment struct) {
        return struct.get(OnPosRectChange$LAYOUT, OnPosRectChange$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*OnPosRectChange)(IOleInPlaceSite *, LPCRECT) __attribute__((stdcall))
     * }
     */
    public static void OnPosRectChange(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(OnPosRectChange$LAYOUT, OnPosRectChange$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

