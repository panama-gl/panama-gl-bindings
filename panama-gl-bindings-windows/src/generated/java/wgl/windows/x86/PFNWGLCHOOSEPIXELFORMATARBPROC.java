// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface PFNWGLCHOOSEPIXELFORMATARBPROC {

    int apply(java.lang.foreign.MemoryAddress hdc, java.lang.foreign.MemoryAddress piAttribIList, java.lang.foreign.MemoryAddress pfAttribFList, int nMaxFormats, java.lang.foreign.MemoryAddress piFormats, java.lang.foreign.MemoryAddress nNumFormats);
    static MemorySegment allocate(PFNWGLCHOOSEPIXELFORMATARBPROC fi, MemorySession session) {
        return RuntimeHelper.upcallStub(PFNWGLCHOOSEPIXELFORMATARBPROC.class, fi, constants$1382.PFNWGLCHOOSEPIXELFORMATARBPROC$FUNC, session);
    }
    static PFNWGLCHOOSEPIXELFORMATARBPROC ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _hdc, java.lang.foreign.MemoryAddress _piAttribIList, java.lang.foreign.MemoryAddress _pfAttribFList, int _nMaxFormats, java.lang.foreign.MemoryAddress _piFormats, java.lang.foreign.MemoryAddress _nNumFormats) -> {
            try {
                return (int)constants$1382.PFNWGLCHOOSEPIXELFORMATARBPROC$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_hdc, (java.lang.foreign.Addressable)_piAttribIList, (java.lang.foreign.Addressable)_pfAttribFList, _nMaxFormats, (java.lang.foreign.Addressable)_piFormats, (java.lang.foreign.Addressable)_nNumFormats);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


