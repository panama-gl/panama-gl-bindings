// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _CERT_SUPPORTED_ALGORITHM_INFO {
 *     CRYPT_ALGORITHM_IDENTIFIER Algorithm;
 *     CRYPT_BIT_BLOB IntendedKeyUsage;
 *     CERT_POLICIES_INFO IntendedCertPolicies;
 * }
 * }
 */
public class _CERT_SUPPORTED_ALGORITHM_INFO {

    _CERT_SUPPORTED_ALGORITHM_INFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _CRYPT_ALGORITHM_IDENTIFIER.layout().withName("Algorithm"),
        _CRYPT_BIT_BLOB.layout().withName("IntendedKeyUsage"),
        _CERT_POLICIES_INFO.layout().withName("IntendedCertPolicies")
    ).withName("_CERT_SUPPORTED_ALGORITHM_INFO");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout Algorithm$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Algorithm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CRYPT_ALGORITHM_IDENTIFIER Algorithm
     * }
     */
    public static final GroupLayout Algorithm$layout() {
        return Algorithm$LAYOUT;
    }

    private static final long Algorithm$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CRYPT_ALGORITHM_IDENTIFIER Algorithm
     * }
     */
    public static final long Algorithm$offset() {
        return Algorithm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CRYPT_ALGORITHM_IDENTIFIER Algorithm
     * }
     */
    public static MemorySegment Algorithm(MemorySegment struct) {
        return struct.asSlice(Algorithm$OFFSET, Algorithm$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CRYPT_ALGORITHM_IDENTIFIER Algorithm
     * }
     */
    public static void Algorithm(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Algorithm$OFFSET, Algorithm$LAYOUT.byteSize());
    }

    private static final GroupLayout IntendedKeyUsage$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("IntendedKeyUsage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CRYPT_BIT_BLOB IntendedKeyUsage
     * }
     */
    public static final GroupLayout IntendedKeyUsage$layout() {
        return IntendedKeyUsage$LAYOUT;
    }

    private static final long IntendedKeyUsage$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CRYPT_BIT_BLOB IntendedKeyUsage
     * }
     */
    public static final long IntendedKeyUsage$offset() {
        return IntendedKeyUsage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CRYPT_BIT_BLOB IntendedKeyUsage
     * }
     */
    public static MemorySegment IntendedKeyUsage(MemorySegment struct) {
        return struct.asSlice(IntendedKeyUsage$OFFSET, IntendedKeyUsage$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CRYPT_BIT_BLOB IntendedKeyUsage
     * }
     */
    public static void IntendedKeyUsage(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, IntendedKeyUsage$OFFSET, IntendedKeyUsage$LAYOUT.byteSize());
    }

    private static final GroupLayout IntendedCertPolicies$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("IntendedCertPolicies"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CERT_POLICIES_INFO IntendedCertPolicies
     * }
     */
    public static final GroupLayout IntendedCertPolicies$layout() {
        return IntendedCertPolicies$LAYOUT;
    }

    private static final long IntendedCertPolicies$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CERT_POLICIES_INFO IntendedCertPolicies
     * }
     */
    public static final long IntendedCertPolicies$offset() {
        return IntendedCertPolicies$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CERT_POLICIES_INFO IntendedCertPolicies
     * }
     */
    public static MemorySegment IntendedCertPolicies(MemorySegment struct) {
        return struct.asSlice(IntendedCertPolicies$OFFSET, IntendedCertPolicies$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CERT_POLICIES_INFO IntendedCertPolicies
     * }
     */
    public static void IntendedCertPolicies(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, IntendedCertPolicies$OFFSET, IntendedCertPolicies$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

