// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _CRL_DIST_POINT_NAME {
 *     DWORD dwDistPointNameChoice;
 *     union {
 *         CERT_ALT_NAME_INFO FullName;
 *     };
 * }
 * }
 */
public class _CRL_DIST_POINT_NAME {

    _CRL_DIST_POINT_NAME() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("dwDistPointNameChoice"),
        MemoryLayout.paddingLayout(4),
        MemoryLayout.unionLayout(
            _CERT_ALT_NAME_INFO.layout().withName("FullName")
        ).withName("$anon$4429:5")
    ).withName("_CRL_DIST_POINT_NAME");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt dwDistPointNameChoice$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwDistPointNameChoice"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwDistPointNameChoice
     * }
     */
    public static final OfInt dwDistPointNameChoice$layout() {
        return dwDistPointNameChoice$LAYOUT;
    }

    private static final long dwDistPointNameChoice$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwDistPointNameChoice
     * }
     */
    public static final long dwDistPointNameChoice$offset() {
        return dwDistPointNameChoice$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwDistPointNameChoice
     * }
     */
    public static int dwDistPointNameChoice(MemorySegment struct) {
        return struct.get(dwDistPointNameChoice$LAYOUT, dwDistPointNameChoice$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwDistPointNameChoice
     * }
     */
    public static void dwDistPointNameChoice(MemorySegment struct, int fieldValue) {
        struct.set(dwDistPointNameChoice$LAYOUT, dwDistPointNameChoice$OFFSET, fieldValue);
    }

    private static final GroupLayout FullName$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$4429:5"), groupElement("FullName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CERT_ALT_NAME_INFO FullName
     * }
     */
    public static final GroupLayout FullName$layout() {
        return FullName$LAYOUT;
    }

    private static final long FullName$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CERT_ALT_NAME_INFO FullName
     * }
     */
    public static final long FullName$offset() {
        return FullName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CERT_ALT_NAME_INFO FullName
     * }
     */
    public static MemorySegment FullName(MemorySegment struct) {
        return struct.asSlice(FullName$OFFSET, FullName$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CERT_ALT_NAME_INFO FullName
     * }
     */
    public static void FullName(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, FullName$OFFSET, FullName$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

