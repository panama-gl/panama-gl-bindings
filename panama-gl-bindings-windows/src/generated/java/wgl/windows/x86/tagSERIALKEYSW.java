// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tagSERIALKEYSW {
 *     UINT cbSize;
 *     DWORD dwFlags;
 *     LPWSTR lpszActivePort;
 *     LPWSTR lpszPort;
 *     UINT iBaudRate;
 *     UINT iPortState;
 *     UINT iActive;
 * }
 * }
 */
public class tagSERIALKEYSW {

    tagSERIALKEYSW() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_INT.withName("cbSize"),
        wgl_h.C_LONG.withName("dwFlags"),
        wgl_h.C_POINTER.withName("lpszActivePort"),
        wgl_h.C_POINTER.withName("lpszPort"),
        wgl_h.C_INT.withName("iBaudRate"),
        wgl_h.C_INT.withName("iPortState"),
        wgl_h.C_INT.withName("iActive"),
        MemoryLayout.paddingLayout(4)
    ).withName("tagSERIALKEYSW");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt cbSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UINT cbSize
     * }
     */
    public static final OfInt cbSize$layout() {
        return cbSize$LAYOUT;
    }

    private static final long cbSize$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UINT cbSize
     * }
     */
    public static final long cbSize$offset() {
        return cbSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UINT cbSize
     * }
     */
    public static int cbSize(MemorySegment struct) {
        return struct.get(cbSize$LAYOUT, cbSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UINT cbSize
     * }
     */
    public static void cbSize(MemorySegment struct, int fieldValue) {
        struct.set(cbSize$LAYOUT, cbSize$OFFSET, fieldValue);
    }

    private static final OfInt dwFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwFlags
     * }
     */
    public static final OfInt dwFlags$layout() {
        return dwFlags$LAYOUT;
    }

    private static final long dwFlags$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwFlags
     * }
     */
    public static final long dwFlags$offset() {
        return dwFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwFlags
     * }
     */
    public static int dwFlags(MemorySegment struct) {
        return struct.get(dwFlags$LAYOUT, dwFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwFlags
     * }
     */
    public static void dwFlags(MemorySegment struct, int fieldValue) {
        struct.set(dwFlags$LAYOUT, dwFlags$OFFSET, fieldValue);
    }

    private static final AddressLayout lpszActivePort$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lpszActivePort"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPWSTR lpszActivePort
     * }
     */
    public static final AddressLayout lpszActivePort$layout() {
        return lpszActivePort$LAYOUT;
    }

    private static final long lpszActivePort$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPWSTR lpszActivePort
     * }
     */
    public static final long lpszActivePort$offset() {
        return lpszActivePort$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPWSTR lpszActivePort
     * }
     */
    public static MemorySegment lpszActivePort(MemorySegment struct) {
        return struct.get(lpszActivePort$LAYOUT, lpszActivePort$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPWSTR lpszActivePort
     * }
     */
    public static void lpszActivePort(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lpszActivePort$LAYOUT, lpszActivePort$OFFSET, fieldValue);
    }

    private static final AddressLayout lpszPort$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lpszPort"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPWSTR lpszPort
     * }
     */
    public static final AddressLayout lpszPort$layout() {
        return lpszPort$LAYOUT;
    }

    private static final long lpszPort$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPWSTR lpszPort
     * }
     */
    public static final long lpszPort$offset() {
        return lpszPort$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPWSTR lpszPort
     * }
     */
    public static MemorySegment lpszPort(MemorySegment struct) {
        return struct.get(lpszPort$LAYOUT, lpszPort$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPWSTR lpszPort
     * }
     */
    public static void lpszPort(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lpszPort$LAYOUT, lpszPort$OFFSET, fieldValue);
    }

    private static final OfInt iBaudRate$LAYOUT = (OfInt)$LAYOUT.select(groupElement("iBaudRate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UINT iBaudRate
     * }
     */
    public static final OfInt iBaudRate$layout() {
        return iBaudRate$LAYOUT;
    }

    private static final long iBaudRate$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UINT iBaudRate
     * }
     */
    public static final long iBaudRate$offset() {
        return iBaudRate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UINT iBaudRate
     * }
     */
    public static int iBaudRate(MemorySegment struct) {
        return struct.get(iBaudRate$LAYOUT, iBaudRate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UINT iBaudRate
     * }
     */
    public static void iBaudRate(MemorySegment struct, int fieldValue) {
        struct.set(iBaudRate$LAYOUT, iBaudRate$OFFSET, fieldValue);
    }

    private static final OfInt iPortState$LAYOUT = (OfInt)$LAYOUT.select(groupElement("iPortState"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UINT iPortState
     * }
     */
    public static final OfInt iPortState$layout() {
        return iPortState$LAYOUT;
    }

    private static final long iPortState$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UINT iPortState
     * }
     */
    public static final long iPortState$offset() {
        return iPortState$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UINT iPortState
     * }
     */
    public static int iPortState(MemorySegment struct) {
        return struct.get(iPortState$LAYOUT, iPortState$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UINT iPortState
     * }
     */
    public static void iPortState(MemorySegment struct, int fieldValue) {
        struct.set(iPortState$LAYOUT, iPortState$OFFSET, fieldValue);
    }

    private static final OfInt iActive$LAYOUT = (OfInt)$LAYOUT.select(groupElement("iActive"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UINT iActive
     * }
     */
    public static final OfInt iActive$layout() {
        return iActive$LAYOUT;
    }

    private static final long iActive$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UINT iActive
     * }
     */
    public static final long iActive$offset() {
        return iActive$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UINT iActive
     * }
     */
    public static int iActive(MemorySegment struct) {
        return struct.get(iActive$LAYOUT, iActive$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UINT iActive
     * }
     */
    public static void iActive(MemorySegment struct, int fieldValue) {
        struct.set(iActive$LAYOUT, iActive$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

