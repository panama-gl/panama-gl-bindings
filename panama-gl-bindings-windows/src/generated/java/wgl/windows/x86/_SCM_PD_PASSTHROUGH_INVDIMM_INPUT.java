// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _SCM_PD_PASSTHROUGH_INVDIMM_INPUT {
 *     DWORD Opcode;
 *     DWORD OpcodeParametersLength;
 *     BYTE OpcodeParameters[1];
 * }
 * }
 */
public class _SCM_PD_PASSTHROUGH_INVDIMM_INPUT {

    _SCM_PD_PASSTHROUGH_INVDIMM_INPUT() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("Opcode"),
        wgl_h.C_LONG.withName("OpcodeParametersLength"),
        MemoryLayout.sequenceLayout(1, wgl_h.C_CHAR).withName("OpcodeParameters"),
        MemoryLayout.paddingLayout(3)
    ).withName("_SCM_PD_PASSTHROUGH_INVDIMM_INPUT");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt Opcode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Opcode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Opcode
     * }
     */
    public static final OfInt Opcode$layout() {
        return Opcode$LAYOUT;
    }

    private static final long Opcode$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Opcode
     * }
     */
    public static final long Opcode$offset() {
        return Opcode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Opcode
     * }
     */
    public static int Opcode(MemorySegment struct) {
        return struct.get(Opcode$LAYOUT, Opcode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Opcode
     * }
     */
    public static void Opcode(MemorySegment struct, int fieldValue) {
        struct.set(Opcode$LAYOUT, Opcode$OFFSET, fieldValue);
    }

    private static final OfInt OpcodeParametersLength$LAYOUT = (OfInt)$LAYOUT.select(groupElement("OpcodeParametersLength"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD OpcodeParametersLength
     * }
     */
    public static final OfInt OpcodeParametersLength$layout() {
        return OpcodeParametersLength$LAYOUT;
    }

    private static final long OpcodeParametersLength$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD OpcodeParametersLength
     * }
     */
    public static final long OpcodeParametersLength$offset() {
        return OpcodeParametersLength$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD OpcodeParametersLength
     * }
     */
    public static int OpcodeParametersLength(MemorySegment struct) {
        return struct.get(OpcodeParametersLength$LAYOUT, OpcodeParametersLength$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD OpcodeParametersLength
     * }
     */
    public static void OpcodeParametersLength(MemorySegment struct, int fieldValue) {
        struct.set(OpcodeParametersLength$LAYOUT, OpcodeParametersLength$OFFSET, fieldValue);
    }

    private static final SequenceLayout OpcodeParameters$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("OpcodeParameters"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE OpcodeParameters[1]
     * }
     */
    public static final SequenceLayout OpcodeParameters$layout() {
        return OpcodeParameters$LAYOUT;
    }

    private static final long OpcodeParameters$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE OpcodeParameters[1]
     * }
     */
    public static final long OpcodeParameters$offset() {
        return OpcodeParameters$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE OpcodeParameters[1]
     * }
     */
    public static MemorySegment OpcodeParameters(MemorySegment struct) {
        return struct.asSlice(OpcodeParameters$OFFSET, OpcodeParameters$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE OpcodeParameters[1]
     * }
     */
    public static void OpcodeParameters(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, OpcodeParameters$OFFSET, OpcodeParameters$LAYOUT.byteSize());
    }

    private static long[] OpcodeParameters$DIMS = { 1 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * BYTE OpcodeParameters[1]
     * }
     */
    public static long[] OpcodeParameters$dimensions() {
        return OpcodeParameters$DIMS;
    }
    private static final VarHandle OpcodeParameters$ELEM_HANDLE = OpcodeParameters$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * BYTE OpcodeParameters[1]
     * }
     */
    public static byte OpcodeParameters(MemorySegment struct, long index0) {
        return (byte)OpcodeParameters$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * BYTE OpcodeParameters[1]
     * }
     */
    public static void OpcodeParameters(MemorySegment struct, long index0, byte fieldValue) {
        OpcodeParameters$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

