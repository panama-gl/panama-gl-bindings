// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _KEY_TYPE_SUBTYPE {
 *     DWORD dwKeySpec;
 *     GUID Type;
 *     GUID Subtype;
 * }
 * }
 */
public class _KEY_TYPE_SUBTYPE {

    _KEY_TYPE_SUBTYPE() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("dwKeySpec"),
        _GUID.layout().withName("Type"),
        _GUID.layout().withName("Subtype")
    ).withName("_KEY_TYPE_SUBTYPE");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt dwKeySpec$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwKeySpec"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwKeySpec
     * }
     */
    public static final OfInt dwKeySpec$layout() {
        return dwKeySpec$LAYOUT;
    }

    private static final long dwKeySpec$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwKeySpec
     * }
     */
    public static final long dwKeySpec$offset() {
        return dwKeySpec$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwKeySpec
     * }
     */
    public static int dwKeySpec(MemorySegment struct) {
        return struct.get(dwKeySpec$LAYOUT, dwKeySpec$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwKeySpec
     * }
     */
    public static void dwKeySpec(MemorySegment struct, int fieldValue) {
        struct.set(dwKeySpec$LAYOUT, dwKeySpec$OFFSET, fieldValue);
    }

    private static final GroupLayout Type$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GUID Type
     * }
     */
    public static final GroupLayout Type$layout() {
        return Type$LAYOUT;
    }

    private static final long Type$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GUID Type
     * }
     */
    public static final long Type$offset() {
        return Type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GUID Type
     * }
     */
    public static MemorySegment Type(MemorySegment struct) {
        return struct.asSlice(Type$OFFSET, Type$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GUID Type
     * }
     */
    public static void Type(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Type$OFFSET, Type$LAYOUT.byteSize());
    }

    private static final GroupLayout Subtype$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Subtype"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GUID Subtype
     * }
     */
    public static final GroupLayout Subtype$layout() {
        return Subtype$LAYOUT;
    }

    private static final long Subtype$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GUID Subtype
     * }
     */
    public static final long Subtype$offset() {
        return Subtype$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GUID Subtype
     * }
     */
    public static MemorySegment Subtype(MemorySegment struct) {
        return struct.asSlice(Subtype$OFFSET, Subtype$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GUID Subtype
     * }
     */
    public static void Subtype(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Subtype$OFFSET, Subtype$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

