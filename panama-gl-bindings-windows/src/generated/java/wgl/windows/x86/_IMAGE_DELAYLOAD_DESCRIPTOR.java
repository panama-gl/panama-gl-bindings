// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _IMAGE_DELAYLOAD_DESCRIPTOR {
 *     union {
 *         DWORD AllAttributes;
 *         struct {
 *             DWORD RvaBased : 1;
 *             DWORD ReservedAttributes : 31;
 *         };
 *     } Attributes;
 *     DWORD DllNameRVA;
 *     DWORD ModuleHandleRVA;
 *     DWORD ImportAddressTableRVA;
 *     DWORD ImportNameTableRVA;
 *     DWORD BoundImportAddressTableRVA;
 *     DWORD UnloadInformationTableRVA;
 *     DWORD TimeDateStamp;
 * }
 * }
 */
public class _IMAGE_DELAYLOAD_DESCRIPTOR {

    _IMAGE_DELAYLOAD_DESCRIPTOR() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _IMAGE_DELAYLOAD_DESCRIPTOR.Attributes.layout().withName("Attributes"),
        wgl_h.C_LONG.withName("DllNameRVA"),
        wgl_h.C_LONG.withName("ModuleHandleRVA"),
        wgl_h.C_LONG.withName("ImportAddressTableRVA"),
        wgl_h.C_LONG.withName("ImportNameTableRVA"),
        wgl_h.C_LONG.withName("BoundImportAddressTableRVA"),
        wgl_h.C_LONG.withName("UnloadInformationTableRVA"),
        wgl_h.C_LONG.withName("TimeDateStamp")
    ).withName("_IMAGE_DELAYLOAD_DESCRIPTOR");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * union {
     *     DWORD AllAttributes;
     *     struct {
     *         DWORD RvaBased : 1;
     *         DWORD ReservedAttributes : 31;
     *     };
     * }
     * }
     */
    public static class Attributes {

        Attributes() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
            wgl_h.C_LONG.withName("AllAttributes"),
            MemoryLayout.structLayout(
                MemoryLayout.paddingLayout(4)
            ).withName("$anon$18333:9")
        ).withName("$anon$18331:5");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt AllAttributes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("AllAttributes"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD AllAttributes
         * }
         */
        public static final OfInt AllAttributes$layout() {
            return AllAttributes$LAYOUT;
        }

        private static final long AllAttributes$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD AllAttributes
         * }
         */
        public static final long AllAttributes$offset() {
            return AllAttributes$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD AllAttributes
         * }
         */
        public static int AllAttributes(MemorySegment union) {
            return union.get(AllAttributes$LAYOUT, AllAttributes$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD AllAttributes
         * }
         */
        public static void AllAttributes(MemorySegment union, int fieldValue) {
            union.set(AllAttributes$LAYOUT, AllAttributes$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout Attributes$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Attributes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union {
     *     DWORD AllAttributes;
     *     struct {
     *         DWORD RvaBased : 1;
     *         DWORD ReservedAttributes : 31;
     *     };
     * } Attributes
     * }
     */
    public static final GroupLayout Attributes$layout() {
        return Attributes$LAYOUT;
    }

    private static final long Attributes$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union {
     *     DWORD AllAttributes;
     *     struct {
     *         DWORD RvaBased : 1;
     *         DWORD ReservedAttributes : 31;
     *     };
     * } Attributes
     * }
     */
    public static final long Attributes$offset() {
        return Attributes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union {
     *     DWORD AllAttributes;
     *     struct {
     *         DWORD RvaBased : 1;
     *         DWORD ReservedAttributes : 31;
     *     };
     * } Attributes
     * }
     */
    public static MemorySegment Attributes(MemorySegment struct) {
        return struct.asSlice(Attributes$OFFSET, Attributes$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union {
     *     DWORD AllAttributes;
     *     struct {
     *         DWORD RvaBased : 1;
     *         DWORD ReservedAttributes : 31;
     *     };
     * } Attributes
     * }
     */
    public static void Attributes(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Attributes$OFFSET, Attributes$LAYOUT.byteSize());
    }

    private static final OfInt DllNameRVA$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DllNameRVA"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD DllNameRVA
     * }
     */
    public static final OfInt DllNameRVA$layout() {
        return DllNameRVA$LAYOUT;
    }

    private static final long DllNameRVA$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD DllNameRVA
     * }
     */
    public static final long DllNameRVA$offset() {
        return DllNameRVA$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD DllNameRVA
     * }
     */
    public static int DllNameRVA(MemorySegment struct) {
        return struct.get(DllNameRVA$LAYOUT, DllNameRVA$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD DllNameRVA
     * }
     */
    public static void DllNameRVA(MemorySegment struct, int fieldValue) {
        struct.set(DllNameRVA$LAYOUT, DllNameRVA$OFFSET, fieldValue);
    }

    private static final OfInt ModuleHandleRVA$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ModuleHandleRVA"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD ModuleHandleRVA
     * }
     */
    public static final OfInt ModuleHandleRVA$layout() {
        return ModuleHandleRVA$LAYOUT;
    }

    private static final long ModuleHandleRVA$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD ModuleHandleRVA
     * }
     */
    public static final long ModuleHandleRVA$offset() {
        return ModuleHandleRVA$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD ModuleHandleRVA
     * }
     */
    public static int ModuleHandleRVA(MemorySegment struct) {
        return struct.get(ModuleHandleRVA$LAYOUT, ModuleHandleRVA$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD ModuleHandleRVA
     * }
     */
    public static void ModuleHandleRVA(MemorySegment struct, int fieldValue) {
        struct.set(ModuleHandleRVA$LAYOUT, ModuleHandleRVA$OFFSET, fieldValue);
    }

    private static final OfInt ImportAddressTableRVA$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ImportAddressTableRVA"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD ImportAddressTableRVA
     * }
     */
    public static final OfInt ImportAddressTableRVA$layout() {
        return ImportAddressTableRVA$LAYOUT;
    }

    private static final long ImportAddressTableRVA$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD ImportAddressTableRVA
     * }
     */
    public static final long ImportAddressTableRVA$offset() {
        return ImportAddressTableRVA$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD ImportAddressTableRVA
     * }
     */
    public static int ImportAddressTableRVA(MemorySegment struct) {
        return struct.get(ImportAddressTableRVA$LAYOUT, ImportAddressTableRVA$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD ImportAddressTableRVA
     * }
     */
    public static void ImportAddressTableRVA(MemorySegment struct, int fieldValue) {
        struct.set(ImportAddressTableRVA$LAYOUT, ImportAddressTableRVA$OFFSET, fieldValue);
    }

    private static final OfInt ImportNameTableRVA$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ImportNameTableRVA"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD ImportNameTableRVA
     * }
     */
    public static final OfInt ImportNameTableRVA$layout() {
        return ImportNameTableRVA$LAYOUT;
    }

    private static final long ImportNameTableRVA$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD ImportNameTableRVA
     * }
     */
    public static final long ImportNameTableRVA$offset() {
        return ImportNameTableRVA$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD ImportNameTableRVA
     * }
     */
    public static int ImportNameTableRVA(MemorySegment struct) {
        return struct.get(ImportNameTableRVA$LAYOUT, ImportNameTableRVA$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD ImportNameTableRVA
     * }
     */
    public static void ImportNameTableRVA(MemorySegment struct, int fieldValue) {
        struct.set(ImportNameTableRVA$LAYOUT, ImportNameTableRVA$OFFSET, fieldValue);
    }

    private static final OfInt BoundImportAddressTableRVA$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BoundImportAddressTableRVA"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD BoundImportAddressTableRVA
     * }
     */
    public static final OfInt BoundImportAddressTableRVA$layout() {
        return BoundImportAddressTableRVA$LAYOUT;
    }

    private static final long BoundImportAddressTableRVA$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD BoundImportAddressTableRVA
     * }
     */
    public static final long BoundImportAddressTableRVA$offset() {
        return BoundImportAddressTableRVA$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD BoundImportAddressTableRVA
     * }
     */
    public static int BoundImportAddressTableRVA(MemorySegment struct) {
        return struct.get(BoundImportAddressTableRVA$LAYOUT, BoundImportAddressTableRVA$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD BoundImportAddressTableRVA
     * }
     */
    public static void BoundImportAddressTableRVA(MemorySegment struct, int fieldValue) {
        struct.set(BoundImportAddressTableRVA$LAYOUT, BoundImportAddressTableRVA$OFFSET, fieldValue);
    }

    private static final OfInt UnloadInformationTableRVA$LAYOUT = (OfInt)$LAYOUT.select(groupElement("UnloadInformationTableRVA"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD UnloadInformationTableRVA
     * }
     */
    public static final OfInt UnloadInformationTableRVA$layout() {
        return UnloadInformationTableRVA$LAYOUT;
    }

    private static final long UnloadInformationTableRVA$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD UnloadInformationTableRVA
     * }
     */
    public static final long UnloadInformationTableRVA$offset() {
        return UnloadInformationTableRVA$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD UnloadInformationTableRVA
     * }
     */
    public static int UnloadInformationTableRVA(MemorySegment struct) {
        return struct.get(UnloadInformationTableRVA$LAYOUT, UnloadInformationTableRVA$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD UnloadInformationTableRVA
     * }
     */
    public static void UnloadInformationTableRVA(MemorySegment struct, int fieldValue) {
        struct.set(UnloadInformationTableRVA$LAYOUT, UnloadInformationTableRVA$OFFSET, fieldValue);
    }

    private static final OfInt TimeDateStamp$LAYOUT = (OfInt)$LAYOUT.select(groupElement("TimeDateStamp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD TimeDateStamp
     * }
     */
    public static final OfInt TimeDateStamp$layout() {
        return TimeDateStamp$LAYOUT;
    }

    private static final long TimeDateStamp$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD TimeDateStamp
     * }
     */
    public static final long TimeDateStamp$offset() {
        return TimeDateStamp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD TimeDateStamp
     * }
     */
    public static int TimeDateStamp(MemorySegment struct) {
        return struct.get(TimeDateStamp$LAYOUT, TimeDateStamp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD TimeDateStamp
     * }
     */
    public static void TimeDateStamp(MemorySegment struct, int fieldValue) {
        struct.set(TimeDateStamp$LAYOUT, TimeDateStamp$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

