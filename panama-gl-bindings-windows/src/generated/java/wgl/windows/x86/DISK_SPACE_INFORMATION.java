// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct DISK_SPACE_INFORMATION {
 *     ULONGLONG ActualTotalAllocationUnits;
 *     ULONGLONG ActualAvailableAllocationUnits;
 *     ULONGLONG ActualPoolUnavailableAllocationUnits;
 *     ULONGLONG CallerTotalAllocationUnits;
 *     ULONGLONG CallerAvailableAllocationUnits;
 *     ULONGLONG CallerPoolUnavailableAllocationUnits;
 *     ULONGLONG UsedAllocationUnits;
 *     ULONGLONG TotalReservedAllocationUnits;
 *     ULONGLONG VolumeStorageReserveAllocationUnits;
 *     ULONGLONG AvailableCommittedAllocationUnits;
 *     ULONGLONG PoolAvailableAllocationUnits;
 *     DWORD SectorsPerAllocationUnit;
 *     DWORD BytesPerSector;
 * }
 * }
 */
public class DISK_SPACE_INFORMATION {

    DISK_SPACE_INFORMATION() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG_LONG.withName("ActualTotalAllocationUnits"),
        wgl_h.C_LONG_LONG.withName("ActualAvailableAllocationUnits"),
        wgl_h.C_LONG_LONG.withName("ActualPoolUnavailableAllocationUnits"),
        wgl_h.C_LONG_LONG.withName("CallerTotalAllocationUnits"),
        wgl_h.C_LONG_LONG.withName("CallerAvailableAllocationUnits"),
        wgl_h.C_LONG_LONG.withName("CallerPoolUnavailableAllocationUnits"),
        wgl_h.C_LONG_LONG.withName("UsedAllocationUnits"),
        wgl_h.C_LONG_LONG.withName("TotalReservedAllocationUnits"),
        wgl_h.C_LONG_LONG.withName("VolumeStorageReserveAllocationUnits"),
        wgl_h.C_LONG_LONG.withName("AvailableCommittedAllocationUnits"),
        wgl_h.C_LONG_LONG.withName("PoolAvailableAllocationUnits"),
        wgl_h.C_LONG.withName("SectorsPerAllocationUnit"),
        wgl_h.C_LONG.withName("BytesPerSector")
    ).withName("DISK_SPACE_INFORMATION");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong ActualTotalAllocationUnits$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ActualTotalAllocationUnits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONGLONG ActualTotalAllocationUnits
     * }
     */
    public static final OfLong ActualTotalAllocationUnits$layout() {
        return ActualTotalAllocationUnits$LAYOUT;
    }

    private static final long ActualTotalAllocationUnits$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONGLONG ActualTotalAllocationUnits
     * }
     */
    public static final long ActualTotalAllocationUnits$offset() {
        return ActualTotalAllocationUnits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONGLONG ActualTotalAllocationUnits
     * }
     */
    public static long ActualTotalAllocationUnits(MemorySegment struct) {
        return struct.get(ActualTotalAllocationUnits$LAYOUT, ActualTotalAllocationUnits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONGLONG ActualTotalAllocationUnits
     * }
     */
    public static void ActualTotalAllocationUnits(MemorySegment struct, long fieldValue) {
        struct.set(ActualTotalAllocationUnits$LAYOUT, ActualTotalAllocationUnits$OFFSET, fieldValue);
    }

    private static final OfLong ActualAvailableAllocationUnits$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ActualAvailableAllocationUnits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONGLONG ActualAvailableAllocationUnits
     * }
     */
    public static final OfLong ActualAvailableAllocationUnits$layout() {
        return ActualAvailableAllocationUnits$LAYOUT;
    }

    private static final long ActualAvailableAllocationUnits$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONGLONG ActualAvailableAllocationUnits
     * }
     */
    public static final long ActualAvailableAllocationUnits$offset() {
        return ActualAvailableAllocationUnits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONGLONG ActualAvailableAllocationUnits
     * }
     */
    public static long ActualAvailableAllocationUnits(MemorySegment struct) {
        return struct.get(ActualAvailableAllocationUnits$LAYOUT, ActualAvailableAllocationUnits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONGLONG ActualAvailableAllocationUnits
     * }
     */
    public static void ActualAvailableAllocationUnits(MemorySegment struct, long fieldValue) {
        struct.set(ActualAvailableAllocationUnits$LAYOUT, ActualAvailableAllocationUnits$OFFSET, fieldValue);
    }

    private static final OfLong ActualPoolUnavailableAllocationUnits$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ActualPoolUnavailableAllocationUnits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONGLONG ActualPoolUnavailableAllocationUnits
     * }
     */
    public static final OfLong ActualPoolUnavailableAllocationUnits$layout() {
        return ActualPoolUnavailableAllocationUnits$LAYOUT;
    }

    private static final long ActualPoolUnavailableAllocationUnits$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONGLONG ActualPoolUnavailableAllocationUnits
     * }
     */
    public static final long ActualPoolUnavailableAllocationUnits$offset() {
        return ActualPoolUnavailableAllocationUnits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONGLONG ActualPoolUnavailableAllocationUnits
     * }
     */
    public static long ActualPoolUnavailableAllocationUnits(MemorySegment struct) {
        return struct.get(ActualPoolUnavailableAllocationUnits$LAYOUT, ActualPoolUnavailableAllocationUnits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONGLONG ActualPoolUnavailableAllocationUnits
     * }
     */
    public static void ActualPoolUnavailableAllocationUnits(MemorySegment struct, long fieldValue) {
        struct.set(ActualPoolUnavailableAllocationUnits$LAYOUT, ActualPoolUnavailableAllocationUnits$OFFSET, fieldValue);
    }

    private static final OfLong CallerTotalAllocationUnits$LAYOUT = (OfLong)$LAYOUT.select(groupElement("CallerTotalAllocationUnits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONGLONG CallerTotalAllocationUnits
     * }
     */
    public static final OfLong CallerTotalAllocationUnits$layout() {
        return CallerTotalAllocationUnits$LAYOUT;
    }

    private static final long CallerTotalAllocationUnits$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONGLONG CallerTotalAllocationUnits
     * }
     */
    public static final long CallerTotalAllocationUnits$offset() {
        return CallerTotalAllocationUnits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONGLONG CallerTotalAllocationUnits
     * }
     */
    public static long CallerTotalAllocationUnits(MemorySegment struct) {
        return struct.get(CallerTotalAllocationUnits$LAYOUT, CallerTotalAllocationUnits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONGLONG CallerTotalAllocationUnits
     * }
     */
    public static void CallerTotalAllocationUnits(MemorySegment struct, long fieldValue) {
        struct.set(CallerTotalAllocationUnits$LAYOUT, CallerTotalAllocationUnits$OFFSET, fieldValue);
    }

    private static final OfLong CallerAvailableAllocationUnits$LAYOUT = (OfLong)$LAYOUT.select(groupElement("CallerAvailableAllocationUnits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONGLONG CallerAvailableAllocationUnits
     * }
     */
    public static final OfLong CallerAvailableAllocationUnits$layout() {
        return CallerAvailableAllocationUnits$LAYOUT;
    }

    private static final long CallerAvailableAllocationUnits$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONGLONG CallerAvailableAllocationUnits
     * }
     */
    public static final long CallerAvailableAllocationUnits$offset() {
        return CallerAvailableAllocationUnits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONGLONG CallerAvailableAllocationUnits
     * }
     */
    public static long CallerAvailableAllocationUnits(MemorySegment struct) {
        return struct.get(CallerAvailableAllocationUnits$LAYOUT, CallerAvailableAllocationUnits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONGLONG CallerAvailableAllocationUnits
     * }
     */
    public static void CallerAvailableAllocationUnits(MemorySegment struct, long fieldValue) {
        struct.set(CallerAvailableAllocationUnits$LAYOUT, CallerAvailableAllocationUnits$OFFSET, fieldValue);
    }

    private static final OfLong CallerPoolUnavailableAllocationUnits$LAYOUT = (OfLong)$LAYOUT.select(groupElement("CallerPoolUnavailableAllocationUnits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONGLONG CallerPoolUnavailableAllocationUnits
     * }
     */
    public static final OfLong CallerPoolUnavailableAllocationUnits$layout() {
        return CallerPoolUnavailableAllocationUnits$LAYOUT;
    }

    private static final long CallerPoolUnavailableAllocationUnits$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONGLONG CallerPoolUnavailableAllocationUnits
     * }
     */
    public static final long CallerPoolUnavailableAllocationUnits$offset() {
        return CallerPoolUnavailableAllocationUnits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONGLONG CallerPoolUnavailableAllocationUnits
     * }
     */
    public static long CallerPoolUnavailableAllocationUnits(MemorySegment struct) {
        return struct.get(CallerPoolUnavailableAllocationUnits$LAYOUT, CallerPoolUnavailableAllocationUnits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONGLONG CallerPoolUnavailableAllocationUnits
     * }
     */
    public static void CallerPoolUnavailableAllocationUnits(MemorySegment struct, long fieldValue) {
        struct.set(CallerPoolUnavailableAllocationUnits$LAYOUT, CallerPoolUnavailableAllocationUnits$OFFSET, fieldValue);
    }

    private static final OfLong UsedAllocationUnits$LAYOUT = (OfLong)$LAYOUT.select(groupElement("UsedAllocationUnits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONGLONG UsedAllocationUnits
     * }
     */
    public static final OfLong UsedAllocationUnits$layout() {
        return UsedAllocationUnits$LAYOUT;
    }

    private static final long UsedAllocationUnits$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONGLONG UsedAllocationUnits
     * }
     */
    public static final long UsedAllocationUnits$offset() {
        return UsedAllocationUnits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONGLONG UsedAllocationUnits
     * }
     */
    public static long UsedAllocationUnits(MemorySegment struct) {
        return struct.get(UsedAllocationUnits$LAYOUT, UsedAllocationUnits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONGLONG UsedAllocationUnits
     * }
     */
    public static void UsedAllocationUnits(MemorySegment struct, long fieldValue) {
        struct.set(UsedAllocationUnits$LAYOUT, UsedAllocationUnits$OFFSET, fieldValue);
    }

    private static final OfLong TotalReservedAllocationUnits$LAYOUT = (OfLong)$LAYOUT.select(groupElement("TotalReservedAllocationUnits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONGLONG TotalReservedAllocationUnits
     * }
     */
    public static final OfLong TotalReservedAllocationUnits$layout() {
        return TotalReservedAllocationUnits$LAYOUT;
    }

    private static final long TotalReservedAllocationUnits$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONGLONG TotalReservedAllocationUnits
     * }
     */
    public static final long TotalReservedAllocationUnits$offset() {
        return TotalReservedAllocationUnits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONGLONG TotalReservedAllocationUnits
     * }
     */
    public static long TotalReservedAllocationUnits(MemorySegment struct) {
        return struct.get(TotalReservedAllocationUnits$LAYOUT, TotalReservedAllocationUnits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONGLONG TotalReservedAllocationUnits
     * }
     */
    public static void TotalReservedAllocationUnits(MemorySegment struct, long fieldValue) {
        struct.set(TotalReservedAllocationUnits$LAYOUT, TotalReservedAllocationUnits$OFFSET, fieldValue);
    }

    private static final OfLong VolumeStorageReserveAllocationUnits$LAYOUT = (OfLong)$LAYOUT.select(groupElement("VolumeStorageReserveAllocationUnits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONGLONG VolumeStorageReserveAllocationUnits
     * }
     */
    public static final OfLong VolumeStorageReserveAllocationUnits$layout() {
        return VolumeStorageReserveAllocationUnits$LAYOUT;
    }

    private static final long VolumeStorageReserveAllocationUnits$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONGLONG VolumeStorageReserveAllocationUnits
     * }
     */
    public static final long VolumeStorageReserveAllocationUnits$offset() {
        return VolumeStorageReserveAllocationUnits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONGLONG VolumeStorageReserveAllocationUnits
     * }
     */
    public static long VolumeStorageReserveAllocationUnits(MemorySegment struct) {
        return struct.get(VolumeStorageReserveAllocationUnits$LAYOUT, VolumeStorageReserveAllocationUnits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONGLONG VolumeStorageReserveAllocationUnits
     * }
     */
    public static void VolumeStorageReserveAllocationUnits(MemorySegment struct, long fieldValue) {
        struct.set(VolumeStorageReserveAllocationUnits$LAYOUT, VolumeStorageReserveAllocationUnits$OFFSET, fieldValue);
    }

    private static final OfLong AvailableCommittedAllocationUnits$LAYOUT = (OfLong)$LAYOUT.select(groupElement("AvailableCommittedAllocationUnits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONGLONG AvailableCommittedAllocationUnits
     * }
     */
    public static final OfLong AvailableCommittedAllocationUnits$layout() {
        return AvailableCommittedAllocationUnits$LAYOUT;
    }

    private static final long AvailableCommittedAllocationUnits$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONGLONG AvailableCommittedAllocationUnits
     * }
     */
    public static final long AvailableCommittedAllocationUnits$offset() {
        return AvailableCommittedAllocationUnits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONGLONG AvailableCommittedAllocationUnits
     * }
     */
    public static long AvailableCommittedAllocationUnits(MemorySegment struct) {
        return struct.get(AvailableCommittedAllocationUnits$LAYOUT, AvailableCommittedAllocationUnits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONGLONG AvailableCommittedAllocationUnits
     * }
     */
    public static void AvailableCommittedAllocationUnits(MemorySegment struct, long fieldValue) {
        struct.set(AvailableCommittedAllocationUnits$LAYOUT, AvailableCommittedAllocationUnits$OFFSET, fieldValue);
    }

    private static final OfLong PoolAvailableAllocationUnits$LAYOUT = (OfLong)$LAYOUT.select(groupElement("PoolAvailableAllocationUnits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONGLONG PoolAvailableAllocationUnits
     * }
     */
    public static final OfLong PoolAvailableAllocationUnits$layout() {
        return PoolAvailableAllocationUnits$LAYOUT;
    }

    private static final long PoolAvailableAllocationUnits$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONGLONG PoolAvailableAllocationUnits
     * }
     */
    public static final long PoolAvailableAllocationUnits$offset() {
        return PoolAvailableAllocationUnits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONGLONG PoolAvailableAllocationUnits
     * }
     */
    public static long PoolAvailableAllocationUnits(MemorySegment struct) {
        return struct.get(PoolAvailableAllocationUnits$LAYOUT, PoolAvailableAllocationUnits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONGLONG PoolAvailableAllocationUnits
     * }
     */
    public static void PoolAvailableAllocationUnits(MemorySegment struct, long fieldValue) {
        struct.set(PoolAvailableAllocationUnits$LAYOUT, PoolAvailableAllocationUnits$OFFSET, fieldValue);
    }

    private static final OfInt SectorsPerAllocationUnit$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SectorsPerAllocationUnit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD SectorsPerAllocationUnit
     * }
     */
    public static final OfInt SectorsPerAllocationUnit$layout() {
        return SectorsPerAllocationUnit$LAYOUT;
    }

    private static final long SectorsPerAllocationUnit$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD SectorsPerAllocationUnit
     * }
     */
    public static final long SectorsPerAllocationUnit$offset() {
        return SectorsPerAllocationUnit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD SectorsPerAllocationUnit
     * }
     */
    public static int SectorsPerAllocationUnit(MemorySegment struct) {
        return struct.get(SectorsPerAllocationUnit$LAYOUT, SectorsPerAllocationUnit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD SectorsPerAllocationUnit
     * }
     */
    public static void SectorsPerAllocationUnit(MemorySegment struct, int fieldValue) {
        struct.set(SectorsPerAllocationUnit$LAYOUT, SectorsPerAllocationUnit$OFFSET, fieldValue);
    }

    private static final OfInt BytesPerSector$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BytesPerSector"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD BytesPerSector
     * }
     */
    public static final OfInt BytesPerSector$layout() {
        return BytesPerSector$LAYOUT;
    }

    private static final long BytesPerSector$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD BytesPerSector
     * }
     */
    public static final long BytesPerSector$offset() {
        return BytesPerSector$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD BytesPerSector
     * }
     */
    public static int BytesPerSector(MemorySegment struct) {
        return struct.get(BytesPerSector$LAYOUT, BytesPerSector$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD BytesPerSector
     * }
     */
    public static void BytesPerSector(MemorySegment struct, int fieldValue) {
        struct.set(BytesPerSector$LAYOUT, BytesPerSector$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

