// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _FSCTL_OFFLOAD_WRITE_INPUT {
 *     DWORD Size;
 *     DWORD Flags;
 *     DWORDLONG FileOffset;
 *     DWORDLONG CopyLength;
 *     DWORDLONG TransferOffset;
 *     BYTE Token[512];
 * }
 * }
 */
public class _FSCTL_OFFLOAD_WRITE_INPUT {

    _FSCTL_OFFLOAD_WRITE_INPUT() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("Size"),
        wgl_h.C_LONG.withName("Flags"),
        wgl_h.C_LONG_LONG.withName("FileOffset"),
        wgl_h.C_LONG_LONG.withName("CopyLength"),
        wgl_h.C_LONG_LONG.withName("TransferOffset"),
        MemoryLayout.sequenceLayout(512, wgl_h.C_CHAR).withName("Token")
    ).withName("_FSCTL_OFFLOAD_WRITE_INPUT");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt Size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static final OfInt Size$layout() {
        return Size$LAYOUT;
    }

    private static final long Size$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static final long Size$offset() {
        return Size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static int Size(MemorySegment struct) {
        return struct.get(Size$LAYOUT, Size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static void Size(MemorySegment struct, int fieldValue) {
        struct.set(Size$LAYOUT, Size$OFFSET, fieldValue);
    }

    private static final OfInt Flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Flags
     * }
     */
    public static final OfInt Flags$layout() {
        return Flags$LAYOUT;
    }

    private static final long Flags$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Flags
     * }
     */
    public static final long Flags$offset() {
        return Flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Flags
     * }
     */
    public static int Flags(MemorySegment struct) {
        return struct.get(Flags$LAYOUT, Flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Flags
     * }
     */
    public static void Flags(MemorySegment struct, int fieldValue) {
        struct.set(Flags$LAYOUT, Flags$OFFSET, fieldValue);
    }

    private static final OfLong FileOffset$LAYOUT = (OfLong)$LAYOUT.select(groupElement("FileOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG FileOffset
     * }
     */
    public static final OfLong FileOffset$layout() {
        return FileOffset$LAYOUT;
    }

    private static final long FileOffset$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG FileOffset
     * }
     */
    public static final long FileOffset$offset() {
        return FileOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG FileOffset
     * }
     */
    public static long FileOffset(MemorySegment struct) {
        return struct.get(FileOffset$LAYOUT, FileOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG FileOffset
     * }
     */
    public static void FileOffset(MemorySegment struct, long fieldValue) {
        struct.set(FileOffset$LAYOUT, FileOffset$OFFSET, fieldValue);
    }

    private static final OfLong CopyLength$LAYOUT = (OfLong)$LAYOUT.select(groupElement("CopyLength"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG CopyLength
     * }
     */
    public static final OfLong CopyLength$layout() {
        return CopyLength$LAYOUT;
    }

    private static final long CopyLength$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG CopyLength
     * }
     */
    public static final long CopyLength$offset() {
        return CopyLength$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG CopyLength
     * }
     */
    public static long CopyLength(MemorySegment struct) {
        return struct.get(CopyLength$LAYOUT, CopyLength$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG CopyLength
     * }
     */
    public static void CopyLength(MemorySegment struct, long fieldValue) {
        struct.set(CopyLength$LAYOUT, CopyLength$OFFSET, fieldValue);
    }

    private static final OfLong TransferOffset$LAYOUT = (OfLong)$LAYOUT.select(groupElement("TransferOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG TransferOffset
     * }
     */
    public static final OfLong TransferOffset$layout() {
        return TransferOffset$LAYOUT;
    }

    private static final long TransferOffset$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG TransferOffset
     * }
     */
    public static final long TransferOffset$offset() {
        return TransferOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG TransferOffset
     * }
     */
    public static long TransferOffset(MemorySegment struct) {
        return struct.get(TransferOffset$LAYOUT, TransferOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG TransferOffset
     * }
     */
    public static void TransferOffset(MemorySegment struct, long fieldValue) {
        struct.set(TransferOffset$LAYOUT, TransferOffset$OFFSET, fieldValue);
    }

    private static final SequenceLayout Token$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("Token"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE Token[512]
     * }
     */
    public static final SequenceLayout Token$layout() {
        return Token$LAYOUT;
    }

    private static final long Token$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE Token[512]
     * }
     */
    public static final long Token$offset() {
        return Token$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE Token[512]
     * }
     */
    public static MemorySegment Token(MemorySegment struct) {
        return struct.asSlice(Token$OFFSET, Token$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE Token[512]
     * }
     */
    public static void Token(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Token$OFFSET, Token$LAYOUT.byteSize());
    }

    private static long[] Token$DIMS = { 512 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * BYTE Token[512]
     * }
     */
    public static long[] Token$dimensions() {
        return Token$DIMS;
    }
    private static final VarHandle Token$ELEM_HANDLE = Token$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * BYTE Token[512]
     * }
     */
    public static byte Token(MemorySegment struct, long index0) {
        return (byte)Token$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * BYTE Token[512]
     * }
     */
    public static void Token(MemorySegment struct, long index0, byte fieldValue) {
        Token$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

