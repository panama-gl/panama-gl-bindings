// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * union _STORAGE_SPEC_VERSION {
 *     struct {
 *         union {
 *             struct {
 *                 BYTE SubMinor;
 *                 BYTE Minor;
 *             };
 *             WORD AsUshort;
 *         } MinorVersion;
 *         WORD MajorVersion;
 *     };
 *     DWORD AsUlong;
 * }
 * }
 */
public class _STORAGE_SPEC_VERSION {

    _STORAGE_SPEC_VERSION() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
        MemoryLayout.structLayout(
            _STORAGE_SPEC_VERSION.MinorVersion.layout().withName("MinorVersion"),
            wgl_h.C_SHORT.withName("MajorVersion")
        ).withName("$anon$2461:5"),
        wgl_h.C_LONG.withName("AsUlong")
    ).withName("_STORAGE_SPEC_VERSION");

    /**
     * The layout of this union
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * union {
     *     struct {
     *         BYTE SubMinor;
     *         BYTE Minor;
     *     };
     *     WORD AsUshort;
     * }
     * }
     */
    public static class MinorVersion {

        MinorVersion() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                wgl_h.C_CHAR.withName("SubMinor"),
                wgl_h.C_CHAR.withName("Minor")
            ).withName("$anon$2463:13"),
            wgl_h.C_SHORT.withName("AsUshort")
        ).withName("$anon$2462:9");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfByte SubMinor$LAYOUT = (OfByte)$LAYOUT.select(groupElement("$anon$2463:13"), groupElement("SubMinor"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * BYTE SubMinor
         * }
         */
        public static final OfByte SubMinor$layout() {
            return SubMinor$LAYOUT;
        }

        private static final long SubMinor$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * BYTE SubMinor
         * }
         */
        public static final long SubMinor$offset() {
            return SubMinor$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * BYTE SubMinor
         * }
         */
        public static byte SubMinor(MemorySegment union) {
            return union.get(SubMinor$LAYOUT, SubMinor$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * BYTE SubMinor
         * }
         */
        public static void SubMinor(MemorySegment union, byte fieldValue) {
            union.set(SubMinor$LAYOUT, SubMinor$OFFSET, fieldValue);
        }

        private static final OfByte Minor$LAYOUT = (OfByte)$LAYOUT.select(groupElement("$anon$2463:13"), groupElement("Minor"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * BYTE Minor
         * }
         */
        public static final OfByte Minor$layout() {
            return Minor$LAYOUT;
        }

        private static final long Minor$OFFSET = 1;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * BYTE Minor
         * }
         */
        public static final long Minor$offset() {
            return Minor$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * BYTE Minor
         * }
         */
        public static byte Minor(MemorySegment union) {
            return union.get(Minor$LAYOUT, Minor$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * BYTE Minor
         * }
         */
        public static void Minor(MemorySegment union, byte fieldValue) {
            union.set(Minor$LAYOUT, Minor$OFFSET, fieldValue);
        }

        private static final OfShort AsUshort$LAYOUT = (OfShort)$LAYOUT.select(groupElement("AsUshort"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * WORD AsUshort
         * }
         */
        public static final OfShort AsUshort$layout() {
            return AsUshort$LAYOUT;
        }

        private static final long AsUshort$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * WORD AsUshort
         * }
         */
        public static final long AsUshort$offset() {
            return AsUshort$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * WORD AsUshort
         * }
         */
        public static short AsUshort(MemorySegment union) {
            return union.get(AsUshort$LAYOUT, AsUshort$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * WORD AsUshort
         * }
         */
        public static void AsUshort(MemorySegment union, short fieldValue) {
            union.set(AsUshort$LAYOUT, AsUshort$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout MinorVersion$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$2461:5"), groupElement("MinorVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         BYTE SubMinor;
     *         BYTE Minor;
     *     };
     *     WORD AsUshort;
     * } MinorVersion
     * }
     */
    public static final GroupLayout MinorVersion$layout() {
        return MinorVersion$LAYOUT;
    }

    private static final long MinorVersion$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         BYTE SubMinor;
     *         BYTE Minor;
     *     };
     *     WORD AsUshort;
     * } MinorVersion
     * }
     */
    public static final long MinorVersion$offset() {
        return MinorVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         BYTE SubMinor;
     *         BYTE Minor;
     *     };
     *     WORD AsUshort;
     * } MinorVersion
     * }
     */
    public static MemorySegment MinorVersion(MemorySegment union) {
        return union.asSlice(MinorVersion$OFFSET, MinorVersion$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         BYTE SubMinor;
     *         BYTE Minor;
     *     };
     *     WORD AsUshort;
     * } MinorVersion
     * }
     */
    public static void MinorVersion(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, MinorVersion$OFFSET, MinorVersion$LAYOUT.byteSize());
    }

    private static final OfShort MajorVersion$LAYOUT = (OfShort)$LAYOUT.select(groupElement("$anon$2461:5"), groupElement("MajorVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD MajorVersion
     * }
     */
    public static final OfShort MajorVersion$layout() {
        return MajorVersion$LAYOUT;
    }

    private static final long MajorVersion$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD MajorVersion
     * }
     */
    public static final long MajorVersion$offset() {
        return MajorVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD MajorVersion
     * }
     */
    public static short MajorVersion(MemorySegment union) {
        return union.get(MajorVersion$LAYOUT, MajorVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD MajorVersion
     * }
     */
    public static void MajorVersion(MemorySegment union, short fieldValue) {
        union.set(MajorVersion$LAYOUT, MajorVersion$OFFSET, fieldValue);
    }

    private static final OfInt AsUlong$LAYOUT = (OfInt)$LAYOUT.select(groupElement("AsUlong"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD AsUlong
     * }
     */
    public static final OfInt AsUlong$layout() {
        return AsUlong$LAYOUT;
    }

    private static final long AsUlong$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD AsUlong
     * }
     */
    public static final long AsUlong$offset() {
        return AsUlong$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD AsUlong
     * }
     */
    public static int AsUlong(MemorySegment union) {
        return union.get(AsUlong$LAYOUT, AsUlong$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD AsUlong
     * }
     */
    public static void AsUlong(MemorySegment union, int fieldValue) {
        union.set(AsUlong$LAYOUT, AsUlong$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this union
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

