// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _CERT_TEMPLATE_EXT {
 *     LPSTR pszObjId;
 *     DWORD dwMajorVersion;
 *     BOOL fMinorVersion;
 *     DWORD dwMinorVersion;
 * }
 * }
 */
public class _CERT_TEMPLATE_EXT {

    _CERT_TEMPLATE_EXT() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("pszObjId"),
        wgl_h.C_LONG.withName("dwMajorVersion"),
        wgl_h.C_INT.withName("fMinorVersion"),
        wgl_h.C_LONG.withName("dwMinorVersion"),
        MemoryLayout.paddingLayout(4)
    ).withName("_CERT_TEMPLATE_EXT");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout pszObjId$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pszObjId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPSTR pszObjId
     * }
     */
    public static final AddressLayout pszObjId$layout() {
        return pszObjId$LAYOUT;
    }

    private static final long pszObjId$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPSTR pszObjId
     * }
     */
    public static final long pszObjId$offset() {
        return pszObjId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPSTR pszObjId
     * }
     */
    public static MemorySegment pszObjId(MemorySegment struct) {
        return struct.get(pszObjId$LAYOUT, pszObjId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPSTR pszObjId
     * }
     */
    public static void pszObjId(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pszObjId$LAYOUT, pszObjId$OFFSET, fieldValue);
    }

    private static final OfInt dwMajorVersion$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwMajorVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwMajorVersion
     * }
     */
    public static final OfInt dwMajorVersion$layout() {
        return dwMajorVersion$LAYOUT;
    }

    private static final long dwMajorVersion$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwMajorVersion
     * }
     */
    public static final long dwMajorVersion$offset() {
        return dwMajorVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwMajorVersion
     * }
     */
    public static int dwMajorVersion(MemorySegment struct) {
        return struct.get(dwMajorVersion$LAYOUT, dwMajorVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwMajorVersion
     * }
     */
    public static void dwMajorVersion(MemorySegment struct, int fieldValue) {
        struct.set(dwMajorVersion$LAYOUT, dwMajorVersion$OFFSET, fieldValue);
    }

    private static final OfInt fMinorVersion$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fMinorVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOL fMinorVersion
     * }
     */
    public static final OfInt fMinorVersion$layout() {
        return fMinorVersion$LAYOUT;
    }

    private static final long fMinorVersion$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOL fMinorVersion
     * }
     */
    public static final long fMinorVersion$offset() {
        return fMinorVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOL fMinorVersion
     * }
     */
    public static int fMinorVersion(MemorySegment struct) {
        return struct.get(fMinorVersion$LAYOUT, fMinorVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOL fMinorVersion
     * }
     */
    public static void fMinorVersion(MemorySegment struct, int fieldValue) {
        struct.set(fMinorVersion$LAYOUT, fMinorVersion$OFFSET, fieldValue);
    }

    private static final OfInt dwMinorVersion$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwMinorVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwMinorVersion
     * }
     */
    public static final OfInt dwMinorVersion$layout() {
        return dwMinorVersion$LAYOUT;
    }

    private static final long dwMinorVersion$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwMinorVersion
     * }
     */
    public static final long dwMinorVersion$offset() {
        return dwMinorVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwMinorVersion
     * }
     */
    public static int dwMinorVersion(MemorySegment struct) {
        return struct.get(dwMinorVersion$LAYOUT, dwMinorVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwMinorVersion
     * }
     */
    public static void dwMinorVersion(MemorySegment struct, int fieldValue) {
        struct.set(dwMinorVersion$LAYOUT, dwMinorVersion$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

