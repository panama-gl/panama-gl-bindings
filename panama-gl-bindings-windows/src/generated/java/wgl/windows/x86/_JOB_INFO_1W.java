// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _JOB_INFO_1W {
 *     DWORD JobId;
 *     LPWSTR pPrinterName;
 *     LPWSTR pMachineName;
 *     LPWSTR pUserName;
 *     LPWSTR pDocument;
 *     LPWSTR pDatatype;
 *     LPWSTR pStatus;
 *     DWORD Status;
 *     DWORD Priority;
 *     DWORD Position;
 *     DWORD TotalPages;
 *     DWORD PagesPrinted;
 *     SYSTEMTIME Submitted;
 * }
 * }
 */
public class _JOB_INFO_1W {

    _JOB_INFO_1W() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("JobId"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_POINTER.withName("pPrinterName"),
        wgl_h.C_POINTER.withName("pMachineName"),
        wgl_h.C_POINTER.withName("pUserName"),
        wgl_h.C_POINTER.withName("pDocument"),
        wgl_h.C_POINTER.withName("pDatatype"),
        wgl_h.C_POINTER.withName("pStatus"),
        wgl_h.C_LONG.withName("Status"),
        wgl_h.C_LONG.withName("Priority"),
        wgl_h.C_LONG.withName("Position"),
        wgl_h.C_LONG.withName("TotalPages"),
        wgl_h.C_LONG.withName("PagesPrinted"),
        _SYSTEMTIME.layout().withName("Submitted"),
        MemoryLayout.paddingLayout(4)
    ).withName("_JOB_INFO_1W");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt JobId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("JobId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD JobId
     * }
     */
    public static final OfInt JobId$layout() {
        return JobId$LAYOUT;
    }

    private static final long JobId$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD JobId
     * }
     */
    public static final long JobId$offset() {
        return JobId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD JobId
     * }
     */
    public static int JobId(MemorySegment struct) {
        return struct.get(JobId$LAYOUT, JobId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD JobId
     * }
     */
    public static void JobId(MemorySegment struct, int fieldValue) {
        struct.set(JobId$LAYOUT, JobId$OFFSET, fieldValue);
    }

    private static final AddressLayout pPrinterName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pPrinterName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPWSTR pPrinterName
     * }
     */
    public static final AddressLayout pPrinterName$layout() {
        return pPrinterName$LAYOUT;
    }

    private static final long pPrinterName$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPWSTR pPrinterName
     * }
     */
    public static final long pPrinterName$offset() {
        return pPrinterName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPWSTR pPrinterName
     * }
     */
    public static MemorySegment pPrinterName(MemorySegment struct) {
        return struct.get(pPrinterName$LAYOUT, pPrinterName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPWSTR pPrinterName
     * }
     */
    public static void pPrinterName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pPrinterName$LAYOUT, pPrinterName$OFFSET, fieldValue);
    }

    private static final AddressLayout pMachineName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pMachineName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPWSTR pMachineName
     * }
     */
    public static final AddressLayout pMachineName$layout() {
        return pMachineName$LAYOUT;
    }

    private static final long pMachineName$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPWSTR pMachineName
     * }
     */
    public static final long pMachineName$offset() {
        return pMachineName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPWSTR pMachineName
     * }
     */
    public static MemorySegment pMachineName(MemorySegment struct) {
        return struct.get(pMachineName$LAYOUT, pMachineName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPWSTR pMachineName
     * }
     */
    public static void pMachineName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pMachineName$LAYOUT, pMachineName$OFFSET, fieldValue);
    }

    private static final AddressLayout pUserName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pUserName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPWSTR pUserName
     * }
     */
    public static final AddressLayout pUserName$layout() {
        return pUserName$LAYOUT;
    }

    private static final long pUserName$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPWSTR pUserName
     * }
     */
    public static final long pUserName$offset() {
        return pUserName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPWSTR pUserName
     * }
     */
    public static MemorySegment pUserName(MemorySegment struct) {
        return struct.get(pUserName$LAYOUT, pUserName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPWSTR pUserName
     * }
     */
    public static void pUserName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pUserName$LAYOUT, pUserName$OFFSET, fieldValue);
    }

    private static final AddressLayout pDocument$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pDocument"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPWSTR pDocument
     * }
     */
    public static final AddressLayout pDocument$layout() {
        return pDocument$LAYOUT;
    }

    private static final long pDocument$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPWSTR pDocument
     * }
     */
    public static final long pDocument$offset() {
        return pDocument$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPWSTR pDocument
     * }
     */
    public static MemorySegment pDocument(MemorySegment struct) {
        return struct.get(pDocument$LAYOUT, pDocument$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPWSTR pDocument
     * }
     */
    public static void pDocument(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pDocument$LAYOUT, pDocument$OFFSET, fieldValue);
    }

    private static final AddressLayout pDatatype$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pDatatype"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPWSTR pDatatype
     * }
     */
    public static final AddressLayout pDatatype$layout() {
        return pDatatype$LAYOUT;
    }

    private static final long pDatatype$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPWSTR pDatatype
     * }
     */
    public static final long pDatatype$offset() {
        return pDatatype$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPWSTR pDatatype
     * }
     */
    public static MemorySegment pDatatype(MemorySegment struct) {
        return struct.get(pDatatype$LAYOUT, pDatatype$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPWSTR pDatatype
     * }
     */
    public static void pDatatype(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pDatatype$LAYOUT, pDatatype$OFFSET, fieldValue);
    }

    private static final AddressLayout pStatus$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pStatus"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPWSTR pStatus
     * }
     */
    public static final AddressLayout pStatus$layout() {
        return pStatus$LAYOUT;
    }

    private static final long pStatus$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPWSTR pStatus
     * }
     */
    public static final long pStatus$offset() {
        return pStatus$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPWSTR pStatus
     * }
     */
    public static MemorySegment pStatus(MemorySegment struct) {
        return struct.get(pStatus$LAYOUT, pStatus$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPWSTR pStatus
     * }
     */
    public static void pStatus(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pStatus$LAYOUT, pStatus$OFFSET, fieldValue);
    }

    private static final OfInt Status$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Status"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Status
     * }
     */
    public static final OfInt Status$layout() {
        return Status$LAYOUT;
    }

    private static final long Status$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Status
     * }
     */
    public static final long Status$offset() {
        return Status$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Status
     * }
     */
    public static int Status(MemorySegment struct) {
        return struct.get(Status$LAYOUT, Status$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Status
     * }
     */
    public static void Status(MemorySegment struct, int fieldValue) {
        struct.set(Status$LAYOUT, Status$OFFSET, fieldValue);
    }

    private static final OfInt Priority$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Priority"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Priority
     * }
     */
    public static final OfInt Priority$layout() {
        return Priority$LAYOUT;
    }

    private static final long Priority$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Priority
     * }
     */
    public static final long Priority$offset() {
        return Priority$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Priority
     * }
     */
    public static int Priority(MemorySegment struct) {
        return struct.get(Priority$LAYOUT, Priority$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Priority
     * }
     */
    public static void Priority(MemorySegment struct, int fieldValue) {
        struct.set(Priority$LAYOUT, Priority$OFFSET, fieldValue);
    }

    private static final OfInt Position$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Position"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Position
     * }
     */
    public static final OfInt Position$layout() {
        return Position$LAYOUT;
    }

    private static final long Position$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Position
     * }
     */
    public static final long Position$offset() {
        return Position$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Position
     * }
     */
    public static int Position(MemorySegment struct) {
        return struct.get(Position$LAYOUT, Position$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Position
     * }
     */
    public static void Position(MemorySegment struct, int fieldValue) {
        struct.set(Position$LAYOUT, Position$OFFSET, fieldValue);
    }

    private static final OfInt TotalPages$LAYOUT = (OfInt)$LAYOUT.select(groupElement("TotalPages"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD TotalPages
     * }
     */
    public static final OfInt TotalPages$layout() {
        return TotalPages$LAYOUT;
    }

    private static final long TotalPages$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD TotalPages
     * }
     */
    public static final long TotalPages$offset() {
        return TotalPages$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD TotalPages
     * }
     */
    public static int TotalPages(MemorySegment struct) {
        return struct.get(TotalPages$LAYOUT, TotalPages$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD TotalPages
     * }
     */
    public static void TotalPages(MemorySegment struct, int fieldValue) {
        struct.set(TotalPages$LAYOUT, TotalPages$OFFSET, fieldValue);
    }

    private static final OfInt PagesPrinted$LAYOUT = (OfInt)$LAYOUT.select(groupElement("PagesPrinted"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD PagesPrinted
     * }
     */
    public static final OfInt PagesPrinted$layout() {
        return PagesPrinted$LAYOUT;
    }

    private static final long PagesPrinted$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD PagesPrinted
     * }
     */
    public static final long PagesPrinted$offset() {
        return PagesPrinted$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD PagesPrinted
     * }
     */
    public static int PagesPrinted(MemorySegment struct) {
        return struct.get(PagesPrinted$LAYOUT, PagesPrinted$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD PagesPrinted
     * }
     */
    public static void PagesPrinted(MemorySegment struct, int fieldValue) {
        struct.set(PagesPrinted$LAYOUT, PagesPrinted$OFFSET, fieldValue);
    }

    private static final GroupLayout Submitted$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Submitted"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SYSTEMTIME Submitted
     * }
     */
    public static final GroupLayout Submitted$layout() {
        return Submitted$LAYOUT;
    }

    private static final long Submitted$OFFSET = 76;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SYSTEMTIME Submitted
     * }
     */
    public static final long Submitted$offset() {
        return Submitted$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SYSTEMTIME Submitted
     * }
     */
    public static MemorySegment Submitted(MemorySegment struct) {
        return struct.asSlice(Submitted$OFFSET, Submitted$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SYSTEMTIME Submitted
     * }
     */
    public static void Submitted(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Submitted$OFFSET, Submitted$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

