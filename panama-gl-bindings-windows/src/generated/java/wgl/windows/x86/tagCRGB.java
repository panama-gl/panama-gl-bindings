// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tagCRGB {
 *     BYTE bRed;
 *     BYTE bGreen;
 *     BYTE bBlue;
 *     BYTE bExtra;
 * }
 * }
 */
public class tagCRGB {

    tagCRGB() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_CHAR.withName("bRed"),
        wgl_h.C_CHAR.withName("bGreen"),
        wgl_h.C_CHAR.withName("bBlue"),
        wgl_h.C_CHAR.withName("bExtra")
    ).withName("tagCRGB");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte bRed$LAYOUT = (OfByte)$LAYOUT.select(groupElement("bRed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE bRed
     * }
     */
    public static final OfByte bRed$layout() {
        return bRed$LAYOUT;
    }

    private static final long bRed$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE bRed
     * }
     */
    public static final long bRed$offset() {
        return bRed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE bRed
     * }
     */
    public static byte bRed(MemorySegment struct) {
        return struct.get(bRed$LAYOUT, bRed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE bRed
     * }
     */
    public static void bRed(MemorySegment struct, byte fieldValue) {
        struct.set(bRed$LAYOUT, bRed$OFFSET, fieldValue);
    }

    private static final OfByte bGreen$LAYOUT = (OfByte)$LAYOUT.select(groupElement("bGreen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE bGreen
     * }
     */
    public static final OfByte bGreen$layout() {
        return bGreen$LAYOUT;
    }

    private static final long bGreen$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE bGreen
     * }
     */
    public static final long bGreen$offset() {
        return bGreen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE bGreen
     * }
     */
    public static byte bGreen(MemorySegment struct) {
        return struct.get(bGreen$LAYOUT, bGreen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE bGreen
     * }
     */
    public static void bGreen(MemorySegment struct, byte fieldValue) {
        struct.set(bGreen$LAYOUT, bGreen$OFFSET, fieldValue);
    }

    private static final OfByte bBlue$LAYOUT = (OfByte)$LAYOUT.select(groupElement("bBlue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE bBlue
     * }
     */
    public static final OfByte bBlue$layout() {
        return bBlue$LAYOUT;
    }

    private static final long bBlue$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE bBlue
     * }
     */
    public static final long bBlue$offset() {
        return bBlue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE bBlue
     * }
     */
    public static byte bBlue(MemorySegment struct) {
        return struct.get(bBlue$LAYOUT, bBlue$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE bBlue
     * }
     */
    public static void bBlue(MemorySegment struct, byte fieldValue) {
        struct.set(bBlue$LAYOUT, bBlue$OFFSET, fieldValue);
    }

    private static final OfByte bExtra$LAYOUT = (OfByte)$LAYOUT.select(groupElement("bExtra"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE bExtra
     * }
     */
    public static final OfByte bExtra$layout() {
        return bExtra$LAYOUT;
    }

    private static final long bExtra$OFFSET = 3;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE bExtra
     * }
     */
    public static final long bExtra$offset() {
        return bExtra$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE bExtra
     * }
     */
    public static byte bExtra(MemorySegment struct) {
        return struct.get(bExtra$LAYOUT, bExtra$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE bExtra
     * }
     */
    public static void bExtra(MemorySegment struct, byte fieldValue) {
        struct.set(bExtra$LAYOUT, bExtra$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

