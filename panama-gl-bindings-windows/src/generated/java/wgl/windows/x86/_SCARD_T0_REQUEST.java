// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _SCARD_T0_REQUEST {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("dwProtocol"),
            Constants$root.C_LONG$LAYOUT.withName("cbPciLength")
        ).withName("ioRequest"),
        Constants$root.C_CHAR$LAYOUT.withName("bSw1"),
        Constants$root.C_CHAR$LAYOUT.withName("bSw2"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_CHAR$LAYOUT.withName("bCla"),
                Constants$root.C_CHAR$LAYOUT.withName("bIns"),
                Constants$root.C_CHAR$LAYOUT.withName("bP1"),
                Constants$root.C_CHAR$LAYOUT.withName("bP2"),
                Constants$root.C_CHAR$LAYOUT.withName("bP3")
            ).withName("CmdBytes"),
            MemoryLayout.sequenceLayout(5, Constants$root.C_CHAR$LAYOUT).withName("rgbHeader")
        ).withName("$anon$0"),
        MemoryLayout.paddingLayout(8)
    ).withName("_SCARD_T0_REQUEST");
    public static MemoryLayout $LAYOUT() {
        return _SCARD_T0_REQUEST.$struct$LAYOUT;
    }
    public static MemorySegment ioRequest$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    static final VarHandle bSw1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bSw1"));
    public static VarHandle bSw1$VH() {
        return _SCARD_T0_REQUEST.bSw1$VH;
    }
    public static byte bSw1$get(MemorySegment seg) {
        return (byte)_SCARD_T0_REQUEST.bSw1$VH.get(seg);
    }
    public static void bSw1$set( MemorySegment seg, byte x) {
        _SCARD_T0_REQUEST.bSw1$VH.set(seg, x);
    }
    public static byte bSw1$get(MemorySegment seg, long index) {
        return (byte)_SCARD_T0_REQUEST.bSw1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bSw1$set(MemorySegment seg, long index, byte x) {
        _SCARD_T0_REQUEST.bSw1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bSw2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bSw2"));
    public static VarHandle bSw2$VH() {
        return _SCARD_T0_REQUEST.bSw2$VH;
    }
    public static byte bSw2$get(MemorySegment seg) {
        return (byte)_SCARD_T0_REQUEST.bSw2$VH.get(seg);
    }
    public static void bSw2$set( MemorySegment seg, byte x) {
        _SCARD_T0_REQUEST.bSw2$VH.set(seg, x);
    }
    public static byte bSw2$get(MemorySegment seg, long index) {
        return (byte)_SCARD_T0_REQUEST.bSw2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bSw2$set(MemorySegment seg, long index, byte x) {
        _SCARD_T0_REQUEST.bSw2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment CmdBytes$slice(MemorySegment seg) {
        return seg.asSlice(10, 5);
    }
    public static MemorySegment rgbHeader$slice(MemorySegment seg) {
        return seg.asSlice(10, 5);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


