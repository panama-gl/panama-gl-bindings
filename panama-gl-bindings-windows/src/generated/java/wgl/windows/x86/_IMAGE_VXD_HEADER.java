// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _IMAGE_VXD_HEADER {
 *     WORD e32_magic;
 *     BYTE e32_border;
 *     BYTE e32_worder;
 *     DWORD e32_level;
 *     WORD e32_cpu;
 *     WORD e32_os;
 *     DWORD e32_ver;
 *     DWORD e32_mflags;
 *     DWORD e32_mpages;
 *     DWORD e32_startobj;
 *     DWORD e32_eip;
 *     DWORD e32_stackobj;
 *     DWORD e32_esp;
 *     DWORD e32_pagesize;
 *     DWORD e32_lastpagesize;
 *     DWORD e32_fixupsize;
 *     DWORD e32_fixupsum;
 *     DWORD e32_ldrsize;
 *     DWORD e32_ldrsum;
 *     DWORD e32_objtab;
 *     DWORD e32_objcnt;
 *     DWORD e32_objmap;
 *     DWORD e32_itermap;
 *     DWORD e32_rsrctab;
 *     DWORD e32_rsrccnt;
 *     DWORD e32_restab;
 *     DWORD e32_enttab;
 *     DWORD e32_dirtab;
 *     DWORD e32_dircnt;
 *     DWORD e32_fpagetab;
 *     DWORD e32_frectab;
 *     DWORD e32_impmod;
 *     DWORD e32_impmodcnt;
 *     DWORD e32_impproc;
 *     DWORD e32_pagesum;
 *     DWORD e32_datapage;
 *     DWORD e32_preload;
 *     DWORD e32_nrestab;
 *     DWORD e32_cbnrestab;
 *     DWORD e32_nressum;
 *     DWORD e32_autodata;
 *     DWORD e32_debuginfo;
 *     DWORD e32_debuglen;
 *     DWORD e32_instpreload;
 *     DWORD e32_instdemand;
 *     DWORD e32_heapsize;
 *     BYTE e32_res3[12];
 *     DWORD e32_winresoff;
 *     DWORD e32_winreslen;
 *     WORD e32_devid;
 *     WORD e32_ddkver;
 * }
 * }
 */
public class _IMAGE_VXD_HEADER {

    _IMAGE_VXD_HEADER() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_SHORT.withName("e32_magic"),
        wgl_h.C_CHAR.withName("e32_border"),
        wgl_h.C_CHAR.withName("e32_worder"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_level"),
        wgl_h.C_SHORT.withName("e32_cpu"),
        wgl_h.C_SHORT.withName("e32_os"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_ver"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_mflags"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_mpages"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_startobj"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_eip"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_stackobj"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_esp"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_pagesize"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_lastpagesize"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_fixupsize"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_fixupsum"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_ldrsize"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_ldrsum"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_objtab"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_objcnt"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_objmap"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_itermap"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_rsrctab"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_rsrccnt"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_restab"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_enttab"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_dirtab"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_dircnt"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_fpagetab"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_frectab"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_impmod"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_impmodcnt"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_impproc"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_pagesum"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_datapage"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_preload"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_nrestab"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_cbnrestab"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_nressum"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_autodata"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_debuginfo"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_debuglen"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_instpreload"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_instdemand"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_heapsize"),
        MemoryLayout.sequenceLayout(12, wgl_h.C_CHAR).withName("e32_res3"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_winresoff"),
        wgl_h.align(wgl_h.C_LONG, 2).withName("e32_winreslen"),
        wgl_h.C_SHORT.withName("e32_devid"),
        wgl_h.C_SHORT.withName("e32_ddkver")
    ).withName("_IMAGE_VXD_HEADER");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfShort e32_magic$LAYOUT = (OfShort)$LAYOUT.select(groupElement("e32_magic"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD e32_magic
     * }
     */
    public static final OfShort e32_magic$layout() {
        return e32_magic$LAYOUT;
    }

    private static final long e32_magic$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD e32_magic
     * }
     */
    public static final long e32_magic$offset() {
        return e32_magic$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD e32_magic
     * }
     */
    public static short e32_magic(MemorySegment struct) {
        return struct.get(e32_magic$LAYOUT, e32_magic$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD e32_magic
     * }
     */
    public static void e32_magic(MemorySegment struct, short fieldValue) {
        struct.set(e32_magic$LAYOUT, e32_magic$OFFSET, fieldValue);
    }

    private static final OfByte e32_border$LAYOUT = (OfByte)$LAYOUT.select(groupElement("e32_border"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE e32_border
     * }
     */
    public static final OfByte e32_border$layout() {
        return e32_border$LAYOUT;
    }

    private static final long e32_border$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE e32_border
     * }
     */
    public static final long e32_border$offset() {
        return e32_border$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE e32_border
     * }
     */
    public static byte e32_border(MemorySegment struct) {
        return struct.get(e32_border$LAYOUT, e32_border$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE e32_border
     * }
     */
    public static void e32_border(MemorySegment struct, byte fieldValue) {
        struct.set(e32_border$LAYOUT, e32_border$OFFSET, fieldValue);
    }

    private static final OfByte e32_worder$LAYOUT = (OfByte)$LAYOUT.select(groupElement("e32_worder"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE e32_worder
     * }
     */
    public static final OfByte e32_worder$layout() {
        return e32_worder$LAYOUT;
    }

    private static final long e32_worder$OFFSET = 3;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE e32_worder
     * }
     */
    public static final long e32_worder$offset() {
        return e32_worder$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE e32_worder
     * }
     */
    public static byte e32_worder(MemorySegment struct) {
        return struct.get(e32_worder$LAYOUT, e32_worder$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE e32_worder
     * }
     */
    public static void e32_worder(MemorySegment struct, byte fieldValue) {
        struct.set(e32_worder$LAYOUT, e32_worder$OFFSET, fieldValue);
    }

    private static final OfInt e32_level$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_level"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_level
     * }
     */
    public static final OfInt e32_level$layout() {
        return e32_level$LAYOUT;
    }

    private static final long e32_level$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_level
     * }
     */
    public static final long e32_level$offset() {
        return e32_level$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_level
     * }
     */
    public static int e32_level(MemorySegment struct) {
        return struct.get(e32_level$LAYOUT, e32_level$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_level
     * }
     */
    public static void e32_level(MemorySegment struct, int fieldValue) {
        struct.set(e32_level$LAYOUT, e32_level$OFFSET, fieldValue);
    }

    private static final OfShort e32_cpu$LAYOUT = (OfShort)$LAYOUT.select(groupElement("e32_cpu"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD e32_cpu
     * }
     */
    public static final OfShort e32_cpu$layout() {
        return e32_cpu$LAYOUT;
    }

    private static final long e32_cpu$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD e32_cpu
     * }
     */
    public static final long e32_cpu$offset() {
        return e32_cpu$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD e32_cpu
     * }
     */
    public static short e32_cpu(MemorySegment struct) {
        return struct.get(e32_cpu$LAYOUT, e32_cpu$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD e32_cpu
     * }
     */
    public static void e32_cpu(MemorySegment struct, short fieldValue) {
        struct.set(e32_cpu$LAYOUT, e32_cpu$OFFSET, fieldValue);
    }

    private static final OfShort e32_os$LAYOUT = (OfShort)$LAYOUT.select(groupElement("e32_os"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD e32_os
     * }
     */
    public static final OfShort e32_os$layout() {
        return e32_os$LAYOUT;
    }

    private static final long e32_os$OFFSET = 10;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD e32_os
     * }
     */
    public static final long e32_os$offset() {
        return e32_os$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD e32_os
     * }
     */
    public static short e32_os(MemorySegment struct) {
        return struct.get(e32_os$LAYOUT, e32_os$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD e32_os
     * }
     */
    public static void e32_os(MemorySegment struct, short fieldValue) {
        struct.set(e32_os$LAYOUT, e32_os$OFFSET, fieldValue);
    }

    private static final OfInt e32_ver$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_ver"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_ver
     * }
     */
    public static final OfInt e32_ver$layout() {
        return e32_ver$LAYOUT;
    }

    private static final long e32_ver$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_ver
     * }
     */
    public static final long e32_ver$offset() {
        return e32_ver$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_ver
     * }
     */
    public static int e32_ver(MemorySegment struct) {
        return struct.get(e32_ver$LAYOUT, e32_ver$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_ver
     * }
     */
    public static void e32_ver(MemorySegment struct, int fieldValue) {
        struct.set(e32_ver$LAYOUT, e32_ver$OFFSET, fieldValue);
    }

    private static final OfInt e32_mflags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_mflags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_mflags
     * }
     */
    public static final OfInt e32_mflags$layout() {
        return e32_mflags$LAYOUT;
    }

    private static final long e32_mflags$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_mflags
     * }
     */
    public static final long e32_mflags$offset() {
        return e32_mflags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_mflags
     * }
     */
    public static int e32_mflags(MemorySegment struct) {
        return struct.get(e32_mflags$LAYOUT, e32_mflags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_mflags
     * }
     */
    public static void e32_mflags(MemorySegment struct, int fieldValue) {
        struct.set(e32_mflags$LAYOUT, e32_mflags$OFFSET, fieldValue);
    }

    private static final OfInt e32_mpages$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_mpages"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_mpages
     * }
     */
    public static final OfInt e32_mpages$layout() {
        return e32_mpages$LAYOUT;
    }

    private static final long e32_mpages$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_mpages
     * }
     */
    public static final long e32_mpages$offset() {
        return e32_mpages$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_mpages
     * }
     */
    public static int e32_mpages(MemorySegment struct) {
        return struct.get(e32_mpages$LAYOUT, e32_mpages$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_mpages
     * }
     */
    public static void e32_mpages(MemorySegment struct, int fieldValue) {
        struct.set(e32_mpages$LAYOUT, e32_mpages$OFFSET, fieldValue);
    }

    private static final OfInt e32_startobj$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_startobj"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_startobj
     * }
     */
    public static final OfInt e32_startobj$layout() {
        return e32_startobj$LAYOUT;
    }

    private static final long e32_startobj$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_startobj
     * }
     */
    public static final long e32_startobj$offset() {
        return e32_startobj$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_startobj
     * }
     */
    public static int e32_startobj(MemorySegment struct) {
        return struct.get(e32_startobj$LAYOUT, e32_startobj$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_startobj
     * }
     */
    public static void e32_startobj(MemorySegment struct, int fieldValue) {
        struct.set(e32_startobj$LAYOUT, e32_startobj$OFFSET, fieldValue);
    }

    private static final OfInt e32_eip$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_eip"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_eip
     * }
     */
    public static final OfInt e32_eip$layout() {
        return e32_eip$LAYOUT;
    }

    private static final long e32_eip$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_eip
     * }
     */
    public static final long e32_eip$offset() {
        return e32_eip$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_eip
     * }
     */
    public static int e32_eip(MemorySegment struct) {
        return struct.get(e32_eip$LAYOUT, e32_eip$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_eip
     * }
     */
    public static void e32_eip(MemorySegment struct, int fieldValue) {
        struct.set(e32_eip$LAYOUT, e32_eip$OFFSET, fieldValue);
    }

    private static final OfInt e32_stackobj$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_stackobj"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_stackobj
     * }
     */
    public static final OfInt e32_stackobj$layout() {
        return e32_stackobj$LAYOUT;
    }

    private static final long e32_stackobj$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_stackobj
     * }
     */
    public static final long e32_stackobj$offset() {
        return e32_stackobj$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_stackobj
     * }
     */
    public static int e32_stackobj(MemorySegment struct) {
        return struct.get(e32_stackobj$LAYOUT, e32_stackobj$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_stackobj
     * }
     */
    public static void e32_stackobj(MemorySegment struct, int fieldValue) {
        struct.set(e32_stackobj$LAYOUT, e32_stackobj$OFFSET, fieldValue);
    }

    private static final OfInt e32_esp$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_esp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_esp
     * }
     */
    public static final OfInt e32_esp$layout() {
        return e32_esp$LAYOUT;
    }

    private static final long e32_esp$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_esp
     * }
     */
    public static final long e32_esp$offset() {
        return e32_esp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_esp
     * }
     */
    public static int e32_esp(MemorySegment struct) {
        return struct.get(e32_esp$LAYOUT, e32_esp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_esp
     * }
     */
    public static void e32_esp(MemorySegment struct, int fieldValue) {
        struct.set(e32_esp$LAYOUT, e32_esp$OFFSET, fieldValue);
    }

    private static final OfInt e32_pagesize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_pagesize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_pagesize
     * }
     */
    public static final OfInt e32_pagesize$layout() {
        return e32_pagesize$LAYOUT;
    }

    private static final long e32_pagesize$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_pagesize
     * }
     */
    public static final long e32_pagesize$offset() {
        return e32_pagesize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_pagesize
     * }
     */
    public static int e32_pagesize(MemorySegment struct) {
        return struct.get(e32_pagesize$LAYOUT, e32_pagesize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_pagesize
     * }
     */
    public static void e32_pagesize(MemorySegment struct, int fieldValue) {
        struct.set(e32_pagesize$LAYOUT, e32_pagesize$OFFSET, fieldValue);
    }

    private static final OfInt e32_lastpagesize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_lastpagesize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_lastpagesize
     * }
     */
    public static final OfInt e32_lastpagesize$layout() {
        return e32_lastpagesize$LAYOUT;
    }

    private static final long e32_lastpagesize$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_lastpagesize
     * }
     */
    public static final long e32_lastpagesize$offset() {
        return e32_lastpagesize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_lastpagesize
     * }
     */
    public static int e32_lastpagesize(MemorySegment struct) {
        return struct.get(e32_lastpagesize$LAYOUT, e32_lastpagesize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_lastpagesize
     * }
     */
    public static void e32_lastpagesize(MemorySegment struct, int fieldValue) {
        struct.set(e32_lastpagesize$LAYOUT, e32_lastpagesize$OFFSET, fieldValue);
    }

    private static final OfInt e32_fixupsize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_fixupsize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_fixupsize
     * }
     */
    public static final OfInt e32_fixupsize$layout() {
        return e32_fixupsize$LAYOUT;
    }

    private static final long e32_fixupsize$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_fixupsize
     * }
     */
    public static final long e32_fixupsize$offset() {
        return e32_fixupsize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_fixupsize
     * }
     */
    public static int e32_fixupsize(MemorySegment struct) {
        return struct.get(e32_fixupsize$LAYOUT, e32_fixupsize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_fixupsize
     * }
     */
    public static void e32_fixupsize(MemorySegment struct, int fieldValue) {
        struct.set(e32_fixupsize$LAYOUT, e32_fixupsize$OFFSET, fieldValue);
    }

    private static final OfInt e32_fixupsum$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_fixupsum"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_fixupsum
     * }
     */
    public static final OfInt e32_fixupsum$layout() {
        return e32_fixupsum$LAYOUT;
    }

    private static final long e32_fixupsum$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_fixupsum
     * }
     */
    public static final long e32_fixupsum$offset() {
        return e32_fixupsum$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_fixupsum
     * }
     */
    public static int e32_fixupsum(MemorySegment struct) {
        return struct.get(e32_fixupsum$LAYOUT, e32_fixupsum$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_fixupsum
     * }
     */
    public static void e32_fixupsum(MemorySegment struct, int fieldValue) {
        struct.set(e32_fixupsum$LAYOUT, e32_fixupsum$OFFSET, fieldValue);
    }

    private static final OfInt e32_ldrsize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_ldrsize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_ldrsize
     * }
     */
    public static final OfInt e32_ldrsize$layout() {
        return e32_ldrsize$LAYOUT;
    }

    private static final long e32_ldrsize$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_ldrsize
     * }
     */
    public static final long e32_ldrsize$offset() {
        return e32_ldrsize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_ldrsize
     * }
     */
    public static int e32_ldrsize(MemorySegment struct) {
        return struct.get(e32_ldrsize$LAYOUT, e32_ldrsize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_ldrsize
     * }
     */
    public static void e32_ldrsize(MemorySegment struct, int fieldValue) {
        struct.set(e32_ldrsize$LAYOUT, e32_ldrsize$OFFSET, fieldValue);
    }

    private static final OfInt e32_ldrsum$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_ldrsum"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_ldrsum
     * }
     */
    public static final OfInt e32_ldrsum$layout() {
        return e32_ldrsum$LAYOUT;
    }

    private static final long e32_ldrsum$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_ldrsum
     * }
     */
    public static final long e32_ldrsum$offset() {
        return e32_ldrsum$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_ldrsum
     * }
     */
    public static int e32_ldrsum(MemorySegment struct) {
        return struct.get(e32_ldrsum$LAYOUT, e32_ldrsum$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_ldrsum
     * }
     */
    public static void e32_ldrsum(MemorySegment struct, int fieldValue) {
        struct.set(e32_ldrsum$LAYOUT, e32_ldrsum$OFFSET, fieldValue);
    }

    private static final OfInt e32_objtab$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_objtab"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_objtab
     * }
     */
    public static final OfInt e32_objtab$layout() {
        return e32_objtab$LAYOUT;
    }

    private static final long e32_objtab$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_objtab
     * }
     */
    public static final long e32_objtab$offset() {
        return e32_objtab$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_objtab
     * }
     */
    public static int e32_objtab(MemorySegment struct) {
        return struct.get(e32_objtab$LAYOUT, e32_objtab$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_objtab
     * }
     */
    public static void e32_objtab(MemorySegment struct, int fieldValue) {
        struct.set(e32_objtab$LAYOUT, e32_objtab$OFFSET, fieldValue);
    }

    private static final OfInt e32_objcnt$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_objcnt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_objcnt
     * }
     */
    public static final OfInt e32_objcnt$layout() {
        return e32_objcnt$LAYOUT;
    }

    private static final long e32_objcnt$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_objcnt
     * }
     */
    public static final long e32_objcnt$offset() {
        return e32_objcnt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_objcnt
     * }
     */
    public static int e32_objcnt(MemorySegment struct) {
        return struct.get(e32_objcnt$LAYOUT, e32_objcnt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_objcnt
     * }
     */
    public static void e32_objcnt(MemorySegment struct, int fieldValue) {
        struct.set(e32_objcnt$LAYOUT, e32_objcnt$OFFSET, fieldValue);
    }

    private static final OfInt e32_objmap$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_objmap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_objmap
     * }
     */
    public static final OfInt e32_objmap$layout() {
        return e32_objmap$LAYOUT;
    }

    private static final long e32_objmap$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_objmap
     * }
     */
    public static final long e32_objmap$offset() {
        return e32_objmap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_objmap
     * }
     */
    public static int e32_objmap(MemorySegment struct) {
        return struct.get(e32_objmap$LAYOUT, e32_objmap$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_objmap
     * }
     */
    public static void e32_objmap(MemorySegment struct, int fieldValue) {
        struct.set(e32_objmap$LAYOUT, e32_objmap$OFFSET, fieldValue);
    }

    private static final OfInt e32_itermap$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_itermap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_itermap
     * }
     */
    public static final OfInt e32_itermap$layout() {
        return e32_itermap$LAYOUT;
    }

    private static final long e32_itermap$OFFSET = 76;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_itermap
     * }
     */
    public static final long e32_itermap$offset() {
        return e32_itermap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_itermap
     * }
     */
    public static int e32_itermap(MemorySegment struct) {
        return struct.get(e32_itermap$LAYOUT, e32_itermap$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_itermap
     * }
     */
    public static void e32_itermap(MemorySegment struct, int fieldValue) {
        struct.set(e32_itermap$LAYOUT, e32_itermap$OFFSET, fieldValue);
    }

    private static final OfInt e32_rsrctab$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_rsrctab"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_rsrctab
     * }
     */
    public static final OfInt e32_rsrctab$layout() {
        return e32_rsrctab$LAYOUT;
    }

    private static final long e32_rsrctab$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_rsrctab
     * }
     */
    public static final long e32_rsrctab$offset() {
        return e32_rsrctab$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_rsrctab
     * }
     */
    public static int e32_rsrctab(MemorySegment struct) {
        return struct.get(e32_rsrctab$LAYOUT, e32_rsrctab$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_rsrctab
     * }
     */
    public static void e32_rsrctab(MemorySegment struct, int fieldValue) {
        struct.set(e32_rsrctab$LAYOUT, e32_rsrctab$OFFSET, fieldValue);
    }

    private static final OfInt e32_rsrccnt$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_rsrccnt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_rsrccnt
     * }
     */
    public static final OfInt e32_rsrccnt$layout() {
        return e32_rsrccnt$LAYOUT;
    }

    private static final long e32_rsrccnt$OFFSET = 84;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_rsrccnt
     * }
     */
    public static final long e32_rsrccnt$offset() {
        return e32_rsrccnt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_rsrccnt
     * }
     */
    public static int e32_rsrccnt(MemorySegment struct) {
        return struct.get(e32_rsrccnt$LAYOUT, e32_rsrccnt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_rsrccnt
     * }
     */
    public static void e32_rsrccnt(MemorySegment struct, int fieldValue) {
        struct.set(e32_rsrccnt$LAYOUT, e32_rsrccnt$OFFSET, fieldValue);
    }

    private static final OfInt e32_restab$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_restab"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_restab
     * }
     */
    public static final OfInt e32_restab$layout() {
        return e32_restab$LAYOUT;
    }

    private static final long e32_restab$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_restab
     * }
     */
    public static final long e32_restab$offset() {
        return e32_restab$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_restab
     * }
     */
    public static int e32_restab(MemorySegment struct) {
        return struct.get(e32_restab$LAYOUT, e32_restab$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_restab
     * }
     */
    public static void e32_restab(MemorySegment struct, int fieldValue) {
        struct.set(e32_restab$LAYOUT, e32_restab$OFFSET, fieldValue);
    }

    private static final OfInt e32_enttab$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_enttab"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_enttab
     * }
     */
    public static final OfInt e32_enttab$layout() {
        return e32_enttab$LAYOUT;
    }

    private static final long e32_enttab$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_enttab
     * }
     */
    public static final long e32_enttab$offset() {
        return e32_enttab$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_enttab
     * }
     */
    public static int e32_enttab(MemorySegment struct) {
        return struct.get(e32_enttab$LAYOUT, e32_enttab$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_enttab
     * }
     */
    public static void e32_enttab(MemorySegment struct, int fieldValue) {
        struct.set(e32_enttab$LAYOUT, e32_enttab$OFFSET, fieldValue);
    }

    private static final OfInt e32_dirtab$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_dirtab"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_dirtab
     * }
     */
    public static final OfInt e32_dirtab$layout() {
        return e32_dirtab$LAYOUT;
    }

    private static final long e32_dirtab$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_dirtab
     * }
     */
    public static final long e32_dirtab$offset() {
        return e32_dirtab$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_dirtab
     * }
     */
    public static int e32_dirtab(MemorySegment struct) {
        return struct.get(e32_dirtab$LAYOUT, e32_dirtab$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_dirtab
     * }
     */
    public static void e32_dirtab(MemorySegment struct, int fieldValue) {
        struct.set(e32_dirtab$LAYOUT, e32_dirtab$OFFSET, fieldValue);
    }

    private static final OfInt e32_dircnt$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_dircnt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_dircnt
     * }
     */
    public static final OfInt e32_dircnt$layout() {
        return e32_dircnt$LAYOUT;
    }

    private static final long e32_dircnt$OFFSET = 100;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_dircnt
     * }
     */
    public static final long e32_dircnt$offset() {
        return e32_dircnt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_dircnt
     * }
     */
    public static int e32_dircnt(MemorySegment struct) {
        return struct.get(e32_dircnt$LAYOUT, e32_dircnt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_dircnt
     * }
     */
    public static void e32_dircnt(MemorySegment struct, int fieldValue) {
        struct.set(e32_dircnt$LAYOUT, e32_dircnt$OFFSET, fieldValue);
    }

    private static final OfInt e32_fpagetab$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_fpagetab"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_fpagetab
     * }
     */
    public static final OfInt e32_fpagetab$layout() {
        return e32_fpagetab$LAYOUT;
    }

    private static final long e32_fpagetab$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_fpagetab
     * }
     */
    public static final long e32_fpagetab$offset() {
        return e32_fpagetab$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_fpagetab
     * }
     */
    public static int e32_fpagetab(MemorySegment struct) {
        return struct.get(e32_fpagetab$LAYOUT, e32_fpagetab$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_fpagetab
     * }
     */
    public static void e32_fpagetab(MemorySegment struct, int fieldValue) {
        struct.set(e32_fpagetab$LAYOUT, e32_fpagetab$OFFSET, fieldValue);
    }

    private static final OfInt e32_frectab$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_frectab"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_frectab
     * }
     */
    public static final OfInt e32_frectab$layout() {
        return e32_frectab$LAYOUT;
    }

    private static final long e32_frectab$OFFSET = 108;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_frectab
     * }
     */
    public static final long e32_frectab$offset() {
        return e32_frectab$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_frectab
     * }
     */
    public static int e32_frectab(MemorySegment struct) {
        return struct.get(e32_frectab$LAYOUT, e32_frectab$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_frectab
     * }
     */
    public static void e32_frectab(MemorySegment struct, int fieldValue) {
        struct.set(e32_frectab$LAYOUT, e32_frectab$OFFSET, fieldValue);
    }

    private static final OfInt e32_impmod$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_impmod"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_impmod
     * }
     */
    public static final OfInt e32_impmod$layout() {
        return e32_impmod$LAYOUT;
    }

    private static final long e32_impmod$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_impmod
     * }
     */
    public static final long e32_impmod$offset() {
        return e32_impmod$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_impmod
     * }
     */
    public static int e32_impmod(MemorySegment struct) {
        return struct.get(e32_impmod$LAYOUT, e32_impmod$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_impmod
     * }
     */
    public static void e32_impmod(MemorySegment struct, int fieldValue) {
        struct.set(e32_impmod$LAYOUT, e32_impmod$OFFSET, fieldValue);
    }

    private static final OfInt e32_impmodcnt$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_impmodcnt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_impmodcnt
     * }
     */
    public static final OfInt e32_impmodcnt$layout() {
        return e32_impmodcnt$LAYOUT;
    }

    private static final long e32_impmodcnt$OFFSET = 116;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_impmodcnt
     * }
     */
    public static final long e32_impmodcnt$offset() {
        return e32_impmodcnt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_impmodcnt
     * }
     */
    public static int e32_impmodcnt(MemorySegment struct) {
        return struct.get(e32_impmodcnt$LAYOUT, e32_impmodcnt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_impmodcnt
     * }
     */
    public static void e32_impmodcnt(MemorySegment struct, int fieldValue) {
        struct.set(e32_impmodcnt$LAYOUT, e32_impmodcnt$OFFSET, fieldValue);
    }

    private static final OfInt e32_impproc$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_impproc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_impproc
     * }
     */
    public static final OfInt e32_impproc$layout() {
        return e32_impproc$LAYOUT;
    }

    private static final long e32_impproc$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_impproc
     * }
     */
    public static final long e32_impproc$offset() {
        return e32_impproc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_impproc
     * }
     */
    public static int e32_impproc(MemorySegment struct) {
        return struct.get(e32_impproc$LAYOUT, e32_impproc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_impproc
     * }
     */
    public static void e32_impproc(MemorySegment struct, int fieldValue) {
        struct.set(e32_impproc$LAYOUT, e32_impproc$OFFSET, fieldValue);
    }

    private static final OfInt e32_pagesum$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_pagesum"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_pagesum
     * }
     */
    public static final OfInt e32_pagesum$layout() {
        return e32_pagesum$LAYOUT;
    }

    private static final long e32_pagesum$OFFSET = 124;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_pagesum
     * }
     */
    public static final long e32_pagesum$offset() {
        return e32_pagesum$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_pagesum
     * }
     */
    public static int e32_pagesum(MemorySegment struct) {
        return struct.get(e32_pagesum$LAYOUT, e32_pagesum$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_pagesum
     * }
     */
    public static void e32_pagesum(MemorySegment struct, int fieldValue) {
        struct.set(e32_pagesum$LAYOUT, e32_pagesum$OFFSET, fieldValue);
    }

    private static final OfInt e32_datapage$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_datapage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_datapage
     * }
     */
    public static final OfInt e32_datapage$layout() {
        return e32_datapage$LAYOUT;
    }

    private static final long e32_datapage$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_datapage
     * }
     */
    public static final long e32_datapage$offset() {
        return e32_datapage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_datapage
     * }
     */
    public static int e32_datapage(MemorySegment struct) {
        return struct.get(e32_datapage$LAYOUT, e32_datapage$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_datapage
     * }
     */
    public static void e32_datapage(MemorySegment struct, int fieldValue) {
        struct.set(e32_datapage$LAYOUT, e32_datapage$OFFSET, fieldValue);
    }

    private static final OfInt e32_preload$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_preload"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_preload
     * }
     */
    public static final OfInt e32_preload$layout() {
        return e32_preload$LAYOUT;
    }

    private static final long e32_preload$OFFSET = 132;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_preload
     * }
     */
    public static final long e32_preload$offset() {
        return e32_preload$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_preload
     * }
     */
    public static int e32_preload(MemorySegment struct) {
        return struct.get(e32_preload$LAYOUT, e32_preload$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_preload
     * }
     */
    public static void e32_preload(MemorySegment struct, int fieldValue) {
        struct.set(e32_preload$LAYOUT, e32_preload$OFFSET, fieldValue);
    }

    private static final OfInt e32_nrestab$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_nrestab"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_nrestab
     * }
     */
    public static final OfInt e32_nrestab$layout() {
        return e32_nrestab$LAYOUT;
    }

    private static final long e32_nrestab$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_nrestab
     * }
     */
    public static final long e32_nrestab$offset() {
        return e32_nrestab$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_nrestab
     * }
     */
    public static int e32_nrestab(MemorySegment struct) {
        return struct.get(e32_nrestab$LAYOUT, e32_nrestab$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_nrestab
     * }
     */
    public static void e32_nrestab(MemorySegment struct, int fieldValue) {
        struct.set(e32_nrestab$LAYOUT, e32_nrestab$OFFSET, fieldValue);
    }

    private static final OfInt e32_cbnrestab$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_cbnrestab"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_cbnrestab
     * }
     */
    public static final OfInt e32_cbnrestab$layout() {
        return e32_cbnrestab$LAYOUT;
    }

    private static final long e32_cbnrestab$OFFSET = 140;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_cbnrestab
     * }
     */
    public static final long e32_cbnrestab$offset() {
        return e32_cbnrestab$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_cbnrestab
     * }
     */
    public static int e32_cbnrestab(MemorySegment struct) {
        return struct.get(e32_cbnrestab$LAYOUT, e32_cbnrestab$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_cbnrestab
     * }
     */
    public static void e32_cbnrestab(MemorySegment struct, int fieldValue) {
        struct.set(e32_cbnrestab$LAYOUT, e32_cbnrestab$OFFSET, fieldValue);
    }

    private static final OfInt e32_nressum$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_nressum"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_nressum
     * }
     */
    public static final OfInt e32_nressum$layout() {
        return e32_nressum$LAYOUT;
    }

    private static final long e32_nressum$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_nressum
     * }
     */
    public static final long e32_nressum$offset() {
        return e32_nressum$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_nressum
     * }
     */
    public static int e32_nressum(MemorySegment struct) {
        return struct.get(e32_nressum$LAYOUT, e32_nressum$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_nressum
     * }
     */
    public static void e32_nressum(MemorySegment struct, int fieldValue) {
        struct.set(e32_nressum$LAYOUT, e32_nressum$OFFSET, fieldValue);
    }

    private static final OfInt e32_autodata$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_autodata"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_autodata
     * }
     */
    public static final OfInt e32_autodata$layout() {
        return e32_autodata$LAYOUT;
    }

    private static final long e32_autodata$OFFSET = 148;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_autodata
     * }
     */
    public static final long e32_autodata$offset() {
        return e32_autodata$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_autodata
     * }
     */
    public static int e32_autodata(MemorySegment struct) {
        return struct.get(e32_autodata$LAYOUT, e32_autodata$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_autodata
     * }
     */
    public static void e32_autodata(MemorySegment struct, int fieldValue) {
        struct.set(e32_autodata$LAYOUT, e32_autodata$OFFSET, fieldValue);
    }

    private static final OfInt e32_debuginfo$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_debuginfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_debuginfo
     * }
     */
    public static final OfInt e32_debuginfo$layout() {
        return e32_debuginfo$LAYOUT;
    }

    private static final long e32_debuginfo$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_debuginfo
     * }
     */
    public static final long e32_debuginfo$offset() {
        return e32_debuginfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_debuginfo
     * }
     */
    public static int e32_debuginfo(MemorySegment struct) {
        return struct.get(e32_debuginfo$LAYOUT, e32_debuginfo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_debuginfo
     * }
     */
    public static void e32_debuginfo(MemorySegment struct, int fieldValue) {
        struct.set(e32_debuginfo$LAYOUT, e32_debuginfo$OFFSET, fieldValue);
    }

    private static final OfInt e32_debuglen$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_debuglen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_debuglen
     * }
     */
    public static final OfInt e32_debuglen$layout() {
        return e32_debuglen$LAYOUT;
    }

    private static final long e32_debuglen$OFFSET = 156;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_debuglen
     * }
     */
    public static final long e32_debuglen$offset() {
        return e32_debuglen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_debuglen
     * }
     */
    public static int e32_debuglen(MemorySegment struct) {
        return struct.get(e32_debuglen$LAYOUT, e32_debuglen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_debuglen
     * }
     */
    public static void e32_debuglen(MemorySegment struct, int fieldValue) {
        struct.set(e32_debuglen$LAYOUT, e32_debuglen$OFFSET, fieldValue);
    }

    private static final OfInt e32_instpreload$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_instpreload"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_instpreload
     * }
     */
    public static final OfInt e32_instpreload$layout() {
        return e32_instpreload$LAYOUT;
    }

    private static final long e32_instpreload$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_instpreload
     * }
     */
    public static final long e32_instpreload$offset() {
        return e32_instpreload$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_instpreload
     * }
     */
    public static int e32_instpreload(MemorySegment struct) {
        return struct.get(e32_instpreload$LAYOUT, e32_instpreload$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_instpreload
     * }
     */
    public static void e32_instpreload(MemorySegment struct, int fieldValue) {
        struct.set(e32_instpreload$LAYOUT, e32_instpreload$OFFSET, fieldValue);
    }

    private static final OfInt e32_instdemand$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_instdemand"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_instdemand
     * }
     */
    public static final OfInt e32_instdemand$layout() {
        return e32_instdemand$LAYOUT;
    }

    private static final long e32_instdemand$OFFSET = 164;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_instdemand
     * }
     */
    public static final long e32_instdemand$offset() {
        return e32_instdemand$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_instdemand
     * }
     */
    public static int e32_instdemand(MemorySegment struct) {
        return struct.get(e32_instdemand$LAYOUT, e32_instdemand$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_instdemand
     * }
     */
    public static void e32_instdemand(MemorySegment struct, int fieldValue) {
        struct.set(e32_instdemand$LAYOUT, e32_instdemand$OFFSET, fieldValue);
    }

    private static final OfInt e32_heapsize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_heapsize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_heapsize
     * }
     */
    public static final OfInt e32_heapsize$layout() {
        return e32_heapsize$LAYOUT;
    }

    private static final long e32_heapsize$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_heapsize
     * }
     */
    public static final long e32_heapsize$offset() {
        return e32_heapsize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_heapsize
     * }
     */
    public static int e32_heapsize(MemorySegment struct) {
        return struct.get(e32_heapsize$LAYOUT, e32_heapsize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_heapsize
     * }
     */
    public static void e32_heapsize(MemorySegment struct, int fieldValue) {
        struct.set(e32_heapsize$LAYOUT, e32_heapsize$OFFSET, fieldValue);
    }

    private static final SequenceLayout e32_res3$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("e32_res3"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE e32_res3[12]
     * }
     */
    public static final SequenceLayout e32_res3$layout() {
        return e32_res3$LAYOUT;
    }

    private static final long e32_res3$OFFSET = 172;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE e32_res3[12]
     * }
     */
    public static final long e32_res3$offset() {
        return e32_res3$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE e32_res3[12]
     * }
     */
    public static MemorySegment e32_res3(MemorySegment struct) {
        return struct.asSlice(e32_res3$OFFSET, e32_res3$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE e32_res3[12]
     * }
     */
    public static void e32_res3(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, e32_res3$OFFSET, e32_res3$LAYOUT.byteSize());
    }

    private static long[] e32_res3$DIMS = { 12 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * BYTE e32_res3[12]
     * }
     */
    public static long[] e32_res3$dimensions() {
        return e32_res3$DIMS;
    }
    private static final VarHandle e32_res3$ELEM_HANDLE = e32_res3$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * BYTE e32_res3[12]
     * }
     */
    public static byte e32_res3(MemorySegment struct, long index0) {
        return (byte)e32_res3$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * BYTE e32_res3[12]
     * }
     */
    public static void e32_res3(MemorySegment struct, long index0, byte fieldValue) {
        e32_res3$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt e32_winresoff$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_winresoff"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_winresoff
     * }
     */
    public static final OfInt e32_winresoff$layout() {
        return e32_winresoff$LAYOUT;
    }

    private static final long e32_winresoff$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_winresoff
     * }
     */
    public static final long e32_winresoff$offset() {
        return e32_winresoff$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_winresoff
     * }
     */
    public static int e32_winresoff(MemorySegment struct) {
        return struct.get(e32_winresoff$LAYOUT, e32_winresoff$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_winresoff
     * }
     */
    public static void e32_winresoff(MemorySegment struct, int fieldValue) {
        struct.set(e32_winresoff$LAYOUT, e32_winresoff$OFFSET, fieldValue);
    }

    private static final OfInt e32_winreslen$LAYOUT = (OfInt)$LAYOUT.select(groupElement("e32_winreslen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD e32_winreslen
     * }
     */
    public static final OfInt e32_winreslen$layout() {
        return e32_winreslen$LAYOUT;
    }

    private static final long e32_winreslen$OFFSET = 188;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD e32_winreslen
     * }
     */
    public static final long e32_winreslen$offset() {
        return e32_winreslen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD e32_winreslen
     * }
     */
    public static int e32_winreslen(MemorySegment struct) {
        return struct.get(e32_winreslen$LAYOUT, e32_winreslen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD e32_winreslen
     * }
     */
    public static void e32_winreslen(MemorySegment struct, int fieldValue) {
        struct.set(e32_winreslen$LAYOUT, e32_winreslen$OFFSET, fieldValue);
    }

    private static final OfShort e32_devid$LAYOUT = (OfShort)$LAYOUT.select(groupElement("e32_devid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD e32_devid
     * }
     */
    public static final OfShort e32_devid$layout() {
        return e32_devid$LAYOUT;
    }

    private static final long e32_devid$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD e32_devid
     * }
     */
    public static final long e32_devid$offset() {
        return e32_devid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD e32_devid
     * }
     */
    public static short e32_devid(MemorySegment struct) {
        return struct.get(e32_devid$LAYOUT, e32_devid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD e32_devid
     * }
     */
    public static void e32_devid(MemorySegment struct, short fieldValue) {
        struct.set(e32_devid$LAYOUT, e32_devid$OFFSET, fieldValue);
    }

    private static final OfShort e32_ddkver$LAYOUT = (OfShort)$LAYOUT.select(groupElement("e32_ddkver"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD e32_ddkver
     * }
     */
    public static final OfShort e32_ddkver$layout() {
        return e32_ddkver$LAYOUT;
    }

    private static final long e32_ddkver$OFFSET = 194;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD e32_ddkver
     * }
     */
    public static final long e32_ddkver$offset() {
        return e32_ddkver$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD e32_ddkver
     * }
     */
    public static short e32_ddkver(MemorySegment struct) {
        return struct.get(e32_ddkver$LAYOUT, e32_ddkver$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD e32_ddkver
     * }
     */
    public static void e32_ddkver(MemorySegment struct, short fieldValue) {
        struct.set(e32_ddkver$LAYOUT, e32_ddkver$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

