// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class wgl_h_16 extends wgl_h_17 {

    wgl_h_16() {
        // Should not be called directly
    }

    private static class IID_ISurrogateService$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_ISurrogateService").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISurrogateService
     * }
     */
    public static GroupLayout IID_ISurrogateService$layout() {
        return IID_ISurrogateService$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISurrogateService
     * }
     */
    public static MemorySegment IID_ISurrogateService() {
        return IID_ISurrogateService$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISurrogateService
     * }
     */
    public static void IID_ISurrogateService(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ISurrogateService$constants.SEGMENT, 0L, IID_ISurrogateService$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0089_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0089_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0089_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0089_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0089_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0089_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IInitializeSpy *LPINITIALIZESPY
     * }
     */
    public static final AddressLayout LPINITIALIZESPY = wgl_h.C_POINTER;

    private static class IID_IInitializeSpy$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IInitializeSpy").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInitializeSpy
     * }
     */
    public static GroupLayout IID_IInitializeSpy$layout() {
        return IID_IInitializeSpy$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInitializeSpy
     * }
     */
    public static MemorySegment IID_IInitializeSpy() {
        return IID_IInitializeSpy$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInitializeSpy
     * }
     */
    public static void IID_IInitializeSpy(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInitializeSpy$constants.SEGMENT, 0L, IID_IInitializeSpy$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0090_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0090_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0090_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0090_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0090_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0090_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0090_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0090_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0090_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0090_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0090_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0090_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0090_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0090_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0090_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0090_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0090_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0090_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0090_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0090_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0090_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0090_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0090_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0090_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0090_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0090_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0090_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0090_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0090_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0090_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0090_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0090_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IApartmentShutdown$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IApartmentShutdown").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IApartmentShutdown
     * }
     */
    public static GroupLayout IID_IApartmentShutdown$layout() {
        return IID_IApartmentShutdown$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IApartmentShutdown
     * }
     */
    public static MemorySegment IID_IApartmentShutdown() {
        return IID_IApartmentShutdown$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IApartmentShutdown
     * }
     */
    public static void IID_IApartmentShutdown(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IApartmentShutdown$constants.SEGMENT, 0L, IID_IApartmentShutdown$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0091_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0091_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0091_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_objidl_0000_0091_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0091_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0091_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class ASYNC_STGMEDIUM_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ASYNC_STGMEDIUM_UserSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long ASYNC_STGMEDIUM_UserSize(unsigned long *, unsigned long, ASYNC_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor ASYNC_STGMEDIUM_UserSize$descriptor() {
        return ASYNC_STGMEDIUM_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long ASYNC_STGMEDIUM_UserSize(unsigned long *, unsigned long, ASYNC_STGMEDIUM *)
     * }
     */
    public static MethodHandle ASYNC_STGMEDIUM_UserSize$handle() {
        return ASYNC_STGMEDIUM_UserSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long ASYNC_STGMEDIUM_UserSize(unsigned long *, unsigned long, ASYNC_STGMEDIUM *)
     * }
     */
    public static MemorySegment ASYNC_STGMEDIUM_UserSize$address() {
        return ASYNC_STGMEDIUM_UserSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long ASYNC_STGMEDIUM_UserSize(unsigned long *, unsigned long, ASYNC_STGMEDIUM *)
     * }
     */
    public static int ASYNC_STGMEDIUM_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = ASYNC_STGMEDIUM_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ASYNC_STGMEDIUM_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ASYNC_STGMEDIUM_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ASYNC_STGMEDIUM_UserMarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserMarshal(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor ASYNC_STGMEDIUM_UserMarshal$descriptor() {
        return ASYNC_STGMEDIUM_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserMarshal(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MethodHandle ASYNC_STGMEDIUM_UserMarshal$handle() {
        return ASYNC_STGMEDIUM_UserMarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserMarshal(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MemorySegment ASYNC_STGMEDIUM_UserMarshal$address() {
        return ASYNC_STGMEDIUM_UserMarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserMarshal(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MemorySegment ASYNC_STGMEDIUM_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = ASYNC_STGMEDIUM_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ASYNC_STGMEDIUM_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ASYNC_STGMEDIUM_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ASYNC_STGMEDIUM_UserUnmarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor ASYNC_STGMEDIUM_UserUnmarshal$descriptor() {
        return ASYNC_STGMEDIUM_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MethodHandle ASYNC_STGMEDIUM_UserUnmarshal$handle() {
        return ASYNC_STGMEDIUM_UserUnmarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MemorySegment ASYNC_STGMEDIUM_UserUnmarshal$address() {
        return ASYNC_STGMEDIUM_UserUnmarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MemorySegment ASYNC_STGMEDIUM_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = ASYNC_STGMEDIUM_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ASYNC_STGMEDIUM_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ASYNC_STGMEDIUM_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ASYNC_STGMEDIUM_UserFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ASYNC_STGMEDIUM_UserFree(unsigned long *, ASYNC_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor ASYNC_STGMEDIUM_UserFree$descriptor() {
        return ASYNC_STGMEDIUM_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ASYNC_STGMEDIUM_UserFree(unsigned long *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MethodHandle ASYNC_STGMEDIUM_UserFree$handle() {
        return ASYNC_STGMEDIUM_UserFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ASYNC_STGMEDIUM_UserFree(unsigned long *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MemorySegment ASYNC_STGMEDIUM_UserFree$address() {
        return ASYNC_STGMEDIUM_UserFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ASYNC_STGMEDIUM_UserFree(unsigned long *, ASYNC_STGMEDIUM *)
     * }
     */
    public static void ASYNC_STGMEDIUM_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = ASYNC_STGMEDIUM_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ASYNC_STGMEDIUM_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLIPFORMAT_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CLIPFORMAT_UserSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long CLIPFORMAT_UserSize(unsigned long *, unsigned long, CLIPFORMAT *)
     * }
     */
    public static FunctionDescriptor CLIPFORMAT_UserSize$descriptor() {
        return CLIPFORMAT_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long CLIPFORMAT_UserSize(unsigned long *, unsigned long, CLIPFORMAT *)
     * }
     */
    public static MethodHandle CLIPFORMAT_UserSize$handle() {
        return CLIPFORMAT_UserSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long CLIPFORMAT_UserSize(unsigned long *, unsigned long, CLIPFORMAT *)
     * }
     */
    public static MemorySegment CLIPFORMAT_UserSize$address() {
        return CLIPFORMAT_UserSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long CLIPFORMAT_UserSize(unsigned long *, unsigned long, CLIPFORMAT *)
     * }
     */
    public static int CLIPFORMAT_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = CLIPFORMAT_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLIPFORMAT_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLIPFORMAT_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CLIPFORMAT_UserMarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserMarshal(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static FunctionDescriptor CLIPFORMAT_UserMarshal$descriptor() {
        return CLIPFORMAT_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserMarshal(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static MethodHandle CLIPFORMAT_UserMarshal$handle() {
        return CLIPFORMAT_UserMarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserMarshal(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static MemorySegment CLIPFORMAT_UserMarshal$address() {
        return CLIPFORMAT_UserMarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserMarshal(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static MemorySegment CLIPFORMAT_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = CLIPFORMAT_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLIPFORMAT_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLIPFORMAT_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CLIPFORMAT_UserUnmarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserUnmarshal(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static FunctionDescriptor CLIPFORMAT_UserUnmarshal$descriptor() {
        return CLIPFORMAT_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserUnmarshal(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static MethodHandle CLIPFORMAT_UserUnmarshal$handle() {
        return CLIPFORMAT_UserUnmarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserUnmarshal(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static MemorySegment CLIPFORMAT_UserUnmarshal$address() {
        return CLIPFORMAT_UserUnmarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserUnmarshal(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static MemorySegment CLIPFORMAT_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = CLIPFORMAT_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLIPFORMAT_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLIPFORMAT_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CLIPFORMAT_UserFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void CLIPFORMAT_UserFree(unsigned long *, CLIPFORMAT *)
     * }
     */
    public static FunctionDescriptor CLIPFORMAT_UserFree$descriptor() {
        return CLIPFORMAT_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void CLIPFORMAT_UserFree(unsigned long *, CLIPFORMAT *)
     * }
     */
    public static MethodHandle CLIPFORMAT_UserFree$handle() {
        return CLIPFORMAT_UserFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void CLIPFORMAT_UserFree(unsigned long *, CLIPFORMAT *)
     * }
     */
    public static MemorySegment CLIPFORMAT_UserFree$address() {
        return CLIPFORMAT_UserFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void CLIPFORMAT_UserFree(unsigned long *, CLIPFORMAT *)
     * }
     */
    public static void CLIPFORMAT_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = CLIPFORMAT_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLIPFORMAT_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FLAG_STGMEDIUM_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("FLAG_STGMEDIUM_UserSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long FLAG_STGMEDIUM_UserSize(unsigned long *, unsigned long, FLAG_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor FLAG_STGMEDIUM_UserSize$descriptor() {
        return FLAG_STGMEDIUM_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long FLAG_STGMEDIUM_UserSize(unsigned long *, unsigned long, FLAG_STGMEDIUM *)
     * }
     */
    public static MethodHandle FLAG_STGMEDIUM_UserSize$handle() {
        return FLAG_STGMEDIUM_UserSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long FLAG_STGMEDIUM_UserSize(unsigned long *, unsigned long, FLAG_STGMEDIUM *)
     * }
     */
    public static MemorySegment FLAG_STGMEDIUM_UserSize$address() {
        return FLAG_STGMEDIUM_UserSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long FLAG_STGMEDIUM_UserSize(unsigned long *, unsigned long, FLAG_STGMEDIUM *)
     * }
     */
    public static int FLAG_STGMEDIUM_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = FLAG_STGMEDIUM_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FLAG_STGMEDIUM_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FLAG_STGMEDIUM_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("FLAG_STGMEDIUM_UserMarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserMarshal(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor FLAG_STGMEDIUM_UserMarshal$descriptor() {
        return FLAG_STGMEDIUM_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserMarshal(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static MethodHandle FLAG_STGMEDIUM_UserMarshal$handle() {
        return FLAG_STGMEDIUM_UserMarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserMarshal(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static MemorySegment FLAG_STGMEDIUM_UserMarshal$address() {
        return FLAG_STGMEDIUM_UserMarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserMarshal(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static MemorySegment FLAG_STGMEDIUM_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = FLAG_STGMEDIUM_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FLAG_STGMEDIUM_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FLAG_STGMEDIUM_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("FLAG_STGMEDIUM_UserUnmarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor FLAG_STGMEDIUM_UserUnmarshal$descriptor() {
        return FLAG_STGMEDIUM_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static MethodHandle FLAG_STGMEDIUM_UserUnmarshal$handle() {
        return FLAG_STGMEDIUM_UserUnmarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static MemorySegment FLAG_STGMEDIUM_UserUnmarshal$address() {
        return FLAG_STGMEDIUM_UserUnmarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static MemorySegment FLAG_STGMEDIUM_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = FLAG_STGMEDIUM_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FLAG_STGMEDIUM_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FLAG_STGMEDIUM_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("FLAG_STGMEDIUM_UserFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void FLAG_STGMEDIUM_UserFree(unsigned long *, FLAG_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor FLAG_STGMEDIUM_UserFree$descriptor() {
        return FLAG_STGMEDIUM_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void FLAG_STGMEDIUM_UserFree(unsigned long *, FLAG_STGMEDIUM *)
     * }
     */
    public static MethodHandle FLAG_STGMEDIUM_UserFree$handle() {
        return FLAG_STGMEDIUM_UserFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void FLAG_STGMEDIUM_UserFree(unsigned long *, FLAG_STGMEDIUM *)
     * }
     */
    public static MemorySegment FLAG_STGMEDIUM_UserFree$address() {
        return FLAG_STGMEDIUM_UserFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void FLAG_STGMEDIUM_UserFree(unsigned long *, FLAG_STGMEDIUM *)
     * }
     */
    public static void FLAG_STGMEDIUM_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = FLAG_STGMEDIUM_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FLAG_STGMEDIUM_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HBITMAP_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HBITMAP_UserSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long HBITMAP_UserSize(unsigned long *, unsigned long, HBITMAP *)
     * }
     */
    public static FunctionDescriptor HBITMAP_UserSize$descriptor() {
        return HBITMAP_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long HBITMAP_UserSize(unsigned long *, unsigned long, HBITMAP *)
     * }
     */
    public static MethodHandle HBITMAP_UserSize$handle() {
        return HBITMAP_UserSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long HBITMAP_UserSize(unsigned long *, unsigned long, HBITMAP *)
     * }
     */
    public static MemorySegment HBITMAP_UserSize$address() {
        return HBITMAP_UserSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long HBITMAP_UserSize(unsigned long *, unsigned long, HBITMAP *)
     * }
     */
    public static int HBITMAP_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = HBITMAP_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HBITMAP_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HBITMAP_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HBITMAP_UserMarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserMarshal(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static FunctionDescriptor HBITMAP_UserMarshal$descriptor() {
        return HBITMAP_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserMarshal(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static MethodHandle HBITMAP_UserMarshal$handle() {
        return HBITMAP_UserMarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserMarshal(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static MemorySegment HBITMAP_UserMarshal$address() {
        return HBITMAP_UserMarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserMarshal(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static MemorySegment HBITMAP_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HBITMAP_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HBITMAP_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HBITMAP_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HBITMAP_UserUnmarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserUnmarshal(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static FunctionDescriptor HBITMAP_UserUnmarshal$descriptor() {
        return HBITMAP_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserUnmarshal(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static MethodHandle HBITMAP_UserUnmarshal$handle() {
        return HBITMAP_UserUnmarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserUnmarshal(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static MemorySegment HBITMAP_UserUnmarshal$address() {
        return HBITMAP_UserUnmarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserUnmarshal(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static MemorySegment HBITMAP_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HBITMAP_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HBITMAP_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HBITMAP_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HBITMAP_UserFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void HBITMAP_UserFree(unsigned long *, HBITMAP *)
     * }
     */
    public static FunctionDescriptor HBITMAP_UserFree$descriptor() {
        return HBITMAP_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void HBITMAP_UserFree(unsigned long *, HBITMAP *)
     * }
     */
    public static MethodHandle HBITMAP_UserFree$handle() {
        return HBITMAP_UserFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void HBITMAP_UserFree(unsigned long *, HBITMAP *)
     * }
     */
    public static MemorySegment HBITMAP_UserFree$address() {
        return HBITMAP_UserFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void HBITMAP_UserFree(unsigned long *, HBITMAP *)
     * }
     */
    public static void HBITMAP_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = HBITMAP_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HBITMAP_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HDC_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HDC_UserSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long HDC_UserSize(unsigned long *, unsigned long, HDC *)
     * }
     */
    public static FunctionDescriptor HDC_UserSize$descriptor() {
        return HDC_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long HDC_UserSize(unsigned long *, unsigned long, HDC *)
     * }
     */
    public static MethodHandle HDC_UserSize$handle() {
        return HDC_UserSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long HDC_UserSize(unsigned long *, unsigned long, HDC *)
     * }
     */
    public static MemorySegment HDC_UserSize$address() {
        return HDC_UserSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long HDC_UserSize(unsigned long *, unsigned long, HDC *)
     * }
     */
    public static int HDC_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = HDC_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HDC_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HDC_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HDC_UserMarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HDC_UserMarshal(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static FunctionDescriptor HDC_UserMarshal$descriptor() {
        return HDC_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HDC_UserMarshal(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static MethodHandle HDC_UserMarshal$handle() {
        return HDC_UserMarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HDC_UserMarshal(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static MemorySegment HDC_UserMarshal$address() {
        return HDC_UserMarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HDC_UserMarshal(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static MemorySegment HDC_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HDC_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HDC_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HDC_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HDC_UserUnmarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HDC_UserUnmarshal(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static FunctionDescriptor HDC_UserUnmarshal$descriptor() {
        return HDC_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HDC_UserUnmarshal(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static MethodHandle HDC_UserUnmarshal$handle() {
        return HDC_UserUnmarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HDC_UserUnmarshal(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static MemorySegment HDC_UserUnmarshal$address() {
        return HDC_UserUnmarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HDC_UserUnmarshal(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static MemorySegment HDC_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HDC_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HDC_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HDC_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HDC_UserFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void HDC_UserFree(unsigned long *, HDC *)
     * }
     */
    public static FunctionDescriptor HDC_UserFree$descriptor() {
        return HDC_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void HDC_UserFree(unsigned long *, HDC *)
     * }
     */
    public static MethodHandle HDC_UserFree$handle() {
        return HDC_UserFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void HDC_UserFree(unsigned long *, HDC *)
     * }
     */
    public static MemorySegment HDC_UserFree$address() {
        return HDC_UserFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void HDC_UserFree(unsigned long *, HDC *)
     * }
     */
    public static void HDC_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = HDC_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HDC_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HICON_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HICON_UserSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long HICON_UserSize(unsigned long *, unsigned long, HICON *)
     * }
     */
    public static FunctionDescriptor HICON_UserSize$descriptor() {
        return HICON_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long HICON_UserSize(unsigned long *, unsigned long, HICON *)
     * }
     */
    public static MethodHandle HICON_UserSize$handle() {
        return HICON_UserSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long HICON_UserSize(unsigned long *, unsigned long, HICON *)
     * }
     */
    public static MemorySegment HICON_UserSize$address() {
        return HICON_UserSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long HICON_UserSize(unsigned long *, unsigned long, HICON *)
     * }
     */
    public static int HICON_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = HICON_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HICON_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HICON_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HICON_UserMarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HICON_UserMarshal(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static FunctionDescriptor HICON_UserMarshal$descriptor() {
        return HICON_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HICON_UserMarshal(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static MethodHandle HICON_UserMarshal$handle() {
        return HICON_UserMarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HICON_UserMarshal(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static MemorySegment HICON_UserMarshal$address() {
        return HICON_UserMarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HICON_UserMarshal(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static MemorySegment HICON_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HICON_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HICON_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HICON_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HICON_UserUnmarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HICON_UserUnmarshal(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static FunctionDescriptor HICON_UserUnmarshal$descriptor() {
        return HICON_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HICON_UserUnmarshal(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static MethodHandle HICON_UserUnmarshal$handle() {
        return HICON_UserUnmarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HICON_UserUnmarshal(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static MemorySegment HICON_UserUnmarshal$address() {
        return HICON_UserUnmarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HICON_UserUnmarshal(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static MemorySegment HICON_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HICON_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HICON_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HICON_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HICON_UserFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void HICON_UserFree(unsigned long *, HICON *)
     * }
     */
    public static FunctionDescriptor HICON_UserFree$descriptor() {
        return HICON_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void HICON_UserFree(unsigned long *, HICON *)
     * }
     */
    public static MethodHandle HICON_UserFree$handle() {
        return HICON_UserFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void HICON_UserFree(unsigned long *, HICON *)
     * }
     */
    public static MemorySegment HICON_UserFree$address() {
        return HICON_UserFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void HICON_UserFree(unsigned long *, HICON *)
     * }
     */
    public static void HICON_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = HICON_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HICON_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SNB_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SNB_UserSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long SNB_UserSize(unsigned long *, unsigned long, SNB *)
     * }
     */
    public static FunctionDescriptor SNB_UserSize$descriptor() {
        return SNB_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long SNB_UserSize(unsigned long *, unsigned long, SNB *)
     * }
     */
    public static MethodHandle SNB_UserSize$handle() {
        return SNB_UserSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long SNB_UserSize(unsigned long *, unsigned long, SNB *)
     * }
     */
    public static MemorySegment SNB_UserSize$address() {
        return SNB_UserSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long SNB_UserSize(unsigned long *, unsigned long, SNB *)
     * }
     */
    public static int SNB_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = SNB_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SNB_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SNB_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SNB_UserMarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *SNB_UserMarshal(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static FunctionDescriptor SNB_UserMarshal$descriptor() {
        return SNB_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *SNB_UserMarshal(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static MethodHandle SNB_UserMarshal$handle() {
        return SNB_UserMarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *SNB_UserMarshal(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static MemorySegment SNB_UserMarshal$address() {
        return SNB_UserMarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *SNB_UserMarshal(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static MemorySegment SNB_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = SNB_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SNB_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SNB_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SNB_UserUnmarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *SNB_UserUnmarshal(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static FunctionDescriptor SNB_UserUnmarshal$descriptor() {
        return SNB_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *SNB_UserUnmarshal(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static MethodHandle SNB_UserUnmarshal$handle() {
        return SNB_UserUnmarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *SNB_UserUnmarshal(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static MemorySegment SNB_UserUnmarshal$address() {
        return SNB_UserUnmarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *SNB_UserUnmarshal(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static MemorySegment SNB_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = SNB_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SNB_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SNB_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SNB_UserFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SNB_UserFree(unsigned long *, SNB *)
     * }
     */
    public static FunctionDescriptor SNB_UserFree$descriptor() {
        return SNB_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SNB_UserFree(unsigned long *, SNB *)
     * }
     */
    public static MethodHandle SNB_UserFree$handle() {
        return SNB_UserFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SNB_UserFree(unsigned long *, SNB *)
     * }
     */
    public static MemorySegment SNB_UserFree$address() {
        return SNB_UserFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SNB_UserFree(unsigned long *, SNB *)
     * }
     */
    public static void SNB_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = SNB_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SNB_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class STGMEDIUM_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("STGMEDIUM_UserSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long STGMEDIUM_UserSize(unsigned long *, unsigned long, STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor STGMEDIUM_UserSize$descriptor() {
        return STGMEDIUM_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long STGMEDIUM_UserSize(unsigned long *, unsigned long, STGMEDIUM *)
     * }
     */
    public static MethodHandle STGMEDIUM_UserSize$handle() {
        return STGMEDIUM_UserSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long STGMEDIUM_UserSize(unsigned long *, unsigned long, STGMEDIUM *)
     * }
     */
    public static MemorySegment STGMEDIUM_UserSize$address() {
        return STGMEDIUM_UserSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long STGMEDIUM_UserSize(unsigned long *, unsigned long, STGMEDIUM *)
     * }
     */
    public static int STGMEDIUM_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = STGMEDIUM_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("STGMEDIUM_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class STGMEDIUM_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("STGMEDIUM_UserMarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserMarshal(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor STGMEDIUM_UserMarshal$descriptor() {
        return STGMEDIUM_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserMarshal(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static MethodHandle STGMEDIUM_UserMarshal$handle() {
        return STGMEDIUM_UserMarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserMarshal(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static MemorySegment STGMEDIUM_UserMarshal$address() {
        return STGMEDIUM_UserMarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserMarshal(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static MemorySegment STGMEDIUM_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = STGMEDIUM_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("STGMEDIUM_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class STGMEDIUM_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("STGMEDIUM_UserUnmarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor STGMEDIUM_UserUnmarshal$descriptor() {
        return STGMEDIUM_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static MethodHandle STGMEDIUM_UserUnmarshal$handle() {
        return STGMEDIUM_UserUnmarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static MemorySegment STGMEDIUM_UserUnmarshal$address() {
        return STGMEDIUM_UserUnmarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static MemorySegment STGMEDIUM_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = STGMEDIUM_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("STGMEDIUM_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class STGMEDIUM_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("STGMEDIUM_UserFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void STGMEDIUM_UserFree(unsigned long *, STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor STGMEDIUM_UserFree$descriptor() {
        return STGMEDIUM_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void STGMEDIUM_UserFree(unsigned long *, STGMEDIUM *)
     * }
     */
    public static MethodHandle STGMEDIUM_UserFree$handle() {
        return STGMEDIUM_UserFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void STGMEDIUM_UserFree(unsigned long *, STGMEDIUM *)
     * }
     */
    public static MemorySegment STGMEDIUM_UserFree$address() {
        return STGMEDIUM_UserFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void STGMEDIUM_UserFree(unsigned long *, STGMEDIUM *)
     * }
     */
    public static void STGMEDIUM_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = STGMEDIUM_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("STGMEDIUM_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ASYNC_STGMEDIUM_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ASYNC_STGMEDIUM_UserSize64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long ASYNC_STGMEDIUM_UserSize64(unsigned long *, unsigned long, ASYNC_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor ASYNC_STGMEDIUM_UserSize64$descriptor() {
        return ASYNC_STGMEDIUM_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long ASYNC_STGMEDIUM_UserSize64(unsigned long *, unsigned long, ASYNC_STGMEDIUM *)
     * }
     */
    public static MethodHandle ASYNC_STGMEDIUM_UserSize64$handle() {
        return ASYNC_STGMEDIUM_UserSize64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long ASYNC_STGMEDIUM_UserSize64(unsigned long *, unsigned long, ASYNC_STGMEDIUM *)
     * }
     */
    public static MemorySegment ASYNC_STGMEDIUM_UserSize64$address() {
        return ASYNC_STGMEDIUM_UserSize64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long ASYNC_STGMEDIUM_UserSize64(unsigned long *, unsigned long, ASYNC_STGMEDIUM *)
     * }
     */
    public static int ASYNC_STGMEDIUM_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = ASYNC_STGMEDIUM_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ASYNC_STGMEDIUM_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ASYNC_STGMEDIUM_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ASYNC_STGMEDIUM_UserMarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserMarshal64(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor ASYNC_STGMEDIUM_UserMarshal64$descriptor() {
        return ASYNC_STGMEDIUM_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserMarshal64(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MethodHandle ASYNC_STGMEDIUM_UserMarshal64$handle() {
        return ASYNC_STGMEDIUM_UserMarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserMarshal64(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MemorySegment ASYNC_STGMEDIUM_UserMarshal64$address() {
        return ASYNC_STGMEDIUM_UserMarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserMarshal64(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MemorySegment ASYNC_STGMEDIUM_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = ASYNC_STGMEDIUM_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ASYNC_STGMEDIUM_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ASYNC_STGMEDIUM_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ASYNC_STGMEDIUM_UserUnmarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserUnmarshal64(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor ASYNC_STGMEDIUM_UserUnmarshal64$descriptor() {
        return ASYNC_STGMEDIUM_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserUnmarshal64(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MethodHandle ASYNC_STGMEDIUM_UserUnmarshal64$handle() {
        return ASYNC_STGMEDIUM_UserUnmarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserUnmarshal64(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MemorySegment ASYNC_STGMEDIUM_UserUnmarshal64$address() {
        return ASYNC_STGMEDIUM_UserUnmarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserUnmarshal64(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MemorySegment ASYNC_STGMEDIUM_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = ASYNC_STGMEDIUM_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ASYNC_STGMEDIUM_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ASYNC_STGMEDIUM_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ASYNC_STGMEDIUM_UserFree64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ASYNC_STGMEDIUM_UserFree64(unsigned long *, ASYNC_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor ASYNC_STGMEDIUM_UserFree64$descriptor() {
        return ASYNC_STGMEDIUM_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ASYNC_STGMEDIUM_UserFree64(unsigned long *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MethodHandle ASYNC_STGMEDIUM_UserFree64$handle() {
        return ASYNC_STGMEDIUM_UserFree64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ASYNC_STGMEDIUM_UserFree64(unsigned long *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MemorySegment ASYNC_STGMEDIUM_UserFree64$address() {
        return ASYNC_STGMEDIUM_UserFree64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ASYNC_STGMEDIUM_UserFree64(unsigned long *, ASYNC_STGMEDIUM *)
     * }
     */
    public static void ASYNC_STGMEDIUM_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = ASYNC_STGMEDIUM_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ASYNC_STGMEDIUM_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLIPFORMAT_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CLIPFORMAT_UserSize64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long CLIPFORMAT_UserSize64(unsigned long *, unsigned long, CLIPFORMAT *)
     * }
     */
    public static FunctionDescriptor CLIPFORMAT_UserSize64$descriptor() {
        return CLIPFORMAT_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long CLIPFORMAT_UserSize64(unsigned long *, unsigned long, CLIPFORMAT *)
     * }
     */
    public static MethodHandle CLIPFORMAT_UserSize64$handle() {
        return CLIPFORMAT_UserSize64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long CLIPFORMAT_UserSize64(unsigned long *, unsigned long, CLIPFORMAT *)
     * }
     */
    public static MemorySegment CLIPFORMAT_UserSize64$address() {
        return CLIPFORMAT_UserSize64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long CLIPFORMAT_UserSize64(unsigned long *, unsigned long, CLIPFORMAT *)
     * }
     */
    public static int CLIPFORMAT_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = CLIPFORMAT_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLIPFORMAT_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLIPFORMAT_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CLIPFORMAT_UserMarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserMarshal64(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static FunctionDescriptor CLIPFORMAT_UserMarshal64$descriptor() {
        return CLIPFORMAT_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserMarshal64(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static MethodHandle CLIPFORMAT_UserMarshal64$handle() {
        return CLIPFORMAT_UserMarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserMarshal64(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static MemorySegment CLIPFORMAT_UserMarshal64$address() {
        return CLIPFORMAT_UserMarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserMarshal64(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static MemorySegment CLIPFORMAT_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = CLIPFORMAT_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLIPFORMAT_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLIPFORMAT_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CLIPFORMAT_UserUnmarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserUnmarshal64(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static FunctionDescriptor CLIPFORMAT_UserUnmarshal64$descriptor() {
        return CLIPFORMAT_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserUnmarshal64(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static MethodHandle CLIPFORMAT_UserUnmarshal64$handle() {
        return CLIPFORMAT_UserUnmarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserUnmarshal64(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static MemorySegment CLIPFORMAT_UserUnmarshal64$address() {
        return CLIPFORMAT_UserUnmarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserUnmarshal64(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static MemorySegment CLIPFORMAT_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = CLIPFORMAT_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLIPFORMAT_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLIPFORMAT_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CLIPFORMAT_UserFree64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void CLIPFORMAT_UserFree64(unsigned long *, CLIPFORMAT *)
     * }
     */
    public static FunctionDescriptor CLIPFORMAT_UserFree64$descriptor() {
        return CLIPFORMAT_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void CLIPFORMAT_UserFree64(unsigned long *, CLIPFORMAT *)
     * }
     */
    public static MethodHandle CLIPFORMAT_UserFree64$handle() {
        return CLIPFORMAT_UserFree64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void CLIPFORMAT_UserFree64(unsigned long *, CLIPFORMAT *)
     * }
     */
    public static MemorySegment CLIPFORMAT_UserFree64$address() {
        return CLIPFORMAT_UserFree64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void CLIPFORMAT_UserFree64(unsigned long *, CLIPFORMAT *)
     * }
     */
    public static void CLIPFORMAT_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = CLIPFORMAT_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLIPFORMAT_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FLAG_STGMEDIUM_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("FLAG_STGMEDIUM_UserSize64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long FLAG_STGMEDIUM_UserSize64(unsigned long *, unsigned long, FLAG_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor FLAG_STGMEDIUM_UserSize64$descriptor() {
        return FLAG_STGMEDIUM_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long FLAG_STGMEDIUM_UserSize64(unsigned long *, unsigned long, FLAG_STGMEDIUM *)
     * }
     */
    public static MethodHandle FLAG_STGMEDIUM_UserSize64$handle() {
        return FLAG_STGMEDIUM_UserSize64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long FLAG_STGMEDIUM_UserSize64(unsigned long *, unsigned long, FLAG_STGMEDIUM *)
     * }
     */
    public static MemorySegment FLAG_STGMEDIUM_UserSize64$address() {
        return FLAG_STGMEDIUM_UserSize64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long FLAG_STGMEDIUM_UserSize64(unsigned long *, unsigned long, FLAG_STGMEDIUM *)
     * }
     */
    public static int FLAG_STGMEDIUM_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = FLAG_STGMEDIUM_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FLAG_STGMEDIUM_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FLAG_STGMEDIUM_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("FLAG_STGMEDIUM_UserMarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserMarshal64(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor FLAG_STGMEDIUM_UserMarshal64$descriptor() {
        return FLAG_STGMEDIUM_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserMarshal64(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static MethodHandle FLAG_STGMEDIUM_UserMarshal64$handle() {
        return FLAG_STGMEDIUM_UserMarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserMarshal64(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static MemorySegment FLAG_STGMEDIUM_UserMarshal64$address() {
        return FLAG_STGMEDIUM_UserMarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserMarshal64(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static MemorySegment FLAG_STGMEDIUM_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = FLAG_STGMEDIUM_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FLAG_STGMEDIUM_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FLAG_STGMEDIUM_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("FLAG_STGMEDIUM_UserUnmarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserUnmarshal64(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor FLAG_STGMEDIUM_UserUnmarshal64$descriptor() {
        return FLAG_STGMEDIUM_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserUnmarshal64(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static MethodHandle FLAG_STGMEDIUM_UserUnmarshal64$handle() {
        return FLAG_STGMEDIUM_UserUnmarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserUnmarshal64(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static MemorySegment FLAG_STGMEDIUM_UserUnmarshal64$address() {
        return FLAG_STGMEDIUM_UserUnmarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserUnmarshal64(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static MemorySegment FLAG_STGMEDIUM_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = FLAG_STGMEDIUM_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FLAG_STGMEDIUM_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FLAG_STGMEDIUM_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("FLAG_STGMEDIUM_UserFree64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void FLAG_STGMEDIUM_UserFree64(unsigned long *, FLAG_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor FLAG_STGMEDIUM_UserFree64$descriptor() {
        return FLAG_STGMEDIUM_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void FLAG_STGMEDIUM_UserFree64(unsigned long *, FLAG_STGMEDIUM *)
     * }
     */
    public static MethodHandle FLAG_STGMEDIUM_UserFree64$handle() {
        return FLAG_STGMEDIUM_UserFree64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void FLAG_STGMEDIUM_UserFree64(unsigned long *, FLAG_STGMEDIUM *)
     * }
     */
    public static MemorySegment FLAG_STGMEDIUM_UserFree64$address() {
        return FLAG_STGMEDIUM_UserFree64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void FLAG_STGMEDIUM_UserFree64(unsigned long *, FLAG_STGMEDIUM *)
     * }
     */
    public static void FLAG_STGMEDIUM_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = FLAG_STGMEDIUM_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FLAG_STGMEDIUM_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HBITMAP_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HBITMAP_UserSize64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long HBITMAP_UserSize64(unsigned long *, unsigned long, HBITMAP *)
     * }
     */
    public static FunctionDescriptor HBITMAP_UserSize64$descriptor() {
        return HBITMAP_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long HBITMAP_UserSize64(unsigned long *, unsigned long, HBITMAP *)
     * }
     */
    public static MethodHandle HBITMAP_UserSize64$handle() {
        return HBITMAP_UserSize64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long HBITMAP_UserSize64(unsigned long *, unsigned long, HBITMAP *)
     * }
     */
    public static MemorySegment HBITMAP_UserSize64$address() {
        return HBITMAP_UserSize64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long HBITMAP_UserSize64(unsigned long *, unsigned long, HBITMAP *)
     * }
     */
    public static int HBITMAP_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = HBITMAP_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HBITMAP_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HBITMAP_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HBITMAP_UserMarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserMarshal64(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static FunctionDescriptor HBITMAP_UserMarshal64$descriptor() {
        return HBITMAP_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserMarshal64(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static MethodHandle HBITMAP_UserMarshal64$handle() {
        return HBITMAP_UserMarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserMarshal64(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static MemorySegment HBITMAP_UserMarshal64$address() {
        return HBITMAP_UserMarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserMarshal64(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static MemorySegment HBITMAP_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HBITMAP_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HBITMAP_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HBITMAP_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HBITMAP_UserUnmarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserUnmarshal64(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static FunctionDescriptor HBITMAP_UserUnmarshal64$descriptor() {
        return HBITMAP_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserUnmarshal64(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static MethodHandle HBITMAP_UserUnmarshal64$handle() {
        return HBITMAP_UserUnmarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserUnmarshal64(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static MemorySegment HBITMAP_UserUnmarshal64$address() {
        return HBITMAP_UserUnmarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserUnmarshal64(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static MemorySegment HBITMAP_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HBITMAP_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HBITMAP_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HBITMAP_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HBITMAP_UserFree64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void HBITMAP_UserFree64(unsigned long *, HBITMAP *)
     * }
     */
    public static FunctionDescriptor HBITMAP_UserFree64$descriptor() {
        return HBITMAP_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void HBITMAP_UserFree64(unsigned long *, HBITMAP *)
     * }
     */
    public static MethodHandle HBITMAP_UserFree64$handle() {
        return HBITMAP_UserFree64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void HBITMAP_UserFree64(unsigned long *, HBITMAP *)
     * }
     */
    public static MemorySegment HBITMAP_UserFree64$address() {
        return HBITMAP_UserFree64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void HBITMAP_UserFree64(unsigned long *, HBITMAP *)
     * }
     */
    public static void HBITMAP_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = HBITMAP_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HBITMAP_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HDC_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HDC_UserSize64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long HDC_UserSize64(unsigned long *, unsigned long, HDC *)
     * }
     */
    public static FunctionDescriptor HDC_UserSize64$descriptor() {
        return HDC_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long HDC_UserSize64(unsigned long *, unsigned long, HDC *)
     * }
     */
    public static MethodHandle HDC_UserSize64$handle() {
        return HDC_UserSize64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long HDC_UserSize64(unsigned long *, unsigned long, HDC *)
     * }
     */
    public static MemorySegment HDC_UserSize64$address() {
        return HDC_UserSize64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long HDC_UserSize64(unsigned long *, unsigned long, HDC *)
     * }
     */
    public static int HDC_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = HDC_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HDC_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HDC_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HDC_UserMarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HDC_UserMarshal64(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static FunctionDescriptor HDC_UserMarshal64$descriptor() {
        return HDC_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HDC_UserMarshal64(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static MethodHandle HDC_UserMarshal64$handle() {
        return HDC_UserMarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HDC_UserMarshal64(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static MemorySegment HDC_UserMarshal64$address() {
        return HDC_UserMarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HDC_UserMarshal64(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static MemorySegment HDC_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HDC_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HDC_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HDC_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HDC_UserUnmarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HDC_UserUnmarshal64(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static FunctionDescriptor HDC_UserUnmarshal64$descriptor() {
        return HDC_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HDC_UserUnmarshal64(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static MethodHandle HDC_UserUnmarshal64$handle() {
        return HDC_UserUnmarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HDC_UserUnmarshal64(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static MemorySegment HDC_UserUnmarshal64$address() {
        return HDC_UserUnmarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HDC_UserUnmarshal64(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static MemorySegment HDC_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HDC_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HDC_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HDC_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HDC_UserFree64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void HDC_UserFree64(unsigned long *, HDC *)
     * }
     */
    public static FunctionDescriptor HDC_UserFree64$descriptor() {
        return HDC_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void HDC_UserFree64(unsigned long *, HDC *)
     * }
     */
    public static MethodHandle HDC_UserFree64$handle() {
        return HDC_UserFree64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void HDC_UserFree64(unsigned long *, HDC *)
     * }
     */
    public static MemorySegment HDC_UserFree64$address() {
        return HDC_UserFree64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void HDC_UserFree64(unsigned long *, HDC *)
     * }
     */
    public static void HDC_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = HDC_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HDC_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HICON_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HICON_UserSize64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long HICON_UserSize64(unsigned long *, unsigned long, HICON *)
     * }
     */
    public static FunctionDescriptor HICON_UserSize64$descriptor() {
        return HICON_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long HICON_UserSize64(unsigned long *, unsigned long, HICON *)
     * }
     */
    public static MethodHandle HICON_UserSize64$handle() {
        return HICON_UserSize64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long HICON_UserSize64(unsigned long *, unsigned long, HICON *)
     * }
     */
    public static MemorySegment HICON_UserSize64$address() {
        return HICON_UserSize64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long HICON_UserSize64(unsigned long *, unsigned long, HICON *)
     * }
     */
    public static int HICON_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = HICON_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HICON_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HICON_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HICON_UserMarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HICON_UserMarshal64(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static FunctionDescriptor HICON_UserMarshal64$descriptor() {
        return HICON_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HICON_UserMarshal64(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static MethodHandle HICON_UserMarshal64$handle() {
        return HICON_UserMarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HICON_UserMarshal64(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static MemorySegment HICON_UserMarshal64$address() {
        return HICON_UserMarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HICON_UserMarshal64(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static MemorySegment HICON_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HICON_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HICON_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HICON_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HICON_UserUnmarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HICON_UserUnmarshal64(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static FunctionDescriptor HICON_UserUnmarshal64$descriptor() {
        return HICON_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HICON_UserUnmarshal64(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static MethodHandle HICON_UserUnmarshal64$handle() {
        return HICON_UserUnmarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HICON_UserUnmarshal64(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static MemorySegment HICON_UserUnmarshal64$address() {
        return HICON_UserUnmarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HICON_UserUnmarshal64(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static MemorySegment HICON_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HICON_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HICON_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HICON_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HICON_UserFree64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void HICON_UserFree64(unsigned long *, HICON *)
     * }
     */
    public static FunctionDescriptor HICON_UserFree64$descriptor() {
        return HICON_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void HICON_UserFree64(unsigned long *, HICON *)
     * }
     */
    public static MethodHandle HICON_UserFree64$handle() {
        return HICON_UserFree64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void HICON_UserFree64(unsigned long *, HICON *)
     * }
     */
    public static MemorySegment HICON_UserFree64$address() {
        return HICON_UserFree64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void HICON_UserFree64(unsigned long *, HICON *)
     * }
     */
    public static void HICON_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = HICON_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HICON_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SNB_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SNB_UserSize64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long SNB_UserSize64(unsigned long *, unsigned long, SNB *)
     * }
     */
    public static FunctionDescriptor SNB_UserSize64$descriptor() {
        return SNB_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long SNB_UserSize64(unsigned long *, unsigned long, SNB *)
     * }
     */
    public static MethodHandle SNB_UserSize64$handle() {
        return SNB_UserSize64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long SNB_UserSize64(unsigned long *, unsigned long, SNB *)
     * }
     */
    public static MemorySegment SNB_UserSize64$address() {
        return SNB_UserSize64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long SNB_UserSize64(unsigned long *, unsigned long, SNB *)
     * }
     */
    public static int SNB_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = SNB_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SNB_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SNB_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SNB_UserMarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *SNB_UserMarshal64(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static FunctionDescriptor SNB_UserMarshal64$descriptor() {
        return SNB_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *SNB_UserMarshal64(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static MethodHandle SNB_UserMarshal64$handle() {
        return SNB_UserMarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *SNB_UserMarshal64(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static MemorySegment SNB_UserMarshal64$address() {
        return SNB_UserMarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *SNB_UserMarshal64(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static MemorySegment SNB_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = SNB_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SNB_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SNB_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SNB_UserUnmarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *SNB_UserUnmarshal64(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static FunctionDescriptor SNB_UserUnmarshal64$descriptor() {
        return SNB_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *SNB_UserUnmarshal64(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static MethodHandle SNB_UserUnmarshal64$handle() {
        return SNB_UserUnmarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *SNB_UserUnmarshal64(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static MemorySegment SNB_UserUnmarshal64$address() {
        return SNB_UserUnmarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *SNB_UserUnmarshal64(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static MemorySegment SNB_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = SNB_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SNB_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SNB_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SNB_UserFree64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SNB_UserFree64(unsigned long *, SNB *)
     * }
     */
    public static FunctionDescriptor SNB_UserFree64$descriptor() {
        return SNB_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SNB_UserFree64(unsigned long *, SNB *)
     * }
     */
    public static MethodHandle SNB_UserFree64$handle() {
        return SNB_UserFree64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SNB_UserFree64(unsigned long *, SNB *)
     * }
     */
    public static MemorySegment SNB_UserFree64$address() {
        return SNB_UserFree64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SNB_UserFree64(unsigned long *, SNB *)
     * }
     */
    public static void SNB_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = SNB_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SNB_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class STGMEDIUM_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("STGMEDIUM_UserSize64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long STGMEDIUM_UserSize64(unsigned long *, unsigned long, STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor STGMEDIUM_UserSize64$descriptor() {
        return STGMEDIUM_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long STGMEDIUM_UserSize64(unsigned long *, unsigned long, STGMEDIUM *)
     * }
     */
    public static MethodHandle STGMEDIUM_UserSize64$handle() {
        return STGMEDIUM_UserSize64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long STGMEDIUM_UserSize64(unsigned long *, unsigned long, STGMEDIUM *)
     * }
     */
    public static MemorySegment STGMEDIUM_UserSize64$address() {
        return STGMEDIUM_UserSize64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long STGMEDIUM_UserSize64(unsigned long *, unsigned long, STGMEDIUM *)
     * }
     */
    public static int STGMEDIUM_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = STGMEDIUM_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("STGMEDIUM_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class STGMEDIUM_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("STGMEDIUM_UserMarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserMarshal64(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor STGMEDIUM_UserMarshal64$descriptor() {
        return STGMEDIUM_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserMarshal64(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static MethodHandle STGMEDIUM_UserMarshal64$handle() {
        return STGMEDIUM_UserMarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserMarshal64(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static MemorySegment STGMEDIUM_UserMarshal64$address() {
        return STGMEDIUM_UserMarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserMarshal64(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static MemorySegment STGMEDIUM_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = STGMEDIUM_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("STGMEDIUM_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class STGMEDIUM_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("STGMEDIUM_UserUnmarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserUnmarshal64(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor STGMEDIUM_UserUnmarshal64$descriptor() {
        return STGMEDIUM_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserUnmarshal64(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static MethodHandle STGMEDIUM_UserUnmarshal64$handle() {
        return STGMEDIUM_UserUnmarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserUnmarshal64(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static MemorySegment STGMEDIUM_UserUnmarshal64$address() {
        return STGMEDIUM_UserUnmarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserUnmarshal64(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static MemorySegment STGMEDIUM_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = STGMEDIUM_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("STGMEDIUM_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class STGMEDIUM_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("STGMEDIUM_UserFree64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void STGMEDIUM_UserFree64(unsigned long *, STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor STGMEDIUM_UserFree64$descriptor() {
        return STGMEDIUM_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void STGMEDIUM_UserFree64(unsigned long *, STGMEDIUM *)
     * }
     */
    public static MethodHandle STGMEDIUM_UserFree64$handle() {
        return STGMEDIUM_UserFree64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void STGMEDIUM_UserFree64(unsigned long *, STGMEDIUM *)
     * }
     */
    public static MemorySegment STGMEDIUM_UserFree64$address() {
        return STGMEDIUM_UserFree64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void STGMEDIUM_UserFree64(unsigned long *, STGMEDIUM *)
     * }
     */
    public static void STGMEDIUM_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = STGMEDIUM_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("STGMEDIUM_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindCtx_SetBindOptions_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IBindCtx_SetBindOptions_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_SetBindOptions_Proxy(IBindCtx *This, BIND_OPTS *pbindopts)
     * }
     */
    public static FunctionDescriptor IBindCtx_SetBindOptions_Proxy$descriptor() {
        return IBindCtx_SetBindOptions_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_SetBindOptions_Proxy(IBindCtx *This, BIND_OPTS *pbindopts)
     * }
     */
    public static MethodHandle IBindCtx_SetBindOptions_Proxy$handle() {
        return IBindCtx_SetBindOptions_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_SetBindOptions_Proxy(IBindCtx *This, BIND_OPTS *pbindopts)
     * }
     */
    public static MemorySegment IBindCtx_SetBindOptions_Proxy$address() {
        return IBindCtx_SetBindOptions_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBindCtx_SetBindOptions_Proxy(IBindCtx *This, BIND_OPTS *pbindopts)
     * }
     */
    public static int IBindCtx_SetBindOptions_Proxy(MemorySegment This, MemorySegment pbindopts) {
        var mh$ = IBindCtx_SetBindOptions_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindCtx_SetBindOptions_Proxy", This, pbindopts);
            }
            return (int)mh$.invokeExact(This, pbindopts);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindCtx_SetBindOptions_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IBindCtx_SetBindOptions_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_SetBindOptions_Stub(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static FunctionDescriptor IBindCtx_SetBindOptions_Stub$descriptor() {
        return IBindCtx_SetBindOptions_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_SetBindOptions_Stub(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static MethodHandle IBindCtx_SetBindOptions_Stub$handle() {
        return IBindCtx_SetBindOptions_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_SetBindOptions_Stub(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static MemorySegment IBindCtx_SetBindOptions_Stub$address() {
        return IBindCtx_SetBindOptions_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBindCtx_SetBindOptions_Stub(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static int IBindCtx_SetBindOptions_Stub(MemorySegment This, MemorySegment pbindopts) {
        var mh$ = IBindCtx_SetBindOptions_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindCtx_SetBindOptions_Stub", This, pbindopts);
            }
            return (int)mh$.invokeExact(This, pbindopts);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindCtx_GetBindOptions_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IBindCtx_GetBindOptions_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_GetBindOptions_Proxy(IBindCtx *This, BIND_OPTS *pbindopts)
     * }
     */
    public static FunctionDescriptor IBindCtx_GetBindOptions_Proxy$descriptor() {
        return IBindCtx_GetBindOptions_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_GetBindOptions_Proxy(IBindCtx *This, BIND_OPTS *pbindopts)
     * }
     */
    public static MethodHandle IBindCtx_GetBindOptions_Proxy$handle() {
        return IBindCtx_GetBindOptions_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_GetBindOptions_Proxy(IBindCtx *This, BIND_OPTS *pbindopts)
     * }
     */
    public static MemorySegment IBindCtx_GetBindOptions_Proxy$address() {
        return IBindCtx_GetBindOptions_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBindCtx_GetBindOptions_Proxy(IBindCtx *This, BIND_OPTS *pbindopts)
     * }
     */
    public static int IBindCtx_GetBindOptions_Proxy(MemorySegment This, MemorySegment pbindopts) {
        var mh$ = IBindCtx_GetBindOptions_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindCtx_GetBindOptions_Proxy", This, pbindopts);
            }
            return (int)mh$.invokeExact(This, pbindopts);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindCtx_GetBindOptions_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IBindCtx_GetBindOptions_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_GetBindOptions_Stub(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static FunctionDescriptor IBindCtx_GetBindOptions_Stub$descriptor() {
        return IBindCtx_GetBindOptions_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_GetBindOptions_Stub(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static MethodHandle IBindCtx_GetBindOptions_Stub$handle() {
        return IBindCtx_GetBindOptions_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_GetBindOptions_Stub(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static MemorySegment IBindCtx_GetBindOptions_Stub$address() {
        return IBindCtx_GetBindOptions_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBindCtx_GetBindOptions_Stub(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static int IBindCtx_GetBindOptions_Stub(MemorySegment This, MemorySegment pbindopts) {
        var mh$ = IBindCtx_GetBindOptions_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindCtx_GetBindOptions_Stub", This, pbindopts);
            }
            return (int)mh$.invokeExact(This, pbindopts);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumMoniker_Next_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumMoniker_Next_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumMoniker_Next_Proxy(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumMoniker_Next_Proxy$descriptor() {
        return IEnumMoniker_Next_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumMoniker_Next_Proxy(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumMoniker_Next_Proxy$handle() {
        return IEnumMoniker_Next_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumMoniker_Next_Proxy(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumMoniker_Next_Proxy$address() {
        return IEnumMoniker_Next_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumMoniker_Next_Proxy(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumMoniker_Next_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumMoniker_Next_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumMoniker_Next_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumMoniker_Next_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumMoniker_Next_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumMoniker_Next_Stub(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumMoniker_Next_Stub$descriptor() {
        return IEnumMoniker_Next_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumMoniker_Next_Stub(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumMoniker_Next_Stub$handle() {
        return IEnumMoniker_Next_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumMoniker_Next_Stub(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumMoniker_Next_Stub$address() {
        return IEnumMoniker_Next_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumMoniker_Next_Stub(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumMoniker_Next_Stub(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumMoniker_Next_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumMoniker_Next_Stub", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IRunnableObject_IsRunning_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IRunnableObject_IsRunning_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL IRunnableObject_IsRunning_Proxy(IRunnableObject *This)
     * }
     */
    public static FunctionDescriptor IRunnableObject_IsRunning_Proxy$descriptor() {
        return IRunnableObject_IsRunning_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL IRunnableObject_IsRunning_Proxy(IRunnableObject *This)
     * }
     */
    public static MethodHandle IRunnableObject_IsRunning_Proxy$handle() {
        return IRunnableObject_IsRunning_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL IRunnableObject_IsRunning_Proxy(IRunnableObject *This)
     * }
     */
    public static MemorySegment IRunnableObject_IsRunning_Proxy$address() {
        return IRunnableObject_IsRunning_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL IRunnableObject_IsRunning_Proxy(IRunnableObject *This)
     * }
     */
    public static int IRunnableObject_IsRunning_Proxy(MemorySegment This) {
        var mh$ = IRunnableObject_IsRunning_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IRunnableObject_IsRunning_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IRunnableObject_IsRunning_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IRunnableObject_IsRunning_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IRunnableObject_IsRunning_Stub(IRunnableObject *This)
     * }
     */
    public static FunctionDescriptor IRunnableObject_IsRunning_Stub$descriptor() {
        return IRunnableObject_IsRunning_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IRunnableObject_IsRunning_Stub(IRunnableObject *This)
     * }
     */
    public static MethodHandle IRunnableObject_IsRunning_Stub$handle() {
        return IRunnableObject_IsRunning_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IRunnableObject_IsRunning_Stub(IRunnableObject *This)
     * }
     */
    public static MemorySegment IRunnableObject_IsRunning_Stub$address() {
        return IRunnableObject_IsRunning_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IRunnableObject_IsRunning_Stub(IRunnableObject *This)
     * }
     */
    public static int IRunnableObject_IsRunning_Stub(MemorySegment This) {
        var mh$ = IRunnableObject_IsRunning_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IRunnableObject_IsRunning_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IMoniker_BindToObject_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IMoniker_BindToObject_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToObject_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riidResult, void **ppvResult)
     * }
     */
    public static FunctionDescriptor IMoniker_BindToObject_Proxy$descriptor() {
        return IMoniker_BindToObject_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToObject_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riidResult, void **ppvResult)
     * }
     */
    public static MethodHandle IMoniker_BindToObject_Proxy$handle() {
        return IMoniker_BindToObject_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToObject_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riidResult, void **ppvResult)
     * }
     */
    public static MemorySegment IMoniker_BindToObject_Proxy$address() {
        return IMoniker_BindToObject_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToObject_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riidResult, void **ppvResult)
     * }
     */
    public static int IMoniker_BindToObject_Proxy(MemorySegment This, MemorySegment pbc, MemorySegment pmkToLeft, MemorySegment riidResult, MemorySegment ppvResult) {
        var mh$ = IMoniker_BindToObject_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IMoniker_BindToObject_Proxy", This, pbc, pmkToLeft, riidResult, ppvResult);
            }
            return (int)mh$.invokeExact(This, pbc, pmkToLeft, riidResult, ppvResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IMoniker_BindToObject_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IMoniker_BindToObject_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToObject_Stub(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riidResult, IUnknown **ppvResult)
     * }
     */
    public static FunctionDescriptor IMoniker_BindToObject_Stub$descriptor() {
        return IMoniker_BindToObject_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToObject_Stub(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riidResult, IUnknown **ppvResult)
     * }
     */
    public static MethodHandle IMoniker_BindToObject_Stub$handle() {
        return IMoniker_BindToObject_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToObject_Stub(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riidResult, IUnknown **ppvResult)
     * }
     */
    public static MemorySegment IMoniker_BindToObject_Stub$address() {
        return IMoniker_BindToObject_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToObject_Stub(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riidResult, IUnknown **ppvResult)
     * }
     */
    public static int IMoniker_BindToObject_Stub(MemorySegment This, MemorySegment pbc, MemorySegment pmkToLeft, MemorySegment riidResult, MemorySegment ppvResult) {
        var mh$ = IMoniker_BindToObject_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IMoniker_BindToObject_Stub", This, pbc, pmkToLeft, riidResult, ppvResult);
            }
            return (int)mh$.invokeExact(This, pbc, pmkToLeft, riidResult, ppvResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IMoniker_BindToStorage_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IMoniker_BindToStorage_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToStorage_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riid, void **ppvObj)
     * }
     */
    public static FunctionDescriptor IMoniker_BindToStorage_Proxy$descriptor() {
        return IMoniker_BindToStorage_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToStorage_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riid, void **ppvObj)
     * }
     */
    public static MethodHandle IMoniker_BindToStorage_Proxy$handle() {
        return IMoniker_BindToStorage_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToStorage_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riid, void **ppvObj)
     * }
     */
    public static MemorySegment IMoniker_BindToStorage_Proxy$address() {
        return IMoniker_BindToStorage_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToStorage_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riid, void **ppvObj)
     * }
     */
    public static int IMoniker_BindToStorage_Proxy(MemorySegment This, MemorySegment pbc, MemorySegment pmkToLeft, MemorySegment riid, MemorySegment ppvObj) {
        var mh$ = IMoniker_BindToStorage_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IMoniker_BindToStorage_Proxy", This, pbc, pmkToLeft, riid, ppvObj);
            }
            return (int)mh$.invokeExact(This, pbc, pmkToLeft, riid, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IMoniker_BindToStorage_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IMoniker_BindToStorage_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToStorage_Stub(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static FunctionDescriptor IMoniker_BindToStorage_Stub$descriptor() {
        return IMoniker_BindToStorage_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToStorage_Stub(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static MethodHandle IMoniker_BindToStorage_Stub$handle() {
        return IMoniker_BindToStorage_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToStorage_Stub(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static MemorySegment IMoniker_BindToStorage_Stub$address() {
        return IMoniker_BindToStorage_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToStorage_Stub(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static int IMoniker_BindToStorage_Stub(MemorySegment This, MemorySegment pbc, MemorySegment pmkToLeft, MemorySegment riid, MemorySegment ppvObj) {
        var mh$ = IMoniker_BindToStorage_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IMoniker_BindToStorage_Stub", This, pbc, pmkToLeft, riid, ppvObj);
            }
            return (int)mh$.invokeExact(This, pbc, pmkToLeft, riid, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumSTATSTG_Next_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumSTATSTG_Next_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATSTG_Next_Proxy(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumSTATSTG_Next_Proxy$descriptor() {
        return IEnumSTATSTG_Next_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATSTG_Next_Proxy(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumSTATSTG_Next_Proxy$handle() {
        return IEnumSTATSTG_Next_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATSTG_Next_Proxy(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumSTATSTG_Next_Proxy$address() {
        return IEnumSTATSTG_Next_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumSTATSTG_Next_Proxy(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumSTATSTG_Next_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumSTATSTG_Next_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATSTG_Next_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumSTATSTG_Next_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumSTATSTG_Next_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATSTG_Next_Stub(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumSTATSTG_Next_Stub$descriptor() {
        return IEnumSTATSTG_Next_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATSTG_Next_Stub(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumSTATSTG_Next_Stub$handle() {
        return IEnumSTATSTG_Next_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATSTG_Next_Stub(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumSTATSTG_Next_Stub$address() {
        return IEnumSTATSTG_Next_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumSTATSTG_Next_Stub(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumSTATSTG_Next_Stub(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumSTATSTG_Next_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATSTG_Next_Stub", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStorage_OpenStream_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IStorage_OpenStream_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStorage_OpenStream_Proxy(IStorage *This, const OLECHAR *pwcsName, void *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm)
     * }
     */
    public static FunctionDescriptor IStorage_OpenStream_Proxy$descriptor() {
        return IStorage_OpenStream_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStorage_OpenStream_Proxy(IStorage *This, const OLECHAR *pwcsName, void *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm)
     * }
     */
    public static MethodHandle IStorage_OpenStream_Proxy$handle() {
        return IStorage_OpenStream_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IStorage_OpenStream_Proxy(IStorage *This, const OLECHAR *pwcsName, void *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm)
     * }
     */
    public static MemorySegment IStorage_OpenStream_Proxy$address() {
        return IStorage_OpenStream_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IStorage_OpenStream_Proxy(IStorage *This, const OLECHAR *pwcsName, void *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm)
     * }
     */
    public static int IStorage_OpenStream_Proxy(MemorySegment This, MemorySegment pwcsName, MemorySegment reserved1, int grfMode, int reserved2, MemorySegment ppstm) {
        var mh$ = IStorage_OpenStream_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStorage_OpenStream_Proxy", This, pwcsName, reserved1, grfMode, reserved2, ppstm);
            }
            return (int)mh$.invokeExact(This, pwcsName, reserved1, grfMode, reserved2, ppstm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStorage_OpenStream_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IStorage_OpenStream_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStorage_OpenStream_Stub(IStorage *This, const OLECHAR *pwcsName, ULONG cbReserved1, byte *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm)
     * }
     */
    public static FunctionDescriptor IStorage_OpenStream_Stub$descriptor() {
        return IStorage_OpenStream_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStorage_OpenStream_Stub(IStorage *This, const OLECHAR *pwcsName, ULONG cbReserved1, byte *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm)
     * }
     */
    public static MethodHandle IStorage_OpenStream_Stub$handle() {
        return IStorage_OpenStream_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IStorage_OpenStream_Stub(IStorage *This, const OLECHAR *pwcsName, ULONG cbReserved1, byte *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm)
     * }
     */
    public static MemorySegment IStorage_OpenStream_Stub$address() {
        return IStorage_OpenStream_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IStorage_OpenStream_Stub(IStorage *This, const OLECHAR *pwcsName, ULONG cbReserved1, byte *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm)
     * }
     */
    public static int IStorage_OpenStream_Stub(MemorySegment This, MemorySegment pwcsName, int cbReserved1, MemorySegment reserved1, int grfMode, int reserved2, MemorySegment ppstm) {
        var mh$ = IStorage_OpenStream_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStorage_OpenStream_Stub", This, pwcsName, cbReserved1, reserved1, grfMode, reserved2, ppstm);
            }
            return (int)mh$.invokeExact(This, pwcsName, cbReserved1, reserved1, grfMode, reserved2, ppstm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStorage_CopyTo_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IStorage_CopyTo_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStorage_CopyTo_Proxy(IStorage *This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest)
     * }
     */
    public static FunctionDescriptor IStorage_CopyTo_Proxy$descriptor() {
        return IStorage_CopyTo_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStorage_CopyTo_Proxy(IStorage *This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest)
     * }
     */
    public static MethodHandle IStorage_CopyTo_Proxy$handle() {
        return IStorage_CopyTo_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IStorage_CopyTo_Proxy(IStorage *This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest)
     * }
     */
    public static MemorySegment IStorage_CopyTo_Proxy$address() {
        return IStorage_CopyTo_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IStorage_CopyTo_Proxy(IStorage *This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest)
     * }
     */
    public static int IStorage_CopyTo_Proxy(MemorySegment This, int ciidExclude, MemorySegment rgiidExclude, MemorySegment snbExclude, MemorySegment pstgDest) {
        var mh$ = IStorage_CopyTo_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStorage_CopyTo_Proxy", This, ciidExclude, rgiidExclude, snbExclude, pstgDest);
            }
            return (int)mh$.invokeExact(This, ciidExclude, rgiidExclude, snbExclude, pstgDest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStorage_CopyTo_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IStorage_CopyTo_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStorage_CopyTo_Stub(IStorage *This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest)
     * }
     */
    public static FunctionDescriptor IStorage_CopyTo_Stub$descriptor() {
        return IStorage_CopyTo_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStorage_CopyTo_Stub(IStorage *This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest)
     * }
     */
    public static MethodHandle IStorage_CopyTo_Stub$handle() {
        return IStorage_CopyTo_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IStorage_CopyTo_Stub(IStorage *This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest)
     * }
     */
    public static MemorySegment IStorage_CopyTo_Stub$address() {
        return IStorage_CopyTo_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IStorage_CopyTo_Stub(IStorage *This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest)
     * }
     */
    public static int IStorage_CopyTo_Stub(MemorySegment This, int ciidExclude, MemorySegment rgiidExclude, MemorySegment snbExclude, MemorySegment pstgDest) {
        var mh$ = IStorage_CopyTo_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStorage_CopyTo_Stub", This, ciidExclude, rgiidExclude, snbExclude, pstgDest);
            }
            return (int)mh$.invokeExact(This, ciidExclude, rgiidExclude, snbExclude, pstgDest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStorage_EnumElements_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IStorage_EnumElements_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStorage_EnumElements_Proxy(IStorage *This, DWORD reserved1, void *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum)
     * }
     */
    public static FunctionDescriptor IStorage_EnumElements_Proxy$descriptor() {
        return IStorage_EnumElements_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStorage_EnumElements_Proxy(IStorage *This, DWORD reserved1, void *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum)
     * }
     */
    public static MethodHandle IStorage_EnumElements_Proxy$handle() {
        return IStorage_EnumElements_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IStorage_EnumElements_Proxy(IStorage *This, DWORD reserved1, void *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum)
     * }
     */
    public static MemorySegment IStorage_EnumElements_Proxy$address() {
        return IStorage_EnumElements_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IStorage_EnumElements_Proxy(IStorage *This, DWORD reserved1, void *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum)
     * }
     */
    public static int IStorage_EnumElements_Proxy(MemorySegment This, int reserved1, MemorySegment reserved2, int reserved3, MemorySegment ppenum) {
        var mh$ = IStorage_EnumElements_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStorage_EnumElements_Proxy", This, reserved1, reserved2, reserved3, ppenum);
            }
            return (int)mh$.invokeExact(This, reserved1, reserved2, reserved3, ppenum);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStorage_EnumElements_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IStorage_EnumElements_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStorage_EnumElements_Stub(IStorage *This, DWORD reserved1, ULONG cbReserved2, byte *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum)
     * }
     */
    public static FunctionDescriptor IStorage_EnumElements_Stub$descriptor() {
        return IStorage_EnumElements_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStorage_EnumElements_Stub(IStorage *This, DWORD reserved1, ULONG cbReserved2, byte *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum)
     * }
     */
    public static MethodHandle IStorage_EnumElements_Stub$handle() {
        return IStorage_EnumElements_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IStorage_EnumElements_Stub(IStorage *This, DWORD reserved1, ULONG cbReserved2, byte *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum)
     * }
     */
    public static MemorySegment IStorage_EnumElements_Stub$address() {
        return IStorage_EnumElements_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IStorage_EnumElements_Stub(IStorage *This, DWORD reserved1, ULONG cbReserved2, byte *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum)
     * }
     */
    public static int IStorage_EnumElements_Stub(MemorySegment This, int reserved1, int cbReserved2, MemorySegment reserved2, int reserved3, MemorySegment ppenum) {
        var mh$ = IStorage_EnumElements_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStorage_EnumElements_Stub", This, reserved1, cbReserved2, reserved2, reserved3, ppenum);
            }
            return (int)mh$.invokeExact(This, reserved1, cbReserved2, reserved2, reserved3, ppenum);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ILockBytes_ReadAt_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            _ULARGE_INTEGER.layout(),
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ILockBytes_ReadAt_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_ReadAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, void *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static FunctionDescriptor ILockBytes_ReadAt_Proxy$descriptor() {
        return ILockBytes_ReadAt_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_ReadAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, void *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static MethodHandle ILockBytes_ReadAt_Proxy$handle() {
        return ILockBytes_ReadAt_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_ReadAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, void *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static MemorySegment ILockBytes_ReadAt_Proxy$address() {
        return ILockBytes_ReadAt_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ILockBytes_ReadAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, void *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static int ILockBytes_ReadAt_Proxy(MemorySegment This, MemorySegment ulOffset, MemorySegment pv, int cb, MemorySegment pcbRead) {
        var mh$ = ILockBytes_ReadAt_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ILockBytes_ReadAt_Proxy", This, ulOffset, pv, cb, pcbRead);
            }
            return (int)mh$.invokeExact(This, ulOffset, pv, cb, pcbRead);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ILockBytes_ReadAt_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            _ULARGE_INTEGER.layout(),
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ILockBytes_ReadAt_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_ReadAt_Stub(ILockBytes *This, ULARGE_INTEGER ulOffset, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static FunctionDescriptor ILockBytes_ReadAt_Stub$descriptor() {
        return ILockBytes_ReadAt_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_ReadAt_Stub(ILockBytes *This, ULARGE_INTEGER ulOffset, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static MethodHandle ILockBytes_ReadAt_Stub$handle() {
        return ILockBytes_ReadAt_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_ReadAt_Stub(ILockBytes *This, ULARGE_INTEGER ulOffset, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static MemorySegment ILockBytes_ReadAt_Stub$address() {
        return ILockBytes_ReadAt_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ILockBytes_ReadAt_Stub(ILockBytes *This, ULARGE_INTEGER ulOffset, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static int ILockBytes_ReadAt_Stub(MemorySegment This, MemorySegment ulOffset, MemorySegment pv, int cb, MemorySegment pcbRead) {
        var mh$ = ILockBytes_ReadAt_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ILockBytes_ReadAt_Stub", This, ulOffset, pv, cb, pcbRead);
            }
            return (int)mh$.invokeExact(This, ulOffset, pv, cb, pcbRead);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ILockBytes_WriteAt_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            _ULARGE_INTEGER.layout(),
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ILockBytes_WriteAt_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_WriteAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static FunctionDescriptor ILockBytes_WriteAt_Proxy$descriptor() {
        return ILockBytes_WriteAt_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_WriteAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MethodHandle ILockBytes_WriteAt_Proxy$handle() {
        return ILockBytes_WriteAt_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_WriteAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MemorySegment ILockBytes_WriteAt_Proxy$address() {
        return ILockBytes_WriteAt_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ILockBytes_WriteAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static int ILockBytes_WriteAt_Proxy(MemorySegment This, MemorySegment ulOffset, MemorySegment pv, int cb, MemorySegment pcbWritten) {
        var mh$ = ILockBytes_WriteAt_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ILockBytes_WriteAt_Proxy", This, ulOffset, pv, cb, pcbWritten);
            }
            return (int)mh$.invokeExact(This, ulOffset, pv, cb, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ILockBytes_WriteAt_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            _ULARGE_INTEGER.layout(),
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ILockBytes_WriteAt_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_WriteAt_Stub(ILockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static FunctionDescriptor ILockBytes_WriteAt_Stub$descriptor() {
        return ILockBytes_WriteAt_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_WriteAt_Stub(ILockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MethodHandle ILockBytes_WriteAt_Stub$handle() {
        return ILockBytes_WriteAt_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_WriteAt_Stub(ILockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MemorySegment ILockBytes_WriteAt_Stub$address() {
        return ILockBytes_WriteAt_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ILockBytes_WriteAt_Stub(ILockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static int ILockBytes_WriteAt_Stub(MemorySegment This, MemorySegment ulOffset, MemorySegment pv, int cb, MemorySegment pcbWritten) {
        var mh$ = ILockBytes_WriteAt_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ILockBytes_WriteAt_Stub", This, ulOffset, pv, cb, pcbWritten);
            }
            return (int)mh$.invokeExact(This, ulOffset, pv, cb, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumFORMATETC_Next_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumFORMATETC_Next_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumFORMATETC_Next_Proxy(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumFORMATETC_Next_Proxy$descriptor() {
        return IEnumFORMATETC_Next_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumFORMATETC_Next_Proxy(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumFORMATETC_Next_Proxy$handle() {
        return IEnumFORMATETC_Next_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumFORMATETC_Next_Proxy(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumFORMATETC_Next_Proxy$address() {
        return IEnumFORMATETC_Next_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumFORMATETC_Next_Proxy(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumFORMATETC_Next_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumFORMATETC_Next_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumFORMATETC_Next_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumFORMATETC_Next_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumFORMATETC_Next_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumFORMATETC_Next_Stub(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumFORMATETC_Next_Stub$descriptor() {
        return IEnumFORMATETC_Next_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumFORMATETC_Next_Stub(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumFORMATETC_Next_Stub$handle() {
        return IEnumFORMATETC_Next_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumFORMATETC_Next_Stub(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumFORMATETC_Next_Stub$address() {
        return IEnumFORMATETC_Next_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumFORMATETC_Next_Stub(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumFORMATETC_Next_Stub(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumFORMATETC_Next_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumFORMATETC_Next_Stub", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumSTATDATA_Next_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumSTATDATA_Next_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATDATA_Next_Proxy(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumSTATDATA_Next_Proxy$descriptor() {
        return IEnumSTATDATA_Next_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATDATA_Next_Proxy(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumSTATDATA_Next_Proxy$handle() {
        return IEnumSTATDATA_Next_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATDATA_Next_Proxy(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumSTATDATA_Next_Proxy$address() {
        return IEnumSTATDATA_Next_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumSTATDATA_Next_Proxy(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumSTATDATA_Next_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumSTATDATA_Next_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATDATA_Next_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumSTATDATA_Next_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumSTATDATA_Next_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATDATA_Next_Stub(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumSTATDATA_Next_Stub$descriptor() {
        return IEnumSTATDATA_Next_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATDATA_Next_Stub(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumSTATDATA_Next_Stub$handle() {
        return IEnumSTATDATA_Next_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATDATA_Next_Stub(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumSTATDATA_Next_Stub$address() {
        return IEnumSTATDATA_Next_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumSTATDATA_Next_Stub(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumSTATDATA_Next_Stub(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumSTATDATA_Next_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATDATA_Next_Stub", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_OnDataChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IAdviseSink_OnDataChange_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IAdviseSink_OnDataChange_Proxy(IAdviseSink *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed)
     * }
     */
    public static FunctionDescriptor IAdviseSink_OnDataChange_Proxy$descriptor() {
        return IAdviseSink_OnDataChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IAdviseSink_OnDataChange_Proxy(IAdviseSink *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed)
     * }
     */
    public static MethodHandle IAdviseSink_OnDataChange_Proxy$handle() {
        return IAdviseSink_OnDataChange_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IAdviseSink_OnDataChange_Proxy(IAdviseSink *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed)
     * }
     */
    public static MemorySegment IAdviseSink_OnDataChange_Proxy$address() {
        return IAdviseSink_OnDataChange_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IAdviseSink_OnDataChange_Proxy(IAdviseSink *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed)
     * }
     */
    public static void IAdviseSink_OnDataChange_Proxy(MemorySegment This, MemorySegment pFormatetc, MemorySegment pStgmed) {
        var mh$ = IAdviseSink_OnDataChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_OnDataChange_Proxy", This, pFormatetc, pStgmed);
            }
            mh$.invokeExact(This, pFormatetc, pStgmed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_OnDataChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IAdviseSink_OnDataChange_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnDataChange_Stub(IAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static FunctionDescriptor IAdviseSink_OnDataChange_Stub$descriptor() {
        return IAdviseSink_OnDataChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnDataChange_Stub(IAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static MethodHandle IAdviseSink_OnDataChange_Stub$handle() {
        return IAdviseSink_OnDataChange_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnDataChange_Stub(IAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static MemorySegment IAdviseSink_OnDataChange_Stub$address() {
        return IAdviseSink_OnDataChange_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnDataChange_Stub(IAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static int IAdviseSink_OnDataChange_Stub(MemorySegment This, MemorySegment pFormatetc, MemorySegment pStgmed) {
        var mh$ = IAdviseSink_OnDataChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_OnDataChange_Stub", This, pFormatetc, pStgmed);
            }
            return (int)mh$.invokeExact(This, pFormatetc, pStgmed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_OnViewChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IAdviseSink_OnViewChange_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IAdviseSink_OnViewChange_Proxy(IAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static FunctionDescriptor IAdviseSink_OnViewChange_Proxy$descriptor() {
        return IAdviseSink_OnViewChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IAdviseSink_OnViewChange_Proxy(IAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static MethodHandle IAdviseSink_OnViewChange_Proxy$handle() {
        return IAdviseSink_OnViewChange_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IAdviseSink_OnViewChange_Proxy(IAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static MemorySegment IAdviseSink_OnViewChange_Proxy$address() {
        return IAdviseSink_OnViewChange_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IAdviseSink_OnViewChange_Proxy(IAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static void IAdviseSink_OnViewChange_Proxy(MemorySegment This, int dwAspect, int lindex) {
        var mh$ = IAdviseSink_OnViewChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_OnViewChange_Proxy", This, dwAspect, lindex);
            }
            mh$.invokeExact(This, dwAspect, lindex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_OnViewChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IAdviseSink_OnViewChange_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnViewChange_Stub(IAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static FunctionDescriptor IAdviseSink_OnViewChange_Stub$descriptor() {
        return IAdviseSink_OnViewChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnViewChange_Stub(IAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static MethodHandle IAdviseSink_OnViewChange_Stub$handle() {
        return IAdviseSink_OnViewChange_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnViewChange_Stub(IAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static MemorySegment IAdviseSink_OnViewChange_Stub$address() {
        return IAdviseSink_OnViewChange_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnViewChange_Stub(IAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static int IAdviseSink_OnViewChange_Stub(MemorySegment This, int dwAspect, int lindex) {
        var mh$ = IAdviseSink_OnViewChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_OnViewChange_Stub", This, dwAspect, lindex);
            }
            return (int)mh$.invokeExact(This, dwAspect, lindex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_OnRename_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IAdviseSink_OnRename_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IAdviseSink_OnRename_Proxy(IAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor IAdviseSink_OnRename_Proxy$descriptor() {
        return IAdviseSink_OnRename_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IAdviseSink_OnRename_Proxy(IAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static MethodHandle IAdviseSink_OnRename_Proxy$handle() {
        return IAdviseSink_OnRename_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IAdviseSink_OnRename_Proxy(IAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static MemorySegment IAdviseSink_OnRename_Proxy$address() {
        return IAdviseSink_OnRename_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IAdviseSink_OnRename_Proxy(IAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static void IAdviseSink_OnRename_Proxy(MemorySegment This, MemorySegment pmk) {
        var mh$ = IAdviseSink_OnRename_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_OnRename_Proxy", This, pmk);
            }
            mh$.invokeExact(This, pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_OnRename_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IAdviseSink_OnRename_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnRename_Stub(IAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor IAdviseSink_OnRename_Stub$descriptor() {
        return IAdviseSink_OnRename_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnRename_Stub(IAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static MethodHandle IAdviseSink_OnRename_Stub$handle() {
        return IAdviseSink_OnRename_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnRename_Stub(IAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static MemorySegment IAdviseSink_OnRename_Stub$address() {
        return IAdviseSink_OnRename_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnRename_Stub(IAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static int IAdviseSink_OnRename_Stub(MemorySegment This, MemorySegment pmk) {
        var mh$ = IAdviseSink_OnRename_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_OnRename_Stub", This, pmk);
            }
            return (int)mh$.invokeExact(This, pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_OnSave_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IAdviseSink_OnSave_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IAdviseSink_OnSave_Proxy(IAdviseSink *This)
     * }
     */
    public static FunctionDescriptor IAdviseSink_OnSave_Proxy$descriptor() {
        return IAdviseSink_OnSave_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IAdviseSink_OnSave_Proxy(IAdviseSink *This)
     * }
     */
    public static MethodHandle IAdviseSink_OnSave_Proxy$handle() {
        return IAdviseSink_OnSave_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IAdviseSink_OnSave_Proxy(IAdviseSink *This)
     * }
     */
    public static MemorySegment IAdviseSink_OnSave_Proxy$address() {
        return IAdviseSink_OnSave_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IAdviseSink_OnSave_Proxy(IAdviseSink *This)
     * }
     */
    public static void IAdviseSink_OnSave_Proxy(MemorySegment This) {
        var mh$ = IAdviseSink_OnSave_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_OnSave_Proxy", This);
            }
            mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_OnSave_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IAdviseSink_OnSave_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnSave_Stub(IAdviseSink *This)
     * }
     */
    public static FunctionDescriptor IAdviseSink_OnSave_Stub$descriptor() {
        return IAdviseSink_OnSave_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnSave_Stub(IAdviseSink *This)
     * }
     */
    public static MethodHandle IAdviseSink_OnSave_Stub$handle() {
        return IAdviseSink_OnSave_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnSave_Stub(IAdviseSink *This)
     * }
     */
    public static MemorySegment IAdviseSink_OnSave_Stub$address() {
        return IAdviseSink_OnSave_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnSave_Stub(IAdviseSink *This)
     * }
     */
    public static int IAdviseSink_OnSave_Stub(MemorySegment This) {
        var mh$ = IAdviseSink_OnSave_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_OnSave_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_OnClose_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IAdviseSink_OnClose_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IAdviseSink_OnClose_Proxy(IAdviseSink *This)
     * }
     */
    public static FunctionDescriptor IAdviseSink_OnClose_Proxy$descriptor() {
        return IAdviseSink_OnClose_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IAdviseSink_OnClose_Proxy(IAdviseSink *This)
     * }
     */
    public static MethodHandle IAdviseSink_OnClose_Proxy$handle() {
        return IAdviseSink_OnClose_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IAdviseSink_OnClose_Proxy(IAdviseSink *This)
     * }
     */
    public static MemorySegment IAdviseSink_OnClose_Proxy$address() {
        return IAdviseSink_OnClose_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IAdviseSink_OnClose_Proxy(IAdviseSink *This)
     * }
     */
    public static void IAdviseSink_OnClose_Proxy(MemorySegment This) {
        var mh$ = IAdviseSink_OnClose_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_OnClose_Proxy", This);
            }
            mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_OnClose_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IAdviseSink_OnClose_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnClose_Stub(IAdviseSink *This)
     * }
     */
    public static FunctionDescriptor IAdviseSink_OnClose_Stub$descriptor() {
        return IAdviseSink_OnClose_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnClose_Stub(IAdviseSink *This)
     * }
     */
    public static MethodHandle IAdviseSink_OnClose_Stub$handle() {
        return IAdviseSink_OnClose_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnClose_Stub(IAdviseSink *This)
     * }
     */
    public static MemorySegment IAdviseSink_OnClose_Stub$address() {
        return IAdviseSink_OnClose_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnClose_Stub(IAdviseSink *This)
     * }
     */
    public static int IAdviseSink_OnClose_Stub(MemorySegment This) {
        var mh$ = IAdviseSink_OnClose_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_OnClose_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_OnDataChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Begin_OnDataChange_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnDataChange_Proxy(AsyncIAdviseSink *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_OnDataChange_Proxy$descriptor() {
        return AsyncIAdviseSink_Begin_OnDataChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnDataChange_Proxy(AsyncIAdviseSink *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_OnDataChange_Proxy$handle() {
        return AsyncIAdviseSink_Begin_OnDataChange_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnDataChange_Proxy(AsyncIAdviseSink *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_OnDataChange_Proxy$address() {
        return AsyncIAdviseSink_Begin_OnDataChange_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnDataChange_Proxy(AsyncIAdviseSink *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed)
     * }
     */
    public static void AsyncIAdviseSink_Begin_OnDataChange_Proxy(MemorySegment This, MemorySegment pFormatetc, MemorySegment pStgmed) {
        var mh$ = AsyncIAdviseSink_Begin_OnDataChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_OnDataChange_Proxy", This, pFormatetc, pStgmed);
            }
            mh$.invokeExact(This, pFormatetc, pStgmed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_OnDataChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Begin_OnDataChange_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnDataChange_Stub(AsyncIAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_OnDataChange_Stub$descriptor() {
        return AsyncIAdviseSink_Begin_OnDataChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnDataChange_Stub(AsyncIAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_OnDataChange_Stub$handle() {
        return AsyncIAdviseSink_Begin_OnDataChange_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnDataChange_Stub(AsyncIAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_OnDataChange_Stub$address() {
        return AsyncIAdviseSink_Begin_OnDataChange_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnDataChange_Stub(AsyncIAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static int AsyncIAdviseSink_Begin_OnDataChange_Stub(MemorySegment This, MemorySegment pFormatetc, MemorySegment pStgmed) {
        var mh$ = AsyncIAdviseSink_Begin_OnDataChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_OnDataChange_Stub", This, pFormatetc, pStgmed);
            }
            return (int)mh$.invokeExact(This, pFormatetc, pStgmed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_OnDataChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Finish_OnDataChange_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnDataChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_OnDataChange_Proxy$descriptor() {
        return AsyncIAdviseSink_Finish_OnDataChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnDataChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_OnDataChange_Proxy$handle() {
        return AsyncIAdviseSink_Finish_OnDataChange_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnDataChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_OnDataChange_Proxy$address() {
        return AsyncIAdviseSink_Finish_OnDataChange_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnDataChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static void AsyncIAdviseSink_Finish_OnDataChange_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_OnDataChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_OnDataChange_Proxy", This);
            }
            mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_OnDataChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Finish_OnDataChange_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnDataChange_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_OnDataChange_Stub$descriptor() {
        return AsyncIAdviseSink_Finish_OnDataChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnDataChange_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_OnDataChange_Stub$handle() {
        return AsyncIAdviseSink_Finish_OnDataChange_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnDataChange_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_OnDataChange_Stub$address() {
        return AsyncIAdviseSink_Finish_OnDataChange_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnDataChange_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Finish_OnDataChange_Stub(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_OnDataChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_OnDataChange_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_OnViewChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Begin_OnViewChange_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnViewChange_Proxy(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_OnViewChange_Proxy$descriptor() {
        return AsyncIAdviseSink_Begin_OnViewChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnViewChange_Proxy(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_OnViewChange_Proxy$handle() {
        return AsyncIAdviseSink_Begin_OnViewChange_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnViewChange_Proxy(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_OnViewChange_Proxy$address() {
        return AsyncIAdviseSink_Begin_OnViewChange_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnViewChange_Proxy(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static void AsyncIAdviseSink_Begin_OnViewChange_Proxy(MemorySegment This, int dwAspect, int lindex) {
        var mh$ = AsyncIAdviseSink_Begin_OnViewChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_OnViewChange_Proxy", This, dwAspect, lindex);
            }
            mh$.invokeExact(This, dwAspect, lindex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_OnViewChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Begin_OnViewChange_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnViewChange_Stub(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_OnViewChange_Stub$descriptor() {
        return AsyncIAdviseSink_Begin_OnViewChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnViewChange_Stub(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_OnViewChange_Stub$handle() {
        return AsyncIAdviseSink_Begin_OnViewChange_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnViewChange_Stub(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_OnViewChange_Stub$address() {
        return AsyncIAdviseSink_Begin_OnViewChange_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnViewChange_Stub(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static int AsyncIAdviseSink_Begin_OnViewChange_Stub(MemorySegment This, int dwAspect, int lindex) {
        var mh$ = AsyncIAdviseSink_Begin_OnViewChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_OnViewChange_Stub", This, dwAspect, lindex);
            }
            return (int)mh$.invokeExact(This, dwAspect, lindex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_OnViewChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Finish_OnViewChange_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnViewChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_OnViewChange_Proxy$descriptor() {
        return AsyncIAdviseSink_Finish_OnViewChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnViewChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_OnViewChange_Proxy$handle() {
        return AsyncIAdviseSink_Finish_OnViewChange_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnViewChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_OnViewChange_Proxy$address() {
        return AsyncIAdviseSink_Finish_OnViewChange_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnViewChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static void AsyncIAdviseSink_Finish_OnViewChange_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_OnViewChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_OnViewChange_Proxy", This);
            }
            mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_OnViewChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Finish_OnViewChange_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnViewChange_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_OnViewChange_Stub$descriptor() {
        return AsyncIAdviseSink_Finish_OnViewChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnViewChange_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_OnViewChange_Stub$handle() {
        return AsyncIAdviseSink_Finish_OnViewChange_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnViewChange_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_OnViewChange_Stub$address() {
        return AsyncIAdviseSink_Finish_OnViewChange_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnViewChange_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Finish_OnViewChange_Stub(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_OnViewChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_OnViewChange_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_OnRename_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Begin_OnRename_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnRename_Proxy(AsyncIAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_OnRename_Proxy$descriptor() {
        return AsyncIAdviseSink_Begin_OnRename_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnRename_Proxy(AsyncIAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_OnRename_Proxy$handle() {
        return AsyncIAdviseSink_Begin_OnRename_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnRename_Proxy(AsyncIAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_OnRename_Proxy$address() {
        return AsyncIAdviseSink_Begin_OnRename_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnRename_Proxy(AsyncIAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static void AsyncIAdviseSink_Begin_OnRename_Proxy(MemorySegment This, MemorySegment pmk) {
        var mh$ = AsyncIAdviseSink_Begin_OnRename_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_OnRename_Proxy", This, pmk);
            }
            mh$.invokeExact(This, pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_OnRename_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Begin_OnRename_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnRename_Stub(AsyncIAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_OnRename_Stub$descriptor() {
        return AsyncIAdviseSink_Begin_OnRename_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnRename_Stub(AsyncIAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_OnRename_Stub$handle() {
        return AsyncIAdviseSink_Begin_OnRename_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnRename_Stub(AsyncIAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_OnRename_Stub$address() {
        return AsyncIAdviseSink_Begin_OnRename_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnRename_Stub(AsyncIAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static int AsyncIAdviseSink_Begin_OnRename_Stub(MemorySegment This, MemorySegment pmk) {
        var mh$ = AsyncIAdviseSink_Begin_OnRename_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_OnRename_Stub", This, pmk);
            }
            return (int)mh$.invokeExact(This, pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_OnRename_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Finish_OnRename_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnRename_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_OnRename_Proxy$descriptor() {
        return AsyncIAdviseSink_Finish_OnRename_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnRename_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_OnRename_Proxy$handle() {
        return AsyncIAdviseSink_Finish_OnRename_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnRename_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_OnRename_Proxy$address() {
        return AsyncIAdviseSink_Finish_OnRename_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnRename_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static void AsyncIAdviseSink_Finish_OnRename_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_OnRename_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_OnRename_Proxy", This);
            }
            mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_OnRename_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Finish_OnRename_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnRename_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_OnRename_Stub$descriptor() {
        return AsyncIAdviseSink_Finish_OnRename_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnRename_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_OnRename_Stub$handle() {
        return AsyncIAdviseSink_Finish_OnRename_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnRename_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_OnRename_Stub$address() {
        return AsyncIAdviseSink_Finish_OnRename_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnRename_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Finish_OnRename_Stub(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_OnRename_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_OnRename_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_OnSave_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Begin_OnSave_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_OnSave_Proxy$descriptor() {
        return AsyncIAdviseSink_Begin_OnSave_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_OnSave_Proxy$handle() {
        return AsyncIAdviseSink_Begin_OnSave_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_OnSave_Proxy$address() {
        return AsyncIAdviseSink_Begin_OnSave_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static void AsyncIAdviseSink_Begin_OnSave_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Begin_OnSave_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_OnSave_Proxy", This);
            }
            mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_OnSave_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Begin_OnSave_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnSave_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_OnSave_Stub$descriptor() {
        return AsyncIAdviseSink_Begin_OnSave_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnSave_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_OnSave_Stub$handle() {
        return AsyncIAdviseSink_Begin_OnSave_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnSave_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_OnSave_Stub$address() {
        return AsyncIAdviseSink_Begin_OnSave_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnSave_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Begin_OnSave_Stub(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Begin_OnSave_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_OnSave_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_OnSave_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Finish_OnSave_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_OnSave_Proxy$descriptor() {
        return AsyncIAdviseSink_Finish_OnSave_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_OnSave_Proxy$handle() {
        return AsyncIAdviseSink_Finish_OnSave_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_OnSave_Proxy$address() {
        return AsyncIAdviseSink_Finish_OnSave_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static void AsyncIAdviseSink_Finish_OnSave_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_OnSave_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_OnSave_Proxy", This);
            }
            mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_OnSave_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Finish_OnSave_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnSave_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_OnSave_Stub$descriptor() {
        return AsyncIAdviseSink_Finish_OnSave_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnSave_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_OnSave_Stub$handle() {
        return AsyncIAdviseSink_Finish_OnSave_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnSave_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_OnSave_Stub$address() {
        return AsyncIAdviseSink_Finish_OnSave_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnSave_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Finish_OnSave_Stub(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_OnSave_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_OnSave_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_OnClose_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Begin_OnClose_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_OnClose_Proxy$descriptor() {
        return AsyncIAdviseSink_Begin_OnClose_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_OnClose_Proxy$handle() {
        return AsyncIAdviseSink_Begin_OnClose_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_OnClose_Proxy$address() {
        return AsyncIAdviseSink_Begin_OnClose_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static void AsyncIAdviseSink_Begin_OnClose_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Begin_OnClose_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_OnClose_Proxy", This);
            }
            mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_OnClose_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Begin_OnClose_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnClose_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_OnClose_Stub$descriptor() {
        return AsyncIAdviseSink_Begin_OnClose_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnClose_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_OnClose_Stub$handle() {
        return AsyncIAdviseSink_Begin_OnClose_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnClose_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_OnClose_Stub$address() {
        return AsyncIAdviseSink_Begin_OnClose_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnClose_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Begin_OnClose_Stub(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Begin_OnClose_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_OnClose_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_OnClose_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Finish_OnClose_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_OnClose_Proxy$descriptor() {
        return AsyncIAdviseSink_Finish_OnClose_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_OnClose_Proxy$handle() {
        return AsyncIAdviseSink_Finish_OnClose_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_OnClose_Proxy$address() {
        return AsyncIAdviseSink_Finish_OnClose_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static void AsyncIAdviseSink_Finish_OnClose_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_OnClose_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_OnClose_Proxy", This);
            }
            mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_OnClose_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink_Finish_OnClose_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnClose_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_OnClose_Stub$descriptor() {
        return AsyncIAdviseSink_Finish_OnClose_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnClose_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_OnClose_Stub$handle() {
        return AsyncIAdviseSink_Finish_OnClose_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnClose_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_OnClose_Stub$address() {
        return AsyncIAdviseSink_Finish_OnClose_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnClose_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Finish_OnClose_Stub(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_OnClose_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_OnClose_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink2_OnLinkSrcChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IAdviseSink2_OnLinkSrcChange_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IAdviseSink2_OnLinkSrcChange_Proxy(IAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor IAdviseSink2_OnLinkSrcChange_Proxy$descriptor() {
        return IAdviseSink2_OnLinkSrcChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IAdviseSink2_OnLinkSrcChange_Proxy(IAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static MethodHandle IAdviseSink2_OnLinkSrcChange_Proxy$handle() {
        return IAdviseSink2_OnLinkSrcChange_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IAdviseSink2_OnLinkSrcChange_Proxy(IAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static MemorySegment IAdviseSink2_OnLinkSrcChange_Proxy$address() {
        return IAdviseSink2_OnLinkSrcChange_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IAdviseSink2_OnLinkSrcChange_Proxy(IAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static void IAdviseSink2_OnLinkSrcChange_Proxy(MemorySegment This, MemorySegment pmk) {
        var mh$ = IAdviseSink2_OnLinkSrcChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink2_OnLinkSrcChange_Proxy", This, pmk);
            }
            mh$.invokeExact(This, pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink2_OnLinkSrcChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IAdviseSink2_OnLinkSrcChange_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink2_OnLinkSrcChange_Stub(IAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor IAdviseSink2_OnLinkSrcChange_Stub$descriptor() {
        return IAdviseSink2_OnLinkSrcChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink2_OnLinkSrcChange_Stub(IAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static MethodHandle IAdviseSink2_OnLinkSrcChange_Stub$handle() {
        return IAdviseSink2_OnLinkSrcChange_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink2_OnLinkSrcChange_Stub(IAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static MemorySegment IAdviseSink2_OnLinkSrcChange_Stub$address() {
        return IAdviseSink2_OnLinkSrcChange_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IAdviseSink2_OnLinkSrcChange_Stub(IAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static int IAdviseSink2_OnLinkSrcChange_Stub(MemorySegment This, MemorySegment pmk) {
        var mh$ = IAdviseSink2_OnLinkSrcChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink2_OnLinkSrcChange_Stub", This, pmk);
            }
            return (int)mh$.invokeExact(This, pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy$descriptor() {
        return AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static MethodHandle AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy$handle() {
        return AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static MemorySegment AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy$address() {
        return AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static void AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy(MemorySegment This, MemorySegment pmk) {
        var mh$ = AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy", This, pmk);
            }
            mh$.invokeExact(This, pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub(AsyncIAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub$descriptor() {
        return AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub(AsyncIAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static MethodHandle AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub$handle() {
        return AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub(AsyncIAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static MemorySegment AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub$address() {
        return AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub(AsyncIAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static int AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub(MemorySegment This, MemorySegment pmk) {
        var mh$ = AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub", This, pmk);
            }
            return (int)mh$.invokeExact(This, pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy$descriptor() {
        return AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy$handle() {
        return AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy$address() {
        return AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This)
     * }
     */
    public static void AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy", This);
            }
            mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub(AsyncIAdviseSink2 *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub$descriptor() {
        return AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub(AsyncIAdviseSink2 *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub$handle() {
        return AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub(AsyncIAdviseSink2 *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub$address() {
        return AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub(AsyncIAdviseSink2 *This)
     * }
     */
    public static int AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub(MemorySegment This) {
        var mh$ = AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDataObject_GetData_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IDataObject_GetData_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IDataObject_GetData_Proxy(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pmedium)
     * }
     */
    public static FunctionDescriptor IDataObject_GetData_Proxy$descriptor() {
        return IDataObject_GetData_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IDataObject_GetData_Proxy(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pmedium)
     * }
     */
    public static MethodHandle IDataObject_GetData_Proxy$handle() {
        return IDataObject_GetData_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IDataObject_GetData_Proxy(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pmedium)
     * }
     */
    public static MemorySegment IDataObject_GetData_Proxy$address() {
        return IDataObject_GetData_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IDataObject_GetData_Proxy(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pmedium)
     * }
     */
    public static int IDataObject_GetData_Proxy(MemorySegment This, MemorySegment pformatetcIn, MemorySegment pmedium) {
        var mh$ = IDataObject_GetData_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDataObject_GetData_Proxy", This, pformatetcIn, pmedium);
            }
            return (int)mh$.invokeExact(This, pformatetcIn, pmedium);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDataObject_GetData_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IDataObject_GetData_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IDataObject_GetData_Stub(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static FunctionDescriptor IDataObject_GetData_Stub$descriptor() {
        return IDataObject_GetData_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IDataObject_GetData_Stub(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static MethodHandle IDataObject_GetData_Stub$handle() {
        return IDataObject_GetData_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IDataObject_GetData_Stub(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static MemorySegment IDataObject_GetData_Stub$address() {
        return IDataObject_GetData_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IDataObject_GetData_Stub(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static int IDataObject_GetData_Stub(MemorySegment This, MemorySegment pformatetcIn, MemorySegment pRemoteMedium) {
        var mh$ = IDataObject_GetData_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDataObject_GetData_Stub", This, pformatetcIn, pRemoteMedium);
            }
            return (int)mh$.invokeExact(This, pformatetcIn, pRemoteMedium);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDataObject_GetDataHere_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IDataObject_GetDataHere_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IDataObject_GetDataHere_Proxy(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pmedium)
     * }
     */
    public static FunctionDescriptor IDataObject_GetDataHere_Proxy$descriptor() {
        return IDataObject_GetDataHere_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IDataObject_GetDataHere_Proxy(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pmedium)
     * }
     */
    public static MethodHandle IDataObject_GetDataHere_Proxy$handle() {
        return IDataObject_GetDataHere_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IDataObject_GetDataHere_Proxy(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pmedium)
     * }
     */
    public static MemorySegment IDataObject_GetDataHere_Proxy$address() {
        return IDataObject_GetDataHere_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IDataObject_GetDataHere_Proxy(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pmedium)
     * }
     */
    public static int IDataObject_GetDataHere_Proxy(MemorySegment This, MemorySegment pformatetc, MemorySegment pmedium) {
        var mh$ = IDataObject_GetDataHere_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDataObject_GetDataHere_Proxy", This, pformatetc, pmedium);
            }
            return (int)mh$.invokeExact(This, pformatetc, pmedium);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDataObject_GetDataHere_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IDataObject_GetDataHere_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IDataObject_GetDataHere_Stub(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static FunctionDescriptor IDataObject_GetDataHere_Stub$descriptor() {
        return IDataObject_GetDataHere_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IDataObject_GetDataHere_Stub(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static MethodHandle IDataObject_GetDataHere_Stub$handle() {
        return IDataObject_GetDataHere_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IDataObject_GetDataHere_Stub(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static MemorySegment IDataObject_GetDataHere_Stub$address() {
        return IDataObject_GetDataHere_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IDataObject_GetDataHere_Stub(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static int IDataObject_GetDataHere_Stub(MemorySegment This, MemorySegment pformatetc, MemorySegment pRemoteMedium) {
        var mh$ = IDataObject_GetDataHere_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDataObject_GetDataHere_Stub", This, pformatetc, pRemoteMedium);
            }
            return (int)mh$.invokeExact(This, pformatetc, pRemoteMedium);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDataObject_SetData_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IDataObject_SetData_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IDataObject_SetData_Proxy(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pmedium, BOOL fRelease)
     * }
     */
    public static FunctionDescriptor IDataObject_SetData_Proxy$descriptor() {
        return IDataObject_SetData_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IDataObject_SetData_Proxy(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pmedium, BOOL fRelease)
     * }
     */
    public static MethodHandle IDataObject_SetData_Proxy$handle() {
        return IDataObject_SetData_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IDataObject_SetData_Proxy(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pmedium, BOOL fRelease)
     * }
     */
    public static MemorySegment IDataObject_SetData_Proxy$address() {
        return IDataObject_SetData_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IDataObject_SetData_Proxy(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pmedium, BOOL fRelease)
     * }
     */
    public static int IDataObject_SetData_Proxy(MemorySegment This, MemorySegment pformatetc, MemorySegment pmedium, int fRelease) {
        var mh$ = IDataObject_SetData_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDataObject_SetData_Proxy", This, pformatetc, pmedium, fRelease);
            }
            return (int)mh$.invokeExact(This, pformatetc, pmedium, fRelease);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDataObject_SetData_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IDataObject_SetData_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IDataObject_SetData_Stub(IDataObject *This, FORMATETC *pformatetc, FLAG_STGMEDIUM *pmedium, BOOL fRelease)
     * }
     */
    public static FunctionDescriptor IDataObject_SetData_Stub$descriptor() {
        return IDataObject_SetData_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IDataObject_SetData_Stub(IDataObject *This, FORMATETC *pformatetc, FLAG_STGMEDIUM *pmedium, BOOL fRelease)
     * }
     */
    public static MethodHandle IDataObject_SetData_Stub$handle() {
        return IDataObject_SetData_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IDataObject_SetData_Stub(IDataObject *This, FORMATETC *pformatetc, FLAG_STGMEDIUM *pmedium, BOOL fRelease)
     * }
     */
    public static MemorySegment IDataObject_SetData_Stub$address() {
        return IDataObject_SetData_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IDataObject_SetData_Stub(IDataObject *This, FORMATETC *pformatetc, FLAG_STGMEDIUM *pmedium, BOOL fRelease)
     * }
     */
    public static int IDataObject_SetData_Stub(MemorySegment This, MemorySegment pformatetc, MemorySegment pmedium, int fRelease) {
        var mh$ = IDataObject_SetData_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDataObject_SetData_Stub", This, pformatetc, pmedium, fRelease);
            }
            return (int)mh$.invokeExact(This, pformatetc, pmedium, fRelease);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IFillLockBytes_FillAppend_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IFillLockBytes_FillAppend_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAppend_Proxy(IFillLockBytes *This, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static FunctionDescriptor IFillLockBytes_FillAppend_Proxy$descriptor() {
        return IFillLockBytes_FillAppend_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAppend_Proxy(IFillLockBytes *This, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MethodHandle IFillLockBytes_FillAppend_Proxy$handle() {
        return IFillLockBytes_FillAppend_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAppend_Proxy(IFillLockBytes *This, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MemorySegment IFillLockBytes_FillAppend_Proxy$address() {
        return IFillLockBytes_FillAppend_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAppend_Proxy(IFillLockBytes *This, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static int IFillLockBytes_FillAppend_Proxy(MemorySegment This, MemorySegment pv, int cb, MemorySegment pcbWritten) {
        var mh$ = IFillLockBytes_FillAppend_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IFillLockBytes_FillAppend_Proxy", This, pv, cb, pcbWritten);
            }
            return (int)mh$.invokeExact(This, pv, cb, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IFillLockBytes_FillAppend_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IFillLockBytes_FillAppend_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAppend_Stub(IFillLockBytes *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static FunctionDescriptor IFillLockBytes_FillAppend_Stub$descriptor() {
        return IFillLockBytes_FillAppend_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAppend_Stub(IFillLockBytes *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MethodHandle IFillLockBytes_FillAppend_Stub$handle() {
        return IFillLockBytes_FillAppend_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAppend_Stub(IFillLockBytes *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MemorySegment IFillLockBytes_FillAppend_Stub$address() {
        return IFillLockBytes_FillAppend_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAppend_Stub(IFillLockBytes *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static int IFillLockBytes_FillAppend_Stub(MemorySegment This, MemorySegment pv, int cb, MemorySegment pcbWritten) {
        var mh$ = IFillLockBytes_FillAppend_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IFillLockBytes_FillAppend_Stub", This, pv, cb, pcbWritten);
            }
            return (int)mh$.invokeExact(This, pv, cb, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IFillLockBytes_FillAt_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            _ULARGE_INTEGER.layout(),
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IFillLockBytes_FillAt_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAt_Proxy(IFillLockBytes *This, ULARGE_INTEGER ulOffset, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static FunctionDescriptor IFillLockBytes_FillAt_Proxy$descriptor() {
        return IFillLockBytes_FillAt_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAt_Proxy(IFillLockBytes *This, ULARGE_INTEGER ulOffset, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MethodHandle IFillLockBytes_FillAt_Proxy$handle() {
        return IFillLockBytes_FillAt_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAt_Proxy(IFillLockBytes *This, ULARGE_INTEGER ulOffset, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MemorySegment IFillLockBytes_FillAt_Proxy$address() {
        return IFillLockBytes_FillAt_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAt_Proxy(IFillLockBytes *This, ULARGE_INTEGER ulOffset, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static int IFillLockBytes_FillAt_Proxy(MemorySegment This, MemorySegment ulOffset, MemorySegment pv, int cb, MemorySegment pcbWritten) {
        var mh$ = IFillLockBytes_FillAt_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IFillLockBytes_FillAt_Proxy", This, ulOffset, pv, cb, pcbWritten);
            }
            return (int)mh$.invokeExact(This, ulOffset, pv, cb, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IFillLockBytes_FillAt_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            _ULARGE_INTEGER.layout(),
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IFillLockBytes_FillAt_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAt_Stub(IFillLockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static FunctionDescriptor IFillLockBytes_FillAt_Stub$descriptor() {
        return IFillLockBytes_FillAt_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAt_Stub(IFillLockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MethodHandle IFillLockBytes_FillAt_Stub$handle() {
        return IFillLockBytes_FillAt_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAt_Stub(IFillLockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MemorySegment IFillLockBytes_FillAt_Stub$address() {
        return IFillLockBytes_FillAt_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAt_Stub(IFillLockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static int IFillLockBytes_FillAt_Stub(MemorySegment This, MemorySegment ulOffset, MemorySegment pv, int cb, MemorySegment pcbWritten) {
        var mh$ = IFillLockBytes_FillAt_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IFillLockBytes_FillAt_Stub", This, ulOffset, pv, cb, pcbWritten);
            }
            return (int)mh$.invokeExact(This, ulOffset, pv, cb, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec$layout() {
        return __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec$segment() {
        return __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec() {
        return __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec$layout() {
        return __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec$segment() {
        return __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec() {
        return __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagSAFEARRAYBOUND {
     *     ULONG cElements;
     *     LONG lLbound;
     * } *LPSAFEARRAYBOUND
     * }
     */
    public static final AddressLayout LPSAFEARRAYBOUND = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _wireVARIANT *wireVARIANT
     * }
     */
    public static final AddressLayout wireVARIANT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _wireBRECORD *wireBRECORD
     * }
     */
    public static final AddressLayout wireBRECORD = wgl_h.C_POINTER;
    private static final int SF_ERROR = (int)10L;
    /**
     * {@snippet lang=c :
     * enum tagSF_TYPE.SF_ERROR = 10
     * }
     */
    public static int SF_ERROR() {
        return SF_ERROR;
    }
    private static final int SF_I1 = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagSF_TYPE.SF_I1 = 16
     * }
     */
    public static int SF_I1() {
        return SF_I1;
    }
    private static final int SF_I2 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagSF_TYPE.SF_I2 = 2
     * }
     */
    public static int SF_I2() {
        return SF_I2;
    }
    private static final int SF_I4 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagSF_TYPE.SF_I4 = 3
     * }
     */
    public static int SF_I4() {
        return SF_I4;
    }
    private static final int SF_I8 = (int)20L;
    /**
     * {@snippet lang=c :
     * enum tagSF_TYPE.SF_I8 = 20
     * }
     */
    public static int SF_I8() {
        return SF_I8;
    }
    private static final int SF_BSTR = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagSF_TYPE.SF_BSTR = 8
     * }
     */
    public static int SF_BSTR() {
        return SF_BSTR;
    }
    private static final int SF_UNKNOWN = (int)13L;
    /**
     * {@snippet lang=c :
     * enum tagSF_TYPE.SF_UNKNOWN = 13
     * }
     */
    public static int SF_UNKNOWN() {
        return SF_UNKNOWN;
    }
    private static final int SF_DISPATCH = (int)9L;
    /**
     * {@snippet lang=c :
     * enum tagSF_TYPE.SF_DISPATCH = 9
     * }
     */
    public static int SF_DISPATCH() {
        return SF_DISPATCH;
    }
    private static final int SF_VARIANT = (int)12L;
    /**
     * {@snippet lang=c :
     * enum tagSF_TYPE.SF_VARIANT = 12
     * }
     */
    public static int SF_VARIANT() {
        return SF_VARIANT;
    }
    private static final int SF_RECORD = (int)36L;
    /**
     * {@snippet lang=c :
     * enum tagSF_TYPE.SF_RECORD = 36
     * }
     */
    public static int SF_RECORD() {
        return SF_RECORD;
    }
    private static final int SF_HAVEIID = (int)32781L;
    /**
     * {@snippet lang=c :
     * enum tagSF_TYPE.SF_HAVEIID = 32781
     * }
     */
    public static int SF_HAVEIID() {
        return SF_HAVEIID;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _wireSAFEARRAY {
     *     USHORT cDims;
     *     USHORT fFeatures;
     *     ULONG cbElements;
     *     ULONG cLocks;
     *     SAFEARRAYUNION uArrayStructs;
     *     SAFEARRAYBOUND rgsabound[1];
     * } *wireSAFEARRAY
     * }
     */
    public static final AddressLayout wireSAFEARRAY = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef wireSAFEARRAY *wirePSAFEARRAY
     * }
     */
    public static final AddressLayout wirePSAFEARRAY = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef SAFEARRAY *LPSAFEARRAY
     * }
     */
    public static final AddressLayout LPSAFEARRAY = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef VARIANT *LPVARIANT
     * }
     */
    public static final AddressLayout LPVARIANT = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef VARIANT *LPVARIANTARG
     * }
     */
    public static final AddressLayout LPVARIANTARG = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LONG DISPID
     * }
     */
    public static final OfInt DISPID = wgl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef DISPID MEMBERID
     * }
     */
    public static final OfInt MEMBERID = wgl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef DWORD HREFTYPE
     * }
     */
    public static final OfInt HREFTYPE = wgl_h.C_LONG;
    private static final int TKIND_ENUM = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEKIND.TKIND_ENUM = 0
     * }
     */
    public static int TKIND_ENUM() {
        return TKIND_ENUM;
    }
    private static final int TKIND_RECORD = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEKIND.TKIND_RECORD = 1
     * }
     */
    public static int TKIND_RECORD() {
        return TKIND_RECORD;
    }
    private static final int TKIND_MODULE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEKIND.TKIND_MODULE = 2
     * }
     */
    public static int TKIND_MODULE() {
        return TKIND_MODULE;
    }
    private static final int TKIND_INTERFACE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEKIND.TKIND_INTERFACE = 3
     * }
     */
    public static int TKIND_INTERFACE() {
        return TKIND_INTERFACE;
    }
    private static final int TKIND_DISPATCH = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEKIND.TKIND_DISPATCH = 4
     * }
     */
    public static int TKIND_DISPATCH() {
        return TKIND_DISPATCH;
    }
    private static final int TKIND_COCLASS = (int)5L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEKIND.TKIND_COCLASS = 5
     * }
     */
    public static int TKIND_COCLASS() {
        return TKIND_COCLASS;
    }
    private static final int TKIND_ALIAS = (int)6L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEKIND.TKIND_ALIAS = 6
     * }
     */
    public static int TKIND_ALIAS() {
        return TKIND_ALIAS;
    }
    private static final int TKIND_UNION = (int)7L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEKIND.TKIND_UNION = 7
     * }
     */
    public static int TKIND_UNION() {
        return TKIND_UNION;
    }
    private static final int TKIND_MAX = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEKIND.TKIND_MAX = 8
     * }
     */
    public static int TKIND_MAX() {
        return TKIND_MAX;
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagPARAMDESCEX {
     *     ULONG cBytes;
     *     VARIANTARG varDefaultValue;
     * } *LPPARAMDESCEX
     * }
     */
    public static final AddressLayout LPPARAMDESCEX = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagPARAMDESC {
     *     LPPARAMDESCEX pparamdescex;
     *     USHORT wParamFlags;
     * } *LPPARAMDESC
     * }
     */
    public static final AddressLayout LPPARAMDESC = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagIDLDESC {
     *     ULONG_PTR dwReserved;
     *     USHORT wIDLFlags;
     * } *LPIDLDESC
     * }
     */
    public static final AddressLayout LPIDLDESC = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagELEMDESC {
     *     TYPEDESC tdesc;
     *     union {
     *         IDLDESC idldesc;
     *         PARAMDESC paramdesc;
     *     };
     * } *LPELEMDESC
     * }
     */
    public static final AddressLayout LPELEMDESC = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagTYPEATTR {
     *     GUID guid;
     *     LCID lcid;
     *     DWORD dwReserved;
     *     MEMBERID memidConstructor;
     *     MEMBERID memidDestructor;
     *     LPOLESTR lpstrSchema;
     *     ULONG cbSizeInstance;
     *     TYPEKIND typekind;
     *     WORD cFuncs;
     *     WORD cVars;
     *     WORD cImplTypes;
     *     WORD cbSizeVft;
     *     WORD cbAlignment;
     *     WORD wTypeFlags;
     *     WORD wMajorVerNum;
     *     WORD wMinorVerNum;
     *     TYPEDESC tdescAlias;
     *     IDLDESC idldescType;
     * } *LPTYPEATTR
     * }
     */
    public static final AddressLayout LPTYPEATTR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagEXCEPINFO {
     *     WORD wCode;
     *     WORD wReserved;
     *     BSTR bstrSource;
     *     BSTR bstrDescription;
     *     BSTR bstrHelpFile;
     *     DWORD dwHelpContext;
     *     PVOID pvReserved;
     *     HRESULT (*pfnDeferredFillIn)(struct tagEXCEPINFO *) __attribute__((stdcall));
     *     SCODE scode;
     * } *LPEXCEPINFO
     * }
     */
    public static final AddressLayout LPEXCEPINFO = wgl_h.C_POINTER;
    private static final int CC_FASTCALL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagCALLCONV.CC_FASTCALL = 0
     * }
     */
    public static int CC_FASTCALL() {
        return CC_FASTCALL;
    }
    private static final int CC_CDECL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagCALLCONV.CC_CDECL = 1
     * }
     */
    public static int CC_CDECL() {
        return CC_CDECL;
    }
    private static final int CC_MSCPASCAL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagCALLCONV.CC_MSCPASCAL = 2
     * }
     */
    public static int CC_MSCPASCAL() {
        return CC_MSCPASCAL;
    }
    private static final int CC_PASCAL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagCALLCONV.CC_PASCAL = 2
     * }
     */
    public static int CC_PASCAL() {
        return CC_PASCAL;
    }
    private static final int CC_MACPASCAL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagCALLCONV.CC_MACPASCAL = 3
     * }
     */
    public static int CC_MACPASCAL() {
        return CC_MACPASCAL;
    }
    private static final int CC_STDCALL = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagCALLCONV.CC_STDCALL = 4
     * }
     */
    public static int CC_STDCALL() {
        return CC_STDCALL;
    }
    private static final int CC_FPFASTCALL = (int)5L;
    /**
     * {@snippet lang=c :
     * enum tagCALLCONV.CC_FPFASTCALL = 5
     * }
     */
    public static int CC_FPFASTCALL() {
        return CC_FPFASTCALL;
    }
    private static final int CC_SYSCALL = (int)6L;
    /**
     * {@snippet lang=c :
     * enum tagCALLCONV.CC_SYSCALL = 6
     * }
     */
    public static int CC_SYSCALL() {
        return CC_SYSCALL;
    }
    private static final int CC_MPWCDECL = (int)7L;
    /**
     * {@snippet lang=c :
     * enum tagCALLCONV.CC_MPWCDECL = 7
     * }
     */
    public static int CC_MPWCDECL() {
        return CC_MPWCDECL;
    }
    private static final int CC_MPWPASCAL = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagCALLCONV.CC_MPWPASCAL = 8
     * }
     */
    public static int CC_MPWPASCAL() {
        return CC_MPWPASCAL;
    }
    private static final int CC_MAX = (int)9L;
    /**
     * {@snippet lang=c :
     * enum tagCALLCONV.CC_MAX = 9
     * }
     */
    public static int CC_MAX() {
        return CC_MAX;
    }
    private static final int FUNC_VIRTUAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCKIND.FUNC_VIRTUAL = 0
     * }
     */
    public static int FUNC_VIRTUAL() {
        return FUNC_VIRTUAL;
    }
    private static final int FUNC_PUREVIRTUAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCKIND.FUNC_PUREVIRTUAL = 1
     * }
     */
    public static int FUNC_PUREVIRTUAL() {
        return FUNC_PUREVIRTUAL;
    }
    private static final int FUNC_NONVIRTUAL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCKIND.FUNC_NONVIRTUAL = 2
     * }
     */
    public static int FUNC_NONVIRTUAL() {
        return FUNC_NONVIRTUAL;
    }
    private static final int FUNC_STATIC = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCKIND.FUNC_STATIC = 3
     * }
     */
    public static int FUNC_STATIC() {
        return FUNC_STATIC;
    }
    private static final int FUNC_DISPATCH = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCKIND.FUNC_DISPATCH = 4
     * }
     */
    public static int FUNC_DISPATCH() {
        return FUNC_DISPATCH;
    }
    private static final int INVOKE_FUNC = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagINVOKEKIND.INVOKE_FUNC = 1
     * }
     */
    public static int INVOKE_FUNC() {
        return INVOKE_FUNC;
    }
    private static final int INVOKE_PROPERTYGET = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagINVOKEKIND.INVOKE_PROPERTYGET = 2
     * }
     */
    public static int INVOKE_PROPERTYGET() {
        return INVOKE_PROPERTYGET;
    }
    private static final int INVOKE_PROPERTYPUT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagINVOKEKIND.INVOKE_PROPERTYPUT = 4
     * }
     */
    public static int INVOKE_PROPERTYPUT() {
        return INVOKE_PROPERTYPUT;
    }
    private static final int INVOKE_PROPERTYPUTREF = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagINVOKEKIND.INVOKE_PROPERTYPUTREF = 8
     * }
     */
    public static int INVOKE_PROPERTYPUTREF() {
        return INVOKE_PROPERTYPUTREF;
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagFUNCDESC {
     *     MEMBERID memid;
     *     SCODE *lprgscode;
     *     ELEMDESC *lprgelemdescParam;
     *     FUNCKIND funckind;
     *     INVOKEKIND invkind;
     *     CALLCONV callconv;
     *     SHORT cParams;
     *     SHORT cParamsOpt;
     *     SHORT oVft;
     *     SHORT cScodes;
     *     ELEMDESC elemdescFunc;
     *     WORD wFuncFlags;
     * } *LPFUNCDESC
     * }
     */
    public static final AddressLayout LPFUNCDESC = wgl_h.C_POINTER;
    private static final int VAR_PERINSTANCE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagVARKIND.VAR_PERINSTANCE = 0
     * }
     */
    public static int VAR_PERINSTANCE() {
        return VAR_PERINSTANCE;
    }
    private static final int VAR_STATIC = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagVARKIND.VAR_STATIC = 1
     * }
     */
    public static int VAR_STATIC() {
        return VAR_STATIC;
    }
    private static final int VAR_CONST = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagVARKIND.VAR_CONST = 2
     * }
     */
    public static int VAR_CONST() {
        return VAR_CONST;
    }
    private static final int VAR_DISPATCH = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagVARKIND.VAR_DISPATCH = 3
     * }
     */
    public static int VAR_DISPATCH() {
        return VAR_DISPATCH;
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagVARDESC {
     *     MEMBERID memid;
     *     LPOLESTR lpstrSchema;
     *     union {
     *         ULONG oInst;
     *         VARIANT *lpvarValue;
     *     };
     *     ELEMDESC elemdescVar;
     *     WORD wVarFlags;
     *     VARKIND varkind;
     * } *LPVARDESC
     * }
     */
    public static final AddressLayout LPVARDESC = wgl_h.C_POINTER;
    private static final int TYPEFLAG_FAPPOBJECT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FAPPOBJECT = 1
     * }
     */
    public static int TYPEFLAG_FAPPOBJECT() {
        return TYPEFLAG_FAPPOBJECT;
    }
    private static final int TYPEFLAG_FCANCREATE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FCANCREATE = 2
     * }
     */
    public static int TYPEFLAG_FCANCREATE() {
        return TYPEFLAG_FCANCREATE;
    }
    private static final int TYPEFLAG_FLICENSED = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FLICENSED = 4
     * }
     */
    public static int TYPEFLAG_FLICENSED() {
        return TYPEFLAG_FLICENSED;
    }
    private static final int TYPEFLAG_FPREDECLID = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FPREDECLID = 8
     * }
     */
    public static int TYPEFLAG_FPREDECLID() {
        return TYPEFLAG_FPREDECLID;
    }
    private static final int TYPEFLAG_FHIDDEN = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FHIDDEN = 16
     * }
     */
    public static int TYPEFLAG_FHIDDEN() {
        return TYPEFLAG_FHIDDEN;
    }
    private static final int TYPEFLAG_FCONTROL = (int)32L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FCONTROL = 32
     * }
     */
    public static int TYPEFLAG_FCONTROL() {
        return TYPEFLAG_FCONTROL;
    }
    private static final int TYPEFLAG_FDUAL = (int)64L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FDUAL = 64
     * }
     */
    public static int TYPEFLAG_FDUAL() {
        return TYPEFLAG_FDUAL;
    }
    private static final int TYPEFLAG_FNONEXTENSIBLE = (int)128L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FNONEXTENSIBLE = 128
     * }
     */
    public static int TYPEFLAG_FNONEXTENSIBLE() {
        return TYPEFLAG_FNONEXTENSIBLE;
    }
    private static final int TYPEFLAG_FOLEAUTOMATION = (int)256L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FOLEAUTOMATION = 256
     * }
     */
    public static int TYPEFLAG_FOLEAUTOMATION() {
        return TYPEFLAG_FOLEAUTOMATION;
    }
    private static final int TYPEFLAG_FRESTRICTED = (int)512L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FRESTRICTED = 512
     * }
     */
    public static int TYPEFLAG_FRESTRICTED() {
        return TYPEFLAG_FRESTRICTED;
    }
    private static final int TYPEFLAG_FAGGREGATABLE = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FAGGREGATABLE = 1024
     * }
     */
    public static int TYPEFLAG_FAGGREGATABLE() {
        return TYPEFLAG_FAGGREGATABLE;
    }
    private static final int TYPEFLAG_FREPLACEABLE = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FREPLACEABLE = 2048
     * }
     */
    public static int TYPEFLAG_FREPLACEABLE() {
        return TYPEFLAG_FREPLACEABLE;
    }
    private static final int TYPEFLAG_FDISPATCHABLE = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FDISPATCHABLE = 4096
     * }
     */
    public static int TYPEFLAG_FDISPATCHABLE() {
        return TYPEFLAG_FDISPATCHABLE;
    }
    private static final int TYPEFLAG_FREVERSEBIND = (int)8192L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FREVERSEBIND = 8192
     * }
     */
    public static int TYPEFLAG_FREVERSEBIND() {
        return TYPEFLAG_FREVERSEBIND;
    }
    private static final int TYPEFLAG_FPROXY = (int)16384L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FPROXY = 16384
     * }
     */
    public static int TYPEFLAG_FPROXY() {
        return TYPEFLAG_FPROXY;
    }
    private static final int FUNCFLAG_FRESTRICTED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FRESTRICTED = 1
     * }
     */
    public static int FUNCFLAG_FRESTRICTED() {
        return FUNCFLAG_FRESTRICTED;
    }
    private static final int FUNCFLAG_FSOURCE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FSOURCE = 2
     * }
     */
    public static int FUNCFLAG_FSOURCE() {
        return FUNCFLAG_FSOURCE;
    }
    private static final int FUNCFLAG_FBINDABLE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FBINDABLE = 4
     * }
     */
    public static int FUNCFLAG_FBINDABLE() {
        return FUNCFLAG_FBINDABLE;
    }
    private static final int FUNCFLAG_FREQUESTEDIT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FREQUESTEDIT = 8
     * }
     */
    public static int FUNCFLAG_FREQUESTEDIT() {
        return FUNCFLAG_FREQUESTEDIT;
    }
    private static final int FUNCFLAG_FDISPLAYBIND = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FDISPLAYBIND = 16
     * }
     */
    public static int FUNCFLAG_FDISPLAYBIND() {
        return FUNCFLAG_FDISPLAYBIND;
    }
    private static final int FUNCFLAG_FDEFAULTBIND = (int)32L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FDEFAULTBIND = 32
     * }
     */
    public static int FUNCFLAG_FDEFAULTBIND() {
        return FUNCFLAG_FDEFAULTBIND;
    }
    private static final int FUNCFLAG_FHIDDEN = (int)64L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FHIDDEN = 64
     * }
     */
    public static int FUNCFLAG_FHIDDEN() {
        return FUNCFLAG_FHIDDEN;
    }
    private static final int FUNCFLAG_FUSESGETLASTERROR = (int)128L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FUSESGETLASTERROR = 128
     * }
     */
    public static int FUNCFLAG_FUSESGETLASTERROR() {
        return FUNCFLAG_FUSESGETLASTERROR;
    }
    private static final int FUNCFLAG_FDEFAULTCOLLELEM = (int)256L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FDEFAULTCOLLELEM = 256
     * }
     */
    public static int FUNCFLAG_FDEFAULTCOLLELEM() {
        return FUNCFLAG_FDEFAULTCOLLELEM;
    }
    private static final int FUNCFLAG_FUIDEFAULT = (int)512L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FUIDEFAULT = 512
     * }
     */
    public static int FUNCFLAG_FUIDEFAULT() {
        return FUNCFLAG_FUIDEFAULT;
    }
    private static final int FUNCFLAG_FNONBROWSABLE = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FNONBROWSABLE = 1024
     * }
     */
    public static int FUNCFLAG_FNONBROWSABLE() {
        return FUNCFLAG_FNONBROWSABLE;
    }
    private static final int FUNCFLAG_FREPLACEABLE = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FREPLACEABLE = 2048
     * }
     */
    public static int FUNCFLAG_FREPLACEABLE() {
        return FUNCFLAG_FREPLACEABLE;
    }
    private static final int FUNCFLAG_FIMMEDIATEBIND = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FIMMEDIATEBIND = 4096
     * }
     */
    public static int FUNCFLAG_FIMMEDIATEBIND() {
        return FUNCFLAG_FIMMEDIATEBIND;
    }
    private static final int VARFLAG_FREADONLY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FREADONLY = 1
     * }
     */
    public static int VARFLAG_FREADONLY() {
        return VARFLAG_FREADONLY;
    }
    private static final int VARFLAG_FSOURCE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FSOURCE = 2
     * }
     */
    public static int VARFLAG_FSOURCE() {
        return VARFLAG_FSOURCE;
    }
    private static final int VARFLAG_FBINDABLE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FBINDABLE = 4
     * }
     */
    public static int VARFLAG_FBINDABLE() {
        return VARFLAG_FBINDABLE;
    }
    private static final int VARFLAG_FREQUESTEDIT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FREQUESTEDIT = 8
     * }
     */
    public static int VARFLAG_FREQUESTEDIT() {
        return VARFLAG_FREQUESTEDIT;
    }
    private static final int VARFLAG_FDISPLAYBIND = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FDISPLAYBIND = 16
     * }
     */
    public static int VARFLAG_FDISPLAYBIND() {
        return VARFLAG_FDISPLAYBIND;
    }
    private static final int VARFLAG_FDEFAULTBIND = (int)32L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FDEFAULTBIND = 32
     * }
     */
    public static int VARFLAG_FDEFAULTBIND() {
        return VARFLAG_FDEFAULTBIND;
    }
    private static final int VARFLAG_FHIDDEN = (int)64L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FHIDDEN = 64
     * }
     */
    public static int VARFLAG_FHIDDEN() {
        return VARFLAG_FHIDDEN;
    }
    private static final int VARFLAG_FRESTRICTED = (int)128L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FRESTRICTED = 128
     * }
     */
    public static int VARFLAG_FRESTRICTED() {
        return VARFLAG_FRESTRICTED;
    }
    private static final int VARFLAG_FDEFAULTCOLLELEM = (int)256L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FDEFAULTCOLLELEM = 256
     * }
     */
    public static int VARFLAG_FDEFAULTCOLLELEM() {
        return VARFLAG_FDEFAULTCOLLELEM;
    }
    private static final int VARFLAG_FUIDEFAULT = (int)512L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FUIDEFAULT = 512
     * }
     */
    public static int VARFLAG_FUIDEFAULT() {
        return VARFLAG_FUIDEFAULT;
    }
    private static final int VARFLAG_FNONBROWSABLE = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FNONBROWSABLE = 1024
     * }
     */
    public static int VARFLAG_FNONBROWSABLE() {
        return VARFLAG_FNONBROWSABLE;
    }
    private static final int VARFLAG_FREPLACEABLE = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FREPLACEABLE = 2048
     * }
     */
    public static int VARFLAG_FREPLACEABLE() {
        return VARFLAG_FREPLACEABLE;
    }
    private static final int VARFLAG_FIMMEDIATEBIND = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FIMMEDIATEBIND = 4096
     * }
     */
    public static int VARFLAG_FIMMEDIATEBIND() {
        return VARFLAG_FIMMEDIATEBIND;
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagCUSTDATAITEM {
     *     GUID guid;
     *     VARIANTARG varValue;
     * } *LPCUSTDATAITEM
     * }
     */
    public static final AddressLayout LPCUSTDATAITEM = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagCUSTDATA {
     *     DWORD cCustData;
     *     LPCUSTDATAITEM prgCustData;
     * } *LPCUSTDATA
     * }
     */
    public static final AddressLayout LPCUSTDATA = wgl_h.C_POINTER;

    private static class IOleAutomationTypes_v1_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IOleAutomationTypes_v1_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_c_ifspec
     * }
     */
    public static AddressLayout IOleAutomationTypes_v1_0_c_ifspec$layout() {
        return IOleAutomationTypes_v1_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_c_ifspec
     * }
     */
    public static MemorySegment IOleAutomationTypes_v1_0_c_ifspec$segment() {
        return IOleAutomationTypes_v1_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_c_ifspec
     * }
     */
    public static MemorySegment IOleAutomationTypes_v1_0_c_ifspec() {
        return IOleAutomationTypes_v1_0_c_ifspec$constants.SEGMENT.get(IOleAutomationTypes_v1_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_c_ifspec
     * }
     */
    public static void IOleAutomationTypes_v1_0_c_ifspec(MemorySegment varValue) {
        IOleAutomationTypes_v1_0_c_ifspec$constants.SEGMENT.set(IOleAutomationTypes_v1_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IOleAutomationTypes_v1_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IOleAutomationTypes_v1_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_s_ifspec
     * }
     */
    public static AddressLayout IOleAutomationTypes_v1_0_s_ifspec$layout() {
        return IOleAutomationTypes_v1_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_s_ifspec
     * }
     */
    public static MemorySegment IOleAutomationTypes_v1_0_s_ifspec$segment() {
        return IOleAutomationTypes_v1_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_s_ifspec
     * }
     */
    public static MemorySegment IOleAutomationTypes_v1_0_s_ifspec() {
        return IOleAutomationTypes_v1_0_s_ifspec$constants.SEGMENT.get(IOleAutomationTypes_v1_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_s_ifspec
     * }
     */
    public static void IOleAutomationTypes_v1_0_s_ifspec(MemorySegment varValue) {
        IOleAutomationTypes_v1_0_s_ifspec$constants.SEGMENT.set(IOleAutomationTypes_v1_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec$layout() {
        return __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec$segment() {
        return __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec() {
        return __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec$layout() {
        return __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec$segment() {
        return __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec() {
        return __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef ICreateTypeInfo *LPCREATETYPEINFO
     * }
     */
    public static final AddressLayout LPCREATETYPEINFO = wgl_h.C_POINTER;

    private static class IID_ICreateTypeInfo$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_ICreateTypeInfo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateTypeInfo
     * }
     */
    public static GroupLayout IID_ICreateTypeInfo$layout() {
        return IID_ICreateTypeInfo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateTypeInfo
     * }
     */
    public static MemorySegment IID_ICreateTypeInfo() {
        return IID_ICreateTypeInfo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateTypeInfo
     * }
     */
    public static void IID_ICreateTypeInfo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ICreateTypeInfo$constants.SEGMENT, 0L, IID_ICreateTypeInfo$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef ICreateTypeInfo2 *LPCREATETYPEINFO2
     * }
     */
    public static final AddressLayout LPCREATETYPEINFO2 = wgl_h.C_POINTER;

    private static class IID_ICreateTypeInfo2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_ICreateTypeInfo2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateTypeInfo2
     * }
     */
    public static GroupLayout IID_ICreateTypeInfo2$layout() {
        return IID_ICreateTypeInfo2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateTypeInfo2
     * }
     */
    public static MemorySegment IID_ICreateTypeInfo2() {
        return IID_ICreateTypeInfo2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateTypeInfo2
     * }
     */
    public static void IID_ICreateTypeInfo2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ICreateTypeInfo2$constants.SEGMENT, 0L, IID_ICreateTypeInfo2$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef ICreateTypeLib *LPCREATETYPELIB
     * }
     */
    public static final AddressLayout LPCREATETYPELIB = wgl_h.C_POINTER;

    private static class IID_ICreateTypeLib$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_ICreateTypeLib").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateTypeLib
     * }
     */
    public static GroupLayout IID_ICreateTypeLib$layout() {
        return IID_ICreateTypeLib$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateTypeLib
     * }
     */
    public static MemorySegment IID_ICreateTypeLib() {
        return IID_ICreateTypeLib$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateTypeLib
     * }
     */
    public static void IID_ICreateTypeLib(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ICreateTypeLib$constants.SEGMENT, 0L, IID_ICreateTypeLib$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef ICreateTypeLib2 *LPCREATETYPELIB2
     * }
     */
    public static final AddressLayout LPCREATETYPELIB2 = wgl_h.C_POINTER;

    private static class IID_ICreateTypeLib2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_ICreateTypeLib2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateTypeLib2
     * }
     */
    public static GroupLayout IID_ICreateTypeLib2$layout() {
        return IID_ICreateTypeLib2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateTypeLib2
     * }
     */
    public static MemorySegment IID_ICreateTypeLib2() {
        return IID_ICreateTypeLib2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateTypeLib2
     * }
     */
    public static void IID_ICreateTypeLib2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ICreateTypeLib2$constants.SEGMENT, 0L, IID_ICreateTypeLib2$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec$layout() {
        return __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec$segment() {
        return __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec() {
        return __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec$layout() {
        return __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec$segment() {
        return __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec() {
        return __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IDispatch *LPDISPATCH
     * }
     */
    public static final AddressLayout LPDISPATCH = wgl_h.C_POINTER;

    private static class IID_IDispatch$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IDispatch").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDispatch
     * }
     */
    public static GroupLayout IID_IDispatch$layout() {
        return IID_IDispatch$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDispatch
     * }
     */
    public static MemorySegment IID_IDispatch() {
        return IID_IDispatch$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDispatch
     * }
     */
    public static void IID_IDispatch(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IDispatch$constants.SEGMENT, 0L, IID_IDispatch$constants.LAYOUT.byteSize());
    }

    private static class IDispatch_RemoteInvoke_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IDispatch_RemoteInvoke_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IDispatch_RemoteInvoke_Proxy(IDispatch *This, DISPID dispIdMember, const IID *const riid, LCID lcid, DWORD dwFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *pArgErr, UINT cVarRef, UINT *rgVarRefIdx, VARIANTARG *rgVarRef)
     * }
     */
    public static FunctionDescriptor IDispatch_RemoteInvoke_Proxy$descriptor() {
        return IDispatch_RemoteInvoke_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IDispatch_RemoteInvoke_Proxy(IDispatch *This, DISPID dispIdMember, const IID *const riid, LCID lcid, DWORD dwFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *pArgErr, UINT cVarRef, UINT *rgVarRefIdx, VARIANTARG *rgVarRef)
     * }
     */
    public static MethodHandle IDispatch_RemoteInvoke_Proxy$handle() {
        return IDispatch_RemoteInvoke_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IDispatch_RemoteInvoke_Proxy(IDispatch *This, DISPID dispIdMember, const IID *const riid, LCID lcid, DWORD dwFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *pArgErr, UINT cVarRef, UINT *rgVarRefIdx, VARIANTARG *rgVarRef)
     * }
     */
    public static MemorySegment IDispatch_RemoteInvoke_Proxy$address() {
        return IDispatch_RemoteInvoke_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IDispatch_RemoteInvoke_Proxy(IDispatch *This, DISPID dispIdMember, const IID *const riid, LCID lcid, DWORD dwFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *pArgErr, UINT cVarRef, UINT *rgVarRefIdx, VARIANTARG *rgVarRef)
     * }
     */
    public static int IDispatch_RemoteInvoke_Proxy(MemorySegment This, int dispIdMember, MemorySegment riid, int lcid, int dwFlags, MemorySegment pDispParams, MemorySegment pVarResult, MemorySegment pExcepInfo, MemorySegment pArgErr, int cVarRef, MemorySegment rgVarRefIdx, MemorySegment rgVarRef) {
        var mh$ = IDispatch_RemoteInvoke_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDispatch_RemoteInvoke_Proxy", This, dispIdMember, riid, lcid, dwFlags, pDispParams, pVarResult, pExcepInfo, pArgErr, cVarRef, rgVarRefIdx, rgVarRef);
            }
            return (int)mh$.invokeExact(This, dispIdMember, riid, lcid, dwFlags, pDispParams, pVarResult, pExcepInfo, pArgErr, cVarRef, rgVarRefIdx, rgVarRef);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDispatch_RemoteInvoke_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IDispatch_RemoteInvoke_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IDispatch_RemoteInvoke_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IDispatch_RemoteInvoke_Stub$descriptor() {
        return IDispatch_RemoteInvoke_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IDispatch_RemoteInvoke_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IDispatch_RemoteInvoke_Stub$handle() {
        return IDispatch_RemoteInvoke_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IDispatch_RemoteInvoke_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IDispatch_RemoteInvoke_Stub$address() {
        return IDispatch_RemoteInvoke_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IDispatch_RemoteInvoke_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IDispatch_RemoteInvoke_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IDispatch_RemoteInvoke_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDispatch_RemoteInvoke_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef IEnumVARIANT *LPENUMVARIANT
     * }
     */
    public static final AddressLayout LPENUMVARIANT = wgl_h.C_POINTER;

    private static class IID_IEnumVARIANT$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IEnumVARIANT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumVARIANT
     * }
     */
    public static GroupLayout IID_IEnumVARIANT$layout() {
        return IID_IEnumVARIANT$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumVARIANT
     * }
     */
    public static MemorySegment IID_IEnumVARIANT() {
        return IID_IEnumVARIANT$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumVARIANT
     * }
     */
    public static void IID_IEnumVARIANT(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IEnumVARIANT$constants.SEGMENT, 0L, IID_IEnumVARIANT$constants.LAYOUT.byteSize());
    }

    private static class IEnumVARIANT_RemoteNext_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumVARIANT_RemoteNext_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumVARIANT_RemoteNext_Proxy(IEnumVARIANT *This, ULONG celt, VARIANT *rgVar, ULONG *pCeltFetched)
     * }
     */
    public static FunctionDescriptor IEnumVARIANT_RemoteNext_Proxy$descriptor() {
        return IEnumVARIANT_RemoteNext_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumVARIANT_RemoteNext_Proxy(IEnumVARIANT *This, ULONG celt, VARIANT *rgVar, ULONG *pCeltFetched)
     * }
     */
    public static MethodHandle IEnumVARIANT_RemoteNext_Proxy$handle() {
        return IEnumVARIANT_RemoteNext_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumVARIANT_RemoteNext_Proxy(IEnumVARIANT *This, ULONG celt, VARIANT *rgVar, ULONG *pCeltFetched)
     * }
     */
    public static MemorySegment IEnumVARIANT_RemoteNext_Proxy$address() {
        return IEnumVARIANT_RemoteNext_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumVARIANT_RemoteNext_Proxy(IEnumVARIANT *This, ULONG celt, VARIANT *rgVar, ULONG *pCeltFetched)
     * }
     */
    public static int IEnumVARIANT_RemoteNext_Proxy(MemorySegment This, int celt, MemorySegment rgVar, MemorySegment pCeltFetched) {
        var mh$ = IEnumVARIANT_RemoteNext_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumVARIANT_RemoteNext_Proxy", This, celt, rgVar, pCeltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgVar, pCeltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumVARIANT_RemoteNext_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumVARIANT_RemoteNext_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IEnumVARIANT_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IEnumVARIANT_RemoteNext_Stub$descriptor() {
        return IEnumVARIANT_RemoteNext_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IEnumVARIANT_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IEnumVARIANT_RemoteNext_Stub$handle() {
        return IEnumVARIANT_RemoteNext_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IEnumVARIANT_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IEnumVARIANT_RemoteNext_Stub$address() {
        return IEnumVARIANT_RemoteNext_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IEnumVARIANT_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IEnumVARIANT_RemoteNext_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IEnumVARIANT_RemoteNext_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumVARIANT_RemoteNext_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef ITypeComp *LPTYPECOMP
     * }
     */
    public static final AddressLayout LPTYPECOMP = wgl_h.C_POINTER;
    private static final int DESCKIND_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagDESCKIND.DESCKIND_NONE = 0
     * }
     */
    public static int DESCKIND_NONE() {
        return DESCKIND_NONE;
    }
    private static final int DESCKIND_FUNCDESC = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagDESCKIND.DESCKIND_FUNCDESC = 1
     * }
     */
    public static int DESCKIND_FUNCDESC() {
        return DESCKIND_FUNCDESC;
    }
    private static final int DESCKIND_VARDESC = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagDESCKIND.DESCKIND_VARDESC = 2
     * }
     */
    public static int DESCKIND_VARDESC() {
        return DESCKIND_VARDESC;
    }
    private static final int DESCKIND_TYPECOMP = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagDESCKIND.DESCKIND_TYPECOMP = 3
     * }
     */
    public static int DESCKIND_TYPECOMP() {
        return DESCKIND_TYPECOMP;
    }
    private static final int DESCKIND_IMPLICITAPPOBJ = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagDESCKIND.DESCKIND_IMPLICITAPPOBJ = 4
     * }
     */
    public static int DESCKIND_IMPLICITAPPOBJ() {
        return DESCKIND_IMPLICITAPPOBJ;
    }
    private static final int DESCKIND_MAX = (int)5L;
    /**
     * {@snippet lang=c :
     * enum tagDESCKIND.DESCKIND_MAX = 5
     * }
     */
    public static int DESCKIND_MAX() {
        return DESCKIND_MAX;
    }
    /**
     * {@snippet lang=c :
     * typedef union tagBINDPTR {
     *     FUNCDESC *lpfuncdesc;
     *     VARDESC *lpvardesc;
     *     ITypeComp *lptcomp;
     * } *LPBINDPTR
     * }
     */
    public static final AddressLayout LPBINDPTR = wgl_h.C_POINTER;

    private static class IID_ITypeComp$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_ITypeComp").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeComp
     * }
     */
    public static GroupLayout IID_ITypeComp$layout() {
        return IID_ITypeComp$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeComp
     * }
     */
    public static MemorySegment IID_ITypeComp() {
        return IID_ITypeComp$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeComp
     * }
     */
    public static void IID_ITypeComp(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ITypeComp$constants.SEGMENT, 0L, IID_ITypeComp$constants.LAYOUT.byteSize());
    }

    private static class ITypeComp_RemoteBind_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeComp_RemoteBind_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeComp_RemoteBind_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, LPFUNCDESC *ppFuncDesc, LPVARDESC *ppVarDesc, ITypeComp **ppTypeComp, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static FunctionDescriptor ITypeComp_RemoteBind_Proxy$descriptor() {
        return ITypeComp_RemoteBind_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeComp_RemoteBind_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, LPFUNCDESC *ppFuncDesc, LPVARDESC *ppVarDesc, ITypeComp **ppTypeComp, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static MethodHandle ITypeComp_RemoteBind_Proxy$handle() {
        return ITypeComp_RemoteBind_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeComp_RemoteBind_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, LPFUNCDESC *ppFuncDesc, LPVARDESC *ppVarDesc, ITypeComp **ppTypeComp, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static MemorySegment ITypeComp_RemoteBind_Proxy$address() {
        return ITypeComp_RemoteBind_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeComp_RemoteBind_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, LPFUNCDESC *ppFuncDesc, LPVARDESC *ppVarDesc, ITypeComp **ppTypeComp, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static int ITypeComp_RemoteBind_Proxy(MemorySegment This, MemorySegment szName, int lHashVal, short wFlags, MemorySegment ppTInfo, MemorySegment pDescKind, MemorySegment ppFuncDesc, MemorySegment ppVarDesc, MemorySegment ppTypeComp, MemorySegment pDummy) {
        var mh$ = ITypeComp_RemoteBind_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeComp_RemoteBind_Proxy", This, szName, lHashVal, wFlags, ppTInfo, pDescKind, ppFuncDesc, ppVarDesc, ppTypeComp, pDummy);
            }
            return (int)mh$.invokeExact(This, szName, lHashVal, wFlags, ppTInfo, pDescKind, ppFuncDesc, ppVarDesc, ppTypeComp, pDummy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeComp_RemoteBind_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeComp_RemoteBind_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeComp_RemoteBind_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeComp_RemoteBind_Stub$descriptor() {
        return ITypeComp_RemoteBind_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeComp_RemoteBind_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeComp_RemoteBind_Stub$handle() {
        return ITypeComp_RemoteBind_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ITypeComp_RemoteBind_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment ITypeComp_RemoteBind_Stub$address() {
        return ITypeComp_RemoteBind_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ITypeComp_RemoteBind_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeComp_RemoteBind_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeComp_RemoteBind_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeComp_RemoteBind_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeComp_RemoteBindType_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeComp_RemoteBindType_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeComp_RemoteBindType_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo)
     * }
     */
    public static FunctionDescriptor ITypeComp_RemoteBindType_Proxy$descriptor() {
        return ITypeComp_RemoteBindType_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeComp_RemoteBindType_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo)
     * }
     */
    public static MethodHandle ITypeComp_RemoteBindType_Proxy$handle() {
        return ITypeComp_RemoteBindType_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeComp_RemoteBindType_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo)
     * }
     */
    public static MemorySegment ITypeComp_RemoteBindType_Proxy$address() {
        return ITypeComp_RemoteBindType_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeComp_RemoteBindType_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo)
     * }
     */
    public static int ITypeComp_RemoteBindType_Proxy(MemorySegment This, MemorySegment szName, int lHashVal, MemorySegment ppTInfo) {
        var mh$ = ITypeComp_RemoteBindType_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeComp_RemoteBindType_Proxy", This, szName, lHashVal, ppTInfo);
            }
            return (int)mh$.invokeExact(This, szName, lHashVal, ppTInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeComp_RemoteBindType_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeComp_RemoteBindType_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeComp_RemoteBindType_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeComp_RemoteBindType_Stub$descriptor() {
        return ITypeComp_RemoteBindType_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeComp_RemoteBindType_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeComp_RemoteBindType_Stub$handle() {
        return ITypeComp_RemoteBindType_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ITypeComp_RemoteBindType_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment ITypeComp_RemoteBindType_Stub$address() {
        return ITypeComp_RemoteBindType_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ITypeComp_RemoteBindType_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeComp_RemoteBindType_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeComp_RemoteBindType_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeComp_RemoteBindType_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec$layout() {
        return __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec$segment() {
        return __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec() {
        return __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec$layout() {
        return __MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec$segment() {
        return __MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec() {
        return __MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef ITypeInfo *LPTYPEINFO
     * }
     */
    public static final AddressLayout LPTYPEINFO = wgl_h.C_POINTER;

    private static class IID_ITypeInfo$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_ITypeInfo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeInfo
     * }
     */
    public static GroupLayout IID_ITypeInfo$layout() {
        return IID_ITypeInfo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeInfo
     * }
     */
    public static MemorySegment IID_ITypeInfo() {
        return IID_ITypeInfo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeInfo
     * }
     */
    public static void IID_ITypeInfo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ITypeInfo$constants.SEGMENT, 0L, IID_ITypeInfo$constants.LAYOUT.byteSize());
    }

    private static class ITypeInfo_RemoteGetTypeAttr_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_RemoteGetTypeAttr_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetTypeAttr_Proxy(ITypeInfo *This, LPTYPEATTR *ppTypeAttr, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static FunctionDescriptor ITypeInfo_RemoteGetTypeAttr_Proxy$descriptor() {
        return ITypeInfo_RemoteGetTypeAttr_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetTypeAttr_Proxy(ITypeInfo *This, LPTYPEATTR *ppTypeAttr, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static MethodHandle ITypeInfo_RemoteGetTypeAttr_Proxy$handle() {
        return ITypeInfo_RemoteGetTypeAttr_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetTypeAttr_Proxy(ITypeInfo *This, LPTYPEATTR *ppTypeAttr, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static MemorySegment ITypeInfo_RemoteGetTypeAttr_Proxy$address() {
        return ITypeInfo_RemoteGetTypeAttr_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetTypeAttr_Proxy(ITypeInfo *This, LPTYPEATTR *ppTypeAttr, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static int ITypeInfo_RemoteGetTypeAttr_Proxy(MemorySegment This, MemorySegment ppTypeAttr, MemorySegment pDummy) {
        var mh$ = ITypeInfo_RemoteGetTypeAttr_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_RemoteGetTypeAttr_Proxy", This, ppTypeAttr, pDummy);
            }
            return (int)mh$.invokeExact(This, ppTypeAttr, pDummy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_RemoteGetTypeAttr_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_RemoteGetTypeAttr_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetTypeAttr_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeInfo_RemoteGetTypeAttr_Stub$descriptor() {
        return ITypeInfo_RemoteGetTypeAttr_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetTypeAttr_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeInfo_RemoteGetTypeAttr_Stub$handle() {
        return ITypeInfo_RemoteGetTypeAttr_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetTypeAttr_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment ITypeInfo_RemoteGetTypeAttr_Stub$address() {
        return ITypeInfo_RemoteGetTypeAttr_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetTypeAttr_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeInfo_RemoteGetTypeAttr_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeInfo_RemoteGetTypeAttr_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_RemoteGetTypeAttr_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_RemoteGetFuncDesc_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_RemoteGetFuncDesc_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetFuncDesc_Proxy(ITypeInfo *This, UINT index, LPFUNCDESC *ppFuncDesc, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static FunctionDescriptor ITypeInfo_RemoteGetFuncDesc_Proxy$descriptor() {
        return ITypeInfo_RemoteGetFuncDesc_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetFuncDesc_Proxy(ITypeInfo *This, UINT index, LPFUNCDESC *ppFuncDesc, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static MethodHandle ITypeInfo_RemoteGetFuncDesc_Proxy$handle() {
        return ITypeInfo_RemoteGetFuncDesc_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetFuncDesc_Proxy(ITypeInfo *This, UINT index, LPFUNCDESC *ppFuncDesc, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static MemorySegment ITypeInfo_RemoteGetFuncDesc_Proxy$address() {
        return ITypeInfo_RemoteGetFuncDesc_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetFuncDesc_Proxy(ITypeInfo *This, UINT index, LPFUNCDESC *ppFuncDesc, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static int ITypeInfo_RemoteGetFuncDesc_Proxy(MemorySegment This, int index, MemorySegment ppFuncDesc, MemorySegment pDummy) {
        var mh$ = ITypeInfo_RemoteGetFuncDesc_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_RemoteGetFuncDesc_Proxy", This, index, ppFuncDesc, pDummy);
            }
            return (int)mh$.invokeExact(This, index, ppFuncDesc, pDummy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_RemoteGetFuncDesc_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_RemoteGetFuncDesc_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetFuncDesc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeInfo_RemoteGetFuncDesc_Stub$descriptor() {
        return ITypeInfo_RemoteGetFuncDesc_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetFuncDesc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeInfo_RemoteGetFuncDesc_Stub$handle() {
        return ITypeInfo_RemoteGetFuncDesc_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetFuncDesc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment ITypeInfo_RemoteGetFuncDesc_Stub$address() {
        return ITypeInfo_RemoteGetFuncDesc_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetFuncDesc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeInfo_RemoteGetFuncDesc_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeInfo_RemoteGetFuncDesc_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_RemoteGetFuncDesc_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_RemoteGetVarDesc_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_RemoteGetVarDesc_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetVarDesc_Proxy(ITypeInfo *This, UINT index, LPVARDESC *ppVarDesc, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static FunctionDescriptor ITypeInfo_RemoteGetVarDesc_Proxy$descriptor() {
        return ITypeInfo_RemoteGetVarDesc_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetVarDesc_Proxy(ITypeInfo *This, UINT index, LPVARDESC *ppVarDesc, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static MethodHandle ITypeInfo_RemoteGetVarDesc_Proxy$handle() {
        return ITypeInfo_RemoteGetVarDesc_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetVarDesc_Proxy(ITypeInfo *This, UINT index, LPVARDESC *ppVarDesc, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static MemorySegment ITypeInfo_RemoteGetVarDesc_Proxy$address() {
        return ITypeInfo_RemoteGetVarDesc_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetVarDesc_Proxy(ITypeInfo *This, UINT index, LPVARDESC *ppVarDesc, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static int ITypeInfo_RemoteGetVarDesc_Proxy(MemorySegment This, int index, MemorySegment ppVarDesc, MemorySegment pDummy) {
        var mh$ = ITypeInfo_RemoteGetVarDesc_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_RemoteGetVarDesc_Proxy", This, index, ppVarDesc, pDummy);
            }
            return (int)mh$.invokeExact(This, index, ppVarDesc, pDummy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_RemoteGetVarDesc_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_RemoteGetVarDesc_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetVarDesc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeInfo_RemoteGetVarDesc_Stub$descriptor() {
        return ITypeInfo_RemoteGetVarDesc_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetVarDesc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeInfo_RemoteGetVarDesc_Stub$handle() {
        return ITypeInfo_RemoteGetVarDesc_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetVarDesc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment ITypeInfo_RemoteGetVarDesc_Stub$address() {
        return ITypeInfo_RemoteGetVarDesc_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetVarDesc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeInfo_RemoteGetVarDesc_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeInfo_RemoteGetVarDesc_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_RemoteGetVarDesc_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_RemoteGetNames_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_RemoteGetNames_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetNames_Proxy(ITypeInfo *This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames)
     * }
     */
    public static FunctionDescriptor ITypeInfo_RemoteGetNames_Proxy$descriptor() {
        return ITypeInfo_RemoteGetNames_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetNames_Proxy(ITypeInfo *This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames)
     * }
     */
    public static MethodHandle ITypeInfo_RemoteGetNames_Proxy$handle() {
        return ITypeInfo_RemoteGetNames_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetNames_Proxy(ITypeInfo *This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames)
     * }
     */
    public static MemorySegment ITypeInfo_RemoteGetNames_Proxy$address() {
        return ITypeInfo_RemoteGetNames_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetNames_Proxy(ITypeInfo *This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames)
     * }
     */
    public static int ITypeInfo_RemoteGetNames_Proxy(MemorySegment This, int memid, MemorySegment rgBstrNames, int cMaxNames, MemorySegment pcNames) {
        var mh$ = ITypeInfo_RemoteGetNames_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_RemoteGetNames_Proxy", This, memid, rgBstrNames, cMaxNames, pcNames);
            }
            return (int)mh$.invokeExact(This, memid, rgBstrNames, cMaxNames, pcNames);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_RemoteGetNames_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_RemoteGetNames_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetNames_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeInfo_RemoteGetNames_Stub$descriptor() {
        return ITypeInfo_RemoteGetNames_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetNames_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeInfo_RemoteGetNames_Stub$handle() {
        return ITypeInfo_RemoteGetNames_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetNames_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment ITypeInfo_RemoteGetNames_Stub$address() {
        return ITypeInfo_RemoteGetNames_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetNames_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeInfo_RemoteGetNames_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeInfo_RemoteGetNames_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_RemoteGetNames_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_LocalGetIDsOfNames_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_LocalGetIDsOfNames_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalGetIDsOfNames_Proxy(ITypeInfo *This)
     * }
     */
    public static FunctionDescriptor ITypeInfo_LocalGetIDsOfNames_Proxy$descriptor() {
        return ITypeInfo_LocalGetIDsOfNames_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalGetIDsOfNames_Proxy(ITypeInfo *This)
     * }
     */
    public static MethodHandle ITypeInfo_LocalGetIDsOfNames_Proxy$handle() {
        return ITypeInfo_LocalGetIDsOfNames_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalGetIDsOfNames_Proxy(ITypeInfo *This)
     * }
     */
    public static MemorySegment ITypeInfo_LocalGetIDsOfNames_Proxy$address() {
        return ITypeInfo_LocalGetIDsOfNames_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalGetIDsOfNames_Proxy(ITypeInfo *This)
     * }
     */
    public static int ITypeInfo_LocalGetIDsOfNames_Proxy(MemorySegment This) {
        var mh$ = ITypeInfo_LocalGetIDsOfNames_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_LocalGetIDsOfNames_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_LocalGetIDsOfNames_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_LocalGetIDsOfNames_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeInfo_LocalGetIDsOfNames_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeInfo_LocalGetIDsOfNames_Stub$descriptor() {
        return ITypeInfo_LocalGetIDsOfNames_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeInfo_LocalGetIDsOfNames_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeInfo_LocalGetIDsOfNames_Stub$handle() {
        return ITypeInfo_LocalGetIDsOfNames_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ITypeInfo_LocalGetIDsOfNames_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment ITypeInfo_LocalGetIDsOfNames_Stub$address() {
        return ITypeInfo_LocalGetIDsOfNames_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ITypeInfo_LocalGetIDsOfNames_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeInfo_LocalGetIDsOfNames_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeInfo_LocalGetIDsOfNames_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_LocalGetIDsOfNames_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_LocalInvoke_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_LocalInvoke_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalInvoke_Proxy(ITypeInfo *This)
     * }
     */
    public static FunctionDescriptor ITypeInfo_LocalInvoke_Proxy$descriptor() {
        return ITypeInfo_LocalInvoke_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalInvoke_Proxy(ITypeInfo *This)
     * }
     */
    public static MethodHandle ITypeInfo_LocalInvoke_Proxy$handle() {
        return ITypeInfo_LocalInvoke_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalInvoke_Proxy(ITypeInfo *This)
     * }
     */
    public static MemorySegment ITypeInfo_LocalInvoke_Proxy$address() {
        return ITypeInfo_LocalInvoke_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalInvoke_Proxy(ITypeInfo *This)
     * }
     */
    public static int ITypeInfo_LocalInvoke_Proxy(MemorySegment This) {
        var mh$ = ITypeInfo_LocalInvoke_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_LocalInvoke_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_LocalInvoke_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_LocalInvoke_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeInfo_LocalInvoke_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeInfo_LocalInvoke_Stub$descriptor() {
        return ITypeInfo_LocalInvoke_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeInfo_LocalInvoke_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeInfo_LocalInvoke_Stub$handle() {
        return ITypeInfo_LocalInvoke_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ITypeInfo_LocalInvoke_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment ITypeInfo_LocalInvoke_Stub$address() {
        return ITypeInfo_LocalInvoke_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ITypeInfo_LocalInvoke_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeInfo_LocalInvoke_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeInfo_LocalInvoke_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_LocalInvoke_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_RemoteGetDocumentation_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_RemoteGetDocumentation_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetDocumentation_Proxy(ITypeInfo *This, MEMBERID memid, DWORD refPtrFlags, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static FunctionDescriptor ITypeInfo_RemoteGetDocumentation_Proxy$descriptor() {
        return ITypeInfo_RemoteGetDocumentation_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetDocumentation_Proxy(ITypeInfo *This, MEMBERID memid, DWORD refPtrFlags, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static MethodHandle ITypeInfo_RemoteGetDocumentation_Proxy$handle() {
        return ITypeInfo_RemoteGetDocumentation_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetDocumentation_Proxy(ITypeInfo *This, MEMBERID memid, DWORD refPtrFlags, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static MemorySegment ITypeInfo_RemoteGetDocumentation_Proxy$address() {
        return ITypeInfo_RemoteGetDocumentation_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetDocumentation_Proxy(ITypeInfo *This, MEMBERID memid, DWORD refPtrFlags, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static int ITypeInfo_RemoteGetDocumentation_Proxy(MemorySegment This, int memid, int refPtrFlags, MemorySegment pBstrName, MemorySegment pBstrDocString, MemorySegment pdwHelpContext, MemorySegment pBstrHelpFile) {
        var mh$ = ITypeInfo_RemoteGetDocumentation_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_RemoteGetDocumentation_Proxy", This, memid, refPtrFlags, pBstrName, pBstrDocString, pdwHelpContext, pBstrHelpFile);
            }
            return (int)mh$.invokeExact(This, memid, refPtrFlags, pBstrName, pBstrDocString, pdwHelpContext, pBstrHelpFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_RemoteGetDocumentation_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_RemoteGetDocumentation_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetDocumentation_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeInfo_RemoteGetDocumentation_Stub$descriptor() {
        return ITypeInfo_RemoteGetDocumentation_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetDocumentation_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeInfo_RemoteGetDocumentation_Stub$handle() {
        return ITypeInfo_RemoteGetDocumentation_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetDocumentation_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment ITypeInfo_RemoteGetDocumentation_Stub$address() {
        return ITypeInfo_RemoteGetDocumentation_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetDocumentation_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeInfo_RemoteGetDocumentation_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeInfo_RemoteGetDocumentation_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_RemoteGetDocumentation_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_RemoteGetDllEntry_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_INT,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_RemoteGetDllEntry_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetDllEntry_Proxy(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, DWORD refPtrFlags, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal)
     * }
     */
    public static FunctionDescriptor ITypeInfo_RemoteGetDllEntry_Proxy$descriptor() {
        return ITypeInfo_RemoteGetDllEntry_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetDllEntry_Proxy(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, DWORD refPtrFlags, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal)
     * }
     */
    public static MethodHandle ITypeInfo_RemoteGetDllEntry_Proxy$handle() {
        return ITypeInfo_RemoteGetDllEntry_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetDllEntry_Proxy(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, DWORD refPtrFlags, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal)
     * }
     */
    public static MemorySegment ITypeInfo_RemoteGetDllEntry_Proxy$address() {
        return ITypeInfo_RemoteGetDllEntry_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetDllEntry_Proxy(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, DWORD refPtrFlags, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal)
     * }
     */
    public static int ITypeInfo_RemoteGetDllEntry_Proxy(MemorySegment This, int memid, int invKind, int refPtrFlags, MemorySegment pBstrDllName, MemorySegment pBstrName, MemorySegment pwOrdinal) {
        var mh$ = ITypeInfo_RemoteGetDllEntry_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_RemoteGetDllEntry_Proxy", This, memid, invKind, refPtrFlags, pBstrDllName, pBstrName, pwOrdinal);
            }
            return (int)mh$.invokeExact(This, memid, invKind, refPtrFlags, pBstrDllName, pBstrName, pwOrdinal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_RemoteGetDllEntry_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_RemoteGetDllEntry_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetDllEntry_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeInfo_RemoteGetDllEntry_Stub$descriptor() {
        return ITypeInfo_RemoteGetDllEntry_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetDllEntry_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeInfo_RemoteGetDllEntry_Stub$handle() {
        return ITypeInfo_RemoteGetDllEntry_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetDllEntry_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment ITypeInfo_RemoteGetDllEntry_Stub$address() {
        return ITypeInfo_RemoteGetDllEntry_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetDllEntry_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeInfo_RemoteGetDllEntry_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeInfo_RemoteGetDllEntry_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_RemoteGetDllEntry_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_LocalAddressOfMember_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_LocalAddressOfMember_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalAddressOfMember_Proxy(ITypeInfo *This)
     * }
     */
    public static FunctionDescriptor ITypeInfo_LocalAddressOfMember_Proxy$descriptor() {
        return ITypeInfo_LocalAddressOfMember_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalAddressOfMember_Proxy(ITypeInfo *This)
     * }
     */
    public static MethodHandle ITypeInfo_LocalAddressOfMember_Proxy$handle() {
        return ITypeInfo_LocalAddressOfMember_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalAddressOfMember_Proxy(ITypeInfo *This)
     * }
     */
    public static MemorySegment ITypeInfo_LocalAddressOfMember_Proxy$address() {
        return ITypeInfo_LocalAddressOfMember_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalAddressOfMember_Proxy(ITypeInfo *This)
     * }
     */
    public static int ITypeInfo_LocalAddressOfMember_Proxy(MemorySegment This) {
        var mh$ = ITypeInfo_LocalAddressOfMember_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_LocalAddressOfMember_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_LocalAddressOfMember_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_LocalAddressOfMember_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeInfo_LocalAddressOfMember_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeInfo_LocalAddressOfMember_Stub$descriptor() {
        return ITypeInfo_LocalAddressOfMember_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeInfo_LocalAddressOfMember_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeInfo_LocalAddressOfMember_Stub$handle() {
        return ITypeInfo_LocalAddressOfMember_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ITypeInfo_LocalAddressOfMember_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment ITypeInfo_LocalAddressOfMember_Stub$address() {
        return ITypeInfo_LocalAddressOfMember_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ITypeInfo_LocalAddressOfMember_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeInfo_LocalAddressOfMember_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeInfo_LocalAddressOfMember_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_LocalAddressOfMember_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_RemoteCreateInstance_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_RemoteCreateInstance_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteCreateInstance_Proxy(ITypeInfo *This, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static FunctionDescriptor ITypeInfo_RemoteCreateInstance_Proxy$descriptor() {
        return ITypeInfo_RemoteCreateInstance_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteCreateInstance_Proxy(ITypeInfo *This, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static MethodHandle ITypeInfo_RemoteCreateInstance_Proxy$handle() {
        return ITypeInfo_RemoteCreateInstance_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteCreateInstance_Proxy(ITypeInfo *This, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static MemorySegment ITypeInfo_RemoteCreateInstance_Proxy$address() {
        return ITypeInfo_RemoteCreateInstance_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteCreateInstance_Proxy(ITypeInfo *This, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static int ITypeInfo_RemoteCreateInstance_Proxy(MemorySegment This, MemorySegment riid, MemorySegment ppvObj) {
        var mh$ = ITypeInfo_RemoteCreateInstance_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_RemoteCreateInstance_Proxy", This, riid, ppvObj);
            }
            return (int)mh$.invokeExact(This, riid, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_RemoteCreateInstance_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_RemoteCreateInstance_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteCreateInstance_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeInfo_RemoteCreateInstance_Stub$descriptor() {
        return ITypeInfo_RemoteCreateInstance_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteCreateInstance_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeInfo_RemoteCreateInstance_Stub$handle() {
        return ITypeInfo_RemoteCreateInstance_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteCreateInstance_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment ITypeInfo_RemoteCreateInstance_Stub$address() {
        return ITypeInfo_RemoteCreateInstance_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ITypeInfo_RemoteCreateInstance_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeInfo_RemoteCreateInstance_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeInfo_RemoteCreateInstance_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_RemoteCreateInstance_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_RemoteGetContainingTypeLib_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_RemoteGetContainingTypeLib_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetContainingTypeLib_Proxy(ITypeInfo *This, ITypeLib **ppTLib, UINT *pIndex)
     * }
     */
    public static FunctionDescriptor ITypeInfo_RemoteGetContainingTypeLib_Proxy$descriptor() {
        return ITypeInfo_RemoteGetContainingTypeLib_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetContainingTypeLib_Proxy(ITypeInfo *This, ITypeLib **ppTLib, UINT *pIndex)
     * }
     */
    public static MethodHandle ITypeInfo_RemoteGetContainingTypeLib_Proxy$handle() {
        return ITypeInfo_RemoteGetContainingTypeLib_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetContainingTypeLib_Proxy(ITypeInfo *This, ITypeLib **ppTLib, UINT *pIndex)
     * }
     */
    public static MemorySegment ITypeInfo_RemoteGetContainingTypeLib_Proxy$address() {
        return ITypeInfo_RemoteGetContainingTypeLib_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_RemoteGetContainingTypeLib_Proxy(ITypeInfo *This, ITypeLib **ppTLib, UINT *pIndex)
     * }
     */
    public static int ITypeInfo_RemoteGetContainingTypeLib_Proxy(MemorySegment This, MemorySegment ppTLib, MemorySegment pIndex) {
        var mh$ = ITypeInfo_RemoteGetContainingTypeLib_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_RemoteGetContainingTypeLib_Proxy", This, ppTLib, pIndex);
            }
            return (int)mh$.invokeExact(This, ppTLib, pIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_RemoteGetContainingTypeLib_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_RemoteGetContainingTypeLib_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetContainingTypeLib_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeInfo_RemoteGetContainingTypeLib_Stub$descriptor() {
        return ITypeInfo_RemoteGetContainingTypeLib_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetContainingTypeLib_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeInfo_RemoteGetContainingTypeLib_Stub$handle() {
        return ITypeInfo_RemoteGetContainingTypeLib_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetContainingTypeLib_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment ITypeInfo_RemoteGetContainingTypeLib_Stub$address() {
        return ITypeInfo_RemoteGetContainingTypeLib_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ITypeInfo_RemoteGetContainingTypeLib_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeInfo_RemoteGetContainingTypeLib_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeInfo_RemoteGetContainingTypeLib_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_RemoteGetContainingTypeLib_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_LocalReleaseTypeAttr_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_LocalReleaseTypeAttr_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalReleaseTypeAttr_Proxy(ITypeInfo *This)
     * }
     */
    public static FunctionDescriptor ITypeInfo_LocalReleaseTypeAttr_Proxy$descriptor() {
        return ITypeInfo_LocalReleaseTypeAttr_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalReleaseTypeAttr_Proxy(ITypeInfo *This)
     * }
     */
    public static MethodHandle ITypeInfo_LocalReleaseTypeAttr_Proxy$handle() {
        return ITypeInfo_LocalReleaseTypeAttr_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalReleaseTypeAttr_Proxy(ITypeInfo *This)
     * }
     */
    public static MemorySegment ITypeInfo_LocalReleaseTypeAttr_Proxy$address() {
        return ITypeInfo_LocalReleaseTypeAttr_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalReleaseTypeAttr_Proxy(ITypeInfo *This)
     * }
     */
    public static int ITypeInfo_LocalReleaseTypeAttr_Proxy(MemorySegment This) {
        var mh$ = ITypeInfo_LocalReleaseTypeAttr_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_LocalReleaseTypeAttr_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_LocalReleaseTypeAttr_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_LocalReleaseTypeAttr_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeInfo_LocalReleaseTypeAttr_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeInfo_LocalReleaseTypeAttr_Stub$descriptor() {
        return ITypeInfo_LocalReleaseTypeAttr_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeInfo_LocalReleaseTypeAttr_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeInfo_LocalReleaseTypeAttr_Stub$handle() {
        return ITypeInfo_LocalReleaseTypeAttr_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ITypeInfo_LocalReleaseTypeAttr_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment ITypeInfo_LocalReleaseTypeAttr_Stub$address() {
        return ITypeInfo_LocalReleaseTypeAttr_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ITypeInfo_LocalReleaseTypeAttr_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeInfo_LocalReleaseTypeAttr_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeInfo_LocalReleaseTypeAttr_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_LocalReleaseTypeAttr_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_LocalReleaseFuncDesc_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_LocalReleaseFuncDesc_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalReleaseFuncDesc_Proxy(ITypeInfo *This)
     * }
     */
    public static FunctionDescriptor ITypeInfo_LocalReleaseFuncDesc_Proxy$descriptor() {
        return ITypeInfo_LocalReleaseFuncDesc_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalReleaseFuncDesc_Proxy(ITypeInfo *This)
     * }
     */
    public static MethodHandle ITypeInfo_LocalReleaseFuncDesc_Proxy$handle() {
        return ITypeInfo_LocalReleaseFuncDesc_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalReleaseFuncDesc_Proxy(ITypeInfo *This)
     * }
     */
    public static MemorySegment ITypeInfo_LocalReleaseFuncDesc_Proxy$address() {
        return ITypeInfo_LocalReleaseFuncDesc_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalReleaseFuncDesc_Proxy(ITypeInfo *This)
     * }
     */
    public static int ITypeInfo_LocalReleaseFuncDesc_Proxy(MemorySegment This) {
        var mh$ = ITypeInfo_LocalReleaseFuncDesc_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_LocalReleaseFuncDesc_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_LocalReleaseFuncDesc_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_LocalReleaseFuncDesc_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeInfo_LocalReleaseFuncDesc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeInfo_LocalReleaseFuncDesc_Stub$descriptor() {
        return ITypeInfo_LocalReleaseFuncDesc_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeInfo_LocalReleaseFuncDesc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeInfo_LocalReleaseFuncDesc_Stub$handle() {
        return ITypeInfo_LocalReleaseFuncDesc_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ITypeInfo_LocalReleaseFuncDesc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment ITypeInfo_LocalReleaseFuncDesc_Stub$address() {
        return ITypeInfo_LocalReleaseFuncDesc_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ITypeInfo_LocalReleaseFuncDesc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeInfo_LocalReleaseFuncDesc_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeInfo_LocalReleaseFuncDesc_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_LocalReleaseFuncDesc_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_LocalReleaseVarDesc_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_LocalReleaseVarDesc_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalReleaseVarDesc_Proxy(ITypeInfo *This)
     * }
     */
    public static FunctionDescriptor ITypeInfo_LocalReleaseVarDesc_Proxy$descriptor() {
        return ITypeInfo_LocalReleaseVarDesc_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalReleaseVarDesc_Proxy(ITypeInfo *This)
     * }
     */
    public static MethodHandle ITypeInfo_LocalReleaseVarDesc_Proxy$handle() {
        return ITypeInfo_LocalReleaseVarDesc_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalReleaseVarDesc_Proxy(ITypeInfo *This)
     * }
     */
    public static MemorySegment ITypeInfo_LocalReleaseVarDesc_Proxy$address() {
        return ITypeInfo_LocalReleaseVarDesc_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_LocalReleaseVarDesc_Proxy(ITypeInfo *This)
     * }
     */
    public static int ITypeInfo_LocalReleaseVarDesc_Proxy(MemorySegment This) {
        var mh$ = ITypeInfo_LocalReleaseVarDesc_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_LocalReleaseVarDesc_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_LocalReleaseVarDesc_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_LocalReleaseVarDesc_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeInfo_LocalReleaseVarDesc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeInfo_LocalReleaseVarDesc_Stub$descriptor() {
        return ITypeInfo_LocalReleaseVarDesc_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeInfo_LocalReleaseVarDesc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeInfo_LocalReleaseVarDesc_Stub$handle() {
        return ITypeInfo_LocalReleaseVarDesc_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ITypeInfo_LocalReleaseVarDesc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment ITypeInfo_LocalReleaseVarDesc_Stub$address() {
        return ITypeInfo_LocalReleaseVarDesc_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ITypeInfo_LocalReleaseVarDesc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeInfo_LocalReleaseVarDesc_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeInfo_LocalReleaseVarDesc_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_LocalReleaseVarDesc_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef ITypeInfo2 *LPTYPEINFO2
     * }
     */
    public static final AddressLayout LPTYPEINFO2 = wgl_h.C_POINTER;

    private static class IID_ITypeInfo2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_ITypeInfo2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeInfo2
     * }
     */
    public static GroupLayout IID_ITypeInfo2$layout() {
        return IID_ITypeInfo2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeInfo2
     * }
     */
    public static MemorySegment IID_ITypeInfo2() {
        return IID_ITypeInfo2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeInfo2
     * }
     */
    public static void IID_ITypeInfo2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ITypeInfo2$constants.SEGMENT, 0L, IID_ITypeInfo2$constants.LAYOUT.byteSize());
    }

    private static class ITypeInfo2_RemoteGetDocumentation2_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo2_RemoteGetDocumentation2_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo2_RemoteGetDocumentation2_Proxy(ITypeInfo2 *This, MEMBERID memid, LCID lcid, DWORD refPtrFlags, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static FunctionDescriptor ITypeInfo2_RemoteGetDocumentation2_Proxy$descriptor() {
        return ITypeInfo2_RemoteGetDocumentation2_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo2_RemoteGetDocumentation2_Proxy(ITypeInfo2 *This, MEMBERID memid, LCID lcid, DWORD refPtrFlags, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static MethodHandle ITypeInfo2_RemoteGetDocumentation2_Proxy$handle() {
        return ITypeInfo2_RemoteGetDocumentation2_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo2_RemoteGetDocumentation2_Proxy(ITypeInfo2 *This, MEMBERID memid, LCID lcid, DWORD refPtrFlags, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static MemorySegment ITypeInfo2_RemoteGetDocumentation2_Proxy$address() {
        return ITypeInfo2_RemoteGetDocumentation2_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo2_RemoteGetDocumentation2_Proxy(ITypeInfo2 *This, MEMBERID memid, LCID lcid, DWORD refPtrFlags, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static int ITypeInfo2_RemoteGetDocumentation2_Proxy(MemorySegment This, int memid, int lcid, int refPtrFlags, MemorySegment pbstrHelpString, MemorySegment pdwHelpStringContext, MemorySegment pbstrHelpStringDll) {
        var mh$ = ITypeInfo2_RemoteGetDocumentation2_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo2_RemoteGetDocumentation2_Proxy", This, memid, lcid, refPtrFlags, pbstrHelpString, pdwHelpStringContext, pbstrHelpStringDll);
            }
            return (int)mh$.invokeExact(This, memid, lcid, refPtrFlags, pbstrHelpString, pdwHelpStringContext, pbstrHelpStringDll);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo2_RemoteGetDocumentation2_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo2_RemoteGetDocumentation2_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeInfo2_RemoteGetDocumentation2_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeInfo2_RemoteGetDocumentation2_Stub$descriptor() {
        return ITypeInfo2_RemoteGetDocumentation2_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeInfo2_RemoteGetDocumentation2_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeInfo2_RemoteGetDocumentation2_Stub$handle() {
        return ITypeInfo2_RemoteGetDocumentation2_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ITypeInfo2_RemoteGetDocumentation2_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment ITypeInfo2_RemoteGetDocumentation2_Stub$address() {
        return ITypeInfo2_RemoteGetDocumentation2_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ITypeInfo2_RemoteGetDocumentation2_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeInfo2_RemoteGetDocumentation2_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeInfo2_RemoteGetDocumentation2_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo2_RemoteGetDocumentation2_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec$layout() {
        return __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec$segment() {
        return __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec() {
        return __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec$layout() {
        return __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec$segment() {
        return __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec() {
        return __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    private static final int SYS_WIN16 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagSYSKIND.SYS_WIN16 = 0
     * }
     */
    public static int SYS_WIN16() {
        return SYS_WIN16;
    }
    private static final int SYS_WIN32 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagSYSKIND.SYS_WIN32 = 1
     * }
     */
    public static int SYS_WIN32() {
        return SYS_WIN32;
    }
    private static final int SYS_MAC = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagSYSKIND.SYS_MAC = 2
     * }
     */
    public static int SYS_MAC() {
        return SYS_MAC;
    }
    private static final int SYS_WIN64 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagSYSKIND.SYS_WIN64 = 3
     * }
     */
    public static int SYS_WIN64() {
        return SYS_WIN64;
    }
    private static final int LIBFLAG_FRESTRICTED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagLIBFLAGS.LIBFLAG_FRESTRICTED = 1
     * }
     */
    public static int LIBFLAG_FRESTRICTED() {
        return LIBFLAG_FRESTRICTED;
    }
    private static final int LIBFLAG_FCONTROL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagLIBFLAGS.LIBFLAG_FCONTROL = 2
     * }
     */
    public static int LIBFLAG_FCONTROL() {
        return LIBFLAG_FCONTROL;
    }
    private static final int LIBFLAG_FHIDDEN = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagLIBFLAGS.LIBFLAG_FHIDDEN = 4
     * }
     */
    public static int LIBFLAG_FHIDDEN() {
        return LIBFLAG_FHIDDEN;
    }
    private static final int LIBFLAG_FHASDISKIMAGE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagLIBFLAGS.LIBFLAG_FHASDISKIMAGE = 8
     * }
     */
    public static int LIBFLAG_FHASDISKIMAGE() {
        return LIBFLAG_FHASDISKIMAGE;
    }
    /**
     * {@snippet lang=c :
     * typedef ITypeLib *LPTYPELIB
     * }
     */
    public static final AddressLayout LPTYPELIB = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagTLIBATTR {
     *     GUID guid;
     *     LCID lcid;
     *     SYSKIND syskind;
     *     WORD wMajorVerNum;
     *     WORD wMinorVerNum;
     *     WORD wLibFlags;
     * } *LPTLIBATTR
     * }
     */
    public static final AddressLayout LPTLIBATTR = wgl_h.C_POINTER;

    private static class IID_ITypeLib$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_ITypeLib").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeLib
     * }
     */
    public static GroupLayout IID_ITypeLib$layout() {
        return IID_ITypeLib$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeLib
     * }
     */
    public static MemorySegment IID_ITypeLib() {
        return IID_ITypeLib$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeLib
     * }
     */
    public static void IID_ITypeLib(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ITypeLib$constants.SEGMENT, 0L, IID_ITypeLib$constants.LAYOUT.byteSize());
    }

    private static class ITypeLib_RemoteGetTypeInfoCount_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeLib_RemoteGetTypeInfoCount_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_RemoteGetTypeInfoCount_Proxy(ITypeLib *This, UINT *pcTInfo)
     * }
     */
    public static FunctionDescriptor ITypeLib_RemoteGetTypeInfoCount_Proxy$descriptor() {
        return ITypeLib_RemoteGetTypeInfoCount_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_RemoteGetTypeInfoCount_Proxy(ITypeLib *This, UINT *pcTInfo)
     * }
     */
    public static MethodHandle ITypeLib_RemoteGetTypeInfoCount_Proxy$handle() {
        return ITypeLib_RemoteGetTypeInfoCount_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_RemoteGetTypeInfoCount_Proxy(ITypeLib *This, UINT *pcTInfo)
     * }
     */
    public static MemorySegment ITypeLib_RemoteGetTypeInfoCount_Proxy$address() {
        return ITypeLib_RemoteGetTypeInfoCount_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib_RemoteGetTypeInfoCount_Proxy(ITypeLib *This, UINT *pcTInfo)
     * }
     */
    public static int ITypeLib_RemoteGetTypeInfoCount_Proxy(MemorySegment This, MemorySegment pcTInfo) {
        var mh$ = ITypeLib_RemoteGetTypeInfoCount_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_RemoteGetTypeInfoCount_Proxy", This, pcTInfo);
            }
            return (int)mh$.invokeExact(This, pcTInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_RemoteGetTypeInfoCount_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeLib_RemoteGetTypeInfoCount_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeLib_RemoteGetTypeInfoCount_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeLib_RemoteGetTypeInfoCount_Stub$descriptor() {
        return ITypeLib_RemoteGetTypeInfoCount_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeLib_RemoteGetTypeInfoCount_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeLib_RemoteGetTypeInfoCount_Stub$handle() {
        return ITypeLib_RemoteGetTypeInfoCount_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ITypeLib_RemoteGetTypeInfoCount_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment ITypeLib_RemoteGetTypeInfoCount_Stub$address() {
        return ITypeLib_RemoteGetTypeInfoCount_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ITypeLib_RemoteGetTypeInfoCount_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeLib_RemoteGetTypeInfoCount_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeLib_RemoteGetTypeInfoCount_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_RemoteGetTypeInfoCount_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_RemoteGetLibAttr_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeLib_RemoteGetLibAttr_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_RemoteGetLibAttr_Proxy(ITypeLib *This, LPTLIBATTR *ppTLibAttr, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static FunctionDescriptor ITypeLib_RemoteGetLibAttr_Proxy$descriptor() {
        return ITypeLib_RemoteGetLibAttr_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_RemoteGetLibAttr_Proxy(ITypeLib *This, LPTLIBATTR *ppTLibAttr, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static MethodHandle ITypeLib_RemoteGetLibAttr_Proxy$handle() {
        return ITypeLib_RemoteGetLibAttr_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_RemoteGetLibAttr_Proxy(ITypeLib *This, LPTLIBATTR *ppTLibAttr, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static MemorySegment ITypeLib_RemoteGetLibAttr_Proxy$address() {
        return ITypeLib_RemoteGetLibAttr_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib_RemoteGetLibAttr_Proxy(ITypeLib *This, LPTLIBATTR *ppTLibAttr, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static int ITypeLib_RemoteGetLibAttr_Proxy(MemorySegment This, MemorySegment ppTLibAttr, MemorySegment pDummy) {
        var mh$ = ITypeLib_RemoteGetLibAttr_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_RemoteGetLibAttr_Proxy", This, ppTLibAttr, pDummy);
            }
            return (int)mh$.invokeExact(This, ppTLibAttr, pDummy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_RemoteGetLibAttr_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeLib_RemoteGetLibAttr_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeLib_RemoteGetLibAttr_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeLib_RemoteGetLibAttr_Stub$descriptor() {
        return ITypeLib_RemoteGetLibAttr_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeLib_RemoteGetLibAttr_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeLib_RemoteGetLibAttr_Stub$handle() {
        return ITypeLib_RemoteGetLibAttr_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ITypeLib_RemoteGetLibAttr_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment ITypeLib_RemoteGetLibAttr_Stub$address() {
        return ITypeLib_RemoteGetLibAttr_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ITypeLib_RemoteGetLibAttr_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeLib_RemoteGetLibAttr_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeLib_RemoteGetLibAttr_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_RemoteGetLibAttr_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_RemoteGetDocumentation_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeLib_RemoteGetDocumentation_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_RemoteGetDocumentation_Proxy(ITypeLib *This, INT index, DWORD refPtrFlags, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static FunctionDescriptor ITypeLib_RemoteGetDocumentation_Proxy$descriptor() {
        return ITypeLib_RemoteGetDocumentation_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_RemoteGetDocumentation_Proxy(ITypeLib *This, INT index, DWORD refPtrFlags, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static MethodHandle ITypeLib_RemoteGetDocumentation_Proxy$handle() {
        return ITypeLib_RemoteGetDocumentation_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_RemoteGetDocumentation_Proxy(ITypeLib *This, INT index, DWORD refPtrFlags, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static MemorySegment ITypeLib_RemoteGetDocumentation_Proxy$address() {
        return ITypeLib_RemoteGetDocumentation_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib_RemoteGetDocumentation_Proxy(ITypeLib *This, INT index, DWORD refPtrFlags, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static int ITypeLib_RemoteGetDocumentation_Proxy(MemorySegment This, int index, int refPtrFlags, MemorySegment pBstrName, MemorySegment pBstrDocString, MemorySegment pdwHelpContext, MemorySegment pBstrHelpFile) {
        var mh$ = ITypeLib_RemoteGetDocumentation_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_RemoteGetDocumentation_Proxy", This, index, refPtrFlags, pBstrName, pBstrDocString, pdwHelpContext, pBstrHelpFile);
            }
            return (int)mh$.invokeExact(This, index, refPtrFlags, pBstrName, pBstrDocString, pdwHelpContext, pBstrHelpFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_RemoteGetDocumentation_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeLib_RemoteGetDocumentation_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeLib_RemoteGetDocumentation_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeLib_RemoteGetDocumentation_Stub$descriptor() {
        return ITypeLib_RemoteGetDocumentation_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeLib_RemoteGetDocumentation_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeLib_RemoteGetDocumentation_Stub$handle() {
        return ITypeLib_RemoteGetDocumentation_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ITypeLib_RemoteGetDocumentation_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment ITypeLib_RemoteGetDocumentation_Stub$address() {
        return ITypeLib_RemoteGetDocumentation_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ITypeLib_RemoteGetDocumentation_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeLib_RemoteGetDocumentation_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeLib_RemoteGetDocumentation_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_RemoteGetDocumentation_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_RemoteIsName_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeLib_RemoteIsName_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_RemoteIsName_Proxy(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, BOOL *pfName, BSTR *pBstrLibName)
     * }
     */
    public static FunctionDescriptor ITypeLib_RemoteIsName_Proxy$descriptor() {
        return ITypeLib_RemoteIsName_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_RemoteIsName_Proxy(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, BOOL *pfName, BSTR *pBstrLibName)
     * }
     */
    public static MethodHandle ITypeLib_RemoteIsName_Proxy$handle() {
        return ITypeLib_RemoteIsName_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_RemoteIsName_Proxy(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, BOOL *pfName, BSTR *pBstrLibName)
     * }
     */
    public static MemorySegment ITypeLib_RemoteIsName_Proxy$address() {
        return ITypeLib_RemoteIsName_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib_RemoteIsName_Proxy(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, BOOL *pfName, BSTR *pBstrLibName)
     * }
     */
    public static int ITypeLib_RemoteIsName_Proxy(MemorySegment This, MemorySegment szNameBuf, int lHashVal, MemorySegment pfName, MemorySegment pBstrLibName) {
        var mh$ = ITypeLib_RemoteIsName_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_RemoteIsName_Proxy", This, szNameBuf, lHashVal, pfName, pBstrLibName);
            }
            return (int)mh$.invokeExact(This, szNameBuf, lHashVal, pfName, pBstrLibName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_RemoteIsName_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeLib_RemoteIsName_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeLib_RemoteIsName_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeLib_RemoteIsName_Stub$descriptor() {
        return ITypeLib_RemoteIsName_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeLib_RemoteIsName_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeLib_RemoteIsName_Stub$handle() {
        return ITypeLib_RemoteIsName_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ITypeLib_RemoteIsName_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment ITypeLib_RemoteIsName_Stub$address() {
        return ITypeLib_RemoteIsName_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ITypeLib_RemoteIsName_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeLib_RemoteIsName_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeLib_RemoteIsName_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_RemoteIsName_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_RemoteFindName_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeLib_RemoteFindName_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_RemoteFindName_Proxy(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound, BSTR *pBstrLibName)
     * }
     */
    public static FunctionDescriptor ITypeLib_RemoteFindName_Proxy$descriptor() {
        return ITypeLib_RemoteFindName_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_RemoteFindName_Proxy(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound, BSTR *pBstrLibName)
     * }
     */
    public static MethodHandle ITypeLib_RemoteFindName_Proxy$handle() {
        return ITypeLib_RemoteFindName_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_RemoteFindName_Proxy(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound, BSTR *pBstrLibName)
     * }
     */
    public static MemorySegment ITypeLib_RemoteFindName_Proxy$address() {
        return ITypeLib_RemoteFindName_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib_RemoteFindName_Proxy(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound, BSTR *pBstrLibName)
     * }
     */
    public static int ITypeLib_RemoteFindName_Proxy(MemorySegment This, MemorySegment szNameBuf, int lHashVal, MemorySegment ppTInfo, MemorySegment rgMemId, MemorySegment pcFound, MemorySegment pBstrLibName) {
        var mh$ = ITypeLib_RemoteFindName_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_RemoteFindName_Proxy", This, szNameBuf, lHashVal, ppTInfo, rgMemId, pcFound, pBstrLibName);
            }
            return (int)mh$.invokeExact(This, szNameBuf, lHashVal, ppTInfo, rgMemId, pcFound, pBstrLibName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_RemoteFindName_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeLib_RemoteFindName_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeLib_RemoteFindName_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeLib_RemoteFindName_Stub$descriptor() {
        return ITypeLib_RemoteFindName_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeLib_RemoteFindName_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeLib_RemoteFindName_Stub$handle() {
        return ITypeLib_RemoteFindName_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ITypeLib_RemoteFindName_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment ITypeLib_RemoteFindName_Stub$address() {
        return ITypeLib_RemoteFindName_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ITypeLib_RemoteFindName_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeLib_RemoteFindName_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeLib_RemoteFindName_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_RemoteFindName_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_LocalReleaseTLibAttr_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeLib_LocalReleaseTLibAttr_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_LocalReleaseTLibAttr_Proxy(ITypeLib *This)
     * }
     */
    public static FunctionDescriptor ITypeLib_LocalReleaseTLibAttr_Proxy$descriptor() {
        return ITypeLib_LocalReleaseTLibAttr_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_LocalReleaseTLibAttr_Proxy(ITypeLib *This)
     * }
     */
    public static MethodHandle ITypeLib_LocalReleaseTLibAttr_Proxy$handle() {
        return ITypeLib_LocalReleaseTLibAttr_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_LocalReleaseTLibAttr_Proxy(ITypeLib *This)
     * }
     */
    public static MemorySegment ITypeLib_LocalReleaseTLibAttr_Proxy$address() {
        return ITypeLib_LocalReleaseTLibAttr_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib_LocalReleaseTLibAttr_Proxy(ITypeLib *This)
     * }
     */
    public static int ITypeLib_LocalReleaseTLibAttr_Proxy(MemorySegment This) {
        var mh$ = ITypeLib_LocalReleaseTLibAttr_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_LocalReleaseTLibAttr_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_LocalReleaseTLibAttr_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeLib_LocalReleaseTLibAttr_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeLib_LocalReleaseTLibAttr_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeLib_LocalReleaseTLibAttr_Stub$descriptor() {
        return ITypeLib_LocalReleaseTLibAttr_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeLib_LocalReleaseTLibAttr_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeLib_LocalReleaseTLibAttr_Stub$handle() {
        return ITypeLib_LocalReleaseTLibAttr_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ITypeLib_LocalReleaseTLibAttr_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment ITypeLib_LocalReleaseTLibAttr_Stub$address() {
        return ITypeLib_LocalReleaseTLibAttr_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ITypeLib_LocalReleaseTLibAttr_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeLib_LocalReleaseTLibAttr_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeLib_LocalReleaseTLibAttr_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_LocalReleaseTLibAttr_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec$layout() {
        return __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec$segment() {
        return __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec() {
        return __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec$layout() {
        return __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec$segment() {
        return __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec() {
        return __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef ITypeLib2 *LPTYPELIB2
     * }
     */
    public static final AddressLayout LPTYPELIB2 = wgl_h.C_POINTER;

    private static class IID_ITypeLib2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_ITypeLib2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeLib2
     * }
     */
    public static GroupLayout IID_ITypeLib2$layout() {
        return IID_ITypeLib2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeLib2
     * }
     */
    public static MemorySegment IID_ITypeLib2() {
        return IID_ITypeLib2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeLib2
     * }
     */
    public static void IID_ITypeLib2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ITypeLib2$constants.SEGMENT, 0L, IID_ITypeLib2$constants.LAYOUT.byteSize());
    }

    private static class ITypeLib2_RemoteGetLibStatistics_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeLib2_RemoteGetLibStatistics_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib2_RemoteGetLibStatistics_Proxy(ITypeLib2 *This, ULONG *pcUniqueNames, ULONG *pcchUniqueNames)
     * }
     */
    public static FunctionDescriptor ITypeLib2_RemoteGetLibStatistics_Proxy$descriptor() {
        return ITypeLib2_RemoteGetLibStatistics_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib2_RemoteGetLibStatistics_Proxy(ITypeLib2 *This, ULONG *pcUniqueNames, ULONG *pcchUniqueNames)
     * }
     */
    public static MethodHandle ITypeLib2_RemoteGetLibStatistics_Proxy$handle() {
        return ITypeLib2_RemoteGetLibStatistics_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeLib2_RemoteGetLibStatistics_Proxy(ITypeLib2 *This, ULONG *pcUniqueNames, ULONG *pcchUniqueNames)
     * }
     */
    public static MemorySegment ITypeLib2_RemoteGetLibStatistics_Proxy$address() {
        return ITypeLib2_RemoteGetLibStatistics_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib2_RemoteGetLibStatistics_Proxy(ITypeLib2 *This, ULONG *pcUniqueNames, ULONG *pcchUniqueNames)
     * }
     */
    public static int ITypeLib2_RemoteGetLibStatistics_Proxy(MemorySegment This, MemorySegment pcUniqueNames, MemorySegment pcchUniqueNames) {
        var mh$ = ITypeLib2_RemoteGetLibStatistics_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib2_RemoteGetLibStatistics_Proxy", This, pcUniqueNames, pcchUniqueNames);
            }
            return (int)mh$.invokeExact(This, pcUniqueNames, pcchUniqueNames);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib2_RemoteGetLibStatistics_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeLib2_RemoteGetLibStatistics_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeLib2_RemoteGetLibStatistics_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeLib2_RemoteGetLibStatistics_Stub$descriptor() {
        return ITypeLib2_RemoteGetLibStatistics_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeLib2_RemoteGetLibStatistics_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeLib2_RemoteGetLibStatistics_Stub$handle() {
        return ITypeLib2_RemoteGetLibStatistics_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ITypeLib2_RemoteGetLibStatistics_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment ITypeLib2_RemoteGetLibStatistics_Stub$address() {
        return ITypeLib2_RemoteGetLibStatistics_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ITypeLib2_RemoteGetLibStatistics_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeLib2_RemoteGetLibStatistics_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeLib2_RemoteGetLibStatistics_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib2_RemoteGetLibStatistics_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib2_RemoteGetDocumentation2_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeLib2_RemoteGetDocumentation2_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib2_RemoteGetDocumentation2_Proxy(ITypeLib2 *This, INT index, LCID lcid, DWORD refPtrFlags, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static FunctionDescriptor ITypeLib2_RemoteGetDocumentation2_Proxy$descriptor() {
        return ITypeLib2_RemoteGetDocumentation2_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib2_RemoteGetDocumentation2_Proxy(ITypeLib2 *This, INT index, LCID lcid, DWORD refPtrFlags, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static MethodHandle ITypeLib2_RemoteGetDocumentation2_Proxy$handle() {
        return ITypeLib2_RemoteGetDocumentation2_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeLib2_RemoteGetDocumentation2_Proxy(ITypeLib2 *This, INT index, LCID lcid, DWORD refPtrFlags, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static MemorySegment ITypeLib2_RemoteGetDocumentation2_Proxy$address() {
        return ITypeLib2_RemoteGetDocumentation2_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib2_RemoteGetDocumentation2_Proxy(ITypeLib2 *This, INT index, LCID lcid, DWORD refPtrFlags, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static int ITypeLib2_RemoteGetDocumentation2_Proxy(MemorySegment This, int index, int lcid, int refPtrFlags, MemorySegment pbstrHelpString, MemorySegment pdwHelpStringContext, MemorySegment pbstrHelpStringDll) {
        var mh$ = ITypeLib2_RemoteGetDocumentation2_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib2_RemoteGetDocumentation2_Proxy", This, index, lcid, refPtrFlags, pbstrHelpString, pdwHelpStringContext, pbstrHelpStringDll);
            }
            return (int)mh$.invokeExact(This, index, lcid, refPtrFlags, pbstrHelpString, pdwHelpStringContext, pbstrHelpStringDll);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib2_RemoteGetDocumentation2_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeLib2_RemoteGetDocumentation2_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeLib2_RemoteGetDocumentation2_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeLib2_RemoteGetDocumentation2_Stub$descriptor() {
        return ITypeLib2_RemoteGetDocumentation2_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeLib2_RemoteGetDocumentation2_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeLib2_RemoteGetDocumentation2_Stub$handle() {
        return ITypeLib2_RemoteGetDocumentation2_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ITypeLib2_RemoteGetDocumentation2_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment ITypeLib2_RemoteGetDocumentation2_Stub$address() {
        return ITypeLib2_RemoteGetDocumentation2_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ITypeLib2_RemoteGetDocumentation2_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeLib2_RemoteGetDocumentation2_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeLib2_RemoteGetDocumentation2_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib2_RemoteGetDocumentation2_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef ITypeChangeEvents *LPTYPECHANGEEVENTS
     * }
     */
    public static final AddressLayout LPTYPECHANGEEVENTS = wgl_h.C_POINTER;
    private static final int CHANGEKIND_ADDMEMBER = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagCHANGEKIND.CHANGEKIND_ADDMEMBER = 0
     * }
     */
    public static int CHANGEKIND_ADDMEMBER() {
        return CHANGEKIND_ADDMEMBER;
    }
    private static final int CHANGEKIND_DELETEMEMBER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagCHANGEKIND.CHANGEKIND_DELETEMEMBER = 1
     * }
     */
    public static int CHANGEKIND_DELETEMEMBER() {
        return CHANGEKIND_DELETEMEMBER;
    }
    private static final int CHANGEKIND_SETNAMES = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagCHANGEKIND.CHANGEKIND_SETNAMES = 2
     * }
     */
    public static int CHANGEKIND_SETNAMES() {
        return CHANGEKIND_SETNAMES;
    }
    private static final int CHANGEKIND_SETDOCUMENTATION = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagCHANGEKIND.CHANGEKIND_SETDOCUMENTATION = 3
     * }
     */
    public static int CHANGEKIND_SETDOCUMENTATION() {
        return CHANGEKIND_SETDOCUMENTATION;
    }
    private static final int CHANGEKIND_GENERAL = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagCHANGEKIND.CHANGEKIND_GENERAL = 4
     * }
     */
    public static int CHANGEKIND_GENERAL() {
        return CHANGEKIND_GENERAL;
    }
    private static final int CHANGEKIND_INVALIDATE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum tagCHANGEKIND.CHANGEKIND_INVALIDATE = 5
     * }
     */
    public static int CHANGEKIND_INVALIDATE() {
        return CHANGEKIND_INVALIDATE;
    }
    private static final int CHANGEKIND_CHANGEFAILED = (int)6L;
    /**
     * {@snippet lang=c :
     * enum tagCHANGEKIND.CHANGEKIND_CHANGEFAILED = 6
     * }
     */
    public static int CHANGEKIND_CHANGEFAILED() {
        return CHANGEKIND_CHANGEFAILED;
    }
    private static final int CHANGEKIND_MAX = (int)7L;
    /**
     * {@snippet lang=c :
     * enum tagCHANGEKIND.CHANGEKIND_MAX = 7
     * }
     */
    public static int CHANGEKIND_MAX() {
        return CHANGEKIND_MAX;
    }

    private static class IID_ITypeChangeEvents$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_ITypeChangeEvents").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeChangeEvents
     * }
     */
    public static GroupLayout IID_ITypeChangeEvents$layout() {
        return IID_ITypeChangeEvents$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeChangeEvents
     * }
     */
    public static MemorySegment IID_ITypeChangeEvents() {
        return IID_ITypeChangeEvents$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeChangeEvents
     * }
     */
    public static void IID_ITypeChangeEvents(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ITypeChangeEvents$constants.SEGMENT, 0L, IID_ITypeChangeEvents$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IErrorInfo *LPERRORINFO
     * }
     */
    public static final AddressLayout LPERRORINFO = wgl_h.C_POINTER;

    private static class IID_IErrorInfo$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IErrorInfo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IErrorInfo
     * }
     */
    public static GroupLayout IID_IErrorInfo$layout() {
        return IID_IErrorInfo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IErrorInfo
     * }
     */
    public static MemorySegment IID_IErrorInfo() {
        return IID_IErrorInfo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IErrorInfo
     * }
     */
    public static void IID_IErrorInfo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IErrorInfo$constants.SEGMENT, 0L, IID_IErrorInfo$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef ICreateErrorInfo *LPCREATEERRORINFO
     * }
     */
    public static final AddressLayout LPCREATEERRORINFO = wgl_h.C_POINTER;

    private static class IID_ICreateErrorInfo$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_ICreateErrorInfo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateErrorInfo
     * }
     */
    public static GroupLayout IID_ICreateErrorInfo$layout() {
        return IID_ICreateErrorInfo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateErrorInfo
     * }
     */
    public static MemorySegment IID_ICreateErrorInfo() {
        return IID_ICreateErrorInfo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateErrorInfo
     * }
     */
    public static void IID_ICreateErrorInfo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ICreateErrorInfo$constants.SEGMENT, 0L, IID_ICreateErrorInfo$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef ISupportErrorInfo *LPSUPPORTERRORINFO
     * }
     */
    public static final AddressLayout LPSUPPORTERRORINFO = wgl_h.C_POINTER;

    private static class IID_ISupportErrorInfo$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_ISupportErrorInfo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISupportErrorInfo
     * }
     */
    public static GroupLayout IID_ISupportErrorInfo$layout() {
        return IID_ISupportErrorInfo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISupportErrorInfo
     * }
     */
    public static MemorySegment IID_ISupportErrorInfo() {
        return IID_ISupportErrorInfo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISupportErrorInfo
     * }
     */
    public static void IID_ISupportErrorInfo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ISupportErrorInfo$constants.SEGMENT, 0L, IID_ISupportErrorInfo$constants.LAYOUT.byteSize());
    }

    private static class IID_ITypeFactory$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_ITypeFactory").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeFactory
     * }
     */
    public static GroupLayout IID_ITypeFactory$layout() {
        return IID_ITypeFactory$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeFactory
     * }
     */
    public static MemorySegment IID_ITypeFactory() {
        return IID_ITypeFactory$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeFactory
     * }
     */
    public static void IID_ITypeFactory(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ITypeFactory$constants.SEGMENT, 0L, IID_ITypeFactory$constants.LAYOUT.byteSize());
    }

    private static class IID_ITypeMarshal$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_ITypeMarshal").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeMarshal
     * }
     */
    public static GroupLayout IID_ITypeMarshal$layout() {
        return IID_ITypeMarshal$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeMarshal
     * }
     */
    public static MemorySegment IID_ITypeMarshal() {
        return IID_ITypeMarshal$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeMarshal
     * }
     */
    public static void IID_ITypeMarshal(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ITypeMarshal$constants.SEGMENT, 0L, IID_ITypeMarshal$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IRecordInfo *LPRECORDINFO
     * }
     */
    public static final AddressLayout LPRECORDINFO = wgl_h.C_POINTER;

    private static class IID_IRecordInfo$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IRecordInfo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRecordInfo
     * }
     */
    public static GroupLayout IID_IRecordInfo$layout() {
        return IID_IRecordInfo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRecordInfo
     * }
     */
    public static MemorySegment IID_IRecordInfo() {
        return IID_IRecordInfo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRecordInfo
     * }
     */
    public static void IID_IRecordInfo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IRecordInfo$constants.SEGMENT, 0L, IID_IRecordInfo$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IErrorLog *LPERRORLOG
     * }
     */
    public static final AddressLayout LPERRORLOG = wgl_h.C_POINTER;

    private static class IID_IErrorLog$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IErrorLog").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IErrorLog
     * }
     */
    public static GroupLayout IID_IErrorLog$layout() {
        return IID_IErrorLog$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IErrorLog
     * }
     */
    public static MemorySegment IID_IErrorLog() {
        return IID_IErrorLog$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IErrorLog
     * }
     */
    public static void IID_IErrorLog(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IErrorLog$constants.SEGMENT, 0L, IID_IErrorLog$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IPropertyBag *LPPROPERTYBAG
     * }
     */
    public static final AddressLayout LPPROPERTYBAG = wgl_h.C_POINTER;

    private static class IID_IPropertyBag$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IPropertyBag").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPropertyBag
     * }
     */
    public static GroupLayout IID_IPropertyBag$layout() {
        return IID_IPropertyBag$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPropertyBag
     * }
     */
    public static MemorySegment IID_IPropertyBag() {
        return IID_IPropertyBag$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPropertyBag
     * }
     */
    public static void IID_IPropertyBag(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IPropertyBag$constants.SEGMENT, 0L, IID_IPropertyBag$constants.LAYOUT.byteSize());
    }

    private static class IPropertyBag_RemoteRead_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IPropertyBag_RemoteRead_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IPropertyBag_RemoteRead_Proxy(IPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar, IErrorLog *pErrorLog, DWORD varType, IUnknown *pUnkObj)
     * }
     */
    public static FunctionDescriptor IPropertyBag_RemoteRead_Proxy$descriptor() {
        return IPropertyBag_RemoteRead_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IPropertyBag_RemoteRead_Proxy(IPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar, IErrorLog *pErrorLog, DWORD varType, IUnknown *pUnkObj)
     * }
     */
    public static MethodHandle IPropertyBag_RemoteRead_Proxy$handle() {
        return IPropertyBag_RemoteRead_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IPropertyBag_RemoteRead_Proxy(IPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar, IErrorLog *pErrorLog, DWORD varType, IUnknown *pUnkObj)
     * }
     */
    public static MemorySegment IPropertyBag_RemoteRead_Proxy$address() {
        return IPropertyBag_RemoteRead_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IPropertyBag_RemoteRead_Proxy(IPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar, IErrorLog *pErrorLog, DWORD varType, IUnknown *pUnkObj)
     * }
     */
    public static int IPropertyBag_RemoteRead_Proxy(MemorySegment This, MemorySegment pszPropName, MemorySegment pVar, MemorySegment pErrorLog, int varType, MemorySegment pUnkObj) {
        var mh$ = IPropertyBag_RemoteRead_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IPropertyBag_RemoteRead_Proxy", This, pszPropName, pVar, pErrorLog, varType, pUnkObj);
            }
            return (int)mh$.invokeExact(This, pszPropName, pVar, pErrorLog, varType, pUnkObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IPropertyBag_RemoteRead_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IPropertyBag_RemoteRead_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IPropertyBag_RemoteRead_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IPropertyBag_RemoteRead_Stub$descriptor() {
        return IPropertyBag_RemoteRead_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IPropertyBag_RemoteRead_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IPropertyBag_RemoteRead_Stub$handle() {
        return IPropertyBag_RemoteRead_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IPropertyBag_RemoteRead_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IPropertyBag_RemoteRead_Stub$address() {
        return IPropertyBag_RemoteRead_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IPropertyBag_RemoteRead_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IPropertyBag_RemoteRead_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IPropertyBag_RemoteRead_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IPropertyBag_RemoteRead_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IID_ITypeLibRegistrationReader$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_ITypeLibRegistrationReader").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeLibRegistrationReader
     * }
     */
    public static GroupLayout IID_ITypeLibRegistrationReader$layout() {
        return IID_ITypeLibRegistrationReader$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeLibRegistrationReader
     * }
     */
    public static MemorySegment IID_ITypeLibRegistrationReader() {
        return IID_ITypeLibRegistrationReader$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeLibRegistrationReader
     * }
     */
    public static void IID_ITypeLibRegistrationReader(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ITypeLibRegistrationReader$constants.SEGMENT, 0L, IID_ITypeLibRegistrationReader$constants.LAYOUT.byteSize());
    }

    private static class IID_ITypeLibRegistration$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_ITypeLibRegistration").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeLibRegistration
     * }
     */
    public static GroupLayout IID_ITypeLibRegistration$layout() {
        return IID_ITypeLibRegistration$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeLibRegistration
     * }
     */
    public static MemorySegment IID_ITypeLibRegistration() {
        return IID_ITypeLibRegistration$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeLibRegistration
     * }
     */
    public static void IID_ITypeLibRegistration(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ITypeLibRegistration$constants.SEGMENT, 0L, IID_ITypeLibRegistration$constants.LAYOUT.byteSize());
    }

    private static class CLSID_TypeLibRegistrationReader$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_TypeLibRegistrationReader").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_TypeLibRegistrationReader
     * }
     */
    public static GroupLayout CLSID_TypeLibRegistrationReader$layout() {
        return CLSID_TypeLibRegistrationReader$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_TypeLibRegistrationReader
     * }
     */
    public static MemorySegment CLSID_TypeLibRegistrationReader() {
        return CLSID_TypeLibRegistrationReader$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_TypeLibRegistrationReader
     * }
     */
    public static void CLSID_TypeLibRegistrationReader(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_TypeLibRegistrationReader$constants.SEGMENT, 0L, CLSID_TypeLibRegistrationReader$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec$layout() {
        return __MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec$segment() {
        return __MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec() {
        return __MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec$layout() {
        return __MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec$segment() {
        return __MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec() {
        return __MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class BSTR_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("BSTR_UserSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long BSTR_UserSize(unsigned long *, unsigned long, BSTR *)
     * }
     */
    public static FunctionDescriptor BSTR_UserSize$descriptor() {
        return BSTR_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long BSTR_UserSize(unsigned long *, unsigned long, BSTR *)
     * }
     */
    public static MethodHandle BSTR_UserSize$handle() {
        return BSTR_UserSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long BSTR_UserSize(unsigned long *, unsigned long, BSTR *)
     * }
     */
    public static MemorySegment BSTR_UserSize$address() {
        return BSTR_UserSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long BSTR_UserSize(unsigned long *, unsigned long, BSTR *)
     * }
     */
    public static int BSTR_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = BSTR_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BSTR_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BSTR_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("BSTR_UserMarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *BSTR_UserMarshal(unsigned long *, unsigned char *, BSTR *)
     * }
     */
    public static FunctionDescriptor BSTR_UserMarshal$descriptor() {
        return BSTR_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *BSTR_UserMarshal(unsigned long *, unsigned char *, BSTR *)
     * }
     */
    public static MethodHandle BSTR_UserMarshal$handle() {
        return BSTR_UserMarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *BSTR_UserMarshal(unsigned long *, unsigned char *, BSTR *)
     * }
     */
    public static MemorySegment BSTR_UserMarshal$address() {
        return BSTR_UserMarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *BSTR_UserMarshal(unsigned long *, unsigned char *, BSTR *)
     * }
     */
    public static MemorySegment BSTR_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = BSTR_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BSTR_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BSTR_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("BSTR_UserUnmarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR *)
     * }
     */
    public static FunctionDescriptor BSTR_UserUnmarshal$descriptor() {
        return BSTR_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR *)
     * }
     */
    public static MethodHandle BSTR_UserUnmarshal$handle() {
        return BSTR_UserUnmarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR *)
     * }
     */
    public static MemorySegment BSTR_UserUnmarshal$address() {
        return BSTR_UserUnmarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR *)
     * }
     */
    public static MemorySegment BSTR_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = BSTR_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BSTR_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BSTR_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("BSTR_UserFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void BSTR_UserFree(unsigned long *, BSTR *)
     * }
     */
    public static FunctionDescriptor BSTR_UserFree$descriptor() {
        return BSTR_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void BSTR_UserFree(unsigned long *, BSTR *)
     * }
     */
    public static MethodHandle BSTR_UserFree$handle() {
        return BSTR_UserFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void BSTR_UserFree(unsigned long *, BSTR *)
     * }
     */
    public static MemorySegment BSTR_UserFree$address() {
        return BSTR_UserFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void BSTR_UserFree(unsigned long *, BSTR *)
     * }
     */
    public static void BSTR_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = BSTR_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BSTR_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLEANLOCALSTORAGE_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CLEANLOCALSTORAGE_UserSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long CLEANLOCALSTORAGE_UserSize(unsigned long *, unsigned long, CLEANLOCALSTORAGE *)
     * }
     */
    public static FunctionDescriptor CLEANLOCALSTORAGE_UserSize$descriptor() {
        return CLEANLOCALSTORAGE_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long CLEANLOCALSTORAGE_UserSize(unsigned long *, unsigned long, CLEANLOCALSTORAGE *)
     * }
     */
    public static MethodHandle CLEANLOCALSTORAGE_UserSize$handle() {
        return CLEANLOCALSTORAGE_UserSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long CLEANLOCALSTORAGE_UserSize(unsigned long *, unsigned long, CLEANLOCALSTORAGE *)
     * }
     */
    public static MemorySegment CLEANLOCALSTORAGE_UserSize$address() {
        return CLEANLOCALSTORAGE_UserSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long CLEANLOCALSTORAGE_UserSize(unsigned long *, unsigned long, CLEANLOCALSTORAGE *)
     * }
     */
    public static int CLEANLOCALSTORAGE_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = CLEANLOCALSTORAGE_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLEANLOCALSTORAGE_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLEANLOCALSTORAGE_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CLEANLOCALSTORAGE_UserMarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *CLEANLOCALSTORAGE_UserMarshal(unsigned long *, unsigned char *, CLEANLOCALSTORAGE *)
     * }
     */
    public static FunctionDescriptor CLEANLOCALSTORAGE_UserMarshal$descriptor() {
        return CLEANLOCALSTORAGE_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *CLEANLOCALSTORAGE_UserMarshal(unsigned long *, unsigned char *, CLEANLOCALSTORAGE *)
     * }
     */
    public static MethodHandle CLEANLOCALSTORAGE_UserMarshal$handle() {
        return CLEANLOCALSTORAGE_UserMarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *CLEANLOCALSTORAGE_UserMarshal(unsigned long *, unsigned char *, CLEANLOCALSTORAGE *)
     * }
     */
    public static MemorySegment CLEANLOCALSTORAGE_UserMarshal$address() {
        return CLEANLOCALSTORAGE_UserMarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *CLEANLOCALSTORAGE_UserMarshal(unsigned long *, unsigned char *, CLEANLOCALSTORAGE *)
     * }
     */
    public static MemorySegment CLEANLOCALSTORAGE_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = CLEANLOCALSTORAGE_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLEANLOCALSTORAGE_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLEANLOCALSTORAGE_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CLEANLOCALSTORAGE_UserUnmarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *CLEANLOCALSTORAGE_UserUnmarshal(unsigned long *, unsigned char *, CLEANLOCALSTORAGE *)
     * }
     */
    public static FunctionDescriptor CLEANLOCALSTORAGE_UserUnmarshal$descriptor() {
        return CLEANLOCALSTORAGE_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *CLEANLOCALSTORAGE_UserUnmarshal(unsigned long *, unsigned char *, CLEANLOCALSTORAGE *)
     * }
     */
    public static MethodHandle CLEANLOCALSTORAGE_UserUnmarshal$handle() {
        return CLEANLOCALSTORAGE_UserUnmarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *CLEANLOCALSTORAGE_UserUnmarshal(unsigned long *, unsigned char *, CLEANLOCALSTORAGE *)
     * }
     */
    public static MemorySegment CLEANLOCALSTORAGE_UserUnmarshal$address() {
        return CLEANLOCALSTORAGE_UserUnmarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *CLEANLOCALSTORAGE_UserUnmarshal(unsigned long *, unsigned char *, CLEANLOCALSTORAGE *)
     * }
     */
    public static MemorySegment CLEANLOCALSTORAGE_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = CLEANLOCALSTORAGE_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLEANLOCALSTORAGE_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLEANLOCALSTORAGE_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CLEANLOCALSTORAGE_UserFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void CLEANLOCALSTORAGE_UserFree(unsigned long *, CLEANLOCALSTORAGE *)
     * }
     */
    public static FunctionDescriptor CLEANLOCALSTORAGE_UserFree$descriptor() {
        return CLEANLOCALSTORAGE_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void CLEANLOCALSTORAGE_UserFree(unsigned long *, CLEANLOCALSTORAGE *)
     * }
     */
    public static MethodHandle CLEANLOCALSTORAGE_UserFree$handle() {
        return CLEANLOCALSTORAGE_UserFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void CLEANLOCALSTORAGE_UserFree(unsigned long *, CLEANLOCALSTORAGE *)
     * }
     */
    public static MemorySegment CLEANLOCALSTORAGE_UserFree$address() {
        return CLEANLOCALSTORAGE_UserFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void CLEANLOCALSTORAGE_UserFree(unsigned long *, CLEANLOCALSTORAGE *)
     * }
     */
    public static void CLEANLOCALSTORAGE_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = CLEANLOCALSTORAGE_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLEANLOCALSTORAGE_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VARIANT_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VARIANT_UserSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long VARIANT_UserSize(unsigned long *, unsigned long, VARIANT *)
     * }
     */
    public static FunctionDescriptor VARIANT_UserSize$descriptor() {
        return VARIANT_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long VARIANT_UserSize(unsigned long *, unsigned long, VARIANT *)
     * }
     */
    public static MethodHandle VARIANT_UserSize$handle() {
        return VARIANT_UserSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long VARIANT_UserSize(unsigned long *, unsigned long, VARIANT *)
     * }
     */
    public static MemorySegment VARIANT_UserSize$address() {
        return VARIANT_UserSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long VARIANT_UserSize(unsigned long *, unsigned long, VARIANT *)
     * }
     */
    public static int VARIANT_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = VARIANT_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VARIANT_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VARIANT_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VARIANT_UserMarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *VARIANT_UserMarshal(unsigned long *, unsigned char *, VARIANT *)
     * }
     */
    public static FunctionDescriptor VARIANT_UserMarshal$descriptor() {
        return VARIANT_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *VARIANT_UserMarshal(unsigned long *, unsigned char *, VARIANT *)
     * }
     */
    public static MethodHandle VARIANT_UserMarshal$handle() {
        return VARIANT_UserMarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *VARIANT_UserMarshal(unsigned long *, unsigned char *, VARIANT *)
     * }
     */
    public static MemorySegment VARIANT_UserMarshal$address() {
        return VARIANT_UserMarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *VARIANT_UserMarshal(unsigned long *, unsigned char *, VARIANT *)
     * }
     */
    public static MemorySegment VARIANT_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = VARIANT_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VARIANT_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VARIANT_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VARIANT_UserUnmarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *VARIANT_UserUnmarshal(unsigned long *, unsigned char *, VARIANT *)
     * }
     */
    public static FunctionDescriptor VARIANT_UserUnmarshal$descriptor() {
        return VARIANT_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *VARIANT_UserUnmarshal(unsigned long *, unsigned char *, VARIANT *)
     * }
     */
    public static MethodHandle VARIANT_UserUnmarshal$handle() {
        return VARIANT_UserUnmarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *VARIANT_UserUnmarshal(unsigned long *, unsigned char *, VARIANT *)
     * }
     */
    public static MemorySegment VARIANT_UserUnmarshal$address() {
        return VARIANT_UserUnmarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *VARIANT_UserUnmarshal(unsigned long *, unsigned char *, VARIANT *)
     * }
     */
    public static MemorySegment VARIANT_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = VARIANT_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VARIANT_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VARIANT_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VARIANT_UserFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void VARIANT_UserFree(unsigned long *, VARIANT *)
     * }
     */
    public static FunctionDescriptor VARIANT_UserFree$descriptor() {
        return VARIANT_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void VARIANT_UserFree(unsigned long *, VARIANT *)
     * }
     */
    public static MethodHandle VARIANT_UserFree$handle() {
        return VARIANT_UserFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void VARIANT_UserFree(unsigned long *, VARIANT *)
     * }
     */
    public static MemorySegment VARIANT_UserFree$address() {
        return VARIANT_UserFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void VARIANT_UserFree(unsigned long *, VARIANT *)
     * }
     */
    public static void VARIANT_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = VARIANT_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VARIANT_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BSTR_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("BSTR_UserSize64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long BSTR_UserSize64(unsigned long *, unsigned long, BSTR *)
     * }
     */
    public static FunctionDescriptor BSTR_UserSize64$descriptor() {
        return BSTR_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long BSTR_UserSize64(unsigned long *, unsigned long, BSTR *)
     * }
     */
    public static MethodHandle BSTR_UserSize64$handle() {
        return BSTR_UserSize64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long BSTR_UserSize64(unsigned long *, unsigned long, BSTR *)
     * }
     */
    public static MemorySegment BSTR_UserSize64$address() {
        return BSTR_UserSize64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long BSTR_UserSize64(unsigned long *, unsigned long, BSTR *)
     * }
     */
    public static int BSTR_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = BSTR_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BSTR_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BSTR_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("BSTR_UserMarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *BSTR_UserMarshal64(unsigned long *, unsigned char *, BSTR *)
     * }
     */
    public static FunctionDescriptor BSTR_UserMarshal64$descriptor() {
        return BSTR_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *BSTR_UserMarshal64(unsigned long *, unsigned char *, BSTR *)
     * }
     */
    public static MethodHandle BSTR_UserMarshal64$handle() {
        return BSTR_UserMarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *BSTR_UserMarshal64(unsigned long *, unsigned char *, BSTR *)
     * }
     */
    public static MemorySegment BSTR_UserMarshal64$address() {
        return BSTR_UserMarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *BSTR_UserMarshal64(unsigned long *, unsigned char *, BSTR *)
     * }
     */
    public static MemorySegment BSTR_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = BSTR_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BSTR_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BSTR_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("BSTR_UserUnmarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *BSTR_UserUnmarshal64(unsigned long *, unsigned char *, BSTR *)
     * }
     */
    public static FunctionDescriptor BSTR_UserUnmarshal64$descriptor() {
        return BSTR_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *BSTR_UserUnmarshal64(unsigned long *, unsigned char *, BSTR *)
     * }
     */
    public static MethodHandle BSTR_UserUnmarshal64$handle() {
        return BSTR_UserUnmarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *BSTR_UserUnmarshal64(unsigned long *, unsigned char *, BSTR *)
     * }
     */
    public static MemorySegment BSTR_UserUnmarshal64$address() {
        return BSTR_UserUnmarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *BSTR_UserUnmarshal64(unsigned long *, unsigned char *, BSTR *)
     * }
     */
    public static MemorySegment BSTR_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = BSTR_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BSTR_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BSTR_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("BSTR_UserFree64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void BSTR_UserFree64(unsigned long *, BSTR *)
     * }
     */
    public static FunctionDescriptor BSTR_UserFree64$descriptor() {
        return BSTR_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void BSTR_UserFree64(unsigned long *, BSTR *)
     * }
     */
    public static MethodHandle BSTR_UserFree64$handle() {
        return BSTR_UserFree64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void BSTR_UserFree64(unsigned long *, BSTR *)
     * }
     */
    public static MemorySegment BSTR_UserFree64$address() {
        return BSTR_UserFree64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void BSTR_UserFree64(unsigned long *, BSTR *)
     * }
     */
    public static void BSTR_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = BSTR_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BSTR_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLEANLOCALSTORAGE_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CLEANLOCALSTORAGE_UserSize64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long CLEANLOCALSTORAGE_UserSize64(unsigned long *, unsigned long, CLEANLOCALSTORAGE *)
     * }
     */
    public static FunctionDescriptor CLEANLOCALSTORAGE_UserSize64$descriptor() {
        return CLEANLOCALSTORAGE_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long CLEANLOCALSTORAGE_UserSize64(unsigned long *, unsigned long, CLEANLOCALSTORAGE *)
     * }
     */
    public static MethodHandle CLEANLOCALSTORAGE_UserSize64$handle() {
        return CLEANLOCALSTORAGE_UserSize64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long CLEANLOCALSTORAGE_UserSize64(unsigned long *, unsigned long, CLEANLOCALSTORAGE *)
     * }
     */
    public static MemorySegment CLEANLOCALSTORAGE_UserSize64$address() {
        return CLEANLOCALSTORAGE_UserSize64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long CLEANLOCALSTORAGE_UserSize64(unsigned long *, unsigned long, CLEANLOCALSTORAGE *)
     * }
     */
    public static int CLEANLOCALSTORAGE_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = CLEANLOCALSTORAGE_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLEANLOCALSTORAGE_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLEANLOCALSTORAGE_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CLEANLOCALSTORAGE_UserMarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *CLEANLOCALSTORAGE_UserMarshal64(unsigned long *, unsigned char *, CLEANLOCALSTORAGE *)
     * }
     */
    public static FunctionDescriptor CLEANLOCALSTORAGE_UserMarshal64$descriptor() {
        return CLEANLOCALSTORAGE_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *CLEANLOCALSTORAGE_UserMarshal64(unsigned long *, unsigned char *, CLEANLOCALSTORAGE *)
     * }
     */
    public static MethodHandle CLEANLOCALSTORAGE_UserMarshal64$handle() {
        return CLEANLOCALSTORAGE_UserMarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *CLEANLOCALSTORAGE_UserMarshal64(unsigned long *, unsigned char *, CLEANLOCALSTORAGE *)
     * }
     */
    public static MemorySegment CLEANLOCALSTORAGE_UserMarshal64$address() {
        return CLEANLOCALSTORAGE_UserMarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *CLEANLOCALSTORAGE_UserMarshal64(unsigned long *, unsigned char *, CLEANLOCALSTORAGE *)
     * }
     */
    public static MemorySegment CLEANLOCALSTORAGE_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = CLEANLOCALSTORAGE_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLEANLOCALSTORAGE_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLEANLOCALSTORAGE_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CLEANLOCALSTORAGE_UserUnmarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *CLEANLOCALSTORAGE_UserUnmarshal64(unsigned long *, unsigned char *, CLEANLOCALSTORAGE *)
     * }
     */
    public static FunctionDescriptor CLEANLOCALSTORAGE_UserUnmarshal64$descriptor() {
        return CLEANLOCALSTORAGE_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *CLEANLOCALSTORAGE_UserUnmarshal64(unsigned long *, unsigned char *, CLEANLOCALSTORAGE *)
     * }
     */
    public static MethodHandle CLEANLOCALSTORAGE_UserUnmarshal64$handle() {
        return CLEANLOCALSTORAGE_UserUnmarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *CLEANLOCALSTORAGE_UserUnmarshal64(unsigned long *, unsigned char *, CLEANLOCALSTORAGE *)
     * }
     */
    public static MemorySegment CLEANLOCALSTORAGE_UserUnmarshal64$address() {
        return CLEANLOCALSTORAGE_UserUnmarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *CLEANLOCALSTORAGE_UserUnmarshal64(unsigned long *, unsigned char *, CLEANLOCALSTORAGE *)
     * }
     */
    public static MemorySegment CLEANLOCALSTORAGE_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = CLEANLOCALSTORAGE_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLEANLOCALSTORAGE_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLEANLOCALSTORAGE_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CLEANLOCALSTORAGE_UserFree64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void CLEANLOCALSTORAGE_UserFree64(unsigned long *, CLEANLOCALSTORAGE *)
     * }
     */
    public static FunctionDescriptor CLEANLOCALSTORAGE_UserFree64$descriptor() {
        return CLEANLOCALSTORAGE_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void CLEANLOCALSTORAGE_UserFree64(unsigned long *, CLEANLOCALSTORAGE *)
     * }
     */
    public static MethodHandle CLEANLOCALSTORAGE_UserFree64$handle() {
        return CLEANLOCALSTORAGE_UserFree64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void CLEANLOCALSTORAGE_UserFree64(unsigned long *, CLEANLOCALSTORAGE *)
     * }
     */
    public static MemorySegment CLEANLOCALSTORAGE_UserFree64$address() {
        return CLEANLOCALSTORAGE_UserFree64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void CLEANLOCALSTORAGE_UserFree64(unsigned long *, CLEANLOCALSTORAGE *)
     * }
     */
    public static void CLEANLOCALSTORAGE_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = CLEANLOCALSTORAGE_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLEANLOCALSTORAGE_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VARIANT_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VARIANT_UserSize64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long VARIANT_UserSize64(unsigned long *, unsigned long, VARIANT *)
     * }
     */
    public static FunctionDescriptor VARIANT_UserSize64$descriptor() {
        return VARIANT_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long VARIANT_UserSize64(unsigned long *, unsigned long, VARIANT *)
     * }
     */
    public static MethodHandle VARIANT_UserSize64$handle() {
        return VARIANT_UserSize64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long VARIANT_UserSize64(unsigned long *, unsigned long, VARIANT *)
     * }
     */
    public static MemorySegment VARIANT_UserSize64$address() {
        return VARIANT_UserSize64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long VARIANT_UserSize64(unsigned long *, unsigned long, VARIANT *)
     * }
     */
    public static int VARIANT_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = VARIANT_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VARIANT_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VARIANT_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VARIANT_UserMarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *VARIANT_UserMarshal64(unsigned long *, unsigned char *, VARIANT *)
     * }
     */
    public static FunctionDescriptor VARIANT_UserMarshal64$descriptor() {
        return VARIANT_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *VARIANT_UserMarshal64(unsigned long *, unsigned char *, VARIANT *)
     * }
     */
    public static MethodHandle VARIANT_UserMarshal64$handle() {
        return VARIANT_UserMarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *VARIANT_UserMarshal64(unsigned long *, unsigned char *, VARIANT *)
     * }
     */
    public static MemorySegment VARIANT_UserMarshal64$address() {
        return VARIANT_UserMarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *VARIANT_UserMarshal64(unsigned long *, unsigned char *, VARIANT *)
     * }
     */
    public static MemorySegment VARIANT_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = VARIANT_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VARIANT_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VARIANT_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VARIANT_UserUnmarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *VARIANT_UserUnmarshal64(unsigned long *, unsigned char *, VARIANT *)
     * }
     */
    public static FunctionDescriptor VARIANT_UserUnmarshal64$descriptor() {
        return VARIANT_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *VARIANT_UserUnmarshal64(unsigned long *, unsigned char *, VARIANT *)
     * }
     */
    public static MethodHandle VARIANT_UserUnmarshal64$handle() {
        return VARIANT_UserUnmarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *VARIANT_UserUnmarshal64(unsigned long *, unsigned char *, VARIANT *)
     * }
     */
    public static MemorySegment VARIANT_UserUnmarshal64$address() {
        return VARIANT_UserUnmarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *VARIANT_UserUnmarshal64(unsigned long *, unsigned char *, VARIANT *)
     * }
     */
    public static MemorySegment VARIANT_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = VARIANT_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VARIANT_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VARIANT_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("VARIANT_UserFree64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void VARIANT_UserFree64(unsigned long *, VARIANT *)
     * }
     */
    public static FunctionDescriptor VARIANT_UserFree64$descriptor() {
        return VARIANT_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void VARIANT_UserFree64(unsigned long *, VARIANT *)
     * }
     */
    public static MethodHandle VARIANT_UserFree64$handle() {
        return VARIANT_UserFree64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void VARIANT_UserFree64(unsigned long *, VARIANT *)
     * }
     */
    public static MemorySegment VARIANT_UserFree64$address() {
        return VARIANT_UserFree64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void VARIANT_UserFree64(unsigned long *, VARIANT *)
     * }
     */
    public static void VARIANT_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = VARIANT_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VARIANT_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDispatch_Invoke_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IDispatch_Invoke_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IDispatch_Invoke_Proxy(IDispatch *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)
     * }
     */
    public static FunctionDescriptor IDispatch_Invoke_Proxy$descriptor() {
        return IDispatch_Invoke_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IDispatch_Invoke_Proxy(IDispatch *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)
     * }
     */
    public static MethodHandle IDispatch_Invoke_Proxy$handle() {
        return IDispatch_Invoke_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IDispatch_Invoke_Proxy(IDispatch *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)
     * }
     */
    public static MemorySegment IDispatch_Invoke_Proxy$address() {
        return IDispatch_Invoke_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IDispatch_Invoke_Proxy(IDispatch *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)
     * }
     */
    public static int IDispatch_Invoke_Proxy(MemorySegment This, int dispIdMember, MemorySegment riid, int lcid, short wFlags, MemorySegment pDispParams, MemorySegment pVarResult, MemorySegment pExcepInfo, MemorySegment puArgErr) {
        var mh$ = IDispatch_Invoke_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDispatch_Invoke_Proxy", This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
            }
            return (int)mh$.invokeExact(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDispatch_Invoke_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IDispatch_Invoke_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IDispatch_Invoke_Stub(IDispatch *This, DISPID dispIdMember, const IID *const riid, LCID lcid, DWORD dwFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *pArgErr, UINT cVarRef, UINT *rgVarRefIdx, VARIANTARG *rgVarRef)
     * }
     */
    public static FunctionDescriptor IDispatch_Invoke_Stub$descriptor() {
        return IDispatch_Invoke_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IDispatch_Invoke_Stub(IDispatch *This, DISPID dispIdMember, const IID *const riid, LCID lcid, DWORD dwFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *pArgErr, UINT cVarRef, UINT *rgVarRefIdx, VARIANTARG *rgVarRef)
     * }
     */
    public static MethodHandle IDispatch_Invoke_Stub$handle() {
        return IDispatch_Invoke_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IDispatch_Invoke_Stub(IDispatch *This, DISPID dispIdMember, const IID *const riid, LCID lcid, DWORD dwFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *pArgErr, UINT cVarRef, UINT *rgVarRefIdx, VARIANTARG *rgVarRef)
     * }
     */
    public static MemorySegment IDispatch_Invoke_Stub$address() {
        return IDispatch_Invoke_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IDispatch_Invoke_Stub(IDispatch *This, DISPID dispIdMember, const IID *const riid, LCID lcid, DWORD dwFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *pArgErr, UINT cVarRef, UINT *rgVarRefIdx, VARIANTARG *rgVarRef)
     * }
     */
    public static int IDispatch_Invoke_Stub(MemorySegment This, int dispIdMember, MemorySegment riid, int lcid, int dwFlags, MemorySegment pDispParams, MemorySegment pVarResult, MemorySegment pExcepInfo, MemorySegment pArgErr, int cVarRef, MemorySegment rgVarRefIdx, MemorySegment rgVarRef) {
        var mh$ = IDispatch_Invoke_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDispatch_Invoke_Stub", This, dispIdMember, riid, lcid, dwFlags, pDispParams, pVarResult, pExcepInfo, pArgErr, cVarRef, rgVarRefIdx, rgVarRef);
            }
            return (int)mh$.invokeExact(This, dispIdMember, riid, lcid, dwFlags, pDispParams, pVarResult, pExcepInfo, pArgErr, cVarRef, rgVarRefIdx, rgVarRef);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumVARIANT_Next_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumVARIANT_Next_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumVARIANT_Next_Proxy(IEnumVARIANT *This, ULONG celt, VARIANT *rgVar, ULONG *pCeltFetched)
     * }
     */
    public static FunctionDescriptor IEnumVARIANT_Next_Proxy$descriptor() {
        return IEnumVARIANT_Next_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumVARIANT_Next_Proxy(IEnumVARIANT *This, ULONG celt, VARIANT *rgVar, ULONG *pCeltFetched)
     * }
     */
    public static MethodHandle IEnumVARIANT_Next_Proxy$handle() {
        return IEnumVARIANT_Next_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumVARIANT_Next_Proxy(IEnumVARIANT *This, ULONG celt, VARIANT *rgVar, ULONG *pCeltFetched)
     * }
     */
    public static MemorySegment IEnumVARIANT_Next_Proxy$address() {
        return IEnumVARIANT_Next_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumVARIANT_Next_Proxy(IEnumVARIANT *This, ULONG celt, VARIANT *rgVar, ULONG *pCeltFetched)
     * }
     */
    public static int IEnumVARIANT_Next_Proxy(MemorySegment This, int celt, MemorySegment rgVar, MemorySegment pCeltFetched) {
        var mh$ = IEnumVARIANT_Next_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumVARIANT_Next_Proxy", This, celt, rgVar, pCeltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgVar, pCeltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumVARIANT_Next_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumVARIANT_Next_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumVARIANT_Next_Stub(IEnumVARIANT *This, ULONG celt, VARIANT *rgVar, ULONG *pCeltFetched)
     * }
     */
    public static FunctionDescriptor IEnumVARIANT_Next_Stub$descriptor() {
        return IEnumVARIANT_Next_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumVARIANT_Next_Stub(IEnumVARIANT *This, ULONG celt, VARIANT *rgVar, ULONG *pCeltFetched)
     * }
     */
    public static MethodHandle IEnumVARIANT_Next_Stub$handle() {
        return IEnumVARIANT_Next_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumVARIANT_Next_Stub(IEnumVARIANT *This, ULONG celt, VARIANT *rgVar, ULONG *pCeltFetched)
     * }
     */
    public static MemorySegment IEnumVARIANT_Next_Stub$address() {
        return IEnumVARIANT_Next_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumVARIANT_Next_Stub(IEnumVARIANT *This, ULONG celt, VARIANT *rgVar, ULONG *pCeltFetched)
     * }
     */
    public static int IEnumVARIANT_Next_Stub(MemorySegment This, int celt, MemorySegment rgVar, MemorySegment pCeltFetched) {
        var mh$ = IEnumVARIANT_Next_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumVARIANT_Next_Stub", This, celt, rgVar, pCeltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgVar, pCeltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeComp_Bind_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeComp_Bind_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeComp_Bind_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, BINDPTR *pBindPtr)
     * }
     */
    public static FunctionDescriptor ITypeComp_Bind_Proxy$descriptor() {
        return ITypeComp_Bind_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeComp_Bind_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, BINDPTR *pBindPtr)
     * }
     */
    public static MethodHandle ITypeComp_Bind_Proxy$handle() {
        return ITypeComp_Bind_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeComp_Bind_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, BINDPTR *pBindPtr)
     * }
     */
    public static MemorySegment ITypeComp_Bind_Proxy$address() {
        return ITypeComp_Bind_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeComp_Bind_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, BINDPTR *pBindPtr)
     * }
     */
    public static int ITypeComp_Bind_Proxy(MemorySegment This, MemorySegment szName, int lHashVal, short wFlags, MemorySegment ppTInfo, MemorySegment pDescKind, MemorySegment pBindPtr) {
        var mh$ = ITypeComp_Bind_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeComp_Bind_Proxy", This, szName, lHashVal, wFlags, ppTInfo, pDescKind, pBindPtr);
            }
            return (int)mh$.invokeExact(This, szName, lHashVal, wFlags, ppTInfo, pDescKind, pBindPtr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeComp_Bind_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeComp_Bind_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeComp_Bind_Stub(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, LPFUNCDESC *ppFuncDesc, LPVARDESC *ppVarDesc, ITypeComp **ppTypeComp, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static FunctionDescriptor ITypeComp_Bind_Stub$descriptor() {
        return ITypeComp_Bind_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeComp_Bind_Stub(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, LPFUNCDESC *ppFuncDesc, LPVARDESC *ppVarDesc, ITypeComp **ppTypeComp, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static MethodHandle ITypeComp_Bind_Stub$handle() {
        return ITypeComp_Bind_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeComp_Bind_Stub(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, LPFUNCDESC *ppFuncDesc, LPVARDESC *ppVarDesc, ITypeComp **ppTypeComp, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static MemorySegment ITypeComp_Bind_Stub$address() {
        return ITypeComp_Bind_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeComp_Bind_Stub(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, LPFUNCDESC *ppFuncDesc, LPVARDESC *ppVarDesc, ITypeComp **ppTypeComp, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static int ITypeComp_Bind_Stub(MemorySegment This, MemorySegment szName, int lHashVal, short wFlags, MemorySegment ppTInfo, MemorySegment pDescKind, MemorySegment ppFuncDesc, MemorySegment ppVarDesc, MemorySegment ppTypeComp, MemorySegment pDummy) {
        var mh$ = ITypeComp_Bind_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeComp_Bind_Stub", This, szName, lHashVal, wFlags, ppTInfo, pDescKind, ppFuncDesc, ppVarDesc, ppTypeComp, pDummy);
            }
            return (int)mh$.invokeExact(This, szName, lHashVal, wFlags, ppTInfo, pDescKind, ppFuncDesc, ppVarDesc, ppTypeComp, pDummy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeComp_BindType_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeComp_BindType_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeComp_BindType_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo, ITypeComp **ppTComp)
     * }
     */
    public static FunctionDescriptor ITypeComp_BindType_Proxy$descriptor() {
        return ITypeComp_BindType_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeComp_BindType_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo, ITypeComp **ppTComp)
     * }
     */
    public static MethodHandle ITypeComp_BindType_Proxy$handle() {
        return ITypeComp_BindType_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeComp_BindType_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo, ITypeComp **ppTComp)
     * }
     */
    public static MemorySegment ITypeComp_BindType_Proxy$address() {
        return ITypeComp_BindType_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeComp_BindType_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo, ITypeComp **ppTComp)
     * }
     */
    public static int ITypeComp_BindType_Proxy(MemorySegment This, MemorySegment szName, int lHashVal, MemorySegment ppTInfo, MemorySegment ppTComp) {
        var mh$ = ITypeComp_BindType_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeComp_BindType_Proxy", This, szName, lHashVal, ppTInfo, ppTComp);
            }
            return (int)mh$.invokeExact(This, szName, lHashVal, ppTInfo, ppTComp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeComp_BindType_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeComp_BindType_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeComp_BindType_Stub(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo)
     * }
     */
    public static FunctionDescriptor ITypeComp_BindType_Stub$descriptor() {
        return ITypeComp_BindType_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeComp_BindType_Stub(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo)
     * }
     */
    public static MethodHandle ITypeComp_BindType_Stub$handle() {
        return ITypeComp_BindType_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeComp_BindType_Stub(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo)
     * }
     */
    public static MemorySegment ITypeComp_BindType_Stub$address() {
        return ITypeComp_BindType_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeComp_BindType_Stub(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo)
     * }
     */
    public static int ITypeComp_BindType_Stub(MemorySegment This, MemorySegment szName, int lHashVal, MemorySegment ppTInfo) {
        var mh$ = ITypeComp_BindType_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeComp_BindType_Stub", This, szName, lHashVal, ppTInfo);
            }
            return (int)mh$.invokeExact(This, szName, lHashVal, ppTInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_GetTypeAttr_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_GetTypeAttr_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetTypeAttr_Proxy(ITypeInfo *This, TYPEATTR **ppTypeAttr)
     * }
     */
    public static FunctionDescriptor ITypeInfo_GetTypeAttr_Proxy$descriptor() {
        return ITypeInfo_GetTypeAttr_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetTypeAttr_Proxy(ITypeInfo *This, TYPEATTR **ppTypeAttr)
     * }
     */
    public static MethodHandle ITypeInfo_GetTypeAttr_Proxy$handle() {
        return ITypeInfo_GetTypeAttr_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetTypeAttr_Proxy(ITypeInfo *This, TYPEATTR **ppTypeAttr)
     * }
     */
    public static MemorySegment ITypeInfo_GetTypeAttr_Proxy$address() {
        return ITypeInfo_GetTypeAttr_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetTypeAttr_Proxy(ITypeInfo *This, TYPEATTR **ppTypeAttr)
     * }
     */
    public static int ITypeInfo_GetTypeAttr_Proxy(MemorySegment This, MemorySegment ppTypeAttr) {
        var mh$ = ITypeInfo_GetTypeAttr_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_GetTypeAttr_Proxy", This, ppTypeAttr);
            }
            return (int)mh$.invokeExact(This, ppTypeAttr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_GetTypeAttr_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_GetTypeAttr_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetTypeAttr_Stub(ITypeInfo *This, LPTYPEATTR *ppTypeAttr, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static FunctionDescriptor ITypeInfo_GetTypeAttr_Stub$descriptor() {
        return ITypeInfo_GetTypeAttr_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetTypeAttr_Stub(ITypeInfo *This, LPTYPEATTR *ppTypeAttr, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static MethodHandle ITypeInfo_GetTypeAttr_Stub$handle() {
        return ITypeInfo_GetTypeAttr_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetTypeAttr_Stub(ITypeInfo *This, LPTYPEATTR *ppTypeAttr, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static MemorySegment ITypeInfo_GetTypeAttr_Stub$address() {
        return ITypeInfo_GetTypeAttr_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetTypeAttr_Stub(ITypeInfo *This, LPTYPEATTR *ppTypeAttr, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static int ITypeInfo_GetTypeAttr_Stub(MemorySegment This, MemorySegment ppTypeAttr, MemorySegment pDummy) {
        var mh$ = ITypeInfo_GetTypeAttr_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_GetTypeAttr_Stub", This, ppTypeAttr, pDummy);
            }
            return (int)mh$.invokeExact(This, ppTypeAttr, pDummy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_GetFuncDesc_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_GetFuncDesc_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetFuncDesc_Proxy(ITypeInfo *This, UINT index, FUNCDESC **ppFuncDesc)
     * }
     */
    public static FunctionDescriptor ITypeInfo_GetFuncDesc_Proxy$descriptor() {
        return ITypeInfo_GetFuncDesc_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetFuncDesc_Proxy(ITypeInfo *This, UINT index, FUNCDESC **ppFuncDesc)
     * }
     */
    public static MethodHandle ITypeInfo_GetFuncDesc_Proxy$handle() {
        return ITypeInfo_GetFuncDesc_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetFuncDesc_Proxy(ITypeInfo *This, UINT index, FUNCDESC **ppFuncDesc)
     * }
     */
    public static MemorySegment ITypeInfo_GetFuncDesc_Proxy$address() {
        return ITypeInfo_GetFuncDesc_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetFuncDesc_Proxy(ITypeInfo *This, UINT index, FUNCDESC **ppFuncDesc)
     * }
     */
    public static int ITypeInfo_GetFuncDesc_Proxy(MemorySegment This, int index, MemorySegment ppFuncDesc) {
        var mh$ = ITypeInfo_GetFuncDesc_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_GetFuncDesc_Proxy", This, index, ppFuncDesc);
            }
            return (int)mh$.invokeExact(This, index, ppFuncDesc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_GetFuncDesc_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_GetFuncDesc_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetFuncDesc_Stub(ITypeInfo *This, UINT index, LPFUNCDESC *ppFuncDesc, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static FunctionDescriptor ITypeInfo_GetFuncDesc_Stub$descriptor() {
        return ITypeInfo_GetFuncDesc_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetFuncDesc_Stub(ITypeInfo *This, UINT index, LPFUNCDESC *ppFuncDesc, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static MethodHandle ITypeInfo_GetFuncDesc_Stub$handle() {
        return ITypeInfo_GetFuncDesc_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetFuncDesc_Stub(ITypeInfo *This, UINT index, LPFUNCDESC *ppFuncDesc, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static MemorySegment ITypeInfo_GetFuncDesc_Stub$address() {
        return ITypeInfo_GetFuncDesc_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetFuncDesc_Stub(ITypeInfo *This, UINT index, LPFUNCDESC *ppFuncDesc, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static int ITypeInfo_GetFuncDesc_Stub(MemorySegment This, int index, MemorySegment ppFuncDesc, MemorySegment pDummy) {
        var mh$ = ITypeInfo_GetFuncDesc_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_GetFuncDesc_Stub", This, index, ppFuncDesc, pDummy);
            }
            return (int)mh$.invokeExact(This, index, ppFuncDesc, pDummy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_GetVarDesc_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_GetVarDesc_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetVarDesc_Proxy(ITypeInfo *This, UINT index, VARDESC **ppVarDesc)
     * }
     */
    public static FunctionDescriptor ITypeInfo_GetVarDesc_Proxy$descriptor() {
        return ITypeInfo_GetVarDesc_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetVarDesc_Proxy(ITypeInfo *This, UINT index, VARDESC **ppVarDesc)
     * }
     */
    public static MethodHandle ITypeInfo_GetVarDesc_Proxy$handle() {
        return ITypeInfo_GetVarDesc_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetVarDesc_Proxy(ITypeInfo *This, UINT index, VARDESC **ppVarDesc)
     * }
     */
    public static MemorySegment ITypeInfo_GetVarDesc_Proxy$address() {
        return ITypeInfo_GetVarDesc_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetVarDesc_Proxy(ITypeInfo *This, UINT index, VARDESC **ppVarDesc)
     * }
     */
    public static int ITypeInfo_GetVarDesc_Proxy(MemorySegment This, int index, MemorySegment ppVarDesc) {
        var mh$ = ITypeInfo_GetVarDesc_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_GetVarDesc_Proxy", This, index, ppVarDesc);
            }
            return (int)mh$.invokeExact(This, index, ppVarDesc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_GetVarDesc_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_GetVarDesc_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetVarDesc_Stub(ITypeInfo *This, UINT index, LPVARDESC *ppVarDesc, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static FunctionDescriptor ITypeInfo_GetVarDesc_Stub$descriptor() {
        return ITypeInfo_GetVarDesc_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetVarDesc_Stub(ITypeInfo *This, UINT index, LPVARDESC *ppVarDesc, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static MethodHandle ITypeInfo_GetVarDesc_Stub$handle() {
        return ITypeInfo_GetVarDesc_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetVarDesc_Stub(ITypeInfo *This, UINT index, LPVARDESC *ppVarDesc, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static MemorySegment ITypeInfo_GetVarDesc_Stub$address() {
        return ITypeInfo_GetVarDesc_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetVarDesc_Stub(ITypeInfo *This, UINT index, LPVARDESC *ppVarDesc, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static int ITypeInfo_GetVarDesc_Stub(MemorySegment This, int index, MemorySegment ppVarDesc, MemorySegment pDummy) {
        var mh$ = ITypeInfo_GetVarDesc_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_GetVarDesc_Stub", This, index, ppVarDesc, pDummy);
            }
            return (int)mh$.invokeExact(This, index, ppVarDesc, pDummy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_GetNames_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_GetNames_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetNames_Proxy(ITypeInfo *This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames)
     * }
     */
    public static FunctionDescriptor ITypeInfo_GetNames_Proxy$descriptor() {
        return ITypeInfo_GetNames_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetNames_Proxy(ITypeInfo *This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames)
     * }
     */
    public static MethodHandle ITypeInfo_GetNames_Proxy$handle() {
        return ITypeInfo_GetNames_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetNames_Proxy(ITypeInfo *This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames)
     * }
     */
    public static MemorySegment ITypeInfo_GetNames_Proxy$address() {
        return ITypeInfo_GetNames_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetNames_Proxy(ITypeInfo *This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames)
     * }
     */
    public static int ITypeInfo_GetNames_Proxy(MemorySegment This, int memid, MemorySegment rgBstrNames, int cMaxNames, MemorySegment pcNames) {
        var mh$ = ITypeInfo_GetNames_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_GetNames_Proxy", This, memid, rgBstrNames, cMaxNames, pcNames);
            }
            return (int)mh$.invokeExact(This, memid, rgBstrNames, cMaxNames, pcNames);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_GetNames_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_GetNames_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetNames_Stub(ITypeInfo *This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames)
     * }
     */
    public static FunctionDescriptor ITypeInfo_GetNames_Stub$descriptor() {
        return ITypeInfo_GetNames_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetNames_Stub(ITypeInfo *This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames)
     * }
     */
    public static MethodHandle ITypeInfo_GetNames_Stub$handle() {
        return ITypeInfo_GetNames_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetNames_Stub(ITypeInfo *This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames)
     * }
     */
    public static MemorySegment ITypeInfo_GetNames_Stub$address() {
        return ITypeInfo_GetNames_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetNames_Stub(ITypeInfo *This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames)
     * }
     */
    public static int ITypeInfo_GetNames_Stub(MemorySegment This, int memid, MemorySegment rgBstrNames, int cMaxNames, MemorySegment pcNames) {
        var mh$ = ITypeInfo_GetNames_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_GetNames_Stub", This, memid, rgBstrNames, cMaxNames, pcNames);
            }
            return (int)mh$.invokeExact(This, memid, rgBstrNames, cMaxNames, pcNames);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_GetIDsOfNames_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_GetIDsOfNames_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetIDsOfNames_Proxy(ITypeInfo *This, LPOLESTR *rgszNames, UINT cNames, MEMBERID *pMemId)
     * }
     */
    public static FunctionDescriptor ITypeInfo_GetIDsOfNames_Proxy$descriptor() {
        return ITypeInfo_GetIDsOfNames_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetIDsOfNames_Proxy(ITypeInfo *This, LPOLESTR *rgszNames, UINT cNames, MEMBERID *pMemId)
     * }
     */
    public static MethodHandle ITypeInfo_GetIDsOfNames_Proxy$handle() {
        return ITypeInfo_GetIDsOfNames_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetIDsOfNames_Proxy(ITypeInfo *This, LPOLESTR *rgszNames, UINT cNames, MEMBERID *pMemId)
     * }
     */
    public static MemorySegment ITypeInfo_GetIDsOfNames_Proxy$address() {
        return ITypeInfo_GetIDsOfNames_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetIDsOfNames_Proxy(ITypeInfo *This, LPOLESTR *rgszNames, UINT cNames, MEMBERID *pMemId)
     * }
     */
    public static int ITypeInfo_GetIDsOfNames_Proxy(MemorySegment This, MemorySegment rgszNames, int cNames, MemorySegment pMemId) {
        var mh$ = ITypeInfo_GetIDsOfNames_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_GetIDsOfNames_Proxy", This, rgszNames, cNames, pMemId);
            }
            return (int)mh$.invokeExact(This, rgszNames, cNames, pMemId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_GetIDsOfNames_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_GetIDsOfNames_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetIDsOfNames_Stub(ITypeInfo *This)
     * }
     */
    public static FunctionDescriptor ITypeInfo_GetIDsOfNames_Stub$descriptor() {
        return ITypeInfo_GetIDsOfNames_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetIDsOfNames_Stub(ITypeInfo *This)
     * }
     */
    public static MethodHandle ITypeInfo_GetIDsOfNames_Stub$handle() {
        return ITypeInfo_GetIDsOfNames_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetIDsOfNames_Stub(ITypeInfo *This)
     * }
     */
    public static MemorySegment ITypeInfo_GetIDsOfNames_Stub$address() {
        return ITypeInfo_GetIDsOfNames_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetIDsOfNames_Stub(ITypeInfo *This)
     * }
     */
    public static int ITypeInfo_GetIDsOfNames_Stub(MemorySegment This) {
        var mh$ = ITypeInfo_GetIDsOfNames_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_GetIDsOfNames_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_Invoke_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_Invoke_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_Invoke_Proxy(ITypeInfo *This, PVOID pvInstance, MEMBERID memid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)
     * }
     */
    public static FunctionDescriptor ITypeInfo_Invoke_Proxy$descriptor() {
        return ITypeInfo_Invoke_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_Invoke_Proxy(ITypeInfo *This, PVOID pvInstance, MEMBERID memid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)
     * }
     */
    public static MethodHandle ITypeInfo_Invoke_Proxy$handle() {
        return ITypeInfo_Invoke_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_Invoke_Proxy(ITypeInfo *This, PVOID pvInstance, MEMBERID memid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)
     * }
     */
    public static MemorySegment ITypeInfo_Invoke_Proxy$address() {
        return ITypeInfo_Invoke_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_Invoke_Proxy(ITypeInfo *This, PVOID pvInstance, MEMBERID memid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)
     * }
     */
    public static int ITypeInfo_Invoke_Proxy(MemorySegment This, MemorySegment pvInstance, int memid, short wFlags, MemorySegment pDispParams, MemorySegment pVarResult, MemorySegment pExcepInfo, MemorySegment puArgErr) {
        var mh$ = ITypeInfo_Invoke_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_Invoke_Proxy", This, pvInstance, memid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
            }
            return (int)mh$.invokeExact(This, pvInstance, memid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_Invoke_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_Invoke_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_Invoke_Stub(ITypeInfo *This)
     * }
     */
    public static FunctionDescriptor ITypeInfo_Invoke_Stub$descriptor() {
        return ITypeInfo_Invoke_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_Invoke_Stub(ITypeInfo *This)
     * }
     */
    public static MethodHandle ITypeInfo_Invoke_Stub$handle() {
        return ITypeInfo_Invoke_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_Invoke_Stub(ITypeInfo *This)
     * }
     */
    public static MemorySegment ITypeInfo_Invoke_Stub$address() {
        return ITypeInfo_Invoke_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_Invoke_Stub(ITypeInfo *This)
     * }
     */
    public static int ITypeInfo_Invoke_Stub(MemorySegment This) {
        var mh$ = ITypeInfo_Invoke_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_Invoke_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_GetDocumentation_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_GetDocumentation_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetDocumentation_Proxy(ITypeInfo *This, MEMBERID memid, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static FunctionDescriptor ITypeInfo_GetDocumentation_Proxy$descriptor() {
        return ITypeInfo_GetDocumentation_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetDocumentation_Proxy(ITypeInfo *This, MEMBERID memid, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static MethodHandle ITypeInfo_GetDocumentation_Proxy$handle() {
        return ITypeInfo_GetDocumentation_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetDocumentation_Proxy(ITypeInfo *This, MEMBERID memid, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static MemorySegment ITypeInfo_GetDocumentation_Proxy$address() {
        return ITypeInfo_GetDocumentation_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetDocumentation_Proxy(ITypeInfo *This, MEMBERID memid, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static int ITypeInfo_GetDocumentation_Proxy(MemorySegment This, int memid, MemorySegment pBstrName, MemorySegment pBstrDocString, MemorySegment pdwHelpContext, MemorySegment pBstrHelpFile) {
        var mh$ = ITypeInfo_GetDocumentation_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_GetDocumentation_Proxy", This, memid, pBstrName, pBstrDocString, pdwHelpContext, pBstrHelpFile);
            }
            return (int)mh$.invokeExact(This, memid, pBstrName, pBstrDocString, pdwHelpContext, pBstrHelpFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_GetDocumentation_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_GetDocumentation_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetDocumentation_Stub(ITypeInfo *This, MEMBERID memid, DWORD refPtrFlags, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static FunctionDescriptor ITypeInfo_GetDocumentation_Stub$descriptor() {
        return ITypeInfo_GetDocumentation_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetDocumentation_Stub(ITypeInfo *This, MEMBERID memid, DWORD refPtrFlags, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static MethodHandle ITypeInfo_GetDocumentation_Stub$handle() {
        return ITypeInfo_GetDocumentation_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetDocumentation_Stub(ITypeInfo *This, MEMBERID memid, DWORD refPtrFlags, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static MemorySegment ITypeInfo_GetDocumentation_Stub$address() {
        return ITypeInfo_GetDocumentation_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetDocumentation_Stub(ITypeInfo *This, MEMBERID memid, DWORD refPtrFlags, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static int ITypeInfo_GetDocumentation_Stub(MemorySegment This, int memid, int refPtrFlags, MemorySegment pBstrName, MemorySegment pBstrDocString, MemorySegment pdwHelpContext, MemorySegment pBstrHelpFile) {
        var mh$ = ITypeInfo_GetDocumentation_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_GetDocumentation_Stub", This, memid, refPtrFlags, pBstrName, pBstrDocString, pdwHelpContext, pBstrHelpFile);
            }
            return (int)mh$.invokeExact(This, memid, refPtrFlags, pBstrName, pBstrDocString, pdwHelpContext, pBstrHelpFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_GetDllEntry_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_GetDllEntry_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetDllEntry_Proxy(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal)
     * }
     */
    public static FunctionDescriptor ITypeInfo_GetDllEntry_Proxy$descriptor() {
        return ITypeInfo_GetDllEntry_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetDllEntry_Proxy(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal)
     * }
     */
    public static MethodHandle ITypeInfo_GetDllEntry_Proxy$handle() {
        return ITypeInfo_GetDllEntry_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetDllEntry_Proxy(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal)
     * }
     */
    public static MemorySegment ITypeInfo_GetDllEntry_Proxy$address() {
        return ITypeInfo_GetDllEntry_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetDllEntry_Proxy(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal)
     * }
     */
    public static int ITypeInfo_GetDllEntry_Proxy(MemorySegment This, int memid, int invKind, MemorySegment pBstrDllName, MemorySegment pBstrName, MemorySegment pwOrdinal) {
        var mh$ = ITypeInfo_GetDllEntry_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_GetDllEntry_Proxy", This, memid, invKind, pBstrDllName, pBstrName, pwOrdinal);
            }
            return (int)mh$.invokeExact(This, memid, invKind, pBstrDllName, pBstrName, pwOrdinal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_GetDllEntry_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_INT,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_GetDllEntry_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetDllEntry_Stub(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, DWORD refPtrFlags, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal)
     * }
     */
    public static FunctionDescriptor ITypeInfo_GetDllEntry_Stub$descriptor() {
        return ITypeInfo_GetDllEntry_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetDllEntry_Stub(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, DWORD refPtrFlags, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal)
     * }
     */
    public static MethodHandle ITypeInfo_GetDllEntry_Stub$handle() {
        return ITypeInfo_GetDllEntry_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetDllEntry_Stub(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, DWORD refPtrFlags, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal)
     * }
     */
    public static MemorySegment ITypeInfo_GetDllEntry_Stub$address() {
        return ITypeInfo_GetDllEntry_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetDllEntry_Stub(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, DWORD refPtrFlags, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal)
     * }
     */
    public static int ITypeInfo_GetDllEntry_Stub(MemorySegment This, int memid, int invKind, int refPtrFlags, MemorySegment pBstrDllName, MemorySegment pBstrName, MemorySegment pwOrdinal) {
        var mh$ = ITypeInfo_GetDllEntry_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_GetDllEntry_Stub", This, memid, invKind, refPtrFlags, pBstrDllName, pBstrName, pwOrdinal);
            }
            return (int)mh$.invokeExact(This, memid, invKind, refPtrFlags, pBstrDllName, pBstrName, pwOrdinal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_AddressOfMember_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_AddressOfMember_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_AddressOfMember_Proxy(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, PVOID *ppv)
     * }
     */
    public static FunctionDescriptor ITypeInfo_AddressOfMember_Proxy$descriptor() {
        return ITypeInfo_AddressOfMember_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_AddressOfMember_Proxy(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, PVOID *ppv)
     * }
     */
    public static MethodHandle ITypeInfo_AddressOfMember_Proxy$handle() {
        return ITypeInfo_AddressOfMember_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_AddressOfMember_Proxy(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, PVOID *ppv)
     * }
     */
    public static MemorySegment ITypeInfo_AddressOfMember_Proxy$address() {
        return ITypeInfo_AddressOfMember_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_AddressOfMember_Proxy(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, PVOID *ppv)
     * }
     */
    public static int ITypeInfo_AddressOfMember_Proxy(MemorySegment This, int memid, int invKind, MemorySegment ppv) {
        var mh$ = ITypeInfo_AddressOfMember_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_AddressOfMember_Proxy", This, memid, invKind, ppv);
            }
            return (int)mh$.invokeExact(This, memid, invKind, ppv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_AddressOfMember_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_AddressOfMember_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_AddressOfMember_Stub(ITypeInfo *This)
     * }
     */
    public static FunctionDescriptor ITypeInfo_AddressOfMember_Stub$descriptor() {
        return ITypeInfo_AddressOfMember_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_AddressOfMember_Stub(ITypeInfo *This)
     * }
     */
    public static MethodHandle ITypeInfo_AddressOfMember_Stub$handle() {
        return ITypeInfo_AddressOfMember_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_AddressOfMember_Stub(ITypeInfo *This)
     * }
     */
    public static MemorySegment ITypeInfo_AddressOfMember_Stub$address() {
        return ITypeInfo_AddressOfMember_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_AddressOfMember_Stub(ITypeInfo *This)
     * }
     */
    public static int ITypeInfo_AddressOfMember_Stub(MemorySegment This) {
        var mh$ = ITypeInfo_AddressOfMember_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_AddressOfMember_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_CreateInstance_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_CreateInstance_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_CreateInstance_Proxy(ITypeInfo *This, IUnknown *pUnkOuter, const IID *const riid, PVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor ITypeInfo_CreateInstance_Proxy$descriptor() {
        return ITypeInfo_CreateInstance_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_CreateInstance_Proxy(ITypeInfo *This, IUnknown *pUnkOuter, const IID *const riid, PVOID *ppvObj)
     * }
     */
    public static MethodHandle ITypeInfo_CreateInstance_Proxy$handle() {
        return ITypeInfo_CreateInstance_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_CreateInstance_Proxy(ITypeInfo *This, IUnknown *pUnkOuter, const IID *const riid, PVOID *ppvObj)
     * }
     */
    public static MemorySegment ITypeInfo_CreateInstance_Proxy$address() {
        return ITypeInfo_CreateInstance_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_CreateInstance_Proxy(ITypeInfo *This, IUnknown *pUnkOuter, const IID *const riid, PVOID *ppvObj)
     * }
     */
    public static int ITypeInfo_CreateInstance_Proxy(MemorySegment This, MemorySegment pUnkOuter, MemorySegment riid, MemorySegment ppvObj) {
        var mh$ = ITypeInfo_CreateInstance_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_CreateInstance_Proxy", This, pUnkOuter, riid, ppvObj);
            }
            return (int)mh$.invokeExact(This, pUnkOuter, riid, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_CreateInstance_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_CreateInstance_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_CreateInstance_Stub(ITypeInfo *This, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static FunctionDescriptor ITypeInfo_CreateInstance_Stub$descriptor() {
        return ITypeInfo_CreateInstance_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_CreateInstance_Stub(ITypeInfo *This, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static MethodHandle ITypeInfo_CreateInstance_Stub$handle() {
        return ITypeInfo_CreateInstance_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_CreateInstance_Stub(ITypeInfo *This, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static MemorySegment ITypeInfo_CreateInstance_Stub$address() {
        return ITypeInfo_CreateInstance_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_CreateInstance_Stub(ITypeInfo *This, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static int ITypeInfo_CreateInstance_Stub(MemorySegment This, MemorySegment riid, MemorySegment ppvObj) {
        var mh$ = ITypeInfo_CreateInstance_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_CreateInstance_Stub", This, riid, ppvObj);
            }
            return (int)mh$.invokeExact(This, riid, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_GetContainingTypeLib_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_GetContainingTypeLib_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetContainingTypeLib_Proxy(ITypeInfo *This, ITypeLib **ppTLib, UINT *pIndex)
     * }
     */
    public static FunctionDescriptor ITypeInfo_GetContainingTypeLib_Proxy$descriptor() {
        return ITypeInfo_GetContainingTypeLib_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetContainingTypeLib_Proxy(ITypeInfo *This, ITypeLib **ppTLib, UINT *pIndex)
     * }
     */
    public static MethodHandle ITypeInfo_GetContainingTypeLib_Proxy$handle() {
        return ITypeInfo_GetContainingTypeLib_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetContainingTypeLib_Proxy(ITypeInfo *This, ITypeLib **ppTLib, UINT *pIndex)
     * }
     */
    public static MemorySegment ITypeInfo_GetContainingTypeLib_Proxy$address() {
        return ITypeInfo_GetContainingTypeLib_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetContainingTypeLib_Proxy(ITypeInfo *This, ITypeLib **ppTLib, UINT *pIndex)
     * }
     */
    public static int ITypeInfo_GetContainingTypeLib_Proxy(MemorySegment This, MemorySegment ppTLib, MemorySegment pIndex) {
        var mh$ = ITypeInfo_GetContainingTypeLib_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_GetContainingTypeLib_Proxy", This, ppTLib, pIndex);
            }
            return (int)mh$.invokeExact(This, ppTLib, pIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_GetContainingTypeLib_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_GetContainingTypeLib_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetContainingTypeLib_Stub(ITypeInfo *This, ITypeLib **ppTLib, UINT *pIndex)
     * }
     */
    public static FunctionDescriptor ITypeInfo_GetContainingTypeLib_Stub$descriptor() {
        return ITypeInfo_GetContainingTypeLib_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetContainingTypeLib_Stub(ITypeInfo *This, ITypeLib **ppTLib, UINT *pIndex)
     * }
     */
    public static MethodHandle ITypeInfo_GetContainingTypeLib_Stub$handle() {
        return ITypeInfo_GetContainingTypeLib_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetContainingTypeLib_Stub(ITypeInfo *This, ITypeLib **ppTLib, UINT *pIndex)
     * }
     */
    public static MemorySegment ITypeInfo_GetContainingTypeLib_Stub$address() {
        return ITypeInfo_GetContainingTypeLib_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_GetContainingTypeLib_Stub(ITypeInfo *This, ITypeLib **ppTLib, UINT *pIndex)
     * }
     */
    public static int ITypeInfo_GetContainingTypeLib_Stub(MemorySegment This, MemorySegment ppTLib, MemorySegment pIndex) {
        var mh$ = ITypeInfo_GetContainingTypeLib_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_GetContainingTypeLib_Stub", This, ppTLib, pIndex);
            }
            return (int)mh$.invokeExact(This, ppTLib, pIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_ReleaseTypeAttr_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_ReleaseTypeAttr_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeInfo_ReleaseTypeAttr_Proxy(ITypeInfo *This, TYPEATTR *pTypeAttr)
     * }
     */
    public static FunctionDescriptor ITypeInfo_ReleaseTypeAttr_Proxy$descriptor() {
        return ITypeInfo_ReleaseTypeAttr_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeInfo_ReleaseTypeAttr_Proxy(ITypeInfo *This, TYPEATTR *pTypeAttr)
     * }
     */
    public static MethodHandle ITypeInfo_ReleaseTypeAttr_Proxy$handle() {
        return ITypeInfo_ReleaseTypeAttr_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ITypeInfo_ReleaseTypeAttr_Proxy(ITypeInfo *This, TYPEATTR *pTypeAttr)
     * }
     */
    public static MemorySegment ITypeInfo_ReleaseTypeAttr_Proxy$address() {
        return ITypeInfo_ReleaseTypeAttr_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ITypeInfo_ReleaseTypeAttr_Proxy(ITypeInfo *This, TYPEATTR *pTypeAttr)
     * }
     */
    public static void ITypeInfo_ReleaseTypeAttr_Proxy(MemorySegment This, MemorySegment pTypeAttr) {
        var mh$ = ITypeInfo_ReleaseTypeAttr_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_ReleaseTypeAttr_Proxy", This, pTypeAttr);
            }
            mh$.invokeExact(This, pTypeAttr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_ReleaseTypeAttr_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_ReleaseTypeAttr_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_ReleaseTypeAttr_Stub(ITypeInfo *This)
     * }
     */
    public static FunctionDescriptor ITypeInfo_ReleaseTypeAttr_Stub$descriptor() {
        return ITypeInfo_ReleaseTypeAttr_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_ReleaseTypeAttr_Stub(ITypeInfo *This)
     * }
     */
    public static MethodHandle ITypeInfo_ReleaseTypeAttr_Stub$handle() {
        return ITypeInfo_ReleaseTypeAttr_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_ReleaseTypeAttr_Stub(ITypeInfo *This)
     * }
     */
    public static MemorySegment ITypeInfo_ReleaseTypeAttr_Stub$address() {
        return ITypeInfo_ReleaseTypeAttr_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_ReleaseTypeAttr_Stub(ITypeInfo *This)
     * }
     */
    public static int ITypeInfo_ReleaseTypeAttr_Stub(MemorySegment This) {
        var mh$ = ITypeInfo_ReleaseTypeAttr_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_ReleaseTypeAttr_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_ReleaseFuncDesc_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_ReleaseFuncDesc_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeInfo_ReleaseFuncDesc_Proxy(ITypeInfo *This, FUNCDESC *pFuncDesc)
     * }
     */
    public static FunctionDescriptor ITypeInfo_ReleaseFuncDesc_Proxy$descriptor() {
        return ITypeInfo_ReleaseFuncDesc_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeInfo_ReleaseFuncDesc_Proxy(ITypeInfo *This, FUNCDESC *pFuncDesc)
     * }
     */
    public static MethodHandle ITypeInfo_ReleaseFuncDesc_Proxy$handle() {
        return ITypeInfo_ReleaseFuncDesc_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ITypeInfo_ReleaseFuncDesc_Proxy(ITypeInfo *This, FUNCDESC *pFuncDesc)
     * }
     */
    public static MemorySegment ITypeInfo_ReleaseFuncDesc_Proxy$address() {
        return ITypeInfo_ReleaseFuncDesc_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ITypeInfo_ReleaseFuncDesc_Proxy(ITypeInfo *This, FUNCDESC *pFuncDesc)
     * }
     */
    public static void ITypeInfo_ReleaseFuncDesc_Proxy(MemorySegment This, MemorySegment pFuncDesc) {
        var mh$ = ITypeInfo_ReleaseFuncDesc_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_ReleaseFuncDesc_Proxy", This, pFuncDesc);
            }
            mh$.invokeExact(This, pFuncDesc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_ReleaseFuncDesc_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_ReleaseFuncDesc_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_ReleaseFuncDesc_Stub(ITypeInfo *This)
     * }
     */
    public static FunctionDescriptor ITypeInfo_ReleaseFuncDesc_Stub$descriptor() {
        return ITypeInfo_ReleaseFuncDesc_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_ReleaseFuncDesc_Stub(ITypeInfo *This)
     * }
     */
    public static MethodHandle ITypeInfo_ReleaseFuncDesc_Stub$handle() {
        return ITypeInfo_ReleaseFuncDesc_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_ReleaseFuncDesc_Stub(ITypeInfo *This)
     * }
     */
    public static MemorySegment ITypeInfo_ReleaseFuncDesc_Stub$address() {
        return ITypeInfo_ReleaseFuncDesc_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_ReleaseFuncDesc_Stub(ITypeInfo *This)
     * }
     */
    public static int ITypeInfo_ReleaseFuncDesc_Stub(MemorySegment This) {
        var mh$ = ITypeInfo_ReleaseFuncDesc_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_ReleaseFuncDesc_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_ReleaseVarDesc_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_ReleaseVarDesc_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeInfo_ReleaseVarDesc_Proxy(ITypeInfo *This, VARDESC *pVarDesc)
     * }
     */
    public static FunctionDescriptor ITypeInfo_ReleaseVarDesc_Proxy$descriptor() {
        return ITypeInfo_ReleaseVarDesc_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeInfo_ReleaseVarDesc_Proxy(ITypeInfo *This, VARDESC *pVarDesc)
     * }
     */
    public static MethodHandle ITypeInfo_ReleaseVarDesc_Proxy$handle() {
        return ITypeInfo_ReleaseVarDesc_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ITypeInfo_ReleaseVarDesc_Proxy(ITypeInfo *This, VARDESC *pVarDesc)
     * }
     */
    public static MemorySegment ITypeInfo_ReleaseVarDesc_Proxy$address() {
        return ITypeInfo_ReleaseVarDesc_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ITypeInfo_ReleaseVarDesc_Proxy(ITypeInfo *This, VARDESC *pVarDesc)
     * }
     */
    public static void ITypeInfo_ReleaseVarDesc_Proxy(MemorySegment This, MemorySegment pVarDesc) {
        var mh$ = ITypeInfo_ReleaseVarDesc_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_ReleaseVarDesc_Proxy", This, pVarDesc);
            }
            mh$.invokeExact(This, pVarDesc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo_ReleaseVarDesc_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo_ReleaseVarDesc_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_ReleaseVarDesc_Stub(ITypeInfo *This)
     * }
     */
    public static FunctionDescriptor ITypeInfo_ReleaseVarDesc_Stub$descriptor() {
        return ITypeInfo_ReleaseVarDesc_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_ReleaseVarDesc_Stub(ITypeInfo *This)
     * }
     */
    public static MethodHandle ITypeInfo_ReleaseVarDesc_Stub$handle() {
        return ITypeInfo_ReleaseVarDesc_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo_ReleaseVarDesc_Stub(ITypeInfo *This)
     * }
     */
    public static MemorySegment ITypeInfo_ReleaseVarDesc_Stub$address() {
        return ITypeInfo_ReleaseVarDesc_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo_ReleaseVarDesc_Stub(ITypeInfo *This)
     * }
     */
    public static int ITypeInfo_ReleaseVarDesc_Stub(MemorySegment This) {
        var mh$ = ITypeInfo_ReleaseVarDesc_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo_ReleaseVarDesc_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo2_GetDocumentation2_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo2_GetDocumentation2_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo2_GetDocumentation2_Proxy(ITypeInfo2 *This, MEMBERID memid, LCID lcid, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static FunctionDescriptor ITypeInfo2_GetDocumentation2_Proxy$descriptor() {
        return ITypeInfo2_GetDocumentation2_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo2_GetDocumentation2_Proxy(ITypeInfo2 *This, MEMBERID memid, LCID lcid, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static MethodHandle ITypeInfo2_GetDocumentation2_Proxy$handle() {
        return ITypeInfo2_GetDocumentation2_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo2_GetDocumentation2_Proxy(ITypeInfo2 *This, MEMBERID memid, LCID lcid, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static MemorySegment ITypeInfo2_GetDocumentation2_Proxy$address() {
        return ITypeInfo2_GetDocumentation2_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo2_GetDocumentation2_Proxy(ITypeInfo2 *This, MEMBERID memid, LCID lcid, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static int ITypeInfo2_GetDocumentation2_Proxy(MemorySegment This, int memid, int lcid, MemorySegment pbstrHelpString, MemorySegment pdwHelpStringContext, MemorySegment pbstrHelpStringDll) {
        var mh$ = ITypeInfo2_GetDocumentation2_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo2_GetDocumentation2_Proxy", This, memid, lcid, pbstrHelpString, pdwHelpStringContext, pbstrHelpStringDll);
            }
            return (int)mh$.invokeExact(This, memid, lcid, pbstrHelpString, pdwHelpStringContext, pbstrHelpStringDll);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeInfo2_GetDocumentation2_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeInfo2_GetDocumentation2_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo2_GetDocumentation2_Stub(ITypeInfo2 *This, MEMBERID memid, LCID lcid, DWORD refPtrFlags, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static FunctionDescriptor ITypeInfo2_GetDocumentation2_Stub$descriptor() {
        return ITypeInfo2_GetDocumentation2_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo2_GetDocumentation2_Stub(ITypeInfo2 *This, MEMBERID memid, LCID lcid, DWORD refPtrFlags, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static MethodHandle ITypeInfo2_GetDocumentation2_Stub$handle() {
        return ITypeInfo2_GetDocumentation2_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeInfo2_GetDocumentation2_Stub(ITypeInfo2 *This, MEMBERID memid, LCID lcid, DWORD refPtrFlags, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static MemorySegment ITypeInfo2_GetDocumentation2_Stub$address() {
        return ITypeInfo2_GetDocumentation2_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeInfo2_GetDocumentation2_Stub(ITypeInfo2 *This, MEMBERID memid, LCID lcid, DWORD refPtrFlags, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static int ITypeInfo2_GetDocumentation2_Stub(MemorySegment This, int memid, int lcid, int refPtrFlags, MemorySegment pbstrHelpString, MemorySegment pdwHelpStringContext, MemorySegment pbstrHelpStringDll) {
        var mh$ = ITypeInfo2_GetDocumentation2_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeInfo2_GetDocumentation2_Stub", This, memid, lcid, refPtrFlags, pbstrHelpString, pdwHelpStringContext, pbstrHelpStringDll);
            }
            return (int)mh$.invokeExact(This, memid, lcid, refPtrFlags, pbstrHelpString, pdwHelpStringContext, pbstrHelpStringDll);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_GetTypeInfoCount_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeLib_GetTypeInfoCount_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT ITypeLib_GetTypeInfoCount_Proxy(ITypeLib *This)
     * }
     */
    public static FunctionDescriptor ITypeLib_GetTypeInfoCount_Proxy$descriptor() {
        return ITypeLib_GetTypeInfoCount_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT ITypeLib_GetTypeInfoCount_Proxy(ITypeLib *This)
     * }
     */
    public static MethodHandle ITypeLib_GetTypeInfoCount_Proxy$handle() {
        return ITypeLib_GetTypeInfoCount_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * UINT ITypeLib_GetTypeInfoCount_Proxy(ITypeLib *This)
     * }
     */
    public static MemorySegment ITypeLib_GetTypeInfoCount_Proxy$address() {
        return ITypeLib_GetTypeInfoCount_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * UINT ITypeLib_GetTypeInfoCount_Proxy(ITypeLib *This)
     * }
     */
    public static int ITypeLib_GetTypeInfoCount_Proxy(MemorySegment This) {
        var mh$ = ITypeLib_GetTypeInfoCount_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_GetTypeInfoCount_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_GetTypeInfoCount_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeLib_GetTypeInfoCount_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_GetTypeInfoCount_Stub(ITypeLib *This, UINT *pcTInfo)
     * }
     */
    public static FunctionDescriptor ITypeLib_GetTypeInfoCount_Stub$descriptor() {
        return ITypeLib_GetTypeInfoCount_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_GetTypeInfoCount_Stub(ITypeLib *This, UINT *pcTInfo)
     * }
     */
    public static MethodHandle ITypeLib_GetTypeInfoCount_Stub$handle() {
        return ITypeLib_GetTypeInfoCount_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_GetTypeInfoCount_Stub(ITypeLib *This, UINT *pcTInfo)
     * }
     */
    public static MemorySegment ITypeLib_GetTypeInfoCount_Stub$address() {
        return ITypeLib_GetTypeInfoCount_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib_GetTypeInfoCount_Stub(ITypeLib *This, UINT *pcTInfo)
     * }
     */
    public static int ITypeLib_GetTypeInfoCount_Stub(MemorySegment This, MemorySegment pcTInfo) {
        var mh$ = ITypeLib_GetTypeInfoCount_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_GetTypeInfoCount_Stub", This, pcTInfo);
            }
            return (int)mh$.invokeExact(This, pcTInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_GetLibAttr_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeLib_GetLibAttr_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_GetLibAttr_Proxy(ITypeLib *This, TLIBATTR **ppTLibAttr)
     * }
     */
    public static FunctionDescriptor ITypeLib_GetLibAttr_Proxy$descriptor() {
        return ITypeLib_GetLibAttr_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_GetLibAttr_Proxy(ITypeLib *This, TLIBATTR **ppTLibAttr)
     * }
     */
    public static MethodHandle ITypeLib_GetLibAttr_Proxy$handle() {
        return ITypeLib_GetLibAttr_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_GetLibAttr_Proxy(ITypeLib *This, TLIBATTR **ppTLibAttr)
     * }
     */
    public static MemorySegment ITypeLib_GetLibAttr_Proxy$address() {
        return ITypeLib_GetLibAttr_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib_GetLibAttr_Proxy(ITypeLib *This, TLIBATTR **ppTLibAttr)
     * }
     */
    public static int ITypeLib_GetLibAttr_Proxy(MemorySegment This, MemorySegment ppTLibAttr) {
        var mh$ = ITypeLib_GetLibAttr_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_GetLibAttr_Proxy", This, ppTLibAttr);
            }
            return (int)mh$.invokeExact(This, ppTLibAttr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_GetLibAttr_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeLib_GetLibAttr_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_GetLibAttr_Stub(ITypeLib *This, LPTLIBATTR *ppTLibAttr, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static FunctionDescriptor ITypeLib_GetLibAttr_Stub$descriptor() {
        return ITypeLib_GetLibAttr_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_GetLibAttr_Stub(ITypeLib *This, LPTLIBATTR *ppTLibAttr, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static MethodHandle ITypeLib_GetLibAttr_Stub$handle() {
        return ITypeLib_GetLibAttr_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_GetLibAttr_Stub(ITypeLib *This, LPTLIBATTR *ppTLibAttr, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static MemorySegment ITypeLib_GetLibAttr_Stub$address() {
        return ITypeLib_GetLibAttr_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib_GetLibAttr_Stub(ITypeLib *This, LPTLIBATTR *ppTLibAttr, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static int ITypeLib_GetLibAttr_Stub(MemorySegment This, MemorySegment ppTLibAttr, MemorySegment pDummy) {
        var mh$ = ITypeLib_GetLibAttr_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_GetLibAttr_Stub", This, ppTLibAttr, pDummy);
            }
            return (int)mh$.invokeExact(This, ppTLibAttr, pDummy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_GetDocumentation_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeLib_GetDocumentation_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_GetDocumentation_Proxy(ITypeLib *This, INT index, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static FunctionDescriptor ITypeLib_GetDocumentation_Proxy$descriptor() {
        return ITypeLib_GetDocumentation_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_GetDocumentation_Proxy(ITypeLib *This, INT index, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static MethodHandle ITypeLib_GetDocumentation_Proxy$handle() {
        return ITypeLib_GetDocumentation_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_GetDocumentation_Proxy(ITypeLib *This, INT index, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static MemorySegment ITypeLib_GetDocumentation_Proxy$address() {
        return ITypeLib_GetDocumentation_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib_GetDocumentation_Proxy(ITypeLib *This, INT index, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static int ITypeLib_GetDocumentation_Proxy(MemorySegment This, int index, MemorySegment pBstrName, MemorySegment pBstrDocString, MemorySegment pdwHelpContext, MemorySegment pBstrHelpFile) {
        var mh$ = ITypeLib_GetDocumentation_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_GetDocumentation_Proxy", This, index, pBstrName, pBstrDocString, pdwHelpContext, pBstrHelpFile);
            }
            return (int)mh$.invokeExact(This, index, pBstrName, pBstrDocString, pdwHelpContext, pBstrHelpFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_GetDocumentation_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeLib_GetDocumentation_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_GetDocumentation_Stub(ITypeLib *This, INT index, DWORD refPtrFlags, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static FunctionDescriptor ITypeLib_GetDocumentation_Stub$descriptor() {
        return ITypeLib_GetDocumentation_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_GetDocumentation_Stub(ITypeLib *This, INT index, DWORD refPtrFlags, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static MethodHandle ITypeLib_GetDocumentation_Stub$handle() {
        return ITypeLib_GetDocumentation_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_GetDocumentation_Stub(ITypeLib *This, INT index, DWORD refPtrFlags, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static MemorySegment ITypeLib_GetDocumentation_Stub$address() {
        return ITypeLib_GetDocumentation_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib_GetDocumentation_Stub(ITypeLib *This, INT index, DWORD refPtrFlags, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)
     * }
     */
    public static int ITypeLib_GetDocumentation_Stub(MemorySegment This, int index, int refPtrFlags, MemorySegment pBstrName, MemorySegment pBstrDocString, MemorySegment pdwHelpContext, MemorySegment pBstrHelpFile) {
        var mh$ = ITypeLib_GetDocumentation_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_GetDocumentation_Stub", This, index, refPtrFlags, pBstrName, pBstrDocString, pdwHelpContext, pBstrHelpFile);
            }
            return (int)mh$.invokeExact(This, index, refPtrFlags, pBstrName, pBstrDocString, pdwHelpContext, pBstrHelpFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_IsName_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeLib_IsName_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_IsName_Proxy(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, BOOL *pfName)
     * }
     */
    public static FunctionDescriptor ITypeLib_IsName_Proxy$descriptor() {
        return ITypeLib_IsName_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_IsName_Proxy(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, BOOL *pfName)
     * }
     */
    public static MethodHandle ITypeLib_IsName_Proxy$handle() {
        return ITypeLib_IsName_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_IsName_Proxy(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, BOOL *pfName)
     * }
     */
    public static MemorySegment ITypeLib_IsName_Proxy$address() {
        return ITypeLib_IsName_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib_IsName_Proxy(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, BOOL *pfName)
     * }
     */
    public static int ITypeLib_IsName_Proxy(MemorySegment This, MemorySegment szNameBuf, int lHashVal, MemorySegment pfName) {
        var mh$ = ITypeLib_IsName_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_IsName_Proxy", This, szNameBuf, lHashVal, pfName);
            }
            return (int)mh$.invokeExact(This, szNameBuf, lHashVal, pfName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_IsName_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeLib_IsName_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_IsName_Stub(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, BOOL *pfName, BSTR *pBstrLibName)
     * }
     */
    public static FunctionDescriptor ITypeLib_IsName_Stub$descriptor() {
        return ITypeLib_IsName_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_IsName_Stub(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, BOOL *pfName, BSTR *pBstrLibName)
     * }
     */
    public static MethodHandle ITypeLib_IsName_Stub$handle() {
        return ITypeLib_IsName_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_IsName_Stub(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, BOOL *pfName, BSTR *pBstrLibName)
     * }
     */
    public static MemorySegment ITypeLib_IsName_Stub$address() {
        return ITypeLib_IsName_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib_IsName_Stub(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, BOOL *pfName, BSTR *pBstrLibName)
     * }
     */
    public static int ITypeLib_IsName_Stub(MemorySegment This, MemorySegment szNameBuf, int lHashVal, MemorySegment pfName, MemorySegment pBstrLibName) {
        var mh$ = ITypeLib_IsName_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_IsName_Stub", This, szNameBuf, lHashVal, pfName, pBstrLibName);
            }
            return (int)mh$.invokeExact(This, szNameBuf, lHashVal, pfName, pBstrLibName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_FindName_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeLib_FindName_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_FindName_Proxy(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound)
     * }
     */
    public static FunctionDescriptor ITypeLib_FindName_Proxy$descriptor() {
        return ITypeLib_FindName_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_FindName_Proxy(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound)
     * }
     */
    public static MethodHandle ITypeLib_FindName_Proxy$handle() {
        return ITypeLib_FindName_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_FindName_Proxy(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound)
     * }
     */
    public static MemorySegment ITypeLib_FindName_Proxy$address() {
        return ITypeLib_FindName_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib_FindName_Proxy(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound)
     * }
     */
    public static int ITypeLib_FindName_Proxy(MemorySegment This, MemorySegment szNameBuf, int lHashVal, MemorySegment ppTInfo, MemorySegment rgMemId, MemorySegment pcFound) {
        var mh$ = ITypeLib_FindName_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_FindName_Proxy", This, szNameBuf, lHashVal, ppTInfo, rgMemId, pcFound);
            }
            return (int)mh$.invokeExact(This, szNameBuf, lHashVal, ppTInfo, rgMemId, pcFound);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_FindName_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeLib_FindName_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_FindName_Stub(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound, BSTR *pBstrLibName)
     * }
     */
    public static FunctionDescriptor ITypeLib_FindName_Stub$descriptor() {
        return ITypeLib_FindName_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_FindName_Stub(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound, BSTR *pBstrLibName)
     * }
     */
    public static MethodHandle ITypeLib_FindName_Stub$handle() {
        return ITypeLib_FindName_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_FindName_Stub(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound, BSTR *pBstrLibName)
     * }
     */
    public static MemorySegment ITypeLib_FindName_Stub$address() {
        return ITypeLib_FindName_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib_FindName_Stub(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound, BSTR *pBstrLibName)
     * }
     */
    public static int ITypeLib_FindName_Stub(MemorySegment This, MemorySegment szNameBuf, int lHashVal, MemorySegment ppTInfo, MemorySegment rgMemId, MemorySegment pcFound, MemorySegment pBstrLibName) {
        var mh$ = ITypeLib_FindName_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_FindName_Stub", This, szNameBuf, lHashVal, ppTInfo, rgMemId, pcFound, pBstrLibName);
            }
            return (int)mh$.invokeExact(This, szNameBuf, lHashVal, ppTInfo, rgMemId, pcFound, pBstrLibName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_ReleaseTLibAttr_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeLib_ReleaseTLibAttr_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeLib_ReleaseTLibAttr_Proxy(ITypeLib *This, TLIBATTR *pTLibAttr)
     * }
     */
    public static FunctionDescriptor ITypeLib_ReleaseTLibAttr_Proxy$descriptor() {
        return ITypeLib_ReleaseTLibAttr_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeLib_ReleaseTLibAttr_Proxy(ITypeLib *This, TLIBATTR *pTLibAttr)
     * }
     */
    public static MethodHandle ITypeLib_ReleaseTLibAttr_Proxy$handle() {
        return ITypeLib_ReleaseTLibAttr_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ITypeLib_ReleaseTLibAttr_Proxy(ITypeLib *This, TLIBATTR *pTLibAttr)
     * }
     */
    public static MemorySegment ITypeLib_ReleaseTLibAttr_Proxy$address() {
        return ITypeLib_ReleaseTLibAttr_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ITypeLib_ReleaseTLibAttr_Proxy(ITypeLib *This, TLIBATTR *pTLibAttr)
     * }
     */
    public static void ITypeLib_ReleaseTLibAttr_Proxy(MemorySegment This, MemorySegment pTLibAttr) {
        var mh$ = ITypeLib_ReleaseTLibAttr_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_ReleaseTLibAttr_Proxy", This, pTLibAttr);
            }
            mh$.invokeExact(This, pTLibAttr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib_ReleaseTLibAttr_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeLib_ReleaseTLibAttr_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_ReleaseTLibAttr_Stub(ITypeLib *This)
     * }
     */
    public static FunctionDescriptor ITypeLib_ReleaseTLibAttr_Stub$descriptor() {
        return ITypeLib_ReleaseTLibAttr_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_ReleaseTLibAttr_Stub(ITypeLib *This)
     * }
     */
    public static MethodHandle ITypeLib_ReleaseTLibAttr_Stub$handle() {
        return ITypeLib_ReleaseTLibAttr_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeLib_ReleaseTLibAttr_Stub(ITypeLib *This)
     * }
     */
    public static MemorySegment ITypeLib_ReleaseTLibAttr_Stub$address() {
        return ITypeLib_ReleaseTLibAttr_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib_ReleaseTLibAttr_Stub(ITypeLib *This)
     * }
     */
    public static int ITypeLib_ReleaseTLibAttr_Stub(MemorySegment This) {
        var mh$ = ITypeLib_ReleaseTLibAttr_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib_ReleaseTLibAttr_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib2_GetLibStatistics_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeLib2_GetLibStatistics_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib2_GetLibStatistics_Proxy(ITypeLib2 *This, ULONG *pcUniqueNames, ULONG *pcchUniqueNames)
     * }
     */
    public static FunctionDescriptor ITypeLib2_GetLibStatistics_Proxy$descriptor() {
        return ITypeLib2_GetLibStatistics_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib2_GetLibStatistics_Proxy(ITypeLib2 *This, ULONG *pcUniqueNames, ULONG *pcchUniqueNames)
     * }
     */
    public static MethodHandle ITypeLib2_GetLibStatistics_Proxy$handle() {
        return ITypeLib2_GetLibStatistics_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeLib2_GetLibStatistics_Proxy(ITypeLib2 *This, ULONG *pcUniqueNames, ULONG *pcchUniqueNames)
     * }
     */
    public static MemorySegment ITypeLib2_GetLibStatistics_Proxy$address() {
        return ITypeLib2_GetLibStatistics_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib2_GetLibStatistics_Proxy(ITypeLib2 *This, ULONG *pcUniqueNames, ULONG *pcchUniqueNames)
     * }
     */
    public static int ITypeLib2_GetLibStatistics_Proxy(MemorySegment This, MemorySegment pcUniqueNames, MemorySegment pcchUniqueNames) {
        var mh$ = ITypeLib2_GetLibStatistics_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib2_GetLibStatistics_Proxy", This, pcUniqueNames, pcchUniqueNames);
            }
            return (int)mh$.invokeExact(This, pcUniqueNames, pcchUniqueNames);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib2_GetLibStatistics_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeLib2_GetLibStatistics_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib2_GetLibStatistics_Stub(ITypeLib2 *This, ULONG *pcUniqueNames, ULONG *pcchUniqueNames)
     * }
     */
    public static FunctionDescriptor ITypeLib2_GetLibStatistics_Stub$descriptor() {
        return ITypeLib2_GetLibStatistics_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib2_GetLibStatistics_Stub(ITypeLib2 *This, ULONG *pcUniqueNames, ULONG *pcchUniqueNames)
     * }
     */
    public static MethodHandle ITypeLib2_GetLibStatistics_Stub$handle() {
        return ITypeLib2_GetLibStatistics_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeLib2_GetLibStatistics_Stub(ITypeLib2 *This, ULONG *pcUniqueNames, ULONG *pcchUniqueNames)
     * }
     */
    public static MemorySegment ITypeLib2_GetLibStatistics_Stub$address() {
        return ITypeLib2_GetLibStatistics_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib2_GetLibStatistics_Stub(ITypeLib2 *This, ULONG *pcUniqueNames, ULONG *pcchUniqueNames)
     * }
     */
    public static int ITypeLib2_GetLibStatistics_Stub(MemorySegment This, MemorySegment pcUniqueNames, MemorySegment pcchUniqueNames) {
        var mh$ = ITypeLib2_GetLibStatistics_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib2_GetLibStatistics_Stub", This, pcUniqueNames, pcchUniqueNames);
            }
            return (int)mh$.invokeExact(This, pcUniqueNames, pcchUniqueNames);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib2_GetDocumentation2_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeLib2_GetDocumentation2_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib2_GetDocumentation2_Proxy(ITypeLib2 *This, INT index, LCID lcid, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static FunctionDescriptor ITypeLib2_GetDocumentation2_Proxy$descriptor() {
        return ITypeLib2_GetDocumentation2_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib2_GetDocumentation2_Proxy(ITypeLib2 *This, INT index, LCID lcid, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static MethodHandle ITypeLib2_GetDocumentation2_Proxy$handle() {
        return ITypeLib2_GetDocumentation2_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeLib2_GetDocumentation2_Proxy(ITypeLib2 *This, INT index, LCID lcid, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static MemorySegment ITypeLib2_GetDocumentation2_Proxy$address() {
        return ITypeLib2_GetDocumentation2_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib2_GetDocumentation2_Proxy(ITypeLib2 *This, INT index, LCID lcid, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static int ITypeLib2_GetDocumentation2_Proxy(MemorySegment This, int index, int lcid, MemorySegment pbstrHelpString, MemorySegment pdwHelpStringContext, MemorySegment pbstrHelpStringDll) {
        var mh$ = ITypeLib2_GetDocumentation2_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib2_GetDocumentation2_Proxy", This, index, lcid, pbstrHelpString, pdwHelpStringContext, pbstrHelpStringDll);
            }
            return (int)mh$.invokeExact(This, index, lcid, pbstrHelpString, pdwHelpStringContext, pbstrHelpStringDll);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeLib2_GetDocumentation2_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ITypeLib2_GetDocumentation2_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeLib2_GetDocumentation2_Stub(ITypeLib2 *This, INT index, LCID lcid, DWORD refPtrFlags, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static FunctionDescriptor ITypeLib2_GetDocumentation2_Stub$descriptor() {
        return ITypeLib2_GetDocumentation2_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeLib2_GetDocumentation2_Stub(ITypeLib2 *This, INT index, LCID lcid, DWORD refPtrFlags, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static MethodHandle ITypeLib2_GetDocumentation2_Stub$handle() {
        return ITypeLib2_GetDocumentation2_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeLib2_GetDocumentation2_Stub(ITypeLib2 *This, INT index, LCID lcid, DWORD refPtrFlags, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static MemorySegment ITypeLib2_GetDocumentation2_Stub$address() {
        return ITypeLib2_GetDocumentation2_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeLib2_GetDocumentation2_Stub(ITypeLib2 *This, INT index, LCID lcid, DWORD refPtrFlags, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)
     * }
     */
    public static int ITypeLib2_GetDocumentation2_Stub(MemorySegment This, int index, int lcid, int refPtrFlags, MemorySegment pbstrHelpString, MemorySegment pdwHelpStringContext, MemorySegment pbstrHelpStringDll) {
        var mh$ = ITypeLib2_GetDocumentation2_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeLib2_GetDocumentation2_Stub", This, index, lcid, refPtrFlags, pbstrHelpString, pdwHelpStringContext, pbstrHelpStringDll);
            }
            return (int)mh$.invokeExact(This, index, lcid, refPtrFlags, pbstrHelpString, pdwHelpStringContext, pbstrHelpStringDll);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IPropertyBag_Read_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IPropertyBag_Read_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IPropertyBag_Read_Proxy(IPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar, IErrorLog *pErrorLog)
     * }
     */
    public static FunctionDescriptor IPropertyBag_Read_Proxy$descriptor() {
        return IPropertyBag_Read_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IPropertyBag_Read_Proxy(IPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar, IErrorLog *pErrorLog)
     * }
     */
    public static MethodHandle IPropertyBag_Read_Proxy$handle() {
        return IPropertyBag_Read_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IPropertyBag_Read_Proxy(IPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar, IErrorLog *pErrorLog)
     * }
     */
    public static MemorySegment IPropertyBag_Read_Proxy$address() {
        return IPropertyBag_Read_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IPropertyBag_Read_Proxy(IPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar, IErrorLog *pErrorLog)
     * }
     */
    public static int IPropertyBag_Read_Proxy(MemorySegment This, MemorySegment pszPropName, MemorySegment pVar, MemorySegment pErrorLog) {
        var mh$ = IPropertyBag_Read_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IPropertyBag_Read_Proxy", This, pszPropName, pVar, pErrorLog);
            }
            return (int)mh$.invokeExact(This, pszPropName, pVar, pErrorLog);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IPropertyBag_Read_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IPropertyBag_Read_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IPropertyBag_Read_Stub(IPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar, IErrorLog *pErrorLog, DWORD varType, IUnknown *pUnkObj)
     * }
     */
    public static FunctionDescriptor IPropertyBag_Read_Stub$descriptor() {
        return IPropertyBag_Read_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IPropertyBag_Read_Stub(IPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar, IErrorLog *pErrorLog, DWORD varType, IUnknown *pUnkObj)
     * }
     */
    public static MethodHandle IPropertyBag_Read_Stub$handle() {
        return IPropertyBag_Read_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IPropertyBag_Read_Stub(IPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar, IErrorLog *pErrorLog, DWORD varType, IUnknown *pUnkObj)
     * }
     */
    public static MemorySegment IPropertyBag_Read_Stub$address() {
        return IPropertyBag_Read_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IPropertyBag_Read_Stub(IPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar, IErrorLog *pErrorLog, DWORD varType, IUnknown *pUnkObj)
     * }
     */
    public static int IPropertyBag_Read_Stub(MemorySegment This, MemorySegment pszPropName, MemorySegment pVar, MemorySegment pErrorLog, int varType, MemorySegment pUnkObj) {
        var mh$ = IPropertyBag_Read_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IPropertyBag_Read_Stub", This, pszPropName, pVar, pErrorLog, varType, pUnkObj);
            }
            return (int)mh$.invokeExact(This, pszPropName, pVar, pErrorLog, varType, pUnkObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagVersionedStream {
     *     GUID guidVersion;
     *     IStream *pStream;
     * } *LPVERSIONEDSTREAM
     * }
     */
    public static final AddressLayout LPVERSIONEDSTREAM = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef WORD PROPVAR_PAD1
     * }
     */
    public static final OfShort PROPVAR_PAD1 = wgl_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef WORD PROPVAR_PAD2
     * }
     */
    public static final OfShort PROPVAR_PAD2 = wgl_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef WORD PROPVAR_PAD3
     * }
     */
    public static final OfShort PROPVAR_PAD3 = wgl_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef struct tagPROPVARIANT {
     *     union {
     *         struct {
     *             VARTYPE vt;
     *             PROPVAR_PAD1 wReserved1;
     *             PROPVAR_PAD2 wReserved2;
     *             PROPVAR_PAD3 wReserved3;
     *             union {
     *                 CHAR cVal;
     *                 UCHAR bVal;
     *                 SHORT iVal;
     *                 USHORT uiVal;
     *                 LONG lVal;
     *                 ULONG ulVal;
     *                 INT intVal;
     *                 UINT uintVal;
     *                 LARGE_INTEGER hVal;
     *                 ULARGE_INTEGER uhVal;
     *                 FLOAT fltVal;
     *                 DOUBLE dblVal;
     *                 VARIANT_BOOL boolVal;
     *                 VARIANT_BOOL __OBSOLETE__VARIANT_BOOL;
     *                 SCODE scode;
     *                 CY cyVal;
     *                 DATE date;
     *                 FILETIME filetime;
     *                 CLSID *puuid;
     *                 CLIPDATA *pclipdata;
     *                 BSTR bstrVal;
     *                 BSTRBLOB bstrblobVal;
     *                 BLOB blob;
     *                 LPSTR pszVal;
     *                 LPWSTR pwszVal;
     *                 IUnknown *punkVal;
     *                 IDispatch *pdispVal;
     *                 IStream *pStream;
     *                 IStorage *pStorage;
     *                 LPVERSIONEDSTREAM pVersionedStream;
     *                 LPSAFEARRAY parray;
     *                 CAC cac;
     *                 CAUB caub;
     *                 CAI cai;
     *                 CAUI caui;
     *                 CAL cal;
     *                 CAUL caul;
     *                 CAH cah;
     *                 CAUH cauh;
     *                 CAFLT caflt;
     *                 CADBL cadbl;
     *                 CABOOL cabool;
     *                 CASCODE cascode;
     *                 CACY cacy;
     *                 CADATE cadate;
     *                 CAFILETIME cafiletime;
     *                 CACLSID cauuid;
     *                 CACLIPDATA caclipdata;
     *                 CABSTR cabstr;
     *                 CABSTRBLOB cabstrblob;
     *                 CALPSTR calpstr;
     *                 CALPWSTR calpwstr;
     *                 CAPROPVARIANT capropvar;
     *                 CHAR *pcVal;
     *                 UCHAR *pbVal;
     *                 SHORT *piVal;
     *                 USHORT *puiVal;
     *                 LONG *plVal;
     *                 ULONG *pulVal;
     *                 INT *pintVal;
     *                 UINT *puintVal;
     *                 FLOAT *pfltVal;
     *                 DOUBLE *pdblVal;
     *                 VARIANT_BOOL *pboolVal;
     *                 DECIMAL *pdecVal;
     *                 SCODE *pscode;
     *                 CY *pcyVal;
     *                 DATE *pdate;
     *                 BSTR *pbstrVal;
     *                 IUnknown **ppunkVal;
     *                 IDispatch **ppdispVal;
     *                 LPSAFEARRAY *pparray;
     *                 PROPVARIANT *pvarVal;
     *             };
     *         };
     *         DECIMAL decVal;
     *     };
     * } *LPPROPVARIANT
     * }
     */
    public static final AddressLayout LPPROPVARIANT = wgl_h.C_POINTER;

    private static class __MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec$layout() {
        return __MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec$segment() {
        return __MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec() {
        return __MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec$layout() {
        return __MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec$segment() {
        return __MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec() {
        return __MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IPropertyStorage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IPropertyStorage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPropertyStorage
     * }
     */
    public static GroupLayout IID_IPropertyStorage$layout() {
        return IID_IPropertyStorage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPropertyStorage
     * }
     */
    public static MemorySegment IID_IPropertyStorage() {
        return IID_IPropertyStorage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPropertyStorage
     * }
     */
    public static void IID_IPropertyStorage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IPropertyStorage$constants.SEGMENT, 0L, IID_IPropertyStorage$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IPropertySetStorage *LPPROPERTYSETSTORAGE
     * }
     */
    public static final AddressLayout LPPROPERTYSETSTORAGE = wgl_h.C_POINTER;

    private static class IID_IPropertySetStorage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IPropertySetStorage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPropertySetStorage
     * }
     */
    public static GroupLayout IID_IPropertySetStorage$layout() {
        return IID_IPropertySetStorage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPropertySetStorage
     * }
     */
    public static MemorySegment IID_IPropertySetStorage() {
        return IID_IPropertySetStorage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPropertySetStorage
     * }
     */
    public static void IID_IPropertySetStorage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IPropertySetStorage$constants.SEGMENT, 0L, IID_IPropertySetStorage$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IEnumSTATPROPSTG *LPENUMSTATPROPSTG
     * }
     */
    public static final AddressLayout LPENUMSTATPROPSTG = wgl_h.C_POINTER;

    private static class IID_IEnumSTATPROPSTG$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IEnumSTATPROPSTG").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumSTATPROPSTG
     * }
     */
    public static GroupLayout IID_IEnumSTATPROPSTG$layout() {
        return IID_IEnumSTATPROPSTG$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumSTATPROPSTG
     * }
     */
    public static MemorySegment IID_IEnumSTATPROPSTG() {
        return IID_IEnumSTATPROPSTG$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumSTATPROPSTG
     * }
     */
    public static void IID_IEnumSTATPROPSTG(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IEnumSTATPROPSTG$constants.SEGMENT, 0L, IID_IEnumSTATPROPSTG$constants.LAYOUT.byteSize());
    }

    private static class IEnumSTATPROPSTG_RemoteNext_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumSTATPROPSTG_RemoteNext_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSTG_RemoteNext_Proxy(IEnumSTATPROPSTG *This, ULONG celt, STATPROPSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumSTATPROPSTG_RemoteNext_Proxy$descriptor() {
        return IEnumSTATPROPSTG_RemoteNext_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSTG_RemoteNext_Proxy(IEnumSTATPROPSTG *This, ULONG celt, STATPROPSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumSTATPROPSTG_RemoteNext_Proxy$handle() {
        return IEnumSTATPROPSTG_RemoteNext_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSTG_RemoteNext_Proxy(IEnumSTATPROPSTG *This, ULONG celt, STATPROPSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumSTATPROPSTG_RemoteNext_Proxy$address() {
        return IEnumSTATPROPSTG_RemoteNext_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSTG_RemoteNext_Proxy(IEnumSTATPROPSTG *This, ULONG celt, STATPROPSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumSTATPROPSTG_RemoteNext_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumSTATPROPSTG_RemoteNext_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATPROPSTG_RemoteNext_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumSTATPROPSTG_RemoteNext_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumSTATPROPSTG_RemoteNext_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IEnumSTATPROPSTG_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IEnumSTATPROPSTG_RemoteNext_Stub$descriptor() {
        return IEnumSTATPROPSTG_RemoteNext_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IEnumSTATPROPSTG_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IEnumSTATPROPSTG_RemoteNext_Stub$handle() {
        return IEnumSTATPROPSTG_RemoteNext_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IEnumSTATPROPSTG_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IEnumSTATPROPSTG_RemoteNext_Stub$address() {
        return IEnumSTATPROPSTG_RemoteNext_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IEnumSTATPROPSTG_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IEnumSTATPROPSTG_RemoteNext_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IEnumSTATPROPSTG_RemoteNext_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATPROPSTG_RemoteNext_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef IEnumSTATPROPSETSTG *LPENUMSTATPROPSETSTG
     * }
     */
    public static final AddressLayout LPENUMSTATPROPSETSTG = wgl_h.C_POINTER;

    private static class IID_IEnumSTATPROPSETSTG$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IEnumSTATPROPSETSTG").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumSTATPROPSETSTG
     * }
     */
    public static GroupLayout IID_IEnumSTATPROPSETSTG$layout() {
        return IID_IEnumSTATPROPSETSTG$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumSTATPROPSETSTG
     * }
     */
    public static MemorySegment IID_IEnumSTATPROPSETSTG() {
        return IID_IEnumSTATPROPSETSTG$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumSTATPROPSETSTG
     * }
     */
    public static void IID_IEnumSTATPROPSETSTG(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IEnumSTATPROPSETSTG$constants.SEGMENT, 0L, IID_IEnumSTATPROPSETSTG$constants.LAYOUT.byteSize());
    }

    private static class IEnumSTATPROPSETSTG_RemoteNext_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumSTATPROPSETSTG_RemoteNext_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSETSTG_RemoteNext_Proxy(IEnumSTATPROPSETSTG *This, ULONG celt, STATPROPSETSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumSTATPROPSETSTG_RemoteNext_Proxy$descriptor() {
        return IEnumSTATPROPSETSTG_RemoteNext_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSETSTG_RemoteNext_Proxy(IEnumSTATPROPSETSTG *This, ULONG celt, STATPROPSETSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumSTATPROPSETSTG_RemoteNext_Proxy$handle() {
        return IEnumSTATPROPSETSTG_RemoteNext_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSETSTG_RemoteNext_Proxy(IEnumSTATPROPSETSTG *This, ULONG celt, STATPROPSETSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumSTATPROPSETSTG_RemoteNext_Proxy$address() {
        return IEnumSTATPROPSETSTG_RemoteNext_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSETSTG_RemoteNext_Proxy(IEnumSTATPROPSETSTG *This, ULONG celt, STATPROPSETSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumSTATPROPSETSTG_RemoteNext_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumSTATPROPSETSTG_RemoteNext_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATPROPSETSTG_RemoteNext_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumSTATPROPSETSTG_RemoteNext_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumSTATPROPSETSTG_RemoteNext_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IEnumSTATPROPSETSTG_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IEnumSTATPROPSETSTG_RemoteNext_Stub$descriptor() {
        return IEnumSTATPROPSETSTG_RemoteNext_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IEnumSTATPROPSETSTG_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IEnumSTATPROPSETSTG_RemoteNext_Stub$handle() {
        return IEnumSTATPROPSETSTG_RemoteNext_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IEnumSTATPROPSETSTG_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IEnumSTATPROPSETSTG_RemoteNext_Stub$address() {
        return IEnumSTATPROPSETSTG_RemoteNext_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IEnumSTATPROPSETSTG_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IEnumSTATPROPSETSTG_RemoteNext_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IEnumSTATPROPSETSTG_RemoteNext_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATPROPSETSTG_RemoteNext_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef IPropertyStorage *LPPROPERTYSTORAGE
     * }
     */
    public static final AddressLayout LPPROPERTYSTORAGE = wgl_h.C_POINTER;

    private static class __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec$layout() {
        return __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec$segment() {
        return __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec() {
        return __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec$layout() {
        return __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec$segment() {
        return __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec() {
        return __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class LPSAFEARRAY_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("LPSAFEARRAY_UserSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long LPSAFEARRAY_UserSize(unsigned long *, unsigned long, LPSAFEARRAY *)
     * }
     */
    public static FunctionDescriptor LPSAFEARRAY_UserSize$descriptor() {
        return LPSAFEARRAY_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long LPSAFEARRAY_UserSize(unsigned long *, unsigned long, LPSAFEARRAY *)
     * }
     */
    public static MethodHandle LPSAFEARRAY_UserSize$handle() {
        return LPSAFEARRAY_UserSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long LPSAFEARRAY_UserSize(unsigned long *, unsigned long, LPSAFEARRAY *)
     * }
     */
    public static MemorySegment LPSAFEARRAY_UserSize$address() {
        return LPSAFEARRAY_UserSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long LPSAFEARRAY_UserSize(unsigned long *, unsigned long, LPSAFEARRAY *)
     * }
     */
    public static int LPSAFEARRAY_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = LPSAFEARRAY_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LPSAFEARRAY_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LPSAFEARRAY_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("LPSAFEARRAY_UserMarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *LPSAFEARRAY_UserMarshal(unsigned long *, unsigned char *, LPSAFEARRAY *)
     * }
     */
    public static FunctionDescriptor LPSAFEARRAY_UserMarshal$descriptor() {
        return LPSAFEARRAY_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *LPSAFEARRAY_UserMarshal(unsigned long *, unsigned char *, LPSAFEARRAY *)
     * }
     */
    public static MethodHandle LPSAFEARRAY_UserMarshal$handle() {
        return LPSAFEARRAY_UserMarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *LPSAFEARRAY_UserMarshal(unsigned long *, unsigned char *, LPSAFEARRAY *)
     * }
     */
    public static MemorySegment LPSAFEARRAY_UserMarshal$address() {
        return LPSAFEARRAY_UserMarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *LPSAFEARRAY_UserMarshal(unsigned long *, unsigned char *, LPSAFEARRAY *)
     * }
     */
    public static MemorySegment LPSAFEARRAY_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = LPSAFEARRAY_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LPSAFEARRAY_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LPSAFEARRAY_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("LPSAFEARRAY_UserUnmarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *LPSAFEARRAY_UserUnmarshal(unsigned long *, unsigned char *, LPSAFEARRAY *)
     * }
     */
    public static FunctionDescriptor LPSAFEARRAY_UserUnmarshal$descriptor() {
        return LPSAFEARRAY_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *LPSAFEARRAY_UserUnmarshal(unsigned long *, unsigned char *, LPSAFEARRAY *)
     * }
     */
    public static MethodHandle LPSAFEARRAY_UserUnmarshal$handle() {
        return LPSAFEARRAY_UserUnmarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *LPSAFEARRAY_UserUnmarshal(unsigned long *, unsigned char *, LPSAFEARRAY *)
     * }
     */
    public static MemorySegment LPSAFEARRAY_UserUnmarshal$address() {
        return LPSAFEARRAY_UserUnmarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *LPSAFEARRAY_UserUnmarshal(unsigned long *, unsigned char *, LPSAFEARRAY *)
     * }
     */
    public static MemorySegment LPSAFEARRAY_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = LPSAFEARRAY_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LPSAFEARRAY_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LPSAFEARRAY_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("LPSAFEARRAY_UserFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void LPSAFEARRAY_UserFree(unsigned long *, LPSAFEARRAY *)
     * }
     */
    public static FunctionDescriptor LPSAFEARRAY_UserFree$descriptor() {
        return LPSAFEARRAY_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void LPSAFEARRAY_UserFree(unsigned long *, LPSAFEARRAY *)
     * }
     */
    public static MethodHandle LPSAFEARRAY_UserFree$handle() {
        return LPSAFEARRAY_UserFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void LPSAFEARRAY_UserFree(unsigned long *, LPSAFEARRAY *)
     * }
     */
    public static MemorySegment LPSAFEARRAY_UserFree$address() {
        return LPSAFEARRAY_UserFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void LPSAFEARRAY_UserFree(unsigned long *, LPSAFEARRAY *)
     * }
     */
    public static void LPSAFEARRAY_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = LPSAFEARRAY_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LPSAFEARRAY_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LPSAFEARRAY_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("LPSAFEARRAY_UserSize64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long LPSAFEARRAY_UserSize64(unsigned long *, unsigned long, LPSAFEARRAY *)
     * }
     */
    public static FunctionDescriptor LPSAFEARRAY_UserSize64$descriptor() {
        return LPSAFEARRAY_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long LPSAFEARRAY_UserSize64(unsigned long *, unsigned long, LPSAFEARRAY *)
     * }
     */
    public static MethodHandle LPSAFEARRAY_UserSize64$handle() {
        return LPSAFEARRAY_UserSize64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long LPSAFEARRAY_UserSize64(unsigned long *, unsigned long, LPSAFEARRAY *)
     * }
     */
    public static MemorySegment LPSAFEARRAY_UserSize64$address() {
        return LPSAFEARRAY_UserSize64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long LPSAFEARRAY_UserSize64(unsigned long *, unsigned long, LPSAFEARRAY *)
     * }
     */
    public static int LPSAFEARRAY_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = LPSAFEARRAY_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LPSAFEARRAY_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LPSAFEARRAY_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("LPSAFEARRAY_UserMarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *LPSAFEARRAY_UserMarshal64(unsigned long *, unsigned char *, LPSAFEARRAY *)
     * }
     */
    public static FunctionDescriptor LPSAFEARRAY_UserMarshal64$descriptor() {
        return LPSAFEARRAY_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *LPSAFEARRAY_UserMarshal64(unsigned long *, unsigned char *, LPSAFEARRAY *)
     * }
     */
    public static MethodHandle LPSAFEARRAY_UserMarshal64$handle() {
        return LPSAFEARRAY_UserMarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *LPSAFEARRAY_UserMarshal64(unsigned long *, unsigned char *, LPSAFEARRAY *)
     * }
     */
    public static MemorySegment LPSAFEARRAY_UserMarshal64$address() {
        return LPSAFEARRAY_UserMarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *LPSAFEARRAY_UserMarshal64(unsigned long *, unsigned char *, LPSAFEARRAY *)
     * }
     */
    public static MemorySegment LPSAFEARRAY_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = LPSAFEARRAY_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LPSAFEARRAY_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LPSAFEARRAY_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("LPSAFEARRAY_UserUnmarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *LPSAFEARRAY_UserUnmarshal64(unsigned long *, unsigned char *, LPSAFEARRAY *)
     * }
     */
    public static FunctionDescriptor LPSAFEARRAY_UserUnmarshal64$descriptor() {
        return LPSAFEARRAY_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *LPSAFEARRAY_UserUnmarshal64(unsigned long *, unsigned char *, LPSAFEARRAY *)
     * }
     */
    public static MethodHandle LPSAFEARRAY_UserUnmarshal64$handle() {
        return LPSAFEARRAY_UserUnmarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *LPSAFEARRAY_UserUnmarshal64(unsigned long *, unsigned char *, LPSAFEARRAY *)
     * }
     */
    public static MemorySegment LPSAFEARRAY_UserUnmarshal64$address() {
        return LPSAFEARRAY_UserUnmarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *LPSAFEARRAY_UserUnmarshal64(unsigned long *, unsigned char *, LPSAFEARRAY *)
     * }
     */
    public static MemorySegment LPSAFEARRAY_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = LPSAFEARRAY_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LPSAFEARRAY_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LPSAFEARRAY_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("LPSAFEARRAY_UserFree64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void LPSAFEARRAY_UserFree64(unsigned long *, LPSAFEARRAY *)
     * }
     */
    public static FunctionDescriptor LPSAFEARRAY_UserFree64$descriptor() {
        return LPSAFEARRAY_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void LPSAFEARRAY_UserFree64(unsigned long *, LPSAFEARRAY *)
     * }
     */
    public static MethodHandle LPSAFEARRAY_UserFree64$handle() {
        return LPSAFEARRAY_UserFree64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void LPSAFEARRAY_UserFree64(unsigned long *, LPSAFEARRAY *)
     * }
     */
    public static MemorySegment LPSAFEARRAY_UserFree64$address() {
        return LPSAFEARRAY_UserFree64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void LPSAFEARRAY_UserFree64(unsigned long *, LPSAFEARRAY *)
     * }
     */
    public static void LPSAFEARRAY_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = LPSAFEARRAY_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LPSAFEARRAY_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumSTATPROPSTG_Next_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumSTATPROPSTG_Next_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSTG_Next_Proxy(IEnumSTATPROPSTG *This, ULONG celt, STATPROPSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumSTATPROPSTG_Next_Proxy$descriptor() {
        return IEnumSTATPROPSTG_Next_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSTG_Next_Proxy(IEnumSTATPROPSTG *This, ULONG celt, STATPROPSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumSTATPROPSTG_Next_Proxy$handle() {
        return IEnumSTATPROPSTG_Next_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSTG_Next_Proxy(IEnumSTATPROPSTG *This, ULONG celt, STATPROPSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumSTATPROPSTG_Next_Proxy$address() {
        return IEnumSTATPROPSTG_Next_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSTG_Next_Proxy(IEnumSTATPROPSTG *This, ULONG celt, STATPROPSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumSTATPROPSTG_Next_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumSTATPROPSTG_Next_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATPROPSTG_Next_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumSTATPROPSTG_Next_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumSTATPROPSTG_Next_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSTG_Next_Stub(IEnumSTATPROPSTG *This, ULONG celt, STATPROPSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumSTATPROPSTG_Next_Stub$descriptor() {
        return IEnumSTATPROPSTG_Next_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSTG_Next_Stub(IEnumSTATPROPSTG *This, ULONG celt, STATPROPSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumSTATPROPSTG_Next_Stub$handle() {
        return IEnumSTATPROPSTG_Next_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSTG_Next_Stub(IEnumSTATPROPSTG *This, ULONG celt, STATPROPSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumSTATPROPSTG_Next_Stub$address() {
        return IEnumSTATPROPSTG_Next_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSTG_Next_Stub(IEnumSTATPROPSTG *This, ULONG celt, STATPROPSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumSTATPROPSTG_Next_Stub(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumSTATPROPSTG_Next_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATPROPSTG_Next_Stub", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumSTATPROPSETSTG_Next_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumSTATPROPSETSTG_Next_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSETSTG_Next_Proxy(IEnumSTATPROPSETSTG *This, ULONG celt, STATPROPSETSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumSTATPROPSETSTG_Next_Proxy$descriptor() {
        return IEnumSTATPROPSETSTG_Next_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSETSTG_Next_Proxy(IEnumSTATPROPSETSTG *This, ULONG celt, STATPROPSETSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumSTATPROPSETSTG_Next_Proxy$handle() {
        return IEnumSTATPROPSETSTG_Next_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSETSTG_Next_Proxy(IEnumSTATPROPSETSTG *This, ULONG celt, STATPROPSETSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumSTATPROPSETSTG_Next_Proxy$address() {
        return IEnumSTATPROPSETSTG_Next_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSETSTG_Next_Proxy(IEnumSTATPROPSETSTG *This, ULONG celt, STATPROPSETSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumSTATPROPSETSTG_Next_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumSTATPROPSETSTG_Next_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATPROPSETSTG_Next_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumSTATPROPSETSTG_Next_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumSTATPROPSETSTG_Next_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSETSTG_Next_Stub(IEnumSTATPROPSETSTG *This, ULONG celt, STATPROPSETSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumSTATPROPSETSTG_Next_Stub$descriptor() {
        return IEnumSTATPROPSETSTG_Next_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSETSTG_Next_Stub(IEnumSTATPROPSETSTG *This, ULONG celt, STATPROPSETSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumSTATPROPSETSTG_Next_Stub$handle() {
        return IEnumSTATPROPSETSTG_Next_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSETSTG_Next_Stub(IEnumSTATPROPSETSTG *This, ULONG celt, STATPROPSETSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumSTATPROPSETSTG_Next_Stub$address() {
        return IEnumSTATPROPSETSTG_Next_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumSTATPROPSETSTG_Next_Stub(IEnumSTATPROPSETSTG *This, ULONG celt, STATPROPSETSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumSTATPROPSETSTG_Next_Stub(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumSTATPROPSETSTG_Next_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATPROPSETSTG_Next_Stub", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef DWORD STGFMT
     * }
     */
    public static final OfInt STGFMT = wgl_h.C_LONG;

    private static class StgCreateDocfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("StgCreateDocfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StgCreateDocfile(const WCHAR *pwcsName, DWORD grfMode, DWORD reserved, IStorage **ppstgOpen)
     * }
     */
    public static FunctionDescriptor StgCreateDocfile$descriptor() {
        return StgCreateDocfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StgCreateDocfile(const WCHAR *pwcsName, DWORD grfMode, DWORD reserved, IStorage **ppstgOpen)
     * }
     */
    public static MethodHandle StgCreateDocfile$handle() {
        return StgCreateDocfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT StgCreateDocfile(const WCHAR *pwcsName, DWORD grfMode, DWORD reserved, IStorage **ppstgOpen)
     * }
     */
    public static MemorySegment StgCreateDocfile$address() {
        return StgCreateDocfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT StgCreateDocfile(const WCHAR *pwcsName, DWORD grfMode, DWORD reserved, IStorage **ppstgOpen)
     * }
     */
    public static int StgCreateDocfile(MemorySegment pwcsName, int grfMode, int reserved, MemorySegment ppstgOpen) {
        var mh$ = StgCreateDocfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StgCreateDocfile", pwcsName, grfMode, reserved, ppstgOpen);
            }
            return (int)mh$.invokeExact(pwcsName, grfMode, reserved, ppstgOpen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StgCreateDocfileOnILockBytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("StgCreateDocfileOnILockBytes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StgCreateDocfileOnILockBytes(ILockBytes *plkbyt, DWORD grfMode, DWORD reserved, IStorage **ppstgOpen)
     * }
     */
    public static FunctionDescriptor StgCreateDocfileOnILockBytes$descriptor() {
        return StgCreateDocfileOnILockBytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StgCreateDocfileOnILockBytes(ILockBytes *plkbyt, DWORD grfMode, DWORD reserved, IStorage **ppstgOpen)
     * }
     */
    public static MethodHandle StgCreateDocfileOnILockBytes$handle() {
        return StgCreateDocfileOnILockBytes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT StgCreateDocfileOnILockBytes(ILockBytes *plkbyt, DWORD grfMode, DWORD reserved, IStorage **ppstgOpen)
     * }
     */
    public static MemorySegment StgCreateDocfileOnILockBytes$address() {
        return StgCreateDocfileOnILockBytes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT StgCreateDocfileOnILockBytes(ILockBytes *plkbyt, DWORD grfMode, DWORD reserved, IStorage **ppstgOpen)
     * }
     */
    public static int StgCreateDocfileOnILockBytes(MemorySegment plkbyt, int grfMode, int reserved, MemorySegment ppstgOpen) {
        var mh$ = StgCreateDocfileOnILockBytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StgCreateDocfileOnILockBytes", plkbyt, grfMode, reserved, ppstgOpen);
            }
            return (int)mh$.invokeExact(plkbyt, grfMode, reserved, ppstgOpen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StgOpenStorage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("StgOpenStorage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StgOpenStorage(const WCHAR *pwcsName, IStorage *pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage **ppstgOpen)
     * }
     */
    public static FunctionDescriptor StgOpenStorage$descriptor() {
        return StgOpenStorage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StgOpenStorage(const WCHAR *pwcsName, IStorage *pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage **ppstgOpen)
     * }
     */
    public static MethodHandle StgOpenStorage$handle() {
        return StgOpenStorage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT StgOpenStorage(const WCHAR *pwcsName, IStorage *pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage **ppstgOpen)
     * }
     */
    public static MemorySegment StgOpenStorage$address() {
        return StgOpenStorage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT StgOpenStorage(const WCHAR *pwcsName, IStorage *pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage **ppstgOpen)
     * }
     */
    public static int StgOpenStorage(MemorySegment pwcsName, MemorySegment pstgPriority, int grfMode, MemorySegment snbExclude, int reserved, MemorySegment ppstgOpen) {
        var mh$ = StgOpenStorage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StgOpenStorage", pwcsName, pstgPriority, grfMode, snbExclude, reserved, ppstgOpen);
            }
            return (int)mh$.invokeExact(pwcsName, pstgPriority, grfMode, snbExclude, reserved, ppstgOpen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StgOpenStorageOnILockBytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("StgOpenStorageOnILockBytes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StgOpenStorageOnILockBytes(ILockBytes *plkbyt, IStorage *pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage **ppstgOpen)
     * }
     */
    public static FunctionDescriptor StgOpenStorageOnILockBytes$descriptor() {
        return StgOpenStorageOnILockBytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StgOpenStorageOnILockBytes(ILockBytes *plkbyt, IStorage *pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage **ppstgOpen)
     * }
     */
    public static MethodHandle StgOpenStorageOnILockBytes$handle() {
        return StgOpenStorageOnILockBytes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT StgOpenStorageOnILockBytes(ILockBytes *plkbyt, IStorage *pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage **ppstgOpen)
     * }
     */
    public static MemorySegment StgOpenStorageOnILockBytes$address() {
        return StgOpenStorageOnILockBytes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT StgOpenStorageOnILockBytes(ILockBytes *plkbyt, IStorage *pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage **ppstgOpen)
     * }
     */
    public static int StgOpenStorageOnILockBytes(MemorySegment plkbyt, MemorySegment pstgPriority, int grfMode, MemorySegment snbExclude, int reserved, MemorySegment ppstgOpen) {
        var mh$ = StgOpenStorageOnILockBytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StgOpenStorageOnILockBytes", plkbyt, pstgPriority, grfMode, snbExclude, reserved, ppstgOpen);
            }
            return (int)mh$.invokeExact(plkbyt, pstgPriority, grfMode, snbExclude, reserved, ppstgOpen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StgIsStorageFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("StgIsStorageFile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StgIsStorageFile(const WCHAR *pwcsName)
     * }
     */
    public static FunctionDescriptor StgIsStorageFile$descriptor() {
        return StgIsStorageFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StgIsStorageFile(const WCHAR *pwcsName)
     * }
     */
    public static MethodHandle StgIsStorageFile$handle() {
        return StgIsStorageFile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT StgIsStorageFile(const WCHAR *pwcsName)
     * }
     */
    public static MemorySegment StgIsStorageFile$address() {
        return StgIsStorageFile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT StgIsStorageFile(const WCHAR *pwcsName)
     * }
     */
    public static int StgIsStorageFile(MemorySegment pwcsName) {
        var mh$ = StgIsStorageFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StgIsStorageFile", pwcsName);
            }
            return (int)mh$.invokeExact(pwcsName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StgIsStorageILockBytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("StgIsStorageILockBytes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StgIsStorageILockBytes(ILockBytes *plkbyt)
     * }
     */
    public static FunctionDescriptor StgIsStorageILockBytes$descriptor() {
        return StgIsStorageILockBytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StgIsStorageILockBytes(ILockBytes *plkbyt)
     * }
     */
    public static MethodHandle StgIsStorageILockBytes$handle() {
        return StgIsStorageILockBytes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT StgIsStorageILockBytes(ILockBytes *plkbyt)
     * }
     */
    public static MemorySegment StgIsStorageILockBytes$address() {
        return StgIsStorageILockBytes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT StgIsStorageILockBytes(ILockBytes *plkbyt)
     * }
     */
    public static int StgIsStorageILockBytes(MemorySegment plkbyt) {
        var mh$ = StgIsStorageILockBytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StgIsStorageILockBytes", plkbyt);
            }
            return (int)mh$.invokeExact(plkbyt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StgSetTimes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("StgSetTimes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StgSetTimes(const WCHAR *lpszName, const FILETIME *pctime, const FILETIME *patime, const FILETIME *pmtime)
     * }
     */
    public static FunctionDescriptor StgSetTimes$descriptor() {
        return StgSetTimes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StgSetTimes(const WCHAR *lpszName, const FILETIME *pctime, const FILETIME *patime, const FILETIME *pmtime)
     * }
     */
    public static MethodHandle StgSetTimes$handle() {
        return StgSetTimes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT StgSetTimes(const WCHAR *lpszName, const FILETIME *pctime, const FILETIME *patime, const FILETIME *pmtime)
     * }
     */
    public static MemorySegment StgSetTimes$address() {
        return StgSetTimes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT StgSetTimes(const WCHAR *lpszName, const FILETIME *pctime, const FILETIME *patime, const FILETIME *pmtime)
     * }
     */
    public static int StgSetTimes(MemorySegment lpszName, MemorySegment pctime, MemorySegment patime, MemorySegment pmtime) {
        var mh$ = StgSetTimes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StgSetTimes", lpszName, pctime, patime, pmtime);
            }
            return (int)mh$.invokeExact(lpszName, pctime, patime, pmtime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StgCreateStorageEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("StgCreateStorageEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StgCreateStorageEx(const WCHAR *pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, STGOPTIONS *pStgOptions, PSECURITY_DESCRIPTOR pSecurityDescriptor, const IID *const riid, void **ppObjectOpen)
     * }
     */
    public static FunctionDescriptor StgCreateStorageEx$descriptor() {
        return StgCreateStorageEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StgCreateStorageEx(const WCHAR *pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, STGOPTIONS *pStgOptions, PSECURITY_DESCRIPTOR pSecurityDescriptor, const IID *const riid, void **ppObjectOpen)
     * }
     */
    public static MethodHandle StgCreateStorageEx$handle() {
        return StgCreateStorageEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT StgCreateStorageEx(const WCHAR *pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, STGOPTIONS *pStgOptions, PSECURITY_DESCRIPTOR pSecurityDescriptor, const IID *const riid, void **ppObjectOpen)
     * }
     */
    public static MemorySegment StgCreateStorageEx$address() {
        return StgCreateStorageEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT StgCreateStorageEx(const WCHAR *pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, STGOPTIONS *pStgOptions, PSECURITY_DESCRIPTOR pSecurityDescriptor, const IID *const riid, void **ppObjectOpen)
     * }
     */
    public static int StgCreateStorageEx(MemorySegment pwcsName, int grfMode, int stgfmt, int grfAttrs, MemorySegment pStgOptions, MemorySegment pSecurityDescriptor, MemorySegment riid, MemorySegment ppObjectOpen) {
        var mh$ = StgCreateStorageEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StgCreateStorageEx", pwcsName, grfMode, stgfmt, grfAttrs, pStgOptions, pSecurityDescriptor, riid, ppObjectOpen);
            }
            return (int)mh$.invokeExact(pwcsName, grfMode, stgfmt, grfAttrs, pStgOptions, pSecurityDescriptor, riid, ppObjectOpen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StgOpenStorageEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("StgOpenStorageEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StgOpenStorageEx(const WCHAR *pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, STGOPTIONS *pStgOptions, PSECURITY_DESCRIPTOR pSecurityDescriptor, const IID *const riid, void **ppObjectOpen)
     * }
     */
    public static FunctionDescriptor StgOpenStorageEx$descriptor() {
        return StgOpenStorageEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StgOpenStorageEx(const WCHAR *pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, STGOPTIONS *pStgOptions, PSECURITY_DESCRIPTOR pSecurityDescriptor, const IID *const riid, void **ppObjectOpen)
     * }
     */
    public static MethodHandle StgOpenStorageEx$handle() {
        return StgOpenStorageEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT StgOpenStorageEx(const WCHAR *pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, STGOPTIONS *pStgOptions, PSECURITY_DESCRIPTOR pSecurityDescriptor, const IID *const riid, void **ppObjectOpen)
     * }
     */
    public static MemorySegment StgOpenStorageEx$address() {
        return StgOpenStorageEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT StgOpenStorageEx(const WCHAR *pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, STGOPTIONS *pStgOptions, PSECURITY_DESCRIPTOR pSecurityDescriptor, const IID *const riid, void **ppObjectOpen)
     * }
     */
    public static int StgOpenStorageEx(MemorySegment pwcsName, int grfMode, int stgfmt, int grfAttrs, MemorySegment pStgOptions, MemorySegment pSecurityDescriptor, MemorySegment riid, MemorySegment ppObjectOpen) {
        var mh$ = StgOpenStorageEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StgOpenStorageEx", pwcsName, grfMode, stgfmt, grfAttrs, pStgOptions, pSecurityDescriptor, riid, ppObjectOpen);
            }
            return (int)mh$.invokeExact(pwcsName, grfMode, stgfmt, grfAttrs, pStgOptions, pSecurityDescriptor, riid, ppObjectOpen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StgCreatePropStg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("StgCreatePropStg");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StgCreatePropStg(IUnknown *pUnk, const IID *const fmtid, const CLSID *pclsid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage **ppPropStg)
     * }
     */
    public static FunctionDescriptor StgCreatePropStg$descriptor() {
        return StgCreatePropStg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StgCreatePropStg(IUnknown *pUnk, const IID *const fmtid, const CLSID *pclsid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage **ppPropStg)
     * }
     */
    public static MethodHandle StgCreatePropStg$handle() {
        return StgCreatePropStg.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT StgCreatePropStg(IUnknown *pUnk, const IID *const fmtid, const CLSID *pclsid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage **ppPropStg)
     * }
     */
    public static MemorySegment StgCreatePropStg$address() {
        return StgCreatePropStg.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT StgCreatePropStg(IUnknown *pUnk, const IID *const fmtid, const CLSID *pclsid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage **ppPropStg)
     * }
     */
    public static int StgCreatePropStg(MemorySegment pUnk, MemorySegment fmtid, MemorySegment pclsid, int grfFlags, int dwReserved, MemorySegment ppPropStg) {
        var mh$ = StgCreatePropStg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StgCreatePropStg", pUnk, fmtid, pclsid, grfFlags, dwReserved, ppPropStg);
            }
            return (int)mh$.invokeExact(pUnk, fmtid, pclsid, grfFlags, dwReserved, ppPropStg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StgOpenPropStg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("StgOpenPropStg");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StgOpenPropStg(IUnknown *pUnk, const IID *const fmtid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage **ppPropStg)
     * }
     */
    public static FunctionDescriptor StgOpenPropStg$descriptor() {
        return StgOpenPropStg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StgOpenPropStg(IUnknown *pUnk, const IID *const fmtid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage **ppPropStg)
     * }
     */
    public static MethodHandle StgOpenPropStg$handle() {
        return StgOpenPropStg.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT StgOpenPropStg(IUnknown *pUnk, const IID *const fmtid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage **ppPropStg)
     * }
     */
    public static MemorySegment StgOpenPropStg$address() {
        return StgOpenPropStg.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT StgOpenPropStg(IUnknown *pUnk, const IID *const fmtid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage **ppPropStg)
     * }
     */
    public static int StgOpenPropStg(MemorySegment pUnk, MemorySegment fmtid, int grfFlags, int dwReserved, MemorySegment ppPropStg) {
        var mh$ = StgOpenPropStg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StgOpenPropStg", pUnk, fmtid, grfFlags, dwReserved, ppPropStg);
            }
            return (int)mh$.invokeExact(pUnk, fmtid, grfFlags, dwReserved, ppPropStg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StgCreatePropSetStg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("StgCreatePropSetStg");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StgCreatePropSetStg(IStorage *pStorage, DWORD dwReserved, IPropertySetStorage **ppPropSetStg)
     * }
     */
    public static FunctionDescriptor StgCreatePropSetStg$descriptor() {
        return StgCreatePropSetStg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StgCreatePropSetStg(IStorage *pStorage, DWORD dwReserved, IPropertySetStorage **ppPropSetStg)
     * }
     */
    public static MethodHandle StgCreatePropSetStg$handle() {
        return StgCreatePropSetStg.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT StgCreatePropSetStg(IStorage *pStorage, DWORD dwReserved, IPropertySetStorage **ppPropSetStg)
     * }
     */
    public static MemorySegment StgCreatePropSetStg$address() {
        return StgCreatePropSetStg.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT StgCreatePropSetStg(IStorage *pStorage, DWORD dwReserved, IPropertySetStorage **ppPropSetStg)
     * }
     */
    public static int StgCreatePropSetStg(MemorySegment pStorage, int dwReserved, MemorySegment ppPropSetStg) {
        var mh$ = StgCreatePropSetStg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StgCreatePropSetStg", pStorage, dwReserved, ppPropSetStg);
            }
            return (int)mh$.invokeExact(pStorage, dwReserved, ppPropSetStg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FmtIdToPropStgName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("FmtIdToPropStgName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT FmtIdToPropStgName(const FMTID *pfmtid, LPOLESTR oszName)
     * }
     */
    public static FunctionDescriptor FmtIdToPropStgName$descriptor() {
        return FmtIdToPropStgName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT FmtIdToPropStgName(const FMTID *pfmtid, LPOLESTR oszName)
     * }
     */
    public static MethodHandle FmtIdToPropStgName$handle() {
        return FmtIdToPropStgName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT FmtIdToPropStgName(const FMTID *pfmtid, LPOLESTR oszName)
     * }
     */
    public static MemorySegment FmtIdToPropStgName$address() {
        return FmtIdToPropStgName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT FmtIdToPropStgName(const FMTID *pfmtid, LPOLESTR oszName)
     * }
     */
    public static int FmtIdToPropStgName(MemorySegment pfmtid, MemorySegment oszName) {
        var mh$ = FmtIdToPropStgName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FmtIdToPropStgName", pfmtid, oszName);
            }
            return (int)mh$.invokeExact(pfmtid, oszName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PropStgNameToFmtId {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("PropStgNameToFmtId");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT PropStgNameToFmtId(const LPOLESTR oszName, FMTID *pfmtid)
     * }
     */
    public static FunctionDescriptor PropStgNameToFmtId$descriptor() {
        return PropStgNameToFmtId.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT PropStgNameToFmtId(const LPOLESTR oszName, FMTID *pfmtid)
     * }
     */
    public static MethodHandle PropStgNameToFmtId$handle() {
        return PropStgNameToFmtId.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT PropStgNameToFmtId(const LPOLESTR oszName, FMTID *pfmtid)
     * }
     */
    public static MemorySegment PropStgNameToFmtId$address() {
        return PropStgNameToFmtId.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT PropStgNameToFmtId(const LPOLESTR oszName, FMTID *pfmtid)
     * }
     */
    public static int PropStgNameToFmtId(MemorySegment oszName, MemorySegment pfmtid) {
        var mh$ = PropStgNameToFmtId.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PropStgNameToFmtId", oszName, pfmtid);
            }
            return (int)mh$.invokeExact(oszName, pfmtid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ReadClassStg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ReadClassStg");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT ReadClassStg(LPSTORAGE pStg, CLSID *pclsid)
     * }
     */
    public static FunctionDescriptor ReadClassStg$descriptor() {
        return ReadClassStg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT ReadClassStg(LPSTORAGE pStg, CLSID *pclsid)
     * }
     */
    public static MethodHandle ReadClassStg$handle() {
        return ReadClassStg.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT ReadClassStg(LPSTORAGE pStg, CLSID *pclsid)
     * }
     */
    public static MemorySegment ReadClassStg$address() {
        return ReadClassStg.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT ReadClassStg(LPSTORAGE pStg, CLSID *pclsid)
     * }
     */
    public static int ReadClassStg(MemorySegment pStg, MemorySegment pclsid) {
        var mh$ = ReadClassStg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ReadClassStg", pStg, pclsid);
            }
            return (int)mh$.invokeExact(pStg, pclsid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WriteClassStg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("WriteClassStg");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT WriteClassStg(LPSTORAGE pStg, const IID *const rclsid)
     * }
     */
    public static FunctionDescriptor WriteClassStg$descriptor() {
        return WriteClassStg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT WriteClassStg(LPSTORAGE pStg, const IID *const rclsid)
     * }
     */
    public static MethodHandle WriteClassStg$handle() {
        return WriteClassStg.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT WriteClassStg(LPSTORAGE pStg, const IID *const rclsid)
     * }
     */
    public static MemorySegment WriteClassStg$address() {
        return WriteClassStg.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT WriteClassStg(LPSTORAGE pStg, const IID *const rclsid)
     * }
     */
    public static int WriteClassStg(MemorySegment pStg, MemorySegment rclsid) {
        var mh$ = WriteClassStg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WriteClassStg", pStg, rclsid);
            }
            return (int)mh$.invokeExact(pStg, rclsid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ReadClassStm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ReadClassStm");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT ReadClassStm(LPSTREAM pStm, CLSID *pclsid)
     * }
     */
    public static FunctionDescriptor ReadClassStm$descriptor() {
        return ReadClassStm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT ReadClassStm(LPSTREAM pStm, CLSID *pclsid)
     * }
     */
    public static MethodHandle ReadClassStm$handle() {
        return ReadClassStm.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT ReadClassStm(LPSTREAM pStm, CLSID *pclsid)
     * }
     */
    public static MemorySegment ReadClassStm$address() {
        return ReadClassStm.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT ReadClassStm(LPSTREAM pStm, CLSID *pclsid)
     * }
     */
    public static int ReadClassStm(MemorySegment pStm, MemorySegment pclsid) {
        var mh$ = ReadClassStm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ReadClassStm", pStm, pclsid);
            }
            return (int)mh$.invokeExact(pStm, pclsid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WriteClassStm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("WriteClassStm");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT WriteClassStm(LPSTREAM pStm, const IID *const rclsid)
     * }
     */
    public static FunctionDescriptor WriteClassStm$descriptor() {
        return WriteClassStm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT WriteClassStm(LPSTREAM pStm, const IID *const rclsid)
     * }
     */
    public static MethodHandle WriteClassStm$handle() {
        return WriteClassStm.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT WriteClassStm(LPSTREAM pStm, const IID *const rclsid)
     * }
     */
    public static MemorySegment WriteClassStm$address() {
        return WriteClassStm.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT WriteClassStm(LPSTREAM pStm, const IID *const rclsid)
     * }
     */
    public static int WriteClassStm(MemorySegment pStm, MemorySegment rclsid) {
        var mh$ = WriteClassStm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WriteClassStm", pStm, rclsid);
            }
            return (int)mh$.invokeExact(pStm, rclsid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetHGlobalFromILockBytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetHGlobalFromILockBytes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT GetHGlobalFromILockBytes(LPLOCKBYTES plkbyt, HGLOBAL *phglobal)
     * }
     */
    public static FunctionDescriptor GetHGlobalFromILockBytes$descriptor() {
        return GetHGlobalFromILockBytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT GetHGlobalFromILockBytes(LPLOCKBYTES plkbyt, HGLOBAL *phglobal)
     * }
     */
    public static MethodHandle GetHGlobalFromILockBytes$handle() {
        return GetHGlobalFromILockBytes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT GetHGlobalFromILockBytes(LPLOCKBYTES plkbyt, HGLOBAL *phglobal)
     * }
     */
    public static MemorySegment GetHGlobalFromILockBytes$address() {
        return GetHGlobalFromILockBytes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT GetHGlobalFromILockBytes(LPLOCKBYTES plkbyt, HGLOBAL *phglobal)
     * }
     */
    public static int GetHGlobalFromILockBytes(MemorySegment plkbyt, MemorySegment phglobal) {
        var mh$ = GetHGlobalFromILockBytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetHGlobalFromILockBytes", plkbyt, phglobal);
            }
            return (int)mh$.invokeExact(plkbyt, phglobal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateILockBytesOnHGlobal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CreateILockBytesOnHGlobal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateILockBytesOnHGlobal(HGLOBAL hGlobal, BOOL fDeleteOnRelease, LPLOCKBYTES *pplkbyt)
     * }
     */
    public static FunctionDescriptor CreateILockBytesOnHGlobal$descriptor() {
        return CreateILockBytesOnHGlobal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateILockBytesOnHGlobal(HGLOBAL hGlobal, BOOL fDeleteOnRelease, LPLOCKBYTES *pplkbyt)
     * }
     */
    public static MethodHandle CreateILockBytesOnHGlobal$handle() {
        return CreateILockBytesOnHGlobal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CreateILockBytesOnHGlobal(HGLOBAL hGlobal, BOOL fDeleteOnRelease, LPLOCKBYTES *pplkbyt)
     * }
     */
    public static MemorySegment CreateILockBytesOnHGlobal$address() {
        return CreateILockBytesOnHGlobal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CreateILockBytesOnHGlobal(HGLOBAL hGlobal, BOOL fDeleteOnRelease, LPLOCKBYTES *pplkbyt)
     * }
     */
    public static int CreateILockBytesOnHGlobal(MemorySegment hGlobal, int fDeleteOnRelease, MemorySegment pplkbyt) {
        var mh$ = CreateILockBytesOnHGlobal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateILockBytesOnHGlobal", hGlobal, fDeleteOnRelease, pplkbyt);
            }
            return (int)mh$.invokeExact(hGlobal, fDeleteOnRelease, pplkbyt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetConvertStg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetConvertStg");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT GetConvertStg(LPSTORAGE pStg)
     * }
     */
    public static FunctionDescriptor GetConvertStg$descriptor() {
        return GetConvertStg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT GetConvertStg(LPSTORAGE pStg)
     * }
     */
    public static MethodHandle GetConvertStg$handle() {
        return GetConvertStg.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT GetConvertStg(LPSTORAGE pStg)
     * }
     */
    public static MemorySegment GetConvertStg$address() {
        return GetConvertStg.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT GetConvertStg(LPSTORAGE pStg)
     * }
     */
    public static int GetConvertStg(MemorySegment pStg) {
        var mh$ = GetConvertStg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetConvertStg", pStg);
            }
            return (int)mh$.invokeExact(pStg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int COINIT_APARTMENTTHREADED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagCOINIT.COINIT_APARTMENTTHREADED = 2
     * }
     */
    public static int COINIT_APARTMENTTHREADED() {
        return COINIT_APARTMENTTHREADED;
    }
    private static final int COINIT_MULTITHREADED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagCOINIT.COINIT_MULTITHREADED = 0
     * }
     */
    public static int COINIT_MULTITHREADED() {
        return COINIT_MULTITHREADED;
    }
    private static final int COINIT_DISABLE_OLE1DDE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagCOINIT.COINIT_DISABLE_OLE1DDE = 4
     * }
     */
    public static int COINIT_DISABLE_OLE1DDE() {
        return COINIT_DISABLE_OLE1DDE;
    }
    private static final int COINIT_SPEED_OVER_MEMORY = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagCOINIT.COINIT_SPEED_OVER_MEMORY = 8
     * }
     */
    public static int COINIT_SPEED_OVER_MEMORY() {
        return COINIT_SPEED_OVER_MEMORY;
    }

    private static class CoBuildVersion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoBuildVersion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern DWORD CoBuildVersion()
     * }
     */
    public static FunctionDescriptor CoBuildVersion$descriptor() {
        return CoBuildVersion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern DWORD CoBuildVersion()
     * }
     */
    public static MethodHandle CoBuildVersion$handle() {
        return CoBuildVersion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern DWORD CoBuildVersion()
     * }
     */
    public static MemorySegment CoBuildVersion$address() {
        return CoBuildVersion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern DWORD CoBuildVersion()
     * }
     */
    public static int CoBuildVersion() {
        var mh$ = CoBuildVersion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoBuildVersion");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInitialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoInitialize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInitialize(LPVOID pvReserved)
     * }
     */
    public static FunctionDescriptor CoInitialize$descriptor() {
        return CoInitialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInitialize(LPVOID pvReserved)
     * }
     */
    public static MethodHandle CoInitialize$handle() {
        return CoInitialize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInitialize(LPVOID pvReserved)
     * }
     */
    public static MemorySegment CoInitialize$address() {
        return CoInitialize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInitialize(LPVOID pvReserved)
     * }
     */
    public static int CoInitialize(MemorySegment pvReserved) {
        var mh$ = CoInitialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInitialize", pvReserved);
            }
            return (int)mh$.invokeExact(pvReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoRegisterMallocSpy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoRegisterMallocSpy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterMallocSpy(LPMALLOCSPY pMallocSpy)
     * }
     */
    public static FunctionDescriptor CoRegisterMallocSpy$descriptor() {
        return CoRegisterMallocSpy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterMallocSpy(LPMALLOCSPY pMallocSpy)
     * }
     */
    public static MethodHandle CoRegisterMallocSpy$handle() {
        return CoRegisterMallocSpy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterMallocSpy(LPMALLOCSPY pMallocSpy)
     * }
     */
    public static MemorySegment CoRegisterMallocSpy$address() {
        return CoRegisterMallocSpy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoRegisterMallocSpy(LPMALLOCSPY pMallocSpy)
     * }
     */
    public static int CoRegisterMallocSpy(MemorySegment pMallocSpy) {
        var mh$ = CoRegisterMallocSpy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoRegisterMallocSpy", pMallocSpy);
            }
            return (int)mh$.invokeExact(pMallocSpy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoRevokeMallocSpy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoRevokeMallocSpy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoRevokeMallocSpy()
     * }
     */
    public static FunctionDescriptor CoRevokeMallocSpy$descriptor() {
        return CoRevokeMallocSpy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoRevokeMallocSpy()
     * }
     */
    public static MethodHandle CoRevokeMallocSpy$handle() {
        return CoRevokeMallocSpy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoRevokeMallocSpy()
     * }
     */
    public static MemorySegment CoRevokeMallocSpy$address() {
        return CoRevokeMallocSpy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoRevokeMallocSpy()
     * }
     */
    public static int CoRevokeMallocSpy() {
        var mh$ = CoRevokeMallocSpy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoRevokeMallocSpy");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoCreateStandardMalloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoCreateStandardMalloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoCreateStandardMalloc(DWORD memctx, IMalloc **ppMalloc)
     * }
     */
    public static FunctionDescriptor CoCreateStandardMalloc$descriptor() {
        return CoCreateStandardMalloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoCreateStandardMalloc(DWORD memctx, IMalloc **ppMalloc)
     * }
     */
    public static MethodHandle CoCreateStandardMalloc$handle() {
        return CoCreateStandardMalloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoCreateStandardMalloc(DWORD memctx, IMalloc **ppMalloc)
     * }
     */
    public static MemorySegment CoCreateStandardMalloc$address() {
        return CoCreateStandardMalloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoCreateStandardMalloc(DWORD memctx, IMalloc **ppMalloc)
     * }
     */
    public static int CoCreateStandardMalloc(int memctx, MemorySegment ppMalloc) {
        var mh$ = CoCreateStandardMalloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoCreateStandardMalloc", memctx, ppMalloc);
            }
            return (int)mh$.invokeExact(memctx, ppMalloc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoRegisterInitializeSpy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoRegisterInitializeSpy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterInitializeSpy(IInitializeSpy *pSpy, ULARGE_INTEGER *puliCookie)
     * }
     */
    public static FunctionDescriptor CoRegisterInitializeSpy$descriptor() {
        return CoRegisterInitializeSpy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterInitializeSpy(IInitializeSpy *pSpy, ULARGE_INTEGER *puliCookie)
     * }
     */
    public static MethodHandle CoRegisterInitializeSpy$handle() {
        return CoRegisterInitializeSpy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterInitializeSpy(IInitializeSpy *pSpy, ULARGE_INTEGER *puliCookie)
     * }
     */
    public static MemorySegment CoRegisterInitializeSpy$address() {
        return CoRegisterInitializeSpy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoRegisterInitializeSpy(IInitializeSpy *pSpy, ULARGE_INTEGER *puliCookie)
     * }
     */
    public static int CoRegisterInitializeSpy(MemorySegment pSpy, MemorySegment puliCookie) {
        var mh$ = CoRegisterInitializeSpy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoRegisterInitializeSpy", pSpy, puliCookie);
            }
            return (int)mh$.invokeExact(pSpy, puliCookie);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoRevokeInitializeSpy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            _ULARGE_INTEGER.layout()
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoRevokeInitializeSpy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoRevokeInitializeSpy(ULARGE_INTEGER uliCookie)
     * }
     */
    public static FunctionDescriptor CoRevokeInitializeSpy$descriptor() {
        return CoRevokeInitializeSpy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoRevokeInitializeSpy(ULARGE_INTEGER uliCookie)
     * }
     */
    public static MethodHandle CoRevokeInitializeSpy$handle() {
        return CoRevokeInitializeSpy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoRevokeInitializeSpy(ULARGE_INTEGER uliCookie)
     * }
     */
    public static MemorySegment CoRevokeInitializeSpy$address() {
        return CoRevokeInitializeSpy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoRevokeInitializeSpy(ULARGE_INTEGER uliCookie)
     * }
     */
    public static int CoRevokeInitializeSpy(MemorySegment uliCookie) {
        var mh$ = CoRevokeInitializeSpy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoRevokeInitializeSpy", uliCookie);
            }
            return (int)mh$.invokeExact(uliCookie);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int SD_LAUNCHPERMISSIONS = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagCOMSD.SD_LAUNCHPERMISSIONS = 0
     * }
     */
    public static int SD_LAUNCHPERMISSIONS() {
        return SD_LAUNCHPERMISSIONS;
    }
    private static final int SD_ACCESSPERMISSIONS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagCOMSD.SD_ACCESSPERMISSIONS = 1
     * }
     */
    public static int SD_ACCESSPERMISSIONS() {
        return SD_ACCESSPERMISSIONS;
    }
    private static final int SD_LAUNCHRESTRICTIONS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagCOMSD.SD_LAUNCHRESTRICTIONS = 2
     * }
     */
    public static int SD_LAUNCHRESTRICTIONS() {
        return SD_LAUNCHRESTRICTIONS;
    }
    private static final int SD_ACCESSRESTRICTIONS = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagCOMSD.SD_ACCESSRESTRICTIONS = 3
     * }
     */
    public static int SD_ACCESSRESTRICTIONS() {
        return SD_ACCESSRESTRICTIONS;
    }

    private static class CoGetSystemSecurityPermissions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoGetSystemSecurityPermissions");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetSystemSecurityPermissions(COMSD comSDType, PSECURITY_DESCRIPTOR *ppSD)
     * }
     */
    public static FunctionDescriptor CoGetSystemSecurityPermissions$descriptor() {
        return CoGetSystemSecurityPermissions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetSystemSecurityPermissions(COMSD comSDType, PSECURITY_DESCRIPTOR *ppSD)
     * }
     */
    public static MethodHandle CoGetSystemSecurityPermissions$handle() {
        return CoGetSystemSecurityPermissions.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoGetSystemSecurityPermissions(COMSD comSDType, PSECURITY_DESCRIPTOR *ppSD)
     * }
     */
    public static MemorySegment CoGetSystemSecurityPermissions$address() {
        return CoGetSystemSecurityPermissions.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetSystemSecurityPermissions(COMSD comSDType, PSECURITY_DESCRIPTOR *ppSD)
     * }
     */
    public static int CoGetSystemSecurityPermissions(int comSDType, MemorySegment ppSD) {
        var mh$ = CoGetSystemSecurityPermissions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetSystemSecurityPermissions", comSDType, ppSD);
            }
            return (int)mh$.invokeExact(comSDType, ppSD);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoLoadLibrary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoLoadLibrary");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HINSTANCE CoLoadLibrary(LPOLESTR lpszLibName, BOOL bAutoFree)
     * }
     */
    public static FunctionDescriptor CoLoadLibrary$descriptor() {
        return CoLoadLibrary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HINSTANCE CoLoadLibrary(LPOLESTR lpszLibName, BOOL bAutoFree)
     * }
     */
    public static MethodHandle CoLoadLibrary$handle() {
        return CoLoadLibrary.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HINSTANCE CoLoadLibrary(LPOLESTR lpszLibName, BOOL bAutoFree)
     * }
     */
    public static MemorySegment CoLoadLibrary$address() {
        return CoLoadLibrary.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HINSTANCE CoLoadLibrary(LPOLESTR lpszLibName, BOOL bAutoFree)
     * }
     */
    public static MemorySegment CoLoadLibrary(MemorySegment lpszLibName, int bAutoFree) {
        var mh$ = CoLoadLibrary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoLoadLibrary", lpszLibName, bAutoFree);
            }
            return (MemorySegment)mh$.invokeExact(lpszLibName, bAutoFree);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoFreeLibrary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoFreeLibrary");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void CoFreeLibrary(HINSTANCE hInst)
     * }
     */
    public static FunctionDescriptor CoFreeLibrary$descriptor() {
        return CoFreeLibrary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void CoFreeLibrary(HINSTANCE hInst)
     * }
     */
    public static MethodHandle CoFreeLibrary$handle() {
        return CoFreeLibrary.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void CoFreeLibrary(HINSTANCE hInst)
     * }
     */
    public static MemorySegment CoFreeLibrary$address() {
        return CoFreeLibrary.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void CoFreeLibrary(HINSTANCE hInst)
     * }
     */
    public static void CoFreeLibrary(MemorySegment hInst) {
        var mh$ = CoFreeLibrary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoFreeLibrary", hInst);
            }
            mh$.invokeExact(hInst);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoFreeAllLibraries {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoFreeAllLibraries");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void CoFreeAllLibraries()
     * }
     */
    public static FunctionDescriptor CoFreeAllLibraries$descriptor() {
        return CoFreeAllLibraries.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void CoFreeAllLibraries()
     * }
     */
    public static MethodHandle CoFreeAllLibraries$handle() {
        return CoFreeAllLibraries.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void CoFreeAllLibraries()
     * }
     */
    public static MemorySegment CoFreeAllLibraries$address() {
        return CoFreeAllLibraries.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void CoFreeAllLibraries()
     * }
     */
    public static void CoFreeAllLibraries() {
        var mh$ = CoFreeAllLibraries.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoFreeAllLibraries");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetInstanceFromFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoGetInstanceFromFile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetInstanceFromFile(COSERVERINFO *pServerInfo, CLSID *pClsid, IUnknown *punkOuter, DWORD dwClsCtx, DWORD grfMode, OLECHAR *pwszName, DWORD dwCount, MULTI_QI *pResults)
     * }
     */
    public static FunctionDescriptor CoGetInstanceFromFile$descriptor() {
        return CoGetInstanceFromFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetInstanceFromFile(COSERVERINFO *pServerInfo, CLSID *pClsid, IUnknown *punkOuter, DWORD dwClsCtx, DWORD grfMode, OLECHAR *pwszName, DWORD dwCount, MULTI_QI *pResults)
     * }
     */
    public static MethodHandle CoGetInstanceFromFile$handle() {
        return CoGetInstanceFromFile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoGetInstanceFromFile(COSERVERINFO *pServerInfo, CLSID *pClsid, IUnknown *punkOuter, DWORD dwClsCtx, DWORD grfMode, OLECHAR *pwszName, DWORD dwCount, MULTI_QI *pResults)
     * }
     */
    public static MemorySegment CoGetInstanceFromFile$address() {
        return CoGetInstanceFromFile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetInstanceFromFile(COSERVERINFO *pServerInfo, CLSID *pClsid, IUnknown *punkOuter, DWORD dwClsCtx, DWORD grfMode, OLECHAR *pwszName, DWORD dwCount, MULTI_QI *pResults)
     * }
     */
    public static int CoGetInstanceFromFile(MemorySegment pServerInfo, MemorySegment pClsid, MemorySegment punkOuter, int dwClsCtx, int grfMode, MemorySegment pwszName, int dwCount, MemorySegment pResults) {
        var mh$ = CoGetInstanceFromFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetInstanceFromFile", pServerInfo, pClsid, punkOuter, dwClsCtx, grfMode, pwszName, dwCount, pResults);
            }
            return (int)mh$.invokeExact(pServerInfo, pClsid, punkOuter, dwClsCtx, grfMode, pwszName, dwCount, pResults);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetInstanceFromIStorage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoGetInstanceFromIStorage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetInstanceFromIStorage(COSERVERINFO *pServerInfo, CLSID *pClsid, IUnknown *punkOuter, DWORD dwClsCtx, struct IStorage *pstg, DWORD dwCount, MULTI_QI *pResults)
     * }
     */
    public static FunctionDescriptor CoGetInstanceFromIStorage$descriptor() {
        return CoGetInstanceFromIStorage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetInstanceFromIStorage(COSERVERINFO *pServerInfo, CLSID *pClsid, IUnknown *punkOuter, DWORD dwClsCtx, struct IStorage *pstg, DWORD dwCount, MULTI_QI *pResults)
     * }
     */
    public static MethodHandle CoGetInstanceFromIStorage$handle() {
        return CoGetInstanceFromIStorage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoGetInstanceFromIStorage(COSERVERINFO *pServerInfo, CLSID *pClsid, IUnknown *punkOuter, DWORD dwClsCtx, struct IStorage *pstg, DWORD dwCount, MULTI_QI *pResults)
     * }
     */
    public static MemorySegment CoGetInstanceFromIStorage$address() {
        return CoGetInstanceFromIStorage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetInstanceFromIStorage(COSERVERINFO *pServerInfo, CLSID *pClsid, IUnknown *punkOuter, DWORD dwClsCtx, struct IStorage *pstg, DWORD dwCount, MULTI_QI *pResults)
     * }
     */
    public static int CoGetInstanceFromIStorage(MemorySegment pServerInfo, MemorySegment pClsid, MemorySegment punkOuter, int dwClsCtx, MemorySegment pstg, int dwCount, MemorySegment pResults) {
        var mh$ = CoGetInstanceFromIStorage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetInstanceFromIStorage", pServerInfo, pClsid, punkOuter, dwClsCtx, pstg, dwCount, pResults);
            }
            return (int)mh$.invokeExact(pServerInfo, pClsid, punkOuter, dwClsCtx, pstg, dwCount, pResults);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoAllowSetForegroundWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoAllowSetForegroundWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoAllowSetForegroundWindow(IUnknown *pUnk, LPVOID lpvReserved)
     * }
     */
    public static FunctionDescriptor CoAllowSetForegroundWindow$descriptor() {
        return CoAllowSetForegroundWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoAllowSetForegroundWindow(IUnknown *pUnk, LPVOID lpvReserved)
     * }
     */
    public static MethodHandle CoAllowSetForegroundWindow$handle() {
        return CoAllowSetForegroundWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoAllowSetForegroundWindow(IUnknown *pUnk, LPVOID lpvReserved)
     * }
     */
    public static MemorySegment CoAllowSetForegroundWindow$address() {
        return CoAllowSetForegroundWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoAllowSetForegroundWindow(IUnknown *pUnk, LPVOID lpvReserved)
     * }
     */
    public static int CoAllowSetForegroundWindow(MemorySegment pUnk, MemorySegment lpvReserved) {
        var mh$ = CoAllowSetForegroundWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoAllowSetForegroundWindow", pUnk, lpvReserved);
            }
            return (int)mh$.invokeExact(pUnk, lpvReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DcomChannelSetHResult {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("DcomChannelSetHResult");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT DcomChannelSetHResult(LPVOID pvReserved, ULONG *pulReserved, HRESULT appsHR)
     * }
     */
    public static FunctionDescriptor DcomChannelSetHResult$descriptor() {
        return DcomChannelSetHResult.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT DcomChannelSetHResult(LPVOID pvReserved, ULONG *pulReserved, HRESULT appsHR)
     * }
     */
    public static MethodHandle DcomChannelSetHResult$handle() {
        return DcomChannelSetHResult.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT DcomChannelSetHResult(LPVOID pvReserved, ULONG *pulReserved, HRESULT appsHR)
     * }
     */
    public static MemorySegment DcomChannelSetHResult$address() {
        return DcomChannelSetHResult.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT DcomChannelSetHResult(LPVOID pvReserved, ULONG *pulReserved, HRESULT appsHR)
     * }
     */
    public static int DcomChannelSetHResult(MemorySegment pvReserved, MemorySegment pulReserved, int appsHR) {
        var mh$ = DcomChannelSetHResult.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DcomChannelSetHResult", pvReserved, pulReserved, appsHR);
            }
            return (int)mh$.invokeExact(pvReserved, pulReserved, appsHR);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoIsOle1Class {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoIsOle1Class");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BOOL CoIsOle1Class(const IID *const rclsid)
     * }
     */
    public static FunctionDescriptor CoIsOle1Class$descriptor() {
        return CoIsOle1Class.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BOOL CoIsOle1Class(const IID *const rclsid)
     * }
     */
    public static MethodHandle CoIsOle1Class$handle() {
        return CoIsOle1Class.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern BOOL CoIsOle1Class(const IID *const rclsid)
     * }
     */
    public static MemorySegment CoIsOle1Class$address() {
        return CoIsOle1Class.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern BOOL CoIsOle1Class(const IID *const rclsid)
     * }
     */
    public static int CoIsOle1Class(MemorySegment rclsid) {
        var mh$ = CoIsOle1Class.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoIsOle1Class", rclsid);
            }
            return (int)mh$.invokeExact(rclsid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoFileTimeToDosDateTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoFileTimeToDosDateTime");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BOOL CoFileTimeToDosDateTime(FILETIME *lpFileTime, LPWORD lpDosDate, LPWORD lpDosTime)
     * }
     */
    public static FunctionDescriptor CoFileTimeToDosDateTime$descriptor() {
        return CoFileTimeToDosDateTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BOOL CoFileTimeToDosDateTime(FILETIME *lpFileTime, LPWORD lpDosDate, LPWORD lpDosTime)
     * }
     */
    public static MethodHandle CoFileTimeToDosDateTime$handle() {
        return CoFileTimeToDosDateTime.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern BOOL CoFileTimeToDosDateTime(FILETIME *lpFileTime, LPWORD lpDosDate, LPWORD lpDosTime)
     * }
     */
    public static MemorySegment CoFileTimeToDosDateTime$address() {
        return CoFileTimeToDosDateTime.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern BOOL CoFileTimeToDosDateTime(FILETIME *lpFileTime, LPWORD lpDosDate, LPWORD lpDosTime)
     * }
     */
    public static int CoFileTimeToDosDateTime(MemorySegment lpFileTime, MemorySegment lpDosDate, MemorySegment lpDosTime) {
        var mh$ = CoFileTimeToDosDateTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoFileTimeToDosDateTime", lpFileTime, lpDosDate, lpDosTime);
            }
            return (int)mh$.invokeExact(lpFileTime, lpDosDate, lpDosTime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoDosDateTimeToFileTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_SHORT,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoDosDateTimeToFileTime");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BOOL CoDosDateTimeToFileTime(WORD nDosDate, WORD nDosTime, FILETIME *lpFileTime)
     * }
     */
    public static FunctionDescriptor CoDosDateTimeToFileTime$descriptor() {
        return CoDosDateTimeToFileTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BOOL CoDosDateTimeToFileTime(WORD nDosDate, WORD nDosTime, FILETIME *lpFileTime)
     * }
     */
    public static MethodHandle CoDosDateTimeToFileTime$handle() {
        return CoDosDateTimeToFileTime.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern BOOL CoDosDateTimeToFileTime(WORD nDosDate, WORD nDosTime, FILETIME *lpFileTime)
     * }
     */
    public static MemorySegment CoDosDateTimeToFileTime$address() {
        return CoDosDateTimeToFileTime.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern BOOL CoDosDateTimeToFileTime(WORD nDosDate, WORD nDosTime, FILETIME *lpFileTime)
     * }
     */
    public static int CoDosDateTimeToFileTime(short nDosDate, short nDosTime, MemorySegment lpFileTime) {
        var mh$ = CoDosDateTimeToFileTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoDosDateTimeToFileTime", nDosDate, nDosTime, lpFileTime);
            }
            return (int)mh$.invokeExact(nDosDate, nDosTime, lpFileTime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoRegisterMessageFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoRegisterMessageFilter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterMessageFilter(LPMESSAGEFILTER lpMessageFilter, LPMESSAGEFILTER *lplpMessageFilter)
     * }
     */
    public static FunctionDescriptor CoRegisterMessageFilter$descriptor() {
        return CoRegisterMessageFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterMessageFilter(LPMESSAGEFILTER lpMessageFilter, LPMESSAGEFILTER *lplpMessageFilter)
     * }
     */
    public static MethodHandle CoRegisterMessageFilter$handle() {
        return CoRegisterMessageFilter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterMessageFilter(LPMESSAGEFILTER lpMessageFilter, LPMESSAGEFILTER *lplpMessageFilter)
     * }
     */
    public static MemorySegment CoRegisterMessageFilter$address() {
        return CoRegisterMessageFilter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoRegisterMessageFilter(LPMESSAGEFILTER lpMessageFilter, LPMESSAGEFILTER *lplpMessageFilter)
     * }
     */
    public static int CoRegisterMessageFilter(MemorySegment lpMessageFilter, MemorySegment lplpMessageFilter) {
        var mh$ = CoRegisterMessageFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoRegisterMessageFilter", lpMessageFilter, lplpMessageFilter);
            }
            return (int)mh$.invokeExact(lpMessageFilter, lplpMessageFilter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoRegisterChannelHook {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoRegisterChannelHook");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterChannelHook(const GUID *const ExtensionUuid, IChannelHook *pChannelHook)
     * }
     */
    public static FunctionDescriptor CoRegisterChannelHook$descriptor() {
        return CoRegisterChannelHook.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterChannelHook(const GUID *const ExtensionUuid, IChannelHook *pChannelHook)
     * }
     */
    public static MethodHandle CoRegisterChannelHook$handle() {
        return CoRegisterChannelHook.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterChannelHook(const GUID *const ExtensionUuid, IChannelHook *pChannelHook)
     * }
     */
    public static MemorySegment CoRegisterChannelHook$address() {
        return CoRegisterChannelHook.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoRegisterChannelHook(const GUID *const ExtensionUuid, IChannelHook *pChannelHook)
     * }
     */
    public static int CoRegisterChannelHook(MemorySegment ExtensionUuid, MemorySegment pChannelHook) {
        var mh$ = CoRegisterChannelHook.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoRegisterChannelHook", ExtensionUuid, pChannelHook);
            }
            return (int)mh$.invokeExact(ExtensionUuid, pChannelHook);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoTreatAsClass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoTreatAsClass");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoTreatAsClass(const IID *const clsidOld, const IID *const clsidNew)
     * }
     */
    public static FunctionDescriptor CoTreatAsClass$descriptor() {
        return CoTreatAsClass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoTreatAsClass(const IID *const clsidOld, const IID *const clsidNew)
     * }
     */
    public static MethodHandle CoTreatAsClass$handle() {
        return CoTreatAsClass.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoTreatAsClass(const IID *const clsidOld, const IID *const clsidNew)
     * }
     */
    public static MemorySegment CoTreatAsClass$address() {
        return CoTreatAsClass.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoTreatAsClass(const IID *const clsidOld, const IID *const clsidNew)
     * }
     */
    public static int CoTreatAsClass(MemorySegment clsidOld, MemorySegment clsidNew) {
        var mh$ = CoTreatAsClass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoTreatAsClass", clsidOld, clsidNew);
            }
            return (int)mh$.invokeExact(clsidOld, clsidNew);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateDataAdviseHolder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CreateDataAdviseHolder");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateDataAdviseHolder(LPDATAADVISEHOLDER *ppDAHolder)
     * }
     */
    public static FunctionDescriptor CreateDataAdviseHolder$descriptor() {
        return CreateDataAdviseHolder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateDataAdviseHolder(LPDATAADVISEHOLDER *ppDAHolder)
     * }
     */
    public static MethodHandle CreateDataAdviseHolder$handle() {
        return CreateDataAdviseHolder.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CreateDataAdviseHolder(LPDATAADVISEHOLDER *ppDAHolder)
     * }
     */
    public static MemorySegment CreateDataAdviseHolder$address() {
        return CreateDataAdviseHolder.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CreateDataAdviseHolder(LPDATAADVISEHOLDER *ppDAHolder)
     * }
     */
    public static int CreateDataAdviseHolder(MemorySegment ppDAHolder) {
        var mh$ = CreateDataAdviseHolder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateDataAdviseHolder", ppDAHolder);
            }
            return (int)mh$.invokeExact(ppDAHolder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateDataCache {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CreateDataCache");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateDataCache(LPUNKNOWN pUnkOuter, const IID *const rclsid, const IID *const iid, LPVOID *ppv)
     * }
     */
    public static FunctionDescriptor CreateDataCache$descriptor() {
        return CreateDataCache.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateDataCache(LPUNKNOWN pUnkOuter, const IID *const rclsid, const IID *const iid, LPVOID *ppv)
     * }
     */
    public static MethodHandle CreateDataCache$handle() {
        return CreateDataCache.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CreateDataCache(LPUNKNOWN pUnkOuter, const IID *const rclsid, const IID *const iid, LPVOID *ppv)
     * }
     */
    public static MemorySegment CreateDataCache$address() {
        return CreateDataCache.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CreateDataCache(LPUNKNOWN pUnkOuter, const IID *const rclsid, const IID *const iid, LPVOID *ppv)
     * }
     */
    public static int CreateDataCache(MemorySegment pUnkOuter, MemorySegment rclsid, MemorySegment iid, MemorySegment ppv) {
        var mh$ = CreateDataCache.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateDataCache", pUnkOuter, rclsid, iid, ppv);
            }
            return (int)mh$.invokeExact(pUnkOuter, rclsid, iid, ppv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StgOpenAsyncDocfileOnIFillLockBytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("StgOpenAsyncDocfileOnIFillLockBytes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StgOpenAsyncDocfileOnIFillLockBytes(IFillLockBytes *pflb, DWORD grfMode, DWORD asyncFlags, IStorage **ppstgOpen)
     * }
     */
    public static FunctionDescriptor StgOpenAsyncDocfileOnIFillLockBytes$descriptor() {
        return StgOpenAsyncDocfileOnIFillLockBytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StgOpenAsyncDocfileOnIFillLockBytes(IFillLockBytes *pflb, DWORD grfMode, DWORD asyncFlags, IStorage **ppstgOpen)
     * }
     */
    public static MethodHandle StgOpenAsyncDocfileOnIFillLockBytes$handle() {
        return StgOpenAsyncDocfileOnIFillLockBytes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT StgOpenAsyncDocfileOnIFillLockBytes(IFillLockBytes *pflb, DWORD grfMode, DWORD asyncFlags, IStorage **ppstgOpen)
     * }
     */
    public static MemorySegment StgOpenAsyncDocfileOnIFillLockBytes$address() {
        return StgOpenAsyncDocfileOnIFillLockBytes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT StgOpenAsyncDocfileOnIFillLockBytes(IFillLockBytes *pflb, DWORD grfMode, DWORD asyncFlags, IStorage **ppstgOpen)
     * }
     */
    public static int StgOpenAsyncDocfileOnIFillLockBytes(MemorySegment pflb, int grfMode, int asyncFlags, MemorySegment ppstgOpen) {
        var mh$ = StgOpenAsyncDocfileOnIFillLockBytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StgOpenAsyncDocfileOnIFillLockBytes", pflb, grfMode, asyncFlags, ppstgOpen);
            }
            return (int)mh$.invokeExact(pflb, grfMode, asyncFlags, ppstgOpen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StgGetIFillLockBytesOnILockBytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("StgGetIFillLockBytesOnILockBytes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StgGetIFillLockBytesOnILockBytes(ILockBytes *pilb, IFillLockBytes **ppflb)
     * }
     */
    public static FunctionDescriptor StgGetIFillLockBytesOnILockBytes$descriptor() {
        return StgGetIFillLockBytesOnILockBytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StgGetIFillLockBytesOnILockBytes(ILockBytes *pilb, IFillLockBytes **ppflb)
     * }
     */
    public static MethodHandle StgGetIFillLockBytesOnILockBytes$handle() {
        return StgGetIFillLockBytesOnILockBytes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT StgGetIFillLockBytesOnILockBytes(ILockBytes *pilb, IFillLockBytes **ppflb)
     * }
     */
    public static MemorySegment StgGetIFillLockBytesOnILockBytes$address() {
        return StgGetIFillLockBytesOnILockBytes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT StgGetIFillLockBytesOnILockBytes(ILockBytes *pilb, IFillLockBytes **ppflb)
     * }
     */
    public static int StgGetIFillLockBytesOnILockBytes(MemorySegment pilb, MemorySegment ppflb) {
        var mh$ = StgGetIFillLockBytesOnILockBytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StgGetIFillLockBytesOnILockBytes", pilb, ppflb);
            }
            return (int)mh$.invokeExact(pilb, ppflb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StgGetIFillLockBytesOnFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("StgGetIFillLockBytesOnFile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StgGetIFillLockBytesOnFile(const OLECHAR *pwcsName, IFillLockBytes **ppflb)
     * }
     */
    public static FunctionDescriptor StgGetIFillLockBytesOnFile$descriptor() {
        return StgGetIFillLockBytesOnFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StgGetIFillLockBytesOnFile(const OLECHAR *pwcsName, IFillLockBytes **ppflb)
     * }
     */
    public static MethodHandle StgGetIFillLockBytesOnFile$handle() {
        return StgGetIFillLockBytesOnFile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT StgGetIFillLockBytesOnFile(const OLECHAR *pwcsName, IFillLockBytes **ppflb)
     * }
     */
    public static MemorySegment StgGetIFillLockBytesOnFile$address() {
        return StgGetIFillLockBytesOnFile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT StgGetIFillLockBytesOnFile(const OLECHAR *pwcsName, IFillLockBytes **ppflb)
     * }
     */
    public static int StgGetIFillLockBytesOnFile(MemorySegment pwcsName, MemorySegment ppflb) {
        var mh$ = StgGetIFillLockBytesOnFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StgGetIFillLockBytesOnFile", pwcsName, ppflb);
            }
            return (int)mh$.invokeExact(pwcsName, ppflb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StgOpenLayoutDocfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("StgOpenLayoutDocfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StgOpenLayoutDocfile(const OLECHAR *pwcsDfName, DWORD grfMode, DWORD reserved, IStorage **ppstgOpen)
     * }
     */
    public static FunctionDescriptor StgOpenLayoutDocfile$descriptor() {
        return StgOpenLayoutDocfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StgOpenLayoutDocfile(const OLECHAR *pwcsDfName, DWORD grfMode, DWORD reserved, IStorage **ppstgOpen)
     * }
     */
    public static MethodHandle StgOpenLayoutDocfile$handle() {
        return StgOpenLayoutDocfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT StgOpenLayoutDocfile(const OLECHAR *pwcsDfName, DWORD grfMode, DWORD reserved, IStorage **ppstgOpen)
     * }
     */
    public static MemorySegment StgOpenLayoutDocfile$address() {
        return StgOpenLayoutDocfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT StgOpenLayoutDocfile(const OLECHAR *pwcsDfName, DWORD grfMode, DWORD reserved, IStorage **ppstgOpen)
     * }
     */
    public static int StgOpenLayoutDocfile(MemorySegment pwcsDfName, int grfMode, int reserved, MemorySegment ppstgOpen) {
        var mh$ = StgOpenLayoutDocfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StgOpenLayoutDocfile", pwcsDfName, grfMode, reserved, ppstgOpen);
            }
            return (int)mh$.invokeExact(pwcsDfName, grfMode, reserved, ppstgOpen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInstall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoInstall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInstall(IBindCtx *pbc, DWORD dwFlags, uCLSSPEC *pClassSpec, QUERYCONTEXT *pQuery, LPWSTR pszCodeBase)
     * }
     */
    public static FunctionDescriptor CoInstall$descriptor() {
        return CoInstall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInstall(IBindCtx *pbc, DWORD dwFlags, uCLSSPEC *pClassSpec, QUERYCONTEXT *pQuery, LPWSTR pszCodeBase)
     * }
     */
    public static MethodHandle CoInstall$handle() {
        return CoInstall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInstall(IBindCtx *pbc, DWORD dwFlags, uCLSSPEC *pClassSpec, QUERYCONTEXT *pQuery, LPWSTR pszCodeBase)
     * }
     */
    public static MemorySegment CoInstall$address() {
        return CoInstall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInstall(IBindCtx *pbc, DWORD dwFlags, uCLSSPEC *pClassSpec, QUERYCONTEXT *pQuery, LPWSTR pszCodeBase)
     * }
     */
    public static int CoInstall(MemorySegment pbc, int dwFlags, MemorySegment pClassSpec, MemorySegment pQuery, MemorySegment pszCodeBase) {
        var mh$ = CoInstall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInstall", pbc, dwFlags, pClassSpec, pQuery, pszCodeBase);
            }
            return (int)mh$.invokeExact(pbc, dwFlags, pClassSpec, pQuery, pszCodeBase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BindMoniker {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("BindMoniker");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT BindMoniker(LPMONIKER pmk, DWORD grfOpt, const IID *const iidResult, LPVOID *ppvResult)
     * }
     */
    public static FunctionDescriptor BindMoniker$descriptor() {
        return BindMoniker.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT BindMoniker(LPMONIKER pmk, DWORD grfOpt, const IID *const iidResult, LPVOID *ppvResult)
     * }
     */
    public static MethodHandle BindMoniker$handle() {
        return BindMoniker.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT BindMoniker(LPMONIKER pmk, DWORD grfOpt, const IID *const iidResult, LPVOID *ppvResult)
     * }
     */
    public static MemorySegment BindMoniker$address() {
        return BindMoniker.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT BindMoniker(LPMONIKER pmk, DWORD grfOpt, const IID *const iidResult, LPVOID *ppvResult)
     * }
     */
    public static int BindMoniker(MemorySegment pmk, int grfOpt, MemorySegment iidResult, MemorySegment ppvResult) {
        var mh$ = BindMoniker.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BindMoniker", pmk, grfOpt, iidResult, ppvResult);
            }
            return (int)mh$.invokeExact(pmk, grfOpt, iidResult, ppvResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoGetObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetObject(LPCWSTR pszName, BIND_OPTS *pBindOptions, const IID *const riid, void **ppv)
     * }
     */
    public static FunctionDescriptor CoGetObject$descriptor() {
        return CoGetObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetObject(LPCWSTR pszName, BIND_OPTS *pBindOptions, const IID *const riid, void **ppv)
     * }
     */
    public static MethodHandle CoGetObject$handle() {
        return CoGetObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoGetObject(LPCWSTR pszName, BIND_OPTS *pBindOptions, const IID *const riid, void **ppv)
     * }
     */
    public static MemorySegment CoGetObject$address() {
        return CoGetObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetObject(LPCWSTR pszName, BIND_OPTS *pBindOptions, const IID *const riid, void **ppv)
     * }
     */
    public static int CoGetObject(MemorySegment pszName, MemorySegment pBindOptions, MemorySegment riid, MemorySegment ppv) {
        var mh$ = CoGetObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetObject", pszName, pBindOptions, riid, ppv);
            }
            return (int)mh$.invokeExact(pszName, pBindOptions, riid, ppv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MkParseDisplayName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("MkParseDisplayName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT MkParseDisplayName(LPBC pbc, LPCOLESTR szUserName, ULONG *pchEaten, LPMONIKER *ppmk)
     * }
     */
    public static FunctionDescriptor MkParseDisplayName$descriptor() {
        return MkParseDisplayName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT MkParseDisplayName(LPBC pbc, LPCOLESTR szUserName, ULONG *pchEaten, LPMONIKER *ppmk)
     * }
     */
    public static MethodHandle MkParseDisplayName$handle() {
        return MkParseDisplayName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT MkParseDisplayName(LPBC pbc, LPCOLESTR szUserName, ULONG *pchEaten, LPMONIKER *ppmk)
     * }
     */
    public static MemorySegment MkParseDisplayName$address() {
        return MkParseDisplayName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT MkParseDisplayName(LPBC pbc, LPCOLESTR szUserName, ULONG *pchEaten, LPMONIKER *ppmk)
     * }
     */
    public static int MkParseDisplayName(MemorySegment pbc, MemorySegment szUserName, MemorySegment pchEaten, MemorySegment ppmk) {
        var mh$ = MkParseDisplayName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MkParseDisplayName", pbc, szUserName, pchEaten, ppmk);
            }
            return (int)mh$.invokeExact(pbc, szUserName, pchEaten, ppmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MonikerRelativePathTo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("MonikerRelativePathTo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT MonikerRelativePathTo(LPMONIKER pmkSrc, LPMONIKER pmkDest, LPMONIKER *ppmkRelPath, BOOL dwReserved)
     * }
     */
    public static FunctionDescriptor MonikerRelativePathTo$descriptor() {
        return MonikerRelativePathTo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT MonikerRelativePathTo(LPMONIKER pmkSrc, LPMONIKER pmkDest, LPMONIKER *ppmkRelPath, BOOL dwReserved)
     * }
     */
    public static MethodHandle MonikerRelativePathTo$handle() {
        return MonikerRelativePathTo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT MonikerRelativePathTo(LPMONIKER pmkSrc, LPMONIKER pmkDest, LPMONIKER *ppmkRelPath, BOOL dwReserved)
     * }
     */
    public static MemorySegment MonikerRelativePathTo$address() {
        return MonikerRelativePathTo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT MonikerRelativePathTo(LPMONIKER pmkSrc, LPMONIKER pmkDest, LPMONIKER *ppmkRelPath, BOOL dwReserved)
     * }
     */
    public static int MonikerRelativePathTo(MemorySegment pmkSrc, MemorySegment pmkDest, MemorySegment ppmkRelPath, int dwReserved) {
        var mh$ = MonikerRelativePathTo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MonikerRelativePathTo", pmkSrc, pmkDest, ppmkRelPath, dwReserved);
            }
            return (int)mh$.invokeExact(pmkSrc, pmkDest, ppmkRelPath, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MonikerCommonPrefixWith {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("MonikerCommonPrefixWith");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT MonikerCommonPrefixWith(LPMONIKER pmkThis, LPMONIKER pmkOther, LPMONIKER *ppmkCommon)
     * }
     */
    public static FunctionDescriptor MonikerCommonPrefixWith$descriptor() {
        return MonikerCommonPrefixWith.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT MonikerCommonPrefixWith(LPMONIKER pmkThis, LPMONIKER pmkOther, LPMONIKER *ppmkCommon)
     * }
     */
    public static MethodHandle MonikerCommonPrefixWith$handle() {
        return MonikerCommonPrefixWith.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT MonikerCommonPrefixWith(LPMONIKER pmkThis, LPMONIKER pmkOther, LPMONIKER *ppmkCommon)
     * }
     */
    public static MemorySegment MonikerCommonPrefixWith$address() {
        return MonikerCommonPrefixWith.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT MonikerCommonPrefixWith(LPMONIKER pmkThis, LPMONIKER pmkOther, LPMONIKER *ppmkCommon)
     * }
     */
    public static int MonikerCommonPrefixWith(MemorySegment pmkThis, MemorySegment pmkOther, MemorySegment ppmkCommon) {
        var mh$ = MonikerCommonPrefixWith.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MonikerCommonPrefixWith", pmkThis, pmkOther, ppmkCommon);
            }
            return (int)mh$.invokeExact(pmkThis, pmkOther, ppmkCommon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateBindCtx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CreateBindCtx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateBindCtx(DWORD reserved, LPBC *ppbc)
     * }
     */
    public static FunctionDescriptor CreateBindCtx$descriptor() {
        return CreateBindCtx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateBindCtx(DWORD reserved, LPBC *ppbc)
     * }
     */
    public static MethodHandle CreateBindCtx$handle() {
        return CreateBindCtx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CreateBindCtx(DWORD reserved, LPBC *ppbc)
     * }
     */
    public static MemorySegment CreateBindCtx$address() {
        return CreateBindCtx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CreateBindCtx(DWORD reserved, LPBC *ppbc)
     * }
     */
    public static int CreateBindCtx(int reserved, MemorySegment ppbc) {
        var mh$ = CreateBindCtx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateBindCtx", reserved, ppbc);
            }
            return (int)mh$.invokeExact(reserved, ppbc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateGenericComposite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CreateGenericComposite");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateGenericComposite(LPMONIKER pmkFirst, LPMONIKER pmkRest, LPMONIKER *ppmkComposite)
     * }
     */
    public static FunctionDescriptor CreateGenericComposite$descriptor() {
        return CreateGenericComposite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateGenericComposite(LPMONIKER pmkFirst, LPMONIKER pmkRest, LPMONIKER *ppmkComposite)
     * }
     */
    public static MethodHandle CreateGenericComposite$handle() {
        return CreateGenericComposite.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CreateGenericComposite(LPMONIKER pmkFirst, LPMONIKER pmkRest, LPMONIKER *ppmkComposite)
     * }
     */
    public static MemorySegment CreateGenericComposite$address() {
        return CreateGenericComposite.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CreateGenericComposite(LPMONIKER pmkFirst, LPMONIKER pmkRest, LPMONIKER *ppmkComposite)
     * }
     */
    public static int CreateGenericComposite(MemorySegment pmkFirst, MemorySegment pmkRest, MemorySegment ppmkComposite) {
        var mh$ = CreateGenericComposite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateGenericComposite", pmkFirst, pmkRest, ppmkComposite);
            }
            return (int)mh$.invokeExact(pmkFirst, pmkRest, ppmkComposite);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetClassFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetClassFile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT GetClassFile(LPCOLESTR szFilename, CLSID *pclsid)
     * }
     */
    public static FunctionDescriptor GetClassFile$descriptor() {
        return GetClassFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT GetClassFile(LPCOLESTR szFilename, CLSID *pclsid)
     * }
     */
    public static MethodHandle GetClassFile$handle() {
        return GetClassFile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT GetClassFile(LPCOLESTR szFilename, CLSID *pclsid)
     * }
     */
    public static MemorySegment GetClassFile$address() {
        return GetClassFile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT GetClassFile(LPCOLESTR szFilename, CLSID *pclsid)
     * }
     */
    public static int GetClassFile(MemorySegment szFilename, MemorySegment pclsid) {
        var mh$ = GetClassFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetClassFile", szFilename, pclsid);
            }
            return (int)mh$.invokeExact(szFilename, pclsid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateClassMoniker {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CreateClassMoniker");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateClassMoniker(const IID *const rclsid, LPMONIKER *ppmk)
     * }
     */
    public static FunctionDescriptor CreateClassMoniker$descriptor() {
        return CreateClassMoniker.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateClassMoniker(const IID *const rclsid, LPMONIKER *ppmk)
     * }
     */
    public static MethodHandle CreateClassMoniker$handle() {
        return CreateClassMoniker.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CreateClassMoniker(const IID *const rclsid, LPMONIKER *ppmk)
     * }
     */
    public static MemorySegment CreateClassMoniker$address() {
        return CreateClassMoniker.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CreateClassMoniker(const IID *const rclsid, LPMONIKER *ppmk)
     * }
     */
    public static int CreateClassMoniker(MemorySegment rclsid, MemorySegment ppmk) {
        var mh$ = CreateClassMoniker.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateClassMoniker", rclsid, ppmk);
            }
            return (int)mh$.invokeExact(rclsid, ppmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateFileMoniker {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CreateFileMoniker");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateFileMoniker(LPCOLESTR lpszPathName, LPMONIKER *ppmk)
     * }
     */
    public static FunctionDescriptor CreateFileMoniker$descriptor() {
        return CreateFileMoniker.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateFileMoniker(LPCOLESTR lpszPathName, LPMONIKER *ppmk)
     * }
     */
    public static MethodHandle CreateFileMoniker$handle() {
        return CreateFileMoniker.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CreateFileMoniker(LPCOLESTR lpszPathName, LPMONIKER *ppmk)
     * }
     */
    public static MemorySegment CreateFileMoniker$address() {
        return CreateFileMoniker.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CreateFileMoniker(LPCOLESTR lpszPathName, LPMONIKER *ppmk)
     * }
     */
    public static int CreateFileMoniker(MemorySegment lpszPathName, MemorySegment ppmk) {
        var mh$ = CreateFileMoniker.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateFileMoniker", lpszPathName, ppmk);
            }
            return (int)mh$.invokeExact(lpszPathName, ppmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateItemMoniker {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CreateItemMoniker");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateItemMoniker(LPCOLESTR lpszDelim, LPCOLESTR lpszItem, LPMONIKER *ppmk)
     * }
     */
    public static FunctionDescriptor CreateItemMoniker$descriptor() {
        return CreateItemMoniker.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateItemMoniker(LPCOLESTR lpszDelim, LPCOLESTR lpszItem, LPMONIKER *ppmk)
     * }
     */
    public static MethodHandle CreateItemMoniker$handle() {
        return CreateItemMoniker.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CreateItemMoniker(LPCOLESTR lpszDelim, LPCOLESTR lpszItem, LPMONIKER *ppmk)
     * }
     */
    public static MemorySegment CreateItemMoniker$address() {
        return CreateItemMoniker.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CreateItemMoniker(LPCOLESTR lpszDelim, LPCOLESTR lpszItem, LPMONIKER *ppmk)
     * }
     */
    public static int CreateItemMoniker(MemorySegment lpszDelim, MemorySegment lpszItem, MemorySegment ppmk) {
        var mh$ = CreateItemMoniker.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateItemMoniker", lpszDelim, lpszItem, ppmk);
            }
            return (int)mh$.invokeExact(lpszDelim, lpszItem, ppmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateAntiMoniker {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CreateAntiMoniker");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateAntiMoniker(LPMONIKER *ppmk)
     * }
     */
    public static FunctionDescriptor CreateAntiMoniker$descriptor() {
        return CreateAntiMoniker.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateAntiMoniker(LPMONIKER *ppmk)
     * }
     */
    public static MethodHandle CreateAntiMoniker$handle() {
        return CreateAntiMoniker.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CreateAntiMoniker(LPMONIKER *ppmk)
     * }
     */
    public static MemorySegment CreateAntiMoniker$address() {
        return CreateAntiMoniker.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CreateAntiMoniker(LPMONIKER *ppmk)
     * }
     */
    public static int CreateAntiMoniker(MemorySegment ppmk) {
        var mh$ = CreateAntiMoniker.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateAntiMoniker", ppmk);
            }
            return (int)mh$.invokeExact(ppmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreatePointerMoniker {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CreatePointerMoniker");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreatePointerMoniker(LPUNKNOWN punk, LPMONIKER *ppmk)
     * }
     */
    public static FunctionDescriptor CreatePointerMoniker$descriptor() {
        return CreatePointerMoniker.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreatePointerMoniker(LPUNKNOWN punk, LPMONIKER *ppmk)
     * }
     */
    public static MethodHandle CreatePointerMoniker$handle() {
        return CreatePointerMoniker.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CreatePointerMoniker(LPUNKNOWN punk, LPMONIKER *ppmk)
     * }
     */
    public static MemorySegment CreatePointerMoniker$address() {
        return CreatePointerMoniker.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CreatePointerMoniker(LPUNKNOWN punk, LPMONIKER *ppmk)
     * }
     */
    public static int CreatePointerMoniker(MemorySegment punk, MemorySegment ppmk) {
        var mh$ = CreatePointerMoniker.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreatePointerMoniker", punk, ppmk);
            }
            return (int)mh$.invokeExact(punk, ppmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateObjrefMoniker {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CreateObjrefMoniker");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateObjrefMoniker(LPUNKNOWN punk, LPMONIKER *ppmk)
     * }
     */
    public static FunctionDescriptor CreateObjrefMoniker$descriptor() {
        return CreateObjrefMoniker.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateObjrefMoniker(LPUNKNOWN punk, LPMONIKER *ppmk)
     * }
     */
    public static MethodHandle CreateObjrefMoniker$handle() {
        return CreateObjrefMoniker.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CreateObjrefMoniker(LPUNKNOWN punk, LPMONIKER *ppmk)
     * }
     */
    public static MemorySegment CreateObjrefMoniker$address() {
        return CreateObjrefMoniker.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CreateObjrefMoniker(LPUNKNOWN punk, LPMONIKER *ppmk)
     * }
     */
    public static int CreateObjrefMoniker(MemorySegment punk, MemorySegment ppmk) {
        var mh$ = CreateObjrefMoniker.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateObjrefMoniker", punk, ppmk);
            }
            return (int)mh$.invokeExact(punk, ppmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetRunningObjectTable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetRunningObjectTable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT GetRunningObjectTable(DWORD reserved, LPRUNNINGOBJECTTABLE *pprot)
     * }
     */
    public static FunctionDescriptor GetRunningObjectTable$descriptor() {
        return GetRunningObjectTable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT GetRunningObjectTable(DWORD reserved, LPRUNNINGOBJECTTABLE *pprot)
     * }
     */
    public static MethodHandle GetRunningObjectTable$handle() {
        return GetRunningObjectTable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT GetRunningObjectTable(DWORD reserved, LPRUNNINGOBJECTTABLE *pprot)
     * }
     */
    public static MemorySegment GetRunningObjectTable$address() {
        return GetRunningObjectTable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT GetRunningObjectTable(DWORD reserved, LPRUNNINGOBJECTTABLE *pprot)
     * }
     */
    public static int GetRunningObjectTable(int reserved, MemorySegment pprot) {
        var mh$ = GetRunningObjectTable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetRunningObjectTable", reserved, pprot);
            }
            return (int)mh$.invokeExact(reserved, pprot);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec$layout() {
        return __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec$segment() {
        return __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec() {
        return __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec$layout() {
        return __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec$segment() {
        return __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec() {
        return __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IOleAdviseHolder *LPOLEADVISEHOLDER
     * }
     */
    public static final AddressLayout LPOLEADVISEHOLDER = wgl_h.C_POINTER;

    private static class IID_IOleAdviseHolder$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IOleAdviseHolder").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleAdviseHolder
     * }
     */
    public static GroupLayout IID_IOleAdviseHolder$layout() {
        return IID_IOleAdviseHolder$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleAdviseHolder
     * }
     */
    public static MemorySegment IID_IOleAdviseHolder() {
        return IID_IOleAdviseHolder$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleAdviseHolder
     * }
     */
    public static void IID_IOleAdviseHolder(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IOleAdviseHolder$constants.SEGMENT, 0L, IID_IOleAdviseHolder$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec$layout() {
        return __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec$segment() {
        return __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec() {
        return __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec$layout() {
        return __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec$segment() {
        return __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec() {
        return __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IOleCache *LPOLECACHE
     * }
     */
    public static final AddressLayout LPOLECACHE = wgl_h.C_POINTER;

    private static class IID_IOleCache$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IOleCache").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleCache
     * }
     */
    public static GroupLayout IID_IOleCache$layout() {
        return IID_IOleCache$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleCache
     * }
     */
    public static MemorySegment IID_IOleCache() {
        return IID_IOleCache$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleCache
     * }
     */
    public static void IID_IOleCache(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IOleCache$constants.SEGMENT, 0L, IID_IOleCache$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IOleCache2 *LPOLECACHE2
     * }
     */
    public static final AddressLayout LPOLECACHE2 = wgl_h.C_POINTER;
    private static final int DISCARDCACHE_SAVEIFDIRTY = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagDISCARDCACHE.DISCARDCACHE_SAVEIFDIRTY = 0
     * }
     */
    public static int DISCARDCACHE_SAVEIFDIRTY() {
        return DISCARDCACHE_SAVEIFDIRTY;
    }
    private static final int DISCARDCACHE_NOSAVE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagDISCARDCACHE.DISCARDCACHE_NOSAVE = 1
     * }
     */
    public static int DISCARDCACHE_NOSAVE() {
        return DISCARDCACHE_NOSAVE;
    }

    private static class IID_IOleCache2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IOleCache2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleCache2
     * }
     */
    public static GroupLayout IID_IOleCache2$layout() {
        return IID_IOleCache2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleCache2
     * }
     */
    public static MemorySegment IID_IOleCache2() {
        return IID_IOleCache2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleCache2
     * }
     */
    public static void IID_IOleCache2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IOleCache2$constants.SEGMENT, 0L, IID_IOleCache2$constants.LAYOUT.byteSize());
    }

    private static class IOleCache2_RemoteUpdateCache_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IOleCache2_RemoteUpdateCache_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IOleCache2_RemoteUpdateCache_Proxy(IOleCache2 *This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LONG_PTR pReserved)
     * }
     */
    public static FunctionDescriptor IOleCache2_RemoteUpdateCache_Proxy$descriptor() {
        return IOleCache2_RemoteUpdateCache_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IOleCache2_RemoteUpdateCache_Proxy(IOleCache2 *This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LONG_PTR pReserved)
     * }
     */
    public static MethodHandle IOleCache2_RemoteUpdateCache_Proxy$handle() {
        return IOleCache2_RemoteUpdateCache_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IOleCache2_RemoteUpdateCache_Proxy(IOleCache2 *This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LONG_PTR pReserved)
     * }
     */
    public static MemorySegment IOleCache2_RemoteUpdateCache_Proxy$address() {
        return IOleCache2_RemoteUpdateCache_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IOleCache2_RemoteUpdateCache_Proxy(IOleCache2 *This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LONG_PTR pReserved)
     * }
     */
    public static int IOleCache2_RemoteUpdateCache_Proxy(MemorySegment This, MemorySegment pDataObject, int grfUpdf, long pReserved) {
        var mh$ = IOleCache2_RemoteUpdateCache_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IOleCache2_RemoteUpdateCache_Proxy", This, pDataObject, grfUpdf, pReserved);
            }
            return (int)mh$.invokeExact(This, pDataObject, grfUpdf, pReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IOleCache2_RemoteUpdateCache_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IOleCache2_RemoteUpdateCache_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IOleCache2_RemoteUpdateCache_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IOleCache2_RemoteUpdateCache_Stub$descriptor() {
        return IOleCache2_RemoteUpdateCache_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IOleCache2_RemoteUpdateCache_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IOleCache2_RemoteUpdateCache_Stub$handle() {
        return IOleCache2_RemoteUpdateCache_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IOleCache2_RemoteUpdateCache_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IOleCache2_RemoteUpdateCache_Stub$address() {
        return IOleCache2_RemoteUpdateCache_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IOleCache2_RemoteUpdateCache_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IOleCache2_RemoteUpdateCache_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IOleCache2_RemoteUpdateCache_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IOleCache2_RemoteUpdateCache_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec$layout() {
        return __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec$segment() {
        return __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec() {
        return __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec$layout() {
        return __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec$segment() {
        return __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec() {
        return __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IOleCacheControl *LPOLECACHECONTROL
     * }
     */
    public static final AddressLayout LPOLECACHECONTROL = wgl_h.C_POINTER;

    private static class IID_IOleCacheControl$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IOleCacheControl").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleCacheControl
     * }
     */
    public static GroupLayout IID_IOleCacheControl$layout() {
        return IID_IOleCacheControl$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleCacheControl
     * }
     */
    public static MemorySegment IID_IOleCacheControl() {
        return IID_IOleCacheControl$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleCacheControl
     * }
     */
    public static void IID_IOleCacheControl(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IOleCacheControl$constants.SEGMENT, 0L, IID_IOleCacheControl$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IParseDisplayName *LPPARSEDISPLAYNAME
     * }
     */
    public static final AddressLayout LPPARSEDISPLAYNAME = wgl_h.C_POINTER;

    private static class IID_IParseDisplayName$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IParseDisplayName").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IParseDisplayName
     * }
     */
    public static GroupLayout IID_IParseDisplayName$layout() {
        return IID_IParseDisplayName$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IParseDisplayName
     * }
     */
    public static MemorySegment IID_IParseDisplayName() {
        return IID_IParseDisplayName$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IParseDisplayName
     * }
     */
    public static void IID_IParseDisplayName(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IParseDisplayName$constants.SEGMENT, 0L, IID_IParseDisplayName$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IOleContainer *LPOLECONTAINER
     * }
     */
    public static final AddressLayout LPOLECONTAINER = wgl_h.C_POINTER;

    private static class IID_IOleContainer$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IOleContainer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleContainer
     * }
     */
    public static GroupLayout IID_IOleContainer$layout() {
        return IID_IOleContainer$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleContainer
     * }
     */
    public static MemorySegment IID_IOleContainer() {
        return IID_IOleContainer$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleContainer
     * }
     */
    public static void IID_IOleContainer(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IOleContainer$constants.SEGMENT, 0L, IID_IOleContainer$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IOleClientSite *LPOLECLIENTSITE
     * }
     */
    public static final AddressLayout LPOLECLIENTSITE = wgl_h.C_POINTER;

    private static class IID_IOleClientSite$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IOleClientSite").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleClientSite
     * }
     */
    public static GroupLayout IID_IOleClientSite$layout() {
        return IID_IOleClientSite$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleClientSite
     * }
     */
    public static MemorySegment IID_IOleClientSite() {
        return IID_IOleClientSite$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleClientSite
     * }
     */
    public static void IID_IOleClientSite(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IOleClientSite$constants.SEGMENT, 0L, IID_IOleClientSite$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IOleObject *LPOLEOBJECT
     * }
     */
    public static final AddressLayout LPOLEOBJECT = wgl_h.C_POINTER;
    private static final int OLEGETMONIKER_ONLYIFTHERE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagOLEGETMONIKER.OLEGETMONIKER_ONLYIFTHERE = 1
     * }
     */
    public static int OLEGETMONIKER_ONLYIFTHERE() {
        return OLEGETMONIKER_ONLYIFTHERE;
    }
    private static final int OLEGETMONIKER_FORCEASSIGN = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagOLEGETMONIKER.OLEGETMONIKER_FORCEASSIGN = 2
     * }
     */
    public static int OLEGETMONIKER_FORCEASSIGN() {
        return OLEGETMONIKER_FORCEASSIGN;
    }
    private static final int OLEGETMONIKER_UNASSIGN = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagOLEGETMONIKER.OLEGETMONIKER_UNASSIGN = 3
     * }
     */
    public static int OLEGETMONIKER_UNASSIGN() {
        return OLEGETMONIKER_UNASSIGN;
    }
    private static final int OLEGETMONIKER_TEMPFORUSER = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagOLEGETMONIKER.OLEGETMONIKER_TEMPFORUSER = 4
     * }
     */
    public static int OLEGETMONIKER_TEMPFORUSER() {
        return OLEGETMONIKER_TEMPFORUSER;
    }
    private static final int OLEWHICHMK_CONTAINER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagOLEWHICHMK.OLEWHICHMK_CONTAINER = 1
     * }
     */
    public static int OLEWHICHMK_CONTAINER() {
        return OLEWHICHMK_CONTAINER;
    }
    private static final int OLEWHICHMK_OBJREL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagOLEWHICHMK.OLEWHICHMK_OBJREL = 2
     * }
     */
    public static int OLEWHICHMK_OBJREL() {
        return OLEWHICHMK_OBJREL;
    }
    private static final int OLEWHICHMK_OBJFULL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagOLEWHICHMK.OLEWHICHMK_OBJFULL = 3
     * }
     */
    public static int OLEWHICHMK_OBJFULL() {
        return OLEWHICHMK_OBJFULL;
    }
    private static final int USERCLASSTYPE_FULL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagUSERCLASSTYPE.USERCLASSTYPE_FULL = 1
     * }
     */
    public static int USERCLASSTYPE_FULL() {
        return USERCLASSTYPE_FULL;
    }
    private static final int USERCLASSTYPE_SHORT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagUSERCLASSTYPE.USERCLASSTYPE_SHORT = 2
     * }
     */
    public static int USERCLASSTYPE_SHORT() {
        return USERCLASSTYPE_SHORT;
    }
    private static final int USERCLASSTYPE_APPNAME = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagUSERCLASSTYPE.USERCLASSTYPE_APPNAME = 3
     * }
     */
    public static int USERCLASSTYPE_APPNAME() {
        return USERCLASSTYPE_APPNAME;
    }
    private static final int OLEMISC_RECOMPOSEONRESIZE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_RECOMPOSEONRESIZE = 1
     * }
     */
    public static int OLEMISC_RECOMPOSEONRESIZE() {
        return OLEMISC_RECOMPOSEONRESIZE;
    }
    private static final int OLEMISC_ONLYICONIC = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_ONLYICONIC = 2
     * }
     */
    public static int OLEMISC_ONLYICONIC() {
        return OLEMISC_ONLYICONIC;
    }
    private static final int OLEMISC_INSERTNOTREPLACE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_INSERTNOTREPLACE = 4
     * }
     */
    public static int OLEMISC_INSERTNOTREPLACE() {
        return OLEMISC_INSERTNOTREPLACE;
    }
    private static final int OLEMISC_STATIC = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_STATIC = 8
     * }
     */
    public static int OLEMISC_STATIC() {
        return OLEMISC_STATIC;
    }
    private static final int OLEMISC_CANTLINKINSIDE = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_CANTLINKINSIDE = 16
     * }
     */
    public static int OLEMISC_CANTLINKINSIDE() {
        return OLEMISC_CANTLINKINSIDE;
    }
    private static final int OLEMISC_CANLINKBYOLE1 = (int)32L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_CANLINKBYOLE1 = 32
     * }
     */
    public static int OLEMISC_CANLINKBYOLE1() {
        return OLEMISC_CANLINKBYOLE1;
    }
    private static final int OLEMISC_ISLINKOBJECT = (int)64L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_ISLINKOBJECT = 64
     * }
     */
    public static int OLEMISC_ISLINKOBJECT() {
        return OLEMISC_ISLINKOBJECT;
    }
    private static final int OLEMISC_INSIDEOUT = (int)128L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_INSIDEOUT = 128
     * }
     */
    public static int OLEMISC_INSIDEOUT() {
        return OLEMISC_INSIDEOUT;
    }
    private static final int OLEMISC_ACTIVATEWHENVISIBLE = (int)256L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_ACTIVATEWHENVISIBLE = 256
     * }
     */
    public static int OLEMISC_ACTIVATEWHENVISIBLE() {
        return OLEMISC_ACTIVATEWHENVISIBLE;
    }
    private static final int OLEMISC_RENDERINGISDEVICEINDEPENDENT = (int)512L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_RENDERINGISDEVICEINDEPENDENT = 512
     * }
     */
    public static int OLEMISC_RENDERINGISDEVICEINDEPENDENT() {
        return OLEMISC_RENDERINGISDEVICEINDEPENDENT;
    }
    private static final int OLEMISC_INVISIBLEATRUNTIME = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_INVISIBLEATRUNTIME = 1024
     * }
     */
    public static int OLEMISC_INVISIBLEATRUNTIME() {
        return OLEMISC_INVISIBLEATRUNTIME;
    }
    private static final int OLEMISC_ALWAYSRUN = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_ALWAYSRUN = 2048
     * }
     */
    public static int OLEMISC_ALWAYSRUN() {
        return OLEMISC_ALWAYSRUN;
    }
    private static final int OLEMISC_ACTSLIKEBUTTON = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_ACTSLIKEBUTTON = 4096
     * }
     */
    public static int OLEMISC_ACTSLIKEBUTTON() {
        return OLEMISC_ACTSLIKEBUTTON;
    }
    private static final int OLEMISC_ACTSLIKELABEL = (int)8192L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_ACTSLIKELABEL = 8192
     * }
     */
    public static int OLEMISC_ACTSLIKELABEL() {
        return OLEMISC_ACTSLIKELABEL;
    }
    private static final int OLEMISC_NOUIACTIVATE = (int)16384L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_NOUIACTIVATE = 16384
     * }
     */
    public static int OLEMISC_NOUIACTIVATE() {
        return OLEMISC_NOUIACTIVATE;
    }
    private static final int OLEMISC_ALIGNABLE = (int)32768L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_ALIGNABLE = 32768
     * }
     */
    public static int OLEMISC_ALIGNABLE() {
        return OLEMISC_ALIGNABLE;
    }
    private static final int OLEMISC_SIMPLEFRAME = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_SIMPLEFRAME = 65536
     * }
     */
    public static int OLEMISC_SIMPLEFRAME() {
        return OLEMISC_SIMPLEFRAME;
    }
    private static final int OLEMISC_SETCLIENTSITEFIRST = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_SETCLIENTSITEFIRST = 131072
     * }
     */
    public static int OLEMISC_SETCLIENTSITEFIRST() {
        return OLEMISC_SETCLIENTSITEFIRST;
    }
    private static final int OLEMISC_IMEMODE = (int)262144L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_IMEMODE = 262144
     * }
     */
    public static int OLEMISC_IMEMODE() {
        return OLEMISC_IMEMODE;
    }
    private static final int OLEMISC_IGNOREACTIVATEWHENVISIBLE = (int)524288L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_IGNOREACTIVATEWHENVISIBLE = 524288
     * }
     */
    public static int OLEMISC_IGNOREACTIVATEWHENVISIBLE() {
        return OLEMISC_IGNOREACTIVATEWHENVISIBLE;
    }
    private static final int OLEMISC_WANTSTOMENUMERGE = (int)1048576L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_WANTSTOMENUMERGE = 1048576
     * }
     */
    public static int OLEMISC_WANTSTOMENUMERGE() {
        return OLEMISC_WANTSTOMENUMERGE;
    }
    private static final int OLEMISC_SUPPORTSMULTILEVELUNDO = (int)2097152L;
    /**
     * {@snippet lang=c :
     * enum tagOLEMISC.OLEMISC_SUPPORTSMULTILEVELUNDO = 2097152
     * }
     */
    public static int OLEMISC_SUPPORTSMULTILEVELUNDO() {
        return OLEMISC_SUPPORTSMULTILEVELUNDO;
    }
    private static final int OLECLOSE_SAVEIFDIRTY = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagOLECLOSE.OLECLOSE_SAVEIFDIRTY = 0
     * }
     */
    public static int OLECLOSE_SAVEIFDIRTY() {
        return OLECLOSE_SAVEIFDIRTY;
    }
    private static final int OLECLOSE_NOSAVE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagOLECLOSE.OLECLOSE_NOSAVE = 1
     * }
     */
    public static int OLECLOSE_NOSAVE() {
        return OLECLOSE_NOSAVE;
    }
    private static final int OLECLOSE_PROMPTSAVE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagOLECLOSE.OLECLOSE_PROMPTSAVE = 2
     * }
     */
    public static int OLECLOSE_PROMPTSAVE() {
        return OLECLOSE_PROMPTSAVE;
    }

    private static class IID_IOleObject$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IOleObject").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleObject
     * }
     */
    public static GroupLayout IID_IOleObject$layout() {
        return IID_IOleObject$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleObject
     * }
     */
    public static MemorySegment IID_IOleObject() {
        return IID_IOleObject$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleObject
     * }
     */
    public static void IID_IOleObject(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IOleObject$constants.SEGMENT, 0L, IID_IOleObject$constants.LAYOUT.byteSize());
    }
    private static final int OLERENDER_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagOLERENDER.OLERENDER_NONE = 0
     * }
     */
    public static int OLERENDER_NONE() {
        return OLERENDER_NONE;
    }
    private static final int OLERENDER_DRAW = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagOLERENDER.OLERENDER_DRAW = 1
     * }
     */
    public static int OLERENDER_DRAW() {
        return OLERENDER_DRAW;
    }
    private static final int OLERENDER_FORMAT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagOLERENDER.OLERENDER_FORMAT = 2
     * }
     */
    public static int OLERENDER_FORMAT() {
        return OLERENDER_FORMAT;
    }
    private static final int OLERENDER_ASIS = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagOLERENDER.OLERENDER_ASIS = 3
     * }
     */
    public static int OLERENDER_ASIS() {
        return OLERENDER_ASIS;
    }
    /**
     * {@snippet lang=c :
     * typedef OLERENDER *LPOLERENDER
     * }
     */
    public static final AddressLayout LPOLERENDER = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagOBJECTDESCRIPTOR {
     *     ULONG cbSize;
     *     CLSID clsid;
     *     DWORD dwDrawAspect;
     *     SIZEL sizel;
     *     POINTL pointl;
     *     DWORD dwStatus;
     *     DWORD dwFullUserTypeName;
     *     DWORD dwSrcOfCopy;
     * } *POBJECTDESCRIPTOR
     * }
     */
    public static final AddressLayout POBJECTDESCRIPTOR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagOBJECTDESCRIPTOR {
     *     ULONG cbSize;
     *     CLSID clsid;
     *     DWORD dwDrawAspect;
     *     SIZEL sizel;
     *     POINTL pointl;
     *     DWORD dwStatus;
     *     DWORD dwFullUserTypeName;
     *     DWORD dwSrcOfCopy;
     * } *LPOBJECTDESCRIPTOR
     * }
     */
    public static final AddressLayout LPOBJECTDESCRIPTOR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagOBJECTDESCRIPTOR {
     *     ULONG cbSize;
     *     CLSID clsid;
     *     DWORD dwDrawAspect;
     *     SIZEL sizel;
     *     POINTL pointl;
     *     DWORD dwStatus;
     *     DWORD dwFullUserTypeName;
     *     DWORD dwSrcOfCopy;
     * } *PLINKSRCDESCRIPTOR
     * }
     */
    public static final AddressLayout PLINKSRCDESCRIPTOR = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagOBJECTDESCRIPTOR {
     *     ULONG cbSize;
     *     CLSID clsid;
     *     DWORD dwDrawAspect;
     *     SIZEL sizel;
     *     POINTL pointl;
     *     DWORD dwStatus;
     *     DWORD dwFullUserTypeName;
     *     DWORD dwSrcOfCopy;
     * } *LPLINKSRCDESCRIPTOR
     * }
     */
    public static final AddressLayout LPLINKSRCDESCRIPTOR = wgl_h.C_POINTER;

    private static class IOLETypes_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IOLETypes_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOLETypes_v0_0_c_ifspec
     * }
     */
    public static AddressLayout IOLETypes_v0_0_c_ifspec$layout() {
        return IOLETypes_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOLETypes_v0_0_c_ifspec
     * }
     */
    public static MemorySegment IOLETypes_v0_0_c_ifspec$segment() {
        return IOLETypes_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOLETypes_v0_0_c_ifspec
     * }
     */
    public static MemorySegment IOLETypes_v0_0_c_ifspec() {
        return IOLETypes_v0_0_c_ifspec$constants.SEGMENT.get(IOLETypes_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOLETypes_v0_0_c_ifspec
     * }
     */
    public static void IOLETypes_v0_0_c_ifspec(MemorySegment varValue) {
        IOLETypes_v0_0_c_ifspec$constants.SEGMENT.set(IOLETypes_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IOLETypes_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IOLETypes_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOLETypes_v0_0_s_ifspec
     * }
     */
    public static AddressLayout IOLETypes_v0_0_s_ifspec$layout() {
        return IOLETypes_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOLETypes_v0_0_s_ifspec
     * }
     */
    public static MemorySegment IOLETypes_v0_0_s_ifspec$segment() {
        return IOLETypes_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOLETypes_v0_0_s_ifspec
     * }
     */
    public static MemorySegment IOLETypes_v0_0_s_ifspec() {
        return IOLETypes_v0_0_s_ifspec$constants.SEGMENT.get(IOLETypes_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOLETypes_v0_0_s_ifspec
     * }
     */
    public static void IOLETypes_v0_0_s_ifspec(MemorySegment varValue) {
        IOLETypes_v0_0_s_ifspec$constants.SEGMENT.set(IOLETypes_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IOleWindow *LPOLEWINDOW
     * }
     */
    public static final AddressLayout LPOLEWINDOW = wgl_h.C_POINTER;

    private static class IID_IOleWindow$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IOleWindow").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleWindow
     * }
     */
    public static GroupLayout IID_IOleWindow$layout() {
        return IID_IOleWindow$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleWindow
     * }
     */
    public static MemorySegment IID_IOleWindow() {
        return IID_IOleWindow$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleWindow
     * }
     */
    public static void IID_IOleWindow(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IOleWindow$constants.SEGMENT, 0L, IID_IOleWindow$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IOleLink *LPOLELINK
     * }
     */
    public static final AddressLayout LPOLELINK = wgl_h.C_POINTER;
    private static final int OLEUPDATE_ALWAYS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagOLEUPDATE.OLEUPDATE_ALWAYS = 1
     * }
     */
    public static int OLEUPDATE_ALWAYS() {
        return OLEUPDATE_ALWAYS;
    }
    private static final int OLEUPDATE_ONCALL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagOLEUPDATE.OLEUPDATE_ONCALL = 3
     * }
     */
    public static int OLEUPDATE_ONCALL() {
        return OLEUPDATE_ONCALL;
    }
    /**
     * {@snippet lang=c :
     * typedef OLEUPDATE *LPOLEUPDATE
     * }
     */
    public static final AddressLayout LPOLEUPDATE = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef OLEUPDATE *POLEUPDATE
     * }
     */
    public static final AddressLayout POLEUPDATE = wgl_h.C_POINTER;
    private static final int OLELINKBIND_EVENIFCLASSDIFF = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagOLELINKBIND.OLELINKBIND_EVENIFCLASSDIFF = 1
     * }
     */
    public static int OLELINKBIND_EVENIFCLASSDIFF() {
        return OLELINKBIND_EVENIFCLASSDIFF;
    }

    private static class IID_IOleLink$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IOleLink").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleLink
     * }
     */
    public static GroupLayout IID_IOleLink$layout() {
        return IID_IOleLink$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleLink
     * }
     */
    public static MemorySegment IID_IOleLink() {
        return IID_IOleLink$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleLink
     * }
     */
    public static void IID_IOleLink(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IOleLink$constants.SEGMENT, 0L, IID_IOleLink$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IOleItemContainer *LPOLEITEMCONTAINER
     * }
     */
    public static final AddressLayout LPOLEITEMCONTAINER = wgl_h.C_POINTER;
    private static final int BINDSPEED_INDEFINITE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSPEED.BINDSPEED_INDEFINITE = 1
     * }
     */
    public static int BINDSPEED_INDEFINITE() {
        return BINDSPEED_INDEFINITE;
    }
    private static final int BINDSPEED_MODERATE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSPEED.BINDSPEED_MODERATE = 2
     * }
     */
    public static int BINDSPEED_MODERATE() {
        return BINDSPEED_MODERATE;
    }
    private static final int BINDSPEED_IMMEDIATE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSPEED.BINDSPEED_IMMEDIATE = 3
     * }
     */
    public static int BINDSPEED_IMMEDIATE() {
        return BINDSPEED_IMMEDIATE;
    }
    private static final int OLECONTF_EMBEDDINGS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagOLECONTF.OLECONTF_EMBEDDINGS = 1
     * }
     */
    public static int OLECONTF_EMBEDDINGS() {
        return OLECONTF_EMBEDDINGS;
    }
    private static final int OLECONTF_LINKS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagOLECONTF.OLECONTF_LINKS = 2
     * }
     */
    public static int OLECONTF_LINKS() {
        return OLECONTF_LINKS;
    }
    private static final int OLECONTF_OTHERS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagOLECONTF.OLECONTF_OTHERS = 4
     * }
     */
    public static int OLECONTF_OTHERS() {
        return OLECONTF_OTHERS;
    }
    private static final int OLECONTF_ONLYUSER = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagOLECONTF.OLECONTF_ONLYUSER = 8
     * }
     */
    public static int OLECONTF_ONLYUSER() {
        return OLECONTF_ONLYUSER;
    }
    private static final int OLECONTF_ONLYIFRUNNING = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagOLECONTF.OLECONTF_ONLYIFRUNNING = 16
     * }
     */
    public static int OLECONTF_ONLYIFRUNNING() {
        return OLECONTF_ONLYIFRUNNING;
    }

    private static class IID_IOleItemContainer$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IOleItemContainer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleItemContainer
     * }
     */
    public static GroupLayout IID_IOleItemContainer$layout() {
        return IID_IOleItemContainer$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleItemContainer
     * }
     */
    public static MemorySegment IID_IOleItemContainer() {
        return IID_IOleItemContainer$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleItemContainer
     * }
     */
    public static void IID_IOleItemContainer(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IOleItemContainer$constants.SEGMENT, 0L, IID_IOleItemContainer$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IOleInPlaceUIWindow *LPOLEINPLACEUIWINDOW
     * }
     */
    public static final AddressLayout LPOLEINPLACEUIWINDOW = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPRECT LPBORDERWIDTHS
     * }
     */
    public static final AddressLayout LPBORDERWIDTHS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPCRECT LPCBORDERWIDTHS
     * }
     */
    public static final AddressLayout LPCBORDERWIDTHS = wgl_h.C_POINTER;

    private static class IID_IOleInPlaceUIWindow$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IOleInPlaceUIWindow").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleInPlaceUIWindow
     * }
     */
    public static GroupLayout IID_IOleInPlaceUIWindow$layout() {
        return IID_IOleInPlaceUIWindow$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleInPlaceUIWindow
     * }
     */
    public static MemorySegment IID_IOleInPlaceUIWindow() {
        return IID_IOleInPlaceUIWindow$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleInPlaceUIWindow
     * }
     */
    public static void IID_IOleInPlaceUIWindow(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IOleInPlaceUIWindow$constants.SEGMENT, 0L, IID_IOleInPlaceUIWindow$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IOleInPlaceActiveObject *LPOLEINPLACEACTIVEOBJECT
     * }
     */
    public static final AddressLayout LPOLEINPLACEACTIVEOBJECT = wgl_h.C_POINTER;

    private static class IID_IOleInPlaceActiveObject$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IOleInPlaceActiveObject").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleInPlaceActiveObject
     * }
     */
    public static GroupLayout IID_IOleInPlaceActiveObject$layout() {
        return IID_IOleInPlaceActiveObject$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleInPlaceActiveObject
     * }
     */
    public static MemorySegment IID_IOleInPlaceActiveObject() {
        return IID_IOleInPlaceActiveObject$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleInPlaceActiveObject
     * }
     */
    public static void IID_IOleInPlaceActiveObject(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IOleInPlaceActiveObject$constants.SEGMENT, 0L, IID_IOleInPlaceActiveObject$constants.LAYOUT.byteSize());
    }

    private static class IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy(IOleInPlaceActiveObject *This)
     * }
     */
    public static FunctionDescriptor IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy$descriptor() {
        return IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy(IOleInPlaceActiveObject *This)
     * }
     */
    public static MethodHandle IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy$handle() {
        return IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy(IOleInPlaceActiveObject *This)
     * }
     */
    public static MemorySegment IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy$address() {
        return IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy(IOleInPlaceActiveObject *This)
     * }
     */
    public static int IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy(MemorySegment This) {
        var mh$ = IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub$descriptor() {
        return IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub$handle() {
        return IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub$address() {
        return IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IOleInPlaceActiveObject_RemoteResizeBorder_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IOleInPlaceActiveObject_RemoteResizeBorder_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_RemoteResizeBorder_Proxy(IOleInPlaceActiveObject *This, LPCRECT prcBorder, const IID *const riid, IOleInPlaceUIWindow *pUIWindow, BOOL fFrameWindow)
     * }
     */
    public static FunctionDescriptor IOleInPlaceActiveObject_RemoteResizeBorder_Proxy$descriptor() {
        return IOleInPlaceActiveObject_RemoteResizeBorder_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_RemoteResizeBorder_Proxy(IOleInPlaceActiveObject *This, LPCRECT prcBorder, const IID *const riid, IOleInPlaceUIWindow *pUIWindow, BOOL fFrameWindow)
     * }
     */
    public static MethodHandle IOleInPlaceActiveObject_RemoteResizeBorder_Proxy$handle() {
        return IOleInPlaceActiveObject_RemoteResizeBorder_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_RemoteResizeBorder_Proxy(IOleInPlaceActiveObject *This, LPCRECT prcBorder, const IID *const riid, IOleInPlaceUIWindow *pUIWindow, BOOL fFrameWindow)
     * }
     */
    public static MemorySegment IOleInPlaceActiveObject_RemoteResizeBorder_Proxy$address() {
        return IOleInPlaceActiveObject_RemoteResizeBorder_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_RemoteResizeBorder_Proxy(IOleInPlaceActiveObject *This, LPCRECT prcBorder, const IID *const riid, IOleInPlaceUIWindow *pUIWindow, BOOL fFrameWindow)
     * }
     */
    public static int IOleInPlaceActiveObject_RemoteResizeBorder_Proxy(MemorySegment This, MemorySegment prcBorder, MemorySegment riid, MemorySegment pUIWindow, int fFrameWindow) {
        var mh$ = IOleInPlaceActiveObject_RemoteResizeBorder_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IOleInPlaceActiveObject_RemoteResizeBorder_Proxy", This, prcBorder, riid, pUIWindow, fFrameWindow);
            }
            return (int)mh$.invokeExact(This, prcBorder, riid, pUIWindow, fFrameWindow);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IOleInPlaceActiveObject_RemoteResizeBorder_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IOleInPlaceActiveObject_RemoteResizeBorder_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IOleInPlaceActiveObject_RemoteResizeBorder_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IOleInPlaceActiveObject_RemoteResizeBorder_Stub$descriptor() {
        return IOleInPlaceActiveObject_RemoteResizeBorder_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IOleInPlaceActiveObject_RemoteResizeBorder_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IOleInPlaceActiveObject_RemoteResizeBorder_Stub$handle() {
        return IOleInPlaceActiveObject_RemoteResizeBorder_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IOleInPlaceActiveObject_RemoteResizeBorder_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IOleInPlaceActiveObject_RemoteResizeBorder_Stub$address() {
        return IOleInPlaceActiveObject_RemoteResizeBorder_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IOleInPlaceActiveObject_RemoteResizeBorder_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IOleInPlaceActiveObject_RemoteResizeBorder_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IOleInPlaceActiveObject_RemoteResizeBorder_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IOleInPlaceActiveObject_RemoteResizeBorder_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef IOleInPlaceFrame *LPOLEINPLACEFRAME
     * }
     */
    public static final AddressLayout LPOLEINPLACEFRAME = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagOIFI {
     *     UINT cb;
     *     BOOL fMDIApp;
     *     HWND hwndFrame;
     *     HACCEL haccel;
     *     UINT cAccelEntries;
     * } *LPOLEINPLACEFRAMEINFO
     * }
     */
    public static final AddressLayout LPOLEINPLACEFRAMEINFO = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagOleMenuGroupWidths {
     *     LONG width[6];
     * } *LPOLEMENUGROUPWIDTHS
     * }
     */
    public static final AddressLayout LPOLEMENUGROUPWIDTHS = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef HGLOBAL HOLEMENU
     * }
     */
    public static final AddressLayout HOLEMENU = wgl_h.C_POINTER;

    private static class IID_IOleInPlaceFrame$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IOleInPlaceFrame").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleInPlaceFrame
     * }
     */
    public static GroupLayout IID_IOleInPlaceFrame$layout() {
        return IID_IOleInPlaceFrame$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleInPlaceFrame
     * }
     */
    public static MemorySegment IID_IOleInPlaceFrame() {
        return IID_IOleInPlaceFrame$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleInPlaceFrame
     * }
     */
    public static void IID_IOleInPlaceFrame(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IOleInPlaceFrame$constants.SEGMENT, 0L, IID_IOleInPlaceFrame$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IOleInPlaceObject *LPOLEINPLACEOBJECT
     * }
     */
    public static final AddressLayout LPOLEINPLACEOBJECT = wgl_h.C_POINTER;

    private static class IID_IOleInPlaceObject$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IOleInPlaceObject").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleInPlaceObject
     * }
     */
    public static GroupLayout IID_IOleInPlaceObject$layout() {
        return IID_IOleInPlaceObject$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleInPlaceObject
     * }
     */
    public static MemorySegment IID_IOleInPlaceObject() {
        return IID_IOleInPlaceObject$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleInPlaceObject
     * }
     */
    public static void IID_IOleInPlaceObject(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IOleInPlaceObject$constants.SEGMENT, 0L, IID_IOleInPlaceObject$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IOleInPlaceSite *LPOLEINPLACESITE
     * }
     */
    public static final AddressLayout LPOLEINPLACESITE = wgl_h.C_POINTER;

    private static class IID_IOleInPlaceSite$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IOleInPlaceSite").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleInPlaceSite
     * }
     */
    public static GroupLayout IID_IOleInPlaceSite$layout() {
        return IID_IOleInPlaceSite$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleInPlaceSite
     * }
     */
    public static MemorySegment IID_IOleInPlaceSite() {
        return IID_IOleInPlaceSite$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleInPlaceSite
     * }
     */
    public static void IID_IOleInPlaceSite(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IOleInPlaceSite$constants.SEGMENT, 0L, IID_IOleInPlaceSite$constants.LAYOUT.byteSize());
    }

    private static class IID_IContinue$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IContinue").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IContinue
     * }
     */
    public static GroupLayout IID_IContinue$layout() {
        return IID_IContinue$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IContinue
     * }
     */
    public static MemorySegment IID_IContinue() {
        return IID_IContinue$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IContinue
     * }
     */
    public static void IID_IContinue(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IContinue$constants.SEGMENT, 0L, IID_IContinue$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IViewObject *LPVIEWOBJECT
     * }
     */
    public static final AddressLayout LPVIEWOBJECT = wgl_h.C_POINTER;

    private static class IID_IViewObject$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IViewObject").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IViewObject
     * }
     */
    public static GroupLayout IID_IViewObject$layout() {
        return IID_IViewObject$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IViewObject
     * }
     */
    public static MemorySegment IID_IViewObject() {
        return IID_IViewObject$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IViewObject
     * }
     */
    public static void IID_IViewObject(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IViewObject$constants.SEGMENT, 0L, IID_IViewObject$constants.LAYOUT.byteSize());
    }

    private static class IViewObject_RemoteDraw_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IViewObject_RemoteDraw_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IViewObject_RemoteDraw_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, IContinue *pContinue)
     * }
     */
    public static FunctionDescriptor IViewObject_RemoteDraw_Proxy$descriptor() {
        return IViewObject_RemoteDraw_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IViewObject_RemoteDraw_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, IContinue *pContinue)
     * }
     */
    public static MethodHandle IViewObject_RemoteDraw_Proxy$handle() {
        return IViewObject_RemoteDraw_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IViewObject_RemoteDraw_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, IContinue *pContinue)
     * }
     */
    public static MemorySegment IViewObject_RemoteDraw_Proxy$address() {
        return IViewObject_RemoteDraw_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IViewObject_RemoteDraw_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, IContinue *pContinue)
     * }
     */
    public static int IViewObject_RemoteDraw_Proxy(MemorySegment This, int dwDrawAspect, int lindex, long pvAspect, MemorySegment ptd, MemorySegment hdcTargetDev, MemorySegment hdcDraw, MemorySegment lprcBounds, MemorySegment lprcWBounds, MemorySegment pContinue) {
        var mh$ = IViewObject_RemoteDraw_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IViewObject_RemoteDraw_Proxy", This, dwDrawAspect, lindex, pvAspect, ptd, hdcTargetDev, hdcDraw, lprcBounds, lprcWBounds, pContinue);
            }
            return (int)mh$.invokeExact(This, dwDrawAspect, lindex, pvAspect, ptd, hdcTargetDev, hdcDraw, lprcBounds, lprcWBounds, pContinue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IViewObject_RemoteDraw_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IViewObject_RemoteDraw_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IViewObject_RemoteDraw_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IViewObject_RemoteDraw_Stub$descriptor() {
        return IViewObject_RemoteDraw_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IViewObject_RemoteDraw_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IViewObject_RemoteDraw_Stub$handle() {
        return IViewObject_RemoteDraw_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IViewObject_RemoteDraw_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IViewObject_RemoteDraw_Stub$address() {
        return IViewObject_RemoteDraw_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IViewObject_RemoteDraw_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IViewObject_RemoteDraw_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IViewObject_RemoteDraw_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IViewObject_RemoteDraw_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IViewObject_RemoteGetColorSet_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IViewObject_RemoteGetColorSet_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IViewObject_RemoteGetColorSet_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE *ptd, ULONG_PTR hicTargetDev, LOGPALETTE **ppColorSet)
     * }
     */
    public static FunctionDescriptor IViewObject_RemoteGetColorSet_Proxy$descriptor() {
        return IViewObject_RemoteGetColorSet_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IViewObject_RemoteGetColorSet_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE *ptd, ULONG_PTR hicTargetDev, LOGPALETTE **ppColorSet)
     * }
     */
    public static MethodHandle IViewObject_RemoteGetColorSet_Proxy$handle() {
        return IViewObject_RemoteGetColorSet_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IViewObject_RemoteGetColorSet_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE *ptd, ULONG_PTR hicTargetDev, LOGPALETTE **ppColorSet)
     * }
     */
    public static MemorySegment IViewObject_RemoteGetColorSet_Proxy$address() {
        return IViewObject_RemoteGetColorSet_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IViewObject_RemoteGetColorSet_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE *ptd, ULONG_PTR hicTargetDev, LOGPALETTE **ppColorSet)
     * }
     */
    public static int IViewObject_RemoteGetColorSet_Proxy(MemorySegment This, int dwDrawAspect, int lindex, long pvAspect, MemorySegment ptd, long hicTargetDev, MemorySegment ppColorSet) {
        var mh$ = IViewObject_RemoteGetColorSet_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IViewObject_RemoteGetColorSet_Proxy", This, dwDrawAspect, lindex, pvAspect, ptd, hicTargetDev, ppColorSet);
            }
            return (int)mh$.invokeExact(This, dwDrawAspect, lindex, pvAspect, ptd, hicTargetDev, ppColorSet);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IViewObject_RemoteGetColorSet_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IViewObject_RemoteGetColorSet_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IViewObject_RemoteGetColorSet_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IViewObject_RemoteGetColorSet_Stub$descriptor() {
        return IViewObject_RemoteGetColorSet_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IViewObject_RemoteGetColorSet_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IViewObject_RemoteGetColorSet_Stub$handle() {
        return IViewObject_RemoteGetColorSet_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IViewObject_RemoteGetColorSet_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IViewObject_RemoteGetColorSet_Stub$address() {
        return IViewObject_RemoteGetColorSet_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IViewObject_RemoteGetColorSet_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IViewObject_RemoteGetColorSet_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IViewObject_RemoteGetColorSet_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IViewObject_RemoteGetColorSet_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IViewObject_RemoteFreeze_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IViewObject_RemoteFreeze_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IViewObject_RemoteFreeze_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DWORD *pdwFreeze)
     * }
     */
    public static FunctionDescriptor IViewObject_RemoteFreeze_Proxy$descriptor() {
        return IViewObject_RemoteFreeze_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IViewObject_RemoteFreeze_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DWORD *pdwFreeze)
     * }
     */
    public static MethodHandle IViewObject_RemoteFreeze_Proxy$handle() {
        return IViewObject_RemoteFreeze_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IViewObject_RemoteFreeze_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DWORD *pdwFreeze)
     * }
     */
    public static MemorySegment IViewObject_RemoteFreeze_Proxy$address() {
        return IViewObject_RemoteFreeze_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IViewObject_RemoteFreeze_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DWORD *pdwFreeze)
     * }
     */
    public static int IViewObject_RemoteFreeze_Proxy(MemorySegment This, int dwDrawAspect, int lindex, long pvAspect, MemorySegment pdwFreeze) {
        var mh$ = IViewObject_RemoteFreeze_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IViewObject_RemoteFreeze_Proxy", This, dwDrawAspect, lindex, pvAspect, pdwFreeze);
            }
            return (int)mh$.invokeExact(This, dwDrawAspect, lindex, pvAspect, pdwFreeze);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IViewObject_RemoteFreeze_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IViewObject_RemoteFreeze_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IViewObject_RemoteFreeze_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IViewObject_RemoteFreeze_Stub$descriptor() {
        return IViewObject_RemoteFreeze_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IViewObject_RemoteFreeze_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IViewObject_RemoteFreeze_Stub$handle() {
        return IViewObject_RemoteFreeze_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IViewObject_RemoteFreeze_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IViewObject_RemoteFreeze_Stub$address() {
        return IViewObject_RemoteFreeze_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IViewObject_RemoteFreeze_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IViewObject_RemoteFreeze_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IViewObject_RemoteFreeze_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IViewObject_RemoteFreeze_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IViewObject_RemoteGetAdvise_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IViewObject_RemoteGetAdvise_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IViewObject_RemoteGetAdvise_Proxy(IViewObject *This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink)
     * }
     */
    public static FunctionDescriptor IViewObject_RemoteGetAdvise_Proxy$descriptor() {
        return IViewObject_RemoteGetAdvise_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IViewObject_RemoteGetAdvise_Proxy(IViewObject *This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink)
     * }
     */
    public static MethodHandle IViewObject_RemoteGetAdvise_Proxy$handle() {
        return IViewObject_RemoteGetAdvise_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IViewObject_RemoteGetAdvise_Proxy(IViewObject *This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink)
     * }
     */
    public static MemorySegment IViewObject_RemoteGetAdvise_Proxy$address() {
        return IViewObject_RemoteGetAdvise_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IViewObject_RemoteGetAdvise_Proxy(IViewObject *This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink)
     * }
     */
    public static int IViewObject_RemoteGetAdvise_Proxy(MemorySegment This, MemorySegment pAspects, MemorySegment pAdvf, MemorySegment ppAdvSink) {
        var mh$ = IViewObject_RemoteGetAdvise_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IViewObject_RemoteGetAdvise_Proxy", This, pAspects, pAdvf, ppAdvSink);
            }
            return (int)mh$.invokeExact(This, pAspects, pAdvf, ppAdvSink);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IViewObject_RemoteGetAdvise_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IViewObject_RemoteGetAdvise_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IViewObject_RemoteGetAdvise_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IViewObject_RemoteGetAdvise_Stub$descriptor() {
        return IViewObject_RemoteGetAdvise_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IViewObject_RemoteGetAdvise_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IViewObject_RemoteGetAdvise_Stub$handle() {
        return IViewObject_RemoteGetAdvise_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IViewObject_RemoteGetAdvise_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IViewObject_RemoteGetAdvise_Stub$address() {
        return IViewObject_RemoteGetAdvise_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IViewObject_RemoteGetAdvise_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IViewObject_RemoteGetAdvise_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IViewObject_RemoteGetAdvise_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IViewObject_RemoteGetAdvise_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef IViewObject2 *LPVIEWOBJECT2
     * }
     */
    public static final AddressLayout LPVIEWOBJECT2 = wgl_h.C_POINTER;

    private static class IID_IViewObject2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IViewObject2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IViewObject2
     * }
     */
    public static GroupLayout IID_IViewObject2$layout() {
        return IID_IViewObject2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IViewObject2
     * }
     */
    public static MemorySegment IID_IViewObject2() {
        return IID_IViewObject2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IViewObject2
     * }
     */
    public static void IID_IViewObject2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IViewObject2$constants.SEGMENT, 0L, IID_IViewObject2$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IDropSource *LPDROPSOURCE
     * }
     */
    public static final AddressLayout LPDROPSOURCE = wgl_h.C_POINTER;

    private static class IID_IDropSource$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IDropSource").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDropSource
     * }
     */
    public static GroupLayout IID_IDropSource$layout() {
        return IID_IDropSource$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDropSource
     * }
     */
    public static MemorySegment IID_IDropSource() {
        return IID_IDropSource$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDropSource
     * }
     */
    public static void IID_IDropSource(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IDropSource$constants.SEGMENT, 0L, IID_IDropSource$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IDropTarget *LPDROPTARGET
     * }
     */
    public static final AddressLayout LPDROPTARGET = wgl_h.C_POINTER;

    private static class IID_IDropTarget$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IDropTarget").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDropTarget
     * }
     */
    public static GroupLayout IID_IDropTarget$layout() {
        return IID_IDropTarget$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDropTarget
     * }
     */
    public static MemorySegment IID_IDropTarget() {
        return IID_IDropTarget$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDropTarget
     * }
     */
    public static void IID_IDropTarget(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IDropTarget$constants.SEGMENT, 0L, IID_IDropTarget$constants.LAYOUT.byteSize());
    }

    private static class IID_IDropSourceNotify$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IDropSourceNotify").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDropSourceNotify
     * }
     */
    public static GroupLayout IID_IDropSourceNotify$layout() {
        return IID_IDropSourceNotify$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDropSourceNotify
     * }
     */
    public static MemorySegment IID_IDropSourceNotify() {
        return IID_IDropSourceNotify$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDropSourceNotify
     * }
     */
    public static void IID_IDropSourceNotify(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IDropSourceNotify$constants.SEGMENT, 0L, IID_IDropSourceNotify$constants.LAYOUT.byteSize());
    }

    private static class IID_IEnterpriseDropTarget$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IEnterpriseDropTarget").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnterpriseDropTarget
     * }
     */
    public static GroupLayout IID_IEnterpriseDropTarget$layout() {
        return IID_IEnterpriseDropTarget$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnterpriseDropTarget
     * }
     */
    public static MemorySegment IID_IEnterpriseDropTarget() {
        return IID_IEnterpriseDropTarget$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnterpriseDropTarget
     * }
     */
    public static void IID_IEnterpriseDropTarget(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IEnterpriseDropTarget$constants.SEGMENT, 0L, IID_IEnterpriseDropTarget$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec$layout() {
        return __MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec$segment() {
        return __MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec() {
        return __MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec$layout() {
        return __MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec$segment() {
        return __MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec() {
        return __MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IEnumOLEVERB *LPENUMOLEVERB
     * }
     */
    public static final AddressLayout LPENUMOLEVERB = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagOLEVERB {
     *     LONG lVerb;
     *     LPOLESTR lpszVerbName;
     *     DWORD fuFlags;
     *     DWORD grfAttribs;
     * } *LPOLEVERB
     * }
     */
    public static final AddressLayout LPOLEVERB = wgl_h.C_POINTER;
    private static final int OLEVERBATTRIB_NEVERDIRTIES = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagOLEVERBATTRIB.OLEVERBATTRIB_NEVERDIRTIES = 1
     * }
     */
    public static int OLEVERBATTRIB_NEVERDIRTIES() {
        return OLEVERBATTRIB_NEVERDIRTIES;
    }
    private static final int OLEVERBATTRIB_ONCONTAINERMENU = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagOLEVERBATTRIB.OLEVERBATTRIB_ONCONTAINERMENU = 2
     * }
     */
    public static int OLEVERBATTRIB_ONCONTAINERMENU() {
        return OLEVERBATTRIB_ONCONTAINERMENU;
    }

    private static class IID_IEnumOLEVERB$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IEnumOLEVERB").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumOLEVERB
     * }
     */
    public static GroupLayout IID_IEnumOLEVERB$layout() {
        return IID_IEnumOLEVERB$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumOLEVERB
     * }
     */
    public static MemorySegment IID_IEnumOLEVERB() {
        return IID_IEnumOLEVERB$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumOLEVERB
     * }
     */
    public static void IID_IEnumOLEVERB(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IEnumOLEVERB$constants.SEGMENT, 0L, IID_IEnumOLEVERB$constants.LAYOUT.byteSize());
    }

    private static class IEnumOLEVERB_RemoteNext_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumOLEVERB_RemoteNext_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumOLEVERB_RemoteNext_Proxy(IEnumOLEVERB *This, ULONG celt, LPOLEVERB rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumOLEVERB_RemoteNext_Proxy$descriptor() {
        return IEnumOLEVERB_RemoteNext_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumOLEVERB_RemoteNext_Proxy(IEnumOLEVERB *This, ULONG celt, LPOLEVERB rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumOLEVERB_RemoteNext_Proxy$handle() {
        return IEnumOLEVERB_RemoteNext_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumOLEVERB_RemoteNext_Proxy(IEnumOLEVERB *This, ULONG celt, LPOLEVERB rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumOLEVERB_RemoteNext_Proxy$address() {
        return IEnumOLEVERB_RemoteNext_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumOLEVERB_RemoteNext_Proxy(IEnumOLEVERB *This, ULONG celt, LPOLEVERB rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumOLEVERB_RemoteNext_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumOLEVERB_RemoteNext_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumOLEVERB_RemoteNext_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumOLEVERB_RemoteNext_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumOLEVERB_RemoteNext_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IEnumOLEVERB_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IEnumOLEVERB_RemoteNext_Stub$descriptor() {
        return IEnumOLEVERB_RemoteNext_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IEnumOLEVERB_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IEnumOLEVERB_RemoteNext_Stub$handle() {
        return IEnumOLEVERB_RemoteNext_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IEnumOLEVERB_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IEnumOLEVERB_RemoteNext_Stub$address() {
        return IEnumOLEVERB_RemoteNext_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IEnumOLEVERB_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IEnumOLEVERB_RemoteNext_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IEnumOLEVERB_RemoteNext_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumOLEVERB_RemoteNext_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec$layout() {
        return __MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec$segment() {
        return __MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec() {
        return __MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec$layout() {
        return __MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec$segment() {
        return __MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec() {
        return __MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class HACCEL_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HACCEL_UserSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long HACCEL_UserSize(unsigned long *, unsigned long, HACCEL *)
     * }
     */
    public static FunctionDescriptor HACCEL_UserSize$descriptor() {
        return HACCEL_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long HACCEL_UserSize(unsigned long *, unsigned long, HACCEL *)
     * }
     */
    public static MethodHandle HACCEL_UserSize$handle() {
        return HACCEL_UserSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long HACCEL_UserSize(unsigned long *, unsigned long, HACCEL *)
     * }
     */
    public static MemorySegment HACCEL_UserSize$address() {
        return HACCEL_UserSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long HACCEL_UserSize(unsigned long *, unsigned long, HACCEL *)
     * }
     */
    public static int HACCEL_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = HACCEL_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HACCEL_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HACCEL_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HACCEL_UserMarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HACCEL_UserMarshal(unsigned long *, unsigned char *, HACCEL *)
     * }
     */
    public static FunctionDescriptor HACCEL_UserMarshal$descriptor() {
        return HACCEL_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HACCEL_UserMarshal(unsigned long *, unsigned char *, HACCEL *)
     * }
     */
    public static MethodHandle HACCEL_UserMarshal$handle() {
        return HACCEL_UserMarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HACCEL_UserMarshal(unsigned long *, unsigned char *, HACCEL *)
     * }
     */
    public static MemorySegment HACCEL_UserMarshal$address() {
        return HACCEL_UserMarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HACCEL_UserMarshal(unsigned long *, unsigned char *, HACCEL *)
     * }
     */
    public static MemorySegment HACCEL_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HACCEL_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HACCEL_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HACCEL_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HACCEL_UserUnmarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HACCEL_UserUnmarshal(unsigned long *, unsigned char *, HACCEL *)
     * }
     */
    public static FunctionDescriptor HACCEL_UserUnmarshal$descriptor() {
        return HACCEL_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HACCEL_UserUnmarshal(unsigned long *, unsigned char *, HACCEL *)
     * }
     */
    public static MethodHandle HACCEL_UserUnmarshal$handle() {
        return HACCEL_UserUnmarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HACCEL_UserUnmarshal(unsigned long *, unsigned char *, HACCEL *)
     * }
     */
    public static MemorySegment HACCEL_UserUnmarshal$address() {
        return HACCEL_UserUnmarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HACCEL_UserUnmarshal(unsigned long *, unsigned char *, HACCEL *)
     * }
     */
    public static MemorySegment HACCEL_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HACCEL_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HACCEL_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HACCEL_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HACCEL_UserFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void HACCEL_UserFree(unsigned long *, HACCEL *)
     * }
     */
    public static FunctionDescriptor HACCEL_UserFree$descriptor() {
        return HACCEL_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void HACCEL_UserFree(unsigned long *, HACCEL *)
     * }
     */
    public static MethodHandle HACCEL_UserFree$handle() {
        return HACCEL_UserFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void HACCEL_UserFree(unsigned long *, HACCEL *)
     * }
     */
    public static MemorySegment HACCEL_UserFree$address() {
        return HACCEL_UserFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void HACCEL_UserFree(unsigned long *, HACCEL *)
     * }
     */
    public static void HACCEL_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = HACCEL_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HACCEL_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HGLOBAL_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HGLOBAL_UserSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long HGLOBAL_UserSize(unsigned long *, unsigned long, HGLOBAL *)
     * }
     */
    public static FunctionDescriptor HGLOBAL_UserSize$descriptor() {
        return HGLOBAL_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long HGLOBAL_UserSize(unsigned long *, unsigned long, HGLOBAL *)
     * }
     */
    public static MethodHandle HGLOBAL_UserSize$handle() {
        return HGLOBAL_UserSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long HGLOBAL_UserSize(unsigned long *, unsigned long, HGLOBAL *)
     * }
     */
    public static MemorySegment HGLOBAL_UserSize$address() {
        return HGLOBAL_UserSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long HGLOBAL_UserSize(unsigned long *, unsigned long, HGLOBAL *)
     * }
     */
    public static int HGLOBAL_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = HGLOBAL_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HGLOBAL_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HGLOBAL_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HGLOBAL_UserMarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HGLOBAL_UserMarshal(unsigned long *, unsigned char *, HGLOBAL *)
     * }
     */
    public static FunctionDescriptor HGLOBAL_UserMarshal$descriptor() {
        return HGLOBAL_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HGLOBAL_UserMarshal(unsigned long *, unsigned char *, HGLOBAL *)
     * }
     */
    public static MethodHandle HGLOBAL_UserMarshal$handle() {
        return HGLOBAL_UserMarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HGLOBAL_UserMarshal(unsigned long *, unsigned char *, HGLOBAL *)
     * }
     */
    public static MemorySegment HGLOBAL_UserMarshal$address() {
        return HGLOBAL_UserMarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HGLOBAL_UserMarshal(unsigned long *, unsigned char *, HGLOBAL *)
     * }
     */
    public static MemorySegment HGLOBAL_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HGLOBAL_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HGLOBAL_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HGLOBAL_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HGLOBAL_UserUnmarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HGLOBAL_UserUnmarshal(unsigned long *, unsigned char *, HGLOBAL *)
     * }
     */
    public static FunctionDescriptor HGLOBAL_UserUnmarshal$descriptor() {
        return HGLOBAL_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HGLOBAL_UserUnmarshal(unsigned long *, unsigned char *, HGLOBAL *)
     * }
     */
    public static MethodHandle HGLOBAL_UserUnmarshal$handle() {
        return HGLOBAL_UserUnmarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HGLOBAL_UserUnmarshal(unsigned long *, unsigned char *, HGLOBAL *)
     * }
     */
    public static MemorySegment HGLOBAL_UserUnmarshal$address() {
        return HGLOBAL_UserUnmarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HGLOBAL_UserUnmarshal(unsigned long *, unsigned char *, HGLOBAL *)
     * }
     */
    public static MemorySegment HGLOBAL_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HGLOBAL_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HGLOBAL_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HGLOBAL_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HGLOBAL_UserFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void HGLOBAL_UserFree(unsigned long *, HGLOBAL *)
     * }
     */
    public static FunctionDescriptor HGLOBAL_UserFree$descriptor() {
        return HGLOBAL_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void HGLOBAL_UserFree(unsigned long *, HGLOBAL *)
     * }
     */
    public static MethodHandle HGLOBAL_UserFree$handle() {
        return HGLOBAL_UserFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void HGLOBAL_UserFree(unsigned long *, HGLOBAL *)
     * }
     */
    public static MemorySegment HGLOBAL_UserFree$address() {
        return HGLOBAL_UserFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void HGLOBAL_UserFree(unsigned long *, HGLOBAL *)
     * }
     */
    public static void HGLOBAL_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = HGLOBAL_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HGLOBAL_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HMENU_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HMENU_UserSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long HMENU_UserSize(unsigned long *, unsigned long, HMENU *)
     * }
     */
    public static FunctionDescriptor HMENU_UserSize$descriptor() {
        return HMENU_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long HMENU_UserSize(unsigned long *, unsigned long, HMENU *)
     * }
     */
    public static MethodHandle HMENU_UserSize$handle() {
        return HMENU_UserSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long HMENU_UserSize(unsigned long *, unsigned long, HMENU *)
     * }
     */
    public static MemorySegment HMENU_UserSize$address() {
        return HMENU_UserSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long HMENU_UserSize(unsigned long *, unsigned long, HMENU *)
     * }
     */
    public static int HMENU_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = HMENU_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HMENU_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HMENU_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HMENU_UserMarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HMENU_UserMarshal(unsigned long *, unsigned char *, HMENU *)
     * }
     */
    public static FunctionDescriptor HMENU_UserMarshal$descriptor() {
        return HMENU_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HMENU_UserMarshal(unsigned long *, unsigned char *, HMENU *)
     * }
     */
    public static MethodHandle HMENU_UserMarshal$handle() {
        return HMENU_UserMarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HMENU_UserMarshal(unsigned long *, unsigned char *, HMENU *)
     * }
     */
    public static MemorySegment HMENU_UserMarshal$address() {
        return HMENU_UserMarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HMENU_UserMarshal(unsigned long *, unsigned char *, HMENU *)
     * }
     */
    public static MemorySegment HMENU_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HMENU_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HMENU_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HMENU_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HMENU_UserUnmarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HMENU_UserUnmarshal(unsigned long *, unsigned char *, HMENU *)
     * }
     */
    public static FunctionDescriptor HMENU_UserUnmarshal$descriptor() {
        return HMENU_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HMENU_UserUnmarshal(unsigned long *, unsigned char *, HMENU *)
     * }
     */
    public static MethodHandle HMENU_UserUnmarshal$handle() {
        return HMENU_UserUnmarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HMENU_UserUnmarshal(unsigned long *, unsigned char *, HMENU *)
     * }
     */
    public static MemorySegment HMENU_UserUnmarshal$address() {
        return HMENU_UserUnmarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HMENU_UserUnmarshal(unsigned long *, unsigned char *, HMENU *)
     * }
     */
    public static MemorySegment HMENU_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HMENU_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HMENU_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HMENU_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HMENU_UserFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void HMENU_UserFree(unsigned long *, HMENU *)
     * }
     */
    public static FunctionDescriptor HMENU_UserFree$descriptor() {
        return HMENU_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void HMENU_UserFree(unsigned long *, HMENU *)
     * }
     */
    public static MethodHandle HMENU_UserFree$handle() {
        return HMENU_UserFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void HMENU_UserFree(unsigned long *, HMENU *)
     * }
     */
    public static MemorySegment HMENU_UserFree$address() {
        return HMENU_UserFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void HMENU_UserFree(unsigned long *, HMENU *)
     * }
     */
    public static void HMENU_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = HMENU_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HMENU_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HWND_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HWND_UserSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long HWND_UserSize(unsigned long *, unsigned long, HWND *)
     * }
     */
    public static FunctionDescriptor HWND_UserSize$descriptor() {
        return HWND_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long HWND_UserSize(unsigned long *, unsigned long, HWND *)
     * }
     */
    public static MethodHandle HWND_UserSize$handle() {
        return HWND_UserSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long HWND_UserSize(unsigned long *, unsigned long, HWND *)
     * }
     */
    public static MemorySegment HWND_UserSize$address() {
        return HWND_UserSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long HWND_UserSize(unsigned long *, unsigned long, HWND *)
     * }
     */
    public static int HWND_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = HWND_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HWND_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HWND_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HWND_UserMarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HWND_UserMarshal(unsigned long *, unsigned char *, HWND *)
     * }
     */
    public static FunctionDescriptor HWND_UserMarshal$descriptor() {
        return HWND_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HWND_UserMarshal(unsigned long *, unsigned char *, HWND *)
     * }
     */
    public static MethodHandle HWND_UserMarshal$handle() {
        return HWND_UserMarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HWND_UserMarshal(unsigned long *, unsigned char *, HWND *)
     * }
     */
    public static MemorySegment HWND_UserMarshal$address() {
        return HWND_UserMarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HWND_UserMarshal(unsigned long *, unsigned char *, HWND *)
     * }
     */
    public static MemorySegment HWND_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HWND_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HWND_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HWND_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HWND_UserUnmarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HWND_UserUnmarshal(unsigned long *, unsigned char *, HWND *)
     * }
     */
    public static FunctionDescriptor HWND_UserUnmarshal$descriptor() {
        return HWND_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HWND_UserUnmarshal(unsigned long *, unsigned char *, HWND *)
     * }
     */
    public static MethodHandle HWND_UserUnmarshal$handle() {
        return HWND_UserUnmarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HWND_UserUnmarshal(unsigned long *, unsigned char *, HWND *)
     * }
     */
    public static MemorySegment HWND_UserUnmarshal$address() {
        return HWND_UserUnmarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HWND_UserUnmarshal(unsigned long *, unsigned char *, HWND *)
     * }
     */
    public static MemorySegment HWND_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HWND_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HWND_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HWND_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HWND_UserFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void HWND_UserFree(unsigned long *, HWND *)
     * }
     */
    public static FunctionDescriptor HWND_UserFree$descriptor() {
        return HWND_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void HWND_UserFree(unsigned long *, HWND *)
     * }
     */
    public static MethodHandle HWND_UserFree$handle() {
        return HWND_UserFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void HWND_UserFree(unsigned long *, HWND *)
     * }
     */
    public static MemorySegment HWND_UserFree$address() {
        return HWND_UserFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void HWND_UserFree(unsigned long *, HWND *)
     * }
     */
    public static void HWND_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = HWND_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HWND_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HACCEL_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HACCEL_UserSize64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long HACCEL_UserSize64(unsigned long *, unsigned long, HACCEL *)
     * }
     */
    public static FunctionDescriptor HACCEL_UserSize64$descriptor() {
        return HACCEL_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long HACCEL_UserSize64(unsigned long *, unsigned long, HACCEL *)
     * }
     */
    public static MethodHandle HACCEL_UserSize64$handle() {
        return HACCEL_UserSize64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long HACCEL_UserSize64(unsigned long *, unsigned long, HACCEL *)
     * }
     */
    public static MemorySegment HACCEL_UserSize64$address() {
        return HACCEL_UserSize64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long HACCEL_UserSize64(unsigned long *, unsigned long, HACCEL *)
     * }
     */
    public static int HACCEL_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = HACCEL_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HACCEL_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HACCEL_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HACCEL_UserMarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HACCEL_UserMarshal64(unsigned long *, unsigned char *, HACCEL *)
     * }
     */
    public static FunctionDescriptor HACCEL_UserMarshal64$descriptor() {
        return HACCEL_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HACCEL_UserMarshal64(unsigned long *, unsigned char *, HACCEL *)
     * }
     */
    public static MethodHandle HACCEL_UserMarshal64$handle() {
        return HACCEL_UserMarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HACCEL_UserMarshal64(unsigned long *, unsigned char *, HACCEL *)
     * }
     */
    public static MemorySegment HACCEL_UserMarshal64$address() {
        return HACCEL_UserMarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HACCEL_UserMarshal64(unsigned long *, unsigned char *, HACCEL *)
     * }
     */
    public static MemorySegment HACCEL_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HACCEL_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HACCEL_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HACCEL_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HACCEL_UserUnmarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HACCEL_UserUnmarshal64(unsigned long *, unsigned char *, HACCEL *)
     * }
     */
    public static FunctionDescriptor HACCEL_UserUnmarshal64$descriptor() {
        return HACCEL_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HACCEL_UserUnmarshal64(unsigned long *, unsigned char *, HACCEL *)
     * }
     */
    public static MethodHandle HACCEL_UserUnmarshal64$handle() {
        return HACCEL_UserUnmarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HACCEL_UserUnmarshal64(unsigned long *, unsigned char *, HACCEL *)
     * }
     */
    public static MemorySegment HACCEL_UserUnmarshal64$address() {
        return HACCEL_UserUnmarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HACCEL_UserUnmarshal64(unsigned long *, unsigned char *, HACCEL *)
     * }
     */
    public static MemorySegment HACCEL_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HACCEL_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HACCEL_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HACCEL_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HACCEL_UserFree64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void HACCEL_UserFree64(unsigned long *, HACCEL *)
     * }
     */
    public static FunctionDescriptor HACCEL_UserFree64$descriptor() {
        return HACCEL_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void HACCEL_UserFree64(unsigned long *, HACCEL *)
     * }
     */
    public static MethodHandle HACCEL_UserFree64$handle() {
        return HACCEL_UserFree64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void HACCEL_UserFree64(unsigned long *, HACCEL *)
     * }
     */
    public static MemorySegment HACCEL_UserFree64$address() {
        return HACCEL_UserFree64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void HACCEL_UserFree64(unsigned long *, HACCEL *)
     * }
     */
    public static void HACCEL_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = HACCEL_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HACCEL_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HGLOBAL_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HGLOBAL_UserSize64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long HGLOBAL_UserSize64(unsigned long *, unsigned long, HGLOBAL *)
     * }
     */
    public static FunctionDescriptor HGLOBAL_UserSize64$descriptor() {
        return HGLOBAL_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long HGLOBAL_UserSize64(unsigned long *, unsigned long, HGLOBAL *)
     * }
     */
    public static MethodHandle HGLOBAL_UserSize64$handle() {
        return HGLOBAL_UserSize64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long HGLOBAL_UserSize64(unsigned long *, unsigned long, HGLOBAL *)
     * }
     */
    public static MemorySegment HGLOBAL_UserSize64$address() {
        return HGLOBAL_UserSize64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long HGLOBAL_UserSize64(unsigned long *, unsigned long, HGLOBAL *)
     * }
     */
    public static int HGLOBAL_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = HGLOBAL_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HGLOBAL_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HGLOBAL_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HGLOBAL_UserMarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HGLOBAL_UserMarshal64(unsigned long *, unsigned char *, HGLOBAL *)
     * }
     */
    public static FunctionDescriptor HGLOBAL_UserMarshal64$descriptor() {
        return HGLOBAL_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HGLOBAL_UserMarshal64(unsigned long *, unsigned char *, HGLOBAL *)
     * }
     */
    public static MethodHandle HGLOBAL_UserMarshal64$handle() {
        return HGLOBAL_UserMarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HGLOBAL_UserMarshal64(unsigned long *, unsigned char *, HGLOBAL *)
     * }
     */
    public static MemorySegment HGLOBAL_UserMarshal64$address() {
        return HGLOBAL_UserMarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HGLOBAL_UserMarshal64(unsigned long *, unsigned char *, HGLOBAL *)
     * }
     */
    public static MemorySegment HGLOBAL_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HGLOBAL_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HGLOBAL_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HGLOBAL_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HGLOBAL_UserUnmarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HGLOBAL_UserUnmarshal64(unsigned long *, unsigned char *, HGLOBAL *)
     * }
     */
    public static FunctionDescriptor HGLOBAL_UserUnmarshal64$descriptor() {
        return HGLOBAL_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HGLOBAL_UserUnmarshal64(unsigned long *, unsigned char *, HGLOBAL *)
     * }
     */
    public static MethodHandle HGLOBAL_UserUnmarshal64$handle() {
        return HGLOBAL_UserUnmarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HGLOBAL_UserUnmarshal64(unsigned long *, unsigned char *, HGLOBAL *)
     * }
     */
    public static MemorySegment HGLOBAL_UserUnmarshal64$address() {
        return HGLOBAL_UserUnmarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HGLOBAL_UserUnmarshal64(unsigned long *, unsigned char *, HGLOBAL *)
     * }
     */
    public static MemorySegment HGLOBAL_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HGLOBAL_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HGLOBAL_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HGLOBAL_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HGLOBAL_UserFree64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void HGLOBAL_UserFree64(unsigned long *, HGLOBAL *)
     * }
     */
    public static FunctionDescriptor HGLOBAL_UserFree64$descriptor() {
        return HGLOBAL_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void HGLOBAL_UserFree64(unsigned long *, HGLOBAL *)
     * }
     */
    public static MethodHandle HGLOBAL_UserFree64$handle() {
        return HGLOBAL_UserFree64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void HGLOBAL_UserFree64(unsigned long *, HGLOBAL *)
     * }
     */
    public static MemorySegment HGLOBAL_UserFree64$address() {
        return HGLOBAL_UserFree64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void HGLOBAL_UserFree64(unsigned long *, HGLOBAL *)
     * }
     */
    public static void HGLOBAL_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = HGLOBAL_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HGLOBAL_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HMENU_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HMENU_UserSize64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long HMENU_UserSize64(unsigned long *, unsigned long, HMENU *)
     * }
     */
    public static FunctionDescriptor HMENU_UserSize64$descriptor() {
        return HMENU_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long HMENU_UserSize64(unsigned long *, unsigned long, HMENU *)
     * }
     */
    public static MethodHandle HMENU_UserSize64$handle() {
        return HMENU_UserSize64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long HMENU_UserSize64(unsigned long *, unsigned long, HMENU *)
     * }
     */
    public static MemorySegment HMENU_UserSize64$address() {
        return HMENU_UserSize64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long HMENU_UserSize64(unsigned long *, unsigned long, HMENU *)
     * }
     */
    public static int HMENU_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = HMENU_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HMENU_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HMENU_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HMENU_UserMarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HMENU_UserMarshal64(unsigned long *, unsigned char *, HMENU *)
     * }
     */
    public static FunctionDescriptor HMENU_UserMarshal64$descriptor() {
        return HMENU_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HMENU_UserMarshal64(unsigned long *, unsigned char *, HMENU *)
     * }
     */
    public static MethodHandle HMENU_UserMarshal64$handle() {
        return HMENU_UserMarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HMENU_UserMarshal64(unsigned long *, unsigned char *, HMENU *)
     * }
     */
    public static MemorySegment HMENU_UserMarshal64$address() {
        return HMENU_UserMarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HMENU_UserMarshal64(unsigned long *, unsigned char *, HMENU *)
     * }
     */
    public static MemorySegment HMENU_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HMENU_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HMENU_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HMENU_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HMENU_UserUnmarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HMENU_UserUnmarshal64(unsigned long *, unsigned char *, HMENU *)
     * }
     */
    public static FunctionDescriptor HMENU_UserUnmarshal64$descriptor() {
        return HMENU_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HMENU_UserUnmarshal64(unsigned long *, unsigned char *, HMENU *)
     * }
     */
    public static MethodHandle HMENU_UserUnmarshal64$handle() {
        return HMENU_UserUnmarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HMENU_UserUnmarshal64(unsigned long *, unsigned char *, HMENU *)
     * }
     */
    public static MemorySegment HMENU_UserUnmarshal64$address() {
        return HMENU_UserUnmarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HMENU_UserUnmarshal64(unsigned long *, unsigned char *, HMENU *)
     * }
     */
    public static MemorySegment HMENU_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HMENU_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HMENU_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HMENU_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HMENU_UserFree64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void HMENU_UserFree64(unsigned long *, HMENU *)
     * }
     */
    public static FunctionDescriptor HMENU_UserFree64$descriptor() {
        return HMENU_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void HMENU_UserFree64(unsigned long *, HMENU *)
     * }
     */
    public static MethodHandle HMENU_UserFree64$handle() {
        return HMENU_UserFree64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void HMENU_UserFree64(unsigned long *, HMENU *)
     * }
     */
    public static MemorySegment HMENU_UserFree64$address() {
        return HMENU_UserFree64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void HMENU_UserFree64(unsigned long *, HMENU *)
     * }
     */
    public static void HMENU_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = HMENU_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HMENU_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HWND_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HWND_UserSize64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long HWND_UserSize64(unsigned long *, unsigned long, HWND *)
     * }
     */
    public static FunctionDescriptor HWND_UserSize64$descriptor() {
        return HWND_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long HWND_UserSize64(unsigned long *, unsigned long, HWND *)
     * }
     */
    public static MethodHandle HWND_UserSize64$handle() {
        return HWND_UserSize64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long HWND_UserSize64(unsigned long *, unsigned long, HWND *)
     * }
     */
    public static MemorySegment HWND_UserSize64$address() {
        return HWND_UserSize64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long HWND_UserSize64(unsigned long *, unsigned long, HWND *)
     * }
     */
    public static int HWND_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = HWND_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HWND_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HWND_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HWND_UserMarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HWND_UserMarshal64(unsigned long *, unsigned char *, HWND *)
     * }
     */
    public static FunctionDescriptor HWND_UserMarshal64$descriptor() {
        return HWND_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HWND_UserMarshal64(unsigned long *, unsigned char *, HWND *)
     * }
     */
    public static MethodHandle HWND_UserMarshal64$handle() {
        return HWND_UserMarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HWND_UserMarshal64(unsigned long *, unsigned char *, HWND *)
     * }
     */
    public static MemorySegment HWND_UserMarshal64$address() {
        return HWND_UserMarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HWND_UserMarshal64(unsigned long *, unsigned char *, HWND *)
     * }
     */
    public static MemorySegment HWND_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HWND_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HWND_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HWND_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HWND_UserUnmarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HWND_UserUnmarshal64(unsigned long *, unsigned char *, HWND *)
     * }
     */
    public static FunctionDescriptor HWND_UserUnmarshal64$descriptor() {
        return HWND_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HWND_UserUnmarshal64(unsigned long *, unsigned char *, HWND *)
     * }
     */
    public static MethodHandle HWND_UserUnmarshal64$handle() {
        return HWND_UserUnmarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HWND_UserUnmarshal64(unsigned long *, unsigned char *, HWND *)
     * }
     */
    public static MemorySegment HWND_UserUnmarshal64$address() {
        return HWND_UserUnmarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HWND_UserUnmarshal64(unsigned long *, unsigned char *, HWND *)
     * }
     */
    public static MemorySegment HWND_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HWND_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HWND_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HWND_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("HWND_UserFree64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void HWND_UserFree64(unsigned long *, HWND *)
     * }
     */
    public static FunctionDescriptor HWND_UserFree64$descriptor() {
        return HWND_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void HWND_UserFree64(unsigned long *, HWND *)
     * }
     */
    public static MethodHandle HWND_UserFree64$handle() {
        return HWND_UserFree64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void HWND_UserFree64(unsigned long *, HWND *)
     * }
     */
    public static MemorySegment HWND_UserFree64$address() {
        return HWND_UserFree64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void HWND_UserFree64(unsigned long *, HWND *)
     * }
     */
    public static void HWND_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = HWND_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HWND_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IOleCache2_UpdateCache_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IOleCache2_UpdateCache_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IOleCache2_UpdateCache_Proxy(IOleCache2 *This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LPVOID pReserved)
     * }
     */
    public static FunctionDescriptor IOleCache2_UpdateCache_Proxy$descriptor() {
        return IOleCache2_UpdateCache_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IOleCache2_UpdateCache_Proxy(IOleCache2 *This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LPVOID pReserved)
     * }
     */
    public static MethodHandle IOleCache2_UpdateCache_Proxy$handle() {
        return IOleCache2_UpdateCache_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IOleCache2_UpdateCache_Proxy(IOleCache2 *This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LPVOID pReserved)
     * }
     */
    public static MemorySegment IOleCache2_UpdateCache_Proxy$address() {
        return IOleCache2_UpdateCache_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IOleCache2_UpdateCache_Proxy(IOleCache2 *This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LPVOID pReserved)
     * }
     */
    public static int IOleCache2_UpdateCache_Proxy(MemorySegment This, MemorySegment pDataObject, int grfUpdf, MemorySegment pReserved) {
        var mh$ = IOleCache2_UpdateCache_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IOleCache2_UpdateCache_Proxy", This, pDataObject, grfUpdf, pReserved);
            }
            return (int)mh$.invokeExact(This, pDataObject, grfUpdf, pReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IOleCache2_UpdateCache_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IOleCache2_UpdateCache_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IOleCache2_UpdateCache_Stub(IOleCache2 *This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LONG_PTR pReserved)
     * }
     */
    public static FunctionDescriptor IOleCache2_UpdateCache_Stub$descriptor() {
        return IOleCache2_UpdateCache_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IOleCache2_UpdateCache_Stub(IOleCache2 *This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LONG_PTR pReserved)
     * }
     */
    public static MethodHandle IOleCache2_UpdateCache_Stub$handle() {
        return IOleCache2_UpdateCache_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IOleCache2_UpdateCache_Stub(IOleCache2 *This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LONG_PTR pReserved)
     * }
     */
    public static MemorySegment IOleCache2_UpdateCache_Stub$address() {
        return IOleCache2_UpdateCache_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IOleCache2_UpdateCache_Stub(IOleCache2 *This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LONG_PTR pReserved)
     * }
     */
    public static int IOleCache2_UpdateCache_Stub(MemorySegment This, MemorySegment pDataObject, int grfUpdf, long pReserved) {
        var mh$ = IOleCache2_UpdateCache_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IOleCache2_UpdateCache_Stub", This, pDataObject, grfUpdf, pReserved);
            }
            return (int)mh$.invokeExact(This, pDataObject, grfUpdf, pReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IOleInPlaceActiveObject_TranslateAccelerator_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IOleInPlaceActiveObject_TranslateAccelerator_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_TranslateAccelerator_Proxy(IOleInPlaceActiveObject *This, LPMSG lpmsg)
     * }
     */
    public static FunctionDescriptor IOleInPlaceActiveObject_TranslateAccelerator_Proxy$descriptor() {
        return IOleInPlaceActiveObject_TranslateAccelerator_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_TranslateAccelerator_Proxy(IOleInPlaceActiveObject *This, LPMSG lpmsg)
     * }
     */
    public static MethodHandle IOleInPlaceActiveObject_TranslateAccelerator_Proxy$handle() {
        return IOleInPlaceActiveObject_TranslateAccelerator_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_TranslateAccelerator_Proxy(IOleInPlaceActiveObject *This, LPMSG lpmsg)
     * }
     */
    public static MemorySegment IOleInPlaceActiveObject_TranslateAccelerator_Proxy$address() {
        return IOleInPlaceActiveObject_TranslateAccelerator_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_TranslateAccelerator_Proxy(IOleInPlaceActiveObject *This, LPMSG lpmsg)
     * }
     */
    public static int IOleInPlaceActiveObject_TranslateAccelerator_Proxy(MemorySegment This, MemorySegment lpmsg) {
        var mh$ = IOleInPlaceActiveObject_TranslateAccelerator_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IOleInPlaceActiveObject_TranslateAccelerator_Proxy", This, lpmsg);
            }
            return (int)mh$.invokeExact(This, lpmsg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IOleInPlaceActiveObject_TranslateAccelerator_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IOleInPlaceActiveObject_TranslateAccelerator_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_TranslateAccelerator_Stub(IOleInPlaceActiveObject *This)
     * }
     */
    public static FunctionDescriptor IOleInPlaceActiveObject_TranslateAccelerator_Stub$descriptor() {
        return IOleInPlaceActiveObject_TranslateAccelerator_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_TranslateAccelerator_Stub(IOleInPlaceActiveObject *This)
     * }
     */
    public static MethodHandle IOleInPlaceActiveObject_TranslateAccelerator_Stub$handle() {
        return IOleInPlaceActiveObject_TranslateAccelerator_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_TranslateAccelerator_Stub(IOleInPlaceActiveObject *This)
     * }
     */
    public static MemorySegment IOleInPlaceActiveObject_TranslateAccelerator_Stub$address() {
        return IOleInPlaceActiveObject_TranslateAccelerator_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_TranslateAccelerator_Stub(IOleInPlaceActiveObject *This)
     * }
     */
    public static int IOleInPlaceActiveObject_TranslateAccelerator_Stub(MemorySegment This) {
        var mh$ = IOleInPlaceActiveObject_TranslateAccelerator_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IOleInPlaceActiveObject_TranslateAccelerator_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IOleInPlaceActiveObject_ResizeBorder_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IOleInPlaceActiveObject_ResizeBorder_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_ResizeBorder_Proxy(IOleInPlaceActiveObject *This, LPCRECT prcBorder, IOleInPlaceUIWindow *pUIWindow, BOOL fFrameWindow)
     * }
     */
    public static FunctionDescriptor IOleInPlaceActiveObject_ResizeBorder_Proxy$descriptor() {
        return IOleInPlaceActiveObject_ResizeBorder_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_ResizeBorder_Proxy(IOleInPlaceActiveObject *This, LPCRECT prcBorder, IOleInPlaceUIWindow *pUIWindow, BOOL fFrameWindow)
     * }
     */
    public static MethodHandle IOleInPlaceActiveObject_ResizeBorder_Proxy$handle() {
        return IOleInPlaceActiveObject_ResizeBorder_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_ResizeBorder_Proxy(IOleInPlaceActiveObject *This, LPCRECT prcBorder, IOleInPlaceUIWindow *pUIWindow, BOOL fFrameWindow)
     * }
     */
    public static MemorySegment IOleInPlaceActiveObject_ResizeBorder_Proxy$address() {
        return IOleInPlaceActiveObject_ResizeBorder_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_ResizeBorder_Proxy(IOleInPlaceActiveObject *This, LPCRECT prcBorder, IOleInPlaceUIWindow *pUIWindow, BOOL fFrameWindow)
     * }
     */
    public static int IOleInPlaceActiveObject_ResizeBorder_Proxy(MemorySegment This, MemorySegment prcBorder, MemorySegment pUIWindow, int fFrameWindow) {
        var mh$ = IOleInPlaceActiveObject_ResizeBorder_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IOleInPlaceActiveObject_ResizeBorder_Proxy", This, prcBorder, pUIWindow, fFrameWindow);
            }
            return (int)mh$.invokeExact(This, prcBorder, pUIWindow, fFrameWindow);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IOleInPlaceActiveObject_ResizeBorder_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IOleInPlaceActiveObject_ResizeBorder_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_ResizeBorder_Stub(IOleInPlaceActiveObject *This, LPCRECT prcBorder, const IID *const riid, IOleInPlaceUIWindow *pUIWindow, BOOL fFrameWindow)
     * }
     */
    public static FunctionDescriptor IOleInPlaceActiveObject_ResizeBorder_Stub$descriptor() {
        return IOleInPlaceActiveObject_ResizeBorder_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_ResizeBorder_Stub(IOleInPlaceActiveObject *This, LPCRECT prcBorder, const IID *const riid, IOleInPlaceUIWindow *pUIWindow, BOOL fFrameWindow)
     * }
     */
    public static MethodHandle IOleInPlaceActiveObject_ResizeBorder_Stub$handle() {
        return IOleInPlaceActiveObject_ResizeBorder_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_ResizeBorder_Stub(IOleInPlaceActiveObject *This, LPCRECT prcBorder, const IID *const riid, IOleInPlaceUIWindow *pUIWindow, BOOL fFrameWindow)
     * }
     */
    public static MemorySegment IOleInPlaceActiveObject_ResizeBorder_Stub$address() {
        return IOleInPlaceActiveObject_ResizeBorder_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IOleInPlaceActiveObject_ResizeBorder_Stub(IOleInPlaceActiveObject *This, LPCRECT prcBorder, const IID *const riid, IOleInPlaceUIWindow *pUIWindow, BOOL fFrameWindow)
     * }
     */
    public static int IOleInPlaceActiveObject_ResizeBorder_Stub(MemorySegment This, MemorySegment prcBorder, MemorySegment riid, MemorySegment pUIWindow, int fFrameWindow) {
        var mh$ = IOleInPlaceActiveObject_ResizeBorder_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IOleInPlaceActiveObject_ResizeBorder_Stub", This, prcBorder, riid, pUIWindow, fFrameWindow);
            }
            return (int)mh$.invokeExact(This, prcBorder, riid, pUIWindow, fFrameWindow);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IViewObject_Draw_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IViewObject_Draw_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IViewObject_Draw_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, BOOL (*pfnContinue)(ULONG_PTR) __attribute__((stdcall)), ULONG_PTR dwContinue)
     * }
     */
    public static FunctionDescriptor IViewObject_Draw_Proxy$descriptor() {
        return IViewObject_Draw_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IViewObject_Draw_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, BOOL (*pfnContinue)(ULONG_PTR) __attribute__((stdcall)), ULONG_PTR dwContinue)
     * }
     */
    public static MethodHandle IViewObject_Draw_Proxy$handle() {
        return IViewObject_Draw_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IViewObject_Draw_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, BOOL (*pfnContinue)(ULONG_PTR) __attribute__((stdcall)), ULONG_PTR dwContinue)
     * }
     */
    public static MemorySegment IViewObject_Draw_Proxy$address() {
        return IViewObject_Draw_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IViewObject_Draw_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, BOOL (*pfnContinue)(ULONG_PTR) __attribute__((stdcall)), ULONG_PTR dwContinue)
     * }
     */
    public static int IViewObject_Draw_Proxy(MemorySegment This, int dwDrawAspect, int lindex, MemorySegment pvAspect, MemorySegment ptd, MemorySegment hdcTargetDev, MemorySegment hdcDraw, MemorySegment lprcBounds, MemorySegment lprcWBounds, MemorySegment pfnContinue, long dwContinue) {
        var mh$ = IViewObject_Draw_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IViewObject_Draw_Proxy", This, dwDrawAspect, lindex, pvAspect, ptd, hdcTargetDev, hdcDraw, lprcBounds, lprcWBounds, pfnContinue, dwContinue);
            }
            return (int)mh$.invokeExact(This, dwDrawAspect, lindex, pvAspect, ptd, hdcTargetDev, hdcDraw, lprcBounds, lprcWBounds, pfnContinue, dwContinue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IViewObject_Draw_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IViewObject_Draw_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IViewObject_Draw_Stub(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, IContinue *pContinue)
     * }
     */
    public static FunctionDescriptor IViewObject_Draw_Stub$descriptor() {
        return IViewObject_Draw_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IViewObject_Draw_Stub(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, IContinue *pContinue)
     * }
     */
    public static MethodHandle IViewObject_Draw_Stub$handle() {
        return IViewObject_Draw_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IViewObject_Draw_Stub(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, IContinue *pContinue)
     * }
     */
    public static MemorySegment IViewObject_Draw_Stub$address() {
        return IViewObject_Draw_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IViewObject_Draw_Stub(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, IContinue *pContinue)
     * }
     */
    public static int IViewObject_Draw_Stub(MemorySegment This, int dwDrawAspect, int lindex, long pvAspect, MemorySegment ptd, MemorySegment hdcTargetDev, MemorySegment hdcDraw, MemorySegment lprcBounds, MemorySegment lprcWBounds, MemorySegment pContinue) {
        var mh$ = IViewObject_Draw_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IViewObject_Draw_Stub", This, dwDrawAspect, lindex, pvAspect, ptd, hdcTargetDev, hdcDraw, lprcBounds, lprcWBounds, pContinue);
            }
            return (int)mh$.invokeExact(This, dwDrawAspect, lindex, pvAspect, ptd, hdcTargetDev, hdcDraw, lprcBounds, lprcWBounds, pContinue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IViewObject_GetColorSet_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IViewObject_GetColorSet_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IViewObject_GetColorSet_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hicTargetDev, LOGPALETTE **ppColorSet)
     * }
     */
    public static FunctionDescriptor IViewObject_GetColorSet_Proxy$descriptor() {
        return IViewObject_GetColorSet_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IViewObject_GetColorSet_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hicTargetDev, LOGPALETTE **ppColorSet)
     * }
     */
    public static MethodHandle IViewObject_GetColorSet_Proxy$handle() {
        return IViewObject_GetColorSet_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IViewObject_GetColorSet_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hicTargetDev, LOGPALETTE **ppColorSet)
     * }
     */
    public static MemorySegment IViewObject_GetColorSet_Proxy$address() {
        return IViewObject_GetColorSet_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IViewObject_GetColorSet_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hicTargetDev, LOGPALETTE **ppColorSet)
     * }
     */
    public static int IViewObject_GetColorSet_Proxy(MemorySegment This, int dwDrawAspect, int lindex, MemorySegment pvAspect, MemorySegment ptd, MemorySegment hicTargetDev, MemorySegment ppColorSet) {
        var mh$ = IViewObject_GetColorSet_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IViewObject_GetColorSet_Proxy", This, dwDrawAspect, lindex, pvAspect, ptd, hicTargetDev, ppColorSet);
            }
            return (int)mh$.invokeExact(This, dwDrawAspect, lindex, pvAspect, ptd, hicTargetDev, ppColorSet);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IViewObject_GetColorSet_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IViewObject_GetColorSet_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IViewObject_GetColorSet_Stub(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE *ptd, ULONG_PTR hicTargetDev, LOGPALETTE **ppColorSet)
     * }
     */
    public static FunctionDescriptor IViewObject_GetColorSet_Stub$descriptor() {
        return IViewObject_GetColorSet_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IViewObject_GetColorSet_Stub(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE *ptd, ULONG_PTR hicTargetDev, LOGPALETTE **ppColorSet)
     * }
     */
    public static MethodHandle IViewObject_GetColorSet_Stub$handle() {
        return IViewObject_GetColorSet_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IViewObject_GetColorSet_Stub(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE *ptd, ULONG_PTR hicTargetDev, LOGPALETTE **ppColorSet)
     * }
     */
    public static MemorySegment IViewObject_GetColorSet_Stub$address() {
        return IViewObject_GetColorSet_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IViewObject_GetColorSet_Stub(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE *ptd, ULONG_PTR hicTargetDev, LOGPALETTE **ppColorSet)
     * }
     */
    public static int IViewObject_GetColorSet_Stub(MemorySegment This, int dwDrawAspect, int lindex, long pvAspect, MemorySegment ptd, long hicTargetDev, MemorySegment ppColorSet) {
        var mh$ = IViewObject_GetColorSet_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IViewObject_GetColorSet_Stub", This, dwDrawAspect, lindex, pvAspect, ptd, hicTargetDev, ppColorSet);
            }
            return (int)mh$.invokeExact(This, dwDrawAspect, lindex, pvAspect, ptd, hicTargetDev, ppColorSet);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IViewObject_Freeze_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IViewObject_Freeze_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IViewObject_Freeze_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DWORD *pdwFreeze)
     * }
     */
    public static FunctionDescriptor IViewObject_Freeze_Proxy$descriptor() {
        return IViewObject_Freeze_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IViewObject_Freeze_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DWORD *pdwFreeze)
     * }
     */
    public static MethodHandle IViewObject_Freeze_Proxy$handle() {
        return IViewObject_Freeze_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IViewObject_Freeze_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DWORD *pdwFreeze)
     * }
     */
    public static MemorySegment IViewObject_Freeze_Proxy$address() {
        return IViewObject_Freeze_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IViewObject_Freeze_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DWORD *pdwFreeze)
     * }
     */
    public static int IViewObject_Freeze_Proxy(MemorySegment This, int dwDrawAspect, int lindex, MemorySegment pvAspect, MemorySegment pdwFreeze) {
        var mh$ = IViewObject_Freeze_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IViewObject_Freeze_Proxy", This, dwDrawAspect, lindex, pvAspect, pdwFreeze);
            }
            return (int)mh$.invokeExact(This, dwDrawAspect, lindex, pvAspect, pdwFreeze);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IViewObject_Freeze_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IViewObject_Freeze_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IViewObject_Freeze_Stub(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DWORD *pdwFreeze)
     * }
     */
    public static FunctionDescriptor IViewObject_Freeze_Stub$descriptor() {
        return IViewObject_Freeze_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IViewObject_Freeze_Stub(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DWORD *pdwFreeze)
     * }
     */
    public static MethodHandle IViewObject_Freeze_Stub$handle() {
        return IViewObject_Freeze_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IViewObject_Freeze_Stub(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DWORD *pdwFreeze)
     * }
     */
    public static MemorySegment IViewObject_Freeze_Stub$address() {
        return IViewObject_Freeze_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IViewObject_Freeze_Stub(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DWORD *pdwFreeze)
     * }
     */
    public static int IViewObject_Freeze_Stub(MemorySegment This, int dwDrawAspect, int lindex, long pvAspect, MemorySegment pdwFreeze) {
        var mh$ = IViewObject_Freeze_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IViewObject_Freeze_Stub", This, dwDrawAspect, lindex, pvAspect, pdwFreeze);
            }
            return (int)mh$.invokeExact(This, dwDrawAspect, lindex, pvAspect, pdwFreeze);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IViewObject_GetAdvise_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IViewObject_GetAdvise_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IViewObject_GetAdvise_Proxy(IViewObject *This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink)
     * }
     */
    public static FunctionDescriptor IViewObject_GetAdvise_Proxy$descriptor() {
        return IViewObject_GetAdvise_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IViewObject_GetAdvise_Proxy(IViewObject *This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink)
     * }
     */
    public static MethodHandle IViewObject_GetAdvise_Proxy$handle() {
        return IViewObject_GetAdvise_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IViewObject_GetAdvise_Proxy(IViewObject *This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink)
     * }
     */
    public static MemorySegment IViewObject_GetAdvise_Proxy$address() {
        return IViewObject_GetAdvise_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IViewObject_GetAdvise_Proxy(IViewObject *This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink)
     * }
     */
    public static int IViewObject_GetAdvise_Proxy(MemorySegment This, MemorySegment pAspects, MemorySegment pAdvf, MemorySegment ppAdvSink) {
        var mh$ = IViewObject_GetAdvise_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IViewObject_GetAdvise_Proxy", This, pAspects, pAdvf, ppAdvSink);
            }
            return (int)mh$.invokeExact(This, pAspects, pAdvf, ppAdvSink);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IViewObject_GetAdvise_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IViewObject_GetAdvise_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IViewObject_GetAdvise_Stub(IViewObject *This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink)
     * }
     */
    public static FunctionDescriptor IViewObject_GetAdvise_Stub$descriptor() {
        return IViewObject_GetAdvise_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IViewObject_GetAdvise_Stub(IViewObject *This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink)
     * }
     */
    public static MethodHandle IViewObject_GetAdvise_Stub$handle() {
        return IViewObject_GetAdvise_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IViewObject_GetAdvise_Stub(IViewObject *This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink)
     * }
     */
    public static MemorySegment IViewObject_GetAdvise_Stub$address() {
        return IViewObject_GetAdvise_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IViewObject_GetAdvise_Stub(IViewObject *This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink)
     * }
     */
    public static int IViewObject_GetAdvise_Stub(MemorySegment This, MemorySegment pAspects, MemorySegment pAdvf, MemorySegment ppAdvSink) {
        var mh$ = IViewObject_GetAdvise_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IViewObject_GetAdvise_Stub", This, pAspects, pAdvf, ppAdvSink);
            }
            return (int)mh$.invokeExact(This, pAspects, pAdvf, ppAdvSink);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumOLEVERB_Next_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumOLEVERB_Next_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumOLEVERB_Next_Proxy(IEnumOLEVERB *This, ULONG celt, LPOLEVERB rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumOLEVERB_Next_Proxy$descriptor() {
        return IEnumOLEVERB_Next_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumOLEVERB_Next_Proxy(IEnumOLEVERB *This, ULONG celt, LPOLEVERB rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumOLEVERB_Next_Proxy$handle() {
        return IEnumOLEVERB_Next_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumOLEVERB_Next_Proxy(IEnumOLEVERB *This, ULONG celt, LPOLEVERB rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumOLEVERB_Next_Proxy$address() {
        return IEnumOLEVERB_Next_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumOLEVERB_Next_Proxy(IEnumOLEVERB *This, ULONG celt, LPOLEVERB rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumOLEVERB_Next_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumOLEVERB_Next_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumOLEVERB_Next_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumOLEVERB_Next_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEnumOLEVERB_Next_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumOLEVERB_Next_Stub(IEnumOLEVERB *This, ULONG celt, LPOLEVERB rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumOLEVERB_Next_Stub$descriptor() {
        return IEnumOLEVERB_Next_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumOLEVERB_Next_Stub(IEnumOLEVERB *This, ULONG celt, LPOLEVERB rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumOLEVERB_Next_Stub$handle() {
        return IEnumOLEVERB_Next_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumOLEVERB_Next_Stub(IEnumOLEVERB *This, ULONG celt, LPOLEVERB rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumOLEVERB_Next_Stub$address() {
        return IEnumOLEVERB_Next_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumOLEVERB_Next_Stub(IEnumOLEVERB *This, ULONG celt, LPOLEVERB rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumOLEVERB_Next_Stub(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumOLEVERB_Next_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumOLEVERB_Next_Stub", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_servprov_0000_0000_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec$layout() {
        return __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec$segment() {
        return __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec() {
        return __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_servprov_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_servprov_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_servprov_0000_0000_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec$layout() {
        return __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec$segment() {
        return __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec() {
        return __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_servprov_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_servprov_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IServiceProvider *LPSERVICEPROVIDER
     * }
     */
    public static final AddressLayout LPSERVICEPROVIDER = wgl_h.C_POINTER;

    private static class IID_IServiceProvider$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IServiceProvider").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IServiceProvider
     * }
     */
    public static GroupLayout IID_IServiceProvider$layout() {
        return IID_IServiceProvider$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IServiceProvider
     * }
     */
    public static MemorySegment IID_IServiceProvider() {
        return IID_IServiceProvider$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IServiceProvider
     * }
     */
    public static void IID_IServiceProvider(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IServiceProvider$constants.SEGMENT, 0L, IID_IServiceProvider$constants.LAYOUT.byteSize());
    }

    private static class IServiceProvider_RemoteQueryService_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IServiceProvider_RemoteQueryService_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IServiceProvider_RemoteQueryService_Proxy(IServiceProvider *This, const GUID *const guidService, const IID *const riid, IUnknown **ppvObject)
     * }
     */
    public static FunctionDescriptor IServiceProvider_RemoteQueryService_Proxy$descriptor() {
        return IServiceProvider_RemoteQueryService_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IServiceProvider_RemoteQueryService_Proxy(IServiceProvider *This, const GUID *const guidService, const IID *const riid, IUnknown **ppvObject)
     * }
     */
    public static MethodHandle IServiceProvider_RemoteQueryService_Proxy$handle() {
        return IServiceProvider_RemoteQueryService_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IServiceProvider_RemoteQueryService_Proxy(IServiceProvider *This, const GUID *const guidService, const IID *const riid, IUnknown **ppvObject)
     * }
     */
    public static MemorySegment IServiceProvider_RemoteQueryService_Proxy$address() {
        return IServiceProvider_RemoteQueryService_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IServiceProvider_RemoteQueryService_Proxy(IServiceProvider *This, const GUID *const guidService, const IID *const riid, IUnknown **ppvObject)
     * }
     */
    public static int IServiceProvider_RemoteQueryService_Proxy(MemorySegment This, MemorySegment guidService, MemorySegment riid, MemorySegment ppvObject) {
        var mh$ = IServiceProvider_RemoteQueryService_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IServiceProvider_RemoteQueryService_Proxy", This, guidService, riid, ppvObject);
            }
            return (int)mh$.invokeExact(This, guidService, riid, ppvObject);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IServiceProvider_RemoteQueryService_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IServiceProvider_RemoteQueryService_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IServiceProvider_RemoteQueryService_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IServiceProvider_RemoteQueryService_Stub$descriptor() {
        return IServiceProvider_RemoteQueryService_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IServiceProvider_RemoteQueryService_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IServiceProvider_RemoteQueryService_Stub$handle() {
        return IServiceProvider_RemoteQueryService_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IServiceProvider_RemoteQueryService_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IServiceProvider_RemoteQueryService_Stub$address() {
        return IServiceProvider_RemoteQueryService_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IServiceProvider_RemoteQueryService_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IServiceProvider_RemoteQueryService_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IServiceProvider_RemoteQueryService_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IServiceProvider_RemoteQueryService_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_servprov_0000_0001_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec$layout() {
        return __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec$segment() {
        return __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec() {
        return __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_servprov_0000_0001_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_servprov_0000_0001_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_servprov_0000_0001_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec$layout() {
        return __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec$segment() {
        return __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec() {
        return __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_servprov_0000_0001_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_servprov_0000_0001_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IServiceProvider_QueryService_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IServiceProvider_QueryService_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IServiceProvider_QueryService_Proxy(IServiceProvider *This, const GUID *const guidService, const IID *const riid, void **ppvObject)
     * }
     */
    public static FunctionDescriptor IServiceProvider_QueryService_Proxy$descriptor() {
        return IServiceProvider_QueryService_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IServiceProvider_QueryService_Proxy(IServiceProvider *This, const GUID *const guidService, const IID *const riid, void **ppvObject)
     * }
     */
    public static MethodHandle IServiceProvider_QueryService_Proxy$handle() {
        return IServiceProvider_QueryService_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IServiceProvider_QueryService_Proxy(IServiceProvider *This, const GUID *const guidService, const IID *const riid, void **ppvObject)
     * }
     */
    public static MemorySegment IServiceProvider_QueryService_Proxy$address() {
        return IServiceProvider_QueryService_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IServiceProvider_QueryService_Proxy(IServiceProvider *This, const GUID *const guidService, const IID *const riid, void **ppvObject)
     * }
     */
    public static int IServiceProvider_QueryService_Proxy(MemorySegment This, MemorySegment guidService, MemorySegment riid, MemorySegment ppvObject) {
        var mh$ = IServiceProvider_QueryService_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IServiceProvider_QueryService_Proxy", This, guidService, riid, ppvObject);
            }
            return (int)mh$.invokeExact(This, guidService, riid, ppvObject);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IServiceProvider_QueryService_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IServiceProvider_QueryService_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IServiceProvider_QueryService_Stub(IServiceProvider *This, const GUID *const guidService, const IID *const riid, IUnknown **ppvObject)
     * }
     */
    public static FunctionDescriptor IServiceProvider_QueryService_Stub$descriptor() {
        return IServiceProvider_QueryService_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IServiceProvider_QueryService_Stub(IServiceProvider *This, const GUID *const guidService, const IID *const riid, IUnknown **ppvObject)
     * }
     */
    public static MethodHandle IServiceProvider_QueryService_Stub$handle() {
        return IServiceProvider_QueryService_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IServiceProvider_QueryService_Stub(IServiceProvider *This, const GUID *const guidService, const IID *const riid, IUnknown **ppvObject)
     * }
     */
    public static MemorySegment IServiceProvider_QueryService_Stub$address() {
        return IServiceProvider_QueryService_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IServiceProvider_QueryService_Stub(IServiceProvider *This, const GUID *const guidService, const IID *const riid, IUnknown **ppvObject)
     * }
     */
    public static int IServiceProvider_QueryService_Stub(MemorySegment This, MemorySegment guidService, MemorySegment riid, MemorySegment ppvObject) {
        var mh$ = IServiceProvider_QueryService_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IServiceProvider_QueryService_Stub", This, guidService, riid, ppvObject);
            }
            return (int)mh$.invokeExact(This, guidService, riid, ppvObject);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_msxml_0000_0000_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec$layout() {
        return __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec$segment() {
        return __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec() {
        return __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_msxml_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_msxml_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_msxml_0000_0000_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec$layout() {
        return __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec$segment() {
        return __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec() {
        return __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_msxml_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_msxml_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    private static final int NODE_INVALID = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagDOMNodeType.NODE_INVALID = 0
     * }
     */
    public static int NODE_INVALID() {
        return NODE_INVALID;
    }
    private static final int NODE_ELEMENT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagDOMNodeType.NODE_ELEMENT = 1
     * }
     */
    public static int NODE_ELEMENT() {
        return NODE_ELEMENT;
    }
    private static final int NODE_ATTRIBUTE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagDOMNodeType.NODE_ATTRIBUTE = 2
     * }
     */
    public static int NODE_ATTRIBUTE() {
        return NODE_ATTRIBUTE;
    }
    private static final int NODE_TEXT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagDOMNodeType.NODE_TEXT = 3
     * }
     */
    public static int NODE_TEXT() {
        return NODE_TEXT;
    }
    private static final int NODE_CDATA_SECTION = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagDOMNodeType.NODE_CDATA_SECTION = 4
     * }
     */
    public static int NODE_CDATA_SECTION() {
        return NODE_CDATA_SECTION;
    }
    private static final int NODE_ENTITY_REFERENCE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum tagDOMNodeType.NODE_ENTITY_REFERENCE = 5
     * }
     */
    public static int NODE_ENTITY_REFERENCE() {
        return NODE_ENTITY_REFERENCE;
    }
    private static final int NODE_ENTITY = (int)6L;
    /**
     * {@snippet lang=c :
     * enum tagDOMNodeType.NODE_ENTITY = 6
     * }
     */
    public static int NODE_ENTITY() {
        return NODE_ENTITY;
    }
    private static final int NODE_PROCESSING_INSTRUCTION = (int)7L;
    /**
     * {@snippet lang=c :
     * enum tagDOMNodeType.NODE_PROCESSING_INSTRUCTION = 7
     * }
     */
    public static int NODE_PROCESSING_INSTRUCTION() {
        return NODE_PROCESSING_INSTRUCTION;
    }
    private static final int NODE_COMMENT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagDOMNodeType.NODE_COMMENT = 8
     * }
     */
    public static int NODE_COMMENT() {
        return NODE_COMMENT;
    }
    private static final int NODE_DOCUMENT = (int)9L;
    /**
     * {@snippet lang=c :
     * enum tagDOMNodeType.NODE_DOCUMENT = 9
     * }
     */
    public static int NODE_DOCUMENT() {
        return NODE_DOCUMENT;
    }
    private static final int NODE_DOCUMENT_TYPE = (int)10L;
    /**
     * {@snippet lang=c :
     * enum tagDOMNodeType.NODE_DOCUMENT_TYPE = 10
     * }
     */
    public static int NODE_DOCUMENT_TYPE() {
        return NODE_DOCUMENT_TYPE;
    }
    private static final int NODE_DOCUMENT_FRAGMENT = (int)11L;
    /**
     * {@snippet lang=c :
     * enum tagDOMNodeType.NODE_DOCUMENT_FRAGMENT = 11
     * }
     */
    public static int NODE_DOCUMENT_FRAGMENT() {
        return NODE_DOCUMENT_FRAGMENT;
    }
    private static final int NODE_NOTATION = (int)12L;
    /**
     * {@snippet lang=c :
     * enum tagDOMNodeType.NODE_NOTATION = 12
     * }
     */
    public static int NODE_NOTATION() {
        return NODE_NOTATION;
    }
    private static final int XMLELEMTYPE_ELEMENT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagXMLEMEM_TYPE.XMLELEMTYPE_ELEMENT = 0
     * }
     */
    public static int XMLELEMTYPE_ELEMENT() {
        return XMLELEMTYPE_ELEMENT;
    }
    private static final int XMLELEMTYPE_TEXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagXMLEMEM_TYPE.XMLELEMTYPE_TEXT = 1
     * }
     */
    public static int XMLELEMTYPE_TEXT() {
        return XMLELEMTYPE_TEXT;
    }
    private static final int XMLELEMTYPE_COMMENT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagXMLEMEM_TYPE.XMLELEMTYPE_COMMENT = 2
     * }
     */
    public static int XMLELEMTYPE_COMMENT() {
        return XMLELEMTYPE_COMMENT;
    }
    private static final int XMLELEMTYPE_DOCUMENT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagXMLEMEM_TYPE.XMLELEMTYPE_DOCUMENT = 3
     * }
     */
    public static int XMLELEMTYPE_DOCUMENT() {
        return XMLELEMTYPE_DOCUMENT;
    }
    private static final int XMLELEMTYPE_DTD = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagXMLEMEM_TYPE.XMLELEMTYPE_DTD = 4
     * }
     */
    public static int XMLELEMTYPE_DTD() {
        return XMLELEMTYPE_DTD;
    }
    private static final int XMLELEMTYPE_PI = (int)5L;
    /**
     * {@snippet lang=c :
     * enum tagXMLEMEM_TYPE.XMLELEMTYPE_PI = 5
     * }
     */
    public static int XMLELEMTYPE_PI() {
        return XMLELEMTYPE_PI;
    }
    private static final int XMLELEMTYPE_OTHER = (int)6L;
    /**
     * {@snippet lang=c :
     * enum tagXMLEMEM_TYPE.XMLELEMTYPE_OTHER = 6
     * }
     */
    public static int XMLELEMTYPE_OTHER() {
        return XMLELEMTYPE_OTHER;
    }

    private static class LIBID_MSXML$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("LIBID_MSXML").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID LIBID_MSXML
     * }
     */
    public static GroupLayout LIBID_MSXML$layout() {
        return LIBID_MSXML$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID LIBID_MSXML
     * }
     */
    public static MemorySegment LIBID_MSXML() {
        return LIBID_MSXML$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID LIBID_MSXML
     * }
     */
    public static void LIBID_MSXML(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, LIBID_MSXML$constants.SEGMENT, 0L, LIBID_MSXML$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDOMImplementation$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IXMLDOMImplementation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMImplementation
     * }
     */
    public static GroupLayout IID_IXMLDOMImplementation$layout() {
        return IID_IXMLDOMImplementation$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMImplementation
     * }
     */
    public static MemorySegment IID_IXMLDOMImplementation() {
        return IID_IXMLDOMImplementation$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMImplementation
     * }
     */
    public static void IID_IXMLDOMImplementation(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDOMImplementation$constants.SEGMENT, 0L, IID_IXMLDOMImplementation$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDOMNode$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IXMLDOMNode").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMNode
     * }
     */
    public static GroupLayout IID_IXMLDOMNode$layout() {
        return IID_IXMLDOMNode$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMNode
     * }
     */
    public static MemorySegment IID_IXMLDOMNode() {
        return IID_IXMLDOMNode$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMNode
     * }
     */
    public static void IID_IXMLDOMNode(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDOMNode$constants.SEGMENT, 0L, IID_IXMLDOMNode$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDOMDocumentFragment$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IXMLDOMDocumentFragment").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMDocumentFragment
     * }
     */
    public static GroupLayout IID_IXMLDOMDocumentFragment$layout() {
        return IID_IXMLDOMDocumentFragment$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMDocumentFragment
     * }
     */
    public static MemorySegment IID_IXMLDOMDocumentFragment() {
        return IID_IXMLDOMDocumentFragment$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMDocumentFragment
     * }
     */
    public static void IID_IXMLDOMDocumentFragment(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDOMDocumentFragment$constants.SEGMENT, 0L, IID_IXMLDOMDocumentFragment$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDOMDocument$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IXMLDOMDocument").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMDocument
     * }
     */
    public static GroupLayout IID_IXMLDOMDocument$layout() {
        return IID_IXMLDOMDocument$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMDocument
     * }
     */
    public static MemorySegment IID_IXMLDOMDocument() {
        return IID_IXMLDOMDocument$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMDocument
     * }
     */
    public static void IID_IXMLDOMDocument(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDOMDocument$constants.SEGMENT, 0L, IID_IXMLDOMDocument$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDOMNodeList$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IXMLDOMNodeList").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMNodeList
     * }
     */
    public static GroupLayout IID_IXMLDOMNodeList$layout() {
        return IID_IXMLDOMNodeList$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMNodeList
     * }
     */
    public static MemorySegment IID_IXMLDOMNodeList() {
        return IID_IXMLDOMNodeList$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMNodeList
     * }
     */
    public static void IID_IXMLDOMNodeList(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDOMNodeList$constants.SEGMENT, 0L, IID_IXMLDOMNodeList$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDOMNamedNodeMap$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IXMLDOMNamedNodeMap").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMNamedNodeMap
     * }
     */
    public static GroupLayout IID_IXMLDOMNamedNodeMap$layout() {
        return IID_IXMLDOMNamedNodeMap$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMNamedNodeMap
     * }
     */
    public static MemorySegment IID_IXMLDOMNamedNodeMap() {
        return IID_IXMLDOMNamedNodeMap$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMNamedNodeMap
     * }
     */
    public static void IID_IXMLDOMNamedNodeMap(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDOMNamedNodeMap$constants.SEGMENT, 0L, IID_IXMLDOMNamedNodeMap$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDOMCharacterData$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IXMLDOMCharacterData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMCharacterData
     * }
     */
    public static GroupLayout IID_IXMLDOMCharacterData$layout() {
        return IID_IXMLDOMCharacterData$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMCharacterData
     * }
     */
    public static MemorySegment IID_IXMLDOMCharacterData() {
        return IID_IXMLDOMCharacterData$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMCharacterData
     * }
     */
    public static void IID_IXMLDOMCharacterData(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDOMCharacterData$constants.SEGMENT, 0L, IID_IXMLDOMCharacterData$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDOMAttribute$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IXMLDOMAttribute").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMAttribute
     * }
     */
    public static GroupLayout IID_IXMLDOMAttribute$layout() {
        return IID_IXMLDOMAttribute$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMAttribute
     * }
     */
    public static MemorySegment IID_IXMLDOMAttribute() {
        return IID_IXMLDOMAttribute$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMAttribute
     * }
     */
    public static void IID_IXMLDOMAttribute(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDOMAttribute$constants.SEGMENT, 0L, IID_IXMLDOMAttribute$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDOMElement$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IXMLDOMElement").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMElement
     * }
     */
    public static GroupLayout IID_IXMLDOMElement$layout() {
        return IID_IXMLDOMElement$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMElement
     * }
     */
    public static MemorySegment IID_IXMLDOMElement() {
        return IID_IXMLDOMElement$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMElement
     * }
     */
    public static void IID_IXMLDOMElement(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDOMElement$constants.SEGMENT, 0L, IID_IXMLDOMElement$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDOMText$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IXMLDOMText").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMText
     * }
     */
    public static GroupLayout IID_IXMLDOMText$layout() {
        return IID_IXMLDOMText$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMText
     * }
     */
    public static MemorySegment IID_IXMLDOMText() {
        return IID_IXMLDOMText$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMText
     * }
     */
    public static void IID_IXMLDOMText(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDOMText$constants.SEGMENT, 0L, IID_IXMLDOMText$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDOMComment$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IXMLDOMComment").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMComment
     * }
     */
    public static GroupLayout IID_IXMLDOMComment$layout() {
        return IID_IXMLDOMComment$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMComment
     * }
     */
    public static MemorySegment IID_IXMLDOMComment() {
        return IID_IXMLDOMComment$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMComment
     * }
     */
    public static void IID_IXMLDOMComment(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDOMComment$constants.SEGMENT, 0L, IID_IXMLDOMComment$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDOMProcessingInstruction$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IXMLDOMProcessingInstruction").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMProcessingInstruction
     * }
     */
    public static GroupLayout IID_IXMLDOMProcessingInstruction$layout() {
        return IID_IXMLDOMProcessingInstruction$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMProcessingInstruction
     * }
     */
    public static MemorySegment IID_IXMLDOMProcessingInstruction() {
        return IID_IXMLDOMProcessingInstruction$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMProcessingInstruction
     * }
     */
    public static void IID_IXMLDOMProcessingInstruction(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDOMProcessingInstruction$constants.SEGMENT, 0L, IID_IXMLDOMProcessingInstruction$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDOMCDATASection$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IXMLDOMCDATASection").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMCDATASection
     * }
     */
    public static GroupLayout IID_IXMLDOMCDATASection$layout() {
        return IID_IXMLDOMCDATASection$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMCDATASection
     * }
     */
    public static MemorySegment IID_IXMLDOMCDATASection() {
        return IID_IXMLDOMCDATASection$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMCDATASection
     * }
     */
    public static void IID_IXMLDOMCDATASection(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDOMCDATASection$constants.SEGMENT, 0L, IID_IXMLDOMCDATASection$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDOMDocumentType$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IXMLDOMDocumentType").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMDocumentType
     * }
     */
    public static GroupLayout IID_IXMLDOMDocumentType$layout() {
        return IID_IXMLDOMDocumentType$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMDocumentType
     * }
     */
    public static MemorySegment IID_IXMLDOMDocumentType() {
        return IID_IXMLDOMDocumentType$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMDocumentType
     * }
     */
    public static void IID_IXMLDOMDocumentType(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDOMDocumentType$constants.SEGMENT, 0L, IID_IXMLDOMDocumentType$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDOMNotation$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IXMLDOMNotation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMNotation
     * }
     */
    public static GroupLayout IID_IXMLDOMNotation$layout() {
        return IID_IXMLDOMNotation$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMNotation
     * }
     */
    public static MemorySegment IID_IXMLDOMNotation() {
        return IID_IXMLDOMNotation$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMNotation
     * }
     */
    public static void IID_IXMLDOMNotation(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDOMNotation$constants.SEGMENT, 0L, IID_IXMLDOMNotation$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDOMEntity$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IXMLDOMEntity").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMEntity
     * }
     */
    public static GroupLayout IID_IXMLDOMEntity$layout() {
        return IID_IXMLDOMEntity$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMEntity
     * }
     */
    public static MemorySegment IID_IXMLDOMEntity() {
        return IID_IXMLDOMEntity$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMEntity
     * }
     */
    public static void IID_IXMLDOMEntity(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDOMEntity$constants.SEGMENT, 0L, IID_IXMLDOMEntity$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDOMEntityReference$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IXMLDOMEntityReference").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMEntityReference
     * }
     */
    public static GroupLayout IID_IXMLDOMEntityReference$layout() {
        return IID_IXMLDOMEntityReference$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMEntityReference
     * }
     */
    public static MemorySegment IID_IXMLDOMEntityReference() {
        return IID_IXMLDOMEntityReference$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMEntityReference
     * }
     */
    public static void IID_IXMLDOMEntityReference(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDOMEntityReference$constants.SEGMENT, 0L, IID_IXMLDOMEntityReference$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDOMParseError$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IXMLDOMParseError").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMParseError
     * }
     */
    public static GroupLayout IID_IXMLDOMParseError$layout() {
        return IID_IXMLDOMParseError$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMParseError
     * }
     */
    public static MemorySegment IID_IXMLDOMParseError() {
        return IID_IXMLDOMParseError$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDOMParseError
     * }
     */
    public static void IID_IXMLDOMParseError(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDOMParseError$constants.SEGMENT, 0L, IID_IXMLDOMParseError$constants.LAYOUT.byteSize());
    }

    private static class IID_IXTLRuntime$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IXTLRuntime").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXTLRuntime
     * }
     */
    public static GroupLayout IID_IXTLRuntime$layout() {
        return IID_IXTLRuntime$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXTLRuntime
     * }
     */
    public static MemorySegment IID_IXTLRuntime() {
        return IID_IXTLRuntime$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXTLRuntime
     * }
     */
    public static void IID_IXTLRuntime(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXTLRuntime$constants.SEGMENT, 0L, IID_IXTLRuntime$constants.LAYOUT.byteSize());
    }

    private static class DIID_XMLDOMDocumentEvents$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("DIID_XMLDOMDocumentEvents").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID DIID_XMLDOMDocumentEvents
     * }
     */
    public static GroupLayout DIID_XMLDOMDocumentEvents$layout() {
        return DIID_XMLDOMDocumentEvents$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID DIID_XMLDOMDocumentEvents
     * }
     */
    public static MemorySegment DIID_XMLDOMDocumentEvents() {
        return DIID_XMLDOMDocumentEvents$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID DIID_XMLDOMDocumentEvents
     * }
     */
    public static void DIID_XMLDOMDocumentEvents(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, DIID_XMLDOMDocumentEvents$constants.SEGMENT, 0L, DIID_XMLDOMDocumentEvents$constants.LAYOUT.byteSize());
    }

    private static class CLSID_DOMDocument$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_DOMDocument").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_DOMDocument
     * }
     */
    public static GroupLayout CLSID_DOMDocument$layout() {
        return CLSID_DOMDocument$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_DOMDocument
     * }
     */
    public static MemorySegment CLSID_DOMDocument() {
        return CLSID_DOMDocument$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_DOMDocument
     * }
     */
    public static void CLSID_DOMDocument(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_DOMDocument$constants.SEGMENT, 0L, CLSID_DOMDocument$constants.LAYOUT.byteSize());
    }

    private static class CLSID_DOMFreeThreadedDocument$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_DOMFreeThreadedDocument").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_DOMFreeThreadedDocument
     * }
     */
    public static GroupLayout CLSID_DOMFreeThreadedDocument$layout() {
        return CLSID_DOMFreeThreadedDocument$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_DOMFreeThreadedDocument
     * }
     */
    public static MemorySegment CLSID_DOMFreeThreadedDocument() {
        return CLSID_DOMFreeThreadedDocument$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_DOMFreeThreadedDocument
     * }
     */
    public static void CLSID_DOMFreeThreadedDocument(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_DOMFreeThreadedDocument$constants.SEGMENT, 0L, CLSID_DOMFreeThreadedDocument$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLHttpRequest$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IXMLHttpRequest").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLHttpRequest
     * }
     */
    public static GroupLayout IID_IXMLHttpRequest$layout() {
        return IID_IXMLHttpRequest$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLHttpRequest
     * }
     */
    public static MemorySegment IID_IXMLHttpRequest() {
        return IID_IXMLHttpRequest$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLHttpRequest
     * }
     */
    public static void IID_IXMLHttpRequest(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLHttpRequest$constants.SEGMENT, 0L, IID_IXMLHttpRequest$constants.LAYOUT.byteSize());
    }

    private static class CLSID_XMLHTTPRequest$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_XMLHTTPRequest").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_XMLHTTPRequest
     * }
     */
    public static GroupLayout CLSID_XMLHTTPRequest$layout() {
        return CLSID_XMLHTTPRequest$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_XMLHTTPRequest
     * }
     */
    public static MemorySegment CLSID_XMLHTTPRequest() {
        return CLSID_XMLHTTPRequest$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_XMLHTTPRequest
     * }
     */
    public static void CLSID_XMLHTTPRequest(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_XMLHTTPRequest$constants.SEGMENT, 0L, CLSID_XMLHTTPRequest$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDSOControl$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IXMLDSOControl").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDSOControl
     * }
     */
    public static GroupLayout IID_IXMLDSOControl$layout() {
        return IID_IXMLDSOControl$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDSOControl
     * }
     */
    public static MemorySegment IID_IXMLDSOControl() {
        return IID_IXMLDSOControl$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDSOControl
     * }
     */
    public static void IID_IXMLDSOControl(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDSOControl$constants.SEGMENT, 0L, IID_IXMLDSOControl$constants.LAYOUT.byteSize());
    }

    private static class CLSID_XMLDSOControl$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_XMLDSOControl").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_XMLDSOControl
     * }
     */
    public static GroupLayout CLSID_XMLDSOControl$layout() {
        return CLSID_XMLDSOControl$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_XMLDSOControl
     * }
     */
    public static MemorySegment CLSID_XMLDSOControl() {
        return CLSID_XMLDSOControl$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_XMLDSOControl
     * }
     */
    public static void CLSID_XMLDSOControl(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_XMLDSOControl$constants.SEGMENT, 0L, CLSID_XMLDSOControl$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLElementCollection$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IXMLElementCollection").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLElementCollection
     * }
     */
    public static GroupLayout IID_IXMLElementCollection$layout() {
        return IID_IXMLElementCollection$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLElementCollection
     * }
     */
    public static MemorySegment IID_IXMLElementCollection() {
        return IID_IXMLElementCollection$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLElementCollection
     * }
     */
    public static void IID_IXMLElementCollection(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLElementCollection$constants.SEGMENT, 0L, IID_IXMLElementCollection$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDocument$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IXMLDocument").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDocument
     * }
     */
    public static GroupLayout IID_IXMLDocument$layout() {
        return IID_IXMLDocument$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDocument
     * }
     */
    public static MemorySegment IID_IXMLDocument() {
        return IID_IXMLDocument$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDocument
     * }
     */
    public static void IID_IXMLDocument(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDocument$constants.SEGMENT, 0L, IID_IXMLDocument$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLDocument2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IXMLDocument2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDocument2
     * }
     */
    public static GroupLayout IID_IXMLDocument2$layout() {
        return IID_IXMLDocument2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDocument2
     * }
     */
    public static MemorySegment IID_IXMLDocument2() {
        return IID_IXMLDocument2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLDocument2
     * }
     */
    public static void IID_IXMLDocument2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLDocument2$constants.SEGMENT, 0L, IID_IXMLDocument2$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLElement$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IXMLElement").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLElement
     * }
     */
    public static GroupLayout IID_IXMLElement$layout() {
        return IID_IXMLElement$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLElement
     * }
     */
    public static MemorySegment IID_IXMLElement() {
        return IID_IXMLElement$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLElement
     * }
     */
    public static void IID_IXMLElement(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLElement$constants.SEGMENT, 0L, IID_IXMLElement$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLElement2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IXMLElement2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLElement2
     * }
     */
    public static GroupLayout IID_IXMLElement2$layout() {
        return IID_IXMLElement2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLElement2
     * }
     */
    public static MemorySegment IID_IXMLElement2() {
        return IID_IXMLElement2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLElement2
     * }
     */
    public static void IID_IXMLElement2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLElement2$constants.SEGMENT, 0L, IID_IXMLElement2$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLAttribute$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IXMLAttribute").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLAttribute
     * }
     */
    public static GroupLayout IID_IXMLAttribute$layout() {
        return IID_IXMLAttribute$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLAttribute
     * }
     */
    public static MemorySegment IID_IXMLAttribute() {
        return IID_IXMLAttribute$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLAttribute
     * }
     */
    public static void IID_IXMLAttribute(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLAttribute$constants.SEGMENT, 0L, IID_IXMLAttribute$constants.LAYOUT.byteSize());
    }

    private static class IID_IXMLError$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IXMLError").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLError
     * }
     */
    public static GroupLayout IID_IXMLError$layout() {
        return IID_IXMLError$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLError
     * }
     */
    public static MemorySegment IID_IXMLError() {
        return IID_IXMLError$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IXMLError
     * }
     */
    public static void IID_IXMLError(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IXMLError$constants.SEGMENT, 0L, IID_IXMLError$constants.LAYOUT.byteSize());
    }

    private static class CLSID_XMLDocument$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_XMLDocument").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_XMLDocument
     * }
     */
    public static GroupLayout CLSID_XMLDocument$layout() {
        return CLSID_XMLDocument$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_XMLDocument
     * }
     */
    public static MemorySegment CLSID_XMLDocument() {
        return CLSID_XMLDocument$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_XMLDocument
     * }
     */
    public static void CLSID_XMLDocument(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_XMLDocument$constants.SEGMENT, 0L, CLSID_XMLDocument$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_msxml_0000_0001_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_msxml_0000_0001_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0001_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_msxml_0000_0001_v0_0_c_ifspec$layout() {
        return __MIDL_itf_msxml_0000_0001_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0001_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_msxml_0000_0001_v0_0_c_ifspec$segment() {
        return __MIDL_itf_msxml_0000_0001_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0001_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_msxml_0000_0001_v0_0_c_ifspec() {
        return __MIDL_itf_msxml_0000_0001_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_msxml_0000_0001_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0001_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_msxml_0000_0001_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_msxml_0000_0001_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_msxml_0000_0001_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_msxml_0000_0001_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_msxml_0000_0001_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0001_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_msxml_0000_0001_v0_0_s_ifspec$layout() {
        return __MIDL_itf_msxml_0000_0001_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0001_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_msxml_0000_0001_v0_0_s_ifspec$segment() {
        return __MIDL_itf_msxml_0000_0001_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0001_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_msxml_0000_0001_v0_0_s_ifspec() {
        return __MIDL_itf_msxml_0000_0001_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_msxml_0000_0001_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0001_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_msxml_0000_0001_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_msxml_0000_0001_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_msxml_0000_0001_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class CLSID_SBS_StdURLMoniker$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_SBS_StdURLMoniker").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_StdURLMoniker
     * }
     */
    public static GroupLayout CLSID_SBS_StdURLMoniker$layout() {
        return CLSID_SBS_StdURLMoniker$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_StdURLMoniker
     * }
     */
    public static MemorySegment CLSID_SBS_StdURLMoniker() {
        return CLSID_SBS_StdURLMoniker$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_StdURLMoniker
     * }
     */
    public static void CLSID_SBS_StdURLMoniker(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_SBS_StdURLMoniker$constants.SEGMENT, 0L, CLSID_SBS_StdURLMoniker$constants.LAYOUT.byteSize());
    }

    private static class CLSID_SBS_HttpProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_SBS_HttpProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_HttpProtocol
     * }
     */
    public static GroupLayout CLSID_SBS_HttpProtocol$layout() {
        return CLSID_SBS_HttpProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_HttpProtocol
     * }
     */
    public static MemorySegment CLSID_SBS_HttpProtocol() {
        return CLSID_SBS_HttpProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_HttpProtocol
     * }
     */
    public static void CLSID_SBS_HttpProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_SBS_HttpProtocol$constants.SEGMENT, 0L, CLSID_SBS_HttpProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_SBS_FtpProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_SBS_FtpProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_FtpProtocol
     * }
     */
    public static GroupLayout CLSID_SBS_FtpProtocol$layout() {
        return CLSID_SBS_FtpProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_FtpProtocol
     * }
     */
    public static MemorySegment CLSID_SBS_FtpProtocol() {
        return CLSID_SBS_FtpProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_FtpProtocol
     * }
     */
    public static void CLSID_SBS_FtpProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_SBS_FtpProtocol$constants.SEGMENT, 0L, CLSID_SBS_FtpProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_SBS_GopherProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_SBS_GopherProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_GopherProtocol
     * }
     */
    public static GroupLayout CLSID_SBS_GopherProtocol$layout() {
        return CLSID_SBS_GopherProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_GopherProtocol
     * }
     */
    public static MemorySegment CLSID_SBS_GopherProtocol() {
        return CLSID_SBS_GopherProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_GopherProtocol
     * }
     */
    public static void CLSID_SBS_GopherProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_SBS_GopherProtocol$constants.SEGMENT, 0L, CLSID_SBS_GopherProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_SBS_HttpSProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_SBS_HttpSProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_HttpSProtocol
     * }
     */
    public static GroupLayout CLSID_SBS_HttpSProtocol$layout() {
        return CLSID_SBS_HttpSProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_HttpSProtocol
     * }
     */
    public static MemorySegment CLSID_SBS_HttpSProtocol() {
        return CLSID_SBS_HttpSProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_HttpSProtocol
     * }
     */
    public static void CLSID_SBS_HttpSProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_SBS_HttpSProtocol$constants.SEGMENT, 0L, CLSID_SBS_HttpSProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_SBS_FileProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_SBS_FileProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_FileProtocol
     * }
     */
    public static GroupLayout CLSID_SBS_FileProtocol$layout() {
        return CLSID_SBS_FileProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_FileProtocol
     * }
     */
    public static MemorySegment CLSID_SBS_FileProtocol() {
        return CLSID_SBS_FileProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_FileProtocol
     * }
     */
    public static void CLSID_SBS_FileProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_SBS_FileProtocol$constants.SEGMENT, 0L, CLSID_SBS_FileProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_SBS_MkProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_SBS_MkProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_MkProtocol
     * }
     */
    public static GroupLayout CLSID_SBS_MkProtocol$layout() {
        return CLSID_SBS_MkProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_MkProtocol
     * }
     */
    public static MemorySegment CLSID_SBS_MkProtocol() {
        return CLSID_SBS_MkProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_MkProtocol
     * }
     */
    public static void CLSID_SBS_MkProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_SBS_MkProtocol$constants.SEGMENT, 0L, CLSID_SBS_MkProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_SBS_UrlMkBindCtx$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_SBS_UrlMkBindCtx").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_UrlMkBindCtx
     * }
     */
    public static GroupLayout CLSID_SBS_UrlMkBindCtx$layout() {
        return CLSID_SBS_UrlMkBindCtx$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_UrlMkBindCtx
     * }
     */
    public static MemorySegment CLSID_SBS_UrlMkBindCtx() {
        return CLSID_SBS_UrlMkBindCtx$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_UrlMkBindCtx
     * }
     */
    public static void CLSID_SBS_UrlMkBindCtx(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_SBS_UrlMkBindCtx$constants.SEGMENT, 0L, CLSID_SBS_UrlMkBindCtx$constants.LAYOUT.byteSize());
    }

    private static class CLSID_SBS_SoftDistExt$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_SBS_SoftDistExt").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_SoftDistExt
     * }
     */
    public static GroupLayout CLSID_SBS_SoftDistExt$layout() {
        return CLSID_SBS_SoftDistExt$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_SoftDistExt
     * }
     */
    public static MemorySegment CLSID_SBS_SoftDistExt() {
        return CLSID_SBS_SoftDistExt$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_SoftDistExt
     * }
     */
    public static void CLSID_SBS_SoftDistExt(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_SBS_SoftDistExt$constants.SEGMENT, 0L, CLSID_SBS_SoftDistExt$constants.LAYOUT.byteSize());
    }

    private static class CLSID_SBS_CdlProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_SBS_CdlProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_CdlProtocol
     * }
     */
    public static GroupLayout CLSID_SBS_CdlProtocol$layout() {
        return CLSID_SBS_CdlProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_CdlProtocol
     * }
     */
    public static MemorySegment CLSID_SBS_CdlProtocol() {
        return CLSID_SBS_CdlProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_CdlProtocol
     * }
     */
    public static void CLSID_SBS_CdlProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_SBS_CdlProtocol$constants.SEGMENT, 0L, CLSID_SBS_CdlProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_SBS_ClassInstallFilter$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_SBS_ClassInstallFilter").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_ClassInstallFilter
     * }
     */
    public static GroupLayout CLSID_SBS_ClassInstallFilter$layout() {
        return CLSID_SBS_ClassInstallFilter$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_ClassInstallFilter
     * }
     */
    public static MemorySegment CLSID_SBS_ClassInstallFilter() {
        return CLSID_SBS_ClassInstallFilter$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_ClassInstallFilter
     * }
     */
    public static void CLSID_SBS_ClassInstallFilter(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_SBS_ClassInstallFilter$constants.SEGMENT, 0L, CLSID_SBS_ClassInstallFilter$constants.LAYOUT.byteSize());
    }

    private static class CLSID_SBS_InternetSecurityManager$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_SBS_InternetSecurityManager").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_InternetSecurityManager
     * }
     */
    public static GroupLayout CLSID_SBS_InternetSecurityManager$layout() {
        return CLSID_SBS_InternetSecurityManager$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_InternetSecurityManager
     * }
     */
    public static MemorySegment CLSID_SBS_InternetSecurityManager() {
        return CLSID_SBS_InternetSecurityManager$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_InternetSecurityManager
     * }
     */
    public static void CLSID_SBS_InternetSecurityManager(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_SBS_InternetSecurityManager$constants.SEGMENT, 0L, CLSID_SBS_InternetSecurityManager$constants.LAYOUT.byteSize());
    }

    private static class CLSID_SBS_InternetZoneManager$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_SBS_InternetZoneManager").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_InternetZoneManager
     * }
     */
    public static GroupLayout CLSID_SBS_InternetZoneManager$layout() {
        return CLSID_SBS_InternetZoneManager$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_InternetZoneManager
     * }
     */
    public static MemorySegment CLSID_SBS_InternetZoneManager() {
        return CLSID_SBS_InternetZoneManager$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SBS_InternetZoneManager
     * }
     */
    public static void CLSID_SBS_InternetZoneManager(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_SBS_InternetZoneManager$constants.SEGMENT, 0L, CLSID_SBS_InternetZoneManager$constants.LAYOUT.byteSize());
    }

    private static class IID_IAsyncMoniker$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IAsyncMoniker").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAsyncMoniker
     * }
     */
    public static GroupLayout IID_IAsyncMoniker$layout() {
        return IID_IAsyncMoniker$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAsyncMoniker
     * }
     */
    public static MemorySegment IID_IAsyncMoniker() {
        return IID_IAsyncMoniker$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAsyncMoniker
     * }
     */
    public static void IID_IAsyncMoniker(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IAsyncMoniker$constants.SEGMENT, 0L, IID_IAsyncMoniker$constants.LAYOUT.byteSize());
    }

    private static class CLSID_StdURLMoniker$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_StdURLMoniker").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_StdURLMoniker
     * }
     */
    public static GroupLayout CLSID_StdURLMoniker$layout() {
        return CLSID_StdURLMoniker$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_StdURLMoniker
     * }
     */
    public static MemorySegment CLSID_StdURLMoniker() {
        return CLSID_StdURLMoniker$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_StdURLMoniker
     * }
     */
    public static void CLSID_StdURLMoniker(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_StdURLMoniker$constants.SEGMENT, 0L, CLSID_StdURLMoniker$constants.LAYOUT.byteSize());
    }

    private static class CLSID_HttpProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_HttpProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_HttpProtocol
     * }
     */
    public static GroupLayout CLSID_HttpProtocol$layout() {
        return CLSID_HttpProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_HttpProtocol
     * }
     */
    public static MemorySegment CLSID_HttpProtocol() {
        return CLSID_HttpProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_HttpProtocol
     * }
     */
    public static void CLSID_HttpProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_HttpProtocol$constants.SEGMENT, 0L, CLSID_HttpProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_FtpProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_FtpProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_FtpProtocol
     * }
     */
    public static GroupLayout CLSID_FtpProtocol$layout() {
        return CLSID_FtpProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_FtpProtocol
     * }
     */
    public static MemorySegment CLSID_FtpProtocol() {
        return CLSID_FtpProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_FtpProtocol
     * }
     */
    public static void CLSID_FtpProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_FtpProtocol$constants.SEGMENT, 0L, CLSID_FtpProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_GopherProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_GopherProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_GopherProtocol
     * }
     */
    public static GroupLayout CLSID_GopherProtocol$layout() {
        return CLSID_GopherProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_GopherProtocol
     * }
     */
    public static MemorySegment CLSID_GopherProtocol() {
        return CLSID_GopherProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_GopherProtocol
     * }
     */
    public static void CLSID_GopherProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_GopherProtocol$constants.SEGMENT, 0L, CLSID_GopherProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_HttpSProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_HttpSProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_HttpSProtocol
     * }
     */
    public static GroupLayout CLSID_HttpSProtocol$layout() {
        return CLSID_HttpSProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_HttpSProtocol
     * }
     */
    public static MemorySegment CLSID_HttpSProtocol() {
        return CLSID_HttpSProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_HttpSProtocol
     * }
     */
    public static void CLSID_HttpSProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_HttpSProtocol$constants.SEGMENT, 0L, CLSID_HttpSProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_FileProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_FileProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_FileProtocol
     * }
     */
    public static GroupLayout CLSID_FileProtocol$layout() {
        return CLSID_FileProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_FileProtocol
     * }
     */
    public static MemorySegment CLSID_FileProtocol() {
        return CLSID_FileProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_FileProtocol
     * }
     */
    public static void CLSID_FileProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_FileProtocol$constants.SEGMENT, 0L, CLSID_FileProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_ResProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_ResProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_ResProtocol
     * }
     */
    public static GroupLayout CLSID_ResProtocol$layout() {
        return CLSID_ResProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_ResProtocol
     * }
     */
    public static MemorySegment CLSID_ResProtocol() {
        return CLSID_ResProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_ResProtocol
     * }
     */
    public static void CLSID_ResProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_ResProtocol$constants.SEGMENT, 0L, CLSID_ResProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_AboutProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_AboutProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_AboutProtocol
     * }
     */
    public static GroupLayout CLSID_AboutProtocol$layout() {
        return CLSID_AboutProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_AboutProtocol
     * }
     */
    public static MemorySegment CLSID_AboutProtocol() {
        return CLSID_AboutProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_AboutProtocol
     * }
     */
    public static void CLSID_AboutProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_AboutProtocol$constants.SEGMENT, 0L, CLSID_AboutProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_JSProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_JSProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_JSProtocol
     * }
     */
    public static GroupLayout CLSID_JSProtocol$layout() {
        return CLSID_JSProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_JSProtocol
     * }
     */
    public static MemorySegment CLSID_JSProtocol() {
        return CLSID_JSProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_JSProtocol
     * }
     */
    public static void CLSID_JSProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_JSProtocol$constants.SEGMENT, 0L, CLSID_JSProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_MailtoProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_MailtoProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_MailtoProtocol
     * }
     */
    public static GroupLayout CLSID_MailtoProtocol$layout() {
        return CLSID_MailtoProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_MailtoProtocol
     * }
     */
    public static MemorySegment CLSID_MailtoProtocol() {
        return CLSID_MailtoProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_MailtoProtocol
     * }
     */
    public static void CLSID_MailtoProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_MailtoProtocol$constants.SEGMENT, 0L, CLSID_MailtoProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_IE4_PROTOCOLS$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_IE4_PROTOCOLS").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_IE4_PROTOCOLS
     * }
     */
    public static GroupLayout CLSID_IE4_PROTOCOLS$layout() {
        return CLSID_IE4_PROTOCOLS$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_IE4_PROTOCOLS
     * }
     */
    public static MemorySegment CLSID_IE4_PROTOCOLS() {
        return CLSID_IE4_PROTOCOLS$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_IE4_PROTOCOLS
     * }
     */
    public static void CLSID_IE4_PROTOCOLS(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_IE4_PROTOCOLS$constants.SEGMENT, 0L, CLSID_IE4_PROTOCOLS$constants.LAYOUT.byteSize());
    }

    private static class CLSID_MkProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_MkProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_MkProtocol
     * }
     */
    public static GroupLayout CLSID_MkProtocol$layout() {
        return CLSID_MkProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_MkProtocol
     * }
     */
    public static MemorySegment CLSID_MkProtocol() {
        return CLSID_MkProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_MkProtocol
     * }
     */
    public static void CLSID_MkProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_MkProtocol$constants.SEGMENT, 0L, CLSID_MkProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_StdURLProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_StdURLProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_StdURLProtocol
     * }
     */
    public static GroupLayout CLSID_StdURLProtocol$layout() {
        return CLSID_StdURLProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_StdURLProtocol
     * }
     */
    public static MemorySegment CLSID_StdURLProtocol() {
        return CLSID_StdURLProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_StdURLProtocol
     * }
     */
    public static void CLSID_StdURLProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_StdURLProtocol$constants.SEGMENT, 0L, CLSID_StdURLProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_TBAuthProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_TBAuthProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_TBAuthProtocol
     * }
     */
    public static GroupLayout CLSID_TBAuthProtocol$layout() {
        return CLSID_TBAuthProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_TBAuthProtocol
     * }
     */
    public static MemorySegment CLSID_TBAuthProtocol() {
        return CLSID_TBAuthProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_TBAuthProtocol
     * }
     */
    public static void CLSID_TBAuthProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_TBAuthProtocol$constants.SEGMENT, 0L, CLSID_TBAuthProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_UrlMkBindCtx$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_UrlMkBindCtx").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_UrlMkBindCtx
     * }
     */
    public static GroupLayout CLSID_UrlMkBindCtx$layout() {
        return CLSID_UrlMkBindCtx$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_UrlMkBindCtx
     * }
     */
    public static MemorySegment CLSID_UrlMkBindCtx() {
        return CLSID_UrlMkBindCtx$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_UrlMkBindCtx
     * }
     */
    public static void CLSID_UrlMkBindCtx(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_UrlMkBindCtx$constants.SEGMENT, 0L, CLSID_UrlMkBindCtx$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CdlProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_CdlProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_CdlProtocol
     * }
     */
    public static GroupLayout CLSID_CdlProtocol$layout() {
        return CLSID_CdlProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_CdlProtocol
     * }
     */
    public static MemorySegment CLSID_CdlProtocol() {
        return CLSID_CdlProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_CdlProtocol
     * }
     */
    public static void CLSID_CdlProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CdlProtocol$constants.SEGMENT, 0L, CLSID_CdlProtocol$constants.LAYOUT.byteSize());
    }

    private static class CLSID_ClassInstallFilter$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("CLSID_ClassInstallFilter").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_ClassInstallFilter
     * }
     */
    public static GroupLayout CLSID_ClassInstallFilter$layout() {
        return CLSID_ClassInstallFilter$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_ClassInstallFilter
     * }
     */
    public static MemorySegment CLSID_ClassInstallFilter() {
        return CLSID_ClassInstallFilter$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_ClassInstallFilter
     * }
     */
    public static void CLSID_ClassInstallFilter(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_ClassInstallFilter$constants.SEGMENT, 0L, CLSID_ClassInstallFilter$constants.LAYOUT.byteSize());
    }

    private static class IID_IAsyncBindCtx$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IAsyncBindCtx").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAsyncBindCtx
     * }
     */
    public static GroupLayout IID_IAsyncBindCtx$layout() {
        return IID_IAsyncBindCtx$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAsyncBindCtx
     * }
     */
    public static MemorySegment IID_IAsyncBindCtx() {
        return IID_IAsyncBindCtx$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAsyncBindCtx
     * }
     */
    public static void IID_IAsyncBindCtx(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IAsyncBindCtx$constants.SEGMENT, 0L, IID_IAsyncBindCtx$constants.LAYOUT.byteSize());
    }

    private static class CreateURLMoniker {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CreateURLMoniker");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateURLMoniker(LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER *ppmk)
     * }
     */
    public static FunctionDescriptor CreateURLMoniker$descriptor() {
        return CreateURLMoniker.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateURLMoniker(LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER *ppmk)
     * }
     */
    public static MethodHandle CreateURLMoniker$handle() {
        return CreateURLMoniker.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CreateURLMoniker(LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER *ppmk)
     * }
     */
    public static MemorySegment CreateURLMoniker$address() {
        return CreateURLMoniker.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CreateURLMoniker(LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER *ppmk)
     * }
     */
    public static int CreateURLMoniker(MemorySegment pMkCtx, MemorySegment szURL, MemorySegment ppmk) {
        var mh$ = CreateURLMoniker.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateURLMoniker", pMkCtx, szURL, ppmk);
            }
            return (int)mh$.invokeExact(pMkCtx, szURL, ppmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateURLMonikerEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CreateURLMonikerEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateURLMonikerEx(LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER *ppmk, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor CreateURLMonikerEx$descriptor() {
        return CreateURLMonikerEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateURLMonikerEx(LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER *ppmk, DWORD dwFlags)
     * }
     */
    public static MethodHandle CreateURLMonikerEx$handle() {
        return CreateURLMonikerEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CreateURLMonikerEx(LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER *ppmk, DWORD dwFlags)
     * }
     */
    public static MemorySegment CreateURLMonikerEx$address() {
        return CreateURLMonikerEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CreateURLMonikerEx(LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER *ppmk, DWORD dwFlags)
     * }
     */
    public static int CreateURLMonikerEx(MemorySegment pMkCtx, MemorySegment szURL, MemorySegment ppmk, int dwFlags) {
        var mh$ = CreateURLMonikerEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateURLMonikerEx", pMkCtx, szURL, ppmk, dwFlags);
            }
            return (int)mh$.invokeExact(pMkCtx, szURL, ppmk, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetClassURL {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetClassURL");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT GetClassURL(LPCWSTR szURL, CLSID *pClsID)
     * }
     */
    public static FunctionDescriptor GetClassURL$descriptor() {
        return GetClassURL.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT GetClassURL(LPCWSTR szURL, CLSID *pClsID)
     * }
     */
    public static MethodHandle GetClassURL$handle() {
        return GetClassURL.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT GetClassURL(LPCWSTR szURL, CLSID *pClsID)
     * }
     */
    public static MemorySegment GetClassURL$address() {
        return GetClassURL.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT GetClassURL(LPCWSTR szURL, CLSID *pClsID)
     * }
     */
    public static int GetClassURL(MemorySegment szURL, MemorySegment pClsID) {
        var mh$ = GetClassURL.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetClassURL", szURL, pClsID);
            }
            return (int)mh$.invokeExact(szURL, pClsID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateAsyncBindCtx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CreateAsyncBindCtx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateAsyncBindCtx(DWORD reserved, IBindStatusCallback *pBSCb, IEnumFORMATETC *pEFetc, IBindCtx **ppBC)
     * }
     */
    public static FunctionDescriptor CreateAsyncBindCtx$descriptor() {
        return CreateAsyncBindCtx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateAsyncBindCtx(DWORD reserved, IBindStatusCallback *pBSCb, IEnumFORMATETC *pEFetc, IBindCtx **ppBC)
     * }
     */
    public static MethodHandle CreateAsyncBindCtx$handle() {
        return CreateAsyncBindCtx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CreateAsyncBindCtx(DWORD reserved, IBindStatusCallback *pBSCb, IEnumFORMATETC *pEFetc, IBindCtx **ppBC)
     * }
     */
    public static MemorySegment CreateAsyncBindCtx$address() {
        return CreateAsyncBindCtx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CreateAsyncBindCtx(DWORD reserved, IBindStatusCallback *pBSCb, IEnumFORMATETC *pEFetc, IBindCtx **ppBC)
     * }
     */
    public static int CreateAsyncBindCtx(int reserved, MemorySegment pBSCb, MemorySegment pEFetc, MemorySegment ppBC) {
        var mh$ = CreateAsyncBindCtx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateAsyncBindCtx", reserved, pBSCb, pEFetc, ppBC);
            }
            return (int)mh$.invokeExact(reserved, pBSCb, pEFetc, ppBC);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateURLMonikerEx2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CreateURLMonikerEx2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateURLMonikerEx2(LPMONIKER pMkCtx, IUri *pUri, LPMONIKER *ppmk, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor CreateURLMonikerEx2$descriptor() {
        return CreateURLMonikerEx2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateURLMonikerEx2(LPMONIKER pMkCtx, IUri *pUri, LPMONIKER *ppmk, DWORD dwFlags)
     * }
     */
    public static MethodHandle CreateURLMonikerEx2$handle() {
        return CreateURLMonikerEx2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CreateURLMonikerEx2(LPMONIKER pMkCtx, IUri *pUri, LPMONIKER *ppmk, DWORD dwFlags)
     * }
     */
    public static MemorySegment CreateURLMonikerEx2$address() {
        return CreateURLMonikerEx2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CreateURLMonikerEx2(LPMONIKER pMkCtx, IUri *pUri, LPMONIKER *ppmk, DWORD dwFlags)
     * }
     */
    public static int CreateURLMonikerEx2(MemorySegment pMkCtx, MemorySegment pUri, MemorySegment ppmk, int dwFlags) {
        var mh$ = CreateURLMonikerEx2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateURLMonikerEx2", pMkCtx, pUri, ppmk, dwFlags);
            }
            return (int)mh$.invokeExact(pMkCtx, pUri, ppmk, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateAsyncBindCtxEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CreateAsyncBindCtxEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateAsyncBindCtxEx(IBindCtx *pbc, DWORD dwOptions, IBindStatusCallback *pBSCb, IEnumFORMATETC *pEnum, IBindCtx **ppBC, DWORD reserved)
     * }
     */
    public static FunctionDescriptor CreateAsyncBindCtxEx$descriptor() {
        return CreateAsyncBindCtxEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateAsyncBindCtxEx(IBindCtx *pbc, DWORD dwOptions, IBindStatusCallback *pBSCb, IEnumFORMATETC *pEnum, IBindCtx **ppBC, DWORD reserved)
     * }
     */
    public static MethodHandle CreateAsyncBindCtxEx$handle() {
        return CreateAsyncBindCtxEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CreateAsyncBindCtxEx(IBindCtx *pbc, DWORD dwOptions, IBindStatusCallback *pBSCb, IEnumFORMATETC *pEnum, IBindCtx **ppBC, DWORD reserved)
     * }
     */
    public static MemorySegment CreateAsyncBindCtxEx$address() {
        return CreateAsyncBindCtxEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CreateAsyncBindCtxEx(IBindCtx *pbc, DWORD dwOptions, IBindStatusCallback *pBSCb, IEnumFORMATETC *pEnum, IBindCtx **ppBC, DWORD reserved)
     * }
     */
    public static int CreateAsyncBindCtxEx(MemorySegment pbc, int dwOptions, MemorySegment pBSCb, MemorySegment pEnum, MemorySegment ppBC, int reserved) {
        var mh$ = CreateAsyncBindCtxEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateAsyncBindCtxEx", pbc, dwOptions, pBSCb, pEnum, ppBC, reserved);
            }
            return (int)mh$.invokeExact(pbc, dwOptions, pBSCb, pEnum, ppBC, reserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MkParseDisplayNameEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("MkParseDisplayNameEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT MkParseDisplayNameEx(IBindCtx *pbc, LPCWSTR szDisplayName, ULONG *pchEaten, LPMONIKER *ppmk)
     * }
     */
    public static FunctionDescriptor MkParseDisplayNameEx$descriptor() {
        return MkParseDisplayNameEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT MkParseDisplayNameEx(IBindCtx *pbc, LPCWSTR szDisplayName, ULONG *pchEaten, LPMONIKER *ppmk)
     * }
     */
    public static MethodHandle MkParseDisplayNameEx$handle() {
        return MkParseDisplayNameEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT MkParseDisplayNameEx(IBindCtx *pbc, LPCWSTR szDisplayName, ULONG *pchEaten, LPMONIKER *ppmk)
     * }
     */
    public static MemorySegment MkParseDisplayNameEx$address() {
        return MkParseDisplayNameEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT MkParseDisplayNameEx(IBindCtx *pbc, LPCWSTR szDisplayName, ULONG *pchEaten, LPMONIKER *ppmk)
     * }
     */
    public static int MkParseDisplayNameEx(MemorySegment pbc, MemorySegment szDisplayName, MemorySegment pchEaten, MemorySegment ppmk) {
        var mh$ = MkParseDisplayNameEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MkParseDisplayNameEx", pbc, szDisplayName, pchEaten, ppmk);
            }
            return (int)mh$.invokeExact(pbc, szDisplayName, pchEaten, ppmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegisterBindStatusCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RegisterBindStatusCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT RegisterBindStatusCallback(LPBC pBC, IBindStatusCallback *pBSCb, IBindStatusCallback **ppBSCBPrev, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor RegisterBindStatusCallback$descriptor() {
        return RegisterBindStatusCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT RegisterBindStatusCallback(LPBC pBC, IBindStatusCallback *pBSCb, IBindStatusCallback **ppBSCBPrev, DWORD dwReserved)
     * }
     */
    public static MethodHandle RegisterBindStatusCallback$handle() {
        return RegisterBindStatusCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT RegisterBindStatusCallback(LPBC pBC, IBindStatusCallback *pBSCb, IBindStatusCallback **ppBSCBPrev, DWORD dwReserved)
     * }
     */
    public static MemorySegment RegisterBindStatusCallback$address() {
        return RegisterBindStatusCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT RegisterBindStatusCallback(LPBC pBC, IBindStatusCallback *pBSCb, IBindStatusCallback **ppBSCBPrev, DWORD dwReserved)
     * }
     */
    public static int RegisterBindStatusCallback(MemorySegment pBC, MemorySegment pBSCb, MemorySegment ppBSCBPrev, int dwReserved) {
        var mh$ = RegisterBindStatusCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegisterBindStatusCallback", pBC, pBSCb, ppBSCBPrev, dwReserved);
            }
            return (int)mh$.invokeExact(pBC, pBSCb, ppBSCBPrev, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RevokeBindStatusCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RevokeBindStatusCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT RevokeBindStatusCallback(LPBC pBC, IBindStatusCallback *pBSCb)
     * }
     */
    public static FunctionDescriptor RevokeBindStatusCallback$descriptor() {
        return RevokeBindStatusCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT RevokeBindStatusCallback(LPBC pBC, IBindStatusCallback *pBSCb)
     * }
     */
    public static MethodHandle RevokeBindStatusCallback$handle() {
        return RevokeBindStatusCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT RevokeBindStatusCallback(LPBC pBC, IBindStatusCallback *pBSCb)
     * }
     */
    public static MemorySegment RevokeBindStatusCallback$address() {
        return RevokeBindStatusCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT RevokeBindStatusCallback(LPBC pBC, IBindStatusCallback *pBSCb)
     * }
     */
    public static int RevokeBindStatusCallback(MemorySegment pBC, MemorySegment pBSCb) {
        var mh$ = RevokeBindStatusCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RevokeBindStatusCallback", pBC, pBSCb);
            }
            return (int)mh$.invokeExact(pBC, pBSCb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetClassFileOrMime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetClassFileOrMime");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT GetClassFileOrMime(LPBC pBC, LPCWSTR szFilename, LPVOID pBuffer, DWORD cbSize, LPCWSTR szMime, DWORD dwReserved, CLSID *pclsid)
     * }
     */
    public static FunctionDescriptor GetClassFileOrMime$descriptor() {
        return GetClassFileOrMime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT GetClassFileOrMime(LPBC pBC, LPCWSTR szFilename, LPVOID pBuffer, DWORD cbSize, LPCWSTR szMime, DWORD dwReserved, CLSID *pclsid)
     * }
     */
    public static MethodHandle GetClassFileOrMime$handle() {
        return GetClassFileOrMime.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT GetClassFileOrMime(LPBC pBC, LPCWSTR szFilename, LPVOID pBuffer, DWORD cbSize, LPCWSTR szMime, DWORD dwReserved, CLSID *pclsid)
     * }
     */
    public static MemorySegment GetClassFileOrMime$address() {
        return GetClassFileOrMime.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT GetClassFileOrMime(LPBC pBC, LPCWSTR szFilename, LPVOID pBuffer, DWORD cbSize, LPCWSTR szMime, DWORD dwReserved, CLSID *pclsid)
     * }
     */
    public static int GetClassFileOrMime(MemorySegment pBC, MemorySegment szFilename, MemorySegment pBuffer, int cbSize, MemorySegment szMime, int dwReserved, MemorySegment pclsid) {
        var mh$ = GetClassFileOrMime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetClassFileOrMime", pBC, szFilename, pBuffer, cbSize, szMime, dwReserved, pclsid);
            }
            return (int)mh$.invokeExact(pBC, szFilename, pBuffer, cbSize, szMime, dwReserved, pclsid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IsValidURL {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IsValidURL");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT IsValidURL(LPBC pBC, LPCWSTR szURL, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor IsValidURL$descriptor() {
        return IsValidURL.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT IsValidURL(LPBC pBC, LPCWSTR szURL, DWORD dwReserved)
     * }
     */
    public static MethodHandle IsValidURL$handle() {
        return IsValidURL.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT IsValidURL(LPBC pBC, LPCWSTR szURL, DWORD dwReserved)
     * }
     */
    public static MemorySegment IsValidURL$address() {
        return IsValidURL.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT IsValidURL(LPBC pBC, LPCWSTR szURL, DWORD dwReserved)
     * }
     */
    public static int IsValidURL(MemorySegment pBC, MemorySegment szURL, int dwReserved) {
        var mh$ = IsValidURL.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IsValidURL", pBC, szURL, dwReserved);
            }
            return (int)mh$.invokeExact(pBC, szURL, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetClassObjectFromURL {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CoGetClassObjectFromURL");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetClassObjectFromURL(const IID *const rCLASSID, LPCWSTR szCODE, DWORD dwFileVersionMS, DWORD dwFileVersionLS, LPCWSTR szTYPE, LPBINDCTX pBindCtx, DWORD dwClsContext, LPVOID pvReserved, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static FunctionDescriptor CoGetClassObjectFromURL$descriptor() {
        return CoGetClassObjectFromURL.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetClassObjectFromURL(const IID *const rCLASSID, LPCWSTR szCODE, DWORD dwFileVersionMS, DWORD dwFileVersionLS, LPCWSTR szTYPE, LPBINDCTX pBindCtx, DWORD dwClsContext, LPVOID pvReserved, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static MethodHandle CoGetClassObjectFromURL$handle() {
        return CoGetClassObjectFromURL.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoGetClassObjectFromURL(const IID *const rCLASSID, LPCWSTR szCODE, DWORD dwFileVersionMS, DWORD dwFileVersionLS, LPCWSTR szTYPE, LPBINDCTX pBindCtx, DWORD dwClsContext, LPVOID pvReserved, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static MemorySegment CoGetClassObjectFromURL$address() {
        return CoGetClassObjectFromURL.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetClassObjectFromURL(const IID *const rCLASSID, LPCWSTR szCODE, DWORD dwFileVersionMS, DWORD dwFileVersionLS, LPCWSTR szTYPE, LPBINDCTX pBindCtx, DWORD dwClsContext, LPVOID pvReserved, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static int CoGetClassObjectFromURL(MemorySegment rCLASSID, MemorySegment szCODE, int dwFileVersionMS, int dwFileVersionLS, MemorySegment szTYPE, MemorySegment pBindCtx, int dwClsContext, MemorySegment pvReserved, MemorySegment riid, MemorySegment ppv) {
        var mh$ = CoGetClassObjectFromURL.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetClassObjectFromURL", rCLASSID, szCODE, dwFileVersionMS, dwFileVersionLS, szTYPE, pBindCtx, dwClsContext, pvReserved, riid, ppv);
            }
            return (int)mh$.invokeExact(rCLASSID, szCODE, dwFileVersionMS, dwFileVersionLS, szTYPE, pBindCtx, dwClsContext, pvReserved, riid, ppv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEInstallScope {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IEInstallScope");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT IEInstallScope(LPDWORD pdwScope)
     * }
     */
    public static FunctionDescriptor IEInstallScope$descriptor() {
        return IEInstallScope.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT IEInstallScope(LPDWORD pdwScope)
     * }
     */
    public static MethodHandle IEInstallScope$handle() {
        return IEInstallScope.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT IEInstallScope(LPDWORD pdwScope)
     * }
     */
    public static MemorySegment IEInstallScope$address() {
        return IEInstallScope.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT IEInstallScope(LPDWORD pdwScope)
     * }
     */
    public static int IEInstallScope(MemorySegment pdwScope) {
        var mh$ = IEInstallScope.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEInstallScope", pdwScope);
            }
            return (int)mh$.invokeExact(pdwScope);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FaultInIEFeature {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("FaultInIEFeature");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT FaultInIEFeature(HWND hWnd, uCLSSPEC *pClassSpec, QUERYCONTEXT *pQuery, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor FaultInIEFeature$descriptor() {
        return FaultInIEFeature.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT FaultInIEFeature(HWND hWnd, uCLSSPEC *pClassSpec, QUERYCONTEXT *pQuery, DWORD dwFlags)
     * }
     */
    public static MethodHandle FaultInIEFeature$handle() {
        return FaultInIEFeature.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT FaultInIEFeature(HWND hWnd, uCLSSPEC *pClassSpec, QUERYCONTEXT *pQuery, DWORD dwFlags)
     * }
     */
    public static MemorySegment FaultInIEFeature$address() {
        return FaultInIEFeature.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT FaultInIEFeature(HWND hWnd, uCLSSPEC *pClassSpec, QUERYCONTEXT *pQuery, DWORD dwFlags)
     * }
     */
    public static int FaultInIEFeature(MemorySegment hWnd, MemorySegment pClassSpec, MemorySegment pQuery, int dwFlags) {
        var mh$ = FaultInIEFeature.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FaultInIEFeature", hWnd, pClassSpec, pQuery, dwFlags);
            }
            return (int)mh$.invokeExact(hWnd, pClassSpec, pQuery, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetComponentIDFromCLSSPEC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("GetComponentIDFromCLSSPEC");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT GetComponentIDFromCLSSPEC(uCLSSPEC *pClassspec, LPSTR *ppszComponentID)
     * }
     */
    public static FunctionDescriptor GetComponentIDFromCLSSPEC$descriptor() {
        return GetComponentIDFromCLSSPEC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT GetComponentIDFromCLSSPEC(uCLSSPEC *pClassspec, LPSTR *ppszComponentID)
     * }
     */
    public static MethodHandle GetComponentIDFromCLSSPEC$handle() {
        return GetComponentIDFromCLSSPEC.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT GetComponentIDFromCLSSPEC(uCLSSPEC *pClassspec, LPSTR *ppszComponentID)
     * }
     */
    public static MemorySegment GetComponentIDFromCLSSPEC$address() {
        return GetComponentIDFromCLSSPEC.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT GetComponentIDFromCLSSPEC(uCLSSPEC *pClassspec, LPSTR *ppszComponentID)
     * }
     */
    public static int GetComponentIDFromCLSSPEC(MemorySegment pClassspec, MemorySegment ppszComponentID) {
        var mh$ = GetComponentIDFromCLSSPEC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetComponentIDFromCLSSPEC", pClassspec, ppszComponentID);
            }
            return (int)mh$.invokeExact(pClassspec, ppszComponentID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IsAsyncMoniker {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IsAsyncMoniker");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT IsAsyncMoniker(IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor IsAsyncMoniker$descriptor() {
        return IsAsyncMoniker.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT IsAsyncMoniker(IMoniker *pmk)
     * }
     */
    public static MethodHandle IsAsyncMoniker$handle() {
        return IsAsyncMoniker.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT IsAsyncMoniker(IMoniker *pmk)
     * }
     */
    public static MemorySegment IsAsyncMoniker$address() {
        return IsAsyncMoniker.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT IsAsyncMoniker(IMoniker *pmk)
     * }
     */
    public static int IsAsyncMoniker(MemorySegment pmk) {
        var mh$ = IsAsyncMoniker.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IsAsyncMoniker", pmk);
            }
            return (int)mh$.invokeExact(pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateURLBinding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CreateURLBinding");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateURLBinding(LPCWSTR lpszUrl, IBindCtx *pbc, IBinding **ppBdg)
     * }
     */
    public static FunctionDescriptor CreateURLBinding$descriptor() {
        return CreateURLBinding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateURLBinding(LPCWSTR lpszUrl, IBindCtx *pbc, IBinding **ppBdg)
     * }
     */
    public static MethodHandle CreateURLBinding$handle() {
        return CreateURLBinding.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CreateURLBinding(LPCWSTR lpszUrl, IBindCtx *pbc, IBinding **ppBdg)
     * }
     */
    public static MemorySegment CreateURLBinding$address() {
        return CreateURLBinding.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CreateURLBinding(LPCWSTR lpszUrl, IBindCtx *pbc, IBinding **ppBdg)
     * }
     */
    public static int CreateURLBinding(MemorySegment lpszUrl, MemorySegment pbc, MemorySegment ppBdg) {
        var mh$ = CreateURLBinding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateURLBinding", lpszUrl, pbc, ppBdg);
            }
            return (int)mh$.invokeExact(lpszUrl, pbc, ppBdg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegisterMediaTypes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RegisterMediaTypes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT RegisterMediaTypes(UINT ctypes, const LPCSTR *rgszTypes, CLIPFORMAT *rgcfTypes)
     * }
     */
    public static FunctionDescriptor RegisterMediaTypes$descriptor() {
        return RegisterMediaTypes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT RegisterMediaTypes(UINT ctypes, const LPCSTR *rgszTypes, CLIPFORMAT *rgcfTypes)
     * }
     */
    public static MethodHandle RegisterMediaTypes$handle() {
        return RegisterMediaTypes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT RegisterMediaTypes(UINT ctypes, const LPCSTR *rgszTypes, CLIPFORMAT *rgcfTypes)
     * }
     */
    public static MemorySegment RegisterMediaTypes$address() {
        return RegisterMediaTypes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT RegisterMediaTypes(UINT ctypes, const LPCSTR *rgszTypes, CLIPFORMAT *rgcfTypes)
     * }
     */
    public static int RegisterMediaTypes(int ctypes, MemorySegment rgszTypes, MemorySegment rgcfTypes) {
        var mh$ = RegisterMediaTypes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegisterMediaTypes", ctypes, rgszTypes, rgcfTypes);
            }
            return (int)mh$.invokeExact(ctypes, rgszTypes, rgcfTypes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FindMediaType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("FindMediaType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT FindMediaType(LPCSTR rgszTypes, CLIPFORMAT *rgcfTypes)
     * }
     */
    public static FunctionDescriptor FindMediaType$descriptor() {
        return FindMediaType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT FindMediaType(LPCSTR rgszTypes, CLIPFORMAT *rgcfTypes)
     * }
     */
    public static MethodHandle FindMediaType$handle() {
        return FindMediaType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT FindMediaType(LPCSTR rgszTypes, CLIPFORMAT *rgcfTypes)
     * }
     */
    public static MemorySegment FindMediaType$address() {
        return FindMediaType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT FindMediaType(LPCSTR rgszTypes, CLIPFORMAT *rgcfTypes)
     * }
     */
    public static int FindMediaType(MemorySegment rgszTypes, MemorySegment rgcfTypes) {
        var mh$ = FindMediaType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FindMediaType", rgszTypes, rgcfTypes);
            }
            return (int)mh$.invokeExact(rgszTypes, rgcfTypes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateFormatEnumerator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CreateFormatEnumerator");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateFormatEnumerator(UINT cfmtetc, FORMATETC *rgfmtetc, IEnumFORMATETC **ppenumfmtetc)
     * }
     */
    public static FunctionDescriptor CreateFormatEnumerator$descriptor() {
        return CreateFormatEnumerator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateFormatEnumerator(UINT cfmtetc, FORMATETC *rgfmtetc, IEnumFORMATETC **ppenumfmtetc)
     * }
     */
    public static MethodHandle CreateFormatEnumerator$handle() {
        return CreateFormatEnumerator.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CreateFormatEnumerator(UINT cfmtetc, FORMATETC *rgfmtetc, IEnumFORMATETC **ppenumfmtetc)
     * }
     */
    public static MemorySegment CreateFormatEnumerator$address() {
        return CreateFormatEnumerator.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CreateFormatEnumerator(UINT cfmtetc, FORMATETC *rgfmtetc, IEnumFORMATETC **ppenumfmtetc)
     * }
     */
    public static int CreateFormatEnumerator(int cfmtetc, MemorySegment rgfmtetc, MemorySegment ppenumfmtetc) {
        var mh$ = CreateFormatEnumerator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateFormatEnumerator", cfmtetc, rgfmtetc, ppenumfmtetc);
            }
            return (int)mh$.invokeExact(cfmtetc, rgfmtetc, ppenumfmtetc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegisterFormatEnumerator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RegisterFormatEnumerator");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT RegisterFormatEnumerator(LPBC pBC, IEnumFORMATETC *pEFetc, DWORD reserved)
     * }
     */
    public static FunctionDescriptor RegisterFormatEnumerator$descriptor() {
        return RegisterFormatEnumerator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT RegisterFormatEnumerator(LPBC pBC, IEnumFORMATETC *pEFetc, DWORD reserved)
     * }
     */
    public static MethodHandle RegisterFormatEnumerator$handle() {
        return RegisterFormatEnumerator.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT RegisterFormatEnumerator(LPBC pBC, IEnumFORMATETC *pEFetc, DWORD reserved)
     * }
     */
    public static MemorySegment RegisterFormatEnumerator$address() {
        return RegisterFormatEnumerator.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT RegisterFormatEnumerator(LPBC pBC, IEnumFORMATETC *pEFetc, DWORD reserved)
     * }
     */
    public static int RegisterFormatEnumerator(MemorySegment pBC, MemorySegment pEFetc, int reserved) {
        var mh$ = RegisterFormatEnumerator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegisterFormatEnumerator", pBC, pEFetc, reserved);
            }
            return (int)mh$.invokeExact(pBC, pEFetc, reserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RevokeFormatEnumerator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RevokeFormatEnumerator");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT RevokeFormatEnumerator(LPBC pBC, IEnumFORMATETC *pEFetc)
     * }
     */
    public static FunctionDescriptor RevokeFormatEnumerator$descriptor() {
        return RevokeFormatEnumerator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT RevokeFormatEnumerator(LPBC pBC, IEnumFORMATETC *pEFetc)
     * }
     */
    public static MethodHandle RevokeFormatEnumerator$handle() {
        return RevokeFormatEnumerator.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT RevokeFormatEnumerator(LPBC pBC, IEnumFORMATETC *pEFetc)
     * }
     */
    public static MemorySegment RevokeFormatEnumerator$address() {
        return RevokeFormatEnumerator.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT RevokeFormatEnumerator(LPBC pBC, IEnumFORMATETC *pEFetc)
     * }
     */
    public static int RevokeFormatEnumerator(MemorySegment pBC, MemorySegment pEFetc) {
        var mh$ = RevokeFormatEnumerator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RevokeFormatEnumerator", pBC, pEFetc);
            }
            return (int)mh$.invokeExact(pBC, pEFetc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegisterMediaTypeClass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("RegisterMediaTypeClass");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT RegisterMediaTypeClass(LPBC pBC, UINT ctypes, const LPCSTR *rgszTypes, CLSID *rgclsID, DWORD reserved)
     * }
     */
    public static FunctionDescriptor RegisterMediaTypeClass$descriptor() {
        return RegisterMediaTypeClass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT RegisterMediaTypeClass(LPBC pBC, UINT ctypes, const LPCSTR *rgszTypes, CLSID *rgclsID, DWORD reserved)
     * }
     */
    public static MethodHandle RegisterMediaTypeClass$handle() {
        return RegisterMediaTypeClass.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT RegisterMediaTypeClass(LPBC pBC, UINT ctypes, const LPCSTR *rgszTypes, CLSID *rgclsID, DWORD reserved)
     * }
     */
    public static MemorySegment RegisterMediaTypeClass$address() {
        return RegisterMediaTypeClass.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT RegisterMediaTypeClass(LPBC pBC, UINT ctypes, const LPCSTR *rgszTypes, CLSID *rgclsID, DWORD reserved)
     * }
     */
    public static int RegisterMediaTypeClass(MemorySegment pBC, int ctypes, MemorySegment rgszTypes, MemorySegment rgclsID, int reserved) {
        var mh$ = RegisterMediaTypeClass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegisterMediaTypeClass", pBC, ctypes, rgszTypes, rgclsID, reserved);
            }
            return (int)mh$.invokeExact(pBC, ctypes, rgszTypes, rgclsID, reserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FindMediaTypeClass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("FindMediaTypeClass");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT FindMediaTypeClass(LPBC pBC, LPCSTR szType, CLSID *pclsID, DWORD reserved)
     * }
     */
    public static FunctionDescriptor FindMediaTypeClass$descriptor() {
        return FindMediaTypeClass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT FindMediaTypeClass(LPBC pBC, LPCSTR szType, CLSID *pclsID, DWORD reserved)
     * }
     */
    public static MethodHandle FindMediaTypeClass$handle() {
        return FindMediaTypeClass.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT FindMediaTypeClass(LPBC pBC, LPCSTR szType, CLSID *pclsID, DWORD reserved)
     * }
     */
    public static MemorySegment FindMediaTypeClass$address() {
        return FindMediaTypeClass.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT FindMediaTypeClass(LPBC pBC, LPCSTR szType, CLSID *pclsID, DWORD reserved)
     * }
     */
    public static int FindMediaTypeClass(MemorySegment pBC, MemorySegment szType, MemorySegment pclsID, int reserved) {
        var mh$ = FindMediaTypeClass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FindMediaTypeClass", pBC, szType, pclsID, reserved);
            }
            return (int)mh$.invokeExact(pBC, szType, pclsID, reserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UrlMkSetSessionOption {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("UrlMkSetSessionOption");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT UrlMkSetSessionOption(DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor UrlMkSetSessionOption$descriptor() {
        return UrlMkSetSessionOption.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT UrlMkSetSessionOption(DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD dwReserved)
     * }
     */
    public static MethodHandle UrlMkSetSessionOption$handle() {
        return UrlMkSetSessionOption.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT UrlMkSetSessionOption(DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD dwReserved)
     * }
     */
    public static MemorySegment UrlMkSetSessionOption$address() {
        return UrlMkSetSessionOption.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT UrlMkSetSessionOption(DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD dwReserved)
     * }
     */
    public static int UrlMkSetSessionOption(int dwOption, MemorySegment pBuffer, int dwBufferLength, int dwReserved) {
        var mh$ = UrlMkSetSessionOption.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UrlMkSetSessionOption", dwOption, pBuffer, dwBufferLength, dwReserved);
            }
            return (int)mh$.invokeExact(dwOption, pBuffer, dwBufferLength, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UrlMkGetSessionOption {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("UrlMkGetSessionOption");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT UrlMkGetSessionOption(DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD *pdwBufferLengthOut, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor UrlMkGetSessionOption$descriptor() {
        return UrlMkGetSessionOption.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT UrlMkGetSessionOption(DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD *pdwBufferLengthOut, DWORD dwReserved)
     * }
     */
    public static MethodHandle UrlMkGetSessionOption$handle() {
        return UrlMkGetSessionOption.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT UrlMkGetSessionOption(DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD *pdwBufferLengthOut, DWORD dwReserved)
     * }
     */
    public static MemorySegment UrlMkGetSessionOption$address() {
        return UrlMkGetSessionOption.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT UrlMkGetSessionOption(DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD *pdwBufferLengthOut, DWORD dwReserved)
     * }
     */
    public static int UrlMkGetSessionOption(int dwOption, MemorySegment pBuffer, int dwBufferLength, MemorySegment pdwBufferLengthOut, int dwReserved) {
        var mh$ = UrlMkGetSessionOption.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UrlMkGetSessionOption", dwOption, pBuffer, dwBufferLength, pdwBufferLengthOut, dwReserved);
            }
            return (int)mh$.invokeExact(dwOption, pBuffer, dwBufferLength, pdwBufferLengthOut, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FindMimeFromData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("FindMimeFromData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT FindMimeFromData(LPBC pBC, LPCWSTR pwzUrl, LPVOID pBuffer, DWORD cbSize, LPCWSTR pwzMimeProposed, DWORD dwMimeFlags, LPWSTR *ppwzMimeOut, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor FindMimeFromData$descriptor() {
        return FindMimeFromData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT FindMimeFromData(LPBC pBC, LPCWSTR pwzUrl, LPVOID pBuffer, DWORD cbSize, LPCWSTR pwzMimeProposed, DWORD dwMimeFlags, LPWSTR *ppwzMimeOut, DWORD dwReserved)
     * }
     */
    public static MethodHandle FindMimeFromData$handle() {
        return FindMimeFromData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT FindMimeFromData(LPBC pBC, LPCWSTR pwzUrl, LPVOID pBuffer, DWORD cbSize, LPCWSTR pwzMimeProposed, DWORD dwMimeFlags, LPWSTR *ppwzMimeOut, DWORD dwReserved)
     * }
     */
    public static MemorySegment FindMimeFromData$address() {
        return FindMimeFromData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT FindMimeFromData(LPBC pBC, LPCWSTR pwzUrl, LPVOID pBuffer, DWORD cbSize, LPCWSTR pwzMimeProposed, DWORD dwMimeFlags, LPWSTR *ppwzMimeOut, DWORD dwReserved)
     * }
     */
    public static int FindMimeFromData(MemorySegment pBC, MemorySegment pwzUrl, MemorySegment pBuffer, int cbSize, MemorySegment pwzMimeProposed, int dwMimeFlags, MemorySegment ppwzMimeOut, int dwReserved) {
        var mh$ = FindMimeFromData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FindMimeFromData", pBC, pwzUrl, pBuffer, cbSize, pwzMimeProposed, dwMimeFlags, ppwzMimeOut, dwReserved);
            }
            return (int)mh$.invokeExact(pBC, pwzUrl, pBuffer, cbSize, pwzMimeProposed, dwMimeFlags, ppwzMimeOut, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObtainUserAgentString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("ObtainUserAgentString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT ObtainUserAgentString(DWORD dwOption, LPSTR pszUAOut, DWORD *cbSize)
     * }
     */
    public static FunctionDescriptor ObtainUserAgentString$descriptor() {
        return ObtainUserAgentString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT ObtainUserAgentString(DWORD dwOption, LPSTR pszUAOut, DWORD *cbSize)
     * }
     */
    public static MethodHandle ObtainUserAgentString$handle() {
        return ObtainUserAgentString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT ObtainUserAgentString(DWORD dwOption, LPSTR pszUAOut, DWORD *cbSize)
     * }
     */
    public static MemorySegment ObtainUserAgentString$address() {
        return ObtainUserAgentString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT ObtainUserAgentString(DWORD dwOption, LPSTR pszUAOut, DWORD *cbSize)
     * }
     */
    public static int ObtainUserAgentString(int dwOption, MemorySegment pszUAOut, MemorySegment cbSize) {
        var mh$ = ObtainUserAgentString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObtainUserAgentString", dwOption, pszUAOut, cbSize);
            }
            return (int)mh$.invokeExact(dwOption, pszUAOut, cbSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CompareSecurityIds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CompareSecurityIds");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CompareSecurityIds(BYTE *pbSecurityId1, DWORD dwLen1, BYTE *pbSecurityId2, DWORD dwLen2, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor CompareSecurityIds$descriptor() {
        return CompareSecurityIds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CompareSecurityIds(BYTE *pbSecurityId1, DWORD dwLen1, BYTE *pbSecurityId2, DWORD dwLen2, DWORD dwReserved)
     * }
     */
    public static MethodHandle CompareSecurityIds$handle() {
        return CompareSecurityIds.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CompareSecurityIds(BYTE *pbSecurityId1, DWORD dwLen1, BYTE *pbSecurityId2, DWORD dwLen2, DWORD dwReserved)
     * }
     */
    public static MemorySegment CompareSecurityIds$address() {
        return CompareSecurityIds.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CompareSecurityIds(BYTE *pbSecurityId1, DWORD dwLen1, BYTE *pbSecurityId2, DWORD dwLen2, DWORD dwReserved)
     * }
     */
    public static int CompareSecurityIds(MemorySegment pbSecurityId1, int dwLen1, MemorySegment pbSecurityId2, int dwLen2, int dwReserved) {
        var mh$ = CompareSecurityIds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CompareSecurityIds", pbSecurityId1, dwLen1, pbSecurityId2, dwLen2, dwReserved);
            }
            return (int)mh$.invokeExact(pbSecurityId1, dwLen1, pbSecurityId2, dwLen2, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CompatFlagsFromClsid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("CompatFlagsFromClsid");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CompatFlagsFromClsid(CLSID *pclsid, LPDWORD pdwCompatFlags, LPDWORD pdwMiscStatusFlags)
     * }
     */
    public static FunctionDescriptor CompatFlagsFromClsid$descriptor() {
        return CompatFlagsFromClsid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CompatFlagsFromClsid(CLSID *pclsid, LPDWORD pdwCompatFlags, LPDWORD pdwMiscStatusFlags)
     * }
     */
    public static MethodHandle CompatFlagsFromClsid$handle() {
        return CompatFlagsFromClsid.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CompatFlagsFromClsid(CLSID *pclsid, LPDWORD pdwCompatFlags, LPDWORD pdwMiscStatusFlags)
     * }
     */
    public static MemorySegment CompatFlagsFromClsid$address() {
        return CompatFlagsFromClsid.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CompatFlagsFromClsid(CLSID *pclsid, LPDWORD pdwCompatFlags, LPDWORD pdwMiscStatusFlags)
     * }
     */
    public static int CompatFlagsFromClsid(MemorySegment pclsid, MemorySegment pdwCompatFlags, MemorySegment pdwMiscStatusFlags) {
        var mh$ = CompatFlagsFromClsid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CompatFlagsFromClsid", pclsid, pdwCompatFlags, pdwMiscStatusFlags);
            }
            return (int)mh$.invokeExact(pclsid, pdwCompatFlags, pdwMiscStatusFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int IE_EPM_OBJECT_EVENT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum IEObjectType.IE_EPM_OBJECT_EVENT = 0
     * }
     */
    public static int IE_EPM_OBJECT_EVENT() {
        return IE_EPM_OBJECT_EVENT;
    }
    private static final int IE_EPM_OBJECT_MUTEX = (int)1L;
    /**
     * {@snippet lang=c :
     * enum IEObjectType.IE_EPM_OBJECT_MUTEX = 1
     * }
     */
    public static int IE_EPM_OBJECT_MUTEX() {
        return IE_EPM_OBJECT_MUTEX;
    }
    private static final int IE_EPM_OBJECT_SEMAPHORE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum IEObjectType.IE_EPM_OBJECT_SEMAPHORE = 2
     * }
     */
    public static int IE_EPM_OBJECT_SEMAPHORE() {
        return IE_EPM_OBJECT_SEMAPHORE;
    }
    private static final int IE_EPM_OBJECT_SHARED_MEMORY = (int)3L;
    /**
     * {@snippet lang=c :
     * enum IEObjectType.IE_EPM_OBJECT_SHARED_MEMORY = 3
     * }
     */
    public static int IE_EPM_OBJECT_SHARED_MEMORY() {
        return IE_EPM_OBJECT_SHARED_MEMORY;
    }
    private static final int IE_EPM_OBJECT_WAITABLE_TIMER = (int)4L;
    /**
     * {@snippet lang=c :
     * enum IEObjectType.IE_EPM_OBJECT_WAITABLE_TIMER = 4
     * }
     */
    public static int IE_EPM_OBJECT_WAITABLE_TIMER() {
        return IE_EPM_OBJECT_WAITABLE_TIMER;
    }
    private static final int IE_EPM_OBJECT_FILE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum IEObjectType.IE_EPM_OBJECT_FILE = 5
     * }
     */
    public static int IE_EPM_OBJECT_FILE() {
        return IE_EPM_OBJECT_FILE;
    }
    private static final int IE_EPM_OBJECT_NAMED_PIPE = (int)6L;
    /**
     * {@snippet lang=c :
     * enum IEObjectType.IE_EPM_OBJECT_NAMED_PIPE = 6
     * }
     */
    public static int IE_EPM_OBJECT_NAMED_PIPE() {
        return IE_EPM_OBJECT_NAMED_PIPE;
    }
    private static final int IE_EPM_OBJECT_REGISTRY = (int)7L;
    /**
     * {@snippet lang=c :
     * enum IEObjectType.IE_EPM_OBJECT_REGISTRY = 7
     * }
     */
    public static int IE_EPM_OBJECT_REGISTRY() {
        return IE_EPM_OBJECT_REGISTRY;
    }

    private static class SetAccessForIEAppContainer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("SetAccessForIEAppContainer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SetAccessForIEAppContainer(HANDLE hObject, IEObjectType ieObjectType, DWORD dwAccessMask)
     * }
     */
    public static FunctionDescriptor SetAccessForIEAppContainer$descriptor() {
        return SetAccessForIEAppContainer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SetAccessForIEAppContainer(HANDLE hObject, IEObjectType ieObjectType, DWORD dwAccessMask)
     * }
     */
    public static MethodHandle SetAccessForIEAppContainer$handle() {
        return SetAccessForIEAppContainer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SetAccessForIEAppContainer(HANDLE hObject, IEObjectType ieObjectType, DWORD dwAccessMask)
     * }
     */
    public static MemorySegment SetAccessForIEAppContainer$address() {
        return SetAccessForIEAppContainer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SetAccessForIEAppContainer(HANDLE hObject, IEObjectType ieObjectType, DWORD dwAccessMask)
     * }
     */
    public static int SetAccessForIEAppContainer(MemorySegment hObject, int ieObjectType, int dwAccessMask) {
        var mh$ = SetAccessForIEAppContainer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetAccessForIEAppContainer", hObject, ieObjectType, dwAccessMask);
            }
            return (int)mh$.invokeExact(hObject, ieObjectType, dwAccessMask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IPersistMoniker *LPPERSISTMONIKER
     * }
     */
    public static final AddressLayout LPPERSISTMONIKER = wgl_h.C_POINTER;

    private static class IID_IPersistMoniker$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IPersistMoniker").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersistMoniker
     * }
     */
    public static GroupLayout IID_IPersistMoniker$layout() {
        return IID_IPersistMoniker$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersistMoniker
     * }
     */
    public static MemorySegment IID_IPersistMoniker() {
        return IID_IPersistMoniker$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersistMoniker
     * }
     */
    public static void IID_IPersistMoniker(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IPersistMoniker$constants.SEGMENT, 0L, IID_IPersistMoniker$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IMonikerProp *LPMONIKERPROP
     * }
     */
    public static final AddressLayout LPMONIKERPROP = wgl_h.C_POINTER;
    private static final int MIMETYPEPROP = (int)0L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IMonikerProp_0001.MIMETYPEPROP = 0
     * }
     */
    public static int MIMETYPEPROP() {
        return MIMETYPEPROP;
    }
    private static final int USE_SRC_URL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IMonikerProp_0001.USE_SRC_URL = 1
     * }
     */
    public static int USE_SRC_URL() {
        return USE_SRC_URL;
    }
    private static final int CLASSIDPROP = (int)2L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IMonikerProp_0001.CLASSIDPROP = 2
     * }
     */
    public static int CLASSIDPROP() {
        return CLASSIDPROP;
    }
    private static final int TRUSTEDDOWNLOADPROP = (int)3L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IMonikerProp_0001.TRUSTEDDOWNLOADPROP = 3
     * }
     */
    public static int TRUSTEDDOWNLOADPROP() {
        return TRUSTEDDOWNLOADPROP;
    }
    private static final int POPUPLEVELPROP = (int)4L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IMonikerProp_0001.POPUPLEVELPROP = 4
     * }
     */
    public static int POPUPLEVELPROP() {
        return POPUPLEVELPROP;
    }

    private static class IID_IMonikerProp$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IMonikerProp").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMonikerProp
     * }
     */
    public static GroupLayout IID_IMonikerProp$layout() {
        return IID_IMonikerProp$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMonikerProp
     * }
     */
    public static MemorySegment IID_IMonikerProp() {
        return IID_IMonikerProp$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMonikerProp
     * }
     */
    public static void IID_IMonikerProp(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IMonikerProp$constants.SEGMENT, 0L, IID_IMonikerProp$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IBindProtocol *LPBINDPROTOCOL
     * }
     */
    public static final AddressLayout LPBINDPROTOCOL = wgl_h.C_POINTER;

    private static class IID_IBindProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IBindProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindProtocol
     * }
     */
    public static GroupLayout IID_IBindProtocol$layout() {
        return IID_IBindProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindProtocol
     * }
     */
    public static MemorySegment IID_IBindProtocol() {
        return IID_IBindProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindProtocol
     * }
     */
    public static void IID_IBindProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IBindProtocol$constants.SEGMENT, 0L, IID_IBindProtocol$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IBinding *LPBINDING
     * }
     */
    public static final AddressLayout LPBINDING = wgl_h.C_POINTER;

    private static class IID_IBinding$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("IID_IBinding").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBinding
     * }
     */
    public static GroupLayout IID_IBinding$layout() {
        return IID_IBinding$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBinding
     * }
     */
    public static MemorySegment IID_IBinding() {
        return IID_IBinding$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBinding
     * }
     */
    public static void IID_IBinding(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IBinding$constants.SEGMENT, 0L, IID_IBinding$constants.LAYOUT.byteSize());
    }

    private static class IBinding_RemoteGetBindResult_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IBinding_RemoteGetBindResult_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBinding_RemoteGetBindResult_Proxy(IBinding *This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor IBinding_RemoteGetBindResult_Proxy$descriptor() {
        return IBinding_RemoteGetBindResult_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBinding_RemoteGetBindResult_Proxy(IBinding *This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD dwReserved)
     * }
     */
    public static MethodHandle IBinding_RemoteGetBindResult_Proxy$handle() {
        return IBinding_RemoteGetBindResult_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBinding_RemoteGetBindResult_Proxy(IBinding *This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD dwReserved)
     * }
     */
    public static MemorySegment IBinding_RemoteGetBindResult_Proxy$address() {
        return IBinding_RemoteGetBindResult_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBinding_RemoteGetBindResult_Proxy(IBinding *This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD dwReserved)
     * }
     */
    public static int IBinding_RemoteGetBindResult_Proxy(MemorySegment This, MemorySegment pclsidProtocol, MemorySegment pdwResult, MemorySegment pszResult, int dwReserved) {
        var mh$ = IBinding_RemoteGetBindResult_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBinding_RemoteGetBindResult_Proxy", This, pclsidProtocol, pdwResult, pszResult, dwReserved);
            }
            return (int)mh$.invokeExact(This, pclsidProtocol, pdwResult, pszResult, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBinding_RemoteGetBindResult_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = wgl_h.findOrThrow("IBinding_RemoteGetBindResult_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IBinding_RemoteGetBindResult_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IBinding_RemoteGetBindResult_Stub$descriptor() {
        return IBinding_RemoteGetBindResult_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IBinding_RemoteGetBindResult_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IBinding_RemoteGetBindResult_Stub$handle() {
        return IBinding_RemoteGetBindResult_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IBinding_RemoteGetBindResult_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IBinding_RemoteGetBindResult_Stub$address() {
        return IBinding_RemoteGetBindResult_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IBinding_RemoteGetBindResult_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IBinding_RemoteGetBindResult_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IBinding_RemoteGetBindResult_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBinding_RemoteGetBindResult_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = wgl_h.C_POINTER;
        public static final MemorySegment SEGMENT = wgl_h.findOrThrow("__MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IBindStatusCallback *LPBINDSTATUSCALLBACK
     * }
     */
    public static final AddressLayout LPBINDSTATUSCALLBACK = wgl_h.C_POINTER;
    private static final int BINDVERB_GET = (int)0L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0001.BINDVERB_GET = 0
     * }
     */
    public static int BINDVERB_GET() {
        return BINDVERB_GET;
    }
    private static final int BINDVERB_POST = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0001.BINDVERB_POST = 1
     * }
     */
    public static int BINDVERB_POST() {
        return BINDVERB_POST;
    }
    private static final int BINDVERB_PUT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0001.BINDVERB_PUT = 2
     * }
     */
    public static int BINDVERB_PUT() {
        return BINDVERB_PUT;
    }
    private static final int BINDVERB_CUSTOM = (int)3L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0001.BINDVERB_CUSTOM = 3
     * }
     */
    public static int BINDVERB_CUSTOM() {
        return BINDVERB_CUSTOM;
    }
    private static final int BINDVERB_RESERVED1 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0001.BINDVERB_RESERVED1 = 4
     * }
     */
    public static int BINDVERB_RESERVED1() {
        return BINDVERB_RESERVED1;
    }
    private static final int BINDINFOF_URLENCODESTGMEDDATA = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0002.BINDINFOF_URLENCODESTGMEDDATA = 1
     * }
     */
    public static int BINDINFOF_URLENCODESTGMEDDATA() {
        return BINDINFOF_URLENCODESTGMEDDATA;
    }
    private static final int BINDINFOF_URLENCODEDEXTRAINFO = (int)2L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0002.BINDINFOF_URLENCODEDEXTRAINFO = 2
     * }
     */
    public static int BINDINFOF_URLENCODEDEXTRAINFO() {
        return BINDINFOF_URLENCODEDEXTRAINFO;
    }
    private static final int BINDF_ASYNCHRONOUS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_ASYNCHRONOUS = 1
     * }
     */
    public static int BINDF_ASYNCHRONOUS() {
        return BINDF_ASYNCHRONOUS;
    }
    private static final int BINDF_ASYNCSTORAGE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_ASYNCSTORAGE = 2
     * }
     */
    public static int BINDF_ASYNCSTORAGE() {
        return BINDF_ASYNCSTORAGE;
    }
    private static final int BINDF_NOPROGRESSIVERENDERING = (int)4L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_NOPROGRESSIVERENDERING = 4
     * }
     */
    public static int BINDF_NOPROGRESSIVERENDERING() {
        return BINDF_NOPROGRESSIVERENDERING;
    }
    private static final int BINDF_OFFLINEOPERATION = (int)8L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_OFFLINEOPERATION = 8
     * }
     */
    public static int BINDF_OFFLINEOPERATION() {
        return BINDF_OFFLINEOPERATION;
    }
    private static final int BINDF_GETNEWESTVERSION = (int)16L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_GETNEWESTVERSION = 16
     * }
     */
    public static int BINDF_GETNEWESTVERSION() {
        return BINDF_GETNEWESTVERSION;
    }
    private static final int BINDF_NOWRITECACHE = (int)32L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_NOWRITECACHE = 32
     * }
     */
    public static int BINDF_NOWRITECACHE() {
        return BINDF_NOWRITECACHE;
    }
    private static final int BINDF_NEEDFILE = (int)64L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_NEEDFILE = 64
     * }
     */
    public static int BINDF_NEEDFILE() {
        return BINDF_NEEDFILE;
    }
    private static final int BINDF_PULLDATA = (int)128L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_PULLDATA = 128
     * }
     */
    public static int BINDF_PULLDATA() {
        return BINDF_PULLDATA;
    }
    private static final int BINDF_IGNORESECURITYPROBLEM = (int)256L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_IGNORESECURITYPROBLEM = 256
     * }
     */
    public static int BINDF_IGNORESECURITYPROBLEM() {
        return BINDF_IGNORESECURITYPROBLEM;
    }
    private static final int BINDF_RESYNCHRONIZE = (int)512L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_RESYNCHRONIZE = 512
     * }
     */
    public static int BINDF_RESYNCHRONIZE() {
        return BINDF_RESYNCHRONIZE;
    }
    private static final int BINDF_HYPERLINK = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_HYPERLINK = 1024
     * }
     */
    public static int BINDF_HYPERLINK() {
        return BINDF_HYPERLINK;
    }
    private static final int BINDF_NO_UI = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_NO_UI = 2048
     * }
     */
    public static int BINDF_NO_UI() {
        return BINDF_NO_UI;
    }
    private static final int BINDF_SILENTOPERATION = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_SILENTOPERATION = 4096
     * }
     */
    public static int BINDF_SILENTOPERATION() {
        return BINDF_SILENTOPERATION;
    }
    private static final int BINDF_PRAGMA_NO_CACHE = (int)8192L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_PRAGMA_NO_CACHE = 8192
     * }
     */
    public static int BINDF_PRAGMA_NO_CACHE() {
        return BINDF_PRAGMA_NO_CACHE;
    }
    private static final int BINDF_GETCLASSOBJECT = (int)16384L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_GETCLASSOBJECT = 16384
     * }
     */
    public static int BINDF_GETCLASSOBJECT() {
        return BINDF_GETCLASSOBJECT;
    }
    private static final int BINDF_RESERVED_1 = (int)32768L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_RESERVED_1 = 32768
     * }
     */
    public static int BINDF_RESERVED_1() {
        return BINDF_RESERVED_1;
    }
    private static final int BINDF_FREE_THREADED = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_FREE_THREADED = 65536
     * }
     */
    public static int BINDF_FREE_THREADED() {
        return BINDF_FREE_THREADED;
    }
    private static final int BINDF_DIRECT_READ = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_DIRECT_READ = 131072
     * }
     */
    public static int BINDF_DIRECT_READ() {
        return BINDF_DIRECT_READ;
    }
    private static final int BINDF_FORMS_SUBMIT = (int)262144L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_FORMS_SUBMIT = 262144
     * }
     */
    public static int BINDF_FORMS_SUBMIT() {
        return BINDF_FORMS_SUBMIT;
    }
    private static final int BINDF_GETFROMCACHE_IF_NET_FAIL = (int)524288L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_GETFROMCACHE_IF_NET_FAIL = 524288
     * }
     */
    public static int BINDF_GETFROMCACHE_IF_NET_FAIL() {
        return BINDF_GETFROMCACHE_IF_NET_FAIL;
    }
    private static final int BINDF_FROMURLMON = (int)1048576L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_FROMURLMON = 1048576
     * }
     */
    public static int BINDF_FROMURLMON() {
        return BINDF_FROMURLMON;
    }
    private static final int BINDF_FWD_BACK = (int)2097152L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_FWD_BACK = 2097152
     * }
     */
    public static int BINDF_FWD_BACK() {
        return BINDF_FWD_BACK;
    }
    private static final int BINDF_PREFERDEFAULTHANDLER = (int)4194304L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_PREFERDEFAULTHANDLER = 4194304
     * }
     */
    public static int BINDF_PREFERDEFAULTHANDLER() {
        return BINDF_PREFERDEFAULTHANDLER;
    }
    private static final int BINDF_ENFORCERESTRICTED = (int)8388608L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_ENFORCERESTRICTED = 8388608
     * }
     */
    public static int BINDF_ENFORCERESTRICTED() {
        return BINDF_ENFORCERESTRICTED;
    }
    private static final int BINDF_RESERVED_2 = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_RESERVED_2 = -2147483648
     * }
     */
    public static int BINDF_RESERVED_2() {
        return BINDF_RESERVED_2;
    }
    private static final int BINDF_RESERVED_3 = (int)16777216L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_RESERVED_3 = 16777216
     * }
     */
    public static int BINDF_RESERVED_3() {
        return BINDF_RESERVED_3;
    }
    private static final int BINDF_RESERVED_4 = (int)33554432L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_RESERVED_4 = 33554432
     * }
     */
    public static int BINDF_RESERVED_4() {
        return BINDF_RESERVED_4;
    }
    private static final int BINDF_RESERVED_5 = (int)67108864L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_RESERVED_5 = 67108864
     * }
     */
    public static int BINDF_RESERVED_5() {
        return BINDF_RESERVED_5;
    }
    private static final int BINDF_RESERVED_6 = (int)134217728L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_RESERVED_6 = 134217728
     * }
     */
    public static int BINDF_RESERVED_6() {
        return BINDF_RESERVED_6;
    }
    private static final int BINDF_RESERVED_7 = (int)1073741824L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_RESERVED_7 = 1073741824
     * }
     */
    public static int BINDF_RESERVED_7() {
        return BINDF_RESERVED_7;
    }
    private static final int BINDF_RESERVED_8 = (int)536870912L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0003.BINDF_RESERVED_8 = 536870912
     * }
     */
    public static int BINDF_RESERVED_8() {
        return BINDF_RESERVED_8;
    }
    private static final int URL_ENCODING_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0004.URL_ENCODING_NONE = 0
     * }
     */
    public static int URL_ENCODING_NONE() {
        return URL_ENCODING_NONE;
    }
    private static final int URL_ENCODING_ENABLE_UTF8 = (int)268435456L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0004.URL_ENCODING_ENABLE_UTF8 = 268435456
     * }
     */
    public static int URL_ENCODING_ENABLE_UTF8() {
        return URL_ENCODING_ENABLE_UTF8;
    }
    private static final int URL_ENCODING_DISABLE_UTF8 = (int)536870912L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0004.URL_ENCODING_DISABLE_UTF8 = 536870912
     * }
     */
    public static int URL_ENCODING_DISABLE_UTF8() {
        return URL_ENCODING_DISABLE_UTF8;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _REMSECURITY_ATTRIBUTES {
     *     DWORD nLength;
     *     DWORD lpSecurityDescriptor;
     *     BOOL bInheritHandle;
     * } *PREMSECURITY_ATTRIBUTES
     * }
     */
    public static final AddressLayout PREMSECURITY_ATTRIBUTES = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _REMSECURITY_ATTRIBUTES {
     *     DWORD nLength;
     *     DWORD lpSecurityDescriptor;
     *     BOOL bInheritHandle;
     * } *LPREMSECURITY_ATTRIBUTES
     * }
     */
    public static final AddressLayout LPREMSECURITY_ATTRIBUTES = wgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagRemFORMATETC {
     *     DWORD cfFormat;
     *     DWORD ptd;
     *     DWORD dwAspect;
     *     LONG lindex;
     *     DWORD tymed;
     * } *LPREMFORMATETC
     * }
     */
    public static final AddressLayout LPREMFORMATETC = wgl_h.C_POINTER;
    private static final int BINDINFO_OPTIONS_WININETFLAG = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0005.BINDINFO_OPTIONS_WININETFLAG = 65536
     * }
     */
    public static int BINDINFO_OPTIONS_WININETFLAG() {
        return BINDINFO_OPTIONS_WININETFLAG;
    }
    private static final int BINDINFO_OPTIONS_ENABLE_UTF8 = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0005.BINDINFO_OPTIONS_ENABLE_UTF8 = 131072
     * }
     */
    public static int BINDINFO_OPTIONS_ENABLE_UTF8() {
        return BINDINFO_OPTIONS_ENABLE_UTF8;
    }
    private static final int BINDINFO_OPTIONS_DISABLE_UTF8 = (int)262144L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0005.BINDINFO_OPTIONS_DISABLE_UTF8 = 262144
     * }
     */
    public static int BINDINFO_OPTIONS_DISABLE_UTF8() {
        return BINDINFO_OPTIONS_DISABLE_UTF8;
    }
    private static final int BINDINFO_OPTIONS_USE_IE_ENCODING = (int)524288L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0005.BINDINFO_OPTIONS_USE_IE_ENCODING = 524288
     * }
     */
    public static int BINDINFO_OPTIONS_USE_IE_ENCODING() {
        return BINDINFO_OPTIONS_USE_IE_ENCODING;
    }
    private static final int BINDINFO_OPTIONS_BINDTOOBJECT = (int)1048576L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0005.BINDINFO_OPTIONS_BINDTOOBJECT = 1048576
     * }
     */
    public static int BINDINFO_OPTIONS_BINDTOOBJECT() {
        return BINDINFO_OPTIONS_BINDTOOBJECT;
    }
    private static final int BINDINFO_OPTIONS_SECURITYOPTOUT = (int)2097152L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0005.BINDINFO_OPTIONS_SECURITYOPTOUT = 2097152
     * }
     */
    public static int BINDINFO_OPTIONS_SECURITYOPTOUT() {
        return BINDINFO_OPTIONS_SECURITYOPTOUT;
    }
    private static final int BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN = (int)4194304L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0005.BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN = 4194304
     * }
     */
    public static int BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN() {
        return BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN;
    }
    private static final int BINDINFO_OPTIONS_USEBINDSTRINGCREDS = (int)8388608L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0005.BINDINFO_OPTIONS_USEBINDSTRINGCREDS = 8388608
     * }
     */
    public static int BINDINFO_OPTIONS_USEBINDSTRINGCREDS() {
        return BINDINFO_OPTIONS_USEBINDSTRINGCREDS;
    }
    private static final int BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS = (int)16777216L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0005.BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS = 16777216
     * }
     */
    public static int BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS() {
        return BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS;
    }
    private static final int BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE = (int)33554432L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0005.BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE = 33554432
     * }
     */
    public static int BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE() {
        return BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE;
    }
    private static final int BINDINFO_WPC_DOWNLOADBLOCKED = (int)134217728L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0005.BINDINFO_WPC_DOWNLOADBLOCKED = 134217728
     * }
     */
    public static int BINDINFO_WPC_DOWNLOADBLOCKED() {
        return BINDINFO_WPC_DOWNLOADBLOCKED;
    }
    private static final int BINDINFO_WPC_LOGGING_ENABLED = (int)268435456L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0005.BINDINFO_WPC_LOGGING_ENABLED = 268435456
     * }
     */
    public static int BINDINFO_WPC_LOGGING_ENABLED() {
        return BINDINFO_WPC_LOGGING_ENABLED;
    }
    private static final int BINDINFO_OPTIONS_ALLOWCONNECTDATA = (int)536870912L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0005.BINDINFO_OPTIONS_ALLOWCONNECTDATA = 536870912
     * }
     */
    public static int BINDINFO_OPTIONS_ALLOWCONNECTDATA() {
        return BINDINFO_OPTIONS_ALLOWCONNECTDATA;
    }
    private static final int BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS = (int)1073741824L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0005.BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS = 1073741824
     * }
     */
    public static int BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS() {
        return BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS;
    }
    private static final int BINDINFO_OPTIONS_SHDOCVW_NAVIGATE = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0005.BINDINFO_OPTIONS_SHDOCVW_NAVIGATE = -2147483648
     * }
     */
    public static int BINDINFO_OPTIONS_SHDOCVW_NAVIGATE() {
        return BINDINFO_OPTIONS_SHDOCVW_NAVIGATE;
    }
    private static final int BSCF_FIRSTDATANOTIFICATION = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0006.BSCF_FIRSTDATANOTIFICATION = 1
     * }
     */
    public static int BSCF_FIRSTDATANOTIFICATION() {
        return BSCF_FIRSTDATANOTIFICATION;
    }
    private static final int BSCF_INTERMEDIATEDATANOTIFICATION = (int)2L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0006.BSCF_INTERMEDIATEDATANOTIFICATION = 2
     * }
     */
    public static int BSCF_INTERMEDIATEDATANOTIFICATION() {
        return BSCF_INTERMEDIATEDATANOTIFICATION;
    }
    private static final int BSCF_LASTDATANOTIFICATION = (int)4L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0006.BSCF_LASTDATANOTIFICATION = 4
     * }
     */
    public static int BSCF_LASTDATANOTIFICATION() {
        return BSCF_LASTDATANOTIFICATION;
    }
    private static final int BSCF_DATAFULLYAVAILABLE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0006.BSCF_DATAFULLYAVAILABLE = 8
     * }
     */
    public static int BSCF_DATAFULLYAVAILABLE() {
        return BSCF_DATAFULLYAVAILABLE;
    }
    private static final int BSCF_AVAILABLEDATASIZEUNKNOWN = (int)16L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0006.BSCF_AVAILABLEDATASIZEUNKNOWN = 16
     * }
     */
    public static int BSCF_AVAILABLEDATASIZEUNKNOWN() {
        return BSCF_AVAILABLEDATASIZEUNKNOWN;
    }
    private static final int BSCF_SKIPDRAINDATAFORFILEURLS = (int)32L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0006.BSCF_SKIPDRAINDATAFORFILEURLS = 32
     * }
     */
    public static int BSCF_SKIPDRAINDATAFORFILEURLS() {
        return BSCF_SKIPDRAINDATAFORFILEURLS;
    }
    private static final int BSCF_64BITLENGTHDOWNLOAD = (int)64L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IBindStatusCallback_0006.BSCF_64BITLENGTHDOWNLOAD = 64
     * }
     */
    public static int BSCF_64BITLENGTHDOWNLOAD() {
        return BSCF_64BITLENGTHDOWNLOAD;
    }
    private static final int BINDSTATUS_FINDINGRESOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_FINDINGRESOURCE = 1
     * }
     */
    public static int BINDSTATUS_FINDINGRESOURCE() {
        return BINDSTATUS_FINDINGRESOURCE;
    }
    private static final int BINDSTATUS_CONNECTING = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_CONNECTING = 2
     * }
     */
    public static int BINDSTATUS_CONNECTING() {
        return BINDSTATUS_CONNECTING;
    }
    private static final int BINDSTATUS_REDIRECTING = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagBINDSTATUS.BINDSTATUS_REDIRECTING = 3
     * }
     */
    public static int BINDSTATUS_REDIRECTING() {
        return BINDSTATUS_REDIRECTING;
    }
}

