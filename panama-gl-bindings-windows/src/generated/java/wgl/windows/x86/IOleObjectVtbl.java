// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct IOleObjectVtbl {
 *     HRESULT (*QueryInterface)(IOleObject *, const IID *const, void **) __attribute__((stdcall));
 *     ULONG (*AddRef)(IOleObject *) __attribute__((stdcall));
 *     ULONG (*Release)(IOleObject *) __attribute__((stdcall));
 *     HRESULT (*SetClientSite)(IOleObject *, IOleClientSite *) __attribute__((stdcall));
 *     HRESULT (*GetClientSite)(IOleObject *, IOleClientSite **) __attribute__((stdcall));
 *     HRESULT (*SetHostNames)(IOleObject *, LPCOLESTR, LPCOLESTR) __attribute__((stdcall));
 *     HRESULT (*Close)(IOleObject *, DWORD) __attribute__((stdcall));
 *     HRESULT (*SetMoniker)(IOleObject *, DWORD, IMoniker *) __attribute__((stdcall));
 *     HRESULT (*GetMoniker)(IOleObject *, DWORD, DWORD, IMoniker **) __attribute__((stdcall));
 *     HRESULT (*InitFromData)(IOleObject *, IDataObject *, BOOL, DWORD) __attribute__((stdcall));
 *     HRESULT (*GetClipboardData)(IOleObject *, DWORD, IDataObject **) __attribute__((stdcall));
 *     HRESULT (*DoVerb)(IOleObject *, LONG, LPMSG, IOleClientSite *, LONG, HWND, LPCRECT) __attribute__((stdcall));
 *     HRESULT (*EnumVerbs)(IOleObject *, IEnumOLEVERB **) __attribute__((stdcall));
 *     HRESULT (*Update)(IOleObject *) __attribute__((stdcall));
 *     HRESULT (*IsUpToDate)(IOleObject *) __attribute__((stdcall));
 *     HRESULT (*GetUserClassID)(IOleObject *, CLSID *) __attribute__((stdcall));
 *     HRESULT (*GetUserType)(IOleObject *, DWORD, LPOLESTR *) __attribute__((stdcall));
 *     HRESULT (*SetExtent)(IOleObject *, DWORD, SIZEL *) __attribute__((stdcall));
 *     HRESULT (*GetExtent)(IOleObject *, DWORD, SIZEL *) __attribute__((stdcall));
 *     HRESULT (*Advise)(IOleObject *, IAdviseSink *, DWORD *) __attribute__((stdcall));
 *     HRESULT (*Unadvise)(IOleObject *, DWORD) __attribute__((stdcall));
 *     HRESULT (*EnumAdvise)(IOleObject *, IEnumSTATDATA **) __attribute__((stdcall));
 *     HRESULT (*GetMiscStatus)(IOleObject *, DWORD, DWORD *) __attribute__((stdcall));
 *     HRESULT (*SetColorScheme)(IOleObject *, LOGPALETTE *) __attribute__((stdcall));
 * }
 * }
 */
public class IOleObjectVtbl {

    IOleObjectVtbl() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("QueryInterface"),
        wgl_h.C_POINTER.withName("AddRef"),
        wgl_h.C_POINTER.withName("Release"),
        wgl_h.C_POINTER.withName("SetClientSite"),
        wgl_h.C_POINTER.withName("GetClientSite"),
        wgl_h.C_POINTER.withName("SetHostNames"),
        wgl_h.C_POINTER.withName("Close"),
        wgl_h.C_POINTER.withName("SetMoniker"),
        wgl_h.C_POINTER.withName("GetMoniker"),
        wgl_h.C_POINTER.withName("InitFromData"),
        wgl_h.C_POINTER.withName("GetClipboardData"),
        wgl_h.C_POINTER.withName("DoVerb"),
        wgl_h.C_POINTER.withName("EnumVerbs"),
        wgl_h.C_POINTER.withName("Update"),
        wgl_h.C_POINTER.withName("IsUpToDate"),
        wgl_h.C_POINTER.withName("GetUserClassID"),
        wgl_h.C_POINTER.withName("GetUserType"),
        wgl_h.C_POINTER.withName("SetExtent"),
        wgl_h.C_POINTER.withName("GetExtent"),
        wgl_h.C_POINTER.withName("Advise"),
        wgl_h.C_POINTER.withName("Unadvise"),
        wgl_h.C_POINTER.withName("EnumAdvise"),
        wgl_h.C_POINTER.withName("GetMiscStatus"),
        wgl_h.C_POINTER.withName("SetColorScheme")
    ).withName("IOleObjectVtbl");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IOleObject *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static class QueryInterface {

        QueryInterface() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(QueryInterface.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(QueryInterface.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout QueryInterface$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("QueryInterface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IOleObject *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout QueryInterface$layout() {
        return QueryInterface$LAYOUT;
    }

    private static final long QueryInterface$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IOleObject *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final long QueryInterface$offset() {
        return QueryInterface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IOleObject *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment QueryInterface(MemorySegment struct) {
        return struct.get(QueryInterface$LAYOUT, QueryInterface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IOleObject *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static void QueryInterface(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(QueryInterface$LAYOUT, QueryInterface$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*AddRef)(IOleObject *) __attribute__((stdcall))
     * }
     */
    public static class AddRef {

        AddRef() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(AddRef.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(AddRef.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout AddRef$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("AddRef"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IOleObject *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout AddRef$layout() {
        return AddRef$LAYOUT;
    }

    private static final long AddRef$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IOleObject *) __attribute__((stdcall))
     * }
     */
    public static final long AddRef$offset() {
        return AddRef$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IOleObject *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment AddRef(MemorySegment struct) {
        return struct.get(AddRef$LAYOUT, AddRef$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IOleObject *) __attribute__((stdcall))
     * }
     */
    public static void AddRef(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(AddRef$LAYOUT, AddRef$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*Release)(IOleObject *) __attribute__((stdcall))
     * }
     */
    public static class Release {

        Release() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Release.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Release.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Release$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Release"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IOleObject *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Release$layout() {
        return Release$LAYOUT;
    }

    private static final long Release$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IOleObject *) __attribute__((stdcall))
     * }
     */
    public static final long Release$offset() {
        return Release$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IOleObject *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Release(MemorySegment struct) {
        return struct.get(Release$LAYOUT, Release$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IOleObject *) __attribute__((stdcall))
     * }
     */
    public static void Release(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Release$LAYOUT, Release$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetClientSite)(IOleObject *, IOleClientSite *) __attribute__((stdcall))
     * }
     */
    public static class SetClientSite {

        SetClientSite() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetClientSite.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetClientSite.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetClientSite$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetClientSite"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetClientSite)(IOleObject *, IOleClientSite *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetClientSite$layout() {
        return SetClientSite$LAYOUT;
    }

    private static final long SetClientSite$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetClientSite)(IOleObject *, IOleClientSite *) __attribute__((stdcall))
     * }
     */
    public static final long SetClientSite$offset() {
        return SetClientSite$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetClientSite)(IOleObject *, IOleClientSite *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetClientSite(MemorySegment struct) {
        return struct.get(SetClientSite$LAYOUT, SetClientSite$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetClientSite)(IOleObject *, IOleClientSite *) __attribute__((stdcall))
     * }
     */
    public static void SetClientSite(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetClientSite$LAYOUT, SetClientSite$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetClientSite)(IOleObject *, IOleClientSite **) __attribute__((stdcall))
     * }
     */
    public static class GetClientSite {

        GetClientSite() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetClientSite.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetClientSite.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetClientSite$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetClientSite"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetClientSite)(IOleObject *, IOleClientSite **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetClientSite$layout() {
        return GetClientSite$LAYOUT;
    }

    private static final long GetClientSite$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetClientSite)(IOleObject *, IOleClientSite **) __attribute__((stdcall))
     * }
     */
    public static final long GetClientSite$offset() {
        return GetClientSite$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetClientSite)(IOleObject *, IOleClientSite **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetClientSite(MemorySegment struct) {
        return struct.get(GetClientSite$LAYOUT, GetClientSite$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetClientSite)(IOleObject *, IOleClientSite **) __attribute__((stdcall))
     * }
     */
    public static void GetClientSite(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetClientSite$LAYOUT, GetClientSite$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetHostNames)(IOleObject *, LPCOLESTR, LPCOLESTR) __attribute__((stdcall))
     * }
     */
    public static class SetHostNames {

        SetHostNames() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetHostNames.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetHostNames.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetHostNames$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetHostNames"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetHostNames)(IOleObject *, LPCOLESTR, LPCOLESTR) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetHostNames$layout() {
        return SetHostNames$LAYOUT;
    }

    private static final long SetHostNames$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetHostNames)(IOleObject *, LPCOLESTR, LPCOLESTR) __attribute__((stdcall))
     * }
     */
    public static final long SetHostNames$offset() {
        return SetHostNames$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetHostNames)(IOleObject *, LPCOLESTR, LPCOLESTR) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetHostNames(MemorySegment struct) {
        return struct.get(SetHostNames$LAYOUT, SetHostNames$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetHostNames)(IOleObject *, LPCOLESTR, LPCOLESTR) __attribute__((stdcall))
     * }
     */
    public static void SetHostNames(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetHostNames$LAYOUT, SetHostNames$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*Close)(IOleObject *, DWORD) __attribute__((stdcall))
     * }
     */
    public static class Close {

        Close() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Close.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Close.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Close$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Close"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*Close)(IOleObject *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Close$layout() {
        return Close$LAYOUT;
    }

    private static final long Close$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*Close)(IOleObject *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final long Close$offset() {
        return Close$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*Close)(IOleObject *, DWORD) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Close(MemorySegment struct) {
        return struct.get(Close$LAYOUT, Close$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*Close)(IOleObject *, DWORD) __attribute__((stdcall))
     * }
     */
    public static void Close(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Close$LAYOUT, Close$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetMoniker)(IOleObject *, DWORD, IMoniker *) __attribute__((stdcall))
     * }
     */
    public static class SetMoniker {

        SetMoniker() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetMoniker.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetMoniker.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetMoniker$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetMoniker"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetMoniker)(IOleObject *, DWORD, IMoniker *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetMoniker$layout() {
        return SetMoniker$LAYOUT;
    }

    private static final long SetMoniker$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetMoniker)(IOleObject *, DWORD, IMoniker *) __attribute__((stdcall))
     * }
     */
    public static final long SetMoniker$offset() {
        return SetMoniker$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetMoniker)(IOleObject *, DWORD, IMoniker *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetMoniker(MemorySegment struct) {
        return struct.get(SetMoniker$LAYOUT, SetMoniker$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetMoniker)(IOleObject *, DWORD, IMoniker *) __attribute__((stdcall))
     * }
     */
    public static void SetMoniker(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetMoniker$LAYOUT, SetMoniker$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetMoniker)(IOleObject *, DWORD, DWORD, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static class GetMoniker {

        GetMoniker() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, int _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetMoniker.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetMoniker.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetMoniker$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetMoniker"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetMoniker)(IOleObject *, DWORD, DWORD, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetMoniker$layout() {
        return GetMoniker$LAYOUT;
    }

    private static final long GetMoniker$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetMoniker)(IOleObject *, DWORD, DWORD, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static final long GetMoniker$offset() {
        return GetMoniker$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetMoniker)(IOleObject *, DWORD, DWORD, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetMoniker(MemorySegment struct) {
        return struct.get(GetMoniker$LAYOUT, GetMoniker$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetMoniker)(IOleObject *, DWORD, DWORD, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static void GetMoniker(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetMoniker$LAYOUT, GetMoniker$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*InitFromData)(IOleObject *, IDataObject *, BOOL, DWORD) __attribute__((stdcall))
     * }
     */
    public static class InitFromData {

        InitFromData() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, int _x2, int _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(InitFromData.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(InitFromData.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, int _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout InitFromData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("InitFromData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*InitFromData)(IOleObject *, IDataObject *, BOOL, DWORD) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout InitFromData$layout() {
        return InitFromData$LAYOUT;
    }

    private static final long InitFromData$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*InitFromData)(IOleObject *, IDataObject *, BOOL, DWORD) __attribute__((stdcall))
     * }
     */
    public static final long InitFromData$offset() {
        return InitFromData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*InitFromData)(IOleObject *, IDataObject *, BOOL, DWORD) __attribute__((stdcall))
     * }
     */
    public static MemorySegment InitFromData(MemorySegment struct) {
        return struct.get(InitFromData$LAYOUT, InitFromData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*InitFromData)(IOleObject *, IDataObject *, BOOL, DWORD) __attribute__((stdcall))
     * }
     */
    public static void InitFromData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(InitFromData$LAYOUT, InitFromData$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetClipboardData)(IOleObject *, DWORD, IDataObject **) __attribute__((stdcall))
     * }
     */
    public static class GetClipboardData {

        GetClipboardData() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetClipboardData.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetClipboardData.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetClipboardData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetClipboardData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetClipboardData)(IOleObject *, DWORD, IDataObject **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetClipboardData$layout() {
        return GetClipboardData$LAYOUT;
    }

    private static final long GetClipboardData$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetClipboardData)(IOleObject *, DWORD, IDataObject **) __attribute__((stdcall))
     * }
     */
    public static final long GetClipboardData$offset() {
        return GetClipboardData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetClipboardData)(IOleObject *, DWORD, IDataObject **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetClipboardData(MemorySegment struct) {
        return struct.get(GetClipboardData$LAYOUT, GetClipboardData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetClipboardData)(IOleObject *, DWORD, IDataObject **) __attribute__((stdcall))
     * }
     */
    public static void GetClipboardData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetClipboardData$LAYOUT, GetClipboardData$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*DoVerb)(IOleObject *, LONG, LPMSG, IOleClientSite *, LONG, HWND, LPCRECT) __attribute__((stdcall))
     * }
     */
    public static class DoVerb {

        DoVerb() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, int _x4, MemorySegment _x5, MemorySegment _x6);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(DoVerb.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(DoVerb.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, int _x4, MemorySegment _x5, MemorySegment _x6) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5, _x6);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout DoVerb$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("DoVerb"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*DoVerb)(IOleObject *, LONG, LPMSG, IOleClientSite *, LONG, HWND, LPCRECT) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout DoVerb$layout() {
        return DoVerb$LAYOUT;
    }

    private static final long DoVerb$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*DoVerb)(IOleObject *, LONG, LPMSG, IOleClientSite *, LONG, HWND, LPCRECT) __attribute__((stdcall))
     * }
     */
    public static final long DoVerb$offset() {
        return DoVerb$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*DoVerb)(IOleObject *, LONG, LPMSG, IOleClientSite *, LONG, HWND, LPCRECT) __attribute__((stdcall))
     * }
     */
    public static MemorySegment DoVerb(MemorySegment struct) {
        return struct.get(DoVerb$LAYOUT, DoVerb$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*DoVerb)(IOleObject *, LONG, LPMSG, IOleClientSite *, LONG, HWND, LPCRECT) __attribute__((stdcall))
     * }
     */
    public static void DoVerb(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(DoVerb$LAYOUT, DoVerb$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*EnumVerbs)(IOleObject *, IEnumOLEVERB **) __attribute__((stdcall))
     * }
     */
    public static class EnumVerbs {

        EnumVerbs() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(EnumVerbs.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(EnumVerbs.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout EnumVerbs$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("EnumVerbs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*EnumVerbs)(IOleObject *, IEnumOLEVERB **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout EnumVerbs$layout() {
        return EnumVerbs$LAYOUT;
    }

    private static final long EnumVerbs$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*EnumVerbs)(IOleObject *, IEnumOLEVERB **) __attribute__((stdcall))
     * }
     */
    public static final long EnumVerbs$offset() {
        return EnumVerbs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*EnumVerbs)(IOleObject *, IEnumOLEVERB **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment EnumVerbs(MemorySegment struct) {
        return struct.get(EnumVerbs$LAYOUT, EnumVerbs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*EnumVerbs)(IOleObject *, IEnumOLEVERB **) __attribute__((stdcall))
     * }
     */
    public static void EnumVerbs(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(EnumVerbs$LAYOUT, EnumVerbs$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*Update)(IOleObject *) __attribute__((stdcall))
     * }
     */
    public static class Update {

        Update() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Update.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Update.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Update$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Update"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*Update)(IOleObject *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Update$layout() {
        return Update$LAYOUT;
    }

    private static final long Update$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*Update)(IOleObject *) __attribute__((stdcall))
     * }
     */
    public static final long Update$offset() {
        return Update$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*Update)(IOleObject *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Update(MemorySegment struct) {
        return struct.get(Update$LAYOUT, Update$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*Update)(IOleObject *) __attribute__((stdcall))
     * }
     */
    public static void Update(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Update$LAYOUT, Update$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*IsUpToDate)(IOleObject *) __attribute__((stdcall))
     * }
     */
    public static class IsUpToDate {

        IsUpToDate() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(IsUpToDate.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(IsUpToDate.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout IsUpToDate$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("IsUpToDate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*IsUpToDate)(IOleObject *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout IsUpToDate$layout() {
        return IsUpToDate$LAYOUT;
    }

    private static final long IsUpToDate$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*IsUpToDate)(IOleObject *) __attribute__((stdcall))
     * }
     */
    public static final long IsUpToDate$offset() {
        return IsUpToDate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*IsUpToDate)(IOleObject *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment IsUpToDate(MemorySegment struct) {
        return struct.get(IsUpToDate$LAYOUT, IsUpToDate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*IsUpToDate)(IOleObject *) __attribute__((stdcall))
     * }
     */
    public static void IsUpToDate(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(IsUpToDate$LAYOUT, IsUpToDate$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetUserClassID)(IOleObject *, CLSID *) __attribute__((stdcall))
     * }
     */
    public static class GetUserClassID {

        GetUserClassID() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetUserClassID.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetUserClassID.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetUserClassID$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetUserClassID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetUserClassID)(IOleObject *, CLSID *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetUserClassID$layout() {
        return GetUserClassID$LAYOUT;
    }

    private static final long GetUserClassID$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetUserClassID)(IOleObject *, CLSID *) __attribute__((stdcall))
     * }
     */
    public static final long GetUserClassID$offset() {
        return GetUserClassID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetUserClassID)(IOleObject *, CLSID *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetUserClassID(MemorySegment struct) {
        return struct.get(GetUserClassID$LAYOUT, GetUserClassID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetUserClassID)(IOleObject *, CLSID *) __attribute__((stdcall))
     * }
     */
    public static void GetUserClassID(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetUserClassID$LAYOUT, GetUserClassID$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetUserType)(IOleObject *, DWORD, LPOLESTR *) __attribute__((stdcall))
     * }
     */
    public static class GetUserType {

        GetUserType() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetUserType.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetUserType.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetUserType$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetUserType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetUserType)(IOleObject *, DWORD, LPOLESTR *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetUserType$layout() {
        return GetUserType$LAYOUT;
    }

    private static final long GetUserType$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetUserType)(IOleObject *, DWORD, LPOLESTR *) __attribute__((stdcall))
     * }
     */
    public static final long GetUserType$offset() {
        return GetUserType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetUserType)(IOleObject *, DWORD, LPOLESTR *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetUserType(MemorySegment struct) {
        return struct.get(GetUserType$LAYOUT, GetUserType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetUserType)(IOleObject *, DWORD, LPOLESTR *) __attribute__((stdcall))
     * }
     */
    public static void GetUserType(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetUserType$LAYOUT, GetUserType$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetExtent)(IOleObject *, DWORD, SIZEL *) __attribute__((stdcall))
     * }
     */
    public static class SetExtent {

        SetExtent() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetExtent.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetExtent.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetExtent$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetExtent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetExtent)(IOleObject *, DWORD, SIZEL *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetExtent$layout() {
        return SetExtent$LAYOUT;
    }

    private static final long SetExtent$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetExtent)(IOleObject *, DWORD, SIZEL *) __attribute__((stdcall))
     * }
     */
    public static final long SetExtent$offset() {
        return SetExtent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetExtent)(IOleObject *, DWORD, SIZEL *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetExtent(MemorySegment struct) {
        return struct.get(SetExtent$LAYOUT, SetExtent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetExtent)(IOleObject *, DWORD, SIZEL *) __attribute__((stdcall))
     * }
     */
    public static void SetExtent(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetExtent$LAYOUT, SetExtent$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetExtent)(IOleObject *, DWORD, SIZEL *) __attribute__((stdcall))
     * }
     */
    public static class GetExtent {

        GetExtent() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetExtent.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetExtent.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetExtent$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetExtent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetExtent)(IOleObject *, DWORD, SIZEL *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetExtent$layout() {
        return GetExtent$LAYOUT;
    }

    private static final long GetExtent$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetExtent)(IOleObject *, DWORD, SIZEL *) __attribute__((stdcall))
     * }
     */
    public static final long GetExtent$offset() {
        return GetExtent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetExtent)(IOleObject *, DWORD, SIZEL *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetExtent(MemorySegment struct) {
        return struct.get(GetExtent$LAYOUT, GetExtent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetExtent)(IOleObject *, DWORD, SIZEL *) __attribute__((stdcall))
     * }
     */
    public static void GetExtent(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetExtent$LAYOUT, GetExtent$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*Advise)(IOleObject *, IAdviseSink *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static class Advise {

        Advise() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Advise.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Advise.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Advise$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Advise"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*Advise)(IOleObject *, IAdviseSink *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Advise$layout() {
        return Advise$LAYOUT;
    }

    private static final long Advise$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*Advise)(IOleObject *, IAdviseSink *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static final long Advise$offset() {
        return Advise$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*Advise)(IOleObject *, IAdviseSink *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Advise(MemorySegment struct) {
        return struct.get(Advise$LAYOUT, Advise$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*Advise)(IOleObject *, IAdviseSink *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static void Advise(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Advise$LAYOUT, Advise$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*Unadvise)(IOleObject *, DWORD) __attribute__((stdcall))
     * }
     */
    public static class Unadvise {

        Unadvise() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Unadvise.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Unadvise.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Unadvise$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Unadvise"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*Unadvise)(IOleObject *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Unadvise$layout() {
        return Unadvise$LAYOUT;
    }

    private static final long Unadvise$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*Unadvise)(IOleObject *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final long Unadvise$offset() {
        return Unadvise$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*Unadvise)(IOleObject *, DWORD) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Unadvise(MemorySegment struct) {
        return struct.get(Unadvise$LAYOUT, Unadvise$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*Unadvise)(IOleObject *, DWORD) __attribute__((stdcall))
     * }
     */
    public static void Unadvise(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Unadvise$LAYOUT, Unadvise$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*EnumAdvise)(IOleObject *, IEnumSTATDATA **) __attribute__((stdcall))
     * }
     */
    public static class EnumAdvise {

        EnumAdvise() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(EnumAdvise.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(EnumAdvise.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout EnumAdvise$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("EnumAdvise"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*EnumAdvise)(IOleObject *, IEnumSTATDATA **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout EnumAdvise$layout() {
        return EnumAdvise$LAYOUT;
    }

    private static final long EnumAdvise$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*EnumAdvise)(IOleObject *, IEnumSTATDATA **) __attribute__((stdcall))
     * }
     */
    public static final long EnumAdvise$offset() {
        return EnumAdvise$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*EnumAdvise)(IOleObject *, IEnumSTATDATA **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment EnumAdvise(MemorySegment struct) {
        return struct.get(EnumAdvise$LAYOUT, EnumAdvise$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*EnumAdvise)(IOleObject *, IEnumSTATDATA **) __attribute__((stdcall))
     * }
     */
    public static void EnumAdvise(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(EnumAdvise$LAYOUT, EnumAdvise$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetMiscStatus)(IOleObject *, DWORD, DWORD *) __attribute__((stdcall))
     * }
     */
    public static class GetMiscStatus {

        GetMiscStatus() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetMiscStatus.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetMiscStatus.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetMiscStatus$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetMiscStatus"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetMiscStatus)(IOleObject *, DWORD, DWORD *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetMiscStatus$layout() {
        return GetMiscStatus$LAYOUT;
    }

    private static final long GetMiscStatus$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetMiscStatus)(IOleObject *, DWORD, DWORD *) __attribute__((stdcall))
     * }
     */
    public static final long GetMiscStatus$offset() {
        return GetMiscStatus$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetMiscStatus)(IOleObject *, DWORD, DWORD *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetMiscStatus(MemorySegment struct) {
        return struct.get(GetMiscStatus$LAYOUT, GetMiscStatus$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetMiscStatus)(IOleObject *, DWORD, DWORD *) __attribute__((stdcall))
     * }
     */
    public static void GetMiscStatus(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetMiscStatus$LAYOUT, GetMiscStatus$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetColorScheme)(IOleObject *, LOGPALETTE *) __attribute__((stdcall))
     * }
     */
    public static class SetColorScheme {

        SetColorScheme() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetColorScheme.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetColorScheme.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetColorScheme$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetColorScheme"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetColorScheme)(IOleObject *, LOGPALETTE *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetColorScheme$layout() {
        return SetColorScheme$LAYOUT;
    }

    private static final long SetColorScheme$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetColorScheme)(IOleObject *, LOGPALETTE *) __attribute__((stdcall))
     * }
     */
    public static final long SetColorScheme$offset() {
        return SetColorScheme$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetColorScheme)(IOleObject *, LOGPALETTE *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetColorScheme(MemorySegment struct) {
        return struct.get(SetColorScheme$LAYOUT, SetColorScheme$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetColorScheme)(IOleObject *, LOGPALETTE *) __attribute__((stdcall))
     * }
     */
    public static void SetColorScheme(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetColorScheme$LAYOUT, SetColorScheme$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

