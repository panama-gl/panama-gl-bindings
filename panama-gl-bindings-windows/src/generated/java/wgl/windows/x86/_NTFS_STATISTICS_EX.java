// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _NTFS_STATISTICS_EX {
 *     DWORD LogFileFullExceptions;
 *     DWORD OtherExceptions;
 *     DWORDLONG MftReads;
 *     DWORDLONG MftReadBytes;
 *     DWORDLONG MftWrites;
 *     DWORDLONG MftWriteBytes;
 *     struct {
 *         DWORD Write;
 *         DWORD Create;
 *         DWORD SetInfo;
 *         DWORD Flush;
 *     } MftWritesUserLevel;
 *     DWORD MftWritesFlushForLogFileFull;
 *     DWORD MftWritesLazyWriter;
 *     DWORD MftWritesUserRequest;
 *     DWORDLONG Mft2Writes;
 *     DWORDLONG Mft2WriteBytes;
 *     struct {
 *         DWORD Write;
 *         DWORD Create;
 *         DWORD SetInfo;
 *         DWORD Flush;
 *     } Mft2WritesUserLevel;
 *     DWORD Mft2WritesFlushForLogFileFull;
 *     DWORD Mft2WritesLazyWriter;
 *     DWORD Mft2WritesUserRequest;
 *     DWORDLONG RootIndexReads;
 *     DWORDLONG RootIndexReadBytes;
 *     DWORDLONG RootIndexWrites;
 *     DWORDLONG RootIndexWriteBytes;
 *     DWORDLONG BitmapReads;
 *     DWORDLONG BitmapReadBytes;
 *     DWORDLONG BitmapWrites;
 *     DWORDLONG BitmapWriteBytes;
 *     DWORD BitmapWritesFlushForLogFileFull;
 *     DWORD BitmapWritesLazyWriter;
 *     DWORD BitmapWritesUserRequest;
 *     struct {
 *         DWORD Write;
 *         DWORD Create;
 *         DWORD SetInfo;
 *         DWORD Flush;
 *     } BitmapWritesUserLevel;
 *     DWORDLONG MftBitmapReads;
 *     DWORDLONG MftBitmapReadBytes;
 *     DWORDLONG MftBitmapWrites;
 *     DWORDLONG MftBitmapWriteBytes;
 *     DWORD MftBitmapWritesFlushForLogFileFull;
 *     DWORD MftBitmapWritesLazyWriter;
 *     DWORD MftBitmapWritesUserRequest;
 *     struct {
 *         DWORD Write;
 *         DWORD Create;
 *         DWORD SetInfo;
 *         DWORD Flush;
 *     } MftBitmapWritesUserLevel;
 *     DWORDLONG UserIndexReads;
 *     DWORDLONG UserIndexReadBytes;
 *     DWORDLONG UserIndexWrites;
 *     DWORDLONG UserIndexWriteBytes;
 *     DWORDLONG LogFileReads;
 *     DWORDLONG LogFileReadBytes;
 *     DWORDLONG LogFileWrites;
 *     DWORDLONG LogFileWriteBytes;
 *     struct {
 *         DWORD Calls;
 *         DWORD RunsReturned;
 *         DWORD Hints;
 *         DWORD HintsHonored;
 *         DWORD Cache;
 *         DWORD CacheMiss;
 *         DWORDLONG Clusters;
 *         DWORDLONG HintsClusters;
 *         DWORDLONG CacheClusters;
 *         DWORDLONG CacheMissClusters;
 *     } Allocate;
 *     DWORD DiskResourcesExhausted;
 *     DWORDLONG VolumeTrimCount;
 *     DWORDLONG VolumeTrimTime;
 *     DWORDLONG VolumeTrimByteCount;
 *     DWORDLONG FileLevelTrimCount;
 *     DWORDLONG FileLevelTrimTime;
 *     DWORDLONG FileLevelTrimByteCount;
 *     DWORDLONG VolumeTrimSkippedCount;
 *     DWORDLONG VolumeTrimSkippedByteCount;
 *     DWORDLONG NtfsFillStatInfoFromMftRecordCalledCount;
 *     DWORDLONG NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount;
 *     DWORDLONG NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount;
 * }
 * }
 */
public class _NTFS_STATISTICS_EX {

    _NTFS_STATISTICS_EX() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("LogFileFullExceptions"),
        wgl_h.C_LONG.withName("OtherExceptions"),
        wgl_h.C_LONG_LONG.withName("MftReads"),
        wgl_h.C_LONG_LONG.withName("MftReadBytes"),
        wgl_h.C_LONG_LONG.withName("MftWrites"),
        wgl_h.C_LONG_LONG.withName("MftWriteBytes"),
        _NTFS_STATISTICS_EX.MftWritesUserLevel.layout().withName("MftWritesUserLevel"),
        wgl_h.C_LONG.withName("MftWritesFlushForLogFileFull"),
        wgl_h.C_LONG.withName("MftWritesLazyWriter"),
        wgl_h.C_LONG.withName("MftWritesUserRequest"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_LONG_LONG.withName("Mft2Writes"),
        wgl_h.C_LONG_LONG.withName("Mft2WriteBytes"),
        _NTFS_STATISTICS_EX.Mft2WritesUserLevel.layout().withName("Mft2WritesUserLevel"),
        wgl_h.C_LONG.withName("Mft2WritesFlushForLogFileFull"),
        wgl_h.C_LONG.withName("Mft2WritesLazyWriter"),
        wgl_h.C_LONG.withName("Mft2WritesUserRequest"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_LONG_LONG.withName("RootIndexReads"),
        wgl_h.C_LONG_LONG.withName("RootIndexReadBytes"),
        wgl_h.C_LONG_LONG.withName("RootIndexWrites"),
        wgl_h.C_LONG_LONG.withName("RootIndexWriteBytes"),
        wgl_h.C_LONG_LONG.withName("BitmapReads"),
        wgl_h.C_LONG_LONG.withName("BitmapReadBytes"),
        wgl_h.C_LONG_LONG.withName("BitmapWrites"),
        wgl_h.C_LONG_LONG.withName("BitmapWriteBytes"),
        wgl_h.C_LONG.withName("BitmapWritesFlushForLogFileFull"),
        wgl_h.C_LONG.withName("BitmapWritesLazyWriter"),
        wgl_h.C_LONG.withName("BitmapWritesUserRequest"),
        _NTFS_STATISTICS_EX.BitmapWritesUserLevel.layout().withName("BitmapWritesUserLevel"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_LONG_LONG.withName("MftBitmapReads"),
        wgl_h.C_LONG_LONG.withName("MftBitmapReadBytes"),
        wgl_h.C_LONG_LONG.withName("MftBitmapWrites"),
        wgl_h.C_LONG_LONG.withName("MftBitmapWriteBytes"),
        wgl_h.C_LONG.withName("MftBitmapWritesFlushForLogFileFull"),
        wgl_h.C_LONG.withName("MftBitmapWritesLazyWriter"),
        wgl_h.C_LONG.withName("MftBitmapWritesUserRequest"),
        _NTFS_STATISTICS_EX.MftBitmapWritesUserLevel.layout().withName("MftBitmapWritesUserLevel"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_LONG_LONG.withName("UserIndexReads"),
        wgl_h.C_LONG_LONG.withName("UserIndexReadBytes"),
        wgl_h.C_LONG_LONG.withName("UserIndexWrites"),
        wgl_h.C_LONG_LONG.withName("UserIndexWriteBytes"),
        wgl_h.C_LONG_LONG.withName("LogFileReads"),
        wgl_h.C_LONG_LONG.withName("LogFileReadBytes"),
        wgl_h.C_LONG_LONG.withName("LogFileWrites"),
        wgl_h.C_LONG_LONG.withName("LogFileWriteBytes"),
        _NTFS_STATISTICS_EX.Allocate.layout().withName("Allocate"),
        wgl_h.C_LONG.withName("DiskResourcesExhausted"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_LONG_LONG.withName("VolumeTrimCount"),
        wgl_h.C_LONG_LONG.withName("VolumeTrimTime"),
        wgl_h.C_LONG_LONG.withName("VolumeTrimByteCount"),
        wgl_h.C_LONG_LONG.withName("FileLevelTrimCount"),
        wgl_h.C_LONG_LONG.withName("FileLevelTrimTime"),
        wgl_h.C_LONG_LONG.withName("FileLevelTrimByteCount"),
        wgl_h.C_LONG_LONG.withName("VolumeTrimSkippedCount"),
        wgl_h.C_LONG_LONG.withName("VolumeTrimSkippedByteCount"),
        wgl_h.C_LONG_LONG.withName("NtfsFillStatInfoFromMftRecordCalledCount"),
        wgl_h.C_LONG_LONG.withName("NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount"),
        wgl_h.C_LONG_LONG.withName("NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount")
    ).withName("_NTFS_STATISTICS_EX");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt LogFileFullExceptions$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LogFileFullExceptions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD LogFileFullExceptions
     * }
     */
    public static final OfInt LogFileFullExceptions$layout() {
        return LogFileFullExceptions$LAYOUT;
    }

    private static final long LogFileFullExceptions$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD LogFileFullExceptions
     * }
     */
    public static final long LogFileFullExceptions$offset() {
        return LogFileFullExceptions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD LogFileFullExceptions
     * }
     */
    public static int LogFileFullExceptions(MemorySegment struct) {
        return struct.get(LogFileFullExceptions$LAYOUT, LogFileFullExceptions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD LogFileFullExceptions
     * }
     */
    public static void LogFileFullExceptions(MemorySegment struct, int fieldValue) {
        struct.set(LogFileFullExceptions$LAYOUT, LogFileFullExceptions$OFFSET, fieldValue);
    }

    private static final OfInt OtherExceptions$LAYOUT = (OfInt)$LAYOUT.select(groupElement("OtherExceptions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD OtherExceptions
     * }
     */
    public static final OfInt OtherExceptions$layout() {
        return OtherExceptions$LAYOUT;
    }

    private static final long OtherExceptions$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD OtherExceptions
     * }
     */
    public static final long OtherExceptions$offset() {
        return OtherExceptions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD OtherExceptions
     * }
     */
    public static int OtherExceptions(MemorySegment struct) {
        return struct.get(OtherExceptions$LAYOUT, OtherExceptions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD OtherExceptions
     * }
     */
    public static void OtherExceptions(MemorySegment struct, int fieldValue) {
        struct.set(OtherExceptions$LAYOUT, OtherExceptions$OFFSET, fieldValue);
    }

    private static final OfLong MftReads$LAYOUT = (OfLong)$LAYOUT.select(groupElement("MftReads"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG MftReads
     * }
     */
    public static final OfLong MftReads$layout() {
        return MftReads$LAYOUT;
    }

    private static final long MftReads$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG MftReads
     * }
     */
    public static final long MftReads$offset() {
        return MftReads$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG MftReads
     * }
     */
    public static long MftReads(MemorySegment struct) {
        return struct.get(MftReads$LAYOUT, MftReads$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG MftReads
     * }
     */
    public static void MftReads(MemorySegment struct, long fieldValue) {
        struct.set(MftReads$LAYOUT, MftReads$OFFSET, fieldValue);
    }

    private static final OfLong MftReadBytes$LAYOUT = (OfLong)$LAYOUT.select(groupElement("MftReadBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG MftReadBytes
     * }
     */
    public static final OfLong MftReadBytes$layout() {
        return MftReadBytes$LAYOUT;
    }

    private static final long MftReadBytes$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG MftReadBytes
     * }
     */
    public static final long MftReadBytes$offset() {
        return MftReadBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG MftReadBytes
     * }
     */
    public static long MftReadBytes(MemorySegment struct) {
        return struct.get(MftReadBytes$LAYOUT, MftReadBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG MftReadBytes
     * }
     */
    public static void MftReadBytes(MemorySegment struct, long fieldValue) {
        struct.set(MftReadBytes$LAYOUT, MftReadBytes$OFFSET, fieldValue);
    }

    private static final OfLong MftWrites$LAYOUT = (OfLong)$LAYOUT.select(groupElement("MftWrites"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG MftWrites
     * }
     */
    public static final OfLong MftWrites$layout() {
        return MftWrites$LAYOUT;
    }

    private static final long MftWrites$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG MftWrites
     * }
     */
    public static final long MftWrites$offset() {
        return MftWrites$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG MftWrites
     * }
     */
    public static long MftWrites(MemorySegment struct) {
        return struct.get(MftWrites$LAYOUT, MftWrites$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG MftWrites
     * }
     */
    public static void MftWrites(MemorySegment struct, long fieldValue) {
        struct.set(MftWrites$LAYOUT, MftWrites$OFFSET, fieldValue);
    }

    private static final OfLong MftWriteBytes$LAYOUT = (OfLong)$LAYOUT.select(groupElement("MftWriteBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG MftWriteBytes
     * }
     */
    public static final OfLong MftWriteBytes$layout() {
        return MftWriteBytes$LAYOUT;
    }

    private static final long MftWriteBytes$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG MftWriteBytes
     * }
     */
    public static final long MftWriteBytes$offset() {
        return MftWriteBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG MftWriteBytes
     * }
     */
    public static long MftWriteBytes(MemorySegment struct) {
        return struct.get(MftWriteBytes$LAYOUT, MftWriteBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG MftWriteBytes
     * }
     */
    public static void MftWriteBytes(MemorySegment struct, long fieldValue) {
        struct.set(MftWriteBytes$LAYOUT, MftWriteBytes$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     DWORD Write;
     *     DWORD Create;
     *     DWORD SetInfo;
     *     DWORD Flush;
     * }
     * }
     */
    public static class MftWritesUserLevel {

        MftWritesUserLevel() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            wgl_h.C_LONG.withName("Write"),
            wgl_h.C_LONG.withName("Create"),
            wgl_h.C_LONG.withName("SetInfo"),
            wgl_h.C_LONG.withName("Flush")
        ).withName("$anon$11500:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt Write$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Write"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD Write
         * }
         */
        public static final OfInt Write$layout() {
            return Write$LAYOUT;
        }

        private static final long Write$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD Write
         * }
         */
        public static final long Write$offset() {
            return Write$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD Write
         * }
         */
        public static int Write(MemorySegment struct) {
            return struct.get(Write$LAYOUT, Write$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD Write
         * }
         */
        public static void Write(MemorySegment struct, int fieldValue) {
            struct.set(Write$LAYOUT, Write$OFFSET, fieldValue);
        }

        private static final OfInt Create$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Create"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD Create
         * }
         */
        public static final OfInt Create$layout() {
            return Create$LAYOUT;
        }

        private static final long Create$OFFSET = 4;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD Create
         * }
         */
        public static final long Create$offset() {
            return Create$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD Create
         * }
         */
        public static int Create(MemorySegment struct) {
            return struct.get(Create$LAYOUT, Create$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD Create
         * }
         */
        public static void Create(MemorySegment struct, int fieldValue) {
            struct.set(Create$LAYOUT, Create$OFFSET, fieldValue);
        }

        private static final OfInt SetInfo$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SetInfo"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD SetInfo
         * }
         */
        public static final OfInt SetInfo$layout() {
            return SetInfo$LAYOUT;
        }

        private static final long SetInfo$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD SetInfo
         * }
         */
        public static final long SetInfo$offset() {
            return SetInfo$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD SetInfo
         * }
         */
        public static int SetInfo(MemorySegment struct) {
            return struct.get(SetInfo$LAYOUT, SetInfo$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD SetInfo
         * }
         */
        public static void SetInfo(MemorySegment struct, int fieldValue) {
            struct.set(SetInfo$LAYOUT, SetInfo$OFFSET, fieldValue);
        }

        private static final OfInt Flush$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Flush"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD Flush
         * }
         */
        public static final OfInt Flush$layout() {
            return Flush$LAYOUT;
        }

        private static final long Flush$OFFSET = 12;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD Flush
         * }
         */
        public static final long Flush$offset() {
            return Flush$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD Flush
         * }
         */
        public static int Flush(MemorySegment struct) {
            return struct.get(Flush$LAYOUT, Flush$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD Flush
         * }
         */
        public static void Flush(MemorySegment struct, int fieldValue) {
            struct.set(Flush$LAYOUT, Flush$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout MftWritesUserLevel$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("MftWritesUserLevel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD Write;
     *     DWORD Create;
     *     DWORD SetInfo;
     *     DWORD Flush;
     * } MftWritesUserLevel
     * }
     */
    public static final GroupLayout MftWritesUserLevel$layout() {
        return MftWritesUserLevel$LAYOUT;
    }

    private static final long MftWritesUserLevel$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD Write;
     *     DWORD Create;
     *     DWORD SetInfo;
     *     DWORD Flush;
     * } MftWritesUserLevel
     * }
     */
    public static final long MftWritesUserLevel$offset() {
        return MftWritesUserLevel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD Write;
     *     DWORD Create;
     *     DWORD SetInfo;
     *     DWORD Flush;
     * } MftWritesUserLevel
     * }
     */
    public static MemorySegment MftWritesUserLevel(MemorySegment struct) {
        return struct.asSlice(MftWritesUserLevel$OFFSET, MftWritesUserLevel$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD Write;
     *     DWORD Create;
     *     DWORD SetInfo;
     *     DWORD Flush;
     * } MftWritesUserLevel
     * }
     */
    public static void MftWritesUserLevel(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, MftWritesUserLevel$OFFSET, MftWritesUserLevel$LAYOUT.byteSize());
    }

    private static final OfInt MftWritesFlushForLogFileFull$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MftWritesFlushForLogFileFull"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD MftWritesFlushForLogFileFull
     * }
     */
    public static final OfInt MftWritesFlushForLogFileFull$layout() {
        return MftWritesFlushForLogFileFull$LAYOUT;
    }

    private static final long MftWritesFlushForLogFileFull$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD MftWritesFlushForLogFileFull
     * }
     */
    public static final long MftWritesFlushForLogFileFull$offset() {
        return MftWritesFlushForLogFileFull$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD MftWritesFlushForLogFileFull
     * }
     */
    public static int MftWritesFlushForLogFileFull(MemorySegment struct) {
        return struct.get(MftWritesFlushForLogFileFull$LAYOUT, MftWritesFlushForLogFileFull$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD MftWritesFlushForLogFileFull
     * }
     */
    public static void MftWritesFlushForLogFileFull(MemorySegment struct, int fieldValue) {
        struct.set(MftWritesFlushForLogFileFull$LAYOUT, MftWritesFlushForLogFileFull$OFFSET, fieldValue);
    }

    private static final OfInt MftWritesLazyWriter$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MftWritesLazyWriter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD MftWritesLazyWriter
     * }
     */
    public static final OfInt MftWritesLazyWriter$layout() {
        return MftWritesLazyWriter$LAYOUT;
    }

    private static final long MftWritesLazyWriter$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD MftWritesLazyWriter
     * }
     */
    public static final long MftWritesLazyWriter$offset() {
        return MftWritesLazyWriter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD MftWritesLazyWriter
     * }
     */
    public static int MftWritesLazyWriter(MemorySegment struct) {
        return struct.get(MftWritesLazyWriter$LAYOUT, MftWritesLazyWriter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD MftWritesLazyWriter
     * }
     */
    public static void MftWritesLazyWriter(MemorySegment struct, int fieldValue) {
        struct.set(MftWritesLazyWriter$LAYOUT, MftWritesLazyWriter$OFFSET, fieldValue);
    }

    private static final OfInt MftWritesUserRequest$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MftWritesUserRequest"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD MftWritesUserRequest
     * }
     */
    public static final OfInt MftWritesUserRequest$layout() {
        return MftWritesUserRequest$LAYOUT;
    }

    private static final long MftWritesUserRequest$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD MftWritesUserRequest
     * }
     */
    public static final long MftWritesUserRequest$offset() {
        return MftWritesUserRequest$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD MftWritesUserRequest
     * }
     */
    public static int MftWritesUserRequest(MemorySegment struct) {
        return struct.get(MftWritesUserRequest$LAYOUT, MftWritesUserRequest$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD MftWritesUserRequest
     * }
     */
    public static void MftWritesUserRequest(MemorySegment struct, int fieldValue) {
        struct.set(MftWritesUserRequest$LAYOUT, MftWritesUserRequest$OFFSET, fieldValue);
    }

    private static final OfLong Mft2Writes$LAYOUT = (OfLong)$LAYOUT.select(groupElement("Mft2Writes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG Mft2Writes
     * }
     */
    public static final OfLong Mft2Writes$layout() {
        return Mft2Writes$LAYOUT;
    }

    private static final long Mft2Writes$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG Mft2Writes
     * }
     */
    public static final long Mft2Writes$offset() {
        return Mft2Writes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG Mft2Writes
     * }
     */
    public static long Mft2Writes(MemorySegment struct) {
        return struct.get(Mft2Writes$LAYOUT, Mft2Writes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG Mft2Writes
     * }
     */
    public static void Mft2Writes(MemorySegment struct, long fieldValue) {
        struct.set(Mft2Writes$LAYOUT, Mft2Writes$OFFSET, fieldValue);
    }

    private static final OfLong Mft2WriteBytes$LAYOUT = (OfLong)$LAYOUT.select(groupElement("Mft2WriteBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG Mft2WriteBytes
     * }
     */
    public static final OfLong Mft2WriteBytes$layout() {
        return Mft2WriteBytes$LAYOUT;
    }

    private static final long Mft2WriteBytes$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG Mft2WriteBytes
     * }
     */
    public static final long Mft2WriteBytes$offset() {
        return Mft2WriteBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG Mft2WriteBytes
     * }
     */
    public static long Mft2WriteBytes(MemorySegment struct) {
        return struct.get(Mft2WriteBytes$LAYOUT, Mft2WriteBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG Mft2WriteBytes
     * }
     */
    public static void Mft2WriteBytes(MemorySegment struct, long fieldValue) {
        struct.set(Mft2WriteBytes$LAYOUT, Mft2WriteBytes$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     DWORD Write;
     *     DWORD Create;
     *     DWORD SetInfo;
     *     DWORD Flush;
     * }
     * }
     */
    public static class Mft2WritesUserLevel {

        Mft2WritesUserLevel() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            wgl_h.C_LONG.withName("Write"),
            wgl_h.C_LONG.withName("Create"),
            wgl_h.C_LONG.withName("SetInfo"),
            wgl_h.C_LONG.withName("Flush")
        ).withName("$anon$11513:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt Write$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Write"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD Write
         * }
         */
        public static final OfInt Write$layout() {
            return Write$LAYOUT;
        }

        private static final long Write$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD Write
         * }
         */
        public static final long Write$offset() {
            return Write$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD Write
         * }
         */
        public static int Write(MemorySegment struct) {
            return struct.get(Write$LAYOUT, Write$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD Write
         * }
         */
        public static void Write(MemorySegment struct, int fieldValue) {
            struct.set(Write$LAYOUT, Write$OFFSET, fieldValue);
        }

        private static final OfInt Create$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Create"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD Create
         * }
         */
        public static final OfInt Create$layout() {
            return Create$LAYOUT;
        }

        private static final long Create$OFFSET = 4;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD Create
         * }
         */
        public static final long Create$offset() {
            return Create$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD Create
         * }
         */
        public static int Create(MemorySegment struct) {
            return struct.get(Create$LAYOUT, Create$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD Create
         * }
         */
        public static void Create(MemorySegment struct, int fieldValue) {
            struct.set(Create$LAYOUT, Create$OFFSET, fieldValue);
        }

        private static final OfInt SetInfo$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SetInfo"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD SetInfo
         * }
         */
        public static final OfInt SetInfo$layout() {
            return SetInfo$LAYOUT;
        }

        private static final long SetInfo$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD SetInfo
         * }
         */
        public static final long SetInfo$offset() {
            return SetInfo$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD SetInfo
         * }
         */
        public static int SetInfo(MemorySegment struct) {
            return struct.get(SetInfo$LAYOUT, SetInfo$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD SetInfo
         * }
         */
        public static void SetInfo(MemorySegment struct, int fieldValue) {
            struct.set(SetInfo$LAYOUT, SetInfo$OFFSET, fieldValue);
        }

        private static final OfInt Flush$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Flush"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD Flush
         * }
         */
        public static final OfInt Flush$layout() {
            return Flush$LAYOUT;
        }

        private static final long Flush$OFFSET = 12;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD Flush
         * }
         */
        public static final long Flush$offset() {
            return Flush$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD Flush
         * }
         */
        public static int Flush(MemorySegment struct) {
            return struct.get(Flush$LAYOUT, Flush$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD Flush
         * }
         */
        public static void Flush(MemorySegment struct, int fieldValue) {
            struct.set(Flush$LAYOUT, Flush$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout Mft2WritesUserLevel$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Mft2WritesUserLevel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD Write;
     *     DWORD Create;
     *     DWORD SetInfo;
     *     DWORD Flush;
     * } Mft2WritesUserLevel
     * }
     */
    public static final GroupLayout Mft2WritesUserLevel$layout() {
        return Mft2WritesUserLevel$LAYOUT;
    }

    private static final long Mft2WritesUserLevel$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD Write;
     *     DWORD Create;
     *     DWORD SetInfo;
     *     DWORD Flush;
     * } Mft2WritesUserLevel
     * }
     */
    public static final long Mft2WritesUserLevel$offset() {
        return Mft2WritesUserLevel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD Write;
     *     DWORD Create;
     *     DWORD SetInfo;
     *     DWORD Flush;
     * } Mft2WritesUserLevel
     * }
     */
    public static MemorySegment Mft2WritesUserLevel(MemorySegment struct) {
        return struct.asSlice(Mft2WritesUserLevel$OFFSET, Mft2WritesUserLevel$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD Write;
     *     DWORD Create;
     *     DWORD SetInfo;
     *     DWORD Flush;
     * } Mft2WritesUserLevel
     * }
     */
    public static void Mft2WritesUserLevel(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Mft2WritesUserLevel$OFFSET, Mft2WritesUserLevel$LAYOUT.byteSize());
    }

    private static final OfInt Mft2WritesFlushForLogFileFull$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Mft2WritesFlushForLogFileFull"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Mft2WritesFlushForLogFileFull
     * }
     */
    public static final OfInt Mft2WritesFlushForLogFileFull$layout() {
        return Mft2WritesFlushForLogFileFull$LAYOUT;
    }

    private static final long Mft2WritesFlushForLogFileFull$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Mft2WritesFlushForLogFileFull
     * }
     */
    public static final long Mft2WritesFlushForLogFileFull$offset() {
        return Mft2WritesFlushForLogFileFull$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Mft2WritesFlushForLogFileFull
     * }
     */
    public static int Mft2WritesFlushForLogFileFull(MemorySegment struct) {
        return struct.get(Mft2WritesFlushForLogFileFull$LAYOUT, Mft2WritesFlushForLogFileFull$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Mft2WritesFlushForLogFileFull
     * }
     */
    public static void Mft2WritesFlushForLogFileFull(MemorySegment struct, int fieldValue) {
        struct.set(Mft2WritesFlushForLogFileFull$LAYOUT, Mft2WritesFlushForLogFileFull$OFFSET, fieldValue);
    }

    private static final OfInt Mft2WritesLazyWriter$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Mft2WritesLazyWriter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Mft2WritesLazyWriter
     * }
     */
    public static final OfInt Mft2WritesLazyWriter$layout() {
        return Mft2WritesLazyWriter$LAYOUT;
    }

    private static final long Mft2WritesLazyWriter$OFFSET = 108;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Mft2WritesLazyWriter
     * }
     */
    public static final long Mft2WritesLazyWriter$offset() {
        return Mft2WritesLazyWriter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Mft2WritesLazyWriter
     * }
     */
    public static int Mft2WritesLazyWriter(MemorySegment struct) {
        return struct.get(Mft2WritesLazyWriter$LAYOUT, Mft2WritesLazyWriter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Mft2WritesLazyWriter
     * }
     */
    public static void Mft2WritesLazyWriter(MemorySegment struct, int fieldValue) {
        struct.set(Mft2WritesLazyWriter$LAYOUT, Mft2WritesLazyWriter$OFFSET, fieldValue);
    }

    private static final OfInt Mft2WritesUserRequest$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Mft2WritesUserRequest"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Mft2WritesUserRequest
     * }
     */
    public static final OfInt Mft2WritesUserRequest$layout() {
        return Mft2WritesUserRequest$LAYOUT;
    }

    private static final long Mft2WritesUserRequest$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Mft2WritesUserRequest
     * }
     */
    public static final long Mft2WritesUserRequest$offset() {
        return Mft2WritesUserRequest$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Mft2WritesUserRequest
     * }
     */
    public static int Mft2WritesUserRequest(MemorySegment struct) {
        return struct.get(Mft2WritesUserRequest$LAYOUT, Mft2WritesUserRequest$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Mft2WritesUserRequest
     * }
     */
    public static void Mft2WritesUserRequest(MemorySegment struct, int fieldValue) {
        struct.set(Mft2WritesUserRequest$LAYOUT, Mft2WritesUserRequest$OFFSET, fieldValue);
    }

    private static final OfLong RootIndexReads$LAYOUT = (OfLong)$LAYOUT.select(groupElement("RootIndexReads"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG RootIndexReads
     * }
     */
    public static final OfLong RootIndexReads$layout() {
        return RootIndexReads$LAYOUT;
    }

    private static final long RootIndexReads$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG RootIndexReads
     * }
     */
    public static final long RootIndexReads$offset() {
        return RootIndexReads$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG RootIndexReads
     * }
     */
    public static long RootIndexReads(MemorySegment struct) {
        return struct.get(RootIndexReads$LAYOUT, RootIndexReads$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG RootIndexReads
     * }
     */
    public static void RootIndexReads(MemorySegment struct, long fieldValue) {
        struct.set(RootIndexReads$LAYOUT, RootIndexReads$OFFSET, fieldValue);
    }

    private static final OfLong RootIndexReadBytes$LAYOUT = (OfLong)$LAYOUT.select(groupElement("RootIndexReadBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG RootIndexReadBytes
     * }
     */
    public static final OfLong RootIndexReadBytes$layout() {
        return RootIndexReadBytes$LAYOUT;
    }

    private static final long RootIndexReadBytes$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG RootIndexReadBytes
     * }
     */
    public static final long RootIndexReadBytes$offset() {
        return RootIndexReadBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG RootIndexReadBytes
     * }
     */
    public static long RootIndexReadBytes(MemorySegment struct) {
        return struct.get(RootIndexReadBytes$LAYOUT, RootIndexReadBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG RootIndexReadBytes
     * }
     */
    public static void RootIndexReadBytes(MemorySegment struct, long fieldValue) {
        struct.set(RootIndexReadBytes$LAYOUT, RootIndexReadBytes$OFFSET, fieldValue);
    }

    private static final OfLong RootIndexWrites$LAYOUT = (OfLong)$LAYOUT.select(groupElement("RootIndexWrites"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG RootIndexWrites
     * }
     */
    public static final OfLong RootIndexWrites$layout() {
        return RootIndexWrites$LAYOUT;
    }

    private static final long RootIndexWrites$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG RootIndexWrites
     * }
     */
    public static final long RootIndexWrites$offset() {
        return RootIndexWrites$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG RootIndexWrites
     * }
     */
    public static long RootIndexWrites(MemorySegment struct) {
        return struct.get(RootIndexWrites$LAYOUT, RootIndexWrites$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG RootIndexWrites
     * }
     */
    public static void RootIndexWrites(MemorySegment struct, long fieldValue) {
        struct.set(RootIndexWrites$LAYOUT, RootIndexWrites$OFFSET, fieldValue);
    }

    private static final OfLong RootIndexWriteBytes$LAYOUT = (OfLong)$LAYOUT.select(groupElement("RootIndexWriteBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG RootIndexWriteBytes
     * }
     */
    public static final OfLong RootIndexWriteBytes$layout() {
        return RootIndexWriteBytes$LAYOUT;
    }

    private static final long RootIndexWriteBytes$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG RootIndexWriteBytes
     * }
     */
    public static final long RootIndexWriteBytes$offset() {
        return RootIndexWriteBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG RootIndexWriteBytes
     * }
     */
    public static long RootIndexWriteBytes(MemorySegment struct) {
        return struct.get(RootIndexWriteBytes$LAYOUT, RootIndexWriteBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG RootIndexWriteBytes
     * }
     */
    public static void RootIndexWriteBytes(MemorySegment struct, long fieldValue) {
        struct.set(RootIndexWriteBytes$LAYOUT, RootIndexWriteBytes$OFFSET, fieldValue);
    }

    private static final OfLong BitmapReads$LAYOUT = (OfLong)$LAYOUT.select(groupElement("BitmapReads"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG BitmapReads
     * }
     */
    public static final OfLong BitmapReads$layout() {
        return BitmapReads$LAYOUT;
    }

    private static final long BitmapReads$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG BitmapReads
     * }
     */
    public static final long BitmapReads$offset() {
        return BitmapReads$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG BitmapReads
     * }
     */
    public static long BitmapReads(MemorySegment struct) {
        return struct.get(BitmapReads$LAYOUT, BitmapReads$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG BitmapReads
     * }
     */
    public static void BitmapReads(MemorySegment struct, long fieldValue) {
        struct.set(BitmapReads$LAYOUT, BitmapReads$OFFSET, fieldValue);
    }

    private static final OfLong BitmapReadBytes$LAYOUT = (OfLong)$LAYOUT.select(groupElement("BitmapReadBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG BitmapReadBytes
     * }
     */
    public static final OfLong BitmapReadBytes$layout() {
        return BitmapReadBytes$LAYOUT;
    }

    private static final long BitmapReadBytes$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG BitmapReadBytes
     * }
     */
    public static final long BitmapReadBytes$offset() {
        return BitmapReadBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG BitmapReadBytes
     * }
     */
    public static long BitmapReadBytes(MemorySegment struct) {
        return struct.get(BitmapReadBytes$LAYOUT, BitmapReadBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG BitmapReadBytes
     * }
     */
    public static void BitmapReadBytes(MemorySegment struct, long fieldValue) {
        struct.set(BitmapReadBytes$LAYOUT, BitmapReadBytes$OFFSET, fieldValue);
    }

    private static final OfLong BitmapWrites$LAYOUT = (OfLong)$LAYOUT.select(groupElement("BitmapWrites"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG BitmapWrites
     * }
     */
    public static final OfLong BitmapWrites$layout() {
        return BitmapWrites$LAYOUT;
    }

    private static final long BitmapWrites$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG BitmapWrites
     * }
     */
    public static final long BitmapWrites$offset() {
        return BitmapWrites$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG BitmapWrites
     * }
     */
    public static long BitmapWrites(MemorySegment struct) {
        return struct.get(BitmapWrites$LAYOUT, BitmapWrites$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG BitmapWrites
     * }
     */
    public static void BitmapWrites(MemorySegment struct, long fieldValue) {
        struct.set(BitmapWrites$LAYOUT, BitmapWrites$OFFSET, fieldValue);
    }

    private static final OfLong BitmapWriteBytes$LAYOUT = (OfLong)$LAYOUT.select(groupElement("BitmapWriteBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG BitmapWriteBytes
     * }
     */
    public static final OfLong BitmapWriteBytes$layout() {
        return BitmapWriteBytes$LAYOUT;
    }

    private static final long BitmapWriteBytes$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG BitmapWriteBytes
     * }
     */
    public static final long BitmapWriteBytes$offset() {
        return BitmapWriteBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG BitmapWriteBytes
     * }
     */
    public static long BitmapWriteBytes(MemorySegment struct) {
        return struct.get(BitmapWriteBytes$LAYOUT, BitmapWriteBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG BitmapWriteBytes
     * }
     */
    public static void BitmapWriteBytes(MemorySegment struct, long fieldValue) {
        struct.set(BitmapWriteBytes$LAYOUT, BitmapWriteBytes$OFFSET, fieldValue);
    }

    private static final OfInt BitmapWritesFlushForLogFileFull$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BitmapWritesFlushForLogFileFull"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD BitmapWritesFlushForLogFileFull
     * }
     */
    public static final OfInt BitmapWritesFlushForLogFileFull$layout() {
        return BitmapWritesFlushForLogFileFull$LAYOUT;
    }

    private static final long BitmapWritesFlushForLogFileFull$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD BitmapWritesFlushForLogFileFull
     * }
     */
    public static final long BitmapWritesFlushForLogFileFull$offset() {
        return BitmapWritesFlushForLogFileFull$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD BitmapWritesFlushForLogFileFull
     * }
     */
    public static int BitmapWritesFlushForLogFileFull(MemorySegment struct) {
        return struct.get(BitmapWritesFlushForLogFileFull$LAYOUT, BitmapWritesFlushForLogFileFull$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD BitmapWritesFlushForLogFileFull
     * }
     */
    public static void BitmapWritesFlushForLogFileFull(MemorySegment struct, int fieldValue) {
        struct.set(BitmapWritesFlushForLogFileFull$LAYOUT, BitmapWritesFlushForLogFileFull$OFFSET, fieldValue);
    }

    private static final OfInt BitmapWritesLazyWriter$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BitmapWritesLazyWriter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD BitmapWritesLazyWriter
     * }
     */
    public static final OfInt BitmapWritesLazyWriter$layout() {
        return BitmapWritesLazyWriter$LAYOUT;
    }

    private static final long BitmapWritesLazyWriter$OFFSET = 188;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD BitmapWritesLazyWriter
     * }
     */
    public static final long BitmapWritesLazyWriter$offset() {
        return BitmapWritesLazyWriter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD BitmapWritesLazyWriter
     * }
     */
    public static int BitmapWritesLazyWriter(MemorySegment struct) {
        return struct.get(BitmapWritesLazyWriter$LAYOUT, BitmapWritesLazyWriter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD BitmapWritesLazyWriter
     * }
     */
    public static void BitmapWritesLazyWriter(MemorySegment struct, int fieldValue) {
        struct.set(BitmapWritesLazyWriter$LAYOUT, BitmapWritesLazyWriter$OFFSET, fieldValue);
    }

    private static final OfInt BitmapWritesUserRequest$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BitmapWritesUserRequest"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD BitmapWritesUserRequest
     * }
     */
    public static final OfInt BitmapWritesUserRequest$layout() {
        return BitmapWritesUserRequest$LAYOUT;
    }

    private static final long BitmapWritesUserRequest$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD BitmapWritesUserRequest
     * }
     */
    public static final long BitmapWritesUserRequest$offset() {
        return BitmapWritesUserRequest$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD BitmapWritesUserRequest
     * }
     */
    public static int BitmapWritesUserRequest(MemorySegment struct) {
        return struct.get(BitmapWritesUserRequest$LAYOUT, BitmapWritesUserRequest$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD BitmapWritesUserRequest
     * }
     */
    public static void BitmapWritesUserRequest(MemorySegment struct, int fieldValue) {
        struct.set(BitmapWritesUserRequest$LAYOUT, BitmapWritesUserRequest$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     DWORD Write;
     *     DWORD Create;
     *     DWORD SetInfo;
     *     DWORD Flush;
     * }
     * }
     */
    public static class BitmapWritesUserLevel {

        BitmapWritesUserLevel() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            wgl_h.C_LONG.withName("Write"),
            wgl_h.C_LONG.withName("Create"),
            wgl_h.C_LONG.withName("SetInfo"),
            wgl_h.C_LONG.withName("Flush")
        ).withName("$anon$11538:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt Write$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Write"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD Write
         * }
         */
        public static final OfInt Write$layout() {
            return Write$LAYOUT;
        }

        private static final long Write$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD Write
         * }
         */
        public static final long Write$offset() {
            return Write$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD Write
         * }
         */
        public static int Write(MemorySegment struct) {
            return struct.get(Write$LAYOUT, Write$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD Write
         * }
         */
        public static void Write(MemorySegment struct, int fieldValue) {
            struct.set(Write$LAYOUT, Write$OFFSET, fieldValue);
        }

        private static final OfInt Create$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Create"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD Create
         * }
         */
        public static final OfInt Create$layout() {
            return Create$LAYOUT;
        }

        private static final long Create$OFFSET = 4;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD Create
         * }
         */
        public static final long Create$offset() {
            return Create$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD Create
         * }
         */
        public static int Create(MemorySegment struct) {
            return struct.get(Create$LAYOUT, Create$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD Create
         * }
         */
        public static void Create(MemorySegment struct, int fieldValue) {
            struct.set(Create$LAYOUT, Create$OFFSET, fieldValue);
        }

        private static final OfInt SetInfo$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SetInfo"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD SetInfo
         * }
         */
        public static final OfInt SetInfo$layout() {
            return SetInfo$LAYOUT;
        }

        private static final long SetInfo$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD SetInfo
         * }
         */
        public static final long SetInfo$offset() {
            return SetInfo$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD SetInfo
         * }
         */
        public static int SetInfo(MemorySegment struct) {
            return struct.get(SetInfo$LAYOUT, SetInfo$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD SetInfo
         * }
         */
        public static void SetInfo(MemorySegment struct, int fieldValue) {
            struct.set(SetInfo$LAYOUT, SetInfo$OFFSET, fieldValue);
        }

        private static final OfInt Flush$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Flush"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD Flush
         * }
         */
        public static final OfInt Flush$layout() {
            return Flush$LAYOUT;
        }

        private static final long Flush$OFFSET = 12;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD Flush
         * }
         */
        public static final long Flush$offset() {
            return Flush$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD Flush
         * }
         */
        public static int Flush(MemorySegment struct) {
            return struct.get(Flush$LAYOUT, Flush$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD Flush
         * }
         */
        public static void Flush(MemorySegment struct, int fieldValue) {
            struct.set(Flush$LAYOUT, Flush$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout BitmapWritesUserLevel$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("BitmapWritesUserLevel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD Write;
     *     DWORD Create;
     *     DWORD SetInfo;
     *     DWORD Flush;
     * } BitmapWritesUserLevel
     * }
     */
    public static final GroupLayout BitmapWritesUserLevel$layout() {
        return BitmapWritesUserLevel$LAYOUT;
    }

    private static final long BitmapWritesUserLevel$OFFSET = 196;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD Write;
     *     DWORD Create;
     *     DWORD SetInfo;
     *     DWORD Flush;
     * } BitmapWritesUserLevel
     * }
     */
    public static final long BitmapWritesUserLevel$offset() {
        return BitmapWritesUserLevel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD Write;
     *     DWORD Create;
     *     DWORD SetInfo;
     *     DWORD Flush;
     * } BitmapWritesUserLevel
     * }
     */
    public static MemorySegment BitmapWritesUserLevel(MemorySegment struct) {
        return struct.asSlice(BitmapWritesUserLevel$OFFSET, BitmapWritesUserLevel$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD Write;
     *     DWORD Create;
     *     DWORD SetInfo;
     *     DWORD Flush;
     * } BitmapWritesUserLevel
     * }
     */
    public static void BitmapWritesUserLevel(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, BitmapWritesUserLevel$OFFSET, BitmapWritesUserLevel$LAYOUT.byteSize());
    }

    private static final OfLong MftBitmapReads$LAYOUT = (OfLong)$LAYOUT.select(groupElement("MftBitmapReads"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG MftBitmapReads
     * }
     */
    public static final OfLong MftBitmapReads$layout() {
        return MftBitmapReads$LAYOUT;
    }

    private static final long MftBitmapReads$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG MftBitmapReads
     * }
     */
    public static final long MftBitmapReads$offset() {
        return MftBitmapReads$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG MftBitmapReads
     * }
     */
    public static long MftBitmapReads(MemorySegment struct) {
        return struct.get(MftBitmapReads$LAYOUT, MftBitmapReads$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG MftBitmapReads
     * }
     */
    public static void MftBitmapReads(MemorySegment struct, long fieldValue) {
        struct.set(MftBitmapReads$LAYOUT, MftBitmapReads$OFFSET, fieldValue);
    }

    private static final OfLong MftBitmapReadBytes$LAYOUT = (OfLong)$LAYOUT.select(groupElement("MftBitmapReadBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG MftBitmapReadBytes
     * }
     */
    public static final OfLong MftBitmapReadBytes$layout() {
        return MftBitmapReadBytes$LAYOUT;
    }

    private static final long MftBitmapReadBytes$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG MftBitmapReadBytes
     * }
     */
    public static final long MftBitmapReadBytes$offset() {
        return MftBitmapReadBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG MftBitmapReadBytes
     * }
     */
    public static long MftBitmapReadBytes(MemorySegment struct) {
        return struct.get(MftBitmapReadBytes$LAYOUT, MftBitmapReadBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG MftBitmapReadBytes
     * }
     */
    public static void MftBitmapReadBytes(MemorySegment struct, long fieldValue) {
        struct.set(MftBitmapReadBytes$LAYOUT, MftBitmapReadBytes$OFFSET, fieldValue);
    }

    private static final OfLong MftBitmapWrites$LAYOUT = (OfLong)$LAYOUT.select(groupElement("MftBitmapWrites"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG MftBitmapWrites
     * }
     */
    public static final OfLong MftBitmapWrites$layout() {
        return MftBitmapWrites$LAYOUT;
    }

    private static final long MftBitmapWrites$OFFSET = 232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG MftBitmapWrites
     * }
     */
    public static final long MftBitmapWrites$offset() {
        return MftBitmapWrites$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG MftBitmapWrites
     * }
     */
    public static long MftBitmapWrites(MemorySegment struct) {
        return struct.get(MftBitmapWrites$LAYOUT, MftBitmapWrites$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG MftBitmapWrites
     * }
     */
    public static void MftBitmapWrites(MemorySegment struct, long fieldValue) {
        struct.set(MftBitmapWrites$LAYOUT, MftBitmapWrites$OFFSET, fieldValue);
    }

    private static final OfLong MftBitmapWriteBytes$LAYOUT = (OfLong)$LAYOUT.select(groupElement("MftBitmapWriteBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG MftBitmapWriteBytes
     * }
     */
    public static final OfLong MftBitmapWriteBytes$layout() {
        return MftBitmapWriteBytes$LAYOUT;
    }

    private static final long MftBitmapWriteBytes$OFFSET = 240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG MftBitmapWriteBytes
     * }
     */
    public static final long MftBitmapWriteBytes$offset() {
        return MftBitmapWriteBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG MftBitmapWriteBytes
     * }
     */
    public static long MftBitmapWriteBytes(MemorySegment struct) {
        return struct.get(MftBitmapWriteBytes$LAYOUT, MftBitmapWriteBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG MftBitmapWriteBytes
     * }
     */
    public static void MftBitmapWriteBytes(MemorySegment struct, long fieldValue) {
        struct.set(MftBitmapWriteBytes$LAYOUT, MftBitmapWriteBytes$OFFSET, fieldValue);
    }

    private static final OfInt MftBitmapWritesFlushForLogFileFull$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MftBitmapWritesFlushForLogFileFull"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD MftBitmapWritesFlushForLogFileFull
     * }
     */
    public static final OfInt MftBitmapWritesFlushForLogFileFull$layout() {
        return MftBitmapWritesFlushForLogFileFull$LAYOUT;
    }

    private static final long MftBitmapWritesFlushForLogFileFull$OFFSET = 248;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD MftBitmapWritesFlushForLogFileFull
     * }
     */
    public static final long MftBitmapWritesFlushForLogFileFull$offset() {
        return MftBitmapWritesFlushForLogFileFull$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD MftBitmapWritesFlushForLogFileFull
     * }
     */
    public static int MftBitmapWritesFlushForLogFileFull(MemorySegment struct) {
        return struct.get(MftBitmapWritesFlushForLogFileFull$LAYOUT, MftBitmapWritesFlushForLogFileFull$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD MftBitmapWritesFlushForLogFileFull
     * }
     */
    public static void MftBitmapWritesFlushForLogFileFull(MemorySegment struct, int fieldValue) {
        struct.set(MftBitmapWritesFlushForLogFileFull$LAYOUT, MftBitmapWritesFlushForLogFileFull$OFFSET, fieldValue);
    }

    private static final OfInt MftBitmapWritesLazyWriter$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MftBitmapWritesLazyWriter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD MftBitmapWritesLazyWriter
     * }
     */
    public static final OfInt MftBitmapWritesLazyWriter$layout() {
        return MftBitmapWritesLazyWriter$LAYOUT;
    }

    private static final long MftBitmapWritesLazyWriter$OFFSET = 252;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD MftBitmapWritesLazyWriter
     * }
     */
    public static final long MftBitmapWritesLazyWriter$offset() {
        return MftBitmapWritesLazyWriter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD MftBitmapWritesLazyWriter
     * }
     */
    public static int MftBitmapWritesLazyWriter(MemorySegment struct) {
        return struct.get(MftBitmapWritesLazyWriter$LAYOUT, MftBitmapWritesLazyWriter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD MftBitmapWritesLazyWriter
     * }
     */
    public static void MftBitmapWritesLazyWriter(MemorySegment struct, int fieldValue) {
        struct.set(MftBitmapWritesLazyWriter$LAYOUT, MftBitmapWritesLazyWriter$OFFSET, fieldValue);
    }

    private static final OfInt MftBitmapWritesUserRequest$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MftBitmapWritesUserRequest"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD MftBitmapWritesUserRequest
     * }
     */
    public static final OfInt MftBitmapWritesUserRequest$layout() {
        return MftBitmapWritesUserRequest$LAYOUT;
    }

    private static final long MftBitmapWritesUserRequest$OFFSET = 256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD MftBitmapWritesUserRequest
     * }
     */
    public static final long MftBitmapWritesUserRequest$offset() {
        return MftBitmapWritesUserRequest$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD MftBitmapWritesUserRequest
     * }
     */
    public static int MftBitmapWritesUserRequest(MemorySegment struct) {
        return struct.get(MftBitmapWritesUserRequest$LAYOUT, MftBitmapWritesUserRequest$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD MftBitmapWritesUserRequest
     * }
     */
    public static void MftBitmapWritesUserRequest(MemorySegment struct, int fieldValue) {
        struct.set(MftBitmapWritesUserRequest$LAYOUT, MftBitmapWritesUserRequest$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     DWORD Write;
     *     DWORD Create;
     *     DWORD SetInfo;
     *     DWORD Flush;
     * }
     * }
     */
    public static class MftBitmapWritesUserLevel {

        MftBitmapWritesUserLevel() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            wgl_h.C_LONG.withName("Write"),
            wgl_h.C_LONG.withName("Create"),
            wgl_h.C_LONG.withName("SetInfo"),
            wgl_h.C_LONG.withName("Flush")
        ).withName("$anon$11554:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt Write$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Write"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD Write
         * }
         */
        public static final OfInt Write$layout() {
            return Write$LAYOUT;
        }

        private static final long Write$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD Write
         * }
         */
        public static final long Write$offset() {
            return Write$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD Write
         * }
         */
        public static int Write(MemorySegment struct) {
            return struct.get(Write$LAYOUT, Write$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD Write
         * }
         */
        public static void Write(MemorySegment struct, int fieldValue) {
            struct.set(Write$LAYOUT, Write$OFFSET, fieldValue);
        }

        private static final OfInt Create$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Create"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD Create
         * }
         */
        public static final OfInt Create$layout() {
            return Create$LAYOUT;
        }

        private static final long Create$OFFSET = 4;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD Create
         * }
         */
        public static final long Create$offset() {
            return Create$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD Create
         * }
         */
        public static int Create(MemorySegment struct) {
            return struct.get(Create$LAYOUT, Create$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD Create
         * }
         */
        public static void Create(MemorySegment struct, int fieldValue) {
            struct.set(Create$LAYOUT, Create$OFFSET, fieldValue);
        }

        private static final OfInt SetInfo$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SetInfo"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD SetInfo
         * }
         */
        public static final OfInt SetInfo$layout() {
            return SetInfo$LAYOUT;
        }

        private static final long SetInfo$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD SetInfo
         * }
         */
        public static final long SetInfo$offset() {
            return SetInfo$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD SetInfo
         * }
         */
        public static int SetInfo(MemorySegment struct) {
            return struct.get(SetInfo$LAYOUT, SetInfo$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD SetInfo
         * }
         */
        public static void SetInfo(MemorySegment struct, int fieldValue) {
            struct.set(SetInfo$LAYOUT, SetInfo$OFFSET, fieldValue);
        }

        private static final OfInt Flush$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Flush"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD Flush
         * }
         */
        public static final OfInt Flush$layout() {
            return Flush$LAYOUT;
        }

        private static final long Flush$OFFSET = 12;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD Flush
         * }
         */
        public static final long Flush$offset() {
            return Flush$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD Flush
         * }
         */
        public static int Flush(MemorySegment struct) {
            return struct.get(Flush$LAYOUT, Flush$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD Flush
         * }
         */
        public static void Flush(MemorySegment struct, int fieldValue) {
            struct.set(Flush$LAYOUT, Flush$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout MftBitmapWritesUserLevel$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("MftBitmapWritesUserLevel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD Write;
     *     DWORD Create;
     *     DWORD SetInfo;
     *     DWORD Flush;
     * } MftBitmapWritesUserLevel
     * }
     */
    public static final GroupLayout MftBitmapWritesUserLevel$layout() {
        return MftBitmapWritesUserLevel$LAYOUT;
    }

    private static final long MftBitmapWritesUserLevel$OFFSET = 260;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD Write;
     *     DWORD Create;
     *     DWORD SetInfo;
     *     DWORD Flush;
     * } MftBitmapWritesUserLevel
     * }
     */
    public static final long MftBitmapWritesUserLevel$offset() {
        return MftBitmapWritesUserLevel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD Write;
     *     DWORD Create;
     *     DWORD SetInfo;
     *     DWORD Flush;
     * } MftBitmapWritesUserLevel
     * }
     */
    public static MemorySegment MftBitmapWritesUserLevel(MemorySegment struct) {
        return struct.asSlice(MftBitmapWritesUserLevel$OFFSET, MftBitmapWritesUserLevel$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD Write;
     *     DWORD Create;
     *     DWORD SetInfo;
     *     DWORD Flush;
     * } MftBitmapWritesUserLevel
     * }
     */
    public static void MftBitmapWritesUserLevel(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, MftBitmapWritesUserLevel$OFFSET, MftBitmapWritesUserLevel$LAYOUT.byteSize());
    }

    private static final OfLong UserIndexReads$LAYOUT = (OfLong)$LAYOUT.select(groupElement("UserIndexReads"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG UserIndexReads
     * }
     */
    public static final OfLong UserIndexReads$layout() {
        return UserIndexReads$LAYOUT;
    }

    private static final long UserIndexReads$OFFSET = 280;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG UserIndexReads
     * }
     */
    public static final long UserIndexReads$offset() {
        return UserIndexReads$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG UserIndexReads
     * }
     */
    public static long UserIndexReads(MemorySegment struct) {
        return struct.get(UserIndexReads$LAYOUT, UserIndexReads$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG UserIndexReads
     * }
     */
    public static void UserIndexReads(MemorySegment struct, long fieldValue) {
        struct.set(UserIndexReads$LAYOUT, UserIndexReads$OFFSET, fieldValue);
    }

    private static final OfLong UserIndexReadBytes$LAYOUT = (OfLong)$LAYOUT.select(groupElement("UserIndexReadBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG UserIndexReadBytes
     * }
     */
    public static final OfLong UserIndexReadBytes$layout() {
        return UserIndexReadBytes$LAYOUT;
    }

    private static final long UserIndexReadBytes$OFFSET = 288;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG UserIndexReadBytes
     * }
     */
    public static final long UserIndexReadBytes$offset() {
        return UserIndexReadBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG UserIndexReadBytes
     * }
     */
    public static long UserIndexReadBytes(MemorySegment struct) {
        return struct.get(UserIndexReadBytes$LAYOUT, UserIndexReadBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG UserIndexReadBytes
     * }
     */
    public static void UserIndexReadBytes(MemorySegment struct, long fieldValue) {
        struct.set(UserIndexReadBytes$LAYOUT, UserIndexReadBytes$OFFSET, fieldValue);
    }

    private static final OfLong UserIndexWrites$LAYOUT = (OfLong)$LAYOUT.select(groupElement("UserIndexWrites"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG UserIndexWrites
     * }
     */
    public static final OfLong UserIndexWrites$layout() {
        return UserIndexWrites$LAYOUT;
    }

    private static final long UserIndexWrites$OFFSET = 296;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG UserIndexWrites
     * }
     */
    public static final long UserIndexWrites$offset() {
        return UserIndexWrites$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG UserIndexWrites
     * }
     */
    public static long UserIndexWrites(MemorySegment struct) {
        return struct.get(UserIndexWrites$LAYOUT, UserIndexWrites$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG UserIndexWrites
     * }
     */
    public static void UserIndexWrites(MemorySegment struct, long fieldValue) {
        struct.set(UserIndexWrites$LAYOUT, UserIndexWrites$OFFSET, fieldValue);
    }

    private static final OfLong UserIndexWriteBytes$LAYOUT = (OfLong)$LAYOUT.select(groupElement("UserIndexWriteBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG UserIndexWriteBytes
     * }
     */
    public static final OfLong UserIndexWriteBytes$layout() {
        return UserIndexWriteBytes$LAYOUT;
    }

    private static final long UserIndexWriteBytes$OFFSET = 304;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG UserIndexWriteBytes
     * }
     */
    public static final long UserIndexWriteBytes$offset() {
        return UserIndexWriteBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG UserIndexWriteBytes
     * }
     */
    public static long UserIndexWriteBytes(MemorySegment struct) {
        return struct.get(UserIndexWriteBytes$LAYOUT, UserIndexWriteBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG UserIndexWriteBytes
     * }
     */
    public static void UserIndexWriteBytes(MemorySegment struct, long fieldValue) {
        struct.set(UserIndexWriteBytes$LAYOUT, UserIndexWriteBytes$OFFSET, fieldValue);
    }

    private static final OfLong LogFileReads$LAYOUT = (OfLong)$LAYOUT.select(groupElement("LogFileReads"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG LogFileReads
     * }
     */
    public static final OfLong LogFileReads$layout() {
        return LogFileReads$LAYOUT;
    }

    private static final long LogFileReads$OFFSET = 312;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG LogFileReads
     * }
     */
    public static final long LogFileReads$offset() {
        return LogFileReads$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG LogFileReads
     * }
     */
    public static long LogFileReads(MemorySegment struct) {
        return struct.get(LogFileReads$LAYOUT, LogFileReads$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG LogFileReads
     * }
     */
    public static void LogFileReads(MemorySegment struct, long fieldValue) {
        struct.set(LogFileReads$LAYOUT, LogFileReads$OFFSET, fieldValue);
    }

    private static final OfLong LogFileReadBytes$LAYOUT = (OfLong)$LAYOUT.select(groupElement("LogFileReadBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG LogFileReadBytes
     * }
     */
    public static final OfLong LogFileReadBytes$layout() {
        return LogFileReadBytes$LAYOUT;
    }

    private static final long LogFileReadBytes$OFFSET = 320;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG LogFileReadBytes
     * }
     */
    public static final long LogFileReadBytes$offset() {
        return LogFileReadBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG LogFileReadBytes
     * }
     */
    public static long LogFileReadBytes(MemorySegment struct) {
        return struct.get(LogFileReadBytes$LAYOUT, LogFileReadBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG LogFileReadBytes
     * }
     */
    public static void LogFileReadBytes(MemorySegment struct, long fieldValue) {
        struct.set(LogFileReadBytes$LAYOUT, LogFileReadBytes$OFFSET, fieldValue);
    }

    private static final OfLong LogFileWrites$LAYOUT = (OfLong)$LAYOUT.select(groupElement("LogFileWrites"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG LogFileWrites
     * }
     */
    public static final OfLong LogFileWrites$layout() {
        return LogFileWrites$LAYOUT;
    }

    private static final long LogFileWrites$OFFSET = 328;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG LogFileWrites
     * }
     */
    public static final long LogFileWrites$offset() {
        return LogFileWrites$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG LogFileWrites
     * }
     */
    public static long LogFileWrites(MemorySegment struct) {
        return struct.get(LogFileWrites$LAYOUT, LogFileWrites$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG LogFileWrites
     * }
     */
    public static void LogFileWrites(MemorySegment struct, long fieldValue) {
        struct.set(LogFileWrites$LAYOUT, LogFileWrites$OFFSET, fieldValue);
    }

    private static final OfLong LogFileWriteBytes$LAYOUT = (OfLong)$LAYOUT.select(groupElement("LogFileWriteBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG LogFileWriteBytes
     * }
     */
    public static final OfLong LogFileWriteBytes$layout() {
        return LogFileWriteBytes$LAYOUT;
    }

    private static final long LogFileWriteBytes$OFFSET = 336;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG LogFileWriteBytes
     * }
     */
    public static final long LogFileWriteBytes$offset() {
        return LogFileWriteBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG LogFileWriteBytes
     * }
     */
    public static long LogFileWriteBytes(MemorySegment struct) {
        return struct.get(LogFileWriteBytes$LAYOUT, LogFileWriteBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG LogFileWriteBytes
     * }
     */
    public static void LogFileWriteBytes(MemorySegment struct, long fieldValue) {
        struct.set(LogFileWriteBytes$LAYOUT, LogFileWriteBytes$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     DWORD Calls;
     *     DWORD RunsReturned;
     *     DWORD Hints;
     *     DWORD HintsHonored;
     *     DWORD Cache;
     *     DWORD CacheMiss;
     *     DWORDLONG Clusters;
     *     DWORDLONG HintsClusters;
     *     DWORDLONG CacheClusters;
     *     DWORDLONG CacheMissClusters;
     * }
     * }
     */
    public static class Allocate {

        Allocate() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            wgl_h.C_LONG.withName("Calls"),
            wgl_h.C_LONG.withName("RunsReturned"),
            wgl_h.C_LONG.withName("Hints"),
            wgl_h.C_LONG.withName("HintsHonored"),
            wgl_h.C_LONG.withName("Cache"),
            wgl_h.C_LONG.withName("CacheMiss"),
            wgl_h.C_LONG_LONG.withName("Clusters"),
            wgl_h.C_LONG_LONG.withName("HintsClusters"),
            wgl_h.C_LONG_LONG.withName("CacheClusters"),
            wgl_h.C_LONG_LONG.withName("CacheMissClusters")
        ).withName("$anon$11575:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt Calls$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Calls"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD Calls
         * }
         */
        public static final OfInt Calls$layout() {
            return Calls$LAYOUT;
        }

        private static final long Calls$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD Calls
         * }
         */
        public static final long Calls$offset() {
            return Calls$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD Calls
         * }
         */
        public static int Calls(MemorySegment struct) {
            return struct.get(Calls$LAYOUT, Calls$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD Calls
         * }
         */
        public static void Calls(MemorySegment struct, int fieldValue) {
            struct.set(Calls$LAYOUT, Calls$OFFSET, fieldValue);
        }

        private static final OfInt RunsReturned$LAYOUT = (OfInt)$LAYOUT.select(groupElement("RunsReturned"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD RunsReturned
         * }
         */
        public static final OfInt RunsReturned$layout() {
            return RunsReturned$LAYOUT;
        }

        private static final long RunsReturned$OFFSET = 4;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD RunsReturned
         * }
         */
        public static final long RunsReturned$offset() {
            return RunsReturned$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD RunsReturned
         * }
         */
        public static int RunsReturned(MemorySegment struct) {
            return struct.get(RunsReturned$LAYOUT, RunsReturned$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD RunsReturned
         * }
         */
        public static void RunsReturned(MemorySegment struct, int fieldValue) {
            struct.set(RunsReturned$LAYOUT, RunsReturned$OFFSET, fieldValue);
        }

        private static final OfInt Hints$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Hints"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD Hints
         * }
         */
        public static final OfInt Hints$layout() {
            return Hints$LAYOUT;
        }

        private static final long Hints$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD Hints
         * }
         */
        public static final long Hints$offset() {
            return Hints$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD Hints
         * }
         */
        public static int Hints(MemorySegment struct) {
            return struct.get(Hints$LAYOUT, Hints$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD Hints
         * }
         */
        public static void Hints(MemorySegment struct, int fieldValue) {
            struct.set(Hints$LAYOUT, Hints$OFFSET, fieldValue);
        }

        private static final OfInt HintsHonored$LAYOUT = (OfInt)$LAYOUT.select(groupElement("HintsHonored"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD HintsHonored
         * }
         */
        public static final OfInt HintsHonored$layout() {
            return HintsHonored$LAYOUT;
        }

        private static final long HintsHonored$OFFSET = 12;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD HintsHonored
         * }
         */
        public static final long HintsHonored$offset() {
            return HintsHonored$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD HintsHonored
         * }
         */
        public static int HintsHonored(MemorySegment struct) {
            return struct.get(HintsHonored$LAYOUT, HintsHonored$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD HintsHonored
         * }
         */
        public static void HintsHonored(MemorySegment struct, int fieldValue) {
            struct.set(HintsHonored$LAYOUT, HintsHonored$OFFSET, fieldValue);
        }

        private static final OfInt Cache$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Cache"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD Cache
         * }
         */
        public static final OfInt Cache$layout() {
            return Cache$LAYOUT;
        }

        private static final long Cache$OFFSET = 16;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD Cache
         * }
         */
        public static final long Cache$offset() {
            return Cache$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD Cache
         * }
         */
        public static int Cache(MemorySegment struct) {
            return struct.get(Cache$LAYOUT, Cache$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD Cache
         * }
         */
        public static void Cache(MemorySegment struct, int fieldValue) {
            struct.set(Cache$LAYOUT, Cache$OFFSET, fieldValue);
        }

        private static final OfInt CacheMiss$LAYOUT = (OfInt)$LAYOUT.select(groupElement("CacheMiss"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD CacheMiss
         * }
         */
        public static final OfInt CacheMiss$layout() {
            return CacheMiss$LAYOUT;
        }

        private static final long CacheMiss$OFFSET = 20;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD CacheMiss
         * }
         */
        public static final long CacheMiss$offset() {
            return CacheMiss$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD CacheMiss
         * }
         */
        public static int CacheMiss(MemorySegment struct) {
            return struct.get(CacheMiss$LAYOUT, CacheMiss$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD CacheMiss
         * }
         */
        public static void CacheMiss(MemorySegment struct, int fieldValue) {
            struct.set(CacheMiss$LAYOUT, CacheMiss$OFFSET, fieldValue);
        }

        private static final OfLong Clusters$LAYOUT = (OfLong)$LAYOUT.select(groupElement("Clusters"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORDLONG Clusters
         * }
         */
        public static final OfLong Clusters$layout() {
            return Clusters$LAYOUT;
        }

        private static final long Clusters$OFFSET = 24;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORDLONG Clusters
         * }
         */
        public static final long Clusters$offset() {
            return Clusters$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORDLONG Clusters
         * }
         */
        public static long Clusters(MemorySegment struct) {
            return struct.get(Clusters$LAYOUT, Clusters$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORDLONG Clusters
         * }
         */
        public static void Clusters(MemorySegment struct, long fieldValue) {
            struct.set(Clusters$LAYOUT, Clusters$OFFSET, fieldValue);
        }

        private static final OfLong HintsClusters$LAYOUT = (OfLong)$LAYOUT.select(groupElement("HintsClusters"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORDLONG HintsClusters
         * }
         */
        public static final OfLong HintsClusters$layout() {
            return HintsClusters$LAYOUT;
        }

        private static final long HintsClusters$OFFSET = 32;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORDLONG HintsClusters
         * }
         */
        public static final long HintsClusters$offset() {
            return HintsClusters$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORDLONG HintsClusters
         * }
         */
        public static long HintsClusters(MemorySegment struct) {
            return struct.get(HintsClusters$LAYOUT, HintsClusters$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORDLONG HintsClusters
         * }
         */
        public static void HintsClusters(MemorySegment struct, long fieldValue) {
            struct.set(HintsClusters$LAYOUT, HintsClusters$OFFSET, fieldValue);
        }

        private static final OfLong CacheClusters$LAYOUT = (OfLong)$LAYOUT.select(groupElement("CacheClusters"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORDLONG CacheClusters
         * }
         */
        public static final OfLong CacheClusters$layout() {
            return CacheClusters$LAYOUT;
        }

        private static final long CacheClusters$OFFSET = 40;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORDLONG CacheClusters
         * }
         */
        public static final long CacheClusters$offset() {
            return CacheClusters$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORDLONG CacheClusters
         * }
         */
        public static long CacheClusters(MemorySegment struct) {
            return struct.get(CacheClusters$LAYOUT, CacheClusters$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORDLONG CacheClusters
         * }
         */
        public static void CacheClusters(MemorySegment struct, long fieldValue) {
            struct.set(CacheClusters$LAYOUT, CacheClusters$OFFSET, fieldValue);
        }

        private static final OfLong CacheMissClusters$LAYOUT = (OfLong)$LAYOUT.select(groupElement("CacheMissClusters"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORDLONG CacheMissClusters
         * }
         */
        public static final OfLong CacheMissClusters$layout() {
            return CacheMissClusters$LAYOUT;
        }

        private static final long CacheMissClusters$OFFSET = 48;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORDLONG CacheMissClusters
         * }
         */
        public static final long CacheMissClusters$offset() {
            return CacheMissClusters$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORDLONG CacheMissClusters
         * }
         */
        public static long CacheMissClusters(MemorySegment struct) {
            return struct.get(CacheMissClusters$LAYOUT, CacheMissClusters$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORDLONG CacheMissClusters
         * }
         */
        public static void CacheMissClusters(MemorySegment struct, long fieldValue) {
            struct.set(CacheMissClusters$LAYOUT, CacheMissClusters$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout Allocate$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Allocate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD Calls;
     *     DWORD RunsReturned;
     *     DWORD Hints;
     *     DWORD HintsHonored;
     *     DWORD Cache;
     *     DWORD CacheMiss;
     *     DWORDLONG Clusters;
     *     DWORDLONG HintsClusters;
     *     DWORDLONG CacheClusters;
     *     DWORDLONG CacheMissClusters;
     * } Allocate
     * }
     */
    public static final GroupLayout Allocate$layout() {
        return Allocate$LAYOUT;
    }

    private static final long Allocate$OFFSET = 344;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD Calls;
     *     DWORD RunsReturned;
     *     DWORD Hints;
     *     DWORD HintsHonored;
     *     DWORD Cache;
     *     DWORD CacheMiss;
     *     DWORDLONG Clusters;
     *     DWORDLONG HintsClusters;
     *     DWORDLONG CacheClusters;
     *     DWORDLONG CacheMissClusters;
     * } Allocate
     * }
     */
    public static final long Allocate$offset() {
        return Allocate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD Calls;
     *     DWORD RunsReturned;
     *     DWORD Hints;
     *     DWORD HintsHonored;
     *     DWORD Cache;
     *     DWORD CacheMiss;
     *     DWORDLONG Clusters;
     *     DWORDLONG HintsClusters;
     *     DWORDLONG CacheClusters;
     *     DWORDLONG CacheMissClusters;
     * } Allocate
     * }
     */
    public static MemorySegment Allocate(MemorySegment struct) {
        return struct.asSlice(Allocate$OFFSET, Allocate$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD Calls;
     *     DWORD RunsReturned;
     *     DWORD Hints;
     *     DWORD HintsHonored;
     *     DWORD Cache;
     *     DWORD CacheMiss;
     *     DWORDLONG Clusters;
     *     DWORDLONG HintsClusters;
     *     DWORDLONG CacheClusters;
     *     DWORDLONG CacheMissClusters;
     * } Allocate
     * }
     */
    public static void Allocate(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Allocate$OFFSET, Allocate$LAYOUT.byteSize());
    }

    private static final OfInt DiskResourcesExhausted$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DiskResourcesExhausted"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD DiskResourcesExhausted
     * }
     */
    public static final OfInt DiskResourcesExhausted$layout() {
        return DiskResourcesExhausted$LAYOUT;
    }

    private static final long DiskResourcesExhausted$OFFSET = 400;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD DiskResourcesExhausted
     * }
     */
    public static final long DiskResourcesExhausted$offset() {
        return DiskResourcesExhausted$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD DiskResourcesExhausted
     * }
     */
    public static int DiskResourcesExhausted(MemorySegment struct) {
        return struct.get(DiskResourcesExhausted$LAYOUT, DiskResourcesExhausted$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD DiskResourcesExhausted
     * }
     */
    public static void DiskResourcesExhausted(MemorySegment struct, int fieldValue) {
        struct.set(DiskResourcesExhausted$LAYOUT, DiskResourcesExhausted$OFFSET, fieldValue);
    }

    private static final OfLong VolumeTrimCount$LAYOUT = (OfLong)$LAYOUT.select(groupElement("VolumeTrimCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG VolumeTrimCount
     * }
     */
    public static final OfLong VolumeTrimCount$layout() {
        return VolumeTrimCount$LAYOUT;
    }

    private static final long VolumeTrimCount$OFFSET = 408;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG VolumeTrimCount
     * }
     */
    public static final long VolumeTrimCount$offset() {
        return VolumeTrimCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG VolumeTrimCount
     * }
     */
    public static long VolumeTrimCount(MemorySegment struct) {
        return struct.get(VolumeTrimCount$LAYOUT, VolumeTrimCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG VolumeTrimCount
     * }
     */
    public static void VolumeTrimCount(MemorySegment struct, long fieldValue) {
        struct.set(VolumeTrimCount$LAYOUT, VolumeTrimCount$OFFSET, fieldValue);
    }

    private static final OfLong VolumeTrimTime$LAYOUT = (OfLong)$LAYOUT.select(groupElement("VolumeTrimTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG VolumeTrimTime
     * }
     */
    public static final OfLong VolumeTrimTime$layout() {
        return VolumeTrimTime$LAYOUT;
    }

    private static final long VolumeTrimTime$OFFSET = 416;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG VolumeTrimTime
     * }
     */
    public static final long VolumeTrimTime$offset() {
        return VolumeTrimTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG VolumeTrimTime
     * }
     */
    public static long VolumeTrimTime(MemorySegment struct) {
        return struct.get(VolumeTrimTime$LAYOUT, VolumeTrimTime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG VolumeTrimTime
     * }
     */
    public static void VolumeTrimTime(MemorySegment struct, long fieldValue) {
        struct.set(VolumeTrimTime$LAYOUT, VolumeTrimTime$OFFSET, fieldValue);
    }

    private static final OfLong VolumeTrimByteCount$LAYOUT = (OfLong)$LAYOUT.select(groupElement("VolumeTrimByteCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG VolumeTrimByteCount
     * }
     */
    public static final OfLong VolumeTrimByteCount$layout() {
        return VolumeTrimByteCount$LAYOUT;
    }

    private static final long VolumeTrimByteCount$OFFSET = 424;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG VolumeTrimByteCount
     * }
     */
    public static final long VolumeTrimByteCount$offset() {
        return VolumeTrimByteCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG VolumeTrimByteCount
     * }
     */
    public static long VolumeTrimByteCount(MemorySegment struct) {
        return struct.get(VolumeTrimByteCount$LAYOUT, VolumeTrimByteCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG VolumeTrimByteCount
     * }
     */
    public static void VolumeTrimByteCount(MemorySegment struct, long fieldValue) {
        struct.set(VolumeTrimByteCount$LAYOUT, VolumeTrimByteCount$OFFSET, fieldValue);
    }

    private static final OfLong FileLevelTrimCount$LAYOUT = (OfLong)$LAYOUT.select(groupElement("FileLevelTrimCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG FileLevelTrimCount
     * }
     */
    public static final OfLong FileLevelTrimCount$layout() {
        return FileLevelTrimCount$LAYOUT;
    }

    private static final long FileLevelTrimCount$OFFSET = 432;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG FileLevelTrimCount
     * }
     */
    public static final long FileLevelTrimCount$offset() {
        return FileLevelTrimCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG FileLevelTrimCount
     * }
     */
    public static long FileLevelTrimCount(MemorySegment struct) {
        return struct.get(FileLevelTrimCount$LAYOUT, FileLevelTrimCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG FileLevelTrimCount
     * }
     */
    public static void FileLevelTrimCount(MemorySegment struct, long fieldValue) {
        struct.set(FileLevelTrimCount$LAYOUT, FileLevelTrimCount$OFFSET, fieldValue);
    }

    private static final OfLong FileLevelTrimTime$LAYOUT = (OfLong)$LAYOUT.select(groupElement("FileLevelTrimTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG FileLevelTrimTime
     * }
     */
    public static final OfLong FileLevelTrimTime$layout() {
        return FileLevelTrimTime$LAYOUT;
    }

    private static final long FileLevelTrimTime$OFFSET = 440;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG FileLevelTrimTime
     * }
     */
    public static final long FileLevelTrimTime$offset() {
        return FileLevelTrimTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG FileLevelTrimTime
     * }
     */
    public static long FileLevelTrimTime(MemorySegment struct) {
        return struct.get(FileLevelTrimTime$LAYOUT, FileLevelTrimTime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG FileLevelTrimTime
     * }
     */
    public static void FileLevelTrimTime(MemorySegment struct, long fieldValue) {
        struct.set(FileLevelTrimTime$LAYOUT, FileLevelTrimTime$OFFSET, fieldValue);
    }

    private static final OfLong FileLevelTrimByteCount$LAYOUT = (OfLong)$LAYOUT.select(groupElement("FileLevelTrimByteCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG FileLevelTrimByteCount
     * }
     */
    public static final OfLong FileLevelTrimByteCount$layout() {
        return FileLevelTrimByteCount$LAYOUT;
    }

    private static final long FileLevelTrimByteCount$OFFSET = 448;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG FileLevelTrimByteCount
     * }
     */
    public static final long FileLevelTrimByteCount$offset() {
        return FileLevelTrimByteCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG FileLevelTrimByteCount
     * }
     */
    public static long FileLevelTrimByteCount(MemorySegment struct) {
        return struct.get(FileLevelTrimByteCount$LAYOUT, FileLevelTrimByteCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG FileLevelTrimByteCount
     * }
     */
    public static void FileLevelTrimByteCount(MemorySegment struct, long fieldValue) {
        struct.set(FileLevelTrimByteCount$LAYOUT, FileLevelTrimByteCount$OFFSET, fieldValue);
    }

    private static final OfLong VolumeTrimSkippedCount$LAYOUT = (OfLong)$LAYOUT.select(groupElement("VolumeTrimSkippedCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG VolumeTrimSkippedCount
     * }
     */
    public static final OfLong VolumeTrimSkippedCount$layout() {
        return VolumeTrimSkippedCount$LAYOUT;
    }

    private static final long VolumeTrimSkippedCount$OFFSET = 456;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG VolumeTrimSkippedCount
     * }
     */
    public static final long VolumeTrimSkippedCount$offset() {
        return VolumeTrimSkippedCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG VolumeTrimSkippedCount
     * }
     */
    public static long VolumeTrimSkippedCount(MemorySegment struct) {
        return struct.get(VolumeTrimSkippedCount$LAYOUT, VolumeTrimSkippedCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG VolumeTrimSkippedCount
     * }
     */
    public static void VolumeTrimSkippedCount(MemorySegment struct, long fieldValue) {
        struct.set(VolumeTrimSkippedCount$LAYOUT, VolumeTrimSkippedCount$OFFSET, fieldValue);
    }

    private static final OfLong VolumeTrimSkippedByteCount$LAYOUT = (OfLong)$LAYOUT.select(groupElement("VolumeTrimSkippedByteCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG VolumeTrimSkippedByteCount
     * }
     */
    public static final OfLong VolumeTrimSkippedByteCount$layout() {
        return VolumeTrimSkippedByteCount$LAYOUT;
    }

    private static final long VolumeTrimSkippedByteCount$OFFSET = 464;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG VolumeTrimSkippedByteCount
     * }
     */
    public static final long VolumeTrimSkippedByteCount$offset() {
        return VolumeTrimSkippedByteCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG VolumeTrimSkippedByteCount
     * }
     */
    public static long VolumeTrimSkippedByteCount(MemorySegment struct) {
        return struct.get(VolumeTrimSkippedByteCount$LAYOUT, VolumeTrimSkippedByteCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG VolumeTrimSkippedByteCount
     * }
     */
    public static void VolumeTrimSkippedByteCount(MemorySegment struct, long fieldValue) {
        struct.set(VolumeTrimSkippedByteCount$LAYOUT, VolumeTrimSkippedByteCount$OFFSET, fieldValue);
    }

    private static final OfLong NtfsFillStatInfoFromMftRecordCalledCount$LAYOUT = (OfLong)$LAYOUT.select(groupElement("NtfsFillStatInfoFromMftRecordCalledCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG NtfsFillStatInfoFromMftRecordCalledCount
     * }
     */
    public static final OfLong NtfsFillStatInfoFromMftRecordCalledCount$layout() {
        return NtfsFillStatInfoFromMftRecordCalledCount$LAYOUT;
    }

    private static final long NtfsFillStatInfoFromMftRecordCalledCount$OFFSET = 472;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG NtfsFillStatInfoFromMftRecordCalledCount
     * }
     */
    public static final long NtfsFillStatInfoFromMftRecordCalledCount$offset() {
        return NtfsFillStatInfoFromMftRecordCalledCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG NtfsFillStatInfoFromMftRecordCalledCount
     * }
     */
    public static long NtfsFillStatInfoFromMftRecordCalledCount(MemorySegment struct) {
        return struct.get(NtfsFillStatInfoFromMftRecordCalledCount$LAYOUT, NtfsFillStatInfoFromMftRecordCalledCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG NtfsFillStatInfoFromMftRecordCalledCount
     * }
     */
    public static void NtfsFillStatInfoFromMftRecordCalledCount(MemorySegment struct, long fieldValue) {
        struct.set(NtfsFillStatInfoFromMftRecordCalledCount$LAYOUT, NtfsFillStatInfoFromMftRecordCalledCount$OFFSET, fieldValue);
    }

    private static final OfLong NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount$LAYOUT = (OfLong)$LAYOUT.select(groupElement("NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount
     * }
     */
    public static final OfLong NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount$layout() {
        return NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount$LAYOUT;
    }

    private static final long NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount$OFFSET = 480;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount
     * }
     */
    public static final long NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount$offset() {
        return NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount
     * }
     */
    public static long NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount(MemorySegment struct) {
        return struct.get(NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount$LAYOUT, NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount
     * }
     */
    public static void NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount(MemorySegment struct, long fieldValue) {
        struct.set(NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount$LAYOUT, NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount$OFFSET, fieldValue);
    }

    private static final OfLong NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount$LAYOUT = (OfLong)$LAYOUT.select(groupElement("NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount
     * }
     */
    public static final OfLong NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount$layout() {
        return NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount$LAYOUT;
    }

    private static final long NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount$OFFSET = 488;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount
     * }
     */
    public static final long NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount$offset() {
        return NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount
     * }
     */
    public static long NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount(MemorySegment struct) {
        return struct.get(NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount$LAYOUT, NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount
     * }
     */
    public static void NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount(MemorySegment struct, long fieldValue) {
        struct.set(NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount$LAYOUT, NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

