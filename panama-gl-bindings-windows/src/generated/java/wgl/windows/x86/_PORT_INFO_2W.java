// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _PORT_INFO_2W {
 *     LPWSTR pPortName;
 *     LPWSTR pMonitorName;
 *     LPWSTR pDescription;
 *     DWORD fPortType;
 *     DWORD Reserved;
 * }
 * }
 */
public class _PORT_INFO_2W {

    _PORT_INFO_2W() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("pPortName"),
        wgl_h.C_POINTER.withName("pMonitorName"),
        wgl_h.C_POINTER.withName("pDescription"),
        wgl_h.C_LONG.withName("fPortType"),
        wgl_h.C_LONG.withName("Reserved")
    ).withName("_PORT_INFO_2W");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout pPortName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pPortName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPWSTR pPortName
     * }
     */
    public static final AddressLayout pPortName$layout() {
        return pPortName$LAYOUT;
    }

    private static final long pPortName$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPWSTR pPortName
     * }
     */
    public static final long pPortName$offset() {
        return pPortName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPWSTR pPortName
     * }
     */
    public static MemorySegment pPortName(MemorySegment struct) {
        return struct.get(pPortName$LAYOUT, pPortName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPWSTR pPortName
     * }
     */
    public static void pPortName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pPortName$LAYOUT, pPortName$OFFSET, fieldValue);
    }

    private static final AddressLayout pMonitorName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pMonitorName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPWSTR pMonitorName
     * }
     */
    public static final AddressLayout pMonitorName$layout() {
        return pMonitorName$LAYOUT;
    }

    private static final long pMonitorName$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPWSTR pMonitorName
     * }
     */
    public static final long pMonitorName$offset() {
        return pMonitorName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPWSTR pMonitorName
     * }
     */
    public static MemorySegment pMonitorName(MemorySegment struct) {
        return struct.get(pMonitorName$LAYOUT, pMonitorName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPWSTR pMonitorName
     * }
     */
    public static void pMonitorName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pMonitorName$LAYOUT, pMonitorName$OFFSET, fieldValue);
    }

    private static final AddressLayout pDescription$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pDescription"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPWSTR pDescription
     * }
     */
    public static final AddressLayout pDescription$layout() {
        return pDescription$LAYOUT;
    }

    private static final long pDescription$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPWSTR pDescription
     * }
     */
    public static final long pDescription$offset() {
        return pDescription$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPWSTR pDescription
     * }
     */
    public static MemorySegment pDescription(MemorySegment struct) {
        return struct.get(pDescription$LAYOUT, pDescription$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPWSTR pDescription
     * }
     */
    public static void pDescription(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pDescription$LAYOUT, pDescription$OFFSET, fieldValue);
    }

    private static final OfInt fPortType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fPortType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD fPortType
     * }
     */
    public static final OfInt fPortType$layout() {
        return fPortType$LAYOUT;
    }

    private static final long fPortType$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD fPortType
     * }
     */
    public static final long fPortType$offset() {
        return fPortType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD fPortType
     * }
     */
    public static int fPortType(MemorySegment struct) {
        return struct.get(fPortType$LAYOUT, fPortType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD fPortType
     * }
     */
    public static void fPortType(MemorySegment struct, int fieldValue) {
        struct.set(fPortType$LAYOUT, fPortType$OFFSET, fieldValue);
    }

    private static final OfInt Reserved$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Reserved
     * }
     */
    public static final OfInt Reserved$layout() {
        return Reserved$LAYOUT;
    }

    private static final long Reserved$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Reserved
     * }
     */
    public static final long Reserved$offset() {
        return Reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Reserved
     * }
     */
    public static int Reserved(MemorySegment struct) {
        return struct.get(Reserved$LAYOUT, Reserved$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Reserved
     * }
     */
    public static void Reserved(MemorySegment struct, int fieldValue) {
        struct.set(Reserved$LAYOUT, Reserved$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

