// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct value_entA {
 *     LPSTR ve_valuename;
 *     DWORD ve_valuelen;
 *     DWORD_PTR ve_valueptr;
 *     DWORD ve_type;
 * }
 * }
 */
public class value_entA {

    value_entA() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("ve_valuename"),
        wgl_h.C_LONG.withName("ve_valuelen"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_LONG_LONG.withName("ve_valueptr"),
        wgl_h.C_LONG.withName("ve_type"),
        MemoryLayout.paddingLayout(4)
    ).withName("value_entA");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout ve_valuename$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ve_valuename"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPSTR ve_valuename
     * }
     */
    public static final AddressLayout ve_valuename$layout() {
        return ve_valuename$LAYOUT;
    }

    private static final long ve_valuename$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPSTR ve_valuename
     * }
     */
    public static final long ve_valuename$offset() {
        return ve_valuename$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPSTR ve_valuename
     * }
     */
    public static MemorySegment ve_valuename(MemorySegment struct) {
        return struct.get(ve_valuename$LAYOUT, ve_valuename$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPSTR ve_valuename
     * }
     */
    public static void ve_valuename(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ve_valuename$LAYOUT, ve_valuename$OFFSET, fieldValue);
    }

    private static final OfInt ve_valuelen$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ve_valuelen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD ve_valuelen
     * }
     */
    public static final OfInt ve_valuelen$layout() {
        return ve_valuelen$LAYOUT;
    }

    private static final long ve_valuelen$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD ve_valuelen
     * }
     */
    public static final long ve_valuelen$offset() {
        return ve_valuelen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD ve_valuelen
     * }
     */
    public static int ve_valuelen(MemorySegment struct) {
        return struct.get(ve_valuelen$LAYOUT, ve_valuelen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD ve_valuelen
     * }
     */
    public static void ve_valuelen(MemorySegment struct, int fieldValue) {
        struct.set(ve_valuelen$LAYOUT, ve_valuelen$OFFSET, fieldValue);
    }

    private static final OfLong ve_valueptr$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ve_valueptr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD_PTR ve_valueptr
     * }
     */
    public static final OfLong ve_valueptr$layout() {
        return ve_valueptr$LAYOUT;
    }

    private static final long ve_valueptr$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD_PTR ve_valueptr
     * }
     */
    public static final long ve_valueptr$offset() {
        return ve_valueptr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD_PTR ve_valueptr
     * }
     */
    public static long ve_valueptr(MemorySegment struct) {
        return struct.get(ve_valueptr$LAYOUT, ve_valueptr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD_PTR ve_valueptr
     * }
     */
    public static void ve_valueptr(MemorySegment struct, long fieldValue) {
        struct.set(ve_valueptr$LAYOUT, ve_valueptr$OFFSET, fieldValue);
    }

    private static final OfInt ve_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ve_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD ve_type
     * }
     */
    public static final OfInt ve_type$layout() {
        return ve_type$LAYOUT;
    }

    private static final long ve_type$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD ve_type
     * }
     */
    public static final long ve_type$offset() {
        return ve_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD ve_type
     * }
     */
    public static int ve_type(MemorySegment struct) {
        return struct.get(ve_type$LAYOUT, ve_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD ve_type
     * }
     */
    public static void ve_type(MemorySegment struct, int fieldValue) {
        struct.set(ve_type$LAYOUT, ve_type$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

