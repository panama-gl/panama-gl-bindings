// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _BCRYPT_ECCFULLKEY_BLOB {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("dwMagic"),
        Constants$root.C_LONG$LAYOUT.withName("dwVersion"),
        Constants$root.C_LONG$LAYOUT.withName("dwCurveType"),
        Constants$root.C_LONG$LAYOUT.withName("dwCurveGenerationAlgId"),
        Constants$root.C_LONG$LAYOUT.withName("cbFieldLength"),
        Constants$root.C_LONG$LAYOUT.withName("cbSubgroupOrder"),
        Constants$root.C_LONG$LAYOUT.withName("cbCofactor"),
        Constants$root.C_LONG$LAYOUT.withName("cbSeed")
    ).withName("_BCRYPT_ECCFULLKEY_BLOB");
    public static MemoryLayout $LAYOUT() {
        return _BCRYPT_ECCFULLKEY_BLOB.$struct$LAYOUT;
    }
    static final VarHandle dwMagic$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwMagic"));
    public static VarHandle dwMagic$VH() {
        return _BCRYPT_ECCFULLKEY_BLOB.dwMagic$VH;
    }
    public static int dwMagic$get(MemorySegment seg) {
        return (int)_BCRYPT_ECCFULLKEY_BLOB.dwMagic$VH.get(seg);
    }
    public static void dwMagic$set( MemorySegment seg, int x) {
        _BCRYPT_ECCFULLKEY_BLOB.dwMagic$VH.set(seg, x);
    }
    public static int dwMagic$get(MemorySegment seg, long index) {
        return (int)_BCRYPT_ECCFULLKEY_BLOB.dwMagic$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwMagic$set(MemorySegment seg, long index, int x) {
        _BCRYPT_ECCFULLKEY_BLOB.dwMagic$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwVersion"));
    public static VarHandle dwVersion$VH() {
        return _BCRYPT_ECCFULLKEY_BLOB.dwVersion$VH;
    }
    public static int dwVersion$get(MemorySegment seg) {
        return (int)_BCRYPT_ECCFULLKEY_BLOB.dwVersion$VH.get(seg);
    }
    public static void dwVersion$set( MemorySegment seg, int x) {
        _BCRYPT_ECCFULLKEY_BLOB.dwVersion$VH.set(seg, x);
    }
    public static int dwVersion$get(MemorySegment seg, long index) {
        return (int)_BCRYPT_ECCFULLKEY_BLOB.dwVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwVersion$set(MemorySegment seg, long index, int x) {
        _BCRYPT_ECCFULLKEY_BLOB.dwVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwCurveType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwCurveType"));
    public static VarHandle dwCurveType$VH() {
        return _BCRYPT_ECCFULLKEY_BLOB.dwCurveType$VH;
    }
    public static int dwCurveType$get(MemorySegment seg) {
        return (int)_BCRYPT_ECCFULLKEY_BLOB.dwCurveType$VH.get(seg);
    }
    public static void dwCurveType$set( MemorySegment seg, int x) {
        _BCRYPT_ECCFULLKEY_BLOB.dwCurveType$VH.set(seg, x);
    }
    public static int dwCurveType$get(MemorySegment seg, long index) {
        return (int)_BCRYPT_ECCFULLKEY_BLOB.dwCurveType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwCurveType$set(MemorySegment seg, long index, int x) {
        _BCRYPT_ECCFULLKEY_BLOB.dwCurveType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwCurveGenerationAlgId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwCurveGenerationAlgId"));
    public static VarHandle dwCurveGenerationAlgId$VH() {
        return _BCRYPT_ECCFULLKEY_BLOB.dwCurveGenerationAlgId$VH;
    }
    public static int dwCurveGenerationAlgId$get(MemorySegment seg) {
        return (int)_BCRYPT_ECCFULLKEY_BLOB.dwCurveGenerationAlgId$VH.get(seg);
    }
    public static void dwCurveGenerationAlgId$set( MemorySegment seg, int x) {
        _BCRYPT_ECCFULLKEY_BLOB.dwCurveGenerationAlgId$VH.set(seg, x);
    }
    public static int dwCurveGenerationAlgId$get(MemorySegment seg, long index) {
        return (int)_BCRYPT_ECCFULLKEY_BLOB.dwCurveGenerationAlgId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwCurveGenerationAlgId$set(MemorySegment seg, long index, int x) {
        _BCRYPT_ECCFULLKEY_BLOB.dwCurveGenerationAlgId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cbFieldLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbFieldLength"));
    public static VarHandle cbFieldLength$VH() {
        return _BCRYPT_ECCFULLKEY_BLOB.cbFieldLength$VH;
    }
    public static int cbFieldLength$get(MemorySegment seg) {
        return (int)_BCRYPT_ECCFULLKEY_BLOB.cbFieldLength$VH.get(seg);
    }
    public static void cbFieldLength$set( MemorySegment seg, int x) {
        _BCRYPT_ECCFULLKEY_BLOB.cbFieldLength$VH.set(seg, x);
    }
    public static int cbFieldLength$get(MemorySegment seg, long index) {
        return (int)_BCRYPT_ECCFULLKEY_BLOB.cbFieldLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbFieldLength$set(MemorySegment seg, long index, int x) {
        _BCRYPT_ECCFULLKEY_BLOB.cbFieldLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cbSubgroupOrder$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbSubgroupOrder"));
    public static VarHandle cbSubgroupOrder$VH() {
        return _BCRYPT_ECCFULLKEY_BLOB.cbSubgroupOrder$VH;
    }
    public static int cbSubgroupOrder$get(MemorySegment seg) {
        return (int)_BCRYPT_ECCFULLKEY_BLOB.cbSubgroupOrder$VH.get(seg);
    }
    public static void cbSubgroupOrder$set( MemorySegment seg, int x) {
        _BCRYPT_ECCFULLKEY_BLOB.cbSubgroupOrder$VH.set(seg, x);
    }
    public static int cbSubgroupOrder$get(MemorySegment seg, long index) {
        return (int)_BCRYPT_ECCFULLKEY_BLOB.cbSubgroupOrder$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSubgroupOrder$set(MemorySegment seg, long index, int x) {
        _BCRYPT_ECCFULLKEY_BLOB.cbSubgroupOrder$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cbCofactor$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbCofactor"));
    public static VarHandle cbCofactor$VH() {
        return _BCRYPT_ECCFULLKEY_BLOB.cbCofactor$VH;
    }
    public static int cbCofactor$get(MemorySegment seg) {
        return (int)_BCRYPT_ECCFULLKEY_BLOB.cbCofactor$VH.get(seg);
    }
    public static void cbCofactor$set( MemorySegment seg, int x) {
        _BCRYPT_ECCFULLKEY_BLOB.cbCofactor$VH.set(seg, x);
    }
    public static int cbCofactor$get(MemorySegment seg, long index) {
        return (int)_BCRYPT_ECCFULLKEY_BLOB.cbCofactor$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbCofactor$set(MemorySegment seg, long index, int x) {
        _BCRYPT_ECCFULLKEY_BLOB.cbCofactor$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cbSeed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbSeed"));
    public static VarHandle cbSeed$VH() {
        return _BCRYPT_ECCFULLKEY_BLOB.cbSeed$VH;
    }
    public static int cbSeed$get(MemorySegment seg) {
        return (int)_BCRYPT_ECCFULLKEY_BLOB.cbSeed$VH.get(seg);
    }
    public static void cbSeed$set( MemorySegment seg, int x) {
        _BCRYPT_ECCFULLKEY_BLOB.cbSeed$VH.set(seg, x);
    }
    public static int cbSeed$get(MemorySegment seg, long index) {
        return (int)_BCRYPT_ECCFULLKEY_BLOB.cbSeed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSeed$set(MemorySegment seg, long index, int x) {
        _BCRYPT_ECCFULLKEY_BLOB.cbSeed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


