// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _MIDL_INTERCEPTION_INFO {
 *     unsigned long Version;
 *     PFORMAT_STRING ProcString;
 *     const unsigned short *ProcFormatOffsetTable;
 *     unsigned long ProcCount;
 *     PFORMAT_STRING TypeString;
 * }
 * }
 */
public class _MIDL_INTERCEPTION_INFO {

    _MIDL_INTERCEPTION_INFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("Version"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_POINTER.withName("ProcString"),
        wgl_h.C_POINTER.withName("ProcFormatOffsetTable"),
        wgl_h.C_LONG.withName("ProcCount"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_POINTER.withName("TypeString")
    ).withName("_MIDL_INTERCEPTION_INFO");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt Version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long Version
     * }
     */
    public static final OfInt Version$layout() {
        return Version$LAYOUT;
    }

    private static final long Version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long Version
     * }
     */
    public static final long Version$offset() {
        return Version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long Version
     * }
     */
    public static int Version(MemorySegment struct) {
        return struct.get(Version$LAYOUT, Version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long Version
     * }
     */
    public static void Version(MemorySegment struct, int fieldValue) {
        struct.set(Version$LAYOUT, Version$OFFSET, fieldValue);
    }

    private static final AddressLayout ProcString$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ProcString"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PFORMAT_STRING ProcString
     * }
     */
    public static final AddressLayout ProcString$layout() {
        return ProcString$LAYOUT;
    }

    private static final long ProcString$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PFORMAT_STRING ProcString
     * }
     */
    public static final long ProcString$offset() {
        return ProcString$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PFORMAT_STRING ProcString
     * }
     */
    public static MemorySegment ProcString(MemorySegment struct) {
        return struct.get(ProcString$LAYOUT, ProcString$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PFORMAT_STRING ProcString
     * }
     */
    public static void ProcString(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ProcString$LAYOUT, ProcString$OFFSET, fieldValue);
    }

    private static final AddressLayout ProcFormatOffsetTable$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ProcFormatOffsetTable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const unsigned short *ProcFormatOffsetTable
     * }
     */
    public static final AddressLayout ProcFormatOffsetTable$layout() {
        return ProcFormatOffsetTable$LAYOUT;
    }

    private static final long ProcFormatOffsetTable$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const unsigned short *ProcFormatOffsetTable
     * }
     */
    public static final long ProcFormatOffsetTable$offset() {
        return ProcFormatOffsetTable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const unsigned short *ProcFormatOffsetTable
     * }
     */
    public static MemorySegment ProcFormatOffsetTable(MemorySegment struct) {
        return struct.get(ProcFormatOffsetTable$LAYOUT, ProcFormatOffsetTable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const unsigned short *ProcFormatOffsetTable
     * }
     */
    public static void ProcFormatOffsetTable(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ProcFormatOffsetTable$LAYOUT, ProcFormatOffsetTable$OFFSET, fieldValue);
    }

    private static final OfInt ProcCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ProcCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long ProcCount
     * }
     */
    public static final OfInt ProcCount$layout() {
        return ProcCount$LAYOUT;
    }

    private static final long ProcCount$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long ProcCount
     * }
     */
    public static final long ProcCount$offset() {
        return ProcCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long ProcCount
     * }
     */
    public static int ProcCount(MemorySegment struct) {
        return struct.get(ProcCount$LAYOUT, ProcCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long ProcCount
     * }
     */
    public static void ProcCount(MemorySegment struct, int fieldValue) {
        struct.set(ProcCount$LAYOUT, ProcCount$OFFSET, fieldValue);
    }

    private static final AddressLayout TypeString$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("TypeString"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PFORMAT_STRING TypeString
     * }
     */
    public static final AddressLayout TypeString$layout() {
        return TypeString$LAYOUT;
    }

    private static final long TypeString$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PFORMAT_STRING TypeString
     * }
     */
    public static final long TypeString$offset() {
        return TypeString$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PFORMAT_STRING TypeString
     * }
     */
    public static MemorySegment TypeString(MemorySegment struct) {
        return struct.get(TypeString$LAYOUT, TypeString$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PFORMAT_STRING TypeString
     * }
     */
    public static void TypeString(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(TypeString$LAYOUT, TypeString$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

