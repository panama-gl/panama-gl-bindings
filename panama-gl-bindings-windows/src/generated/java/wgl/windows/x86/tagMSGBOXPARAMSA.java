// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tagMSGBOXPARAMSA {
 *     UINT cbSize;
 *     HWND hwndOwner;
 *     HINSTANCE hInstance;
 *     LPCSTR lpszText;
 *     LPCSTR lpszCaption;
 *     DWORD dwStyle;
 *     LPCSTR lpszIcon;
 *     DWORD_PTR dwContextHelpId;
 *     MSGBOXCALLBACK lpfnMsgBoxCallback;
 *     DWORD dwLanguageId;
 * }
 * }
 */
public class tagMSGBOXPARAMSA {

    tagMSGBOXPARAMSA() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_INT.withName("cbSize"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_POINTER.withName("hwndOwner"),
        wgl_h.C_POINTER.withName("hInstance"),
        wgl_h.C_POINTER.withName("lpszText"),
        wgl_h.C_POINTER.withName("lpszCaption"),
        wgl_h.C_LONG.withName("dwStyle"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_POINTER.withName("lpszIcon"),
        wgl_h.C_LONG_LONG.withName("dwContextHelpId"),
        wgl_h.C_POINTER.withName("lpfnMsgBoxCallback"),
        wgl_h.C_LONG.withName("dwLanguageId"),
        MemoryLayout.paddingLayout(4)
    ).withName("tagMSGBOXPARAMSA");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt cbSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UINT cbSize
     * }
     */
    public static final OfInt cbSize$layout() {
        return cbSize$LAYOUT;
    }

    private static final long cbSize$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UINT cbSize
     * }
     */
    public static final long cbSize$offset() {
        return cbSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UINT cbSize
     * }
     */
    public static int cbSize(MemorySegment struct) {
        return struct.get(cbSize$LAYOUT, cbSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UINT cbSize
     * }
     */
    public static void cbSize(MemorySegment struct, int fieldValue) {
        struct.set(cbSize$LAYOUT, cbSize$OFFSET, fieldValue);
    }

    private static final AddressLayout hwndOwner$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hwndOwner"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HWND hwndOwner
     * }
     */
    public static final AddressLayout hwndOwner$layout() {
        return hwndOwner$LAYOUT;
    }

    private static final long hwndOwner$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HWND hwndOwner
     * }
     */
    public static final long hwndOwner$offset() {
        return hwndOwner$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HWND hwndOwner
     * }
     */
    public static MemorySegment hwndOwner(MemorySegment struct) {
        return struct.get(hwndOwner$LAYOUT, hwndOwner$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HWND hwndOwner
     * }
     */
    public static void hwndOwner(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hwndOwner$LAYOUT, hwndOwner$OFFSET, fieldValue);
    }

    private static final AddressLayout hInstance$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hInstance"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HINSTANCE hInstance
     * }
     */
    public static final AddressLayout hInstance$layout() {
        return hInstance$LAYOUT;
    }

    private static final long hInstance$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HINSTANCE hInstance
     * }
     */
    public static final long hInstance$offset() {
        return hInstance$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HINSTANCE hInstance
     * }
     */
    public static MemorySegment hInstance(MemorySegment struct) {
        return struct.get(hInstance$LAYOUT, hInstance$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HINSTANCE hInstance
     * }
     */
    public static void hInstance(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hInstance$LAYOUT, hInstance$OFFSET, fieldValue);
    }

    private static final AddressLayout lpszText$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lpszText"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPCSTR lpszText
     * }
     */
    public static final AddressLayout lpszText$layout() {
        return lpszText$LAYOUT;
    }

    private static final long lpszText$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPCSTR lpszText
     * }
     */
    public static final long lpszText$offset() {
        return lpszText$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPCSTR lpszText
     * }
     */
    public static MemorySegment lpszText(MemorySegment struct) {
        return struct.get(lpszText$LAYOUT, lpszText$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPCSTR lpszText
     * }
     */
    public static void lpszText(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lpszText$LAYOUT, lpszText$OFFSET, fieldValue);
    }

    private static final AddressLayout lpszCaption$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lpszCaption"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPCSTR lpszCaption
     * }
     */
    public static final AddressLayout lpszCaption$layout() {
        return lpszCaption$LAYOUT;
    }

    private static final long lpszCaption$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPCSTR lpszCaption
     * }
     */
    public static final long lpszCaption$offset() {
        return lpszCaption$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPCSTR lpszCaption
     * }
     */
    public static MemorySegment lpszCaption(MemorySegment struct) {
        return struct.get(lpszCaption$LAYOUT, lpszCaption$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPCSTR lpszCaption
     * }
     */
    public static void lpszCaption(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lpszCaption$LAYOUT, lpszCaption$OFFSET, fieldValue);
    }

    private static final OfInt dwStyle$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwStyle"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwStyle
     * }
     */
    public static final OfInt dwStyle$layout() {
        return dwStyle$LAYOUT;
    }

    private static final long dwStyle$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwStyle
     * }
     */
    public static final long dwStyle$offset() {
        return dwStyle$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwStyle
     * }
     */
    public static int dwStyle(MemorySegment struct) {
        return struct.get(dwStyle$LAYOUT, dwStyle$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwStyle
     * }
     */
    public static void dwStyle(MemorySegment struct, int fieldValue) {
        struct.set(dwStyle$LAYOUT, dwStyle$OFFSET, fieldValue);
    }

    private static final AddressLayout lpszIcon$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lpszIcon"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPCSTR lpszIcon
     * }
     */
    public static final AddressLayout lpszIcon$layout() {
        return lpszIcon$LAYOUT;
    }

    private static final long lpszIcon$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPCSTR lpszIcon
     * }
     */
    public static final long lpszIcon$offset() {
        return lpszIcon$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPCSTR lpszIcon
     * }
     */
    public static MemorySegment lpszIcon(MemorySegment struct) {
        return struct.get(lpszIcon$LAYOUT, lpszIcon$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPCSTR lpszIcon
     * }
     */
    public static void lpszIcon(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lpszIcon$LAYOUT, lpszIcon$OFFSET, fieldValue);
    }

    private static final OfLong dwContextHelpId$LAYOUT = (OfLong)$LAYOUT.select(groupElement("dwContextHelpId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD_PTR dwContextHelpId
     * }
     */
    public static final OfLong dwContextHelpId$layout() {
        return dwContextHelpId$LAYOUT;
    }

    private static final long dwContextHelpId$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD_PTR dwContextHelpId
     * }
     */
    public static final long dwContextHelpId$offset() {
        return dwContextHelpId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD_PTR dwContextHelpId
     * }
     */
    public static long dwContextHelpId(MemorySegment struct) {
        return struct.get(dwContextHelpId$LAYOUT, dwContextHelpId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD_PTR dwContextHelpId
     * }
     */
    public static void dwContextHelpId(MemorySegment struct, long fieldValue) {
        struct.set(dwContextHelpId$LAYOUT, dwContextHelpId$OFFSET, fieldValue);
    }

    private static final AddressLayout lpfnMsgBoxCallback$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lpfnMsgBoxCallback"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * MSGBOXCALLBACK lpfnMsgBoxCallback
     * }
     */
    public static final AddressLayout lpfnMsgBoxCallback$layout() {
        return lpfnMsgBoxCallback$LAYOUT;
    }

    private static final long lpfnMsgBoxCallback$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * MSGBOXCALLBACK lpfnMsgBoxCallback
     * }
     */
    public static final long lpfnMsgBoxCallback$offset() {
        return lpfnMsgBoxCallback$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * MSGBOXCALLBACK lpfnMsgBoxCallback
     * }
     */
    public static MemorySegment lpfnMsgBoxCallback(MemorySegment struct) {
        return struct.get(lpfnMsgBoxCallback$LAYOUT, lpfnMsgBoxCallback$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * MSGBOXCALLBACK lpfnMsgBoxCallback
     * }
     */
    public static void lpfnMsgBoxCallback(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lpfnMsgBoxCallback$LAYOUT, lpfnMsgBoxCallback$OFFSET, fieldValue);
    }

    private static final OfInt dwLanguageId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwLanguageId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwLanguageId
     * }
     */
    public static final OfInt dwLanguageId$layout() {
        return dwLanguageId$LAYOUT;
    }

    private static final long dwLanguageId$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwLanguageId
     * }
     */
    public static final long dwLanguageId$offset() {
        return dwLanguageId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwLanguageId
     * }
     */
    public static int dwLanguageId(MemorySegment struct) {
        return struct.get(dwLanguageId$LAYOUT, dwLanguageId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwLanguageId
     * }
     */
    public static void dwLanguageId(MemorySegment struct, int fieldValue) {
        struct.set(dwLanguageId$LAYOUT, dwLanguageId$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

