// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _MOUSE_EVENT_RECORD {
 *     COORD dwMousePosition;
 *     DWORD dwButtonState;
 *     DWORD dwControlKeyState;
 *     DWORD dwEventFlags;
 * }
 * }
 */
public class _MOUSE_EVENT_RECORD {

    _MOUSE_EVENT_RECORD() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _COORD.layout().withName("dwMousePosition"),
        wgl_h.C_LONG.withName("dwButtonState"),
        wgl_h.C_LONG.withName("dwControlKeyState"),
        wgl_h.C_LONG.withName("dwEventFlags")
    ).withName("_MOUSE_EVENT_RECORD");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout dwMousePosition$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("dwMousePosition"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * COORD dwMousePosition
     * }
     */
    public static final GroupLayout dwMousePosition$layout() {
        return dwMousePosition$LAYOUT;
    }

    private static final long dwMousePosition$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * COORD dwMousePosition
     * }
     */
    public static final long dwMousePosition$offset() {
        return dwMousePosition$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * COORD dwMousePosition
     * }
     */
    public static MemorySegment dwMousePosition(MemorySegment struct) {
        return struct.asSlice(dwMousePosition$OFFSET, dwMousePosition$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * COORD dwMousePosition
     * }
     */
    public static void dwMousePosition(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, dwMousePosition$OFFSET, dwMousePosition$LAYOUT.byteSize());
    }

    private static final OfInt dwButtonState$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwButtonState"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwButtonState
     * }
     */
    public static final OfInt dwButtonState$layout() {
        return dwButtonState$LAYOUT;
    }

    private static final long dwButtonState$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwButtonState
     * }
     */
    public static final long dwButtonState$offset() {
        return dwButtonState$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwButtonState
     * }
     */
    public static int dwButtonState(MemorySegment struct) {
        return struct.get(dwButtonState$LAYOUT, dwButtonState$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwButtonState
     * }
     */
    public static void dwButtonState(MemorySegment struct, int fieldValue) {
        struct.set(dwButtonState$LAYOUT, dwButtonState$OFFSET, fieldValue);
    }

    private static final OfInt dwControlKeyState$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwControlKeyState"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwControlKeyState
     * }
     */
    public static final OfInt dwControlKeyState$layout() {
        return dwControlKeyState$LAYOUT;
    }

    private static final long dwControlKeyState$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwControlKeyState
     * }
     */
    public static final long dwControlKeyState$offset() {
        return dwControlKeyState$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwControlKeyState
     * }
     */
    public static int dwControlKeyState(MemorySegment struct) {
        return struct.get(dwControlKeyState$LAYOUT, dwControlKeyState$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwControlKeyState
     * }
     */
    public static void dwControlKeyState(MemorySegment struct, int fieldValue) {
        struct.set(dwControlKeyState$LAYOUT, dwControlKeyState$OFFSET, fieldValue);
    }

    private static final OfInt dwEventFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwEventFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwEventFlags
     * }
     */
    public static final OfInt dwEventFlags$layout() {
        return dwEventFlags$LAYOUT;
    }

    private static final long dwEventFlags$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwEventFlags
     * }
     */
    public static final long dwEventFlags$offset() {
        return dwEventFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwEventFlags
     * }
     */
    public static int dwEventFlags(MemorySegment struct) {
        return struct.get(dwEventFlags$LAYOUT, dwEventFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwEventFlags
     * }
     */
    public static void dwEventFlags(MemorySegment struct, int fieldValue) {
        struct.set(dwEventFlags$LAYOUT, dwEventFlags$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

