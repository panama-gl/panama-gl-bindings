// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class wgl_h_26 extends wgl_h_25 {

    public static MethodHandle CreateDispTypeInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1243.CreateDispTypeInfo$MH,"CreateDispTypeInfo");
    }
    public static int CreateDispTypeInfo ( Addressable pidata,  int lcid,  Addressable pptinfo) {
        var mh$ = CreateDispTypeInfo$MH();
        try {
            return (int)mh$.invokeExact(pidata, lcid, pptinfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateStdDispatch$MH() {
        return RuntimeHelper.requireNonNull(constants$1243.CreateStdDispatch$MH,"CreateStdDispatch");
    }
    public static int CreateStdDispatch ( Addressable punkOuter,  Addressable pvThis,  Addressable ptinfo,  Addressable ppunkStdDisp) {
        var mh$ = CreateStdDispatch$MH();
        try {
            return (int)mh$.invokeExact(punkOuter, pvThis, ptinfo, ppunkStdDisp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DispCallFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1243.DispCallFunc$MH,"DispCallFunc");
    }
    public static int DispCallFunc ( Addressable pvInstance,  long oVft,  int cc,  short vtReturn,  int cActuals,  Addressable prgvt,  Addressable prgpvarg,  Addressable pvargResult) {
        var mh$ = DispCallFunc$MH();
        try {
            return (int)mh$.invokeExact(pvInstance, oVft, cc, vtReturn, cActuals, prgvt, prgpvarg, pvargResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterActiveObject$MH() {
        return RuntimeHelper.requireNonNull(constants$1244.RegisterActiveObject$MH,"RegisterActiveObject");
    }
    public static int RegisterActiveObject ( Addressable punk,  Addressable rclsid,  int dwFlags,  Addressable pdwRegister) {
        var mh$ = RegisterActiveObject$MH();
        try {
            return (int)mh$.invokeExact(punk, rclsid, dwFlags, pdwRegister);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RevokeActiveObject$MH() {
        return RuntimeHelper.requireNonNull(constants$1244.RevokeActiveObject$MH,"RevokeActiveObject");
    }
    public static int RevokeActiveObject ( int dwRegister,  Addressable pvReserved) {
        var mh$ = RevokeActiveObject$MH();
        try {
            return (int)mh$.invokeExact(dwRegister, pvReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetActiveObject$MH() {
        return RuntimeHelper.requireNonNull(constants$1244.GetActiveObject$MH,"GetActiveObject");
    }
    public static int GetActiveObject ( Addressable rclsid,  Addressable pvReserved,  Addressable ppunk) {
        var mh$ = GetActiveObject$MH();
        try {
            return (int)mh$.invokeExact(rclsid, pvReserved, ppunk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetErrorInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1244.SetErrorInfo$MH,"SetErrorInfo");
    }
    public static int SetErrorInfo ( int dwReserved,  Addressable perrinfo) {
        var mh$ = SetErrorInfo$MH();
        try {
            return (int)mh$.invokeExact(dwReserved, perrinfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetErrorInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1244.GetErrorInfo$MH,"GetErrorInfo");
    }
    public static int GetErrorInfo ( int dwReserved,  Addressable pperrinfo) {
        var mh$ = GetErrorInfo$MH();
        try {
            return (int)mh$.invokeExact(dwReserved, pperrinfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateErrorInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1244.CreateErrorInfo$MH,"CreateErrorInfo");
    }
    public static int CreateErrorInfo ( Addressable pperrinfo) {
        var mh$ = CreateErrorInfo$MH();
        try {
            return (int)mh$.invokeExact(pperrinfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRecordInfoFromTypeInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1245.GetRecordInfoFromTypeInfo$MH,"GetRecordInfoFromTypeInfo");
    }
    public static int GetRecordInfoFromTypeInfo ( Addressable pTypeInfo,  Addressable ppRecInfo) {
        var mh$ = GetRecordInfoFromTypeInfo$MH();
        try {
            return (int)mh$.invokeExact(pTypeInfo, ppRecInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRecordInfoFromGuids$MH() {
        return RuntimeHelper.requireNonNull(constants$1245.GetRecordInfoFromGuids$MH,"GetRecordInfoFromGuids");
    }
    public static int GetRecordInfoFromGuids ( Addressable rGuidTypeLib,  int uVerMajor,  int uVerMinor,  int lcid,  Addressable rGuidTypeInfo,  Addressable ppRecInfo) {
        var mh$ = GetRecordInfoFromGuids$MH();
        try {
            return (int)mh$.invokeExact(rGuidTypeLib, uVerMajor, uVerMinor, lcid, rGuidTypeInfo, ppRecInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OaBuildVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$1245.OaBuildVersion$MH,"OaBuildVersion");
    }
    public static int OaBuildVersion () {
        var mh$ = OaBuildVersion$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ClearCustData$MH() {
        return RuntimeHelper.requireNonNull(constants$1245.ClearCustData$MH,"ClearCustData");
    }
    public static void ClearCustData ( Addressable pCustData) {
        var mh$ = ClearCustData$MH();
        try {
            mh$.invokeExact(pCustData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OaEnablePerUserTLibRegistration$MH() {
        return RuntimeHelper.requireNonNull(constants$1245.OaEnablePerUserTLibRegistration$MH,"OaEnablePerUserTLibRegistration");
    }
    public static void OaEnablePerUserTLibRegistration () {
        var mh$ = OaEnablePerUserTLibRegistration$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleBuildVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$1245.OleBuildVersion$MH,"OleBuildVersion");
    }
    public static int OleBuildVersion () {
        var mh$ = OleBuildVersion$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteFmtUserTypeStg$MH() {
        return RuntimeHelper.requireNonNull(constants$1246.WriteFmtUserTypeStg$MH,"WriteFmtUserTypeStg");
    }
    public static int WriteFmtUserTypeStg ( Addressable pstg,  short cf,  Addressable lpszUserType) {
        var mh$ = WriteFmtUserTypeStg$MH();
        try {
            return (int)mh$.invokeExact(pstg, cf, lpszUserType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadFmtUserTypeStg$MH() {
        return RuntimeHelper.requireNonNull(constants$1246.ReadFmtUserTypeStg$MH,"ReadFmtUserTypeStg");
    }
    public static int ReadFmtUserTypeStg ( Addressable pstg,  Addressable pcf,  Addressable lplpszUserType) {
        var mh$ = ReadFmtUserTypeStg$MH();
        try {
            return (int)mh$.invokeExact(pstg, pcf, lplpszUserType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleInitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$1246.OleInitialize$MH,"OleInitialize");
    }
    public static int OleInitialize ( Addressable pvReserved) {
        var mh$ = OleInitialize$MH();
        try {
            return (int)mh$.invokeExact(pvReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleUninitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$1246.OleUninitialize$MH,"OleUninitialize");
    }
    public static void OleUninitialize () {
        var mh$ = OleUninitialize$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleQueryLinkFromData$MH() {
        return RuntimeHelper.requireNonNull(constants$1246.OleQueryLinkFromData$MH,"OleQueryLinkFromData");
    }
    public static int OleQueryLinkFromData ( Addressable pSrcDataObject) {
        var mh$ = OleQueryLinkFromData$MH();
        try {
            return (int)mh$.invokeExact(pSrcDataObject);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleQueryCreateFromData$MH() {
        return RuntimeHelper.requireNonNull(constants$1246.OleQueryCreateFromData$MH,"OleQueryCreateFromData");
    }
    public static int OleQueryCreateFromData ( Addressable pSrcDataObject) {
        var mh$ = OleQueryCreateFromData$MH();
        try {
            return (int)mh$.invokeExact(pSrcDataObject);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$1247.OleCreate$MH,"OleCreate");
    }
    public static int OleCreate ( Addressable rclsid,  Addressable riid,  int renderopt,  Addressable pFormatEtc,  Addressable pClientSite,  Addressable pStg,  Addressable ppvObj) {
        var mh$ = OleCreate$MH();
        try {
            return (int)mh$.invokeExact(rclsid, riid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1247.OleCreateEx$MH,"OleCreateEx");
    }
    public static int OleCreateEx ( Addressable rclsid,  Addressable riid,  int dwFlags,  int renderopt,  int cFormats,  Addressable rgAdvf,  Addressable rgFormatEtc,  Addressable lpAdviseSink,  Addressable rgdwConnection,  Addressable pClientSite,  Addressable pStg,  Addressable ppvObj) {
        var mh$ = OleCreateEx$MH();
        try {
            return (int)mh$.invokeExact(rclsid, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateFromData$MH() {
        return RuntimeHelper.requireNonNull(constants$1247.OleCreateFromData$MH,"OleCreateFromData");
    }
    public static int OleCreateFromData ( Addressable pSrcDataObj,  Addressable riid,  int renderopt,  Addressable pFormatEtc,  Addressable pClientSite,  Addressable pStg,  Addressable ppvObj) {
        var mh$ = OleCreateFromData$MH();
        try {
            return (int)mh$.invokeExact(pSrcDataObj, riid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateFromDataEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1247.OleCreateFromDataEx$MH,"OleCreateFromDataEx");
    }
    public static int OleCreateFromDataEx ( Addressable pSrcDataObj,  Addressable riid,  int dwFlags,  int renderopt,  int cFormats,  Addressable rgAdvf,  Addressable rgFormatEtc,  Addressable lpAdviseSink,  Addressable rgdwConnection,  Addressable pClientSite,  Addressable pStg,  Addressable ppvObj) {
        var mh$ = OleCreateFromDataEx$MH();
        try {
            return (int)mh$.invokeExact(pSrcDataObj, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateLinkFromData$MH() {
        return RuntimeHelper.requireNonNull(constants$1247.OleCreateLinkFromData$MH,"OleCreateLinkFromData");
    }
    public static int OleCreateLinkFromData ( Addressable pSrcDataObj,  Addressable riid,  int renderopt,  Addressable pFormatEtc,  Addressable pClientSite,  Addressable pStg,  Addressable ppvObj) {
        var mh$ = OleCreateLinkFromData$MH();
        try {
            return (int)mh$.invokeExact(pSrcDataObj, riid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateLinkFromDataEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1247.OleCreateLinkFromDataEx$MH,"OleCreateLinkFromDataEx");
    }
    public static int OleCreateLinkFromDataEx ( Addressable pSrcDataObj,  Addressable riid,  int dwFlags,  int renderopt,  int cFormats,  Addressable rgAdvf,  Addressable rgFormatEtc,  Addressable lpAdviseSink,  Addressable rgdwConnection,  Addressable pClientSite,  Addressable pStg,  Addressable ppvObj) {
        var mh$ = OleCreateLinkFromDataEx$MH();
        try {
            return (int)mh$.invokeExact(pSrcDataObj, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateStaticFromData$MH() {
        return RuntimeHelper.requireNonNull(constants$1248.OleCreateStaticFromData$MH,"OleCreateStaticFromData");
    }
    public static int OleCreateStaticFromData ( Addressable pSrcDataObj,  Addressable iid,  int renderopt,  Addressable pFormatEtc,  Addressable pClientSite,  Addressable pStg,  Addressable ppvObj) {
        var mh$ = OleCreateStaticFromData$MH();
        try {
            return (int)mh$.invokeExact(pSrcDataObj, iid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateLink$MH() {
        return RuntimeHelper.requireNonNull(constants$1248.OleCreateLink$MH,"OleCreateLink");
    }
    public static int OleCreateLink ( Addressable pmkLinkSrc,  Addressable riid,  int renderopt,  Addressable lpFormatEtc,  Addressable pClientSite,  Addressable pStg,  Addressable ppvObj) {
        var mh$ = OleCreateLink$MH();
        try {
            return (int)mh$.invokeExact(pmkLinkSrc, riid, renderopt, lpFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateLinkEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1248.OleCreateLinkEx$MH,"OleCreateLinkEx");
    }
    public static int OleCreateLinkEx ( Addressable pmkLinkSrc,  Addressable riid,  int dwFlags,  int renderopt,  int cFormats,  Addressable rgAdvf,  Addressable rgFormatEtc,  Addressable lpAdviseSink,  Addressable rgdwConnection,  Addressable pClientSite,  Addressable pStg,  Addressable ppvObj) {
        var mh$ = OleCreateLinkEx$MH();
        try {
            return (int)mh$.invokeExact(pmkLinkSrc, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateLinkToFile$MH() {
        return RuntimeHelper.requireNonNull(constants$1248.OleCreateLinkToFile$MH,"OleCreateLinkToFile");
    }
    public static int OleCreateLinkToFile ( Addressable lpszFileName,  Addressable riid,  int renderopt,  Addressable lpFormatEtc,  Addressable pClientSite,  Addressable pStg,  Addressable ppvObj) {
        var mh$ = OleCreateLinkToFile$MH();
        try {
            return (int)mh$.invokeExact(lpszFileName, riid, renderopt, lpFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateLinkToFileEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1248.OleCreateLinkToFileEx$MH,"OleCreateLinkToFileEx");
    }
    public static int OleCreateLinkToFileEx ( Addressable lpszFileName,  Addressable riid,  int dwFlags,  int renderopt,  int cFormats,  Addressable rgAdvf,  Addressable rgFormatEtc,  Addressable lpAdviseSink,  Addressable rgdwConnection,  Addressable pClientSite,  Addressable pStg,  Addressable ppvObj) {
        var mh$ = OleCreateLinkToFileEx$MH();
        try {
            return (int)mh$.invokeExact(lpszFileName, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateFromFile$MH() {
        return RuntimeHelper.requireNonNull(constants$1248.OleCreateFromFile$MH,"OleCreateFromFile");
    }
    public static int OleCreateFromFile ( Addressable rclsid,  Addressable lpszFileName,  Addressable riid,  int renderopt,  Addressable lpFormatEtc,  Addressable pClientSite,  Addressable pStg,  Addressable ppvObj) {
        var mh$ = OleCreateFromFile$MH();
        try {
            return (int)mh$.invokeExact(rclsid, lpszFileName, riid, renderopt, lpFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateFromFileEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1249.OleCreateFromFileEx$MH,"OleCreateFromFileEx");
    }
    public static int OleCreateFromFileEx ( Addressable rclsid,  Addressable lpszFileName,  Addressable riid,  int dwFlags,  int renderopt,  int cFormats,  Addressable rgAdvf,  Addressable rgFormatEtc,  Addressable lpAdviseSink,  Addressable rgdwConnection,  Addressable pClientSite,  Addressable pStg,  Addressable ppvObj) {
        var mh$ = OleCreateFromFileEx$MH();
        try {
            return (int)mh$.invokeExact(rclsid, lpszFileName, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleLoad$MH() {
        return RuntimeHelper.requireNonNull(constants$1249.OleLoad$MH,"OleLoad");
    }
    public static int OleLoad ( Addressable pStg,  Addressable riid,  Addressable pClientSite,  Addressable ppvObj) {
        var mh$ = OleLoad$MH();
        try {
            return (int)mh$.invokeExact(pStg, riid, pClientSite, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleSave$MH() {
        return RuntimeHelper.requireNonNull(constants$1249.OleSave$MH,"OleSave");
    }
    public static int OleSave ( Addressable pPS,  Addressable pStg,  int fSameAsLoad) {
        var mh$ = OleSave$MH();
        try {
            return (int)mh$.invokeExact(pPS, pStg, fSameAsLoad);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleLoadFromStream$MH() {
        return RuntimeHelper.requireNonNull(constants$1249.OleLoadFromStream$MH,"OleLoadFromStream");
    }
    public static int OleLoadFromStream ( Addressable pStm,  Addressable iidInterface,  Addressable ppvObj) {
        var mh$ = OleLoadFromStream$MH();
        try {
            return (int)mh$.invokeExact(pStm, iidInterface, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleSaveToStream$MH() {
        return RuntimeHelper.requireNonNull(constants$1249.OleSaveToStream$MH,"OleSaveToStream");
    }
    public static int OleSaveToStream ( Addressable pPStm,  Addressable pStm) {
        var mh$ = OleSaveToStream$MH();
        try {
            return (int)mh$.invokeExact(pPStm, pStm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleSetContainedObject$MH() {
        return RuntimeHelper.requireNonNull(constants$1249.OleSetContainedObject$MH,"OleSetContainedObject");
    }
    public static int OleSetContainedObject ( Addressable pUnknown,  int fContained) {
        var mh$ = OleSetContainedObject$MH();
        try {
            return (int)mh$.invokeExact(pUnknown, fContained);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleNoteObjectVisible$MH() {
        return RuntimeHelper.requireNonNull(constants$1250.OleNoteObjectVisible$MH,"OleNoteObjectVisible");
    }
    public static int OleNoteObjectVisible ( Addressable pUnknown,  int fVisible) {
        var mh$ = OleNoteObjectVisible$MH();
        try {
            return (int)mh$.invokeExact(pUnknown, fVisible);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterDragDrop$MH() {
        return RuntimeHelper.requireNonNull(constants$1250.RegisterDragDrop$MH,"RegisterDragDrop");
    }
    public static int RegisterDragDrop ( Addressable hwnd,  Addressable pDropTarget) {
        var mh$ = RegisterDragDrop$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pDropTarget);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RevokeDragDrop$MH() {
        return RuntimeHelper.requireNonNull(constants$1250.RevokeDragDrop$MH,"RevokeDragDrop");
    }
    public static int RevokeDragDrop ( Addressable hwnd) {
        var mh$ = RevokeDragDrop$MH();
        try {
            return (int)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DoDragDrop$MH() {
        return RuntimeHelper.requireNonNull(constants$1250.DoDragDrop$MH,"DoDragDrop");
    }
    public static int DoDragDrop ( Addressable pDataObj,  Addressable pDropSource,  int dwOKEffects,  Addressable pdwEffect) {
        var mh$ = DoDragDrop$MH();
        try {
            return (int)mh$.invokeExact(pDataObj, pDropSource, dwOKEffects, pdwEffect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleSetClipboard$MH() {
        return RuntimeHelper.requireNonNull(constants$1250.OleSetClipboard$MH,"OleSetClipboard");
    }
    public static int OleSetClipboard ( Addressable pDataObj) {
        var mh$ = OleSetClipboard$MH();
        try {
            return (int)mh$.invokeExact(pDataObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleGetClipboard$MH() {
        return RuntimeHelper.requireNonNull(constants$1250.OleGetClipboard$MH,"OleGetClipboard");
    }
    public static int OleGetClipboard ( Addressable ppDataObj) {
        var mh$ = OleGetClipboard$MH();
        try {
            return (int)mh$.invokeExact(ppDataObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleGetClipboardWithEnterpriseInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1251.OleGetClipboardWithEnterpriseInfo$MH,"OleGetClipboardWithEnterpriseInfo");
    }
    public static int OleGetClipboardWithEnterpriseInfo ( Addressable dataObject,  Addressable dataEnterpriseId,  Addressable sourceDescription,  Addressable targetDescription,  Addressable dataDescription) {
        var mh$ = OleGetClipboardWithEnterpriseInfo$MH();
        try {
            return (int)mh$.invokeExact(dataObject, dataEnterpriseId, sourceDescription, targetDescription, dataDescription);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleFlushClipboard$MH() {
        return RuntimeHelper.requireNonNull(constants$1251.OleFlushClipboard$MH,"OleFlushClipboard");
    }
    public static int OleFlushClipboard () {
        var mh$ = OleFlushClipboard$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleIsCurrentClipboard$MH() {
        return RuntimeHelper.requireNonNull(constants$1251.OleIsCurrentClipboard$MH,"OleIsCurrentClipboard");
    }
    public static int OleIsCurrentClipboard ( Addressable pDataObj) {
        var mh$ = OleIsCurrentClipboard$MH();
        try {
            return (int)mh$.invokeExact(pDataObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateMenuDescriptor$MH() {
        return RuntimeHelper.requireNonNull(constants$1251.OleCreateMenuDescriptor$MH,"OleCreateMenuDescriptor");
    }
    public static MemoryAddress OleCreateMenuDescriptor ( Addressable hmenuCombined,  Addressable lpMenuWidths) {
        var mh$ = OleCreateMenuDescriptor$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hmenuCombined, lpMenuWidths);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleSetMenuDescriptor$MH() {
        return RuntimeHelper.requireNonNull(constants$1251.OleSetMenuDescriptor$MH,"OleSetMenuDescriptor");
    }
    public static int OleSetMenuDescriptor ( Addressable holemenu,  Addressable hwndFrame,  Addressable hwndActiveObject,  Addressable lpFrame,  Addressable lpActiveObj) {
        var mh$ = OleSetMenuDescriptor$MH();
        try {
            return (int)mh$.invokeExact(holemenu, hwndFrame, hwndActiveObject, lpFrame, lpActiveObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleDestroyMenuDescriptor$MH() {
        return RuntimeHelper.requireNonNull(constants$1251.OleDestroyMenuDescriptor$MH,"OleDestroyMenuDescriptor");
    }
    public static int OleDestroyMenuDescriptor ( Addressable holemenu) {
        var mh$ = OleDestroyMenuDescriptor$MH();
        try {
            return (int)mh$.invokeExact(holemenu);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleTranslateAccelerator$MH() {
        return RuntimeHelper.requireNonNull(constants$1252.OleTranslateAccelerator$MH,"OleTranslateAccelerator");
    }
    public static int OleTranslateAccelerator ( Addressable lpFrame,  Addressable lpFrameInfo,  Addressable lpmsg) {
        var mh$ = OleTranslateAccelerator$MH();
        try {
            return (int)mh$.invokeExact(lpFrame, lpFrameInfo, lpmsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleDuplicateData$MH() {
        return RuntimeHelper.requireNonNull(constants$1252.OleDuplicateData$MH,"OleDuplicateData");
    }
    public static MemoryAddress OleDuplicateData ( Addressable hSrc,  short cfFormat,  int uiFlags) {
        var mh$ = OleDuplicateData$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hSrc, cfFormat, uiFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleDraw$MH() {
        return RuntimeHelper.requireNonNull(constants$1252.OleDraw$MH,"OleDraw");
    }
    public static int OleDraw ( Addressable pUnknown,  int dwAspect,  Addressable hdcDraw,  Addressable lprcBounds) {
        var mh$ = OleDraw$MH();
        try {
            return (int)mh$.invokeExact(pUnknown, dwAspect, hdcDraw, lprcBounds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleRun$MH() {
        return RuntimeHelper.requireNonNull(constants$1252.OleRun$MH,"OleRun");
    }
    public static int OleRun ( Addressable pUnknown) {
        var mh$ = OleRun$MH();
        try {
            return (int)mh$.invokeExact(pUnknown);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleIsRunning$MH() {
        return RuntimeHelper.requireNonNull(constants$1252.OleIsRunning$MH,"OleIsRunning");
    }
    public static int OleIsRunning ( Addressable pObject) {
        var mh$ = OleIsRunning$MH();
        try {
            return (int)mh$.invokeExact(pObject);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleLockRunning$MH() {
        return RuntimeHelper.requireNonNull(constants$1252.OleLockRunning$MH,"OleLockRunning");
    }
    public static int OleLockRunning ( Addressable pUnknown,  int fLock,  int fLastUnlockCloses) {
        var mh$ = OleLockRunning$MH();
        try {
            return (int)mh$.invokeExact(pUnknown, fLock, fLastUnlockCloses);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReleaseStgMedium$MH() {
        return RuntimeHelper.requireNonNull(constants$1253.ReleaseStgMedium$MH,"ReleaseStgMedium");
    }
    public static void ReleaseStgMedium ( Addressable x0) {
        var mh$ = ReleaseStgMedium$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateOleAdviseHolder$MH() {
        return RuntimeHelper.requireNonNull(constants$1253.CreateOleAdviseHolder$MH,"CreateOleAdviseHolder");
    }
    public static int CreateOleAdviseHolder ( Addressable ppOAHolder) {
        var mh$ = CreateOleAdviseHolder$MH();
        try {
            return (int)mh$.invokeExact(ppOAHolder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateDefaultHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$1253.OleCreateDefaultHandler$MH,"OleCreateDefaultHandler");
    }
    public static int OleCreateDefaultHandler ( Addressable clsid,  Addressable pUnkOuter,  Addressable riid,  Addressable lplpObj) {
        var mh$ = OleCreateDefaultHandler$MH();
        try {
            return (int)mh$.invokeExact(clsid, pUnkOuter, riid, lplpObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateEmbeddingHelper$MH() {
        return RuntimeHelper.requireNonNull(constants$1253.OleCreateEmbeddingHelper$MH,"OleCreateEmbeddingHelper");
    }
    public static int OleCreateEmbeddingHelper ( Addressable clsid,  Addressable pUnkOuter,  int flags,  Addressable pCF,  Addressable riid,  Addressable lplpObj) {
        var mh$ = OleCreateEmbeddingHelper$MH();
        try {
            return (int)mh$.invokeExact(clsid, pUnkOuter, flags, pCF, riid, lplpObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsAccelerator$MH() {
        return RuntimeHelper.requireNonNull(constants$1253.IsAccelerator$MH,"IsAccelerator");
    }
    public static int IsAccelerator ( Addressable hAccel,  int cAccelEntries,  Addressable lpMsg,  Addressable lpwCmd) {
        var mh$ = IsAccelerator$MH();
        try {
            return (int)mh$.invokeExact(hAccel, cAccelEntries, lpMsg, lpwCmd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleGetIconOfFile$MH() {
        return RuntimeHelper.requireNonNull(constants$1253.OleGetIconOfFile$MH,"OleGetIconOfFile");
    }
    public static MemoryAddress OleGetIconOfFile ( Addressable lpszPath,  int fUseFileAsLabel) {
        var mh$ = OleGetIconOfFile$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszPath, fUseFileAsLabel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleGetIconOfClass$MH() {
        return RuntimeHelper.requireNonNull(constants$1254.OleGetIconOfClass$MH,"OleGetIconOfClass");
    }
    public static MemoryAddress OleGetIconOfClass ( Addressable rclsid,  Addressable lpszLabel,  int fUseTypeAsLabel) {
        var mh$ = OleGetIconOfClass$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(rclsid, lpszLabel, fUseTypeAsLabel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleMetafilePictFromIconAndLabel$MH() {
        return RuntimeHelper.requireNonNull(constants$1254.OleMetafilePictFromIconAndLabel$MH,"OleMetafilePictFromIconAndLabel");
    }
    public static MemoryAddress OleMetafilePictFromIconAndLabel ( Addressable hIcon,  Addressable lpszLabel,  Addressable lpszSourceFile,  int iIconIndex) {
        var mh$ = OleMetafilePictFromIconAndLabel$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hIcon, lpszLabel, lpszSourceFile, iIconIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleRegGetUserType$MH() {
        return RuntimeHelper.requireNonNull(constants$1254.OleRegGetUserType$MH,"OleRegGetUserType");
    }
    public static int OleRegGetUserType ( Addressable clsid,  int dwFormOfType,  Addressable pszUserType) {
        var mh$ = OleRegGetUserType$MH();
        try {
            return (int)mh$.invokeExact(clsid, dwFormOfType, pszUserType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleRegGetMiscStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$1254.OleRegGetMiscStatus$MH,"OleRegGetMiscStatus");
    }
    public static int OleRegGetMiscStatus ( Addressable clsid,  int dwAspect,  Addressable pdwStatus) {
        var mh$ = OleRegGetMiscStatus$MH();
        try {
            return (int)mh$.invokeExact(clsid, dwAspect, pdwStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleRegEnumFormatEtc$MH() {
        return RuntimeHelper.requireNonNull(constants$1254.OleRegEnumFormatEtc$MH,"OleRegEnumFormatEtc");
    }
    public static int OleRegEnumFormatEtc ( Addressable clsid,  int dwDirection,  Addressable ppenum) {
        var mh$ = OleRegEnumFormatEtc$MH();
        try {
            return (int)mh$.invokeExact(clsid, dwDirection, ppenum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleRegEnumVerbs$MH() {
        return RuntimeHelper.requireNonNull(constants$1254.OleRegEnumVerbs$MH,"OleRegEnumVerbs");
    }
    public static int OleRegEnumVerbs ( Addressable clsid,  Addressable ppenum) {
        var mh$ = OleRegEnumVerbs$MH();
        try {
            return (int)mh$.invokeExact(clsid, ppenum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPOLESTREAM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOLESTREAMVTBL = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle OleConvertOLESTREAMToIStorage$MH() {
        return RuntimeHelper.requireNonNull(constants$1255.OleConvertOLESTREAMToIStorage$MH,"OleConvertOLESTREAMToIStorage");
    }
    public static int OleConvertOLESTREAMToIStorage ( Addressable lpolestream,  Addressable pstg,  Addressable ptd) {
        var mh$ = OleConvertOLESTREAMToIStorage$MH();
        try {
            return (int)mh$.invokeExact(lpolestream, pstg, ptd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleConvertIStorageToOLESTREAM$MH() {
        return RuntimeHelper.requireNonNull(constants$1255.OleConvertIStorageToOLESTREAM$MH,"OleConvertIStorageToOLESTREAM");
    }
    public static int OleConvertIStorageToOLESTREAM ( Addressable pstg,  Addressable lpolestream) {
        var mh$ = OleConvertIStorageToOLESTREAM$MH();
        try {
            return (int)mh$.invokeExact(pstg, lpolestream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleDoAutoConvert$MH() {
        return RuntimeHelper.requireNonNull(constants$1255.OleDoAutoConvert$MH,"OleDoAutoConvert");
    }
    public static int OleDoAutoConvert ( Addressable pStg,  Addressable pClsidNew) {
        var mh$ = OleDoAutoConvert$MH();
        try {
            return (int)mh$.invokeExact(pStg, pClsidNew);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleGetAutoConvert$MH() {
        return RuntimeHelper.requireNonNull(constants$1255.OleGetAutoConvert$MH,"OleGetAutoConvert");
    }
    public static int OleGetAutoConvert ( Addressable clsidOld,  Addressable pClsidNew) {
        var mh$ = OleGetAutoConvert$MH();
        try {
            return (int)mh$.invokeExact(clsidOld, pClsidNew);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleSetAutoConvert$MH() {
        return RuntimeHelper.requireNonNull(constants$1255.OleSetAutoConvert$MH,"OleSetAutoConvert");
    }
    public static int OleSetAutoConvert ( Addressable clsidOld,  Addressable clsidNew) {
        var mh$ = OleSetAutoConvert$MH();
        try {
            return (int)mh$.invokeExact(clsidOld, clsidNew);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConvertStg$MH() {
        return RuntimeHelper.requireNonNull(constants$1255.SetConvertStg$MH,"SetConvertStg");
    }
    public static int SetConvertStg ( Addressable pStg,  int fConvert) {
        var mh$ = SetConvertStg$MH();
        try {
            return (int)mh$.invokeExact(pStg, fConvert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleConvertIStorageToOLESTREAMEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1256.OleConvertIStorageToOLESTREAMEx$MH,"OleConvertIStorageToOLESTREAMEx");
    }
    public static int OleConvertIStorageToOLESTREAMEx ( Addressable pstg,  short cfFormat,  int lWidth,  int lHeight,  int dwSize,  Addressable pmedium,  Addressable polestm) {
        var mh$ = OleConvertIStorageToOLESTREAMEx$MH();
        try {
            return (int)mh$.invokeExact(pstg, cfFormat, lWidth, lHeight, dwSize, pmedium, polestm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleConvertOLESTREAMToIStorageEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1256.OleConvertOLESTREAMToIStorageEx$MH,"OleConvertOLESTREAMToIStorageEx");
    }
    public static int OleConvertOLESTREAMToIStorageEx ( Addressable polestm,  Addressable pstg,  Addressable pcfFormat,  Addressable plwWidth,  Addressable plHeight,  Addressable pdwSize,  Addressable pmedium) {
        var mh$ = OleConvertOLESTREAMToIStorageEx$MH();
        try {
            return (int)mh$.invokeExact(polestm, pstg, pcfFormat, plwWidth, plHeight, pdwSize, pmedium);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment IID_IPrintDialogCallback$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1256.IID_IPrintDialogCallback$SEGMENT,"IID_IPrintDialogCallback");
    }
    public static MemorySegment IID_IPrintDialogServices$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1256.IID_IPrintDialogServices$SEGMENT,"IID_IPrintDialogServices");
    }
    public static OfAddress LPOPENFILENAME_NT4A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOPENFILENAME_NT4W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOPENFILENAME_NT4 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOPENFILENAMEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOPENFILENAMEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOPENFILENAME = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetOpenFileNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$1257.GetOpenFileNameA$MH,"GetOpenFileNameA");
    }
    public static int GetOpenFileNameA ( Addressable x0) {
        var mh$ = GetOpenFileNameA$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetOpenFileNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$1257.GetOpenFileNameW$MH,"GetOpenFileNameW");
    }
    public static int GetOpenFileNameW ( Addressable x0) {
        var mh$ = GetOpenFileNameW$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSaveFileNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$1257.GetSaveFileNameA$MH,"GetSaveFileNameA");
    }
    public static int GetSaveFileNameA ( Addressable x0) {
        var mh$ = GetSaveFileNameA$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSaveFileNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$1257.GetSaveFileNameW$MH,"GetSaveFileNameW");
    }
    public static int GetSaveFileNameW ( Addressable x0) {
        var mh$ = GetSaveFileNameW$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileTitleA$MH() {
        return RuntimeHelper.requireNonNull(constants$1257.GetFileTitleA$MH,"GetFileTitleA");
    }
    public static short GetFileTitleA ( Addressable x0,  Addressable Buf,  short cchSize) {
        var mh$ = GetFileTitleA$MH();
        try {
            return (short)mh$.invokeExact(x0, Buf, cchSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileTitleW$MH() {
        return RuntimeHelper.requireNonNull(constants$1257.GetFileTitleW$MH,"GetFileTitleW");
    }
    public static short GetFileTitleW ( Addressable x0,  Addressable Buf,  short cchSize) {
        var mh$ = GetFileTitleW$MH();
        try {
            return (short)mh$.invokeExact(x0, Buf, cchSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPOFNOTIFYA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOFNOTIFYW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOFNOTIFY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOFNOTIFYEXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOFNOTIFYEXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOFNOTIFYEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCHOOSECOLORA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCHOOSECOLORW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCHOOSECOLOR = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle ChooseColorA$MH() {
        return RuntimeHelper.requireNonNull(constants$1258.ChooseColorA$MH,"ChooseColorA");
    }
    public static int ChooseColorA ( Addressable x0) {
        var mh$ = ChooseColorA$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChooseColorW$MH() {
        return RuntimeHelper.requireNonNull(constants$1258.ChooseColorW$MH,"ChooseColorW");
    }
    public static int ChooseColorW ( Addressable x0) {
        var mh$ = ChooseColorW$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPFINDREPLACEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPFINDREPLACEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPFINDREPLACE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle FindTextA$MH() {
        return RuntimeHelper.requireNonNull(constants$1259.FindTextA$MH,"FindTextA");
    }
    public static MemoryAddress FindTextA ( Addressable x0) {
        var mh$ = FindTextA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindTextW$MH() {
        return RuntimeHelper.requireNonNull(constants$1259.FindTextW$MH,"FindTextW");
    }
    public static MemoryAddress FindTextW ( Addressable x0) {
        var mh$ = FindTextW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReplaceTextA$MH() {
        return RuntimeHelper.requireNonNull(constants$1259.ReplaceTextA$MH,"ReplaceTextA");
    }
    public static MemoryAddress ReplaceTextA ( Addressable x0) {
        var mh$ = ReplaceTextA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReplaceTextW$MH() {
        return RuntimeHelper.requireNonNull(constants$1259.ReplaceTextW$MH,"ReplaceTextW");
    }
    public static MemoryAddress ReplaceTextW ( Addressable x0) {
        var mh$ = ReplaceTextW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPCHOOSEFONTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCHOOSEFONTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCHOOSEFONT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCHOOSEFONTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCHOOSEFONTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCHOOSEFONT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle ChooseFontA$MH() {
        return RuntimeHelper.requireNonNull(constants$1260.ChooseFontA$MH,"ChooseFontA");
    }
    public static int ChooseFontA ( Addressable x0) {
        var mh$ = ChooseFontA$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChooseFontW$MH() {
        return RuntimeHelper.requireNonNull(constants$1260.ChooseFontW$MH,"ChooseFontW");
    }
    public static int ChooseFontW ( Addressable x0) {
        var mh$ = ChooseFontW$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPPRINTDLGA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTDLGW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTDLG = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle PrintDlgA$MH() {
        return RuntimeHelper.requireNonNull(constants$1261.PrintDlgA$MH,"PrintDlgA");
    }
    public static int PrintDlgA ( Addressable pPD) {
        var mh$ = PrintDlgA$MH();
        try {
            return (int)mh$.invokeExact(pPD);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PrintDlgW$MH() {
        return RuntimeHelper.requireNonNull(constants$1261.PrintDlgW$MH,"PrintDlgW");
    }
    public static int PrintDlgW ( Addressable pPD) {
        var mh$ = PrintDlgW$MH();
        try {
            return (int)mh$.invokeExact(pPD);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPPRINTPAGERANGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCPRINTPAGERANGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTDLGEXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTDLGEXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPRINTDLGEX = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle PrintDlgExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1261.PrintDlgExA$MH,"PrintDlgExA");
    }
    public static int PrintDlgExA ( Addressable pPD) {
        var mh$ = PrintDlgExA$MH();
        try {
            return (int)mh$.invokeExact(pPD);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PrintDlgExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1261.PrintDlgExW$MH,"PrintDlgExW");
    }
    public static int PrintDlgExW ( Addressable pPD) {
        var mh$ = PrintDlgExW$MH();
        try {
            return (int)mh$.invokeExact(pPD);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPDEVNAMES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCDEVNAMES = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CommDlgExtendedError$MH() {
        return RuntimeHelper.requireNonNull(constants$1261.CommDlgExtendedError$MH,"CommDlgExtendedError");
    }
    public static int CommDlgExtendedError () {
        var mh$ = CommDlgExtendedError$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPPAGESETUPDLGA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPAGESETUPDLGW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPAGESETUPDLG = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle PageSetupDlgA$MH() {
        return RuntimeHelper.requireNonNull(constants$1262.PageSetupDlgA$MH,"PageSetupDlgA");
    }
    public static int PageSetupDlgA ( Addressable x0) {
        var mh$ = PageSetupDlgA$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PageSetupDlgW$MH() {
        return RuntimeHelper.requireNonNull(constants$1262.PageSetupDlgW$MH,"PageSetupDlgW");
    }
    public static int PageSetupDlgW ( Addressable x0) {
        var mh$ = PageSetupDlgW$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle uaw_CharUpperW$MH() {
        return RuntimeHelper.requireNonNull(constants$1262.uaw_CharUpperW$MH,"uaw_CharUpperW");
    }
    public static MemoryAddress uaw_CharUpperW ( Addressable String_) {
        var mh$ = uaw_CharUpperW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(String_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle uaw_lstrcmpW$MH() {
        return RuntimeHelper.requireNonNull(constants$1263.uaw_lstrcmpW$MH,"uaw_lstrcmpW");
    }
    public static int uaw_lstrcmpW ( Addressable String1,  Addressable String2) {
        var mh$ = uaw_lstrcmpW$MH();
        try {
            return (int)mh$.invokeExact(String1, String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle uaw_lstrcmpiW$MH() {
        return RuntimeHelper.requireNonNull(constants$1263.uaw_lstrcmpiW$MH,"uaw_lstrcmpiW");
    }
    public static int uaw_lstrcmpiW ( Addressable String1,  Addressable String2) {
        var mh$ = uaw_lstrcmpiW$MH();
        try {
            return (int)mh$.invokeExact(String1, String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle uaw_lstrlenW$MH() {
        return RuntimeHelper.requireNonNull(constants$1263.uaw_lstrlenW$MH,"uaw_lstrlenW");
    }
    public static int uaw_lstrlenW ( Addressable String_) {
        var mh$ = uaw_lstrlenW$MH();
        try {
            return (int)mh$.invokeExact(String_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle uaw_wcschr$MH() {
        return RuntimeHelper.requireNonNull(constants$1263.uaw_wcschr$MH,"uaw_wcschr");
    }
    public static MemoryAddress uaw_wcschr ( Addressable String_,  short Character) {
        var mh$ = uaw_wcschr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(String_, Character);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle uaw_wcscpy$MH() {
        return RuntimeHelper.requireNonNull(constants$1263.uaw_wcscpy$MH,"uaw_wcscpy");
    }
    public static MemoryAddress uaw_wcscpy ( Addressable Destination,  Addressable Source) {
        var mh$ = uaw_wcscpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Destination, Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle uaw_wcsicmp$MH() {
        return RuntimeHelper.requireNonNull(constants$1263.uaw_wcsicmp$MH,"uaw_wcsicmp");
    }
    public static int uaw_wcsicmp ( Addressable String1,  Addressable String2) {
        var mh$ = uaw_wcsicmp$MH();
        try {
            return (int)mh$.invokeExact(String1, String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle uaw_wcslen$MH() {
        return RuntimeHelper.requireNonNull(constants$1264.uaw_wcslen$MH,"uaw_wcslen");
    }
    public static long uaw_wcslen ( Addressable String_) {
        var mh$ = uaw_wcslen$MH();
        try {
            return (long)mh$.invokeExact(String_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle uaw_wcsrchr$MH() {
        return RuntimeHelper.requireNonNull(constants$1264.uaw_wcsrchr$MH,"uaw_wcsrchr");
    }
    public static MemoryAddress uaw_wcsrchr ( Addressable String_,  short Character) {
        var mh$ = uaw_wcsrchr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(String_, Character);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ua_CharUpperW$MH() {
        return RuntimeHelper.requireNonNull(constants$1264.ua_CharUpperW$MH,"ua_CharUpperW");
    }
    public static MemoryAddress ua_CharUpperW ( Addressable String_) {
        var mh$ = ua_CharUpperW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(String_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ua_lstrcmpW$MH() {
        return RuntimeHelper.requireNonNull(constants$1264.ua_lstrcmpW$MH,"ua_lstrcmpW");
    }
    public static int ua_lstrcmpW ( Addressable String1,  Addressable String2) {
        var mh$ = ua_lstrcmpW$MH();
        try {
            return (int)mh$.invokeExact(String1, String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ua_lstrcmpiW$MH() {
        return RuntimeHelper.requireNonNull(constants$1264.ua_lstrcmpiW$MH,"ua_lstrcmpiW");
    }
    public static int ua_lstrcmpiW ( Addressable String1,  Addressable String2) {
        var mh$ = ua_lstrcmpiW$MH();
        try {
            return (int)mh$.invokeExact(String1, String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ua_lstrlenW$MH() {
        return RuntimeHelper.requireNonNull(constants$1264.ua_lstrlenW$MH,"ua_lstrlenW");
    }
    public static int ua_lstrlenW ( Addressable String_) {
        var mh$ = ua_lstrlenW$MH();
        try {
            return (int)mh$.invokeExact(String_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PUWSTR_C = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle ua_wcschr$MH() {
        return RuntimeHelper.requireNonNull(constants$1265.ua_wcschr$MH,"ua_wcschr");
    }
    public static MemoryAddress ua_wcschr ( Addressable String_,  short Character) {
        var mh$ = ua_wcschr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(String_, Character);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ua_wcsrchr$MH() {
        return RuntimeHelper.requireNonNull(constants$1265.ua_wcsrchr$MH,"ua_wcsrchr");
    }
    public static MemoryAddress ua_wcsrchr ( Addressable String_,  short Character) {
        var mh$ = ua_wcsrchr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(String_, Character);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ua_wcscpy$MH() {
        return RuntimeHelper.requireNonNull(constants$1265.ua_wcscpy$MH,"ua_wcscpy");
    }
    public static MemoryAddress ua_wcscpy ( Addressable Destination,  Addressable Source) {
        var mh$ = ua_wcscpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Destination, Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ua_wcscpy_s$MH() {
        return RuntimeHelper.requireNonNull(constants$1265.ua_wcscpy_s$MH,"ua_wcscpy_s");
    }
    public static MemoryAddress ua_wcscpy_s ( Addressable Destination,  long DestinationSize,  Addressable Source) {
        var mh$ = ua_wcscpy_s$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Destination, DestinationSize, Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ua_wcslen$MH() {
        return RuntimeHelper.requireNonNull(constants$1265.ua_wcslen$MH,"ua_wcslen");
    }
    public static long ua_wcslen ( Addressable String_) {
        var mh$ = ua_wcslen$MH();
        try {
            return (long)mh$.invokeExact(String_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ua_wcsicmp$MH() {
        return RuntimeHelper.requireNonNull(constants$1265.ua_wcsicmp$MH,"ua_wcsicmp");
    }
    public static int ua_wcsicmp ( Addressable String1,  Addressable String2) {
        var mh$ = ua_wcsicmp$MH();
        try {
            return (int)mh$.invokeExact(String1, String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1266.NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID$SEGMENT,"NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID");
    }
    public static MemorySegment NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1266.NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID$SEGMENT,"NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID");
    }
    public static MemorySegment DOMAIN_JOIN_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1266.DOMAIN_JOIN_GUID$SEGMENT,"DOMAIN_JOIN_GUID");
    }
    public static MemorySegment DOMAIN_LEAVE_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1266.DOMAIN_LEAVE_GUID$SEGMENT,"DOMAIN_LEAVE_GUID");
    }
    public static MemorySegment FIREWALL_PORT_OPEN_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1266.FIREWALL_PORT_OPEN_GUID$SEGMENT,"FIREWALL_PORT_OPEN_GUID");
    }
    public static MemorySegment FIREWALL_PORT_CLOSE_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1266.FIREWALL_PORT_CLOSE_GUID$SEGMENT,"FIREWALL_PORT_CLOSE_GUID");
    }
    public static MemorySegment MACHINE_POLICY_PRESENT_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1267.MACHINE_POLICY_PRESENT_GUID$SEGMENT,"MACHINE_POLICY_PRESENT_GUID");
    }
    public static MemorySegment USER_POLICY_PRESENT_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1267.USER_POLICY_PRESENT_GUID$SEGMENT,"USER_POLICY_PRESENT_GUID");
    }
    public static MemorySegment RPC_INTERFACE_EVENT_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1267.RPC_INTERFACE_EVENT_GUID$SEGMENT,"RPC_INTERFACE_EVENT_GUID");
    }
    public static MemorySegment NAMED_PIPE_EVENT_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1267.NAMED_PIPE_EVENT_GUID$SEGMENT,"NAMED_PIPE_EVENT_GUID");
    }
    public static MemorySegment CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1267.CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID$SEGMENT,"CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID");
    }
    public static OfAddress LPSERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_DESCRIPTIONA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_DESCRIPTIONW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_DESCRIPTION = Constants$root.C_POINTER$LAYOUT;
    public static int SC_ACTION_NONE() {
        return (int)0L;
    }
    public static int SC_ACTION_RESTART() {
        return (int)1L;
    }
    public static int SC_ACTION_REBOOT() {
        return (int)2L;
    }
    public static int SC_ACTION_RUN_COMMAND() {
        return (int)3L;
    }
    public static int SC_ACTION_OWN_RESTART() {
        return (int)4L;
    }
    public static OfAddress LPSC_ACTION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_FAILURE_ACTIONSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_FAILURE_ACTIONSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_FAILURE_ACTIONS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_DELAYED_AUTO_START_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_FAILURE_ACTIONS_FLAG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_SID_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_REQUIRED_PRIVILEGES_INFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_REQUIRED_PRIVILEGES_INFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_REQUIRED_PRIVILEGES_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_PRESHUTDOWN_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_TRIGGER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_TRIGGER_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_PREFERRED_NODE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_TIMECHANGE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_LAUNCH_PROTECTED_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress SC_HANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSC_HANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress SERVICE_STATUS_HANDLE = Constants$root.C_POINTER$LAYOUT;
    public static int SC_STATUS_PROCESS_INFO() {
        return (int)0L;
    }
    public static int SC_ENUM_PROCESS_INFO() {
        return (int)0L;
    }
    public static OfAddress LPSERVICE_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_STATUS_PROCESS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUM_SERVICE_STATUSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUM_SERVICE_STATUSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUM_SERVICE_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUM_SERVICE_STATUS_PROCESSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUM_SERVICE_STATUS_PROCESSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUM_SERVICE_STATUS_PROCESS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress SC_LOCK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPQUERY_SERVICE_LOCK_STATUSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPQUERY_SERVICE_LOCK_STATUSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPQUERY_SERVICE_LOCK_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPQUERY_SERVICE_CONFIGA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPQUERY_SERVICE_CONFIGW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPQUERY_SERVICE_CONFIG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_TABLE_ENTRYA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_TABLE_ENTRYW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_TABLE_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_NOTIFY_1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_NOTIFY_2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_NOTIFY_2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_NOTIFY_2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_NOTIFYA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_NOTIFYW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_NOTIFY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_CONTROL_STATUS_REASON_PARAMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_CONTROL_STATUS_REASON_PARAMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_CONTROL_STATUS_REASON_PARAMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_START_REASON = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle ChangeServiceConfigA$MH() {
        return RuntimeHelper.requireNonNull(constants$1270.ChangeServiceConfigA$MH,"ChangeServiceConfigA");
    }
    public static int ChangeServiceConfigA ( Addressable hService,  int dwServiceType,  int dwStartType,  int dwErrorControl,  Addressable lpBinaryPathName,  Addressable lpLoadOrderGroup,  Addressable lpdwTagId,  Addressable lpDependencies,  Addressable lpServiceStartName,  Addressable lpPassword,  Addressable lpDisplayName) {
        var mh$ = ChangeServiceConfigA$MH();
        try {
            return (int)mh$.invokeExact(hService, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword, lpDisplayName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChangeServiceConfigW$MH() {
        return RuntimeHelper.requireNonNull(constants$1271.ChangeServiceConfigW$MH,"ChangeServiceConfigW");
    }
    public static int ChangeServiceConfigW ( Addressable hService,  int dwServiceType,  int dwStartType,  int dwErrorControl,  Addressable lpBinaryPathName,  Addressable lpLoadOrderGroup,  Addressable lpdwTagId,  Addressable lpDependencies,  Addressable lpServiceStartName,  Addressable lpPassword,  Addressable lpDisplayName) {
        var mh$ = ChangeServiceConfigW$MH();
        try {
            return (int)mh$.invokeExact(hService, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword, lpDisplayName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChangeServiceConfig2A$MH() {
        return RuntimeHelper.requireNonNull(constants$1271.ChangeServiceConfig2A$MH,"ChangeServiceConfig2A");
    }
    public static int ChangeServiceConfig2A ( Addressable hService,  int dwInfoLevel,  Addressable lpInfo) {
        var mh$ = ChangeServiceConfig2A$MH();
        try {
            return (int)mh$.invokeExact(hService, dwInfoLevel, lpInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChangeServiceConfig2W$MH() {
        return RuntimeHelper.requireNonNull(constants$1271.ChangeServiceConfig2W$MH,"ChangeServiceConfig2W");
    }
    public static int ChangeServiceConfig2W ( Addressable hService,  int dwInfoLevel,  Addressable lpInfo) {
        var mh$ = ChangeServiceConfig2W$MH();
        try {
            return (int)mh$.invokeExact(hService, dwInfoLevel, lpInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseServiceHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$1271.CloseServiceHandle$MH,"CloseServiceHandle");
    }
    public static int CloseServiceHandle ( Addressable hSCObject) {
        var mh$ = CloseServiceHandle$MH();
        try {
            return (int)mh$.invokeExact(hSCObject);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ControlService$MH() {
        return RuntimeHelper.requireNonNull(constants$1271.ControlService$MH,"ControlService");
    }
    public static int ControlService ( Addressable hService,  int dwControl,  Addressable lpServiceStatus) {
        var mh$ = ControlService$MH();
        try {
            return (int)mh$.invokeExact(hService, dwControl, lpServiceStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateServiceA$MH() {
        return RuntimeHelper.requireNonNull(constants$1271.CreateServiceA$MH,"CreateServiceA");
    }
    public static MemoryAddress CreateServiceA ( Addressable hSCManager,  Addressable lpServiceName,  Addressable lpDisplayName,  int dwDesiredAccess,  int dwServiceType,  int dwStartType,  int dwErrorControl,  Addressable lpBinaryPathName,  Addressable lpLoadOrderGroup,  Addressable lpdwTagId,  Addressable lpDependencies,  Addressable lpServiceStartName,  Addressable lpPassword) {
        var mh$ = CreateServiceA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hSCManager, lpServiceName, lpDisplayName, dwDesiredAccess, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateServiceW$MH() {
        return RuntimeHelper.requireNonNull(constants$1272.CreateServiceW$MH,"CreateServiceW");
    }
    public static MemoryAddress CreateServiceW ( Addressable hSCManager,  Addressable lpServiceName,  Addressable lpDisplayName,  int dwDesiredAccess,  int dwServiceType,  int dwStartType,  int dwErrorControl,  Addressable lpBinaryPathName,  Addressable lpLoadOrderGroup,  Addressable lpdwTagId,  Addressable lpDependencies,  Addressable lpServiceStartName,  Addressable lpPassword) {
        var mh$ = CreateServiceW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hSCManager, lpServiceName, lpDisplayName, dwDesiredAccess, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteService$MH() {
        return RuntimeHelper.requireNonNull(constants$1272.DeleteService$MH,"DeleteService");
    }
    public static int DeleteService ( Addressable hService) {
        var mh$ = DeleteService$MH();
        try {
            return (int)mh$.invokeExact(hService);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDependentServicesA$MH() {
        return RuntimeHelper.requireNonNull(constants$1272.EnumDependentServicesA$MH,"EnumDependentServicesA");
    }
    public static int EnumDependentServicesA ( Addressable hService,  int dwServiceState,  Addressable lpServices,  int cbBufSize,  Addressable pcbBytesNeeded,  Addressable lpServicesReturned) {
        var mh$ = EnumDependentServicesA$MH();
        try {
            return (int)mh$.invokeExact(hService, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDependentServicesW$MH() {
        return RuntimeHelper.requireNonNull(constants$1272.EnumDependentServicesW$MH,"EnumDependentServicesW");
    }
    public static int EnumDependentServicesW ( Addressable hService,  int dwServiceState,  Addressable lpServices,  int cbBufSize,  Addressable pcbBytesNeeded,  Addressable lpServicesReturned) {
        var mh$ = EnumDependentServicesW$MH();
        try {
            return (int)mh$.invokeExact(hService, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumServicesStatusA$MH() {
        return RuntimeHelper.requireNonNull(constants$1272.EnumServicesStatusA$MH,"EnumServicesStatusA");
    }
    public static int EnumServicesStatusA ( Addressable hSCManager,  int dwServiceType,  int dwServiceState,  Addressable lpServices,  int cbBufSize,  Addressable pcbBytesNeeded,  Addressable lpServicesReturned,  Addressable lpResumeHandle) {
        var mh$ = EnumServicesStatusA$MH();
        try {
            return (int)mh$.invokeExact(hSCManager, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumServicesStatusW$MH() {
        return RuntimeHelper.requireNonNull(constants$1272.EnumServicesStatusW$MH,"EnumServicesStatusW");
    }
    public static int EnumServicesStatusW ( Addressable hSCManager,  int dwServiceType,  int dwServiceState,  Addressable lpServices,  int cbBufSize,  Addressable pcbBytesNeeded,  Addressable lpServicesReturned,  Addressable lpResumeHandle) {
        var mh$ = EnumServicesStatusW$MH();
        try {
            return (int)mh$.invokeExact(hSCManager, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumServicesStatusExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1273.EnumServicesStatusExA$MH,"EnumServicesStatusExA");
    }
    public static int EnumServicesStatusExA ( Addressable hSCManager,  int InfoLevel,  int dwServiceType,  int dwServiceState,  Addressable lpServices,  int cbBufSize,  Addressable pcbBytesNeeded,  Addressable lpServicesReturned,  Addressable lpResumeHandle,  Addressable pszGroupName) {
        var mh$ = EnumServicesStatusExA$MH();
        try {
            return (int)mh$.invokeExact(hSCManager, InfoLevel, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle, pszGroupName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumServicesStatusExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1273.EnumServicesStatusExW$MH,"EnumServicesStatusExW");
    }
    public static int EnumServicesStatusExW ( Addressable hSCManager,  int InfoLevel,  int dwServiceType,  int dwServiceState,  Addressable lpServices,  int cbBufSize,  Addressable pcbBytesNeeded,  Addressable lpServicesReturned,  Addressable lpResumeHandle,  Addressable pszGroupName) {
        var mh$ = EnumServicesStatusExW$MH();
        try {
            return (int)mh$.invokeExact(hSCManager, InfoLevel, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle, pszGroupName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetServiceKeyNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$1273.GetServiceKeyNameA$MH,"GetServiceKeyNameA");
    }
    public static int GetServiceKeyNameA ( Addressable hSCManager,  Addressable lpDisplayName,  Addressable lpServiceName,  Addressable lpcchBuffer) {
        var mh$ = GetServiceKeyNameA$MH();
        try {
            return (int)mh$.invokeExact(hSCManager, lpDisplayName, lpServiceName, lpcchBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetServiceKeyNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$1273.GetServiceKeyNameW$MH,"GetServiceKeyNameW");
    }
    public static int GetServiceKeyNameW ( Addressable hSCManager,  Addressable lpDisplayName,  Addressable lpServiceName,  Addressable lpcchBuffer) {
        var mh$ = GetServiceKeyNameW$MH();
        try {
            return (int)mh$.invokeExact(hSCManager, lpDisplayName, lpServiceName, lpcchBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetServiceDisplayNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$1273.GetServiceDisplayNameA$MH,"GetServiceDisplayNameA");
    }
    public static int GetServiceDisplayNameA ( Addressable hSCManager,  Addressable lpServiceName,  Addressable lpDisplayName,  Addressable lpcchBuffer) {
        var mh$ = GetServiceDisplayNameA$MH();
        try {
            return (int)mh$.invokeExact(hSCManager, lpServiceName, lpDisplayName, lpcchBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetServiceDisplayNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$1273.GetServiceDisplayNameW$MH,"GetServiceDisplayNameW");
    }
    public static int GetServiceDisplayNameW ( Addressable hSCManager,  Addressable lpServiceName,  Addressable lpDisplayName,  Addressable lpcchBuffer) {
        var mh$ = GetServiceDisplayNameW$MH();
        try {
            return (int)mh$.invokeExact(hSCManager, lpServiceName, lpDisplayName, lpcchBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LockServiceDatabase$MH() {
        return RuntimeHelper.requireNonNull(constants$1274.LockServiceDatabase$MH,"LockServiceDatabase");
    }
    public static MemoryAddress LockServiceDatabase ( Addressable hSCManager) {
        var mh$ = LockServiceDatabase$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hSCManager);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NotifyBootConfigStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$1274.NotifyBootConfigStatus$MH,"NotifyBootConfigStatus");
    }
    public static int NotifyBootConfigStatus ( int BootAcceptable) {
        var mh$ = NotifyBootConfigStatus$MH();
        try {
            return (int)mh$.invokeExact(BootAcceptable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenSCManagerA$MH() {
        return RuntimeHelper.requireNonNull(constants$1274.OpenSCManagerA$MH,"OpenSCManagerA");
    }
    public static MemoryAddress OpenSCManagerA ( Addressable lpMachineName,  Addressable lpDatabaseName,  int dwDesiredAccess) {
        var mh$ = OpenSCManagerA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpMachineName, lpDatabaseName, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenSCManagerW$MH() {
        return RuntimeHelper.requireNonNull(constants$1274.OpenSCManagerW$MH,"OpenSCManagerW");
    }
    public static MemoryAddress OpenSCManagerW ( Addressable lpMachineName,  Addressable lpDatabaseName,  int dwDesiredAccess) {
        var mh$ = OpenSCManagerW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpMachineName, lpDatabaseName, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenServiceA$MH() {
        return RuntimeHelper.requireNonNull(constants$1274.OpenServiceA$MH,"OpenServiceA");
    }
    public static MemoryAddress OpenServiceA ( Addressable hSCManager,  Addressable lpServiceName,  int dwDesiredAccess) {
        var mh$ = OpenServiceA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hSCManager, lpServiceName, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenServiceW$MH() {
        return RuntimeHelper.requireNonNull(constants$1274.OpenServiceW$MH,"OpenServiceW");
    }
    public static MemoryAddress OpenServiceW ( Addressable hSCManager,  Addressable lpServiceName,  int dwDesiredAccess) {
        var mh$ = OpenServiceW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hSCManager, lpServiceName, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceConfigA$MH() {
        return RuntimeHelper.requireNonNull(constants$1275.QueryServiceConfigA$MH,"QueryServiceConfigA");
    }
    public static int QueryServiceConfigA ( Addressable hService,  Addressable lpServiceConfig,  int cbBufSize,  Addressable pcbBytesNeeded) {
        var mh$ = QueryServiceConfigA$MH();
        try {
            return (int)mh$.invokeExact(hService, lpServiceConfig, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceConfigW$MH() {
        return RuntimeHelper.requireNonNull(constants$1275.QueryServiceConfigW$MH,"QueryServiceConfigW");
    }
    public static int QueryServiceConfigW ( Addressable hService,  Addressable lpServiceConfig,  int cbBufSize,  Addressable pcbBytesNeeded) {
        var mh$ = QueryServiceConfigW$MH();
        try {
            return (int)mh$.invokeExact(hService, lpServiceConfig, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceConfig2A$MH() {
        return RuntimeHelper.requireNonNull(constants$1275.QueryServiceConfig2A$MH,"QueryServiceConfig2A");
    }
    public static int QueryServiceConfig2A ( Addressable hService,  int dwInfoLevel,  Addressable lpBuffer,  int cbBufSize,  Addressable pcbBytesNeeded) {
        var mh$ = QueryServiceConfig2A$MH();
        try {
            return (int)mh$.invokeExact(hService, dwInfoLevel, lpBuffer, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceConfig2W$MH() {
        return RuntimeHelper.requireNonNull(constants$1275.QueryServiceConfig2W$MH,"QueryServiceConfig2W");
    }
    public static int QueryServiceConfig2W ( Addressable hService,  int dwInfoLevel,  Addressable lpBuffer,  int cbBufSize,  Addressable pcbBytesNeeded) {
        var mh$ = QueryServiceConfig2W$MH();
        try {
            return (int)mh$.invokeExact(hService, dwInfoLevel, lpBuffer, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceLockStatusA$MH() {
        return RuntimeHelper.requireNonNull(constants$1275.QueryServiceLockStatusA$MH,"QueryServiceLockStatusA");
    }
    public static int QueryServiceLockStatusA ( Addressable hSCManager,  Addressable lpLockStatus,  int cbBufSize,  Addressable pcbBytesNeeded) {
        var mh$ = QueryServiceLockStatusA$MH();
        try {
            return (int)mh$.invokeExact(hSCManager, lpLockStatus, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceLockStatusW$MH() {
        return RuntimeHelper.requireNonNull(constants$1275.QueryServiceLockStatusW$MH,"QueryServiceLockStatusW");
    }
    public static int QueryServiceLockStatusW ( Addressable hSCManager,  Addressable lpLockStatus,  int cbBufSize,  Addressable pcbBytesNeeded) {
        var mh$ = QueryServiceLockStatusW$MH();
        try {
            return (int)mh$.invokeExact(hSCManager, lpLockStatus, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceObjectSecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$1276.QueryServiceObjectSecurity$MH,"QueryServiceObjectSecurity");
    }
    public static int QueryServiceObjectSecurity ( Addressable hService,  int dwSecurityInformation,  Addressable lpSecurityDescriptor,  int cbBufSize,  Addressable pcbBytesNeeded) {
        var mh$ = QueryServiceObjectSecurity$MH();
        try {
            return (int)mh$.invokeExact(hService, dwSecurityInformation, lpSecurityDescriptor, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$1276.QueryServiceStatus$MH,"QueryServiceStatus");
    }
    public static int QueryServiceStatus ( Addressable hService,  Addressable lpServiceStatus) {
        var mh$ = QueryServiceStatus$MH();
        try {
            return (int)mh$.invokeExact(hService, lpServiceStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceStatusEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1276.QueryServiceStatusEx$MH,"QueryServiceStatusEx");
    }
    public static int QueryServiceStatusEx ( Addressable hService,  int InfoLevel,  Addressable lpBuffer,  int cbBufSize,  Addressable pcbBytesNeeded) {
        var mh$ = QueryServiceStatusEx$MH();
        try {
            return (int)mh$.invokeExact(hService, InfoLevel, lpBuffer, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterServiceCtrlHandlerA$MH() {
        return RuntimeHelper.requireNonNull(constants$1276.RegisterServiceCtrlHandlerA$MH,"RegisterServiceCtrlHandlerA");
    }
    public static MemoryAddress RegisterServiceCtrlHandlerA ( Addressable lpServiceName,  Addressable lpHandlerProc) {
        var mh$ = RegisterServiceCtrlHandlerA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpServiceName, lpHandlerProc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterServiceCtrlHandlerW$MH() {
        return RuntimeHelper.requireNonNull(constants$1276.RegisterServiceCtrlHandlerW$MH,"RegisterServiceCtrlHandlerW");
    }
    public static MemoryAddress RegisterServiceCtrlHandlerW ( Addressable lpServiceName,  Addressable lpHandlerProc) {
        var mh$ = RegisterServiceCtrlHandlerW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpServiceName, lpHandlerProc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterServiceCtrlHandlerExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1276.RegisterServiceCtrlHandlerExA$MH,"RegisterServiceCtrlHandlerExA");
    }
    public static MemoryAddress RegisterServiceCtrlHandlerExA ( Addressable lpServiceName,  Addressable lpHandlerProc,  Addressable lpContext) {
        var mh$ = RegisterServiceCtrlHandlerExA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpServiceName, lpHandlerProc, lpContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterServiceCtrlHandlerExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1277.RegisterServiceCtrlHandlerExW$MH,"RegisterServiceCtrlHandlerExW");
    }
    public static MemoryAddress RegisterServiceCtrlHandlerExW ( Addressable lpServiceName,  Addressable lpHandlerProc,  Addressable lpContext) {
        var mh$ = RegisterServiceCtrlHandlerExW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpServiceName, lpHandlerProc, lpContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetServiceObjectSecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$1277.SetServiceObjectSecurity$MH,"SetServiceObjectSecurity");
    }
    public static int SetServiceObjectSecurity ( Addressable hService,  int dwSecurityInformation,  Addressable lpSecurityDescriptor) {
        var mh$ = SetServiceObjectSecurity$MH();
        try {
            return (int)mh$.invokeExact(hService, dwSecurityInformation, lpSecurityDescriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetServiceStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$1277.SetServiceStatus$MH,"SetServiceStatus");
    }
    public static int SetServiceStatus ( Addressable hServiceStatus,  Addressable lpServiceStatus) {
        var mh$ = SetServiceStatus$MH();
        try {
            return (int)mh$.invokeExact(hServiceStatus, lpServiceStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StartServiceCtrlDispatcherA$MH() {
        return RuntimeHelper.requireNonNull(constants$1277.StartServiceCtrlDispatcherA$MH,"StartServiceCtrlDispatcherA");
    }
    public static int StartServiceCtrlDispatcherA ( Addressable lpServiceStartTable) {
        var mh$ = StartServiceCtrlDispatcherA$MH();
        try {
            return (int)mh$.invokeExact(lpServiceStartTable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StartServiceCtrlDispatcherW$MH() {
        return RuntimeHelper.requireNonNull(constants$1277.StartServiceCtrlDispatcherW$MH,"StartServiceCtrlDispatcherW");
    }
    public static int StartServiceCtrlDispatcherW ( Addressable lpServiceStartTable) {
        var mh$ = StartServiceCtrlDispatcherW$MH();
        try {
            return (int)mh$.invokeExact(lpServiceStartTable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StartServiceA$MH() {
        return RuntimeHelper.requireNonNull(constants$1277.StartServiceA$MH,"StartServiceA");
    }
    public static int StartServiceA ( Addressable hService,  int dwNumServiceArgs,  Addressable lpServiceArgVectors) {
        var mh$ = StartServiceA$MH();
        try {
            return (int)mh$.invokeExact(hService, dwNumServiceArgs, lpServiceArgVectors);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StartServiceW$MH() {
        return RuntimeHelper.requireNonNull(constants$1278.StartServiceW$MH,"StartServiceW");
    }
    public static int StartServiceW ( Addressable hService,  int dwNumServiceArgs,  Addressable lpServiceArgVectors) {
        var mh$ = StartServiceW$MH();
        try {
            return (int)mh$.invokeExact(hService, dwNumServiceArgs, lpServiceArgVectors);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnlockServiceDatabase$MH() {
        return RuntimeHelper.requireNonNull(constants$1278.UnlockServiceDatabase$MH,"UnlockServiceDatabase");
    }
    public static int UnlockServiceDatabase ( Addressable ScLock) {
        var mh$ = UnlockServiceDatabase$MH();
        try {
            return (int)mh$.invokeExact(ScLock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NotifyServiceStatusChangeA$MH() {
        return RuntimeHelper.requireNonNull(constants$1278.NotifyServiceStatusChangeA$MH,"NotifyServiceStatusChangeA");
    }
    public static int NotifyServiceStatusChangeA ( Addressable hService,  int dwNotifyMask,  Addressable pNotifyBuffer) {
        var mh$ = NotifyServiceStatusChangeA$MH();
        try {
            return (int)mh$.invokeExact(hService, dwNotifyMask, pNotifyBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NotifyServiceStatusChangeW$MH() {
        return RuntimeHelper.requireNonNull(constants$1278.NotifyServiceStatusChangeW$MH,"NotifyServiceStatusChangeW");
    }
    public static int NotifyServiceStatusChangeW ( Addressable hService,  int dwNotifyMask,  Addressable pNotifyBuffer) {
        var mh$ = NotifyServiceStatusChangeW$MH();
        try {
            return (int)mh$.invokeExact(hService, dwNotifyMask, pNotifyBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ControlServiceExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1278.ControlServiceExA$MH,"ControlServiceExA");
    }
    public static int ControlServiceExA ( Addressable hService,  int dwControl,  int dwInfoLevel,  Addressable pControlParams) {
        var mh$ = ControlServiceExA$MH();
        try {
            return (int)mh$.invokeExact(hService, dwControl, dwInfoLevel, pControlParams);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ControlServiceExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1278.ControlServiceExW$MH,"ControlServiceExW");
    }
    public static int ControlServiceExW ( Addressable hService,  int dwControl,  int dwInfoLevel,  Addressable pControlParams) {
        var mh$ = ControlServiceExW$MH();
        try {
            return (int)mh$.invokeExact(hService, dwControl, dwInfoLevel, pControlParams);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceDynamicInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$1279.QueryServiceDynamicInformation$MH,"QueryServiceDynamicInformation");
    }
    public static int QueryServiceDynamicInformation ( Addressable hServiceStatus,  int dwInfoLevel,  Addressable ppDynamicInfo) {
        var mh$ = QueryServiceDynamicInformation$MH();
        try {
            return (int)mh$.invokeExact(hServiceStatus, dwInfoLevel, ppDynamicInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int SC_EVENT_DATABASE_CHANGE() {
        return (int)0L;
    }
    public static int SC_EVENT_PROPERTY_CHANGE() {
        return (int)1L;
    }
    public static int SC_EVENT_STATUS_CHANGE() {
        return (int)2L;
    }
    public static OfAddress PSC_EVENT_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSC_NOTIFICATION_REGISTRATION = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SubscribeServiceChangeNotifications$MH() {
        return RuntimeHelper.requireNonNull(constants$1279.SubscribeServiceChangeNotifications$MH,"SubscribeServiceChangeNotifications");
    }
    public static int SubscribeServiceChangeNotifications ( Addressable hService,  int eEventType,  Addressable pCallback,  Addressable pCallbackContext,  Addressable pSubscription) {
        var mh$ = SubscribeServiceChangeNotifications$MH();
        try {
            return (int)mh$.invokeExact(hService, eEventType, pCallback, pCallbackContext, pSubscription);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnsubscribeServiceChangeNotifications$MH() {
        return RuntimeHelper.requireNonNull(constants$1280.UnsubscribeServiceChangeNotifications$MH,"UnsubscribeServiceChangeNotifications");
    }
    public static void UnsubscribeServiceChangeNotifications ( Addressable pSubscription) {
        var mh$ = UnsubscribeServiceChangeNotifications$MH();
        try {
            mh$.invokeExact(pSubscription);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitServiceState$MH() {
        return RuntimeHelper.requireNonNull(constants$1280.WaitServiceState$MH,"WaitServiceState");
    }
    public static int WaitServiceState ( Addressable hService,  int dwNotify,  int dwTimeout,  Addressable hCancelEvent) {
        var mh$ = WaitServiceState$MH();
        try {
            return (int)mh$.invokeExact(hService, dwNotify, dwTimeout, hCancelEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int ServiceRegistryStateParameters() {
        return (int)0L;
    }
    public static int ServiceRegistryStatePersistent() {
        return (int)1L;
    }
    public static int MaxServiceRegistryStateType() {
        return (int)2L;
    }
    public static MethodHandle GetServiceRegistryStateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$1280.GetServiceRegistryStateKey$MH,"GetServiceRegistryStateKey");
    }
    public static int GetServiceRegistryStateKey ( Addressable ServiceStatusHandle,  int StateType,  int AccessMask,  Addressable ServiceStateKey) {
        var mh$ = GetServiceRegistryStateKey$MH();
        try {
            return (int)mh$.invokeExact(ServiceStatusHandle, StateType, AccessMask, ServiceStateKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int ServiceDirectoryPersistentState() {
        return (int)0L;
    }
    public static int ServiceDirectoryTypeMax() {
        return (int)1L;
    }
    public static MethodHandle GetServiceDirectory$MH() {
        return RuntimeHelper.requireNonNull(constants$1280.GetServiceDirectory$MH,"GetServiceDirectory");
    }
    public static int GetServiceDirectory ( Addressable hServiceStatus,  int eDirectoryType,  Addressable lpPathBuffer,  int cchPathBufferLength,  Addressable lpcchRequiredBufferLength) {
        var mh$ = GetServiceDirectory$MH();
        try {
            return (int)mh$.invokeExact(hServiceStatus, eDirectoryType, lpPathBuffer, cchPathBufferLength, lpcchRequiredBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PMODEMDEVCAPS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMODEMDEVCAPS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMODEMSETTINGS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMODEMSETTINGS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HIMC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HIMCC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPHKL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPUINT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCOMPOSITIONFORM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPCOMPOSITIONFORM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCOMPOSITIONFORM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCANDIDATEFORM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPCANDIDATEFORM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCANDIDATEFORM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCANDIDATELIST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPCANDIDATELIST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCANDIDATELIST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREGISTERWORDA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPREGISTERWORDA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPREGISTERWORDA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREGISTERWORDW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPREGISTERWORDW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPREGISTERWORDW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREGISTERWORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPREGISTERWORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPREGISTERWORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRECONVERTSTRING = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPRECONVERTSTRING = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPRECONVERTSTRING = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTYLEBUFA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPSTYLEBUFA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSTYLEBUFA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTYLEBUFW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPSTYLEBUFW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSTYLEBUFW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTYLEBUF = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPSTYLEBUF = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSTYLEBUF = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMEMENUITEMINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPIMEMENUITEMINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPIMEMENUITEMINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMEMENUITEMINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPIMEMENUITEMINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPIMEMENUITEMINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMEMENUITEMINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPIMEMENUITEMINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPIMEMENUITEMINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMECHARPOSITION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPIMECHARPOSITION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPIMECHARPOSITION = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle ImmInstallIMEA$MH() {
        return RuntimeHelper.requireNonNull(constants$1281.ImmInstallIMEA$MH,"ImmInstallIMEA");
    }
    public static MemoryAddress ImmInstallIMEA ( Addressable lpszIMEFileName,  Addressable lpszLayoutText) {
        var mh$ = ImmInstallIMEA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszIMEFileName, lpszLayoutText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmInstallIMEW$MH() {
        return RuntimeHelper.requireNonNull(constants$1281.ImmInstallIMEW$MH,"ImmInstallIMEW");
    }
    public static MemoryAddress ImmInstallIMEW ( Addressable lpszIMEFileName,  Addressable lpszLayoutText) {
        var mh$ = ImmInstallIMEW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszIMEFileName, lpszLayoutText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetDefaultIMEWnd$MH() {
        return RuntimeHelper.requireNonNull(constants$1281.ImmGetDefaultIMEWnd$MH,"ImmGetDefaultIMEWnd");
    }
    public static MemoryAddress ImmGetDefaultIMEWnd ( Addressable x0) {
        var mh$ = ImmGetDefaultIMEWnd$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetDescriptionA$MH() {
        return RuntimeHelper.requireNonNull(constants$1281.ImmGetDescriptionA$MH,"ImmGetDescriptionA");
    }
    public static int ImmGetDescriptionA ( Addressable x0,  Addressable lpszDescription,  int uBufLen) {
        var mh$ = ImmGetDescriptionA$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszDescription, uBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetDescriptionW$MH() {
        return RuntimeHelper.requireNonNull(constants$1281.ImmGetDescriptionW$MH,"ImmGetDescriptionW");
    }
    public static int ImmGetDescriptionW ( Addressable x0,  Addressable lpszDescription,  int uBufLen) {
        var mh$ = ImmGetDescriptionW$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszDescription, uBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetIMEFileNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$1281.ImmGetIMEFileNameA$MH,"ImmGetIMEFileNameA");
    }
    public static int ImmGetIMEFileNameA ( Addressable x0,  Addressable lpszFileName,  int uBufLen) {
        var mh$ = ImmGetIMEFileNameA$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszFileName, uBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetIMEFileNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$1282.ImmGetIMEFileNameW$MH,"ImmGetIMEFileNameW");
    }
    public static int ImmGetIMEFileNameW ( Addressable x0,  Addressable lpszFileName,  int uBufLen) {
        var mh$ = ImmGetIMEFileNameW$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszFileName, uBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$1282.ImmGetProperty$MH,"ImmGetProperty");
    }
    public static int ImmGetProperty ( Addressable x0,  int x1) {
        var mh$ = ImmGetProperty$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmIsIME$MH() {
        return RuntimeHelper.requireNonNull(constants$1282.ImmIsIME$MH,"ImmIsIME");
    }
    public static int ImmIsIME ( Addressable x0) {
        var mh$ = ImmIsIME$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSimulateHotKey$MH() {
        return RuntimeHelper.requireNonNull(constants$1282.ImmSimulateHotKey$MH,"ImmSimulateHotKey");
    }
    public static int ImmSimulateHotKey ( Addressable x0,  int x1) {
        var mh$ = ImmSimulateHotKey$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmCreateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1282.ImmCreateContext$MH,"ImmCreateContext");
    }
    public static MemoryAddress ImmCreateContext () {
        var mh$ = ImmCreateContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmDestroyContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1282.ImmDestroyContext$MH,"ImmDestroyContext");
    }
    public static int ImmDestroyContext ( Addressable x0) {
        var mh$ = ImmDestroyContext$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1283.ImmGetContext$MH,"ImmGetContext");
    }
    public static MemoryAddress ImmGetContext ( Addressable x0) {
        var mh$ = ImmGetContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmReleaseContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1283.ImmReleaseContext$MH,"ImmReleaseContext");
    }
    public static int ImmReleaseContext ( Addressable x0,  Addressable x1) {
        var mh$ = ImmReleaseContext$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmAssociateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1283.ImmAssociateContext$MH,"ImmAssociateContext");
    }
    public static MemoryAddress ImmAssociateContext ( Addressable x0,  Addressable x1) {
        var mh$ = ImmAssociateContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmAssociateContextEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1283.ImmAssociateContextEx$MH,"ImmAssociateContextEx");
    }
    public static int ImmAssociateContextEx ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = ImmAssociateContextEx$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCompositionStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$1283.ImmGetCompositionStringA$MH,"ImmGetCompositionStringA");
    }
    public static int ImmGetCompositionStringA ( Addressable x0,  int x1,  Addressable lpBuf,  int dwBufLen) {
        var mh$ = ImmGetCompositionStringA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, lpBuf, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCompositionStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$1283.ImmGetCompositionStringW$MH,"ImmGetCompositionStringW");
    }
    public static int ImmGetCompositionStringW ( Addressable x0,  int x1,  Addressable lpBuf,  int dwBufLen) {
        var mh$ = ImmGetCompositionStringW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, lpBuf, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetCompositionStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$1284.ImmSetCompositionStringA$MH,"ImmSetCompositionStringA");
    }
    public static int ImmSetCompositionStringA ( Addressable x0,  int dwIndex,  Addressable lpComp,  int dwCompLen,  Addressable lpRead,  int dwReadLen) {
        var mh$ = ImmSetCompositionStringA$MH();
        try {
            return (int)mh$.invokeExact(x0, dwIndex, lpComp, dwCompLen, lpRead, dwReadLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetCompositionStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$1284.ImmSetCompositionStringW$MH,"ImmSetCompositionStringW");
    }
    public static int ImmSetCompositionStringW ( Addressable x0,  int dwIndex,  Addressable lpComp,  int dwCompLen,  Addressable lpRead,  int dwReadLen) {
        var mh$ = ImmSetCompositionStringW$MH();
        try {
            return (int)mh$.invokeExact(x0, dwIndex, lpComp, dwCompLen, lpRead, dwReadLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCandidateListCountA$MH() {
        return RuntimeHelper.requireNonNull(constants$1284.ImmGetCandidateListCountA$MH,"ImmGetCandidateListCountA");
    }
    public static int ImmGetCandidateListCountA ( Addressable x0,  Addressable lpdwListCount) {
        var mh$ = ImmGetCandidateListCountA$MH();
        try {
            return (int)mh$.invokeExact(x0, lpdwListCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCandidateListCountW$MH() {
        return RuntimeHelper.requireNonNull(constants$1284.ImmGetCandidateListCountW$MH,"ImmGetCandidateListCountW");
    }
    public static int ImmGetCandidateListCountW ( Addressable x0,  Addressable lpdwListCount) {
        var mh$ = ImmGetCandidateListCountW$MH();
        try {
            return (int)mh$.invokeExact(x0, lpdwListCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCandidateListA$MH() {
        return RuntimeHelper.requireNonNull(constants$1284.ImmGetCandidateListA$MH,"ImmGetCandidateListA");
    }
    public static int ImmGetCandidateListA ( Addressable x0,  int deIndex,  Addressable lpCandList,  int dwBufLen) {
        var mh$ = ImmGetCandidateListA$MH();
        try {
            return (int)mh$.invokeExact(x0, deIndex, lpCandList, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCandidateListW$MH() {
        return RuntimeHelper.requireNonNull(constants$1284.ImmGetCandidateListW$MH,"ImmGetCandidateListW");
    }
    public static int ImmGetCandidateListW ( Addressable x0,  int deIndex,  Addressable lpCandList,  int dwBufLen) {
        var mh$ = ImmGetCandidateListW$MH();
        try {
            return (int)mh$.invokeExact(x0, deIndex, lpCandList, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetGuideLineA$MH() {
        return RuntimeHelper.requireNonNull(constants$1285.ImmGetGuideLineA$MH,"ImmGetGuideLineA");
    }
    public static int ImmGetGuideLineA ( Addressable x0,  int dwIndex,  Addressable lpBuf,  int dwBufLen) {
        var mh$ = ImmGetGuideLineA$MH();
        try {
            return (int)mh$.invokeExact(x0, dwIndex, lpBuf, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetGuideLineW$MH() {
        return RuntimeHelper.requireNonNull(constants$1285.ImmGetGuideLineW$MH,"ImmGetGuideLineW");
    }
    public static int ImmGetGuideLineW ( Addressable x0,  int dwIndex,  Addressable lpBuf,  int dwBufLen) {
        var mh$ = ImmGetGuideLineW$MH();
        try {
            return (int)mh$.invokeExact(x0, dwIndex, lpBuf, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetConversionStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$1285.ImmGetConversionStatus$MH,"ImmGetConversionStatus");
    }
    public static int ImmGetConversionStatus ( Addressable x0,  Addressable lpfdwConversion,  Addressable lpfdwSentence) {
        var mh$ = ImmGetConversionStatus$MH();
        try {
            return (int)mh$.invokeExact(x0, lpfdwConversion, lpfdwSentence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetConversionStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$1285.ImmSetConversionStatus$MH,"ImmSetConversionStatus");
    }
    public static int ImmSetConversionStatus ( Addressable x0,  int x1,  int x2) {
        var mh$ = ImmSetConversionStatus$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetOpenStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$1285.ImmGetOpenStatus$MH,"ImmGetOpenStatus");
    }
    public static int ImmGetOpenStatus ( Addressable x0) {
        var mh$ = ImmGetOpenStatus$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetOpenStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$1285.ImmSetOpenStatus$MH,"ImmSetOpenStatus");
    }
    public static int ImmSetOpenStatus ( Addressable x0,  int x1) {
        var mh$ = ImmSetOpenStatus$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCompositionFontA$MH() {
        return RuntimeHelper.requireNonNull(constants$1286.ImmGetCompositionFontA$MH,"ImmGetCompositionFontA");
    }
    public static int ImmGetCompositionFontA ( Addressable x0,  Addressable lplf) {
        var mh$ = ImmGetCompositionFontA$MH();
        try {
            return (int)mh$.invokeExact(x0, lplf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCompositionFontW$MH() {
        return RuntimeHelper.requireNonNull(constants$1286.ImmGetCompositionFontW$MH,"ImmGetCompositionFontW");
    }
    public static int ImmGetCompositionFontW ( Addressable x0,  Addressable lplf) {
        var mh$ = ImmGetCompositionFontW$MH();
        try {
            return (int)mh$.invokeExact(x0, lplf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetCompositionFontA$MH() {
        return RuntimeHelper.requireNonNull(constants$1286.ImmSetCompositionFontA$MH,"ImmSetCompositionFontA");
    }
    public static int ImmSetCompositionFontA ( Addressable x0,  Addressable lplf) {
        var mh$ = ImmSetCompositionFontA$MH();
        try {
            return (int)mh$.invokeExact(x0, lplf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetCompositionFontW$MH() {
        return RuntimeHelper.requireNonNull(constants$1286.ImmSetCompositionFontW$MH,"ImmSetCompositionFontW");
    }
    public static int ImmSetCompositionFontW ( Addressable x0,  Addressable lplf) {
        var mh$ = ImmSetCompositionFontW$MH();
        try {
            return (int)mh$.invokeExact(x0, lplf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmConfigureIMEA$MH() {
        return RuntimeHelper.requireNonNull(constants$1286.ImmConfigureIMEA$MH,"ImmConfigureIMEA");
    }
    public static int ImmConfigureIMEA ( Addressable x0,  Addressable x1,  int x2,  Addressable x3) {
        var mh$ = ImmConfigureIMEA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmConfigureIMEW$MH() {
        return RuntimeHelper.requireNonNull(constants$1286.ImmConfigureIMEW$MH,"ImmConfigureIMEW");
    }
    public static int ImmConfigureIMEW ( Addressable x0,  Addressable x1,  int x2,  Addressable x3) {
        var mh$ = ImmConfigureIMEW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmEscapeA$MH() {
        return RuntimeHelper.requireNonNull(constants$1287.ImmEscapeA$MH,"ImmEscapeA");
    }
    public static long ImmEscapeA ( Addressable x0,  Addressable x1,  int x2,  Addressable x3) {
        var mh$ = ImmEscapeA$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmEscapeW$MH() {
        return RuntimeHelper.requireNonNull(constants$1287.ImmEscapeW$MH,"ImmEscapeW");
    }
    public static long ImmEscapeW ( Addressable x0,  Addressable x1,  int x2,  Addressable x3) {
        var mh$ = ImmEscapeW$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetConversionListA$MH() {
        return RuntimeHelper.requireNonNull(constants$1287.ImmGetConversionListA$MH,"ImmGetConversionListA");
    }
    public static int ImmGetConversionListA ( Addressable x0,  Addressable x1,  Addressable lpSrc,  Addressable lpDst,  int dwBufLen,  int uFlag) {
        var mh$ = ImmGetConversionListA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, lpSrc, lpDst, dwBufLen, uFlag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetConversionListW$MH() {
        return RuntimeHelper.requireNonNull(constants$1287.ImmGetConversionListW$MH,"ImmGetConversionListW");
    }
    public static int ImmGetConversionListW ( Addressable x0,  Addressable x1,  Addressable lpSrc,  Addressable lpDst,  int dwBufLen,  int uFlag) {
        var mh$ = ImmGetConversionListW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, lpSrc, lpDst, dwBufLen, uFlag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmNotifyIME$MH() {
        return RuntimeHelper.requireNonNull(constants$1287.ImmNotifyIME$MH,"ImmNotifyIME");
    }
    public static int ImmNotifyIME ( Addressable x0,  int dwAction,  int dwIndex,  int dwValue) {
        var mh$ = ImmNotifyIME$MH();
        try {
            return (int)mh$.invokeExact(x0, dwAction, dwIndex, dwValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetStatusWindowPos$MH() {
        return RuntimeHelper.requireNonNull(constants$1287.ImmGetStatusWindowPos$MH,"ImmGetStatusWindowPos");
    }
    public static int ImmGetStatusWindowPos ( Addressable x0,  Addressable lpptPos) {
        var mh$ = ImmGetStatusWindowPos$MH();
        try {
            return (int)mh$.invokeExact(x0, lpptPos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetStatusWindowPos$MH() {
        return RuntimeHelper.requireNonNull(constants$1288.ImmSetStatusWindowPos$MH,"ImmSetStatusWindowPos");
    }
    public static int ImmSetStatusWindowPos ( Addressable x0,  Addressable lpptPos) {
        var mh$ = ImmSetStatusWindowPos$MH();
        try {
            return (int)mh$.invokeExact(x0, lpptPos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCompositionWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1288.ImmGetCompositionWindow$MH,"ImmGetCompositionWindow");
    }
    public static int ImmGetCompositionWindow ( Addressable x0,  Addressable lpCompForm) {
        var mh$ = ImmGetCompositionWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, lpCompForm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetCompositionWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1288.ImmSetCompositionWindow$MH,"ImmSetCompositionWindow");
    }
    public static int ImmSetCompositionWindow ( Addressable x0,  Addressable lpCompForm) {
        var mh$ = ImmSetCompositionWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, lpCompForm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCandidateWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1288.ImmGetCandidateWindow$MH,"ImmGetCandidateWindow");
    }
    public static int ImmGetCandidateWindow ( Addressable x0,  int x1,  Addressable lpCandidate) {
        var mh$ = ImmGetCandidateWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, lpCandidate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetCandidateWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1288.ImmSetCandidateWindow$MH,"ImmSetCandidateWindow");
    }
    public static int ImmSetCandidateWindow ( Addressable x0,  Addressable lpCandidate) {
        var mh$ = ImmSetCandidateWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, lpCandidate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmIsUIMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$1288.ImmIsUIMessageA$MH,"ImmIsUIMessageA");
    }
    public static int ImmIsUIMessageA ( Addressable x0,  int x1,  long x2,  long x3) {
        var mh$ = ImmIsUIMessageA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmIsUIMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$1289.ImmIsUIMessageW$MH,"ImmIsUIMessageW");
    }
    public static int ImmIsUIMessageW ( Addressable x0,  int x1,  long x2,  long x3) {
        var mh$ = ImmIsUIMessageW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetVirtualKey$MH() {
        return RuntimeHelper.requireNonNull(constants$1289.ImmGetVirtualKey$MH,"ImmGetVirtualKey");
    }
    public static int ImmGetVirtualKey ( Addressable x0) {
        var mh$ = ImmGetVirtualKey$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmRegisterWordA$MH() {
        return RuntimeHelper.requireNonNull(constants$1290.ImmRegisterWordA$MH,"ImmRegisterWordA");
    }
    public static int ImmRegisterWordA ( Addressable x0,  Addressable lpszReading,  int x2,  Addressable lpszRegister) {
        var mh$ = ImmRegisterWordA$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszReading, x2, lpszRegister);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmRegisterWordW$MH() {
        return RuntimeHelper.requireNonNull(constants$1290.ImmRegisterWordW$MH,"ImmRegisterWordW");
    }
    public static int ImmRegisterWordW ( Addressable x0,  Addressable lpszReading,  int x2,  Addressable lpszRegister) {
        var mh$ = ImmRegisterWordW$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszReading, x2, lpszRegister);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmUnregisterWordA$MH() {
        return RuntimeHelper.requireNonNull(constants$1290.ImmUnregisterWordA$MH,"ImmUnregisterWordA");
    }
    public static int ImmUnregisterWordA ( Addressable x0,  Addressable lpszReading,  int x2,  Addressable lpszUnregister) {
        var mh$ = ImmUnregisterWordA$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszReading, x2, lpszUnregister);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmUnregisterWordW$MH() {
        return RuntimeHelper.requireNonNull(constants$1290.ImmUnregisterWordW$MH,"ImmUnregisterWordW");
    }
    public static int ImmUnregisterWordW ( Addressable x0,  Addressable lpszReading,  int x2,  Addressable lpszUnregister) {
        var mh$ = ImmUnregisterWordW$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszReading, x2, lpszUnregister);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetRegisterWordStyleA$MH() {
        return RuntimeHelper.requireNonNull(constants$1290.ImmGetRegisterWordStyleA$MH,"ImmGetRegisterWordStyleA");
    }
    public static int ImmGetRegisterWordStyleA ( Addressable x0,  int nItem,  Addressable lpStyleBuf) {
        var mh$ = ImmGetRegisterWordStyleA$MH();
        try {
            return (int)mh$.invokeExact(x0, nItem, lpStyleBuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetRegisterWordStyleW$MH() {
        return RuntimeHelper.requireNonNull(constants$1290.ImmGetRegisterWordStyleW$MH,"ImmGetRegisterWordStyleW");
    }
    public static int ImmGetRegisterWordStyleW ( Addressable x0,  int nItem,  Addressable lpStyleBuf) {
        var mh$ = ImmGetRegisterWordStyleW$MH();
        try {
            return (int)mh$.invokeExact(x0, nItem, lpStyleBuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmEnumRegisterWordA$MH() {
        return RuntimeHelper.requireNonNull(constants$1291.ImmEnumRegisterWordA$MH,"ImmEnumRegisterWordA");
    }
    public static int ImmEnumRegisterWordA ( Addressable x0,  Addressable x1,  Addressable lpszReading,  int x3,  Addressable lpszRegister,  Addressable x5) {
        var mh$ = ImmEnumRegisterWordA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, lpszReading, x3, lpszRegister, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmEnumRegisterWordW$MH() {
        return RuntimeHelper.requireNonNull(constants$1291.ImmEnumRegisterWordW$MH,"ImmEnumRegisterWordW");
    }
    public static int ImmEnumRegisterWordW ( Addressable x0,  Addressable x1,  Addressable lpszReading,  int x3,  Addressable lpszRegister,  Addressable x5) {
        var mh$ = ImmEnumRegisterWordW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, lpszReading, x3, lpszRegister, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmDisableIME$MH() {
        return RuntimeHelper.requireNonNull(constants$1291.ImmDisableIME$MH,"ImmDisableIME");
    }
    public static int ImmDisableIME ( int x0) {
        var mh$ = ImmDisableIME$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmEnumInputContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1291.ImmEnumInputContext$MH,"ImmEnumInputContext");
    }
    public static int ImmEnumInputContext ( int idThread,  Addressable lpfn,  long lParam) {
        var mh$ = ImmEnumInputContext$MH();
        try {
            return (int)mh$.invokeExact(idThread, lpfn, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetImeMenuItemsA$MH() {
        return RuntimeHelper.requireNonNull(constants$1291.ImmGetImeMenuItemsA$MH,"ImmGetImeMenuItemsA");
    }
    public static int ImmGetImeMenuItemsA ( Addressable x0,  int x1,  int x2,  Addressable lpImeParentMenu,  Addressable lpImeMenu,  int dwSize) {
        var mh$ = ImmGetImeMenuItemsA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, lpImeParentMenu, lpImeMenu, dwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetImeMenuItemsW$MH() {
        return RuntimeHelper.requireNonNull(constants$1291.ImmGetImeMenuItemsW$MH,"ImmGetImeMenuItemsW");
    }
    public static int ImmGetImeMenuItemsW ( Addressable x0,  int x1,  int x2,  Addressable lpImeParentMenu,  Addressable lpImeMenu,  int dwSize) {
        var mh$ = ImmGetImeMenuItemsW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, lpImeParentMenu, lpImeMenu, dwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmDisableTextFrameService$MH() {
        return RuntimeHelper.requireNonNull(constants$1292.ImmDisableTextFrameService$MH,"ImmDisableTextFrameService");
    }
    public static int ImmDisableTextFrameService ( int idThread) {
        var mh$ = ImmDisableTextFrameService$MH();
        try {
            return (int)mh$.invokeExact(idThread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmDisableLegacyIME$MH() {
        return RuntimeHelper.requireNonNull(constants$1292.ImmDisableLegacyIME$MH,"ImmDisableLegacyIME");
    }
    public static int ImmDisableLegacyIME () {
        var mh$ = ImmDisableLegacyIME$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfShort GLshort = Constants$root.C_SHORT$LAYOUT;
    public static OfInt GLint = Constants$root.C_LONG$LAYOUT;
    public static OfInt GLsizei = Constants$root.C_LONG$LAYOUT;
    public static OfFloat GLfloat = Constants$root.C_FLOAT$LAYOUT;
    public static OfFloat GLclampf = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble GLdouble = Constants$root.C_DOUBLE$LAYOUT;
    public static OfDouble GLclampd = Constants$root.C_DOUBLE$LAYOUT;
    public static MethodHandle glAccum$MH() {
        return RuntimeHelper.requireNonNull(constants$1292.glAccum$MH,"glAccum");
    }
    public static void glAccum ( int op,  float value) {
        var mh$ = glAccum$MH();
        try {
            mh$.invokeExact(op, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAlphaFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1292.glAlphaFunc$MH,"glAlphaFunc");
    }
    public static void glAlphaFunc ( int func,  float ref) {
        var mh$ = glAlphaFunc$MH();
        try {
            mh$.invokeExact(func, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAreTexturesResident$MH() {
        return RuntimeHelper.requireNonNull(constants$1292.glAreTexturesResident$MH,"glAreTexturesResident");
    }
    public static byte glAreTexturesResident ( int n,  Addressable textures,  Addressable residences) {
        var mh$ = glAreTexturesResident$MH();
        try {
            return (byte)mh$.invokeExact(n, textures, residences);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glArrayElement$MH() {
        return RuntimeHelper.requireNonNull(constants$1292.glArrayElement$MH,"glArrayElement");
    }
    public static void glArrayElement ( int i) {
        var mh$ = glArrayElement$MH();
        try {
            mh$.invokeExact(i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBegin$MH() {
        return RuntimeHelper.requireNonNull(constants$1293.glBegin$MH,"glBegin");
    }
    public static void glBegin ( int mode) {
        var mh$ = glBegin$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$1293.glBindTexture$MH,"glBindTexture");
    }
    public static void glBindTexture ( int target,  int texture) {
        var mh$ = glBindTexture$MH();
        try {
            mh$.invokeExact(target, texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBitmap$MH() {
        return RuntimeHelper.requireNonNull(constants$1293.glBitmap$MH,"glBitmap");
    }
    public static void glBitmap ( int width,  int height,  float xorig,  float yorig,  float xmove,  float ymove,  Addressable bitmap) {
        var mh$ = glBitmap$MH();
        try {
            mh$.invokeExact(width, height, xorig, yorig, xmove, ymove, bitmap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1293.glBlendFunc$MH,"glBlendFunc");
    }
    public static void glBlendFunc ( int sfactor,  int dfactor) {
        var mh$ = glBlendFunc$MH();
        try {
            mh$.invokeExact(sfactor, dfactor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCallList$MH() {
        return RuntimeHelper.requireNonNull(constants$1293.glCallList$MH,"glCallList");
    }
    public static void glCallList ( int list) {
        var mh$ = glCallList$MH();
        try {
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCallLists$MH() {
        return RuntimeHelper.requireNonNull(constants$1293.glCallLists$MH,"glCallLists");
    }
    public static void glCallLists ( int n,  int type,  Addressable lists) {
        var mh$ = glCallLists$MH();
        try {
            mh$.invokeExact(n, type, lists);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClear$MH() {
        return RuntimeHelper.requireNonNull(constants$1294.glClear$MH,"glClear");
    }
    public static void glClear ( int mask) {
        var mh$ = glClear$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearAccum$MH() {
        return RuntimeHelper.requireNonNull(constants$1294.glClearAccum$MH,"glClearAccum");
    }
    public static void glClearAccum ( float red,  float green,  float blue,  float alpha) {
        var mh$ = glClearAccum$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearColor$MH() {
        return RuntimeHelper.requireNonNull(constants$1294.glClearColor$MH,"glClearColor");
    }
    public static void glClearColor ( float red,  float green,  float blue,  float alpha) {
        var mh$ = glClearColor$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearDepth$MH() {
        return RuntimeHelper.requireNonNull(constants$1294.glClearDepth$MH,"glClearDepth");
    }
    public static void glClearDepth ( double depth) {
        var mh$ = glClearDepth$MH();
        try {
            mh$.invokeExact(depth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$1294.glClearIndex$MH,"glClearIndex");
    }
    public static void glClearIndex ( float c) {
        var mh$ = glClearIndex$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearStencil$MH() {
        return RuntimeHelper.requireNonNull(constants$1294.glClearStencil$MH,"glClearStencil");
    }
    public static void glClearStencil ( int s) {
        var mh$ = glClearStencil$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClipPlane$MH() {
        return RuntimeHelper.requireNonNull(constants$1295.glClipPlane$MH,"glClipPlane");
    }
    public static void glClipPlane ( int plane,  Addressable equation) {
        var mh$ = glClipPlane$MH();
        try {
            mh$.invokeExact(plane, equation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3b$MH() {
        return RuntimeHelper.requireNonNull(constants$1295.glColor3b$MH,"glColor3b");
    }
    public static void glColor3b ( byte red,  byte green,  byte blue) {
        var mh$ = glColor3b$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3bv$MH() {
        return RuntimeHelper.requireNonNull(constants$1295.glColor3bv$MH,"glColor3bv");
    }
    public static void glColor3bv ( Addressable v) {
        var mh$ = glColor3bv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3d$MH() {
        return RuntimeHelper.requireNonNull(constants$1295.glColor3d$MH,"glColor3d");
    }
    public static void glColor3d ( double red,  double green,  double blue) {
        var mh$ = glColor3d$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$1295.glColor3dv$MH,"glColor3dv");
    }
    public static void glColor3dv ( Addressable v) {
        var mh$ = glColor3dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3f$MH() {
        return RuntimeHelper.requireNonNull(constants$1295.glColor3f$MH,"glColor3f");
    }
    public static void glColor3f ( float red,  float green,  float blue) {
        var mh$ = glColor3f$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$1296.glColor3fv$MH,"glColor3fv");
    }
    public static void glColor3fv ( Addressable v) {
        var mh$ = glColor3fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3i$MH() {
        return RuntimeHelper.requireNonNull(constants$1296.glColor3i$MH,"glColor3i");
    }
    public static void glColor3i ( int red,  int green,  int blue) {
        var mh$ = glColor3i$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$1296.glColor3iv$MH,"glColor3iv");
    }
    public static void glColor3iv ( Addressable v) {
        var mh$ = glColor3iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3s$MH() {
        return RuntimeHelper.requireNonNull(constants$1296.glColor3s$MH,"glColor3s");
    }
    public static void glColor3s ( short red,  short green,  short blue) {
        var mh$ = glColor3s$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$1296.glColor3sv$MH,"glColor3sv");
    }
    public static void glColor3sv ( Addressable v) {
        var mh$ = glColor3sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3ub$MH() {
        return RuntimeHelper.requireNonNull(constants$1296.glColor3ub$MH,"glColor3ub");
    }
    public static void glColor3ub ( byte red,  byte green,  byte blue) {
        var mh$ = glColor3ub$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3ubv$MH() {
        return RuntimeHelper.requireNonNull(constants$1297.glColor3ubv$MH,"glColor3ubv");
    }
    public static void glColor3ubv ( Addressable v) {
        var mh$ = glColor3ubv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3ui$MH() {
        return RuntimeHelper.requireNonNull(constants$1297.glColor3ui$MH,"glColor3ui");
    }
    public static void glColor3ui ( int red,  int green,  int blue) {
        var mh$ = glColor3ui$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$1297.glColor3uiv$MH,"glColor3uiv");
    }
    public static void glColor3uiv ( Addressable v) {
        var mh$ = glColor3uiv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3us$MH() {
        return RuntimeHelper.requireNonNull(constants$1297.glColor3us$MH,"glColor3us");
    }
    public static void glColor3us ( short red,  short green,  short blue) {
        var mh$ = glColor3us$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3usv$MH() {
        return RuntimeHelper.requireNonNull(constants$1297.glColor3usv$MH,"glColor3usv");
    }
    public static void glColor3usv ( Addressable v) {
        var mh$ = glColor3usv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4b$MH() {
        return RuntimeHelper.requireNonNull(constants$1297.glColor4b$MH,"glColor4b");
    }
    public static void glColor4b ( byte red,  byte green,  byte blue,  byte alpha) {
        var mh$ = glColor4b$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4bv$MH() {
        return RuntimeHelper.requireNonNull(constants$1298.glColor4bv$MH,"glColor4bv");
    }
    public static void glColor4bv ( Addressable v) {
        var mh$ = glColor4bv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4d$MH() {
        return RuntimeHelper.requireNonNull(constants$1298.glColor4d$MH,"glColor4d");
    }
    public static void glColor4d ( double red,  double green,  double blue,  double alpha) {
        var mh$ = glColor4d$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$1298.glColor4dv$MH,"glColor4dv");
    }
    public static void glColor4dv ( Addressable v) {
        var mh$ = glColor4dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4f$MH() {
        return RuntimeHelper.requireNonNull(constants$1298.glColor4f$MH,"glColor4f");
    }
    public static void glColor4f ( float red,  float green,  float blue,  float alpha) {
        var mh$ = glColor4f$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$1298.glColor4fv$MH,"glColor4fv");
    }
    public static void glColor4fv ( Addressable v) {
        var mh$ = glColor4fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4i$MH() {
        return RuntimeHelper.requireNonNull(constants$1298.glColor4i$MH,"glColor4i");
    }
    public static void glColor4i ( int red,  int green,  int blue,  int alpha) {
        var mh$ = glColor4i$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$1299.glColor4iv$MH,"glColor4iv");
    }
    public static void glColor4iv ( Addressable v) {
        var mh$ = glColor4iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4s$MH() {
        return RuntimeHelper.requireNonNull(constants$1299.glColor4s$MH,"glColor4s");
    }
    public static void glColor4s ( short red,  short green,  short blue,  short alpha) {
        var mh$ = glColor4s$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4sv$MH() {
        return RuntimeHelper.requireNonNull(constants$1299.glColor4sv$MH,"glColor4sv");
    }
    public static void glColor4sv ( Addressable v) {
        var mh$ = glColor4sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4ub$MH() {
        return RuntimeHelper.requireNonNull(constants$1299.glColor4ub$MH,"glColor4ub");
    }
    public static void glColor4ub ( byte red,  byte green,  byte blue,  byte alpha) {
        var mh$ = glColor4ub$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4ubv$MH() {
        return RuntimeHelper.requireNonNull(constants$1299.glColor4ubv$MH,"glColor4ubv");
    }
    public static void glColor4ubv ( Addressable v) {
        var mh$ = glColor4ubv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4ui$MH() {
        return RuntimeHelper.requireNonNull(constants$1299.glColor4ui$MH,"glColor4ui");
    }
    public static void glColor4ui ( int red,  int green,  int blue,  int alpha) {
        var mh$ = glColor4ui$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$1300.glColor4uiv$MH,"glColor4uiv");
    }
    public static void glColor4uiv ( Addressable v) {
        var mh$ = glColor4uiv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4us$MH() {
        return RuntimeHelper.requireNonNull(constants$1300.glColor4us$MH,"glColor4us");
    }
    public static void glColor4us ( short red,  short green,  short blue,  short alpha) {
        var mh$ = glColor4us$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4usv$MH() {
        return RuntimeHelper.requireNonNull(constants$1300.glColor4usv$MH,"glColor4usv");
    }
    public static void glColor4usv ( Addressable v) {
        var mh$ = glColor4usv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorMask$MH() {
        return RuntimeHelper.requireNonNull(constants$1300.glColorMask$MH,"glColorMask");
    }
    public static void glColorMask ( byte red,  byte green,  byte blue,  byte alpha) {
        var mh$ = glColorMask$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorMaterial$MH() {
        return RuntimeHelper.requireNonNull(constants$1300.glColorMaterial$MH,"glColorMaterial");
    }
    public static void glColorMaterial ( int face,  int mode) {
        var mh$ = glColorMaterial$MH();
        try {
            mh$.invokeExact(face, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$1300.glColorPointer$MH,"glColorPointer");
    }
    public static void glColorPointer ( int size,  int type,  int stride,  Addressable pointer) {
        var mh$ = glColorPointer$MH();
        try {
            mh$.invokeExact(size, type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyPixels$MH() {
        return RuntimeHelper.requireNonNull(constants$1301.glCopyPixels$MH,"glCopyPixels");
    }
    public static void glCopyPixels ( int x,  int y,  int width,  int height,  int type) {
        var mh$ = glCopyPixels$MH();
        try {
            mh$.invokeExact(x, y, width, height, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$1301.glCopyTexImage1D$MH,"glCopyTexImage1D");
    }
    public static void glCopyTexImage1D ( int target,  int level,  int internalFormat,  int x,  int y,  int width,  int border) {
        var mh$ = glCopyTexImage1D$MH();
        try {
            mh$.invokeExact(target, level, internalFormat, x, y, width, border);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$1301.glCopyTexImage2D$MH,"glCopyTexImage2D");
    }
    public static void glCopyTexImage2D ( int target,  int level,  int internalFormat,  int x,  int y,  int width,  int height,  int border) {
        var mh$ = glCopyTexImage2D$MH();
        try {
            mh$.invokeExact(target, level, internalFormat, x, y, width, height, border);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexSubImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$1301.glCopyTexSubImage1D$MH,"glCopyTexSubImage1D");
    }
    public static void glCopyTexSubImage1D ( int target,  int level,  int xoffset,  int x,  int y,  int width) {
        var mh$ = glCopyTexSubImage1D$MH();
        try {
            mh$.invokeExact(target, level, xoffset, x, y, width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexSubImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$1301.glCopyTexSubImage2D$MH,"glCopyTexSubImage2D");
    }
    public static void glCopyTexSubImage2D ( int target,  int level,  int xoffset,  int yoffset,  int x,  int y,  int width,  int height) {
        var mh$ = glCopyTexSubImage2D$MH();
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCullFace$MH() {
        return RuntimeHelper.requireNonNull(constants$1301.glCullFace$MH,"glCullFace");
    }
    public static void glCullFace ( int mode) {
        var mh$ = glCullFace$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteLists$MH() {
        return RuntimeHelper.requireNonNull(constants$1302.glDeleteLists$MH,"glDeleteLists");
    }
    public static void glDeleteLists ( int list,  int range) {
        var mh$ = glDeleteLists$MH();
        try {
            mh$.invokeExact(list, range);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteTextures$MH() {
        return RuntimeHelper.requireNonNull(constants$1302.glDeleteTextures$MH,"glDeleteTextures");
    }
    public static void glDeleteTextures ( int n,  Addressable textures) {
        var mh$ = glDeleteTextures$MH();
        try {
            mh$.invokeExact(n, textures);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDepthFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1302.glDepthFunc$MH,"glDepthFunc");
    }
    public static void glDepthFunc ( int func) {
        var mh$ = glDepthFunc$MH();
        try {
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDepthMask$MH() {
        return RuntimeHelper.requireNonNull(constants$1302.glDepthMask$MH,"glDepthMask");
    }
    public static void glDepthMask ( byte flag) {
        var mh$ = glDepthMask$MH();
        try {
            mh$.invokeExact(flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDepthRange$MH() {
        return RuntimeHelper.requireNonNull(constants$1302.glDepthRange$MH,"glDepthRange");
    }
    public static void glDepthRange ( double zNear,  double zFar) {
        var mh$ = glDepthRange$MH();
        try {
            mh$.invokeExact(zNear, zFar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDisable$MH() {
        return RuntimeHelper.requireNonNull(constants$1302.glDisable$MH,"glDisable");
    }
    public static void glDisable ( int cap) {
        var mh$ = glDisable$MH();
        try {
            mh$.invokeExact(cap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDisableClientState$MH() {
        return RuntimeHelper.requireNonNull(constants$1303.glDisableClientState$MH,"glDisableClientState");
    }
    public static void glDisableClientState ( int array) {
        var mh$ = glDisableClientState$MH();
        try {
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawArrays$MH() {
        return RuntimeHelper.requireNonNull(constants$1303.glDrawArrays$MH,"glDrawArrays");
    }
    public static void glDrawArrays ( int mode,  int first,  int count) {
        var mh$ = glDrawArrays$MH();
        try {
            mh$.invokeExact(mode, first, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$1303.glDrawBuffer$MH,"glDrawBuffer");
    }
    public static void glDrawBuffer ( int mode) {
        var mh$ = glDrawBuffer$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawElements$MH() {
        return RuntimeHelper.requireNonNull(constants$1303.glDrawElements$MH,"glDrawElements");
    }
    public static void glDrawElements ( int mode,  int count,  int type,  Addressable indices) {
        var mh$ = glDrawElements$MH();
        try {
            mh$.invokeExact(mode, count, type, indices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawPixels$MH() {
        return RuntimeHelper.requireNonNull(constants$1303.glDrawPixels$MH,"glDrawPixels");
    }
    public static void glDrawPixels ( int width,  int height,  int format,  int type,  Addressable pixels) {
        var mh$ = glDrawPixels$MH();
        try {
            mh$.invokeExact(width, height, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEdgeFlag$MH() {
        return RuntimeHelper.requireNonNull(constants$1303.glEdgeFlag$MH,"glEdgeFlag");
    }
    public static void glEdgeFlag ( byte flag) {
        var mh$ = glEdgeFlag$MH();
        try {
            mh$.invokeExact(flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEdgeFlagPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$1304.glEdgeFlagPointer$MH,"glEdgeFlagPointer");
    }
    public static void glEdgeFlagPointer ( int stride,  Addressable pointer) {
        var mh$ = glEdgeFlagPointer$MH();
        try {
            mh$.invokeExact(stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEdgeFlagv$MH() {
        return RuntimeHelper.requireNonNull(constants$1304.glEdgeFlagv$MH,"glEdgeFlagv");
    }
    public static void glEdgeFlagv ( Addressable flag) {
        var mh$ = glEdgeFlagv$MH();
        try {
            mh$.invokeExact(flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnable$MH() {
        return RuntimeHelper.requireNonNull(constants$1304.glEnable$MH,"glEnable");
    }
    public static void glEnable ( int cap) {
        var mh$ = glEnable$MH();
        try {
            mh$.invokeExact(cap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnableClientState$MH() {
        return RuntimeHelper.requireNonNull(constants$1304.glEnableClientState$MH,"glEnableClientState");
    }
    public static void glEnableClientState ( int array) {
        var mh$ = glEnableClientState$MH();
        try {
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnd$MH() {
        return RuntimeHelper.requireNonNull(constants$1304.glEnd$MH,"glEnd");
    }
    public static void glEnd () {
        var mh$ = glEnd$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEndList$MH() {
        return RuntimeHelper.requireNonNull(constants$1304.glEndList$MH,"glEndList");
    }
    public static void glEndList () {
        var mh$ = glEndList$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord1d$MH() {
        return RuntimeHelper.requireNonNull(constants$1305.glEvalCoord1d$MH,"glEvalCoord1d");
    }
    public static void glEvalCoord1d ( double u) {
        var mh$ = glEvalCoord1d$MH();
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord1dv$MH() {
        return RuntimeHelper.requireNonNull(constants$1305.glEvalCoord1dv$MH,"glEvalCoord1dv");
    }
    public static void glEvalCoord1dv ( Addressable u) {
        var mh$ = glEvalCoord1dv$MH();
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord1f$MH() {
        return RuntimeHelper.requireNonNull(constants$1305.glEvalCoord1f$MH,"glEvalCoord1f");
    }
    public static void glEvalCoord1f ( float u) {
        var mh$ = glEvalCoord1f$MH();
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord1fv$MH() {
        return RuntimeHelper.requireNonNull(constants$1305.glEvalCoord1fv$MH,"glEvalCoord1fv");
    }
    public static void glEvalCoord1fv ( Addressable u) {
        var mh$ = glEvalCoord1fv$MH();
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord2d$MH() {
        return RuntimeHelper.requireNonNull(constants$1305.glEvalCoord2d$MH,"glEvalCoord2d");
    }
    public static void glEvalCoord2d ( double u,  double v) {
        var mh$ = glEvalCoord2d$MH();
        try {
            mh$.invokeExact(u, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$1305.glEvalCoord2dv$MH,"glEvalCoord2dv");
    }
    public static void glEvalCoord2dv ( Addressable u) {
        var mh$ = glEvalCoord2dv$MH();
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord2f$MH() {
        return RuntimeHelper.requireNonNull(constants$1306.glEvalCoord2f$MH,"glEvalCoord2f");
    }
    public static void glEvalCoord2f ( float u,  float v) {
        var mh$ = glEvalCoord2f$MH();
        try {
            mh$.invokeExact(u, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$1306.glEvalCoord2fv$MH,"glEvalCoord2fv");
    }
    public static void glEvalCoord2fv ( Addressable u) {
        var mh$ = glEvalCoord2fv$MH();
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalMesh1$MH() {
        return RuntimeHelper.requireNonNull(constants$1306.glEvalMesh1$MH,"glEvalMesh1");
    }
    public static void glEvalMesh1 ( int mode,  int i1,  int i2) {
        var mh$ = glEvalMesh1$MH();
        try {
            mh$.invokeExact(mode, i1, i2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalMesh2$MH() {
        return RuntimeHelper.requireNonNull(constants$1306.glEvalMesh2$MH,"glEvalMesh2");
    }
    public static void glEvalMesh2 ( int mode,  int i1,  int i2,  int j1,  int j2) {
        var mh$ = glEvalMesh2$MH();
        try {
            mh$.invokeExact(mode, i1, i2, j1, j2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalPoint1$MH() {
        return RuntimeHelper.requireNonNull(constants$1306.glEvalPoint1$MH,"glEvalPoint1");
    }
    public static void glEvalPoint1 ( int i) {
        var mh$ = glEvalPoint1$MH();
        try {
            mh$.invokeExact(i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalPoint2$MH() {
        return RuntimeHelper.requireNonNull(constants$1306.glEvalPoint2$MH,"glEvalPoint2");
    }
    public static void glEvalPoint2 ( int i,  int j) {
        var mh$ = glEvalPoint2$MH();
        try {
            mh$.invokeExact(i, j);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFeedbackBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$1307.glFeedbackBuffer$MH,"glFeedbackBuffer");
    }
    public static void glFeedbackBuffer ( int size,  int type,  Addressable buffer) {
        var mh$ = glFeedbackBuffer$MH();
        try {
            mh$.invokeExact(size, type, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFinish$MH() {
        return RuntimeHelper.requireNonNull(constants$1307.glFinish$MH,"glFinish");
    }
    public static void glFinish () {
        var mh$ = glFinish$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFlush$MH() {
        return RuntimeHelper.requireNonNull(constants$1307.glFlush$MH,"glFlush");
    }
    public static void glFlush () {
        var mh$ = glFlush$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogf$MH() {
        return RuntimeHelper.requireNonNull(constants$1307.glFogf$MH,"glFogf");
    }
    public static void glFogf ( int pname,  float param) {
        var mh$ = glFogf$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogfv$MH() {
        return RuntimeHelper.requireNonNull(constants$1307.glFogfv$MH,"glFogfv");
    }
    public static void glFogfv ( int pname,  Addressable params) {
        var mh$ = glFogfv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogi$MH() {
        return RuntimeHelper.requireNonNull(constants$1307.glFogi$MH,"glFogi");
    }
    public static void glFogi ( int pname,  int param) {
        var mh$ = glFogi$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogiv$MH() {
        return RuntimeHelper.requireNonNull(constants$1308.glFogiv$MH,"glFogiv");
    }
    public static void glFogiv ( int pname,  Addressable params) {
        var mh$ = glFogiv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFrontFace$MH() {
        return RuntimeHelper.requireNonNull(constants$1308.glFrontFace$MH,"glFrontFace");
    }
    public static void glFrontFace ( int mode) {
        var mh$ = glFrontFace$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFrustum$MH() {
        return RuntimeHelper.requireNonNull(constants$1308.glFrustum$MH,"glFrustum");
    }
    public static void glFrustum ( double left,  double right,  double bottom,  double top,  double zNear,  double zFar) {
        var mh$ = glFrustum$MH();
        try {
            mh$.invokeExact(left, right, bottom, top, zNear, zFar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenLists$MH() {
        return RuntimeHelper.requireNonNull(constants$1308.glGenLists$MH,"glGenLists");
    }
    public static int glGenLists ( int range) {
        var mh$ = glGenLists$MH();
        try {
            return (int)mh$.invokeExact(range);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenTextures$MH() {
        return RuntimeHelper.requireNonNull(constants$1308.glGenTextures$MH,"glGenTextures");
    }
    public static void glGenTextures ( int n,  Addressable textures) {
        var mh$ = glGenTextures$MH();
        try {
            mh$.invokeExact(n, textures);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetBooleanv$MH() {
        return RuntimeHelper.requireNonNull(constants$1308.glGetBooleanv$MH,"glGetBooleanv");
    }
    public static void glGetBooleanv ( int pname,  Addressable params) {
        var mh$ = glGetBooleanv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetClipPlane$MH() {
        return RuntimeHelper.requireNonNull(constants$1309.glGetClipPlane$MH,"glGetClipPlane");
    }
    public static void glGetClipPlane ( int plane,  Addressable equation) {
        var mh$ = glGetClipPlane$MH();
        try {
            mh$.invokeExact(plane, equation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetDoublev$MH() {
        return RuntimeHelper.requireNonNull(constants$1309.glGetDoublev$MH,"glGetDoublev");
    }
    public static void glGetDoublev ( int pname,  Addressable params) {
        var mh$ = glGetDoublev$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetError$MH() {
        return RuntimeHelper.requireNonNull(constants$1309.glGetError$MH,"glGetError");
    }
    public static int glGetError () {
        var mh$ = glGetError$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetFloatv$MH() {
        return RuntimeHelper.requireNonNull(constants$1309.glGetFloatv$MH,"glGetFloatv");
    }
    public static void glGetFloatv ( int pname,  Addressable params) {
        var mh$ = glGetFloatv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetIntegerv$MH() {
        return RuntimeHelper.requireNonNull(constants$1309.glGetIntegerv$MH,"glGetIntegerv");
    }
    public static void glGetIntegerv ( int pname,  Addressable params) {
        var mh$ = glGetIntegerv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetLightfv$MH() {
        return RuntimeHelper.requireNonNull(constants$1309.glGetLightfv$MH,"glGetLightfv");
    }
    public static void glGetLightfv ( int light,  int pname,  Addressable params) {
        var mh$ = glGetLightfv$MH();
        try {
            mh$.invokeExact(light, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetLightiv$MH() {
        return RuntimeHelper.requireNonNull(constants$1310.glGetLightiv$MH,"glGetLightiv");
    }
    public static void glGetLightiv ( int light,  int pname,  Addressable params) {
        var mh$ = glGetLightiv$MH();
        try {
            mh$.invokeExact(light, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMapdv$MH() {
        return RuntimeHelper.requireNonNull(constants$1310.glGetMapdv$MH,"glGetMapdv");
    }
    public static void glGetMapdv ( int target,  int query,  Addressable v) {
        var mh$ = glGetMapdv$MH();
        try {
            mh$.invokeExact(target, query, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMapfv$MH() {
        return RuntimeHelper.requireNonNull(constants$1310.glGetMapfv$MH,"glGetMapfv");
    }
    public static void glGetMapfv ( int target,  int query,  Addressable v) {
        var mh$ = glGetMapfv$MH();
        try {
            mh$.invokeExact(target, query, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMapiv$MH() {
        return RuntimeHelper.requireNonNull(constants$1310.glGetMapiv$MH,"glGetMapiv");
    }
    public static void glGetMapiv ( int target,  int query,  Addressable v) {
        var mh$ = glGetMapiv$MH();
        try {
            mh$.invokeExact(target, query, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMaterialfv$MH() {
        return RuntimeHelper.requireNonNull(constants$1310.glGetMaterialfv$MH,"glGetMaterialfv");
    }
    public static void glGetMaterialfv ( int face,  int pname,  Addressable params) {
        var mh$ = glGetMaterialfv$MH();
        try {
            mh$.invokeExact(face, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMaterialiv$MH() {
        return RuntimeHelper.requireNonNull(constants$1310.glGetMaterialiv$MH,"glGetMaterialiv");
    }
    public static void glGetMaterialiv ( int face,  int pname,  Addressable params) {
        var mh$ = glGetMaterialiv$MH();
        try {
            mh$.invokeExact(face, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPixelMapfv$MH() {
        return RuntimeHelper.requireNonNull(constants$1311.glGetPixelMapfv$MH,"glGetPixelMapfv");
    }
    public static void glGetPixelMapfv ( int map,  Addressable values) {
        var mh$ = glGetPixelMapfv$MH();
        try {
            mh$.invokeExact(map, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPixelMapuiv$MH() {
        return RuntimeHelper.requireNonNull(constants$1311.glGetPixelMapuiv$MH,"glGetPixelMapuiv");
    }
    public static void glGetPixelMapuiv ( int map,  Addressable values) {
        var mh$ = glGetPixelMapuiv$MH();
        try {
            mh$.invokeExact(map, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPixelMapusv$MH() {
        return RuntimeHelper.requireNonNull(constants$1311.glGetPixelMapusv$MH,"glGetPixelMapusv");
    }
    public static void glGetPixelMapusv ( int map,  Addressable values) {
        var mh$ = glGetPixelMapusv$MH();
        try {
            mh$.invokeExact(map, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPointerv$MH() {
        return RuntimeHelper.requireNonNull(constants$1311.glGetPointerv$MH,"glGetPointerv");
    }
    public static void glGetPointerv ( int pname,  Addressable params) {
        var mh$ = glGetPointerv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPolygonStipple$MH() {
        return RuntimeHelper.requireNonNull(constants$1311.glGetPolygonStipple$MH,"glGetPolygonStipple");
    }
    public static void glGetPolygonStipple ( Addressable mask) {
        var mh$ = glGetPolygonStipple$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetString$MH() {
        return RuntimeHelper.requireNonNull(constants$1311.glGetString$MH,"glGetString");
    }
    public static MemoryAddress glGetString ( int name) {
        var mh$ = glGetString$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexEnvfv$MH() {
        return RuntimeHelper.requireNonNull(constants$1312.glGetTexEnvfv$MH,"glGetTexEnvfv");
    }
    public static void glGetTexEnvfv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetTexEnvfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexEnviv$MH() {
        return RuntimeHelper.requireNonNull(constants$1312.glGetTexEnviv$MH,"glGetTexEnviv");
    }
    public static void glGetTexEnviv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetTexEnviv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexGendv$MH() {
        return RuntimeHelper.requireNonNull(constants$1312.glGetTexGendv$MH,"glGetTexGendv");
    }
    public static void glGetTexGendv ( int coord,  int pname,  Addressable params) {
        var mh$ = glGetTexGendv$MH();
        try {
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexGenfv$MH() {
        return RuntimeHelper.requireNonNull(constants$1312.glGetTexGenfv$MH,"glGetTexGenfv");
    }
    public static void glGetTexGenfv ( int coord,  int pname,  Addressable params) {
        var mh$ = glGetTexGenfv$MH();
        try {
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexGeniv$MH() {
        return RuntimeHelper.requireNonNull(constants$1312.glGetTexGeniv$MH,"glGetTexGeniv");
    }
    public static void glGetTexGeniv ( int coord,  int pname,  Addressable params) {
        var mh$ = glGetTexGeniv$MH();
        try {
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexImage$MH() {
        return RuntimeHelper.requireNonNull(constants$1312.glGetTexImage$MH,"glGetTexImage");
    }
    public static void glGetTexImage ( int target,  int level,  int format,  int type,  Addressable pixels) {
        var mh$ = glGetTexImage$MH();
        try {
            mh$.invokeExact(target, level, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexLevelParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$1313.glGetTexLevelParameterfv$MH,"glGetTexLevelParameterfv");
    }
    public static void glGetTexLevelParameterfv ( int target,  int level,  int pname,  Addressable params) {
        var mh$ = glGetTexLevelParameterfv$MH();
        try {
            mh$.invokeExact(target, level, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexLevelParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$1313.glGetTexLevelParameteriv$MH,"glGetTexLevelParameteriv");
    }
    public static void glGetTexLevelParameteriv ( int target,  int level,  int pname,  Addressable params) {
        var mh$ = glGetTexLevelParameteriv$MH();
        try {
            mh$.invokeExact(target, level, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$1313.glGetTexParameterfv$MH,"glGetTexParameterfv");
    }
    public static void glGetTexParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetTexParameterfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$1313.glGetTexParameteriv$MH,"glGetTexParameteriv");
    }
    public static void glGetTexParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetTexParameteriv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glHint$MH() {
        return RuntimeHelper.requireNonNull(constants$1313.glHint$MH,"glHint");
    }
    public static void glHint ( int target,  int mode) {
        var mh$ = glHint$MH();
        try {
            mh$.invokeExact(target, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexMask$MH() {
        return RuntimeHelper.requireNonNull(constants$1313.glIndexMask$MH,"glIndexMask");
    }
    public static void glIndexMask ( int mask) {
        var mh$ = glIndexMask$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$1314.glIndexPointer$MH,"glIndexPointer");
    }
    public static void glIndexPointer ( int type,  int stride,  Addressable pointer) {
        var mh$ = glIndexPointer$MH();
        try {
            mh$.invokeExact(type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexd$MH() {
        return RuntimeHelper.requireNonNull(constants$1314.glIndexd$MH,"glIndexd");
    }
    public static void glIndexd ( double c) {
        var mh$ = glIndexd$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexdv$MH() {
        return RuntimeHelper.requireNonNull(constants$1314.glIndexdv$MH,"glIndexdv");
    }
    public static void glIndexdv ( Addressable c) {
        var mh$ = glIndexdv$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexf$MH() {
        return RuntimeHelper.requireNonNull(constants$1314.glIndexf$MH,"glIndexf");
    }
    public static void glIndexf ( float c) {
        var mh$ = glIndexf$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexfv$MH() {
        return RuntimeHelper.requireNonNull(constants$1314.glIndexfv$MH,"glIndexfv");
    }
    public static void glIndexfv ( Addressable c) {
        var mh$ = glIndexfv$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexi$MH() {
        return RuntimeHelper.requireNonNull(constants$1314.glIndexi$MH,"glIndexi");
    }
    public static void glIndexi ( int c) {
        var mh$ = glIndexi$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexiv$MH() {
        return RuntimeHelper.requireNonNull(constants$1315.glIndexiv$MH,"glIndexiv");
    }
    public static void glIndexiv ( Addressable c) {
        var mh$ = glIndexiv$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexs$MH() {
        return RuntimeHelper.requireNonNull(constants$1315.glIndexs$MH,"glIndexs");
    }
    public static void glIndexs ( short c) {
        var mh$ = glIndexs$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexsv$MH() {
        return RuntimeHelper.requireNonNull(constants$1315.glIndexsv$MH,"glIndexsv");
    }
    public static void glIndexsv ( Addressable c) {
        var mh$ = glIndexsv$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexub$MH() {
        return RuntimeHelper.requireNonNull(constants$1315.glIndexub$MH,"glIndexub");
    }
    public static void glIndexub ( byte c) {
        var mh$ = glIndexub$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexubv$MH() {
        return RuntimeHelper.requireNonNull(constants$1315.glIndexubv$MH,"glIndexubv");
    }
    public static void glIndexubv ( Addressable c) {
        var mh$ = glIndexubv$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glInitNames$MH() {
        return RuntimeHelper.requireNonNull(constants$1315.glInitNames$MH,"glInitNames");
    }
    public static void glInitNames () {
        var mh$ = glInitNames$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glInterleavedArrays$MH() {
        return RuntimeHelper.requireNonNull(constants$1316.glInterleavedArrays$MH,"glInterleavedArrays");
    }
    public static void glInterleavedArrays ( int format,  int stride,  Addressable pointer) {
        var mh$ = glInterleavedArrays$MH();
        try {
            mh$.invokeExact(format, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsEnabled$MH() {
        return RuntimeHelper.requireNonNull(constants$1316.glIsEnabled$MH,"glIsEnabled");
    }
    public static byte glIsEnabled ( int cap) {
        var mh$ = glIsEnabled$MH();
        try {
            return (byte)mh$.invokeExact(cap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsList$MH() {
        return RuntimeHelper.requireNonNull(constants$1316.glIsList$MH,"glIsList");
    }
    public static byte glIsList ( int list) {
        var mh$ = glIsList$MH();
        try {
            return (byte)mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$1316.glIsTexture$MH,"glIsTexture");
    }
    public static byte glIsTexture ( int texture) {
        var mh$ = glIsTexture$MH();
        try {
            return (byte)mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightModelf$MH() {
        return RuntimeHelper.requireNonNull(constants$1316.glLightModelf$MH,"glLightModelf");
    }
    public static void glLightModelf ( int pname,  float param) {
        var mh$ = glLightModelf$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightModelfv$MH() {
        return RuntimeHelper.requireNonNull(constants$1316.glLightModelfv$MH,"glLightModelfv");
    }
    public static void glLightModelfv ( int pname,  Addressable params) {
        var mh$ = glLightModelfv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightModeli$MH() {
        return RuntimeHelper.requireNonNull(constants$1317.glLightModeli$MH,"glLightModeli");
    }
    public static void glLightModeli ( int pname,  int param) {
        var mh$ = glLightModeli$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightModeliv$MH() {
        return RuntimeHelper.requireNonNull(constants$1317.glLightModeliv$MH,"glLightModeliv");
    }
    public static void glLightModeliv ( int pname,  Addressable params) {
        var mh$ = glLightModeliv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightf$MH() {
        return RuntimeHelper.requireNonNull(constants$1317.glLightf$MH,"glLightf");
    }
    public static void glLightf ( int light,  int pname,  float param) {
        var mh$ = glLightf$MH();
        try {
            mh$.invokeExact(light, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightfv$MH() {
        return RuntimeHelper.requireNonNull(constants$1317.glLightfv$MH,"glLightfv");
    }
    public static void glLightfv ( int light,  int pname,  Addressable params) {
        var mh$ = glLightfv$MH();
        try {
            mh$.invokeExact(light, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLighti$MH() {
        return RuntimeHelper.requireNonNull(constants$1317.glLighti$MH,"glLighti");
    }
    public static void glLighti ( int light,  int pname,  int param) {
        var mh$ = glLighti$MH();
        try {
            mh$.invokeExact(light, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightiv$MH() {
        return RuntimeHelper.requireNonNull(constants$1317.glLightiv$MH,"glLightiv");
    }
    public static void glLightiv ( int light,  int pname,  Addressable params) {
        var mh$ = glLightiv$MH();
        try {
            mh$.invokeExact(light, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLineStipple$MH() {
        return RuntimeHelper.requireNonNull(constants$1318.glLineStipple$MH,"glLineStipple");
    }
    public static void glLineStipple ( int factor,  short pattern) {
        var mh$ = glLineStipple$MH();
        try {
            mh$.invokeExact(factor, pattern);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLineWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$1318.glLineWidth$MH,"glLineWidth");
    }
    public static void glLineWidth ( float width) {
        var mh$ = glLineWidth$MH();
        try {
            mh$.invokeExact(width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glListBase$MH() {
        return RuntimeHelper.requireNonNull(constants$1318.glListBase$MH,"glListBase");
    }
    public static void glListBase ( int base) {
        var mh$ = glListBase$MH();
        try {
            mh$.invokeExact(base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadIdentity$MH() {
        return RuntimeHelper.requireNonNull(constants$1318.glLoadIdentity$MH,"glLoadIdentity");
    }
    public static void glLoadIdentity () {
        var mh$ = glLoadIdentity$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadMatrixd$MH() {
        return RuntimeHelper.requireNonNull(constants$1318.glLoadMatrixd$MH,"glLoadMatrixd");
    }
    public static void glLoadMatrixd ( Addressable m) {
        var mh$ = glLoadMatrixd$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadMatrixf$MH() {
        return RuntimeHelper.requireNonNull(constants$1318.glLoadMatrixf$MH,"glLoadMatrixf");
    }
    public static void glLoadMatrixf ( Addressable m) {
        var mh$ = glLoadMatrixf$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadName$MH() {
        return RuntimeHelper.requireNonNull(constants$1319.glLoadName$MH,"glLoadName");
    }
    public static void glLoadName ( int name) {
        var mh$ = glLoadName$MH();
        try {
            mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLogicOp$MH() {
        return RuntimeHelper.requireNonNull(constants$1319.glLogicOp$MH,"glLogicOp");
    }
    public static void glLogicOp ( int opcode) {
        var mh$ = glLogicOp$MH();
        try {
            mh$.invokeExact(opcode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMap1d$MH() {
        return RuntimeHelper.requireNonNull(constants$1319.glMap1d$MH,"glMap1d");
    }
    public static void glMap1d ( int target,  double u1,  double u2,  int stride,  int order,  Addressable points) {
        var mh$ = glMap1d$MH();
        try {
            mh$.invokeExact(target, u1, u2, stride, order, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMap1f$MH() {
        return RuntimeHelper.requireNonNull(constants$1319.glMap1f$MH,"glMap1f");
    }
    public static void glMap1f ( int target,  float u1,  float u2,  int stride,  int order,  Addressable points) {
        var mh$ = glMap1f$MH();
        try {
            mh$.invokeExact(target, u1, u2, stride, order, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMap2d$MH() {
        return RuntimeHelper.requireNonNull(constants$1319.glMap2d$MH,"glMap2d");
    }
    public static void glMap2d ( int target,  double u1,  double u2,  int ustride,  int uorder,  double v1,  double v2,  int vstride,  int vorder,  Addressable points) {
        var mh$ = glMap2d$MH();
        try {
            mh$.invokeExact(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMap2f$MH() {
        return RuntimeHelper.requireNonNull(constants$1319.glMap2f$MH,"glMap2f");
    }
    public static void glMap2f ( int target,  float u1,  float u2,  int ustride,  int uorder,  float v1,  float v2,  int vstride,  int vorder,  Addressable points) {
        var mh$ = glMap2f$MH();
        try {
            mh$.invokeExact(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapGrid1d$MH() {
        return RuntimeHelper.requireNonNull(constants$1320.glMapGrid1d$MH,"glMapGrid1d");
    }
    public static void glMapGrid1d ( int un,  double u1,  double u2) {
        var mh$ = glMapGrid1d$MH();
        try {
            mh$.invokeExact(un, u1, u2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapGrid1f$MH() {
        return RuntimeHelper.requireNonNull(constants$1320.glMapGrid1f$MH,"glMapGrid1f");
    }
    public static void glMapGrid1f ( int un,  float u1,  float u2) {
        var mh$ = glMapGrid1f$MH();
        try {
            mh$.invokeExact(un, u1, u2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapGrid2d$MH() {
        return RuntimeHelper.requireNonNull(constants$1320.glMapGrid2d$MH,"glMapGrid2d");
    }
    public static void glMapGrid2d ( int un,  double u1,  double u2,  int vn,  double v1,  double v2) {
        var mh$ = glMapGrid2d$MH();
        try {
            mh$.invokeExact(un, u1, u2, vn, v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapGrid2f$MH() {
        return RuntimeHelper.requireNonNull(constants$1320.glMapGrid2f$MH,"glMapGrid2f");
    }
    public static void glMapGrid2f ( int un,  float u1,  float u2,  int vn,  float v1,  float v2) {
        var mh$ = glMapGrid2f$MH();
        try {
            mh$.invokeExact(un, u1, u2, vn, v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMaterialf$MH() {
        return RuntimeHelper.requireNonNull(constants$1320.glMaterialf$MH,"glMaterialf");
    }
    public static void glMaterialf ( int face,  int pname,  float param) {
        var mh$ = glMaterialf$MH();
        try {
            mh$.invokeExact(face, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMaterialfv$MH() {
        return RuntimeHelper.requireNonNull(constants$1320.glMaterialfv$MH,"glMaterialfv");
    }
    public static void glMaterialfv ( int face,  int pname,  Addressable params) {
        var mh$ = glMaterialfv$MH();
        try {
            mh$.invokeExact(face, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMateriali$MH() {
        return RuntimeHelper.requireNonNull(constants$1321.glMateriali$MH,"glMateriali");
    }
    public static void glMateriali ( int face,  int pname,  int param) {
        var mh$ = glMateriali$MH();
        try {
            mh$.invokeExact(face, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMaterialiv$MH() {
        return RuntimeHelper.requireNonNull(constants$1321.glMaterialiv$MH,"glMaterialiv");
    }
    public static void glMaterialiv ( int face,  int pname,  Addressable params) {
        var mh$ = glMaterialiv$MH();
        try {
            mh$.invokeExact(face, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMatrixMode$MH() {
        return RuntimeHelper.requireNonNull(constants$1321.glMatrixMode$MH,"glMatrixMode");
    }
    public static void glMatrixMode ( int mode) {
        var mh$ = glMatrixMode$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultMatrixd$MH() {
        return RuntimeHelper.requireNonNull(constants$1321.glMultMatrixd$MH,"glMultMatrixd");
    }
    public static void glMultMatrixd ( Addressable m) {
        var mh$ = glMultMatrixd$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultMatrixf$MH() {
        return RuntimeHelper.requireNonNull(constants$1321.glMultMatrixf$MH,"glMultMatrixf");
    }
    public static void glMultMatrixf ( Addressable m) {
        var mh$ = glMultMatrixf$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNewList$MH() {
        return RuntimeHelper.requireNonNull(constants$1321.glNewList$MH,"glNewList");
    }
    public static void glNewList ( int list,  int mode) {
        var mh$ = glNewList$MH();
        try {
            mh$.invokeExact(list, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3b$MH() {
        return RuntimeHelper.requireNonNull(constants$1322.glNormal3b$MH,"glNormal3b");
    }
    public static void glNormal3b ( byte nx,  byte ny,  byte nz) {
        var mh$ = glNormal3b$MH();
        try {
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3bv$MH() {
        return RuntimeHelper.requireNonNull(constants$1322.glNormal3bv$MH,"glNormal3bv");
    }
    public static void glNormal3bv ( Addressable v) {
        var mh$ = glNormal3bv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3d$MH() {
        return RuntimeHelper.requireNonNull(constants$1322.glNormal3d$MH,"glNormal3d");
    }
    public static void glNormal3d ( double nx,  double ny,  double nz) {
        var mh$ = glNormal3d$MH();
        try {
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$1322.glNormal3dv$MH,"glNormal3dv");
    }
    public static void glNormal3dv ( Addressable v) {
        var mh$ = glNormal3dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3f$MH() {
        return RuntimeHelper.requireNonNull(constants$1322.glNormal3f$MH,"glNormal3f");
    }
    public static void glNormal3f ( float nx,  float ny,  float nz) {
        var mh$ = glNormal3f$MH();
        try {
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$1322.glNormal3fv$MH,"glNormal3fv");
    }
    public static void glNormal3fv ( Addressable v) {
        var mh$ = glNormal3fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3i$MH() {
        return RuntimeHelper.requireNonNull(constants$1323.glNormal3i$MH,"glNormal3i");
    }
    public static void glNormal3i ( int nx,  int ny,  int nz) {
        var mh$ = glNormal3i$MH();
        try {
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$1323.glNormal3iv$MH,"glNormal3iv");
    }
    public static void glNormal3iv ( Addressable v) {
        var mh$ = glNormal3iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3s$MH() {
        return RuntimeHelper.requireNonNull(constants$1323.glNormal3s$MH,"glNormal3s");
    }
    public static void glNormal3s ( short nx,  short ny,  short nz) {
        var mh$ = glNormal3s$MH();
        try {
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$1323.glNormal3sv$MH,"glNormal3sv");
    }
    public static void glNormal3sv ( Addressable v) {
        var mh$ = glNormal3sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormalPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$1323.glNormalPointer$MH,"glNormalPointer");
    }
    public static void glNormalPointer ( int type,  int stride,  Addressable pointer) {
        var mh$ = glNormalPointer$MH();
        try {
            mh$.invokeExact(type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glOrtho$MH() {
        return RuntimeHelper.requireNonNull(constants$1323.glOrtho$MH,"glOrtho");
    }
    public static void glOrtho ( double left,  double right,  double bottom,  double top,  double zNear,  double zFar) {
        var mh$ = glOrtho$MH();
        try {
            mh$.invokeExact(left, right, bottom, top, zNear, zFar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPassThrough$MH() {
        return RuntimeHelper.requireNonNull(constants$1324.glPassThrough$MH,"glPassThrough");
    }
    public static void glPassThrough ( float token) {
        var mh$ = glPassThrough$MH();
        try {
            mh$.invokeExact(token);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelMapfv$MH() {
        return RuntimeHelper.requireNonNull(constants$1324.glPixelMapfv$MH,"glPixelMapfv");
    }
    public static void glPixelMapfv ( int map,  int mapsize,  Addressable values) {
        var mh$ = glPixelMapfv$MH();
        try {
            mh$.invokeExact(map, mapsize, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelMapuiv$MH() {
        return RuntimeHelper.requireNonNull(constants$1324.glPixelMapuiv$MH,"glPixelMapuiv");
    }
    public static void glPixelMapuiv ( int map,  int mapsize,  Addressable values) {
        var mh$ = glPixelMapuiv$MH();
        try {
            mh$.invokeExact(map, mapsize, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelMapusv$MH() {
        return RuntimeHelper.requireNonNull(constants$1324.glPixelMapusv$MH,"glPixelMapusv");
    }
    public static void glPixelMapusv ( int map,  int mapsize,  Addressable values) {
        var mh$ = glPixelMapusv$MH();
        try {
            mh$.invokeExact(map, mapsize, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelStoref$MH() {
        return RuntimeHelper.requireNonNull(constants$1324.glPixelStoref$MH,"glPixelStoref");
    }
    public static void glPixelStoref ( int pname,  float param) {
        var mh$ = glPixelStoref$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelStorei$MH() {
        return RuntimeHelper.requireNonNull(constants$1324.glPixelStorei$MH,"glPixelStorei");
    }
    public static void glPixelStorei ( int pname,  int param) {
        var mh$ = glPixelStorei$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelTransferf$MH() {
        return RuntimeHelper.requireNonNull(constants$1325.glPixelTransferf$MH,"glPixelTransferf");
    }
    public static void glPixelTransferf ( int pname,  float param) {
        var mh$ = glPixelTransferf$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelTransferi$MH() {
        return RuntimeHelper.requireNonNull(constants$1325.glPixelTransferi$MH,"glPixelTransferi");
    }
    public static void glPixelTransferi ( int pname,  int param) {
        var mh$ = glPixelTransferi$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelZoom$MH() {
        return RuntimeHelper.requireNonNull(constants$1325.glPixelZoom$MH,"glPixelZoom");
    }
    public static void glPixelZoom ( float xfactor,  float yfactor) {
        var mh$ = glPixelZoom$MH();
        try {
            mh$.invokeExact(xfactor, yfactor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPointSize$MH() {
        return RuntimeHelper.requireNonNull(constants$1325.glPointSize$MH,"glPointSize");
    }
    public static void glPointSize ( float size) {
        var mh$ = glPointSize$MH();
        try {
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPolygonMode$MH() {
        return RuntimeHelper.requireNonNull(constants$1325.glPolygonMode$MH,"glPolygonMode");
    }
    public static void glPolygonMode ( int face,  int mode) {
        var mh$ = glPolygonMode$MH();
        try {
            mh$.invokeExact(face, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPolygonOffset$MH() {
        return RuntimeHelper.requireNonNull(constants$1325.glPolygonOffset$MH,"glPolygonOffset");
    }
    public static void glPolygonOffset ( float factor,  float units) {
        var mh$ = glPolygonOffset$MH();
        try {
            mh$.invokeExact(factor, units);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPolygonStipple$MH() {
        return RuntimeHelper.requireNonNull(constants$1326.glPolygonStipple$MH,"glPolygonStipple");
    }
    public static void glPolygonStipple ( Addressable mask) {
        var mh$ = glPolygonStipple$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPopAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$1326.glPopAttrib$MH,"glPopAttrib");
    }
    public static void glPopAttrib () {
        var mh$ = glPopAttrib$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPopClientAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$1326.glPopClientAttrib$MH,"glPopClientAttrib");
    }
    public static void glPopClientAttrib () {
        var mh$ = glPopClientAttrib$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPopMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$1326.glPopMatrix$MH,"glPopMatrix");
    }
    public static void glPopMatrix () {
        var mh$ = glPopMatrix$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPopName$MH() {
        return RuntimeHelper.requireNonNull(constants$1326.glPopName$MH,"glPopName");
    }
    public static void glPopName () {
        var mh$ = glPopName$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPrioritizeTextures$MH() {
        return RuntimeHelper.requireNonNull(constants$1326.glPrioritizeTextures$MH,"glPrioritizeTextures");
    }
    public static void glPrioritizeTextures ( int n,  Addressable textures,  Addressable priorities) {
        var mh$ = glPrioritizeTextures$MH();
        try {
            mh$.invokeExact(n, textures, priorities);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPushAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$1327.glPushAttrib$MH,"glPushAttrib");
    }
    public static void glPushAttrib ( int mask) {
        var mh$ = glPushAttrib$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPushClientAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$1327.glPushClientAttrib$MH,"glPushClientAttrib");
    }
    public static void glPushClientAttrib ( int mask) {
        var mh$ = glPushClientAttrib$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPushMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$1327.glPushMatrix$MH,"glPushMatrix");
    }
    public static void glPushMatrix () {
        var mh$ = glPushMatrix$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPushName$MH() {
        return RuntimeHelper.requireNonNull(constants$1327.glPushName$MH,"glPushName");
    }
    public static void glPushName ( int name) {
        var mh$ = glPushName$MH();
        try {
            mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2d$MH() {
        return RuntimeHelper.requireNonNull(constants$1327.glRasterPos2d$MH,"glRasterPos2d");
    }
    public static void glRasterPos2d ( double x,  double y) {
        var mh$ = glRasterPos2d$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$1327.glRasterPos2dv$MH,"glRasterPos2dv");
    }
    public static void glRasterPos2dv ( Addressable v) {
        var mh$ = glRasterPos2dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2f$MH() {
        return RuntimeHelper.requireNonNull(constants$1328.glRasterPos2f$MH,"glRasterPos2f");
    }
    public static void glRasterPos2f ( float x,  float y) {
        var mh$ = glRasterPos2f$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$1328.glRasterPos2fv$MH,"glRasterPos2fv");
    }
    public static void glRasterPos2fv ( Addressable v) {
        var mh$ = glRasterPos2fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2i$MH() {
        return RuntimeHelper.requireNonNull(constants$1328.glRasterPos2i$MH,"glRasterPos2i");
    }
    public static void glRasterPos2i ( int x,  int y) {
        var mh$ = glRasterPos2i$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2iv$MH() {
        return RuntimeHelper.requireNonNull(constants$1328.glRasterPos2iv$MH,"glRasterPos2iv");
    }
    public static void glRasterPos2iv ( Addressable v) {
        var mh$ = glRasterPos2iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2s$MH() {
        return RuntimeHelper.requireNonNull(constants$1328.glRasterPos2s$MH,"glRasterPos2s");
    }
    public static void glRasterPos2s ( short x,  short y) {
        var mh$ = glRasterPos2s$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2sv$MH() {
        return RuntimeHelper.requireNonNull(constants$1328.glRasterPos2sv$MH,"glRasterPos2sv");
    }
    public static void glRasterPos2sv ( Addressable v) {
        var mh$ = glRasterPos2sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3d$MH() {
        return RuntimeHelper.requireNonNull(constants$1329.glRasterPos3d$MH,"glRasterPos3d");
    }
    public static void glRasterPos3d ( double x,  double y,  double z) {
        var mh$ = glRasterPos3d$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$1329.glRasterPos3dv$MH,"glRasterPos3dv");
    }
    public static void glRasterPos3dv ( Addressable v) {
        var mh$ = glRasterPos3dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3f$MH() {
        return RuntimeHelper.requireNonNull(constants$1329.glRasterPos3f$MH,"glRasterPos3f");
    }
    public static void glRasterPos3f ( float x,  float y,  float z) {
        var mh$ = glRasterPos3f$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$1329.glRasterPos3fv$MH,"glRasterPos3fv");
    }
    public static void glRasterPos3fv ( Addressable v) {
        var mh$ = glRasterPos3fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3i$MH() {
        return RuntimeHelper.requireNonNull(constants$1329.glRasterPos3i$MH,"glRasterPos3i");
    }
    public static void glRasterPos3i ( int x,  int y,  int z) {
        var mh$ = glRasterPos3i$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$1329.glRasterPos3iv$MH,"glRasterPos3iv");
    }
    public static void glRasterPos3iv ( Addressable v) {
        var mh$ = glRasterPos3iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3s$MH() {
        return RuntimeHelper.requireNonNull(constants$1330.glRasterPos3s$MH,"glRasterPos3s");
    }
    public static void glRasterPos3s ( short x,  short y,  short z) {
        var mh$ = glRasterPos3s$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$1330.glRasterPos3sv$MH,"glRasterPos3sv");
    }
    public static void glRasterPos3sv ( Addressable v) {
        var mh$ = glRasterPos3sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4d$MH() {
        return RuntimeHelper.requireNonNull(constants$1330.glRasterPos4d$MH,"glRasterPos4d");
    }
    public static void glRasterPos4d ( double x,  double y,  double z,  double w) {
        var mh$ = glRasterPos4d$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$1330.glRasterPos4dv$MH,"glRasterPos4dv");
    }
    public static void glRasterPos4dv ( Addressable v) {
        var mh$ = glRasterPos4dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4f$MH() {
        return RuntimeHelper.requireNonNull(constants$1330.glRasterPos4f$MH,"glRasterPos4f");
    }
    public static void glRasterPos4f ( float x,  float y,  float z,  float w) {
        var mh$ = glRasterPos4f$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$1330.glRasterPos4fv$MH,"glRasterPos4fv");
    }
    public static void glRasterPos4fv ( Addressable v) {
        var mh$ = glRasterPos4fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4i$MH() {
        return RuntimeHelper.requireNonNull(constants$1331.glRasterPos4i$MH,"glRasterPos4i");
    }
    public static void glRasterPos4i ( int x,  int y,  int z,  int w) {
        var mh$ = glRasterPos4i$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$1331.glRasterPos4iv$MH,"glRasterPos4iv");
    }
    public static void glRasterPos4iv ( Addressable v) {
        var mh$ = glRasterPos4iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4s$MH() {
        return RuntimeHelper.requireNonNull(constants$1331.glRasterPos4s$MH,"glRasterPos4s");
    }
    public static void glRasterPos4s ( short x,  short y,  short z,  short w) {
        var mh$ = glRasterPos4s$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4sv$MH() {
        return RuntimeHelper.requireNonNull(constants$1331.glRasterPos4sv$MH,"glRasterPos4sv");
    }
    public static void glRasterPos4sv ( Addressable v) {
        var mh$ = glRasterPos4sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReadBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$1331.glReadBuffer$MH,"glReadBuffer");
    }
    public static void glReadBuffer ( int mode) {
        var mh$ = glReadBuffer$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReadPixels$MH() {
        return RuntimeHelper.requireNonNull(constants$1331.glReadPixels$MH,"glReadPixels");
    }
    public static void glReadPixels ( int x,  int y,  int width,  int height,  int format,  int type,  Addressable pixels) {
        var mh$ = glReadPixels$MH();
        try {
            mh$.invokeExact(x, y, width, height, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectd$MH() {
        return RuntimeHelper.requireNonNull(constants$1332.glRectd$MH,"glRectd");
    }
    public static void glRectd ( double x1,  double y1,  double x2,  double y2) {
        var mh$ = glRectd$MH();
        try {
            mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectdv$MH() {
        return RuntimeHelper.requireNonNull(constants$1332.glRectdv$MH,"glRectdv");
    }
    public static void glRectdv ( Addressable v1,  Addressable v2) {
        var mh$ = glRectdv$MH();
        try {
            mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectf$MH() {
        return RuntimeHelper.requireNonNull(constants$1332.glRectf$MH,"glRectf");
    }
    public static void glRectf ( float x1,  float y1,  float x2,  float y2) {
        var mh$ = glRectf$MH();
        try {
            mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectfv$MH() {
        return RuntimeHelper.requireNonNull(constants$1332.glRectfv$MH,"glRectfv");
    }
    public static void glRectfv ( Addressable v1,  Addressable v2) {
        var mh$ = glRectfv$MH();
        try {
            mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRecti$MH() {
        return RuntimeHelper.requireNonNull(constants$1332.glRecti$MH,"glRecti");
    }
    public static void glRecti ( int x1,  int y1,  int x2,  int y2) {
        var mh$ = glRecti$MH();
        try {
            mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectiv$MH() {
        return RuntimeHelper.requireNonNull(constants$1332.glRectiv$MH,"glRectiv");
    }
    public static void glRectiv ( Addressable v1,  Addressable v2) {
        var mh$ = glRectiv$MH();
        try {
            mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRects$MH() {
        return RuntimeHelper.requireNonNull(constants$1333.glRects$MH,"glRects");
    }
    public static void glRects ( short x1,  short y1,  short x2,  short y2) {
        var mh$ = glRects$MH();
        try {
            mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectsv$MH() {
        return RuntimeHelper.requireNonNull(constants$1333.glRectsv$MH,"glRectsv");
    }
    public static void glRectsv ( Addressable v1,  Addressable v2) {
        var mh$ = glRectsv$MH();
        try {
            mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRenderMode$MH() {
        return RuntimeHelper.requireNonNull(constants$1333.glRenderMode$MH,"glRenderMode");
    }
    public static int glRenderMode ( int mode) {
        var mh$ = glRenderMode$MH();
        try {
            return (int)mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRotated$MH() {
        return RuntimeHelper.requireNonNull(constants$1333.glRotated$MH,"glRotated");
    }
    public static void glRotated ( double angle,  double x,  double y,  double z) {
        var mh$ = glRotated$MH();
        try {
            mh$.invokeExact(angle, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRotatef$MH() {
        return RuntimeHelper.requireNonNull(constants$1333.glRotatef$MH,"glRotatef");
    }
    public static void glRotatef ( float angle,  float x,  float y,  float z) {
        var mh$ = glRotatef$MH();
        try {
            mh$.invokeExact(angle, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glScaled$MH() {
        return RuntimeHelper.requireNonNull(constants$1333.glScaled$MH,"glScaled");
    }
    public static void glScaled ( double x,  double y,  double z) {
        var mh$ = glScaled$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glScalef$MH() {
        return RuntimeHelper.requireNonNull(constants$1334.glScalef$MH,"glScalef");
    }
    public static void glScalef ( float x,  float y,  float z) {
        var mh$ = glScalef$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glScissor$MH() {
        return RuntimeHelper.requireNonNull(constants$1334.glScissor$MH,"glScissor");
    }
    public static void glScissor ( int x,  int y,  int width,  int height) {
        var mh$ = glScissor$MH();
        try {
            mh$.invokeExact(x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSelectBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$1334.glSelectBuffer$MH,"glSelectBuffer");
    }
    public static void glSelectBuffer ( int size,  Addressable buffer) {
        var mh$ = glSelectBuffer$MH();
        try {
            mh$.invokeExact(size, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glShadeModel$MH() {
        return RuntimeHelper.requireNonNull(constants$1334.glShadeModel$MH,"glShadeModel");
    }
    public static void glShadeModel ( int mode) {
        var mh$ = glShadeModel$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1334.glStencilFunc$MH,"glStencilFunc");
    }
    public static void glStencilFunc ( int func,  int ref,  int mask) {
        var mh$ = glStencilFunc$MH();
        try {
            mh$.invokeExact(func, ref, mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilMask$MH() {
        return RuntimeHelper.requireNonNull(constants$1334.glStencilMask$MH,"glStencilMask");
    }
    public static void glStencilMask ( int mask) {
        var mh$ = glStencilMask$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilOp$MH() {
        return RuntimeHelper.requireNonNull(constants$1335.glStencilOp$MH,"glStencilOp");
    }
    public static void glStencilOp ( int fail,  int zfail,  int zpass) {
        var mh$ = glStencilOp$MH();
        try {
            mh$.invokeExact(fail, zfail, zpass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1d$MH() {
        return RuntimeHelper.requireNonNull(constants$1335.glTexCoord1d$MH,"glTexCoord1d");
    }
    public static void glTexCoord1d ( double s) {
        var mh$ = glTexCoord1d$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1dv$MH() {
        return RuntimeHelper.requireNonNull(constants$1335.glTexCoord1dv$MH,"glTexCoord1dv");
    }
    public static void glTexCoord1dv ( Addressable v) {
        var mh$ = glTexCoord1dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1f$MH() {
        return RuntimeHelper.requireNonNull(constants$1335.glTexCoord1f$MH,"glTexCoord1f");
    }
    public static void glTexCoord1f ( float s) {
        var mh$ = glTexCoord1f$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1fv$MH() {
        return RuntimeHelper.requireNonNull(constants$1335.glTexCoord1fv$MH,"glTexCoord1fv");
    }
    public static void glTexCoord1fv ( Addressable v) {
        var mh$ = glTexCoord1fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1i$MH() {
        return RuntimeHelper.requireNonNull(constants$1335.glTexCoord1i$MH,"glTexCoord1i");
    }
    public static void glTexCoord1i ( int s) {
        var mh$ = glTexCoord1i$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1iv$MH() {
        return RuntimeHelper.requireNonNull(constants$1336.glTexCoord1iv$MH,"glTexCoord1iv");
    }
    public static void glTexCoord1iv ( Addressable v) {
        var mh$ = glTexCoord1iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1s$MH() {
        return RuntimeHelper.requireNonNull(constants$1336.glTexCoord1s$MH,"glTexCoord1s");
    }
    public static void glTexCoord1s ( short s) {
        var mh$ = glTexCoord1s$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1sv$MH() {
        return RuntimeHelper.requireNonNull(constants$1336.glTexCoord1sv$MH,"glTexCoord1sv");
    }
    public static void glTexCoord1sv ( Addressable v) {
        var mh$ = glTexCoord1sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2d$MH() {
        return RuntimeHelper.requireNonNull(constants$1336.glTexCoord2d$MH,"glTexCoord2d");
    }
    public static void glTexCoord2d ( double s,  double t) {
        var mh$ = glTexCoord2d$MH();
        try {
            mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$1336.glTexCoord2dv$MH,"glTexCoord2dv");
    }
    public static void glTexCoord2dv ( Addressable v) {
        var mh$ = glTexCoord2dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2f$MH() {
        return RuntimeHelper.requireNonNull(constants$1336.glTexCoord2f$MH,"glTexCoord2f");
    }
    public static void glTexCoord2f ( float s,  float t) {
        var mh$ = glTexCoord2f$MH();
        try {
            mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$1337.glTexCoord2fv$MH,"glTexCoord2fv");
    }
    public static void glTexCoord2fv ( Addressable v) {
        var mh$ = glTexCoord2fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2i$MH() {
        return RuntimeHelper.requireNonNull(constants$1337.glTexCoord2i$MH,"glTexCoord2i");
    }
    public static void glTexCoord2i ( int s,  int t) {
        var mh$ = glTexCoord2i$MH();
        try {
            mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2iv$MH() {
        return RuntimeHelper.requireNonNull(constants$1337.glTexCoord2iv$MH,"glTexCoord2iv");
    }
    public static void glTexCoord2iv ( Addressable v) {
        var mh$ = glTexCoord2iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2s$MH() {
        return RuntimeHelper.requireNonNull(constants$1337.glTexCoord2s$MH,"glTexCoord2s");
    }
    public static void glTexCoord2s ( short s,  short t) {
        var mh$ = glTexCoord2s$MH();
        try {
            mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2sv$MH() {
        return RuntimeHelper.requireNonNull(constants$1337.glTexCoord2sv$MH,"glTexCoord2sv");
    }
    public static void glTexCoord2sv ( Addressable v) {
        var mh$ = glTexCoord2sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3d$MH() {
        return RuntimeHelper.requireNonNull(constants$1337.glTexCoord3d$MH,"glTexCoord3d");
    }
    public static void glTexCoord3d ( double s,  double t,  double r) {
        var mh$ = glTexCoord3d$MH();
        try {
            mh$.invokeExact(s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$1338.glTexCoord3dv$MH,"glTexCoord3dv");
    }
    public static void glTexCoord3dv ( Addressable v) {
        var mh$ = glTexCoord3dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3f$MH() {
        return RuntimeHelper.requireNonNull(constants$1338.glTexCoord3f$MH,"glTexCoord3f");
    }
    public static void glTexCoord3f ( float s,  float t,  float r) {
        var mh$ = glTexCoord3f$MH();
        try {
            mh$.invokeExact(s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$1338.glTexCoord3fv$MH,"glTexCoord3fv");
    }
    public static void glTexCoord3fv ( Addressable v) {
        var mh$ = glTexCoord3fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3i$MH() {
        return RuntimeHelper.requireNonNull(constants$1338.glTexCoord3i$MH,"glTexCoord3i");
    }
    public static void glTexCoord3i ( int s,  int t,  int r) {
        var mh$ = glTexCoord3i$MH();
        try {
            mh$.invokeExact(s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$1338.glTexCoord3iv$MH,"glTexCoord3iv");
    }
    public static void glTexCoord3iv ( Addressable v) {
        var mh$ = glTexCoord3iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3s$MH() {
        return RuntimeHelper.requireNonNull(constants$1338.glTexCoord3s$MH,"glTexCoord3s");
    }
    public static void glTexCoord3s ( short s,  short t,  short r) {
        var mh$ = glTexCoord3s$MH();
        try {
            mh$.invokeExact(s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$1339.glTexCoord3sv$MH,"glTexCoord3sv");
    }
    public static void glTexCoord3sv ( Addressable v) {
        var mh$ = glTexCoord3sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4d$MH() {
        return RuntimeHelper.requireNonNull(constants$1339.glTexCoord4d$MH,"glTexCoord4d");
    }
    public static void glTexCoord4d ( double s,  double t,  double r,  double q) {
        var mh$ = glTexCoord4d$MH();
        try {
            mh$.invokeExact(s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$1339.glTexCoord4dv$MH,"glTexCoord4dv");
    }
    public static void glTexCoord4dv ( Addressable v) {
        var mh$ = glTexCoord4dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4f$MH() {
        return RuntimeHelper.requireNonNull(constants$1339.glTexCoord4f$MH,"glTexCoord4f");
    }
    public static void glTexCoord4f ( float s,  float t,  float r,  float q) {
        var mh$ = glTexCoord4f$MH();
        try {
            mh$.invokeExact(s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$1339.glTexCoord4fv$MH,"glTexCoord4fv");
    }
    public static void glTexCoord4fv ( Addressable v) {
        var mh$ = glTexCoord4fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4i$MH() {
        return RuntimeHelper.requireNonNull(constants$1339.glTexCoord4i$MH,"glTexCoord4i");
    }
    public static void glTexCoord4i ( int s,  int t,  int r,  int q) {
        var mh$ = glTexCoord4i$MH();
        try {
            mh$.invokeExact(s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$1340.glTexCoord4iv$MH,"glTexCoord4iv");
    }
    public static void glTexCoord4iv ( Addressable v) {
        var mh$ = glTexCoord4iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4s$MH() {
        return RuntimeHelper.requireNonNull(constants$1340.glTexCoord4s$MH,"glTexCoord4s");
    }
    public static void glTexCoord4s ( short s,  short t,  short r,  short q) {
        var mh$ = glTexCoord4s$MH();
        try {
            mh$.invokeExact(s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4sv$MH() {
        return RuntimeHelper.requireNonNull(constants$1340.glTexCoord4sv$MH,"glTexCoord4sv");
    }
    public static void glTexCoord4sv ( Addressable v) {
        var mh$ = glTexCoord4sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoordPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$1340.glTexCoordPointer$MH,"glTexCoordPointer");
    }
    public static void glTexCoordPointer ( int size,  int type,  int stride,  Addressable pointer) {
        var mh$ = glTexCoordPointer$MH();
        try {
            mh$.invokeExact(size, type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexEnvf$MH() {
        return RuntimeHelper.requireNonNull(constants$1340.glTexEnvf$MH,"glTexEnvf");
    }
    public static void glTexEnvf ( int target,  int pname,  float param) {
        var mh$ = glTexEnvf$MH();
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexEnvfv$MH() {
        return RuntimeHelper.requireNonNull(constants$1340.glTexEnvfv$MH,"glTexEnvfv");
    }
    public static void glTexEnvfv ( int target,  int pname,  Addressable params) {
        var mh$ = glTexEnvfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexEnvi$MH() {
        return RuntimeHelper.requireNonNull(constants$1341.glTexEnvi$MH,"glTexEnvi");
    }
    public static void glTexEnvi ( int target,  int pname,  int param) {
        var mh$ = glTexEnvi$MH();
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexEnviv$MH() {
        return RuntimeHelper.requireNonNull(constants$1341.glTexEnviv$MH,"glTexEnviv");
    }
    public static void glTexEnviv ( int target,  int pname,  Addressable params) {
        var mh$ = glTexEnviv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGend$MH() {
        return RuntimeHelper.requireNonNull(constants$1341.glTexGend$MH,"glTexGend");
    }
    public static void glTexGend ( int coord,  int pname,  double param) {
        var mh$ = glTexGend$MH();
        try {
            mh$.invokeExact(coord, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGendv$MH() {
        return RuntimeHelper.requireNonNull(constants$1341.glTexGendv$MH,"glTexGendv");
    }
    public static void glTexGendv ( int coord,  int pname,  Addressable params) {
        var mh$ = glTexGendv$MH();
        try {
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGenf$MH() {
        return RuntimeHelper.requireNonNull(constants$1341.glTexGenf$MH,"glTexGenf");
    }
    public static void glTexGenf ( int coord,  int pname,  float param) {
        var mh$ = glTexGenf$MH();
        try {
            mh$.invokeExact(coord, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGenfv$MH() {
        return RuntimeHelper.requireNonNull(constants$1341.glTexGenfv$MH,"glTexGenfv");
    }
    public static void glTexGenfv ( int coord,  int pname,  Addressable params) {
        var mh$ = glTexGenfv$MH();
        try {
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGeni$MH() {
        return RuntimeHelper.requireNonNull(constants$1342.glTexGeni$MH,"glTexGeni");
    }
    public static void glTexGeni ( int coord,  int pname,  int param) {
        var mh$ = glTexGeni$MH();
        try {
            mh$.invokeExact(coord, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGeniv$MH() {
        return RuntimeHelper.requireNonNull(constants$1342.glTexGeniv$MH,"glTexGeniv");
    }
    public static void glTexGeniv ( int coord,  int pname,  Addressable params) {
        var mh$ = glTexGeniv$MH();
        try {
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$1342.glTexImage1D$MH,"glTexImage1D");
    }
    public static void glTexImage1D ( int target,  int level,  int internalformat,  int width,  int border,  int format,  int type,  Addressable pixels) {
        var mh$ = glTexImage1D$MH();
        try {
            mh$.invokeExact(target, level, internalformat, width, border, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$1342.glTexImage2D$MH,"glTexImage2D");
    }
    public static void glTexImage2D ( int target,  int level,  int internalformat,  int width,  int height,  int border,  int format,  int type,  Addressable pixels) {
        var mh$ = glTexImage2D$MH();
        try {
            mh$.invokeExact(target, level, internalformat, width, height, border, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameterf$MH() {
        return RuntimeHelper.requireNonNull(constants$1342.glTexParameterf$MH,"glTexParameterf");
    }
    public static void glTexParameterf ( int target,  int pname,  float param) {
        var mh$ = glTexParameterf$MH();
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$1342.glTexParameterfv$MH,"glTexParameterfv");
    }
    public static void glTexParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = glTexParameterfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameteri$MH() {
        return RuntimeHelper.requireNonNull(constants$1343.glTexParameteri$MH,"glTexParameteri");
    }
    public static void glTexParameteri ( int target,  int pname,  int param) {
        var mh$ = glTexParameteri$MH();
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$1343.glTexParameteriv$MH,"glTexParameteriv");
    }
    public static void glTexParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = glTexParameteriv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexSubImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$1343.glTexSubImage1D$MH,"glTexSubImage1D");
    }
    public static void glTexSubImage1D ( int target,  int level,  int xoffset,  int width,  int format,  int type,  Addressable pixels) {
        var mh$ = glTexSubImage1D$MH();
        try {
            mh$.invokeExact(target, level, xoffset, width, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexSubImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$1343.glTexSubImage2D$MH,"glTexSubImage2D");
    }
    public static void glTexSubImage2D ( int target,  int level,  int xoffset,  int yoffset,  int width,  int height,  int format,  int type,  Addressable pixels) {
        var mh$ = glTexSubImage2D$MH();
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, width, height, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTranslated$MH() {
        return RuntimeHelper.requireNonNull(constants$1343.glTranslated$MH,"glTranslated");
    }
    public static void glTranslated ( double x,  double y,  double z) {
        var mh$ = glTranslated$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTranslatef$MH() {
        return RuntimeHelper.requireNonNull(constants$1343.glTranslatef$MH,"glTranslatef");
    }
    public static void glTranslatef ( float x,  float y,  float z) {
        var mh$ = glTranslatef$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2d$MH() {
        return RuntimeHelper.requireNonNull(constants$1344.glVertex2d$MH,"glVertex2d");
    }
    public static void glVertex2d ( double x,  double y) {
        var mh$ = glVertex2d$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$1344.glVertex2dv$MH,"glVertex2dv");
    }
    public static void glVertex2dv ( Addressable v) {
        var mh$ = glVertex2dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2f$MH() {
        return RuntimeHelper.requireNonNull(constants$1344.glVertex2f$MH,"glVertex2f");
    }
    public static void glVertex2f ( float x,  float y) {
        var mh$ = glVertex2f$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$1344.glVertex2fv$MH,"glVertex2fv");
    }
    public static void glVertex2fv ( Addressable v) {
        var mh$ = glVertex2fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2i$MH() {
        return RuntimeHelper.requireNonNull(constants$1344.glVertex2i$MH,"glVertex2i");
    }
    public static void glVertex2i ( int x,  int y) {
        var mh$ = glVertex2i$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2iv$MH() {
        return RuntimeHelper.requireNonNull(constants$1344.glVertex2iv$MH,"glVertex2iv");
    }
    public static void glVertex2iv ( Addressable v) {
        var mh$ = glVertex2iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2s$MH() {
        return RuntimeHelper.requireNonNull(constants$1345.glVertex2s$MH,"glVertex2s");
    }
    public static void glVertex2s ( short x,  short y) {
        var mh$ = glVertex2s$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2sv$MH() {
        return RuntimeHelper.requireNonNull(constants$1345.glVertex2sv$MH,"glVertex2sv");
    }
    public static void glVertex2sv ( Addressable v) {
        var mh$ = glVertex2sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3d$MH() {
        return RuntimeHelper.requireNonNull(constants$1345.glVertex3d$MH,"glVertex3d");
    }
    public static void glVertex3d ( double x,  double y,  double z) {
        var mh$ = glVertex3d$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$1345.glVertex3dv$MH,"glVertex3dv");
    }
    public static void glVertex3dv ( Addressable v) {
        var mh$ = glVertex3dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3f$MH() {
        return RuntimeHelper.requireNonNull(constants$1345.glVertex3f$MH,"glVertex3f");
    }
    public static void glVertex3f ( float x,  float y,  float z) {
        var mh$ = glVertex3f$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$1345.glVertex3fv$MH,"glVertex3fv");
    }
    public static void glVertex3fv ( Addressable v) {
        var mh$ = glVertex3fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3i$MH() {
        return RuntimeHelper.requireNonNull(constants$1346.glVertex3i$MH,"glVertex3i");
    }
    public static void glVertex3i ( int x,  int y,  int z) {
        var mh$ = glVertex3i$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$1346.glVertex3iv$MH,"glVertex3iv");
    }
    public static void glVertex3iv ( Addressable v) {
        var mh$ = glVertex3iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3s$MH() {
        return RuntimeHelper.requireNonNull(constants$1346.glVertex3s$MH,"glVertex3s");
    }
    public static void glVertex3s ( short x,  short y,  short z) {
        var mh$ = glVertex3s$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$1346.glVertex3sv$MH,"glVertex3sv");
    }
    public static void glVertex3sv ( Addressable v) {
        var mh$ = glVertex3sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4d$MH() {
        return RuntimeHelper.requireNonNull(constants$1346.glVertex4d$MH,"glVertex4d");
    }
    public static void glVertex4d ( double x,  double y,  double z,  double w) {
        var mh$ = glVertex4d$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$1346.glVertex4dv$MH,"glVertex4dv");
    }
    public static void glVertex4dv ( Addressable v) {
        var mh$ = glVertex4dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4f$MH() {
        return RuntimeHelper.requireNonNull(constants$1347.glVertex4f$MH,"glVertex4f");
    }
    public static void glVertex4f ( float x,  float y,  float z,  float w) {
        var mh$ = glVertex4f$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$1347.glVertex4fv$MH,"glVertex4fv");
    }
    public static void glVertex4fv ( Addressable v) {
        var mh$ = glVertex4fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4i$MH() {
        return RuntimeHelper.requireNonNull(constants$1347.glVertex4i$MH,"glVertex4i");
    }
    public static void glVertex4i ( int x,  int y,  int z,  int w) {
        var mh$ = glVertex4i$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$1347.glVertex4iv$MH,"glVertex4iv");
    }
    public static void glVertex4iv ( Addressable v) {
        var mh$ = glVertex4iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4s$MH() {
        return RuntimeHelper.requireNonNull(constants$1347.glVertex4s$MH,"glVertex4s");
    }
    public static void glVertex4s ( short x,  short y,  short z,  short w) {
        var mh$ = glVertex4s$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4sv$MH() {
        return RuntimeHelper.requireNonNull(constants$1347.glVertex4sv$MH,"glVertex4sv");
    }
    public static void glVertex4sv ( Addressable v) {
        var mh$ = glVertex4sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$1348.glVertexPointer$MH,"glVertexPointer");
    }
    public static void glVertexPointer ( int size,  int type,  int stride,  Addressable pointer) {
        var mh$ = glVertexPointer$MH();
        try {
            mh$.invokeExact(size, type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glViewport$MH() {
        return RuntimeHelper.requireNonNull(constants$1348.glViewport$MH,"glViewport");
    }
    public static void glViewport ( int x,  int y,  int width,  int height) {
        var mh$ = glViewport$MH();
        try {
            mh$.invokeExact(x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluErrorString$MH() {
        return RuntimeHelper.requireNonNull(constants$1354.gluErrorString$MH,"gluErrorString");
    }
    public static MemoryAddress gluErrorString ( int errCode) {
        var mh$ = gluErrorString$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(errCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluErrorUnicodeStringEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1354.gluErrorUnicodeStringEXT$MH,"gluErrorUnicodeStringEXT");
    }
    public static MemoryAddress gluErrorUnicodeStringEXT ( int errCode) {
        var mh$ = gluErrorUnicodeStringEXT$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(errCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluGetString$MH() {
        return RuntimeHelper.requireNonNull(constants$1354.gluGetString$MH,"gluGetString");
    }
    public static MemoryAddress gluGetString ( int name) {
        var mh$ = gluGetString$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluOrtho2D$MH() {
        return RuntimeHelper.requireNonNull(constants$1354.gluOrtho2D$MH,"gluOrtho2D");
    }
    public static void gluOrtho2D ( double left,  double right,  double bottom,  double top) {
        var mh$ = gluOrtho2D$MH();
        try {
            mh$.invokeExact(left, right, bottom, top);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluPerspective$MH() {
        return RuntimeHelper.requireNonNull(constants$1354.gluPerspective$MH,"gluPerspective");
    }
    public static void gluPerspective ( double fovy,  double aspect,  double zNear,  double zFar) {
        var mh$ = gluPerspective$MH();
        try {
            mh$.invokeExact(fovy, aspect, zNear, zFar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluPickMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$1354.gluPickMatrix$MH,"gluPickMatrix");
    }
    public static void gluPickMatrix ( double x,  double y,  double width,  double height,  Addressable viewport) {
        var mh$ = gluPickMatrix$MH();
        try {
            mh$.invokeExact(x, y, width, height, viewport);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluLookAt$MH() {
        return RuntimeHelper.requireNonNull(constants$1355.gluLookAt$MH,"gluLookAt");
    }
    public static void gluLookAt ( double eyex,  double eyey,  double eyez,  double centerx,  double centery,  double centerz,  double upx,  double upy,  double upz) {
        var mh$ = gluLookAt$MH();
        try {
            mh$.invokeExact(eyex, eyey, eyez, centerx, centery, centerz, upx, upy, upz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluProject$MH() {
        return RuntimeHelper.requireNonNull(constants$1355.gluProject$MH,"gluProject");
    }
    public static int gluProject ( double objx,  double objy,  double objz,  Addressable modelMatrix,  Addressable projMatrix,  Addressable viewport,  Addressable winx,  Addressable winy,  Addressable winz) {
        var mh$ = gluProject$MH();
        try {
            return (int)mh$.invokeExact(objx, objy, objz, modelMatrix, projMatrix, viewport, winx, winy, winz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluUnProject$MH() {
        return RuntimeHelper.requireNonNull(constants$1355.gluUnProject$MH,"gluUnProject");
    }
    public static int gluUnProject ( double winx,  double winy,  double winz,  Addressable modelMatrix,  Addressable projMatrix,  Addressable viewport,  Addressable objx,  Addressable objy,  Addressable objz) {
        var mh$ = gluUnProject$MH();
        try {
            return (int)mh$.invokeExact(winx, winy, winz, modelMatrix, projMatrix, viewport, objx, objy, objz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluScaleImage$MH() {
        return RuntimeHelper.requireNonNull(constants$1355.gluScaleImage$MH,"gluScaleImage");
    }
    public static int gluScaleImage ( int format,  int widthin,  int heightin,  int typein,  Addressable datain,  int widthout,  int heightout,  int typeout,  Addressable dataout) {
        var mh$ = gluScaleImage$MH();
        try {
            return (int)mh$.invokeExact(format, widthin, heightin, typein, datain, widthout, heightout, typeout, dataout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBuild1DMipmaps$MH() {
        return RuntimeHelper.requireNonNull(constants$1355.gluBuild1DMipmaps$MH,"gluBuild1DMipmaps");
    }
    public static int gluBuild1DMipmaps ( int target,  int components,  int width,  int format,  int type,  Addressable data) {
        var mh$ = gluBuild1DMipmaps$MH();
        try {
            return (int)mh$.invokeExact(target, components, width, format, type, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBuild2DMipmaps$MH() {
        return RuntimeHelper.requireNonNull(constants$1355.gluBuild2DMipmaps$MH,"gluBuild2DMipmaps");
    }
    public static int gluBuild2DMipmaps ( int target,  int components,  int width,  int height,  int format,  int type,  Addressable data) {
        var mh$ = gluBuild2DMipmaps$MH();
        try {
            return (int)mh$.invokeExact(target, components, width, height, format, type, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNewQuadric$MH() {
        return RuntimeHelper.requireNonNull(constants$1356.gluNewQuadric$MH,"gluNewQuadric");
    }
    public static MemoryAddress gluNewQuadric () {
        var mh$ = gluNewQuadric$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluDeleteQuadric$MH() {
        return RuntimeHelper.requireNonNull(constants$1356.gluDeleteQuadric$MH,"gluDeleteQuadric");
    }
    public static void gluDeleteQuadric ( Addressable state) {
        var mh$ = gluDeleteQuadric$MH();
        try {
            mh$.invokeExact(state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluQuadricNormals$MH() {
        return RuntimeHelper.requireNonNull(constants$1356.gluQuadricNormals$MH,"gluQuadricNormals");
    }
    public static void gluQuadricNormals ( Addressable quadObject,  int normals) {
        var mh$ = gluQuadricNormals$MH();
        try {
            mh$.invokeExact(quadObject, normals);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluQuadricTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$1356.gluQuadricTexture$MH,"gluQuadricTexture");
    }
    public static void gluQuadricTexture ( Addressable quadObject,  byte textureCoords) {
        var mh$ = gluQuadricTexture$MH();
        try {
            mh$.invokeExact(quadObject, textureCoords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluQuadricOrientation$MH() {
        return RuntimeHelper.requireNonNull(constants$1356.gluQuadricOrientation$MH,"gluQuadricOrientation");
    }
    public static void gluQuadricOrientation ( Addressable quadObject,  int orientation) {
        var mh$ = gluQuadricOrientation$MH();
        try {
            mh$.invokeExact(quadObject, orientation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluQuadricDrawStyle$MH() {
        return RuntimeHelper.requireNonNull(constants$1356.gluQuadricDrawStyle$MH,"gluQuadricDrawStyle");
    }
    public static void gluQuadricDrawStyle ( Addressable quadObject,  int drawStyle) {
        var mh$ = gluQuadricDrawStyle$MH();
        try {
            mh$.invokeExact(quadObject, drawStyle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluCylinder$MH() {
        return RuntimeHelper.requireNonNull(constants$1357.gluCylinder$MH,"gluCylinder");
    }
    public static void gluCylinder ( Addressable qobj,  double baseRadius,  double topRadius,  double height,  int slices,  int stacks) {
        var mh$ = gluCylinder$MH();
        try {
            mh$.invokeExact(qobj, baseRadius, topRadius, height, slices, stacks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluDisk$MH() {
        return RuntimeHelper.requireNonNull(constants$1357.gluDisk$MH,"gluDisk");
    }
    public static void gluDisk ( Addressable qobj,  double innerRadius,  double outerRadius,  int slices,  int loops) {
        var mh$ = gluDisk$MH();
        try {
            mh$.invokeExact(qobj, innerRadius, outerRadius, slices, loops);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluPartialDisk$MH() {
        return RuntimeHelper.requireNonNull(constants$1357.gluPartialDisk$MH,"gluPartialDisk");
    }
    public static void gluPartialDisk ( Addressable qobj,  double innerRadius,  double outerRadius,  int slices,  int loops,  double startAngle,  double sweepAngle) {
        var mh$ = gluPartialDisk$MH();
        try {
            mh$.invokeExact(qobj, innerRadius, outerRadius, slices, loops, startAngle, sweepAngle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluSphere$MH() {
        return RuntimeHelper.requireNonNull(constants$1357.gluSphere$MH,"gluSphere");
    }
    public static void gluSphere ( Addressable qobj,  double radius,  int slices,  int stacks) {
        var mh$ = gluSphere$MH();
        try {
            mh$.invokeExact(qobj, radius, slices, stacks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluQuadricCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$1358.gluQuadricCallback$MH,"gluQuadricCallback");
    }
    public static void gluQuadricCallback ( Addressable qobj,  int which,  Addressable fn) {
        var mh$ = gluQuadricCallback$MH();
        try {
            mh$.invokeExact(qobj, which, fn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNewTess$MH() {
        return RuntimeHelper.requireNonNull(constants$1358.gluNewTess$MH,"gluNewTess");
    }
    public static MemoryAddress gluNewTess () {
        var mh$ = gluNewTess$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluDeleteTess$MH() {
        return RuntimeHelper.requireNonNull(constants$1358.gluDeleteTess$MH,"gluDeleteTess");
    }
    public static void gluDeleteTess ( Addressable tess) {
        var mh$ = gluDeleteTess$MH();
        try {
            mh$.invokeExact(tess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessBeginPolygon$MH() {
        return RuntimeHelper.requireNonNull(constants$1358.gluTessBeginPolygon$MH,"gluTessBeginPolygon");
    }
    public static void gluTessBeginPolygon ( Addressable tess,  Addressable polygon_data) {
        var mh$ = gluTessBeginPolygon$MH();
        try {
            mh$.invokeExact(tess, polygon_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessBeginContour$MH() {
        return RuntimeHelper.requireNonNull(constants$1358.gluTessBeginContour$MH,"gluTessBeginContour");
    }
    public static void gluTessBeginContour ( Addressable tess) {
        var mh$ = gluTessBeginContour$MH();
        try {
            mh$.invokeExact(tess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessVertex$MH() {
        return RuntimeHelper.requireNonNull(constants$1358.gluTessVertex$MH,"gluTessVertex");
    }
    public static void gluTessVertex ( Addressable tess,  Addressable coords,  Addressable data) {
        var mh$ = gluTessVertex$MH();
        try {
            mh$.invokeExact(tess, coords, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessEndContour$MH() {
        return RuntimeHelper.requireNonNull(constants$1359.gluTessEndContour$MH,"gluTessEndContour");
    }
    public static void gluTessEndContour ( Addressable tess) {
        var mh$ = gluTessEndContour$MH();
        try {
            mh$.invokeExact(tess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessEndPolygon$MH() {
        return RuntimeHelper.requireNonNull(constants$1359.gluTessEndPolygon$MH,"gluTessEndPolygon");
    }
    public static void gluTessEndPolygon ( Addressable tess) {
        var mh$ = gluTessEndPolygon$MH();
        try {
            mh$.invokeExact(tess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$1359.gluTessProperty$MH,"gluTessProperty");
    }
    public static void gluTessProperty ( Addressable tess,  int which,  double value) {
        var mh$ = gluTessProperty$MH();
        try {
            mh$.invokeExact(tess, which, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessNormal$MH() {
        return RuntimeHelper.requireNonNull(constants$1359.gluTessNormal$MH,"gluTessNormal");
    }
    public static void gluTessNormal ( Addressable tess,  double x,  double y,  double z) {
        var mh$ = gluTessNormal$MH();
        try {
            mh$.invokeExact(tess, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$1360.gluTessCallback$MH,"gluTessCallback");
    }
    public static void gluTessCallback ( Addressable tess,  int which,  Addressable fn) {
        var mh$ = gluTessCallback$MH();
        try {
            mh$.invokeExact(tess, which, fn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluGetTessProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$1360.gluGetTessProperty$MH,"gluGetTessProperty");
    }
    public static void gluGetTessProperty ( Addressable tess,  int which,  Addressable value) {
        var mh$ = gluGetTessProperty$MH();
        try {
            mh$.invokeExact(tess, which, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNewNurbsRenderer$MH() {
        return RuntimeHelper.requireNonNull(constants$1360.gluNewNurbsRenderer$MH,"gluNewNurbsRenderer");
    }
    public static MemoryAddress gluNewNurbsRenderer () {
        var mh$ = gluNewNurbsRenderer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluDeleteNurbsRenderer$MH() {
        return RuntimeHelper.requireNonNull(constants$1360.gluDeleteNurbsRenderer$MH,"gluDeleteNurbsRenderer");
    }
    public static void gluDeleteNurbsRenderer ( Addressable nobj) {
        var mh$ = gluDeleteNurbsRenderer$MH();
        try {
            mh$.invokeExact(nobj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBeginSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$1360.gluBeginSurface$MH,"gluBeginSurface");
    }
    public static void gluBeginSurface ( Addressable nobj) {
        var mh$ = gluBeginSurface$MH();
        try {
            mh$.invokeExact(nobj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBeginCurve$MH() {
        return RuntimeHelper.requireNonNull(constants$1360.gluBeginCurve$MH,"gluBeginCurve");
    }
    public static void gluBeginCurve ( Addressable nobj) {
        var mh$ = gluBeginCurve$MH();
        try {
            mh$.invokeExact(nobj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluEndCurve$MH() {
        return RuntimeHelper.requireNonNull(constants$1361.gluEndCurve$MH,"gluEndCurve");
    }
    public static void gluEndCurve ( Addressable nobj) {
        var mh$ = gluEndCurve$MH();
        try {
            mh$.invokeExact(nobj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluEndSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$1361.gluEndSurface$MH,"gluEndSurface");
    }
    public static void gluEndSurface ( Addressable nobj) {
        var mh$ = gluEndSurface$MH();
        try {
            mh$.invokeExact(nobj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBeginTrim$MH() {
        return RuntimeHelper.requireNonNull(constants$1361.gluBeginTrim$MH,"gluBeginTrim");
    }
    public static void gluBeginTrim ( Addressable nobj) {
        var mh$ = gluBeginTrim$MH();
        try {
            mh$.invokeExact(nobj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluEndTrim$MH() {
        return RuntimeHelper.requireNonNull(constants$1361.gluEndTrim$MH,"gluEndTrim");
    }
    public static void gluEndTrim ( Addressable nobj) {
        var mh$ = gluEndTrim$MH();
        try {
            mh$.invokeExact(nobj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluPwlCurve$MH() {
        return RuntimeHelper.requireNonNull(constants$1361.gluPwlCurve$MH,"gluPwlCurve");
    }
    public static void gluPwlCurve ( Addressable nobj,  int count,  Addressable array,  int stride,  int type) {
        var mh$ = gluPwlCurve$MH();
        try {
            mh$.invokeExact(nobj, count, array, stride, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNurbsCurve$MH() {
        return RuntimeHelper.requireNonNull(constants$1361.gluNurbsCurve$MH,"gluNurbsCurve");
    }
    public static void gluNurbsCurve ( Addressable nobj,  int nknots,  Addressable knot,  int stride,  Addressable ctlarray,  int order,  int type) {
        var mh$ = gluNurbsCurve$MH();
        try {
            mh$.invokeExact(nobj, nknots, knot, stride, ctlarray, order, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNurbsSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$1362.gluNurbsSurface$MH,"gluNurbsSurface");
    }
    public static void gluNurbsSurface ( Addressable nobj,  int sknot_count,  Addressable sknot,  int tknot_count,  Addressable tknot,  int s_stride,  int t_stride,  Addressable ctlarray,  int sorder,  int torder,  int type) {
        var mh$ = gluNurbsSurface$MH();
        try {
            mh$.invokeExact(nobj, sknot_count, sknot, tknot_count, tknot, s_stride, t_stride, ctlarray, sorder, torder, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluLoadSamplingMatrices$MH() {
        return RuntimeHelper.requireNonNull(constants$1362.gluLoadSamplingMatrices$MH,"gluLoadSamplingMatrices");
    }
    public static void gluLoadSamplingMatrices ( Addressable nobj,  Addressable modelMatrix,  Addressable projMatrix,  Addressable viewport) {
        var mh$ = gluLoadSamplingMatrices$MH();
        try {
            mh$.invokeExact(nobj, modelMatrix, projMatrix, viewport);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNurbsProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$1362.gluNurbsProperty$MH,"gluNurbsProperty");
    }
    public static void gluNurbsProperty ( Addressable nobj,  int property,  float value) {
        var mh$ = gluNurbsProperty$MH();
        try {
            mh$.invokeExact(nobj, property, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluGetNurbsProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$1362.gluGetNurbsProperty$MH,"gluGetNurbsProperty");
    }
    public static void gluGetNurbsProperty ( Addressable nobj,  int property,  Addressable value) {
        var mh$ = gluGetNurbsProperty$MH();
        try {
            mh$.invokeExact(nobj, property, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNurbsCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$1363.gluNurbsCallback$MH,"gluNurbsCallback");
    }
    public static void gluNurbsCallback ( Addressable nobj,  int which,  Addressable fn) {
        var mh$ = gluNurbsCallback$MH();
        try {
            mh$.invokeExact(nobj, which, fn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBeginPolygon$MH() {
        return RuntimeHelper.requireNonNull(constants$1367.gluBeginPolygon$MH,"gluBeginPolygon");
    }
    public static void gluBeginPolygon ( Addressable tess) {
        var mh$ = gluBeginPolygon$MH();
        try {
            mh$.invokeExact(tess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNextContour$MH() {
        return RuntimeHelper.requireNonNull(constants$1368.gluNextContour$MH,"gluNextContour");
    }
    public static void gluNextContour ( Addressable tess,  int type) {
        var mh$ = gluNextContour$MH();
        try {
            mh$.invokeExact(tess, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluEndPolygon$MH() {
        return RuntimeHelper.requireNonNull(constants$1368.gluEndPolygon$MH,"gluEndPolygon");
    }
    public static void gluEndPolygon ( Addressable tess) {
        var mh$ = gluEndPolygon$MH();
        try {
            mh$.invokeExact(tess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HPBUFFERARB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HPBUFFEREXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HGPUNV = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGPU_DEVICE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HVIDEOOUTPUTDEVICENV = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HVIDEOINPUTDEVICENV = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HPVIDEODEV = Constants$root.C_POINTER$LAYOUT;
    public static int WINAPI_PARTITION_SERVER() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_WINTRUST() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_WEBSERVICES() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_EVENTLOGSERVICE() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_VHD() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_PERFCOUNTER() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_SECURESTARTUP() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_REMOTEFS() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_BOOTABLESKU() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_CMDTOOLS() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_DISM() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_CORESETUP() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_APPRUNTIME() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_ESENT() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_WINMGMT() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_WNV() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_CLUSTER() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_VSS() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_TRAFFIC() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_ISCSI() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_STORAGE() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_MPSSVC() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_APPXDEPLOYMENT() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_WER() {
        return (int)0L;
    }
    public static int WINAPI_FAMILY_APP() {
        return (int)2L;
    }
    public static int WINAPI_FAMILY() {
        return (int)100L;
    }
    public static int WINAPI_PARTITION_DESKTOP() {
        return (int)1L;
    }
    public static int WINAPI_PARTITION_APP() {
        return (int)1L;
    }
    public static int WINAPI_PARTITION_PC_APP() {
        return (int)1L;
    }
    public static int WINAPI_PARTITION_PHONE_APP() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_GAMES() {
        return (int)1L;
    }
    public static int WINAPI_PARTITION_SYSTEM() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PHONE() {
        return (int)0L;
    }
    public static int _WIN32_IE_NT4() {
        return (int)512L;
    }
    public static int _WIN32_IE_NT4SP1() {
        return (int)512L;
    }
    public static int _WIN32_IE_NT4SP2() {
        return (int)512L;
    }
    public static int _WIN32_IE_NT4SP3() {
        return (int)770L;
    }
    public static int _WIN32_IE_NT4SP4() {
        return (int)1025L;
    }
    public static int _WIN32_IE_NT4SP5() {
        return (int)1025L;
    }
    public static int _WIN32_IE_NT4SP6() {
        return (int)1280L;
    }
    public static int _WIN32_IE_WIN98() {
        return (int)1025L;
    }
    public static int _WIN32_IE_WIN98SE() {
        return (int)1280L;
    }
    public static int _WIN32_IE_WINME() {
        return (int)1360L;
    }
    public static int _WIN32_IE_WIN2K() {
        return (int)1281L;
    }
    public static int _WIN32_IE_WIN2KSP1() {
        return (int)1281L;
    }
    public static int _WIN32_IE_WIN2KSP2() {
        return (int)1281L;
    }
    public static int _WIN32_IE_WIN2KSP3() {
        return (int)1281L;
    }
    public static int _WIN32_IE_WIN2KSP4() {
        return (int)1281L;
    }
    public static int _WIN32_IE_XP() {
        return (int)1536L;
    }
    public static int _WIN32_IE_XPSP1() {
        return (int)1537L;
    }
    public static int _WIN32_IE_XPSP2() {
        return (int)1539L;
    }
    public static int _WIN32_IE_WS03SP1() {
        return (int)1539L;
    }
    public static int _WIN32_IE_WIN6() {
        return (int)1792L;
    }
    public static int _WIN32_IE_LONGHORN() {
        return (int)1792L;
    }
    public static int _WIN32_IE_WIN7() {
        return (int)2048L;
    }
    public static int _WIN32_IE_WIN8() {
        return (int)2560L;
    }
    public static int _WIN32_IE_WINBLUE() {
        return (int)2560L;
    }
    public static int _WIN32_IE_WINTHRESHOLD() {
        return (int)2560L;
    }
    public static int _WIN32_IE_WIN10() {
        return (int)2560L;
    }
    public static int NTDDI_VISTA() {
        return (int)100663296L;
    }
    public static int NTDDI_VISTASP1() {
        return (int)100663552L;
    }
    public static int NTDDI_VISTASP2() {
        return (int)100663808L;
    }
    public static int NTDDI_VISTASP3() {
        return (int)100664064L;
    }
    public static int NTDDI_VISTASP4() {
        return (int)100664320L;
    }
    public static int NTDDI_LONGHORN() {
        return (int)100663296L;
    }
    public static int NTDDI_WS08() {
        return (int)100663552L;
    }
    public static int NTDDI_WS08SP2() {
        return (int)100663808L;
    }
    public static int NTDDI_WS08SP3() {
        return (int)100664064L;
    }
    public static int NTDDI_WS08SP4() {
        return (int)100664320L;
    }
    public static int WDK_NTDDI_VERSION() {
        return (int)167772168L;
    }
    public static int OSVERSION_MASK() {
        return (int)4294901760L;
    }
    public static int NTDDI_VERSION() {
        return (int)167772168L;
    }
    public static int WINVER() {
        return (int)2560L;
    }
    public static int _VCRUNTIME_DISABLED_WARNINGS() {
        return (int)4514L;
    }
    public static MemoryAddress NULL() {
        return constants$1416.NULL$ADDR;
    }
    public static int EXCEPTION_CONTINUE_EXECUTION() {
        return (int)-1L;
    }
    public static int _UCRT_DISABLED_WARNINGS() {
        return (int)4324L;
    }
    public static long _TRUNCATE() {
        return -1L;
    }
    public static long _CRT_SIZE_MAX() {
        return -1L;
    }
    public static MemorySegment __FILEW__() {
        return constants$1416.__FILEW__$SEGMENT;
    }
    public static int __STDC_SECURE_LIB__() {
        return (int)200411L;
    }
    public static int __GOT_SECURE_LIB__() {
        return (int)200411L;
    }
    public static short WEOF() {
        return (short)65535L;
    }
    public static int _ALPHA() {
        return (int)259L;
    }
    public static long MAX_NATURAL_ALIGNMENT() {
        return 8L;
    }
    public static long ADDRESS_TAG_BIT() {
        return 4398046511104L;
    }
    public static long MAXUINT_PTR() {
        return -1L;
    }
    public static long MAXINT_PTR() {
        return 9223372036854775807L;
    }
    public static long MININT_PTR() {
        return -9223372036854775808L;
    }
    public static long MAXULONG_PTR() {
        return -1L;
    }
    public static long MAXLONG_PTR() {
        return 9223372036854775807L;
    }
    public static long MINLONG_PTR() {
        return -9223372036854775808L;
    }
    public static int MAXUHALF_PTR() {
        return (int)4294967295L;
    }
    public static int MAXHALF_PTR() {
        return (int)2147483647L;
    }
    public static int MINHALF_PTR() {
        return (int)-2147483648L;
    }
    public static byte MAXUINT8() {
        return (byte)255L;
    }
    public static byte MAXINT8() {
        return (byte)127L;
    }
    public static byte MININT8() {
        return (byte)-128L;
    }
    public static short MAXUINT16() {
        return (short)65535L;
    }
    public static short MAXINT16() {
        return (short)32767L;
    }
    public static short MININT16() {
        return (short)-32768L;
    }
    public static int MAXUINT32() {
        return (int)4294967295L;
    }
    public static int MAXINT32() {
        return (int)2147483647L;
    }
    public static int MININT32() {
        return (int)-2147483648L;
    }
    public static long MAXUINT64() {
        return -1L;
    }
    public static long MAXINT64() {
        return 9223372036854775807L;
    }
    public static long MININT64() {
        return -9223372036854775808L;
    }
    public static int MAXULONG32() {
        return (int)4294967295L;
    }
    public static int MAXLONG32() {
        return (int)2147483647L;
    }
    public static int MINLONG32() {
        return (int)-2147483648L;
    }
    public static long MAXULONG64() {
        return -1L;
    }
    public static long MAXLONG64() {
        return 9223372036854775807L;
    }
    public static long MINLONG64() {
        return -9223372036854775808L;
    }
    public static long MAXULONGLONG() {
        return -1L;
    }
    public static long MINLONGLONG() {
        return -9223372036854775808L;
    }
    public static long MAXSIZE_T() {
        return -1L;
    }
    public static long MAXSSIZE_T() {
        return 9223372036854775807L;
    }
    public static long MINSSIZE_T() {
        return -9223372036854775808L;
    }
    public static int MAXUINT() {
        return (int)4294967295L;
    }
    public static int MAXINT() {
        return (int)2147483647L;
    }
    public static int MININT() {
        return (int)-2147483648L;
    }
    public static int MAXDWORD32() {
        return (int)4294967295L;
    }
    public static long MAXDWORD64() {
        return -1L;
    }
    public static int UCSCHAR_INVALID_CHARACTER() {
        return (int)4294967295L;
    }
    public static int MIN_UCSCHAR() {
        return (int)0L;
    }
    public static int MAX_UCSCHAR() {
        return (int)1114111L;
    }
    public static int MAXIMUM_PROCESSORS() {
        return (int)64L;
    }
    public static int ERROR_SEVERITY_WARNING() {
        return (int)2147483648L;
    }
    public static int ERROR_SEVERITY_ERROR() {
        return (int)3221225472L;
    }
    public static long MAXLONGLONG() {
        return 9223372036854775807L;
    }
    public static byte ANSI_NULL() {
        return (byte)0L;
    }
    public static short UNICODE_NULL() {
        return (short)0L;
    }
    public static short UNICODE_STRING_MAX_BYTES() {
        return (short)65534L;
    }
    public static int UNICODE_STRING_MAX_CHARS() {
        return (int)32767L;
    }
    public static int EDEADLOCK() {
        return (int)36L;
    }
    public static int _NLSCMPERROR() {
        return (int)2147483647L;
    }
    public static int MINLONG() {
        return (int)2147483648L;
    }
    public static int MAXDWORD() {
        return (int)4294967295L;
    }
    public static int VER_SERVER_NT() {
        return (int)2147483648L;
    }
    public static int PRODUCT_UNLICENSED() {
        return (int)2882382797L;
    }
    public static int LANG_SYSTEM_DEFAULT() {
        return (int)2048L;
    }
    public static int LANG_USER_DEFAULT() {
        return (int)1024L;
    }
    public static int LOCALE_SYSTEM_DEFAULT() {
        return (int)2048L;
    }
    public static int LOCALE_USER_DEFAULT() {
        return (int)1024L;
    }
    public static int LOCALE_CUSTOM_DEFAULT() {
        return (int)3072L;
    }
    public static int LOCALE_CUSTOM_UNSPECIFIED() {
        return (int)4096L;
    }
    public static int LOCALE_CUSTOM_UI_DEFAULT() {
        return (int)5120L;
    }
    public static int LOCALE_NEUTRAL() {
        return (int)0L;
    }
    public static int LOCALE_INVARIANT() {
        return (int)127L;
    }
    public static int LOCALE_UNASSIGNED_LCID() {
        return (int)4096L;
    }
    public static int STATUS_WAIT_0() {
        return (int)0L;
    }
    public static int STATUS_ABANDONED_WAIT_0() {
        return (int)128L;
    }
    public static int STATUS_USER_APC() {
        return (int)192L;
    }
    public static int STATUS_TIMEOUT() {
        return (int)258L;
    }
    public static int STATUS_PENDING() {
        return (int)259L;
    }
    public static int DBG_EXCEPTION_HANDLED() {
        return (int)65537L;
    }
    public static int DBG_CONTINUE() {
        return (int)65538L;
    }
    public static int STATUS_SEGMENT_NOTIFICATION() {
        return (int)1073741829L;
    }
    public static int STATUS_FATAL_APP_EXIT() {
        return (int)1073741845L;
    }
    public static int DBG_REPLY_LATER() {
        return (int)1073807361L;
    }
    public static int DBG_TERMINATE_THREAD() {
        return (int)1073807363L;
    }
    public static int DBG_TERMINATE_PROCESS() {
        return (int)1073807364L;
    }
    public static int DBG_CONTROL_C() {
        return (int)1073807365L;
    }
    public static int DBG_PRINTEXCEPTION_C() {
        return (int)1073807366L;
    }
    public static int DBG_RIPEXCEPTION() {
        return (int)1073807367L;
    }
    public static int DBG_CONTROL_BREAK() {
        return (int)1073807368L;
    }
    public static int DBG_COMMAND_EXCEPTION() {
        return (int)1073807369L;
    }
    public static int DBG_PRINTEXCEPTION_WIDE_C() {
        return (int)1073807370L;
    }
    public static int STATUS_GUARD_PAGE_VIOLATION() {
        return (int)2147483649L;
    }
    public static int STATUS_DATATYPE_MISALIGNMENT() {
        return (int)2147483650L;
    }
    public static int STATUS_BREAKPOINT() {
        return (int)2147483651L;
    }
    public static int STATUS_SINGLE_STEP() {
        return (int)2147483652L;
    }
    public static int STATUS_LONGJUMP() {
        return (int)2147483686L;
    }
    public static int STATUS_UNWIND_CONSOLIDATE() {
        return (int)2147483689L;
    }
    public static int DBG_EXCEPTION_NOT_HANDLED() {
        return (int)2147549185L;
    }
    public static int STATUS_ACCESS_VIOLATION() {
        return (int)3221225477L;
    }
    public static int STATUS_IN_PAGE_ERROR() {
        return (int)3221225478L;
    }
    public static int STATUS_INVALID_HANDLE() {
        return (int)3221225480L;
    }
    public static int STATUS_INVALID_PARAMETER() {
        return (int)3221225485L;
    }
    public static int STATUS_NO_MEMORY() {
        return (int)3221225495L;
    }
    public static int STATUS_ILLEGAL_INSTRUCTION() {
        return (int)3221225501L;
    }
    public static int STATUS_NONCONTINUABLE_EXCEPTION() {
        return (int)3221225509L;
    }
    public static int STATUS_INVALID_DISPOSITION() {
        return (int)3221225510L;
    }
    public static int STATUS_ARRAY_BOUNDS_EXCEEDED() {
        return (int)3221225612L;
    }
    public static int STATUS_FLOAT_DENORMAL_OPERAND() {
        return (int)3221225613L;
    }
    public static int STATUS_FLOAT_DIVIDE_BY_ZERO() {
        return (int)3221225614L;
    }
    public static int STATUS_FLOAT_INEXACT_RESULT() {
        return (int)3221225615L;
    }
    public static int STATUS_FLOAT_INVALID_OPERATION() {
        return (int)3221225616L;
    }
}


