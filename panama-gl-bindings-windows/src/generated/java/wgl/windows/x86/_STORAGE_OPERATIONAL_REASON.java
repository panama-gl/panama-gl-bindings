// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _STORAGE_OPERATIONAL_REASON {
 *     DWORD Version;
 *     DWORD Size;
 *     STORAGE_OPERATIONAL_STATUS_REASON Reason;
 *     union {
 *         struct {
 *             BYTE SenseKey;
 *             BYTE ASC;
 *             BYTE ASCQ;
 *             BYTE Reserved;
 *         } ScsiSenseKey;
 *         struct {
 *             BYTE CriticalHealth;
 *             BYTE ModuleHealth[2];
 *             BYTE ErrorThresholdStatus;
 *         } NVDIMM_N;
 *         DWORD AsUlong;
 *     } RawBytes;
 * }
 * }
 */
public class _STORAGE_OPERATIONAL_REASON {

    _STORAGE_OPERATIONAL_REASON() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("Version"),
        wgl_h.C_LONG.withName("Size"),
        wgl_h.C_INT.withName("Reason"),
        _STORAGE_OPERATIONAL_REASON.RawBytes.layout().withName("RawBytes")
    ).withName("_STORAGE_OPERATIONAL_REASON");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt Version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static final OfInt Version$layout() {
        return Version$LAYOUT;
    }

    private static final long Version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static final long Version$offset() {
        return Version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static int Version(MemorySegment struct) {
        return struct.get(Version$LAYOUT, Version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static void Version(MemorySegment struct, int fieldValue) {
        struct.set(Version$LAYOUT, Version$OFFSET, fieldValue);
    }

    private static final OfInt Size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static final OfInt Size$layout() {
        return Size$LAYOUT;
    }

    private static final long Size$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static final long Size$offset() {
        return Size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static int Size(MemorySegment struct) {
        return struct.get(Size$LAYOUT, Size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static void Size(MemorySegment struct, int fieldValue) {
        struct.set(Size$LAYOUT, Size$OFFSET, fieldValue);
    }

    private static final OfInt Reason$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Reason"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * STORAGE_OPERATIONAL_STATUS_REASON Reason
     * }
     */
    public static final OfInt Reason$layout() {
        return Reason$LAYOUT;
    }

    private static final long Reason$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * STORAGE_OPERATIONAL_STATUS_REASON Reason
     * }
     */
    public static final long Reason$offset() {
        return Reason$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * STORAGE_OPERATIONAL_STATUS_REASON Reason
     * }
     */
    public static int Reason(MemorySegment struct) {
        return struct.get(Reason$LAYOUT, Reason$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * STORAGE_OPERATIONAL_STATUS_REASON Reason
     * }
     */
    public static void Reason(MemorySegment struct, int fieldValue) {
        struct.set(Reason$LAYOUT, Reason$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * union {
     *     struct {
     *         BYTE SenseKey;
     *         BYTE ASC;
     *         BYTE ASCQ;
     *         BYTE Reserved;
     *     } ScsiSenseKey;
     *     struct {
     *         BYTE CriticalHealth;
     *         BYTE ModuleHealth[2];
     *         BYTE ErrorThresholdStatus;
     *     } NVDIMM_N;
     *     DWORD AsUlong;
     * }
     * }
     */
    public static class RawBytes {

        RawBytes() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
            _STORAGE_OPERATIONAL_REASON.RawBytes.ScsiSenseKey.layout().withName("ScsiSenseKey"),
            _STORAGE_OPERATIONAL_REASON.RawBytes.NVDIMM_N.layout().withName("NVDIMM_N"),
            wgl_h.C_LONG.withName("AsUlong")
        ).withName("$anon$2685:5");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     BYTE SenseKey;
         *     BYTE ASC;
         *     BYTE ASCQ;
         *     BYTE Reserved;
         * }
         * }
         */
        public static class ScsiSenseKey {

            ScsiSenseKey() {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                wgl_h.C_CHAR.withName("SenseKey"),
                wgl_h.C_CHAR.withName("ASC"),
                wgl_h.C_CHAR.withName("ASCQ"),
                wgl_h.C_CHAR.withName("Reserved")
            ).withName("$anon$2690:9");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() {
                return $LAYOUT;
            }

            private static final OfByte SenseKey$LAYOUT = (OfByte)$LAYOUT.select(groupElement("SenseKey"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * BYTE SenseKey
             * }
             */
            public static final OfByte SenseKey$layout() {
                return SenseKey$LAYOUT;
            }

            private static final long SenseKey$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * BYTE SenseKey
             * }
             */
            public static final long SenseKey$offset() {
                return SenseKey$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * BYTE SenseKey
             * }
             */
            public static byte SenseKey(MemorySegment struct) {
                return struct.get(SenseKey$LAYOUT, SenseKey$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * BYTE SenseKey
             * }
             */
            public static void SenseKey(MemorySegment struct, byte fieldValue) {
                struct.set(SenseKey$LAYOUT, SenseKey$OFFSET, fieldValue);
            }

            private static final OfByte ASC$LAYOUT = (OfByte)$LAYOUT.select(groupElement("ASC"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * BYTE ASC
             * }
             */
            public static final OfByte ASC$layout() {
                return ASC$LAYOUT;
            }

            private static final long ASC$OFFSET = 1;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * BYTE ASC
             * }
             */
            public static final long ASC$offset() {
                return ASC$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * BYTE ASC
             * }
             */
            public static byte ASC(MemorySegment struct) {
                return struct.get(ASC$LAYOUT, ASC$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * BYTE ASC
             * }
             */
            public static void ASC(MemorySegment struct, byte fieldValue) {
                struct.set(ASC$LAYOUT, ASC$OFFSET, fieldValue);
            }

            private static final OfByte ASCQ$LAYOUT = (OfByte)$LAYOUT.select(groupElement("ASCQ"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * BYTE ASCQ
             * }
             */
            public static final OfByte ASCQ$layout() {
                return ASCQ$LAYOUT;
            }

            private static final long ASCQ$OFFSET = 2;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * BYTE ASCQ
             * }
             */
            public static final long ASCQ$offset() {
                return ASCQ$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * BYTE ASCQ
             * }
             */
            public static byte ASCQ(MemorySegment struct) {
                return struct.get(ASCQ$LAYOUT, ASCQ$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * BYTE ASCQ
             * }
             */
            public static void ASCQ(MemorySegment struct, byte fieldValue) {
                struct.set(ASCQ$LAYOUT, ASCQ$OFFSET, fieldValue);
            }

            private static final OfByte Reserved$LAYOUT = (OfByte)$LAYOUT.select(groupElement("Reserved"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * BYTE Reserved
             * }
             */
            public static final OfByte Reserved$layout() {
                return Reserved$LAYOUT;
            }

            private static final long Reserved$OFFSET = 3;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * BYTE Reserved
             * }
             */
            public static final long Reserved$offset() {
                return Reserved$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * BYTE Reserved
             * }
             */
            public static byte Reserved(MemorySegment struct) {
                return struct.get(Reserved$LAYOUT, Reserved$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * BYTE Reserved
             * }
             */
            public static void Reserved(MemorySegment struct, byte fieldValue) {
                struct.set(Reserved$LAYOUT, Reserved$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index) {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator) {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout ScsiSenseKey$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ScsiSenseKey"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     BYTE SenseKey;
         *     BYTE ASC;
         *     BYTE ASCQ;
         *     BYTE Reserved;
         * } ScsiSenseKey
         * }
         */
        public static final GroupLayout ScsiSenseKey$layout() {
            return ScsiSenseKey$LAYOUT;
        }

        private static final long ScsiSenseKey$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     BYTE SenseKey;
         *     BYTE ASC;
         *     BYTE ASCQ;
         *     BYTE Reserved;
         * } ScsiSenseKey
         * }
         */
        public static final long ScsiSenseKey$offset() {
            return ScsiSenseKey$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     BYTE SenseKey;
         *     BYTE ASC;
         *     BYTE ASCQ;
         *     BYTE Reserved;
         * } ScsiSenseKey
         * }
         */
        public static MemorySegment ScsiSenseKey(MemorySegment union) {
            return union.asSlice(ScsiSenseKey$OFFSET, ScsiSenseKey$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     BYTE SenseKey;
         *     BYTE ASC;
         *     BYTE ASCQ;
         *     BYTE Reserved;
         * } ScsiSenseKey
         * }
         */
        public static void ScsiSenseKey(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, ScsiSenseKey$OFFSET, ScsiSenseKey$LAYOUT.byteSize());
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     BYTE CriticalHealth;
         *     BYTE ModuleHealth[2];
         *     BYTE ErrorThresholdStatus;
         * }
         * }
         */
        public static class NVDIMM_N {

            NVDIMM_N() {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                wgl_h.C_CHAR.withName("CriticalHealth"),
                MemoryLayout.sequenceLayout(2, wgl_h.C_CHAR).withName("ModuleHealth"),
                wgl_h.C_CHAR.withName("ErrorThresholdStatus")
            ).withName("$anon$2700:9");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() {
                return $LAYOUT;
            }

            private static final OfByte CriticalHealth$LAYOUT = (OfByte)$LAYOUT.select(groupElement("CriticalHealth"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * BYTE CriticalHealth
             * }
             */
            public static final OfByte CriticalHealth$layout() {
                return CriticalHealth$LAYOUT;
            }

            private static final long CriticalHealth$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * BYTE CriticalHealth
             * }
             */
            public static final long CriticalHealth$offset() {
                return CriticalHealth$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * BYTE CriticalHealth
             * }
             */
            public static byte CriticalHealth(MemorySegment struct) {
                return struct.get(CriticalHealth$LAYOUT, CriticalHealth$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * BYTE CriticalHealth
             * }
             */
            public static void CriticalHealth(MemorySegment struct, byte fieldValue) {
                struct.set(CriticalHealth$LAYOUT, CriticalHealth$OFFSET, fieldValue);
            }

            private static final SequenceLayout ModuleHealth$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("ModuleHealth"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * BYTE ModuleHealth[2]
             * }
             */
            public static final SequenceLayout ModuleHealth$layout() {
                return ModuleHealth$LAYOUT;
            }

            private static final long ModuleHealth$OFFSET = 1;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * BYTE ModuleHealth[2]
             * }
             */
            public static final long ModuleHealth$offset() {
                return ModuleHealth$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * BYTE ModuleHealth[2]
             * }
             */
            public static MemorySegment ModuleHealth(MemorySegment struct) {
                return struct.asSlice(ModuleHealth$OFFSET, ModuleHealth$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * BYTE ModuleHealth[2]
             * }
             */
            public static void ModuleHealth(MemorySegment struct, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, struct, ModuleHealth$OFFSET, ModuleHealth$LAYOUT.byteSize());
            }

            private static long[] ModuleHealth$DIMS = { 2 };

            /**
             * Dimensions for array field:
             * {@snippet lang=c :
             * BYTE ModuleHealth[2]
             * }
             */
            public static long[] ModuleHealth$dimensions() {
                return ModuleHealth$DIMS;
            }
            private static final VarHandle ModuleHealth$ELEM_HANDLE = ModuleHealth$LAYOUT.varHandle(sequenceElement());

            /**
             * Indexed getter for field:
             * {@snippet lang=c :
             * BYTE ModuleHealth[2]
             * }
             */
            public static byte ModuleHealth(MemorySegment struct, long index0) {
                return (byte)ModuleHealth$ELEM_HANDLE.get(struct, 0L, index0);
            }

            /**
             * Indexed setter for field:
             * {@snippet lang=c :
             * BYTE ModuleHealth[2]
             * }
             */
            public static void ModuleHealth(MemorySegment struct, long index0, byte fieldValue) {
                ModuleHealth$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
            }

            private static final OfByte ErrorThresholdStatus$LAYOUT = (OfByte)$LAYOUT.select(groupElement("ErrorThresholdStatus"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * BYTE ErrorThresholdStatus
             * }
             */
            public static final OfByte ErrorThresholdStatus$layout() {
                return ErrorThresholdStatus$LAYOUT;
            }

            private static final long ErrorThresholdStatus$OFFSET = 3;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * BYTE ErrorThresholdStatus
             * }
             */
            public static final long ErrorThresholdStatus$offset() {
                return ErrorThresholdStatus$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * BYTE ErrorThresholdStatus
             * }
             */
            public static byte ErrorThresholdStatus(MemorySegment struct) {
                return struct.get(ErrorThresholdStatus$LAYOUT, ErrorThresholdStatus$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * BYTE ErrorThresholdStatus
             * }
             */
            public static void ErrorThresholdStatus(MemorySegment struct, byte fieldValue) {
                struct.set(ErrorThresholdStatus$LAYOUT, ErrorThresholdStatus$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index) {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator) {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout NVDIMM_N$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("NVDIMM_N"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     BYTE CriticalHealth;
         *     BYTE ModuleHealth[2];
         *     BYTE ErrorThresholdStatus;
         * } NVDIMM_N
         * }
         */
        public static final GroupLayout NVDIMM_N$layout() {
            return NVDIMM_N$LAYOUT;
        }

        private static final long NVDIMM_N$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     BYTE CriticalHealth;
         *     BYTE ModuleHealth[2];
         *     BYTE ErrorThresholdStatus;
         * } NVDIMM_N
         * }
         */
        public static final long NVDIMM_N$offset() {
            return NVDIMM_N$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     BYTE CriticalHealth;
         *     BYTE ModuleHealth[2];
         *     BYTE ErrorThresholdStatus;
         * } NVDIMM_N
         * }
         */
        public static MemorySegment NVDIMM_N(MemorySegment union) {
            return union.asSlice(NVDIMM_N$OFFSET, NVDIMM_N$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     BYTE CriticalHealth;
         *     BYTE ModuleHealth[2];
         *     BYTE ErrorThresholdStatus;
         * } NVDIMM_N
         * }
         */
        public static void NVDIMM_N(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, NVDIMM_N$OFFSET, NVDIMM_N$LAYOUT.byteSize());
        }

        private static final OfInt AsUlong$LAYOUT = (OfInt)$LAYOUT.select(groupElement("AsUlong"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD AsUlong
         * }
         */
        public static final OfInt AsUlong$layout() {
            return AsUlong$LAYOUT;
        }

        private static final long AsUlong$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD AsUlong
         * }
         */
        public static final long AsUlong$offset() {
            return AsUlong$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD AsUlong
         * }
         */
        public static int AsUlong(MemorySegment union) {
            return union.get(AsUlong$LAYOUT, AsUlong$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD AsUlong
         * }
         */
        public static void AsUlong(MemorySegment union, int fieldValue) {
            union.set(AsUlong$LAYOUT, AsUlong$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout RawBytes$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("RawBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         BYTE SenseKey;
     *         BYTE ASC;
     *         BYTE ASCQ;
     *         BYTE Reserved;
     *     } ScsiSenseKey;
     *     struct {
     *         BYTE CriticalHealth;
     *         BYTE ModuleHealth[2];
     *         BYTE ErrorThresholdStatus;
     *     } NVDIMM_N;
     *     DWORD AsUlong;
     * } RawBytes
     * }
     */
    public static final GroupLayout RawBytes$layout() {
        return RawBytes$LAYOUT;
    }

    private static final long RawBytes$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         BYTE SenseKey;
     *         BYTE ASC;
     *         BYTE ASCQ;
     *         BYTE Reserved;
     *     } ScsiSenseKey;
     *     struct {
     *         BYTE CriticalHealth;
     *         BYTE ModuleHealth[2];
     *         BYTE ErrorThresholdStatus;
     *     } NVDIMM_N;
     *     DWORD AsUlong;
     * } RawBytes
     * }
     */
    public static final long RawBytes$offset() {
        return RawBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         BYTE SenseKey;
     *         BYTE ASC;
     *         BYTE ASCQ;
     *         BYTE Reserved;
     *     } ScsiSenseKey;
     *     struct {
     *         BYTE CriticalHealth;
     *         BYTE ModuleHealth[2];
     *         BYTE ErrorThresholdStatus;
     *     } NVDIMM_N;
     *     DWORD AsUlong;
     * } RawBytes
     * }
     */
    public static MemorySegment RawBytes(MemorySegment struct) {
        return struct.asSlice(RawBytes$OFFSET, RawBytes$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         BYTE SenseKey;
     *         BYTE ASC;
     *         BYTE ASCQ;
     *         BYTE Reserved;
     *     } ScsiSenseKey;
     *     struct {
     *         BYTE CriticalHealth;
     *         BYTE ModuleHealth[2];
     *         BYTE ErrorThresholdStatus;
     *     } NVDIMM_N;
     *     DWORD AsUlong;
     * } RawBytes
     * }
     */
    public static void RawBytes(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, RawBytes$OFFSET, RawBytes$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

