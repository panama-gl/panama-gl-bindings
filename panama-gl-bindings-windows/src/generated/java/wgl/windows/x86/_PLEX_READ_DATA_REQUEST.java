// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _PLEX_READ_DATA_REQUEST {
 *     LARGE_INTEGER ByteOffset;
 *     DWORD ByteLength;
 *     DWORD PlexNumber;
 * }
 * }
 */
public class _PLEX_READ_DATA_REQUEST {

    _PLEX_READ_DATA_REQUEST() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _LARGE_INTEGER.layout().withName("ByteOffset"),
        wgl_h.C_LONG.withName("ByteLength"),
        wgl_h.C_LONG.withName("PlexNumber")
    ).withName("_PLEX_READ_DATA_REQUEST");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout ByteOffset$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ByteOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LARGE_INTEGER ByteOffset
     * }
     */
    public static final GroupLayout ByteOffset$layout() {
        return ByteOffset$LAYOUT;
    }

    private static final long ByteOffset$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LARGE_INTEGER ByteOffset
     * }
     */
    public static final long ByteOffset$offset() {
        return ByteOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER ByteOffset
     * }
     */
    public static MemorySegment ByteOffset(MemorySegment struct) {
        return struct.asSlice(ByteOffset$OFFSET, ByteOffset$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER ByteOffset
     * }
     */
    public static void ByteOffset(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ByteOffset$OFFSET, ByteOffset$LAYOUT.byteSize());
    }

    private static final OfInt ByteLength$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ByteLength"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD ByteLength
     * }
     */
    public static final OfInt ByteLength$layout() {
        return ByteLength$LAYOUT;
    }

    private static final long ByteLength$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD ByteLength
     * }
     */
    public static final long ByteLength$offset() {
        return ByteLength$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD ByteLength
     * }
     */
    public static int ByteLength(MemorySegment struct) {
        return struct.get(ByteLength$LAYOUT, ByteLength$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD ByteLength
     * }
     */
    public static void ByteLength(MemorySegment struct, int fieldValue) {
        struct.set(ByteLength$LAYOUT, ByteLength$OFFSET, fieldValue);
    }

    private static final OfInt PlexNumber$LAYOUT = (OfInt)$LAYOUT.select(groupElement("PlexNumber"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD PlexNumber
     * }
     */
    public static final OfInt PlexNumber$layout() {
        return PlexNumber$LAYOUT;
    }

    private static final long PlexNumber$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD PlexNumber
     * }
     */
    public static final long PlexNumber$offset() {
        return PlexNumber$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD PlexNumber
     * }
     */
    public static int PlexNumber(MemorySegment struct) {
        return struct.get(PlexNumber$LAYOUT, PlexNumber$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD PlexNumber
     * }
     */
    public static void PlexNumber(MemorySegment struct, int fieldValue) {
        struct.set(PlexNumber$LAYOUT, PlexNumber$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

