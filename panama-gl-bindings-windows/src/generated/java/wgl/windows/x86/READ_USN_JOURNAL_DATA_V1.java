// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     USN StartUsn;
 *     DWORD ReasonMask;
 *     DWORD ReturnOnlyOnClose;
 *     DWORDLONG Timeout;
 *     DWORDLONG BytesToWaitFor;
 *     DWORDLONG UsnJournalID;
 *     WORD MinMajorVersion;
 *     WORD MaxMajorVersion;
 * }
 * }
 */
public class READ_USN_JOURNAL_DATA_V1 {

    READ_USN_JOURNAL_DATA_V1() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG_LONG.withName("StartUsn"),
        wgl_h.C_LONG.withName("ReasonMask"),
        wgl_h.C_LONG.withName("ReturnOnlyOnClose"),
        wgl_h.C_LONG_LONG.withName("Timeout"),
        wgl_h.C_LONG_LONG.withName("BytesToWaitFor"),
        wgl_h.C_LONG_LONG.withName("UsnJournalID"),
        wgl_h.C_SHORT.withName("MinMajorVersion"),
        wgl_h.C_SHORT.withName("MaxMajorVersion"),
        MemoryLayout.paddingLayout(4)
    ).withName("$anon$10799:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong StartUsn$LAYOUT = (OfLong)$LAYOUT.select(groupElement("StartUsn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * USN StartUsn
     * }
     */
    public static final OfLong StartUsn$layout() {
        return StartUsn$LAYOUT;
    }

    private static final long StartUsn$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * USN StartUsn
     * }
     */
    public static final long StartUsn$offset() {
        return StartUsn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * USN StartUsn
     * }
     */
    public static long StartUsn(MemorySegment struct) {
        return struct.get(StartUsn$LAYOUT, StartUsn$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * USN StartUsn
     * }
     */
    public static void StartUsn(MemorySegment struct, long fieldValue) {
        struct.set(StartUsn$LAYOUT, StartUsn$OFFSET, fieldValue);
    }

    private static final OfInt ReasonMask$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ReasonMask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD ReasonMask
     * }
     */
    public static final OfInt ReasonMask$layout() {
        return ReasonMask$LAYOUT;
    }

    private static final long ReasonMask$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD ReasonMask
     * }
     */
    public static final long ReasonMask$offset() {
        return ReasonMask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD ReasonMask
     * }
     */
    public static int ReasonMask(MemorySegment struct) {
        return struct.get(ReasonMask$LAYOUT, ReasonMask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD ReasonMask
     * }
     */
    public static void ReasonMask(MemorySegment struct, int fieldValue) {
        struct.set(ReasonMask$LAYOUT, ReasonMask$OFFSET, fieldValue);
    }

    private static final OfInt ReturnOnlyOnClose$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ReturnOnlyOnClose"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD ReturnOnlyOnClose
     * }
     */
    public static final OfInt ReturnOnlyOnClose$layout() {
        return ReturnOnlyOnClose$LAYOUT;
    }

    private static final long ReturnOnlyOnClose$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD ReturnOnlyOnClose
     * }
     */
    public static final long ReturnOnlyOnClose$offset() {
        return ReturnOnlyOnClose$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD ReturnOnlyOnClose
     * }
     */
    public static int ReturnOnlyOnClose(MemorySegment struct) {
        return struct.get(ReturnOnlyOnClose$LAYOUT, ReturnOnlyOnClose$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD ReturnOnlyOnClose
     * }
     */
    public static void ReturnOnlyOnClose(MemorySegment struct, int fieldValue) {
        struct.set(ReturnOnlyOnClose$LAYOUT, ReturnOnlyOnClose$OFFSET, fieldValue);
    }

    private static final OfLong Timeout$LAYOUT = (OfLong)$LAYOUT.select(groupElement("Timeout"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG Timeout
     * }
     */
    public static final OfLong Timeout$layout() {
        return Timeout$LAYOUT;
    }

    private static final long Timeout$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG Timeout
     * }
     */
    public static final long Timeout$offset() {
        return Timeout$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG Timeout
     * }
     */
    public static long Timeout(MemorySegment struct) {
        return struct.get(Timeout$LAYOUT, Timeout$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG Timeout
     * }
     */
    public static void Timeout(MemorySegment struct, long fieldValue) {
        struct.set(Timeout$LAYOUT, Timeout$OFFSET, fieldValue);
    }

    private static final OfLong BytesToWaitFor$LAYOUT = (OfLong)$LAYOUT.select(groupElement("BytesToWaitFor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG BytesToWaitFor
     * }
     */
    public static final OfLong BytesToWaitFor$layout() {
        return BytesToWaitFor$LAYOUT;
    }

    private static final long BytesToWaitFor$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG BytesToWaitFor
     * }
     */
    public static final long BytesToWaitFor$offset() {
        return BytesToWaitFor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG BytesToWaitFor
     * }
     */
    public static long BytesToWaitFor(MemorySegment struct) {
        return struct.get(BytesToWaitFor$LAYOUT, BytesToWaitFor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG BytesToWaitFor
     * }
     */
    public static void BytesToWaitFor(MemorySegment struct, long fieldValue) {
        struct.set(BytesToWaitFor$LAYOUT, BytesToWaitFor$OFFSET, fieldValue);
    }

    private static final OfLong UsnJournalID$LAYOUT = (OfLong)$LAYOUT.select(groupElement("UsnJournalID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG UsnJournalID
     * }
     */
    public static final OfLong UsnJournalID$layout() {
        return UsnJournalID$LAYOUT;
    }

    private static final long UsnJournalID$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG UsnJournalID
     * }
     */
    public static final long UsnJournalID$offset() {
        return UsnJournalID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG UsnJournalID
     * }
     */
    public static long UsnJournalID(MemorySegment struct) {
        return struct.get(UsnJournalID$LAYOUT, UsnJournalID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG UsnJournalID
     * }
     */
    public static void UsnJournalID(MemorySegment struct, long fieldValue) {
        struct.set(UsnJournalID$LAYOUT, UsnJournalID$OFFSET, fieldValue);
    }

    private static final OfShort MinMajorVersion$LAYOUT = (OfShort)$LAYOUT.select(groupElement("MinMajorVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD MinMajorVersion
     * }
     */
    public static final OfShort MinMajorVersion$layout() {
        return MinMajorVersion$LAYOUT;
    }

    private static final long MinMajorVersion$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD MinMajorVersion
     * }
     */
    public static final long MinMajorVersion$offset() {
        return MinMajorVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD MinMajorVersion
     * }
     */
    public static short MinMajorVersion(MemorySegment struct) {
        return struct.get(MinMajorVersion$LAYOUT, MinMajorVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD MinMajorVersion
     * }
     */
    public static void MinMajorVersion(MemorySegment struct, short fieldValue) {
        struct.set(MinMajorVersion$LAYOUT, MinMajorVersion$OFFSET, fieldValue);
    }

    private static final OfShort MaxMajorVersion$LAYOUT = (OfShort)$LAYOUT.select(groupElement("MaxMajorVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD MaxMajorVersion
     * }
     */
    public static final OfShort MaxMajorVersion$layout() {
        return MaxMajorVersion$LAYOUT;
    }

    private static final long MaxMajorVersion$OFFSET = 42;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD MaxMajorVersion
     * }
     */
    public static final long MaxMajorVersion$offset() {
        return MaxMajorVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD MaxMajorVersion
     * }
     */
    public static short MaxMajorVersion(MemorySegment struct) {
        return struct.get(MaxMajorVersion$LAYOUT, MaxMajorVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD MaxMajorVersion
     * }
     */
    public static void MaxMajorVersion(MemorySegment struct, short fieldValue) {
        struct.set(MaxMajorVersion$LAYOUT, MaxMajorVersion$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

