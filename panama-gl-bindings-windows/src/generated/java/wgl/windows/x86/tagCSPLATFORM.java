// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tagCSPLATFORM {
 *     DWORD dwPlatformId;
 *     DWORD dwVersionHi;
 *     DWORD dwVersionLo;
 *     DWORD dwProcessorArch;
 * }
 * }
 */
public class tagCSPLATFORM {

    tagCSPLATFORM() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("dwPlatformId"),
        wgl_h.C_LONG.withName("dwVersionHi"),
        wgl_h.C_LONG.withName("dwVersionLo"),
        wgl_h.C_LONG.withName("dwProcessorArch")
    ).withName("tagCSPLATFORM");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt dwPlatformId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwPlatformId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwPlatformId
     * }
     */
    public static final OfInt dwPlatformId$layout() {
        return dwPlatformId$LAYOUT;
    }

    private static final long dwPlatformId$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwPlatformId
     * }
     */
    public static final long dwPlatformId$offset() {
        return dwPlatformId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwPlatformId
     * }
     */
    public static int dwPlatformId(MemorySegment struct) {
        return struct.get(dwPlatformId$LAYOUT, dwPlatformId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwPlatformId
     * }
     */
    public static void dwPlatformId(MemorySegment struct, int fieldValue) {
        struct.set(dwPlatformId$LAYOUT, dwPlatformId$OFFSET, fieldValue);
    }

    private static final OfInt dwVersionHi$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwVersionHi"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwVersionHi
     * }
     */
    public static final OfInt dwVersionHi$layout() {
        return dwVersionHi$LAYOUT;
    }

    private static final long dwVersionHi$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwVersionHi
     * }
     */
    public static final long dwVersionHi$offset() {
        return dwVersionHi$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwVersionHi
     * }
     */
    public static int dwVersionHi(MemorySegment struct) {
        return struct.get(dwVersionHi$LAYOUT, dwVersionHi$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwVersionHi
     * }
     */
    public static void dwVersionHi(MemorySegment struct, int fieldValue) {
        struct.set(dwVersionHi$LAYOUT, dwVersionHi$OFFSET, fieldValue);
    }

    private static final OfInt dwVersionLo$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwVersionLo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwVersionLo
     * }
     */
    public static final OfInt dwVersionLo$layout() {
        return dwVersionLo$LAYOUT;
    }

    private static final long dwVersionLo$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwVersionLo
     * }
     */
    public static final long dwVersionLo$offset() {
        return dwVersionLo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwVersionLo
     * }
     */
    public static int dwVersionLo(MemorySegment struct) {
        return struct.get(dwVersionLo$LAYOUT, dwVersionLo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwVersionLo
     * }
     */
    public static void dwVersionLo(MemorySegment struct, int fieldValue) {
        struct.set(dwVersionLo$LAYOUT, dwVersionLo$OFFSET, fieldValue);
    }

    private static final OfInt dwProcessorArch$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwProcessorArch"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwProcessorArch
     * }
     */
    public static final OfInt dwProcessorArch$layout() {
        return dwProcessorArch$LAYOUT;
    }

    private static final long dwProcessorArch$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwProcessorArch
     * }
     */
    public static final long dwProcessorArch$offset() {
        return dwProcessorArch$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwProcessorArch
     * }
     */
    public static int dwProcessorArch(MemorySegment struct) {
        return struct.get(dwProcessorArch$LAYOUT, dwProcessorArch$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwProcessorArch
     * }
     */
    public static void dwProcessorArch(MemorySegment struct, int fieldValue) {
        struct.set(dwProcessorArch$LAYOUT, dwProcessorArch$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

