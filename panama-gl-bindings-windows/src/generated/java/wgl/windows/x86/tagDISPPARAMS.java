// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tagDISPPARAMS {
 *     VARIANTARG *rgvarg;
 *     DISPID *rgdispidNamedArgs;
 *     UINT cArgs;
 *     UINT cNamedArgs;
 * }
 * }
 */
public class tagDISPPARAMS {

    tagDISPPARAMS() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("rgvarg"),
        wgl_h.C_POINTER.withName("rgdispidNamedArgs"),
        wgl_h.C_INT.withName("cArgs"),
        wgl_h.C_INT.withName("cNamedArgs")
    ).withName("tagDISPPARAMS");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout rgvarg$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("rgvarg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VARIANTARG *rgvarg
     * }
     */
    public static final AddressLayout rgvarg$layout() {
        return rgvarg$LAYOUT;
    }

    private static final long rgvarg$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VARIANTARG *rgvarg
     * }
     */
    public static final long rgvarg$offset() {
        return rgvarg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VARIANTARG *rgvarg
     * }
     */
    public static MemorySegment rgvarg(MemorySegment struct) {
        return struct.get(rgvarg$LAYOUT, rgvarg$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VARIANTARG *rgvarg
     * }
     */
    public static void rgvarg(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(rgvarg$LAYOUT, rgvarg$OFFSET, fieldValue);
    }

    private static final AddressLayout rgdispidNamedArgs$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("rgdispidNamedArgs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DISPID *rgdispidNamedArgs
     * }
     */
    public static final AddressLayout rgdispidNamedArgs$layout() {
        return rgdispidNamedArgs$LAYOUT;
    }

    private static final long rgdispidNamedArgs$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DISPID *rgdispidNamedArgs
     * }
     */
    public static final long rgdispidNamedArgs$offset() {
        return rgdispidNamedArgs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DISPID *rgdispidNamedArgs
     * }
     */
    public static MemorySegment rgdispidNamedArgs(MemorySegment struct) {
        return struct.get(rgdispidNamedArgs$LAYOUT, rgdispidNamedArgs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DISPID *rgdispidNamedArgs
     * }
     */
    public static void rgdispidNamedArgs(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(rgdispidNamedArgs$LAYOUT, rgdispidNamedArgs$OFFSET, fieldValue);
    }

    private static final OfInt cArgs$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cArgs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UINT cArgs
     * }
     */
    public static final OfInt cArgs$layout() {
        return cArgs$LAYOUT;
    }

    private static final long cArgs$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UINT cArgs
     * }
     */
    public static final long cArgs$offset() {
        return cArgs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UINT cArgs
     * }
     */
    public static int cArgs(MemorySegment struct) {
        return struct.get(cArgs$LAYOUT, cArgs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UINT cArgs
     * }
     */
    public static void cArgs(MemorySegment struct, int fieldValue) {
        struct.set(cArgs$LAYOUT, cArgs$OFFSET, fieldValue);
    }

    private static final OfInt cNamedArgs$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cNamedArgs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UINT cNamedArgs
     * }
     */
    public static final OfInt cNamedArgs$layout() {
        return cNamedArgs$LAYOUT;
    }

    private static final long cNamedArgs$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UINT cNamedArgs
     * }
     */
    public static final long cNamedArgs$offset() {
        return cNamedArgs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UINT cNamedArgs
     * }
     */
    public static int cNamedArgs(MemorySegment struct) {
        return struct.get(cNamedArgs$LAYOUT, cNamedArgs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UINT cNamedArgs
     * }
     */
    public static void cNamedArgs(MemorySegment struct, int fieldValue) {
        struct.set(cNamedArgs$LAYOUT, cNamedArgs$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

