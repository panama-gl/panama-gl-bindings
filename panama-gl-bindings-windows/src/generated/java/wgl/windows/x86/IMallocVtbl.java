// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct IMallocVtbl {
 *     HRESULT (*QueryInterface)(IMalloc *, const IID *const, void **) __attribute__((stdcall));
 *     ULONG (*AddRef)(IMalloc *) __attribute__((stdcall));
 *     ULONG (*Release)(IMalloc *) __attribute__((stdcall));
 *     void *(*Alloc)(IMalloc *, SIZE_T) __attribute__((stdcall));
 *     void *(*Realloc)(IMalloc *, void *, SIZE_T) __attribute__((stdcall));
 *     void (*Free)(IMalloc *, void *) __attribute__((stdcall));
 *     SIZE_T (*GetSize)(IMalloc *, void *) __attribute__((stdcall));
 *     int (*DidAlloc)(IMalloc *, void *) __attribute__((stdcall));
 *     void (*HeapMinimize)(IMalloc *) __attribute__((stdcall));
 * }
 * }
 */
public class IMallocVtbl {

    IMallocVtbl() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("QueryInterface"),
        wgl_h.C_POINTER.withName("AddRef"),
        wgl_h.C_POINTER.withName("Release"),
        wgl_h.C_POINTER.withName("Alloc"),
        wgl_h.C_POINTER.withName("Realloc"),
        wgl_h.C_POINTER.withName("Free"),
        wgl_h.C_POINTER.withName("GetSize"),
        wgl_h.C_POINTER.withName("DidAlloc"),
        wgl_h.C_POINTER.withName("HeapMinimize")
    ).withName("IMallocVtbl");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IMalloc *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static class QueryInterface {

        QueryInterface() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(QueryInterface.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(QueryInterface.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout QueryInterface$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("QueryInterface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IMalloc *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout QueryInterface$layout() {
        return QueryInterface$LAYOUT;
    }

    private static final long QueryInterface$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IMalloc *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final long QueryInterface$offset() {
        return QueryInterface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IMalloc *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment QueryInterface(MemorySegment struct) {
        return struct.get(QueryInterface$LAYOUT, QueryInterface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IMalloc *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static void QueryInterface(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(QueryInterface$LAYOUT, QueryInterface$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*AddRef)(IMalloc *) __attribute__((stdcall))
     * }
     */
    public static class AddRef {

        AddRef() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(AddRef.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(AddRef.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout AddRef$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("AddRef"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IMalloc *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout AddRef$layout() {
        return AddRef$LAYOUT;
    }

    private static final long AddRef$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IMalloc *) __attribute__((stdcall))
     * }
     */
    public static final long AddRef$offset() {
        return AddRef$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IMalloc *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment AddRef(MemorySegment struct) {
        return struct.get(AddRef$LAYOUT, AddRef$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IMalloc *) __attribute__((stdcall))
     * }
     */
    public static void AddRef(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(AddRef$LAYOUT, AddRef$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*Release)(IMalloc *) __attribute__((stdcall))
     * }
     */
    public static class Release {

        Release() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Release.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Release.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Release$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Release"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IMalloc *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Release$layout() {
        return Release$LAYOUT;
    }

    private static final long Release$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IMalloc *) __attribute__((stdcall))
     * }
     */
    public static final long Release$offset() {
        return Release$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IMalloc *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Release(MemorySegment struct) {
        return struct.get(Release$LAYOUT, Release$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IMalloc *) __attribute__((stdcall))
     * }
     */
    public static void Release(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Release$LAYOUT, Release$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void *(*Alloc)(IMalloc *, SIZE_T) __attribute__((stdcall))
     * }
     */
    public static class Alloc {

        Alloc() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, long _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Alloc.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Alloc.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Alloc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Alloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *(*Alloc)(IMalloc *, SIZE_T) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Alloc$layout() {
        return Alloc$LAYOUT;
    }

    private static final long Alloc$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *(*Alloc)(IMalloc *, SIZE_T) __attribute__((stdcall))
     * }
     */
    public static final long Alloc$offset() {
        return Alloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *(*Alloc)(IMalloc *, SIZE_T) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Alloc(MemorySegment struct) {
        return struct.get(Alloc$LAYOUT, Alloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *(*Alloc)(IMalloc *, SIZE_T) __attribute__((stdcall))
     * }
     */
    public static void Alloc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Alloc$LAYOUT, Alloc$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void *(*Realloc)(IMalloc *, void *, SIZE_T) __attribute__((stdcall))
     * }
     */
    public static class Realloc {

        Realloc() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1, long _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Realloc.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Realloc.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, long _x2) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Realloc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Realloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *(*Realloc)(IMalloc *, void *, SIZE_T) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Realloc$layout() {
        return Realloc$LAYOUT;
    }

    private static final long Realloc$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *(*Realloc)(IMalloc *, void *, SIZE_T) __attribute__((stdcall))
     * }
     */
    public static final long Realloc$offset() {
        return Realloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *(*Realloc)(IMalloc *, void *, SIZE_T) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Realloc(MemorySegment struct) {
        return struct.get(Realloc$LAYOUT, Realloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *(*Realloc)(IMalloc *, void *, SIZE_T) __attribute__((stdcall))
     * }
     */
    public static void Realloc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Realloc$LAYOUT, Realloc$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*Free)(IMalloc *, void *) __attribute__((stdcall))
     * }
     */
    public static class Free {

        Free() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Free.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Free.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Free$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Free"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*Free)(IMalloc *, void *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Free$layout() {
        return Free$LAYOUT;
    }

    private static final long Free$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*Free)(IMalloc *, void *) __attribute__((stdcall))
     * }
     */
    public static final long Free$offset() {
        return Free$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*Free)(IMalloc *, void *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Free(MemorySegment struct) {
        return struct.get(Free$LAYOUT, Free$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*Free)(IMalloc *, void *) __attribute__((stdcall))
     * }
     */
    public static void Free(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Free$LAYOUT, Free$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * SIZE_T (*GetSize)(IMalloc *, void *) __attribute__((stdcall))
     * }
     */
    public static class GetSize {

        GetSize() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            long apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetSize.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetSize.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static long invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (long) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetSize$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SIZE_T (*GetSize)(IMalloc *, void *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetSize$layout() {
        return GetSize$LAYOUT;
    }

    private static final long GetSize$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SIZE_T (*GetSize)(IMalloc *, void *) __attribute__((stdcall))
     * }
     */
    public static final long GetSize$offset() {
        return GetSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SIZE_T (*GetSize)(IMalloc *, void *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetSize(MemorySegment struct) {
        return struct.get(GetSize$LAYOUT, GetSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SIZE_T (*GetSize)(IMalloc *, void *) __attribute__((stdcall))
     * }
     */
    public static void GetSize(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetSize$LAYOUT, GetSize$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*DidAlloc)(IMalloc *, void *) __attribute__((stdcall))
     * }
     */
    public static class DidAlloc {

        DidAlloc() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_INT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(DidAlloc.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(DidAlloc.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout DidAlloc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("DidAlloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*DidAlloc)(IMalloc *, void *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout DidAlloc$layout() {
        return DidAlloc$LAYOUT;
    }

    private static final long DidAlloc$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*DidAlloc)(IMalloc *, void *) __attribute__((stdcall))
     * }
     */
    public static final long DidAlloc$offset() {
        return DidAlloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*DidAlloc)(IMalloc *, void *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment DidAlloc(MemorySegment struct) {
        return struct.get(DidAlloc$LAYOUT, DidAlloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*DidAlloc)(IMalloc *, void *) __attribute__((stdcall))
     * }
     */
    public static void DidAlloc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(DidAlloc$LAYOUT, DidAlloc$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*HeapMinimize)(IMalloc *) __attribute__((stdcall))
     * }
     */
    public static class HeapMinimize {

        HeapMinimize() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(HeapMinimize.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(HeapMinimize.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout HeapMinimize$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("HeapMinimize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*HeapMinimize)(IMalloc *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout HeapMinimize$layout() {
        return HeapMinimize$LAYOUT;
    }

    private static final long HeapMinimize$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*HeapMinimize)(IMalloc *) __attribute__((stdcall))
     * }
     */
    public static final long HeapMinimize$offset() {
        return HeapMinimize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*HeapMinimize)(IMalloc *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment HeapMinimize(MemorySegment struct) {
        return struct.get(HeapMinimize$LAYOUT, HeapMinimize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*HeapMinimize)(IMalloc *) __attribute__((stdcall))
     * }
     */
    public static void HeapMinimize(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(HeapMinimize$LAYOUT, HeapMinimize$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

