// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct IPropertyStorageVtbl {
 *     HRESULT (*QueryInterface)(IPropertyStorage *, const IID *const, void **) __attribute__((stdcall));
 *     ULONG (*AddRef)(IPropertyStorage *) __attribute__((stdcall));
 *     ULONG (*Release)(IPropertyStorage *) __attribute__((stdcall));
 *     HRESULT (*ReadMultiple)(IPropertyStorage *, ULONG, const PROPSPEC *, PROPVARIANT *) __attribute__((stdcall));
 *     HRESULT (*WriteMultiple)(IPropertyStorage *, ULONG, const PROPSPEC *, const PROPVARIANT *, PROPID) __attribute__((stdcall));
 *     HRESULT (*DeleteMultiple)(IPropertyStorage *, ULONG, const PROPSPEC *) __attribute__((stdcall));
 *     HRESULT (*ReadPropertyNames)(IPropertyStorage *, ULONG, const PROPID *, LPOLESTR *) __attribute__((stdcall));
 *     HRESULT (*WritePropertyNames)(IPropertyStorage *, ULONG, const PROPID *, const LPOLESTR *) __attribute__((stdcall));
 *     HRESULT (*DeletePropertyNames)(IPropertyStorage *, ULONG, const PROPID *) __attribute__((stdcall));
 *     HRESULT (*Commit)(IPropertyStorage *, DWORD) __attribute__((stdcall));
 *     HRESULT (*Revert)(IPropertyStorage *) __attribute__((stdcall));
 *     HRESULT (*Enum)(IPropertyStorage *, IEnumSTATPROPSTG **) __attribute__((stdcall));
 *     HRESULT (*SetTimes)(IPropertyStorage *, const FILETIME *, const FILETIME *, const FILETIME *) __attribute__((stdcall));
 *     HRESULT (*SetClass)(IPropertyStorage *, const IID *const) __attribute__((stdcall));
 *     HRESULT (*Stat)(IPropertyStorage *, STATPROPSETSTG *) __attribute__((stdcall));
 * }
 * }
 */
public class IPropertyStorageVtbl {

    IPropertyStorageVtbl() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("QueryInterface"),
        wgl_h.C_POINTER.withName("AddRef"),
        wgl_h.C_POINTER.withName("Release"),
        wgl_h.C_POINTER.withName("ReadMultiple"),
        wgl_h.C_POINTER.withName("WriteMultiple"),
        wgl_h.C_POINTER.withName("DeleteMultiple"),
        wgl_h.C_POINTER.withName("ReadPropertyNames"),
        wgl_h.C_POINTER.withName("WritePropertyNames"),
        wgl_h.C_POINTER.withName("DeletePropertyNames"),
        wgl_h.C_POINTER.withName("Commit"),
        wgl_h.C_POINTER.withName("Revert"),
        wgl_h.C_POINTER.withName("Enum"),
        wgl_h.C_POINTER.withName("SetTimes"),
        wgl_h.C_POINTER.withName("SetClass"),
        wgl_h.C_POINTER.withName("Stat")
    ).withName("IPropertyStorageVtbl");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IPropertyStorage *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static class QueryInterface {

        QueryInterface() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(QueryInterface.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(QueryInterface.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout QueryInterface$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("QueryInterface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IPropertyStorage *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout QueryInterface$layout() {
        return QueryInterface$LAYOUT;
    }

    private static final long QueryInterface$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IPropertyStorage *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final long QueryInterface$offset() {
        return QueryInterface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IPropertyStorage *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment QueryInterface(MemorySegment struct) {
        return struct.get(QueryInterface$LAYOUT, QueryInterface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IPropertyStorage *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static void QueryInterface(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(QueryInterface$LAYOUT, QueryInterface$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*AddRef)(IPropertyStorage *) __attribute__((stdcall))
     * }
     */
    public static class AddRef {

        AddRef() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(AddRef.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(AddRef.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout AddRef$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("AddRef"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IPropertyStorage *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout AddRef$layout() {
        return AddRef$LAYOUT;
    }

    private static final long AddRef$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IPropertyStorage *) __attribute__((stdcall))
     * }
     */
    public static final long AddRef$offset() {
        return AddRef$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IPropertyStorage *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment AddRef(MemorySegment struct) {
        return struct.get(AddRef$LAYOUT, AddRef$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IPropertyStorage *) __attribute__((stdcall))
     * }
     */
    public static void AddRef(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(AddRef$LAYOUT, AddRef$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*Release)(IPropertyStorage *) __attribute__((stdcall))
     * }
     */
    public static class Release {

        Release() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Release.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Release.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Release$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Release"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IPropertyStorage *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Release$layout() {
        return Release$LAYOUT;
    }

    private static final long Release$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IPropertyStorage *) __attribute__((stdcall))
     * }
     */
    public static final long Release$offset() {
        return Release$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IPropertyStorage *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Release(MemorySegment struct) {
        return struct.get(Release$LAYOUT, Release$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IPropertyStorage *) __attribute__((stdcall))
     * }
     */
    public static void Release(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Release$LAYOUT, Release$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*ReadMultiple)(IPropertyStorage *, ULONG, const PROPSPEC *, PROPVARIANT *) __attribute__((stdcall))
     * }
     */
    public static class ReadMultiple {

        ReadMultiple() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(ReadMultiple.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(ReadMultiple.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout ReadMultiple$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ReadMultiple"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*ReadMultiple)(IPropertyStorage *, ULONG, const PROPSPEC *, PROPVARIANT *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout ReadMultiple$layout() {
        return ReadMultiple$LAYOUT;
    }

    private static final long ReadMultiple$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*ReadMultiple)(IPropertyStorage *, ULONG, const PROPSPEC *, PROPVARIANT *) __attribute__((stdcall))
     * }
     */
    public static final long ReadMultiple$offset() {
        return ReadMultiple$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*ReadMultiple)(IPropertyStorage *, ULONG, const PROPSPEC *, PROPVARIANT *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment ReadMultiple(MemorySegment struct) {
        return struct.get(ReadMultiple$LAYOUT, ReadMultiple$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*ReadMultiple)(IPropertyStorage *, ULONG, const PROPSPEC *, PROPVARIANT *) __attribute__((stdcall))
     * }
     */
    public static void ReadMultiple(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ReadMultiple$LAYOUT, ReadMultiple$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*WriteMultiple)(IPropertyStorage *, ULONG, const PROPSPEC *, const PROPVARIANT *, PROPID) __attribute__((stdcall))
     * }
     */
    public static class WriteMultiple {

        WriteMultiple() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, int _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(WriteMultiple.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(WriteMultiple.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, int _x4) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout WriteMultiple$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("WriteMultiple"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*WriteMultiple)(IPropertyStorage *, ULONG, const PROPSPEC *, const PROPVARIANT *, PROPID) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout WriteMultiple$layout() {
        return WriteMultiple$LAYOUT;
    }

    private static final long WriteMultiple$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*WriteMultiple)(IPropertyStorage *, ULONG, const PROPSPEC *, const PROPVARIANT *, PROPID) __attribute__((stdcall))
     * }
     */
    public static final long WriteMultiple$offset() {
        return WriteMultiple$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*WriteMultiple)(IPropertyStorage *, ULONG, const PROPSPEC *, const PROPVARIANT *, PROPID) __attribute__((stdcall))
     * }
     */
    public static MemorySegment WriteMultiple(MemorySegment struct) {
        return struct.get(WriteMultiple$LAYOUT, WriteMultiple$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*WriteMultiple)(IPropertyStorage *, ULONG, const PROPSPEC *, const PROPVARIANT *, PROPID) __attribute__((stdcall))
     * }
     */
    public static void WriteMultiple(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(WriteMultiple$LAYOUT, WriteMultiple$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*DeleteMultiple)(IPropertyStorage *, ULONG, const PROPSPEC *) __attribute__((stdcall))
     * }
     */
    public static class DeleteMultiple {

        DeleteMultiple() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(DeleteMultiple.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(DeleteMultiple.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout DeleteMultiple$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("DeleteMultiple"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*DeleteMultiple)(IPropertyStorage *, ULONG, const PROPSPEC *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout DeleteMultiple$layout() {
        return DeleteMultiple$LAYOUT;
    }

    private static final long DeleteMultiple$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*DeleteMultiple)(IPropertyStorage *, ULONG, const PROPSPEC *) __attribute__((stdcall))
     * }
     */
    public static final long DeleteMultiple$offset() {
        return DeleteMultiple$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*DeleteMultiple)(IPropertyStorage *, ULONG, const PROPSPEC *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment DeleteMultiple(MemorySegment struct) {
        return struct.get(DeleteMultiple$LAYOUT, DeleteMultiple$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*DeleteMultiple)(IPropertyStorage *, ULONG, const PROPSPEC *) __attribute__((stdcall))
     * }
     */
    public static void DeleteMultiple(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(DeleteMultiple$LAYOUT, DeleteMultiple$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*ReadPropertyNames)(IPropertyStorage *, ULONG, const PROPID *, LPOLESTR *) __attribute__((stdcall))
     * }
     */
    public static class ReadPropertyNames {

        ReadPropertyNames() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(ReadPropertyNames.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(ReadPropertyNames.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout ReadPropertyNames$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ReadPropertyNames"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*ReadPropertyNames)(IPropertyStorage *, ULONG, const PROPID *, LPOLESTR *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout ReadPropertyNames$layout() {
        return ReadPropertyNames$LAYOUT;
    }

    private static final long ReadPropertyNames$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*ReadPropertyNames)(IPropertyStorage *, ULONG, const PROPID *, LPOLESTR *) __attribute__((stdcall))
     * }
     */
    public static final long ReadPropertyNames$offset() {
        return ReadPropertyNames$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*ReadPropertyNames)(IPropertyStorage *, ULONG, const PROPID *, LPOLESTR *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment ReadPropertyNames(MemorySegment struct) {
        return struct.get(ReadPropertyNames$LAYOUT, ReadPropertyNames$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*ReadPropertyNames)(IPropertyStorage *, ULONG, const PROPID *, LPOLESTR *) __attribute__((stdcall))
     * }
     */
    public static void ReadPropertyNames(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ReadPropertyNames$LAYOUT, ReadPropertyNames$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*WritePropertyNames)(IPropertyStorage *, ULONG, const PROPID *, const LPOLESTR *) __attribute__((stdcall))
     * }
     */
    public static class WritePropertyNames {

        WritePropertyNames() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(WritePropertyNames.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(WritePropertyNames.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout WritePropertyNames$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("WritePropertyNames"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*WritePropertyNames)(IPropertyStorage *, ULONG, const PROPID *, const LPOLESTR *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout WritePropertyNames$layout() {
        return WritePropertyNames$LAYOUT;
    }

    private static final long WritePropertyNames$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*WritePropertyNames)(IPropertyStorage *, ULONG, const PROPID *, const LPOLESTR *) __attribute__((stdcall))
     * }
     */
    public static final long WritePropertyNames$offset() {
        return WritePropertyNames$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*WritePropertyNames)(IPropertyStorage *, ULONG, const PROPID *, const LPOLESTR *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment WritePropertyNames(MemorySegment struct) {
        return struct.get(WritePropertyNames$LAYOUT, WritePropertyNames$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*WritePropertyNames)(IPropertyStorage *, ULONG, const PROPID *, const LPOLESTR *) __attribute__((stdcall))
     * }
     */
    public static void WritePropertyNames(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(WritePropertyNames$LAYOUT, WritePropertyNames$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*DeletePropertyNames)(IPropertyStorage *, ULONG, const PROPID *) __attribute__((stdcall))
     * }
     */
    public static class DeletePropertyNames {

        DeletePropertyNames() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(DeletePropertyNames.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(DeletePropertyNames.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout DeletePropertyNames$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("DeletePropertyNames"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*DeletePropertyNames)(IPropertyStorage *, ULONG, const PROPID *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout DeletePropertyNames$layout() {
        return DeletePropertyNames$LAYOUT;
    }

    private static final long DeletePropertyNames$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*DeletePropertyNames)(IPropertyStorage *, ULONG, const PROPID *) __attribute__((stdcall))
     * }
     */
    public static final long DeletePropertyNames$offset() {
        return DeletePropertyNames$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*DeletePropertyNames)(IPropertyStorage *, ULONG, const PROPID *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment DeletePropertyNames(MemorySegment struct) {
        return struct.get(DeletePropertyNames$LAYOUT, DeletePropertyNames$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*DeletePropertyNames)(IPropertyStorage *, ULONG, const PROPID *) __attribute__((stdcall))
     * }
     */
    public static void DeletePropertyNames(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(DeletePropertyNames$LAYOUT, DeletePropertyNames$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*Commit)(IPropertyStorage *, DWORD) __attribute__((stdcall))
     * }
     */
    public static class Commit {

        Commit() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Commit.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Commit.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Commit$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Commit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*Commit)(IPropertyStorage *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Commit$layout() {
        return Commit$LAYOUT;
    }

    private static final long Commit$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*Commit)(IPropertyStorage *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final long Commit$offset() {
        return Commit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*Commit)(IPropertyStorage *, DWORD) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Commit(MemorySegment struct) {
        return struct.get(Commit$LAYOUT, Commit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*Commit)(IPropertyStorage *, DWORD) __attribute__((stdcall))
     * }
     */
    public static void Commit(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Commit$LAYOUT, Commit$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*Revert)(IPropertyStorage *) __attribute__((stdcall))
     * }
     */
    public static class Revert {

        Revert() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Revert.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Revert.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Revert$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Revert"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*Revert)(IPropertyStorage *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Revert$layout() {
        return Revert$LAYOUT;
    }

    private static final long Revert$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*Revert)(IPropertyStorage *) __attribute__((stdcall))
     * }
     */
    public static final long Revert$offset() {
        return Revert$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*Revert)(IPropertyStorage *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Revert(MemorySegment struct) {
        return struct.get(Revert$LAYOUT, Revert$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*Revert)(IPropertyStorage *) __attribute__((stdcall))
     * }
     */
    public static void Revert(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Revert$LAYOUT, Revert$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*Enum)(IPropertyStorage *, IEnumSTATPROPSTG **) __attribute__((stdcall))
     * }
     */
    public static class Enum {

        Enum() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Enum.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Enum.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Enum$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Enum"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*Enum)(IPropertyStorage *, IEnumSTATPROPSTG **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Enum$layout() {
        return Enum$LAYOUT;
    }

    private static final long Enum$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*Enum)(IPropertyStorage *, IEnumSTATPROPSTG **) __attribute__((stdcall))
     * }
     */
    public static final long Enum$offset() {
        return Enum$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*Enum)(IPropertyStorage *, IEnumSTATPROPSTG **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Enum(MemorySegment struct) {
        return struct.get(Enum$LAYOUT, Enum$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*Enum)(IPropertyStorage *, IEnumSTATPROPSTG **) __attribute__((stdcall))
     * }
     */
    public static void Enum(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Enum$LAYOUT, Enum$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetTimes)(IPropertyStorage *, const FILETIME *, const FILETIME *, const FILETIME *) __attribute__((stdcall))
     * }
     */
    public static class SetTimes {

        SetTimes() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetTimes.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetTimes.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetTimes$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetTimes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetTimes)(IPropertyStorage *, const FILETIME *, const FILETIME *, const FILETIME *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetTimes$layout() {
        return SetTimes$LAYOUT;
    }

    private static final long SetTimes$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetTimes)(IPropertyStorage *, const FILETIME *, const FILETIME *, const FILETIME *) __attribute__((stdcall))
     * }
     */
    public static final long SetTimes$offset() {
        return SetTimes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetTimes)(IPropertyStorage *, const FILETIME *, const FILETIME *, const FILETIME *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetTimes(MemorySegment struct) {
        return struct.get(SetTimes$LAYOUT, SetTimes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetTimes)(IPropertyStorage *, const FILETIME *, const FILETIME *, const FILETIME *) __attribute__((stdcall))
     * }
     */
    public static void SetTimes(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetTimes$LAYOUT, SetTimes$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*SetClass)(IPropertyStorage *, const IID *const) __attribute__((stdcall))
     * }
     */
    public static class SetClass {

        SetClass() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(SetClass.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetClass.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetClass$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetClass"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*SetClass)(IPropertyStorage *, const IID *const) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout SetClass$layout() {
        return SetClass$LAYOUT;
    }

    private static final long SetClass$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*SetClass)(IPropertyStorage *, const IID *const) __attribute__((stdcall))
     * }
     */
    public static final long SetClass$offset() {
        return SetClass$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*SetClass)(IPropertyStorage *, const IID *const) __attribute__((stdcall))
     * }
     */
    public static MemorySegment SetClass(MemorySegment struct) {
        return struct.get(SetClass$LAYOUT, SetClass$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*SetClass)(IPropertyStorage *, const IID *const) __attribute__((stdcall))
     * }
     */
    public static void SetClass(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetClass$LAYOUT, SetClass$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*Stat)(IPropertyStorage *, STATPROPSETSTG *) __attribute__((stdcall))
     * }
     */
    public static class Stat {

        Stat() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Stat.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Stat.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Stat$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Stat"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*Stat)(IPropertyStorage *, STATPROPSETSTG *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Stat$layout() {
        return Stat$LAYOUT;
    }

    private static final long Stat$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*Stat)(IPropertyStorage *, STATPROPSETSTG *) __attribute__((stdcall))
     * }
     */
    public static final long Stat$offset() {
        return Stat$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*Stat)(IPropertyStorage *, STATPROPSETSTG *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Stat(MemorySegment struct) {
        return struct.get(Stat$LAYOUT, Stat$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*Stat)(IPropertyStorage *, STATPROPSETSTG *) __attribute__((stdcall))
     * }
     */
    public static void Stat(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Stat$LAYOUT, Stat$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

