// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _SERVERSILO_BASIC_INFORMATION {
 *     DWORD ServiceSessionId;
 *     SERVERSILO_STATE State;
 *     DWORD ExitStatus;
 *     BOOLEAN IsDownlevelContainer;
 *     PVOID ApiSetSchema;
 *     PVOID HostApiSetSchema;
 * }
 * }
 */
public class _SERVERSILO_BASIC_INFORMATION {

    _SERVERSILO_BASIC_INFORMATION() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("ServiceSessionId"),
        wgl_h.C_INT.withName("State"),
        wgl_h.C_LONG.withName("ExitStatus"),
        wgl_h.C_CHAR.withName("IsDownlevelContainer"),
        MemoryLayout.paddingLayout(3),
        wgl_h.C_POINTER.withName("ApiSetSchema"),
        wgl_h.C_POINTER.withName("HostApiSetSchema")
    ).withName("_SERVERSILO_BASIC_INFORMATION");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt ServiceSessionId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ServiceSessionId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD ServiceSessionId
     * }
     */
    public static final OfInt ServiceSessionId$layout() {
        return ServiceSessionId$LAYOUT;
    }

    private static final long ServiceSessionId$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD ServiceSessionId
     * }
     */
    public static final long ServiceSessionId$offset() {
        return ServiceSessionId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD ServiceSessionId
     * }
     */
    public static int ServiceSessionId(MemorySegment struct) {
        return struct.get(ServiceSessionId$LAYOUT, ServiceSessionId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD ServiceSessionId
     * }
     */
    public static void ServiceSessionId(MemorySegment struct, int fieldValue) {
        struct.set(ServiceSessionId$LAYOUT, ServiceSessionId$OFFSET, fieldValue);
    }

    private static final OfInt State$LAYOUT = (OfInt)$LAYOUT.select(groupElement("State"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SERVERSILO_STATE State
     * }
     */
    public static final OfInt State$layout() {
        return State$LAYOUT;
    }

    private static final long State$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SERVERSILO_STATE State
     * }
     */
    public static final long State$offset() {
        return State$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SERVERSILO_STATE State
     * }
     */
    public static int State(MemorySegment struct) {
        return struct.get(State$LAYOUT, State$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SERVERSILO_STATE State
     * }
     */
    public static void State(MemorySegment struct, int fieldValue) {
        struct.set(State$LAYOUT, State$OFFSET, fieldValue);
    }

    private static final OfInt ExitStatus$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ExitStatus"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD ExitStatus
     * }
     */
    public static final OfInt ExitStatus$layout() {
        return ExitStatus$LAYOUT;
    }

    private static final long ExitStatus$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD ExitStatus
     * }
     */
    public static final long ExitStatus$offset() {
        return ExitStatus$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD ExitStatus
     * }
     */
    public static int ExitStatus(MemorySegment struct) {
        return struct.get(ExitStatus$LAYOUT, ExitStatus$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD ExitStatus
     * }
     */
    public static void ExitStatus(MemorySegment struct, int fieldValue) {
        struct.set(ExitStatus$LAYOUT, ExitStatus$OFFSET, fieldValue);
    }

    private static final OfByte IsDownlevelContainer$LAYOUT = (OfByte)$LAYOUT.select(groupElement("IsDownlevelContainer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN IsDownlevelContainer
     * }
     */
    public static final OfByte IsDownlevelContainer$layout() {
        return IsDownlevelContainer$LAYOUT;
    }

    private static final long IsDownlevelContainer$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN IsDownlevelContainer
     * }
     */
    public static final long IsDownlevelContainer$offset() {
        return IsDownlevelContainer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN IsDownlevelContainer
     * }
     */
    public static byte IsDownlevelContainer(MemorySegment struct) {
        return struct.get(IsDownlevelContainer$LAYOUT, IsDownlevelContainer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN IsDownlevelContainer
     * }
     */
    public static void IsDownlevelContainer(MemorySegment struct, byte fieldValue) {
        struct.set(IsDownlevelContainer$LAYOUT, IsDownlevelContainer$OFFSET, fieldValue);
    }

    private static final AddressLayout ApiSetSchema$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ApiSetSchema"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PVOID ApiSetSchema
     * }
     */
    public static final AddressLayout ApiSetSchema$layout() {
        return ApiSetSchema$LAYOUT;
    }

    private static final long ApiSetSchema$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PVOID ApiSetSchema
     * }
     */
    public static final long ApiSetSchema$offset() {
        return ApiSetSchema$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PVOID ApiSetSchema
     * }
     */
    public static MemorySegment ApiSetSchema(MemorySegment struct) {
        return struct.get(ApiSetSchema$LAYOUT, ApiSetSchema$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PVOID ApiSetSchema
     * }
     */
    public static void ApiSetSchema(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ApiSetSchema$LAYOUT, ApiSetSchema$OFFSET, fieldValue);
    }

    private static final AddressLayout HostApiSetSchema$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("HostApiSetSchema"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PVOID HostApiSetSchema
     * }
     */
    public static final AddressLayout HostApiSetSchema$layout() {
        return HostApiSetSchema$LAYOUT;
    }

    private static final long HostApiSetSchema$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PVOID HostApiSetSchema
     * }
     */
    public static final long HostApiSetSchema$offset() {
        return HostApiSetSchema$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PVOID HostApiSetSchema
     * }
     */
    public static MemorySegment HostApiSetSchema(MemorySegment struct) {
        return struct.get(HostApiSetSchema$LAYOUT, HostApiSetSchema$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PVOID HostApiSetSchema
     * }
     */
    public static void HostApiSetSchema(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(HostApiSetSchema$LAYOUT, HostApiSetSchema$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

