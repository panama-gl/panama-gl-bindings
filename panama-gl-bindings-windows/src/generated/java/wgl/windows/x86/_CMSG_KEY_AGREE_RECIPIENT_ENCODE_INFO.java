// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO {
 *     DWORD cbSize;
 *     CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
 *     void *pvKeyEncryptionAuxInfo;
 *     CRYPT_ALGORITHM_IDENTIFIER KeyWrapAlgorithm;
 *     void *pvKeyWrapAuxInfo;
 *     HCRYPTPROV_LEGACY hCryptProv;
 *     DWORD dwKeySpec;
 *     DWORD dwKeyChoice;
 *     union {
 *         PCRYPT_ALGORITHM_IDENTIFIER pEphemeralAlgorithm;
 *         PCERT_ID pSenderId;
 *     };
 *     CRYPT_DATA_BLOB UserKeyingMaterial;
 *     DWORD cRecipientEncryptedKeys;
 *     PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO *rgpRecipientEncryptedKeys;
 * }
 * }
 */
public class _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO {

    _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("cbSize"),
        MemoryLayout.paddingLayout(4),
        _CRYPT_ALGORITHM_IDENTIFIER.layout().withName("KeyEncryptionAlgorithm"),
        wgl_h.C_POINTER.withName("pvKeyEncryptionAuxInfo"),
        _CRYPT_ALGORITHM_IDENTIFIER.layout().withName("KeyWrapAlgorithm"),
        wgl_h.C_POINTER.withName("pvKeyWrapAuxInfo"),
        wgl_h.C_LONG_LONG.withName("hCryptProv"),
        wgl_h.C_LONG.withName("dwKeySpec"),
        wgl_h.C_LONG.withName("dwKeyChoice"),
        MemoryLayout.unionLayout(
            wgl_h.C_POINTER.withName("pEphemeralAlgorithm"),
            wgl_h.C_POINTER.withName("pSenderId")
        ).withName("$anon$6946:5"),
        _CRYPTOAPI_BLOB.layout().withName("UserKeyingMaterial"),
        wgl_h.C_LONG.withName("cRecipientEncryptedKeys"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_POINTER.withName("rgpRecipientEncryptedKeys")
    ).withName("_CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt cbSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static final OfInt cbSize$layout() {
        return cbSize$LAYOUT;
    }

    private static final long cbSize$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static final long cbSize$offset() {
        return cbSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static int cbSize(MemorySegment struct) {
        return struct.get(cbSize$LAYOUT, cbSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static void cbSize(MemorySegment struct, int fieldValue) {
        struct.set(cbSize$LAYOUT, cbSize$OFFSET, fieldValue);
    }

    private static final GroupLayout KeyEncryptionAlgorithm$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("KeyEncryptionAlgorithm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm
     * }
     */
    public static final GroupLayout KeyEncryptionAlgorithm$layout() {
        return KeyEncryptionAlgorithm$LAYOUT;
    }

    private static final long KeyEncryptionAlgorithm$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm
     * }
     */
    public static final long KeyEncryptionAlgorithm$offset() {
        return KeyEncryptionAlgorithm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm
     * }
     */
    public static MemorySegment KeyEncryptionAlgorithm(MemorySegment struct) {
        return struct.asSlice(KeyEncryptionAlgorithm$OFFSET, KeyEncryptionAlgorithm$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm
     * }
     */
    public static void KeyEncryptionAlgorithm(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, KeyEncryptionAlgorithm$OFFSET, KeyEncryptionAlgorithm$LAYOUT.byteSize());
    }

    private static final AddressLayout pvKeyEncryptionAuxInfo$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pvKeyEncryptionAuxInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pvKeyEncryptionAuxInfo
     * }
     */
    public static final AddressLayout pvKeyEncryptionAuxInfo$layout() {
        return pvKeyEncryptionAuxInfo$LAYOUT;
    }

    private static final long pvKeyEncryptionAuxInfo$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pvKeyEncryptionAuxInfo
     * }
     */
    public static final long pvKeyEncryptionAuxInfo$offset() {
        return pvKeyEncryptionAuxInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pvKeyEncryptionAuxInfo
     * }
     */
    public static MemorySegment pvKeyEncryptionAuxInfo(MemorySegment struct) {
        return struct.get(pvKeyEncryptionAuxInfo$LAYOUT, pvKeyEncryptionAuxInfo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pvKeyEncryptionAuxInfo
     * }
     */
    public static void pvKeyEncryptionAuxInfo(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pvKeyEncryptionAuxInfo$LAYOUT, pvKeyEncryptionAuxInfo$OFFSET, fieldValue);
    }

    private static final GroupLayout KeyWrapAlgorithm$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("KeyWrapAlgorithm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CRYPT_ALGORITHM_IDENTIFIER KeyWrapAlgorithm
     * }
     */
    public static final GroupLayout KeyWrapAlgorithm$layout() {
        return KeyWrapAlgorithm$LAYOUT;
    }

    private static final long KeyWrapAlgorithm$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CRYPT_ALGORITHM_IDENTIFIER KeyWrapAlgorithm
     * }
     */
    public static final long KeyWrapAlgorithm$offset() {
        return KeyWrapAlgorithm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CRYPT_ALGORITHM_IDENTIFIER KeyWrapAlgorithm
     * }
     */
    public static MemorySegment KeyWrapAlgorithm(MemorySegment struct) {
        return struct.asSlice(KeyWrapAlgorithm$OFFSET, KeyWrapAlgorithm$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CRYPT_ALGORITHM_IDENTIFIER KeyWrapAlgorithm
     * }
     */
    public static void KeyWrapAlgorithm(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, KeyWrapAlgorithm$OFFSET, KeyWrapAlgorithm$LAYOUT.byteSize());
    }

    private static final AddressLayout pvKeyWrapAuxInfo$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pvKeyWrapAuxInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pvKeyWrapAuxInfo
     * }
     */
    public static final AddressLayout pvKeyWrapAuxInfo$layout() {
        return pvKeyWrapAuxInfo$LAYOUT;
    }

    private static final long pvKeyWrapAuxInfo$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pvKeyWrapAuxInfo
     * }
     */
    public static final long pvKeyWrapAuxInfo$offset() {
        return pvKeyWrapAuxInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pvKeyWrapAuxInfo
     * }
     */
    public static MemorySegment pvKeyWrapAuxInfo(MemorySegment struct) {
        return struct.get(pvKeyWrapAuxInfo$LAYOUT, pvKeyWrapAuxInfo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pvKeyWrapAuxInfo
     * }
     */
    public static void pvKeyWrapAuxInfo(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pvKeyWrapAuxInfo$LAYOUT, pvKeyWrapAuxInfo$OFFSET, fieldValue);
    }

    private static final OfLong hCryptProv$LAYOUT = (OfLong)$LAYOUT.select(groupElement("hCryptProv"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HCRYPTPROV_LEGACY hCryptProv
     * }
     */
    public static final OfLong hCryptProv$layout() {
        return hCryptProv$LAYOUT;
    }

    private static final long hCryptProv$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HCRYPTPROV_LEGACY hCryptProv
     * }
     */
    public static final long hCryptProv$offset() {
        return hCryptProv$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HCRYPTPROV_LEGACY hCryptProv
     * }
     */
    public static long hCryptProv(MemorySegment struct) {
        return struct.get(hCryptProv$LAYOUT, hCryptProv$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HCRYPTPROV_LEGACY hCryptProv
     * }
     */
    public static void hCryptProv(MemorySegment struct, long fieldValue) {
        struct.set(hCryptProv$LAYOUT, hCryptProv$OFFSET, fieldValue);
    }

    private static final OfInt dwKeySpec$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwKeySpec"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwKeySpec
     * }
     */
    public static final OfInt dwKeySpec$layout() {
        return dwKeySpec$LAYOUT;
    }

    private static final long dwKeySpec$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwKeySpec
     * }
     */
    public static final long dwKeySpec$offset() {
        return dwKeySpec$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwKeySpec
     * }
     */
    public static int dwKeySpec(MemorySegment struct) {
        return struct.get(dwKeySpec$LAYOUT, dwKeySpec$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwKeySpec
     * }
     */
    public static void dwKeySpec(MemorySegment struct, int fieldValue) {
        struct.set(dwKeySpec$LAYOUT, dwKeySpec$OFFSET, fieldValue);
    }

    private static final OfInt dwKeyChoice$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwKeyChoice"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwKeyChoice
     * }
     */
    public static final OfInt dwKeyChoice$layout() {
        return dwKeyChoice$LAYOUT;
    }

    private static final long dwKeyChoice$OFFSET = 84;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwKeyChoice
     * }
     */
    public static final long dwKeyChoice$offset() {
        return dwKeyChoice$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwKeyChoice
     * }
     */
    public static int dwKeyChoice(MemorySegment struct) {
        return struct.get(dwKeyChoice$LAYOUT, dwKeyChoice$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwKeyChoice
     * }
     */
    public static void dwKeyChoice(MemorySegment struct, int fieldValue) {
        struct.set(dwKeyChoice$LAYOUT, dwKeyChoice$OFFSET, fieldValue);
    }

    private static final AddressLayout pEphemeralAlgorithm$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("$anon$6946:5"), groupElement("pEphemeralAlgorithm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PCRYPT_ALGORITHM_IDENTIFIER pEphemeralAlgorithm
     * }
     */
    public static final AddressLayout pEphemeralAlgorithm$layout() {
        return pEphemeralAlgorithm$LAYOUT;
    }

    private static final long pEphemeralAlgorithm$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PCRYPT_ALGORITHM_IDENTIFIER pEphemeralAlgorithm
     * }
     */
    public static final long pEphemeralAlgorithm$offset() {
        return pEphemeralAlgorithm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PCRYPT_ALGORITHM_IDENTIFIER pEphemeralAlgorithm
     * }
     */
    public static MemorySegment pEphemeralAlgorithm(MemorySegment struct) {
        return struct.get(pEphemeralAlgorithm$LAYOUT, pEphemeralAlgorithm$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PCRYPT_ALGORITHM_IDENTIFIER pEphemeralAlgorithm
     * }
     */
    public static void pEphemeralAlgorithm(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pEphemeralAlgorithm$LAYOUT, pEphemeralAlgorithm$OFFSET, fieldValue);
    }

    private static final AddressLayout pSenderId$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("$anon$6946:5"), groupElement("pSenderId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PCERT_ID pSenderId
     * }
     */
    public static final AddressLayout pSenderId$layout() {
        return pSenderId$LAYOUT;
    }

    private static final long pSenderId$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PCERT_ID pSenderId
     * }
     */
    public static final long pSenderId$offset() {
        return pSenderId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PCERT_ID pSenderId
     * }
     */
    public static MemorySegment pSenderId(MemorySegment struct) {
        return struct.get(pSenderId$LAYOUT, pSenderId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PCERT_ID pSenderId
     * }
     */
    public static void pSenderId(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pSenderId$LAYOUT, pSenderId$OFFSET, fieldValue);
    }

    private static final GroupLayout UserKeyingMaterial$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("UserKeyingMaterial"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CRYPT_DATA_BLOB UserKeyingMaterial
     * }
     */
    public static final GroupLayout UserKeyingMaterial$layout() {
        return UserKeyingMaterial$LAYOUT;
    }

    private static final long UserKeyingMaterial$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CRYPT_DATA_BLOB UserKeyingMaterial
     * }
     */
    public static final long UserKeyingMaterial$offset() {
        return UserKeyingMaterial$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CRYPT_DATA_BLOB UserKeyingMaterial
     * }
     */
    public static MemorySegment UserKeyingMaterial(MemorySegment struct) {
        return struct.asSlice(UserKeyingMaterial$OFFSET, UserKeyingMaterial$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CRYPT_DATA_BLOB UserKeyingMaterial
     * }
     */
    public static void UserKeyingMaterial(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, UserKeyingMaterial$OFFSET, UserKeyingMaterial$LAYOUT.byteSize());
    }

    private static final OfInt cRecipientEncryptedKeys$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cRecipientEncryptedKeys"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD cRecipientEncryptedKeys
     * }
     */
    public static final OfInt cRecipientEncryptedKeys$layout() {
        return cRecipientEncryptedKeys$LAYOUT;
    }

    private static final long cRecipientEncryptedKeys$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD cRecipientEncryptedKeys
     * }
     */
    public static final long cRecipientEncryptedKeys$offset() {
        return cRecipientEncryptedKeys$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD cRecipientEncryptedKeys
     * }
     */
    public static int cRecipientEncryptedKeys(MemorySegment struct) {
        return struct.get(cRecipientEncryptedKeys$LAYOUT, cRecipientEncryptedKeys$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD cRecipientEncryptedKeys
     * }
     */
    public static void cRecipientEncryptedKeys(MemorySegment struct, int fieldValue) {
        struct.set(cRecipientEncryptedKeys$LAYOUT, cRecipientEncryptedKeys$OFFSET, fieldValue);
    }

    private static final AddressLayout rgpRecipientEncryptedKeys$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("rgpRecipientEncryptedKeys"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO *rgpRecipientEncryptedKeys
     * }
     */
    public static final AddressLayout rgpRecipientEncryptedKeys$layout() {
        return rgpRecipientEncryptedKeys$LAYOUT;
    }

    private static final long rgpRecipientEncryptedKeys$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO *rgpRecipientEncryptedKeys
     * }
     */
    public static final long rgpRecipientEncryptedKeys$offset() {
        return rgpRecipientEncryptedKeys$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO *rgpRecipientEncryptedKeys
     * }
     */
    public static MemorySegment rgpRecipientEncryptedKeys(MemorySegment struct) {
        return struct.get(rgpRecipientEncryptedKeys$LAYOUT, rgpRecipientEncryptedKeys$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO *rgpRecipientEncryptedKeys
     * }
     */
    public static void rgpRecipientEncryptedKeys(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(rgpRecipientEncryptedKeys$LAYOUT, rgpRecipientEncryptedKeys$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

