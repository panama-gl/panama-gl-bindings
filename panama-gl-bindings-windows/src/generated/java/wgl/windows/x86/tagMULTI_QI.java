// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tagMULTI_QI {
 *     const IID *pIID;
 *     IUnknown *pItf;
 *     HRESULT hr;
 * }
 * }
 */
public class tagMULTI_QI {

    tagMULTI_QI() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("pIID"),
        wgl_h.C_POINTER.withName("pItf"),
        wgl_h.C_LONG.withName("hr"),
        MemoryLayout.paddingLayout(4)
    ).withName("tagMULTI_QI");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout pIID$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pIID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const IID *pIID
     * }
     */
    public static final AddressLayout pIID$layout() {
        return pIID$LAYOUT;
    }

    private static final long pIID$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const IID *pIID
     * }
     */
    public static final long pIID$offset() {
        return pIID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const IID *pIID
     * }
     */
    public static MemorySegment pIID(MemorySegment struct) {
        return struct.get(pIID$LAYOUT, pIID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const IID *pIID
     * }
     */
    public static void pIID(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pIID$LAYOUT, pIID$OFFSET, fieldValue);
    }

    private static final AddressLayout pItf$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pItf"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * IUnknown *pItf
     * }
     */
    public static final AddressLayout pItf$layout() {
        return pItf$LAYOUT;
    }

    private static final long pItf$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * IUnknown *pItf
     * }
     */
    public static final long pItf$offset() {
        return pItf$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * IUnknown *pItf
     * }
     */
    public static MemorySegment pItf(MemorySegment struct) {
        return struct.get(pItf$LAYOUT, pItf$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * IUnknown *pItf
     * }
     */
    public static void pItf(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pItf$LAYOUT, pItf$OFFSET, fieldValue);
    }

    private static final OfInt hr$LAYOUT = (OfInt)$LAYOUT.select(groupElement("hr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT hr
     * }
     */
    public static final OfInt hr$layout() {
        return hr$LAYOUT;
    }

    private static final long hr$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT hr
     * }
     */
    public static final long hr$offset() {
        return hr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT hr
     * }
     */
    public static int hr(MemorySegment struct) {
        return struct.get(hr$LAYOUT, hr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT hr
     * }
     */
    public static void hr(MemorySegment struct, int fieldValue) {
        struct.set(hr$LAYOUT, hr$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

