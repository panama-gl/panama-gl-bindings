// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tagNC_ADDRESS {
 *     struct NET_ADDRESS_INFO_ *pAddrInfo;
 *     USHORT PortNumber;
 *     BYTE PrefixLength;
 * }
 * }
 */
public class tagNC_ADDRESS {

    tagNC_ADDRESS() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("pAddrInfo"),
        wgl_h.C_SHORT.withName("PortNumber"),
        wgl_h.C_CHAR.withName("PrefixLength"),
        MemoryLayout.paddingLayout(5)
    ).withName("tagNC_ADDRESS");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout pAddrInfo$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pAddrInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct NET_ADDRESS_INFO_ *pAddrInfo
     * }
     */
    public static final AddressLayout pAddrInfo$layout() {
        return pAddrInfo$LAYOUT;
    }

    private static final long pAddrInfo$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct NET_ADDRESS_INFO_ *pAddrInfo
     * }
     */
    public static final long pAddrInfo$offset() {
        return pAddrInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct NET_ADDRESS_INFO_ *pAddrInfo
     * }
     */
    public static MemorySegment pAddrInfo(MemorySegment struct) {
        return struct.get(pAddrInfo$LAYOUT, pAddrInfo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct NET_ADDRESS_INFO_ *pAddrInfo
     * }
     */
    public static void pAddrInfo(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pAddrInfo$LAYOUT, pAddrInfo$OFFSET, fieldValue);
    }

    private static final OfShort PortNumber$LAYOUT = (OfShort)$LAYOUT.select(groupElement("PortNumber"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * USHORT PortNumber
     * }
     */
    public static final OfShort PortNumber$layout() {
        return PortNumber$LAYOUT;
    }

    private static final long PortNumber$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * USHORT PortNumber
     * }
     */
    public static final long PortNumber$offset() {
        return PortNumber$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * USHORT PortNumber
     * }
     */
    public static short PortNumber(MemorySegment struct) {
        return struct.get(PortNumber$LAYOUT, PortNumber$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * USHORT PortNumber
     * }
     */
    public static void PortNumber(MemorySegment struct, short fieldValue) {
        struct.set(PortNumber$LAYOUT, PortNumber$OFFSET, fieldValue);
    }

    private static final OfByte PrefixLength$LAYOUT = (OfByte)$LAYOUT.select(groupElement("PrefixLength"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE PrefixLength
     * }
     */
    public static final OfByte PrefixLength$layout() {
        return PrefixLength$LAYOUT;
    }

    private static final long PrefixLength$OFFSET = 10;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE PrefixLength
     * }
     */
    public static final long PrefixLength$offset() {
        return PrefixLength$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE PrefixLength
     * }
     */
    public static byte PrefixLength(MemorySegment struct) {
        return struct.get(PrefixLength$LAYOUT, PrefixLength$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE PrefixLength
     * }
     */
    public static void PrefixLength(MemorySegment struct, byte fieldValue) {
        struct.set(PrefixLength$LAYOUT, PrefixLength$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

