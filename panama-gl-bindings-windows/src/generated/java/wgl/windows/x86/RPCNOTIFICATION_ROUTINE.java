// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface RPCNOTIFICATION_ROUTINE {

    void apply(java.lang.foreign.MemoryAddress pAsync, java.lang.foreign.MemoryAddress Context, int Event);
    static MemorySegment allocate(RPCNOTIFICATION_ROUTINE fi, MemorySession session) {
        return RuntimeHelper.upcallStub(RPCNOTIFICATION_ROUTINE.class, fi, constants$704.RPCNOTIFICATION_ROUTINE$FUNC, session);
    }
    static RPCNOTIFICATION_ROUTINE ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _pAsync, java.lang.foreign.MemoryAddress _Context, int _Event) -> {
            try {
                constants$704.RPCNOTIFICATION_ROUTINE$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_pAsync, (java.lang.foreign.Addressable)_Context, _Event);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


