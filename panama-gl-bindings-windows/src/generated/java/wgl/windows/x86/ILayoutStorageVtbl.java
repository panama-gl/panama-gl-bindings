// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ILayoutStorageVtbl {
 *     HRESULT (*QueryInterface)(ILayoutStorage *, const IID *const, void **) __attribute__((stdcall));
 *     ULONG (*AddRef)(ILayoutStorage *) __attribute__((stdcall));
 *     ULONG (*Release)(ILayoutStorage *) __attribute__((stdcall));
 *     HRESULT (*LayoutScript)(ILayoutStorage *, StorageLayout *, DWORD, DWORD) __attribute__((stdcall));
 *     HRESULT (*BeginMonitor)(ILayoutStorage *) __attribute__((stdcall));
 *     HRESULT (*EndMonitor)(ILayoutStorage *) __attribute__((stdcall));
 *     HRESULT (*ReLayoutDocfile)(ILayoutStorage *, OLECHAR *) __attribute__((stdcall));
 *     HRESULT (*ReLayoutDocfileOnILockBytes)(ILayoutStorage *, ILockBytes *) __attribute__((stdcall));
 * }
 * }
 */
public class ILayoutStorageVtbl {

    ILayoutStorageVtbl() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("QueryInterface"),
        wgl_h.C_POINTER.withName("AddRef"),
        wgl_h.C_POINTER.withName("Release"),
        wgl_h.C_POINTER.withName("LayoutScript"),
        wgl_h.C_POINTER.withName("BeginMonitor"),
        wgl_h.C_POINTER.withName("EndMonitor"),
        wgl_h.C_POINTER.withName("ReLayoutDocfile"),
        wgl_h.C_POINTER.withName("ReLayoutDocfileOnILockBytes")
    ).withName("ILayoutStorageVtbl");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(ILayoutStorage *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static class QueryInterface {

        QueryInterface() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(QueryInterface.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(QueryInterface.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout QueryInterface$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("QueryInterface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(ILayoutStorage *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout QueryInterface$layout() {
        return QueryInterface$LAYOUT;
    }

    private static final long QueryInterface$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(ILayoutStorage *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final long QueryInterface$offset() {
        return QueryInterface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(ILayoutStorage *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment QueryInterface(MemorySegment struct) {
        return struct.get(QueryInterface$LAYOUT, QueryInterface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(ILayoutStorage *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static void QueryInterface(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(QueryInterface$LAYOUT, QueryInterface$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*AddRef)(ILayoutStorage *) __attribute__((stdcall))
     * }
     */
    public static class AddRef {

        AddRef() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(AddRef.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(AddRef.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout AddRef$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("AddRef"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(ILayoutStorage *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout AddRef$layout() {
        return AddRef$LAYOUT;
    }

    private static final long AddRef$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(ILayoutStorage *) __attribute__((stdcall))
     * }
     */
    public static final long AddRef$offset() {
        return AddRef$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(ILayoutStorage *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment AddRef(MemorySegment struct) {
        return struct.get(AddRef$LAYOUT, AddRef$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(ILayoutStorage *) __attribute__((stdcall))
     * }
     */
    public static void AddRef(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(AddRef$LAYOUT, AddRef$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*Release)(ILayoutStorage *) __attribute__((stdcall))
     * }
     */
    public static class Release {

        Release() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Release.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Release.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Release$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Release"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*Release)(ILayoutStorage *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Release$layout() {
        return Release$LAYOUT;
    }

    private static final long Release$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*Release)(ILayoutStorage *) __attribute__((stdcall))
     * }
     */
    public static final long Release$offset() {
        return Release$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(ILayoutStorage *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Release(MemorySegment struct) {
        return struct.get(Release$LAYOUT, Release$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(ILayoutStorage *) __attribute__((stdcall))
     * }
     */
    public static void Release(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Release$LAYOUT, Release$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*LayoutScript)(ILayoutStorage *, StorageLayout *, DWORD, DWORD) __attribute__((stdcall))
     * }
     */
    public static class LayoutScript {

        LayoutScript() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, int _x2, int _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(LayoutScript.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(LayoutScript.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, int _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout LayoutScript$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("LayoutScript"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*LayoutScript)(ILayoutStorage *, StorageLayout *, DWORD, DWORD) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout LayoutScript$layout() {
        return LayoutScript$LAYOUT;
    }

    private static final long LayoutScript$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*LayoutScript)(ILayoutStorage *, StorageLayout *, DWORD, DWORD) __attribute__((stdcall))
     * }
     */
    public static final long LayoutScript$offset() {
        return LayoutScript$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*LayoutScript)(ILayoutStorage *, StorageLayout *, DWORD, DWORD) __attribute__((stdcall))
     * }
     */
    public static MemorySegment LayoutScript(MemorySegment struct) {
        return struct.get(LayoutScript$LAYOUT, LayoutScript$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*LayoutScript)(ILayoutStorage *, StorageLayout *, DWORD, DWORD) __attribute__((stdcall))
     * }
     */
    public static void LayoutScript(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(LayoutScript$LAYOUT, LayoutScript$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*BeginMonitor)(ILayoutStorage *) __attribute__((stdcall))
     * }
     */
    public static class BeginMonitor {

        BeginMonitor() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(BeginMonitor.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(BeginMonitor.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout BeginMonitor$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("BeginMonitor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*BeginMonitor)(ILayoutStorage *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout BeginMonitor$layout() {
        return BeginMonitor$LAYOUT;
    }

    private static final long BeginMonitor$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*BeginMonitor)(ILayoutStorage *) __attribute__((stdcall))
     * }
     */
    public static final long BeginMonitor$offset() {
        return BeginMonitor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*BeginMonitor)(ILayoutStorage *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment BeginMonitor(MemorySegment struct) {
        return struct.get(BeginMonitor$LAYOUT, BeginMonitor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*BeginMonitor)(ILayoutStorage *) __attribute__((stdcall))
     * }
     */
    public static void BeginMonitor(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(BeginMonitor$LAYOUT, BeginMonitor$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*EndMonitor)(ILayoutStorage *) __attribute__((stdcall))
     * }
     */
    public static class EndMonitor {

        EndMonitor() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(EndMonitor.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(EndMonitor.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout EndMonitor$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("EndMonitor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*EndMonitor)(ILayoutStorage *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout EndMonitor$layout() {
        return EndMonitor$LAYOUT;
    }

    private static final long EndMonitor$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*EndMonitor)(ILayoutStorage *) __attribute__((stdcall))
     * }
     */
    public static final long EndMonitor$offset() {
        return EndMonitor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*EndMonitor)(ILayoutStorage *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment EndMonitor(MemorySegment struct) {
        return struct.get(EndMonitor$LAYOUT, EndMonitor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*EndMonitor)(ILayoutStorage *) __attribute__((stdcall))
     * }
     */
    public static void EndMonitor(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(EndMonitor$LAYOUT, EndMonitor$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*ReLayoutDocfile)(ILayoutStorage *, OLECHAR *) __attribute__((stdcall))
     * }
     */
    public static class ReLayoutDocfile {

        ReLayoutDocfile() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(ReLayoutDocfile.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(ReLayoutDocfile.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout ReLayoutDocfile$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ReLayoutDocfile"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*ReLayoutDocfile)(ILayoutStorage *, OLECHAR *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout ReLayoutDocfile$layout() {
        return ReLayoutDocfile$LAYOUT;
    }

    private static final long ReLayoutDocfile$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*ReLayoutDocfile)(ILayoutStorage *, OLECHAR *) __attribute__((stdcall))
     * }
     */
    public static final long ReLayoutDocfile$offset() {
        return ReLayoutDocfile$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*ReLayoutDocfile)(ILayoutStorage *, OLECHAR *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment ReLayoutDocfile(MemorySegment struct) {
        return struct.get(ReLayoutDocfile$LAYOUT, ReLayoutDocfile$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*ReLayoutDocfile)(ILayoutStorage *, OLECHAR *) __attribute__((stdcall))
     * }
     */
    public static void ReLayoutDocfile(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ReLayoutDocfile$LAYOUT, ReLayoutDocfile$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*ReLayoutDocfileOnILockBytes)(ILayoutStorage *, ILockBytes *) __attribute__((stdcall))
     * }
     */
    public static class ReLayoutDocfileOnILockBytes {

        ReLayoutDocfileOnILockBytes() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(ReLayoutDocfileOnILockBytes.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(ReLayoutDocfileOnILockBytes.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout ReLayoutDocfileOnILockBytes$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ReLayoutDocfileOnILockBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*ReLayoutDocfileOnILockBytes)(ILayoutStorage *, ILockBytes *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout ReLayoutDocfileOnILockBytes$layout() {
        return ReLayoutDocfileOnILockBytes$LAYOUT;
    }

    private static final long ReLayoutDocfileOnILockBytes$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*ReLayoutDocfileOnILockBytes)(ILayoutStorage *, ILockBytes *) __attribute__((stdcall))
     * }
     */
    public static final long ReLayoutDocfileOnILockBytes$offset() {
        return ReLayoutDocfileOnILockBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*ReLayoutDocfileOnILockBytes)(ILayoutStorage *, ILockBytes *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment ReLayoutDocfileOnILockBytes(MemorySegment struct) {
        return struct.get(ReLayoutDocfileOnILockBytes$LAYOUT, ReLayoutDocfileOnILockBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*ReLayoutDocfileOnILockBytes)(ILayoutStorage *, ILockBytes *) __attribute__((stdcall))
     * }
     */
    public static void ReLayoutDocfileOnILockBytes(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ReLayoutDocfileOnILockBytes$LAYOUT, ReLayoutDocfileOnILockBytes$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

