// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _FILE_REGION_OUTPUT {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Flags"),
        Constants$root.C_LONG$LAYOUT.withName("TotalRegionEntryCount"),
        Constants$root.C_LONG$LAYOUT.withName("RegionEntryCount"),
        Constants$root.C_LONG$LAYOUT.withName("Reserved"),
        MemoryLayout.sequenceLayout(1, MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("FileOffset"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("Length"),
            Constants$root.C_LONG$LAYOUT.withName("Usage"),
            Constants$root.C_LONG$LAYOUT.withName("Reserved")
        ).withName("_FILE_REGION_INFO")).withName("Region")
    ).withName("_FILE_REGION_OUTPUT");
    public static MemoryLayout $LAYOUT() {
        return _FILE_REGION_OUTPUT.$struct$LAYOUT;
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return _FILE_REGION_OUTPUT.Flags$VH;
    }
    public static int Flags$get(MemorySegment seg) {
        return (int)_FILE_REGION_OUTPUT.Flags$VH.get(seg);
    }
    public static void Flags$set( MemorySegment seg, int x) {
        _FILE_REGION_OUTPUT.Flags$VH.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)_FILE_REGION_OUTPUT.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        _FILE_REGION_OUTPUT.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle TotalRegionEntryCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("TotalRegionEntryCount"));
    public static VarHandle TotalRegionEntryCount$VH() {
        return _FILE_REGION_OUTPUT.TotalRegionEntryCount$VH;
    }
    public static int TotalRegionEntryCount$get(MemorySegment seg) {
        return (int)_FILE_REGION_OUTPUT.TotalRegionEntryCount$VH.get(seg);
    }
    public static void TotalRegionEntryCount$set( MemorySegment seg, int x) {
        _FILE_REGION_OUTPUT.TotalRegionEntryCount$VH.set(seg, x);
    }
    public static int TotalRegionEntryCount$get(MemorySegment seg, long index) {
        return (int)_FILE_REGION_OUTPUT.TotalRegionEntryCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void TotalRegionEntryCount$set(MemorySegment seg, long index, int x) {
        _FILE_REGION_OUTPUT.TotalRegionEntryCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle RegionEntryCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RegionEntryCount"));
    public static VarHandle RegionEntryCount$VH() {
        return _FILE_REGION_OUTPUT.RegionEntryCount$VH;
    }
    public static int RegionEntryCount$get(MemorySegment seg) {
        return (int)_FILE_REGION_OUTPUT.RegionEntryCount$VH.get(seg);
    }
    public static void RegionEntryCount$set( MemorySegment seg, int x) {
        _FILE_REGION_OUTPUT.RegionEntryCount$VH.set(seg, x);
    }
    public static int RegionEntryCount$get(MemorySegment seg, long index) {
        return (int)_FILE_REGION_OUTPUT.RegionEntryCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RegionEntryCount$set(MemorySegment seg, long index, int x) {
        _FILE_REGION_OUTPUT.RegionEntryCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Reserved$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Reserved"));
    public static VarHandle Reserved$VH() {
        return _FILE_REGION_OUTPUT.Reserved$VH;
    }
    public static int Reserved$get(MemorySegment seg) {
        return (int)_FILE_REGION_OUTPUT.Reserved$VH.get(seg);
    }
    public static void Reserved$set( MemorySegment seg, int x) {
        _FILE_REGION_OUTPUT.Reserved$VH.set(seg, x);
    }
    public static int Reserved$get(MemorySegment seg, long index) {
        return (int)_FILE_REGION_OUTPUT.Reserved$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved$set(MemorySegment seg, long index, int x) {
        _FILE_REGION_OUTPUT.Reserved$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Region$slice(MemorySegment seg) {
        return seg.asSlice(16, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


